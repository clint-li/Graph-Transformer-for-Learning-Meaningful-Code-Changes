( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( IF IF ( COND sshd ) COND sshd ( THEN THEN (  modules.add ( new TYPE_3 ( ) ) )  modules.add ( new TYPE_3 ( ) ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  modules.add ( new TYPE_4 ( ) ) )  modules.add ( new TYPE_4 ( ) ) ) THEN THEN ( ELSE ELSE (  modules.add ( new TYPE_5 ( ) ) )  modules.add ( new TYPE_5 ( ) ) (  modules.add ( VAR_2 . METHOD_2 ( VAR_3 class ) ) )  modules.add ( VAR_2 . METHOD_2 ( VAR_3 class ) ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  modules.add ( new TYPE_6 ( ) ) )  modules.add ( new TYPE_6 ( ) ) ) ELSE ELSE ) IF IF (  return VAR_4 . METHOD_3 ( modules ) ; )  return VAR_4 . METHOD_3 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( token , changes , VAR_2 ) )  VAR_1 . METHOD_1 ( token , changes , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e . getMessage ( ) , e ) ; )  throw new TYPE_2 ( e . getMessage ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_2 , e ) ; )  throw new TYPE_2 ( STRING_2 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 (  VAR_2 = VAR_2 . METHOD_2 ( ) )  VAR_2 = VAR_2 . METHOD_2 ( ) ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 , VAR_2 ) ; )  throw new TYPE_4 ( STRING_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_4 ( ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ) ) ELSE ELSE ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  close ( ) )  close ( ) (  VAR_1 = repo . METHOD_2 ( ) )  VAR_1 = repo . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ref ) NAME ref ( INIT = repo . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) INIT = repo . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ref == null ) COND ref == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_3 = rw . parseCommit ( ref . METHOD_5 ( ) . METHOD_6 ( ) ) )  VAR_3 = rw . parseCommit ( ref . METHOD_5 ( ) . METHOD_6 ( ) ) (  notes = TYPE_2 . METHOD_7 ( VAR_1 , VAR_3 ) )  notes = TYPE_2 . METHOD_7 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; )  return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( ) throws java.io.IOException { try { return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; } catch ( TYPE_6 e ) { return VAR_1 ; } } } ; )  return new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( ) throws java.io.IOException { try { return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; } catch ( TYPE_6 e ) { return VAR_1 ; } } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Status ) TYPE TYPE_1.Status ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = result . METHOD_2 ( ref ) ) INIT = result . METHOD_2 ( ref ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( message ( VAR_3 ) ) . isEqualTo ( VAR_3 . getStatus ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( message ( VAR_3 ) ) . isEqualTo ( VAR_3 . getStatus ( ) ) (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_3 . getMessage ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_3 . getMessage ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  rsp . METHOD_2 ( STRING_1 ) )  rsp . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME out ) NAME out ( INIT = rsp . METHOD_4 ( ) ) INIT = rsp . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_5 . METHOD_5 ( in , out ) )  TYPE_5 . METHOD_5 ( in , out ) ) BLOCK BLOCK ( FINALLY FINALLY (  out . close ( ) )  out . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  in . close ( ) )  in . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME p ) NAME p ( INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) VAR VAR (  return TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ; )  return TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = getChange ( VAR_1 . getChange ( ) ) ) INIT = getChange ( VAR_1 . getChange ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME event ) NAME event ( INIT = new TYPE_2 ( change ) ) INIT = new TYPE_2 ( change ) ) VAR VAR (  event . change = METHOD_2 ( change ) )  event . change = METHOD_2 ( change ) (  VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = VAR_1 . METHOD_5 ( ) )  VAR_3 = VAR_1 . METHOD_5 ( ) (  VAR_4 . get ( ) . METHOD_6 ( change , event , db . get ( ) ) )  VAR_4 . get ( ) . METHOD_6 ( change , event , db . get ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( STRING_1 , e ) )  VAR_5 . error ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  config . METHOD_2 ( STRING_1 , null , STRING_2 , VAR_2 ) )  config . METHOD_2 ( STRING_1 , null , STRING_2 , VAR_2 ) (  config . METHOD_3 ( STRING_1 , null , STRING_3 , STRING_4 ) )  config . METHOD_3 ( STRING_1 , null , STRING_3 , STRING_4 ) (  config . METHOD_3 ( STRING_1 , null , STRING_5 , STRING_6 ) )  config . METHOD_3 ( STRING_1 , null , STRING_5 , STRING_6 ) (  config . METHOD_3 ( STRING_1 , null , STRING_7 , VAR_1 ) )  config . METHOD_3 ( STRING_1 , null , STRING_7 , VAR_1 ) (  config . METHOD_4 ( STRING_1 , STRING_8 , STRING_9 , true ) )  config . METHOD_4 ( STRING_1 , STRING_8 , STRING_9 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( project , STRING_1 ) )  METHOD_2 ( project , STRING_1 ) (  METHOD_3 ( user ) )  METHOD_3 ( user ) (  VAR_1 . METHOD_4 ( VAR_2 class ) )  VAR_1 . METHOD_4 ( VAR_2 class ) (  VAR_3 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( ) . get ( ) )  VAR_3 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( ) . get ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME user ) NAME user ( INIT = user ( STRING_2 , null ) ) INIT = user ( STRING_2 , null ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = create ( ) . METHOD_4 ( user ) ) INIT = create ( ) . METHOD_4 ( user ) ) VAR VAR (  METHOD_5 ( r ) )  METHOD_5 ( r ) (  assertEquals ( VAR_2 . getName ( ) , r . name ) )  assertEquals ( VAR_2 . getName ( ) , r . name ) (  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) )  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) (  TYPE_1 . METHOD_7 ( VAR_1 ) )  TYPE_1 . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_5 ( VAR_2 ) ; )  return METHOD_5 ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; )  throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD (  return java.util.Collections . METHOD_2 ( TYPE_3 . METHOD_3 ( java.util.Collections . METHOD_4 ( VAR_1 . METHOD_1 ( ) ) , new TYPE_4 < TYPE_5 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_5 VAR_2 ) { try { return METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; } } } ) ) ; )  return java.util.Collections . METHOD_2 ( TYPE_3 . METHOD_3 ( java.util.Collections . METHOD_4 ( VAR_1 . METHOD_1 ( ) ) , new TYPE_4 < TYPE_5 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_5 VAR_2 ) { try { return METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; } } } ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) INIT = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = VAR_3 . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( VAR_1 ) ) ) INIT = VAR_3 . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  return commit . METHOD_4 ( ) ; )  return commit . METHOD_4 ( ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME w ) NAME w ( IN this ) IN this ( BLOCK BLOCK ( IF IF ( COND w instanceof TYPE_2 ) COND w instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = ( ( TYPE_2 ) ( w ) ) ) INIT = ( ( TYPE_2 ) ( w ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = d )  VAR_2 = d ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) == VAR_1 ) COND ( VAR_3 ) == VAR_1 ( THEN THEN (  d . METHOD_1 ( ) )  d . METHOD_1 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = true )  VAR_1 = true (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_8 ) NAME METHOD_8 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_9 ( true ) )  METHOD_9 ( true ) (  super . METHOD_8 ( VAR_2 ) )  super . METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) )  TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = factory . create ( in , out ) ) INIT = factory . create ( in , out ) ) VAR VAR (  VAR_1 . METHOD_2 ( format ) )  VAR_1 . METHOD_2 ( format ) ( IF IF ( COND ( query ) != null ) COND ( query ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( query ) )  VAR_1 . METHOD_3 ( query ) ) THEN THEN ( ELSE ELSE (  VAR_1 . run ( ) )  VAR_1 . run ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME err ) NAME err ( BLOCK BLOCK (  throw new TYPE_4 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; )  throw new TYPE_4 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME r ) NAME r ( INIT = TYPE_1 . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getChange ( ) . getProject ( ) , VAR_3 ) ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getChange ( ) . getProject ( ) , VAR_3 ) ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  r . METHOD_5 ( TYPE_5 . METHOD_6 ( INT_1 , VAR_4 ) ) )  r . METHOD_5 ( TYPE_5 . METHOD_6 ( INT_1 , VAR_4 ) ) ) THEN THEN ) IF IF (  return r ; )  return r ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e . getMessage ( ) ) ; )  throw new TYPE_4 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( admin , VAR_2 ) )  METHOD_3 ( admin , VAR_2 ) (  METHOD_4 ( admin ) )  METHOD_4 ( admin ) (  METHOD_5 ( VAR_1 , VAR_3 ) )  METHOD_5 ( VAR_1 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 , VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( admin , VAR_7 , VAR_8 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_8 ( VAR_11 ) . METHOD_8 ( VAR_12 ) )  assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 , VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( admin , VAR_7 , VAR_8 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_8 ( VAR_11 ) . METHOD_8 ( VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = TYPE_3 . get ( VAR_1 ) ) INIT = TYPE_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_4 . METHOD_2 ( p ) ) ) COND ! ( TYPE_4 . METHOD_2 ( p ) ) ( THEN THEN (  throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; )  throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.String ( TYPE_4 . METHOD_3 ( p ) , VAR_3 ) ) INIT = new java.lang.String ( TYPE_4 . METHOD_3 ( p ) , VAR_3 ) ) VAR VAR (  return new TYPE_1 ( new TYPE_1 . Id ( id , 0 ) , VAR_2 ) ; )  return new TYPE_1 ( new TYPE_1 . Id ( id , 0 ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_3 , VAR_4 , VAR_2 . getProject ( ) . getName ( ) ) ) ; )  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_3 , VAR_4 , VAR_2 . getProject ( ) . getName ( ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Account ) TYPE TYPE_1.Account ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) ( VAR VAR ( TYPE TYPE_1.Account ) TYPE TYPE_1.Account ( NAME me ) NAME me ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  me . METHOD_4 ( result . METHOD_5 ( ) ) )  me . METHOD_4 ( result . METHOD_5 ( ) ) (  me . METHOD_6 ( result . METHOD_7 ( ) ) )  me . METHOD_6 ( result . METHOD_7 ( ) ) (  TYPE_2 . METHOD_8 ( ) )  TYPE_2 . METHOD_8 ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . display ( me ) )  VAR_2 . display ( me ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ( ) ) == 0 ) COND ( VAR_1 . length ( ) ) == 0 ( THEN THEN (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 . isEmpty ( ) ) COND VAR_3 . isEmpty ( ) ( THEN THEN (  VAR_2 . info ( STRING_2 ) )  VAR_2 . info ( STRING_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( ( VAR_3 . size ( ) ) == 1 ) && ( ( VAR_4 . size ( ) ) == 1 ) ) && ( VAR_4 . contains ( VAR_5 ) ) ) COND ( ( ( VAR_3 . size ( ) ) == 1 ) && ( ( VAR_4 . size ( ) ) == 1 ) ) && ( VAR_4 . contains ( VAR_5 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<com.google.gerrit.reviewdb.client.Change> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.Change> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ( INIT = event . getRefName ( ) ) INIT = event . getRefName ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( event . METHOD_2 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( event . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND ref . equals ( VAR_1 ) ) COND ref . equals ( VAR_1 ) ( THEN THEN (  return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( project ) ) ; )  return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( project ) ) ; ) THEN THEN ( ELSE ELSE (  return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_5 ( new TYPE_2 . NameKey ( project , ref ) ) ) ; )  return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_5 ( new TYPE_2 . NameKey ( project , ref ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( a . name ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ) INIT = TYPE_2 . METHOD_2 ( a . name ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ) VAR VAR ( IF IF ( COND VAR_1 != 0 ) COND VAR_1 != 0 ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_2 ( a . id ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; )  return TYPE_2 . METHOD_2 ( a . id ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.ProjectConfig ) TYPE TYPE_3.ProjectConfig ( NAME cfg ) NAME cfg ( INIT = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_1 ( cfg , VAR_1 , id , ref ) ) INIT = TYPE_4 . METHOD_1 ( cfg , VAR_1 , id , ref ) ) VAR VAR (  METHOD_4 ( project , cfg ) )  METHOD_4 ( project , cfg ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_4 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_4 ) ) VAR VAR (  assertEquals ( STRING_5 , TYPE_3 . METHOD_3 ( a , b ) . toString ( ) ) )  assertEquals ( STRING_5 , TYPE_3 . METHOD_3 ( a , b ) . toString ( ) ) (  assertEquals ( STRING_6 , TYPE_3 . METHOD_3 ( a , b , c ) . toString ( ) ) )  assertEquals ( STRING_6 , TYPE_3 . METHOD_3 ( a , b , c ) . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ( INIT = new byte [ ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ] ) INIT = new byte [ ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ] ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_4 ( in , data , 0 , data . length ) )  TYPE_4 . METHOD_4 ( in , data , 0 , data . length ) ) BLOCK BLOCK ( FINALLY FINALLY (  in . close ( ) )  in . close ( ) ) FINALLY FINALLY ) TRY TRY (  return data ; )  return data ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return ( ( TYPE_1 ) ( VAR_2 ) ) . format ( project . get ( ) , TYPE_4 . METHOD_3 ( repo , VAR_4 ) , METHOD_4 ( VAR_1 ) , VAR_5 ) ; )  return ( ( TYPE_1 ) ( VAR_2 ) ) . format ( project . get ( ) , TYPE_4 . METHOD_3 ( repo , VAR_4 ) , METHOD_4 ( VAR_1 ) , VAR_5 ) ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 == null ) && ( ( VAR_2 ) == null ) ) || ( ( VAR_1 != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) ) COND ( ( VAR_1 == null ) && ( ( VAR_2 ) == null ) ) || ( ( VAR_1 != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) ( THEN THEN (  display ( result ) )  display ( result ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME notes ) NAME notes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( db . METHOD_5 ( ) . METHOD_6 ( notes . getChangeId ( ) ) , VAR_2 ) ) ; )  return TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( db . METHOD_5 ( ) . METHOD_6 ( notes . getChangeId ( ) ) , VAR_2 ) ) ; ) THEN THEN ) IF IF (  notes . METHOD_7 ( ) )  notes . METHOD_7 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_8 ( ) ) INIT = TYPE_4 . METHOD_8 ( ) ) VAR VAR (  VAR_3 . METHOD_9 ( notes . METHOD_10 ( ) . values ( ) ) )  VAR_3 . METHOD_9 ( notes . METHOD_10 ( ) . values ( ) ) (  return TYPE_3 . METHOD_3 ( VAR_3 ) ; )  return TYPE_3 . METHOD_3 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( c ) . equals ( psId ) ) COND TYPE_3 . METHOD_2 ( c ) . equals ( psId ) ( THEN THEN (  result . add ( c ) )  result . add ( c ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_4 . METHOD_3 ( result ) ; )  return TYPE_4 . METHOD_3 ( result ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ( ( VAR_1 . length ) * 2 ) ) ) INIT = new java.lang.StringBuilder ( ( ( VAR_1 . length ) * 2 ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE byte ) TYPE byte ( NAME b ) NAME b ( INIT = VAR_1 [ i ] ) INIT = VAR_1 [ i ] ) VAR VAR (  r . append ( VAR_2 [ ( ( b > > > INT_1 ) & INT_2 ) ] ) )  r . append ( VAR_2 [ ( ( b > > > INT_1 ) & INT_2 ) ] ) (  r . append ( VAR_2 [ ( b & INT_2 ) ] ) )  r . append ( VAR_2 [ ( b & INT_2 ) ] ) ) BLOCK BLOCK ) FOR FOR (  return r . toString ( ) ; )  return r . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ( INIT = METHOD_3 ( in ) ) INIT = METHOD_3 ( in ) ) VAR VAR (  assertEquals ( VAR_1 class , out . METHOD_4 ( ) ) )  assertEquals ( VAR_1 class , out . METHOD_4 ( ) ) (  assertEquals ( TYPE_2 . of ( query ( in . METHOD_5 ( 1 ) ) , in . METHOD_5 ( 0 ) ) , out . METHOD_6 ( ) ) )  assertEquals ( TYPE_2 . of ( query ( in . METHOD_5 ( 1 ) ) , in . METHOD_5 ( 0 ) ) , out . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<TYPE_1> ) RETURN java.util.Set<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 . create ( STRING_1 , VAR_4 ) ) )  VAR_2 . add ( VAR_3 . create ( STRING_1 , VAR_4 ) ) (  VAR_2 . add ( VAR_3 . create ( STRING_2 , VAR_5 ) ) )  VAR_2 . add ( VAR_3 . create ( STRING_2 , VAR_5 ) ) (  VAR_2 . add ( VAR_3 . create ( STRING_3 , VAR_5 ) ) )  VAR_2 . add ( VAR_3 . create ( STRING_3 , VAR_5 ) ) (  VAR_2 . add ( VAR_3 . create ( STRING_4 , VAR_1 . project ) ) )  VAR_2 . add ( VAR_3 . create ( STRING_4 , VAR_1 . project ) ) (  VAR_2 . add ( VAR_3 . create ( STRING_5 , VAR_6 ) ) )  VAR_2 . add ( VAR_3 . create ( STRING_5 , VAR_6 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null ) ) INIT = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME m ) NAME m ( INIT = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ) INIT = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( TYPE_5 . of ( STRING_1 ) ) )  com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( TYPE_5 . of ( STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) )  METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_2 ) NAME VAR_2 ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ps . getId ( ) . getParentKey ( ) . equals ( cd . getId ( ) ) , STRING_1 , ps . getId ( ) , cd . getId ( ) ) )  TYPE_2 . METHOD_2 ( ps . getId ( ) . getParentKey ( ) . equals ( cd . getId ( ) ) , STRING_1 , ps . getId ( ) , cd . getId ( ) ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 , VAR_5 ) ) )  VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 , VAR_5 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ProjectConfig ) TYPE TYPE_2.ProjectConfig ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME group ) NAME group ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_2 ( project , group ) ) INIT = TYPE_4 . METHOD_2 ( project , group ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_2 ) )  VAR_4 . METHOD_3 ( VAR_2 ) (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  return TYPE_4 . METHOD_5 ( project , VAR_1 , VAR_4 , ref ) ; )  return TYPE_4 . METHOD_5 ( project , VAR_1 , VAR_4 , ref ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME branch ) NAME branch ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ( INIT = TYPE_4 . schema ( VAR_2 ) ) INIT = TYPE_4 . schema ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND ( schema != null ) && ( schema . METHOD_2 ( VAR_4 ) ) ) COND ( schema != null ) && ( schema . METHOD_2 ( VAR_4 ) ) ( THEN THEN (  VAR_3 = ( VAR_5 . METHOD_3 ( ) ) - INT_1 )  VAR_3 = ( VAR_5 . METHOD_3 ( ) ) - INT_1 ) THEN THEN ( ELSE ELSE (  VAR_3 = VAR_5 . METHOD_4 ( ) )  VAR_3 = VAR_5 . METHOD_4 ( ) ) ELSE ELSE ) IF IF (  return METHOD_1 ( schema , branch , VAR_1 , VAR_3 ) ; )  return METHOD_1 ( schema , branch , VAR_1 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  out . METHOD_1 ( TYPE_2 . METHOD_2 ( commit ) . METHOD_3 ( VAR_1 ) ) )  out . METHOD_1 ( TYPE_2 . METHOD_2 ( commit ) . METHOD_3 ( VAR_1 ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( out ) ) INIT = new TYPE_3 ( out ) ) VAR VAR (  VAR_2 . METHOD_4 ( repo ) )  VAR_2 . METHOD_4 ( repo ) (  VAR_2 . format ( base . METHOD_5 ( ) , commit . METHOD_5 ( ) ) )  VAR_2 . format ( base . METHOD_5 ( ) , commit . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_1 ) ) )  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( repo ) ) INIT = new TYPE_1 ( repo ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( new TYPE_2 ( repo , VAR_2 , db ) ) )  VAR_1 . METHOD_3 ( new TYPE_2 ( repo , VAR_2 , db ) ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( in , out , err ) )  VAR_1 . METHOD_4 ( in , out , err ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( ) . append ( a . METHOD_2 ( ) , b . METHOD_2 ( ) ) . append ( b . METHOD_3 ( ) , a . METHOD_3 ( ) ) . METHOD_4 ( ) ; )  return new TYPE_2 ( ) . append ( a . METHOD_2 ( ) , b . METHOD_2 ( ) ) . append ( b . METHOD_3 ( ) , a . METHOD_3 ( ) ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME p ) NAME p ) VAR VAR (  p = METHOD_2 ( STRING_1 ) )  p = METHOD_2 ( STRING_1 ) (  assertEquals ( METHOD_2 ( STRING_2 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) )  assertEquals ( METHOD_2 ( STRING_2 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) (  p = METHOD_2 ( STRING_4 ) )  p = METHOD_2 ( STRING_4 ) (  assertEquals ( METHOD_2 ( STRING_5 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) )  assertEquals ( METHOD_2 ( STRING_5 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) && ( VAR_1 ) ) COND ( METHOD_2 ( ) ) && ( VAR_1 ) ( THEN THEN (  VAR_2 . METHOD_3 ( change , ctx . METHOD_4 ( ) . getAccountId ( ) , VAR_3 , VAR_4 , VAR_5 , ctx . METHOD_5 ( ) ) )  VAR_2 . METHOD_3 ( change , ctx . METHOD_4 ( ) . getAccountId ( ) , VAR_3 , VAR_4 , VAR_5 , ctx . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = TYPE_1 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ) INIT = TYPE_1 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ) VAR VAR (  TYPE_2 . METHOD_2 ( change , STRING_1 , changeId ) )  TYPE_2 . METHOD_2 ( change , STRING_1 , changeId ) (  TYPE_2 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) )  TYPE_2 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) (  return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; )  return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_4 . getAccountId ( ) . equals ( VAR_1 . getAccountId ( ) ) ) ) COND ! ( TYPE_4 . getAccountId ( ) . equals ( VAR_1 . getAccountId ( ) ) ) ( THEN THEN (  VAR_2 . METHOD_2 ( new TYPE_5 ( ) ) )  VAR_2 . METHOD_2 ( new TYPE_5 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_7.ReviewDb ) TYPE TYPE_7.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) )  db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD (  run ( VAR_2 , new TYPE_6 < TYPE_3 > ( ) { public TYPE_3 run ( TYPE_7 . ReviewDb db ) throws TYPE_8 . OrmException { db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) ; return VAR_3 ; } } ) )  run ( VAR_2 , new TYPE_6 < TYPE_3 > ( ) { public TYPE_3 run ( TYPE_7 . ReviewDb db ) throws TYPE_8 . OrmException { db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) ; return VAR_3 ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  e . METHOD_2 ( ) )  e . METHOD_2 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME t ) NAME t ( INIT = TYPE_2 . METHOD_3 ( psId , VAR_1 . path ( ) , VAR_1 . line ( ) ) ) INIT = TYPE_2 . METHOD_3 ( psId , VAR_1 . path ( ) , VAR_1 . line ( ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_4 ( ) ) ) COND ! ( TYPE_3 . METHOD_4 ( ) ) ( THEN THEN (  TYPE_3 . METHOD_5 ( t ) )  TYPE_3 . METHOD_5 ( t ) ) THEN THEN ( ELSE ELSE (  TYPE_3 . display ( t ) )  TYPE_3 . display ( t ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) )  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) (  METHOD_4 ( ) . to ( VAR_3 class ) )  METHOD_4 ( ) . to ( VAR_3 class ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) (  TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) )  TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.PatchSet ) RETURN com.google.gerrit.reviewdb.client.PatchSet ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) . patchSets ( ) . METHOD_2 ( rsrc . METHOD_3 ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3 . METHOD_4 ( false ) ; return VAR_3 ; } } ) ) INIT = VAR_2 . get ( ) . patchSets ( ) . METHOD_2 ( rsrc . METHOD_3 ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3 . METHOD_4 ( false ) ; return VAR_3 ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.PatchSet ) RETURN com.google.gerrit.reviewdb.client.PatchSet ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( false ) )  VAR_3 . METHOD_4 ( false ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1.Id,TYPE_2.Id> ) TYPE java.util.Map<TYPE_1.Id,TYPE_2.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < TYPE_1 . Id , TYPE_2 . Id > ( ) ) INIT = new TYPE_3 < TYPE_1 . Id , TYPE_2 . Id > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_2 ) NAME VAR_2 ( IN approvals ) IN approvals ( BLOCK BLOCK (  VAR_1 . put ( VAR_2 . getParentKey ( ) , VAR_2 ) )  VAR_1 . put ( VAR_2 . getParentKey ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 . METHOD_2 ( change , user . METHOD_3 ( ) , VAR_4 , VAR_1 ) )  VAR_3 . METHOD_2 ( change , user . METHOD_3 ( ) , VAR_4 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; )  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( e ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 ) , TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . METHOD_7 ( ) ) )  TYPE_2 . METHOD_3 ( e ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 ) , TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . METHOD_7 ( ) ) (  servlet . METHOD_8 ( VAR_4 , VAR_5 ) )  servlet . METHOD_8 ( VAR_4 , VAR_5 ) (  TYPE_2 . METHOD_9 ( VAR_5 ) . METHOD_10 ( VAR_6 , e . getMessage ( ) ) )  TYPE_2 . METHOD_9 ( VAR_5 ) . METHOD_10 ( VAR_6 , e . getMessage ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( b . config ) != null ) && ( ( VAR_1 ) != null ) ) && ( ( VAR_2 ) != null ) ) COND ( ( ( b . config ) != null ) && ( ( VAR_1 ) != null ) ) && ( ( VAR_2 ) != null ) ( THEN THEN (  return new TYPE_1 ( b . view , b . config , VAR_1 , VAR_2 ) ; )  return new TYPE_1 ( b . view , b . config , VAR_1 , VAR_2 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( db , admin . METHOD_2 ( ) , STRING_1 , STRING_2 , VAR_1 , r . getChangeId ( ) ) ) INIT = VAR_3 . create ( db , admin . METHOD_2 ( ) , STRING_1 , STRING_2 , VAR_1 , r . getChangeId ( ) ) ) VAR VAR (  return VAR_2 . to ( git , STRING_3 ) ; )  return VAR_2 . to ( git , STRING_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) ) ; )  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ) INIT = VAR_1 . METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ) VAR VAR (  return ( ( VAR_1 . METHOD_3 ( 0 , n ) ) + VAR_2 ) + ( VAR_1 . METHOD_3 ( ( ( n + INT_1 ) + ( key . length ( ) ) ) ) ) ; )  return ( ( VAR_1 . METHOD_3 ( 0 , n ) ) + VAR_2 ) + ( VAR_1 . METHOD_3 ( ( ( n + INT_1 ) + ( key . length ( ) ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = cm . METHOD_2 ( cm . METHOD_3 ( ) . METHOD_4 ( ) ) ) INIT = cm . METHOD_2 ( cm . METHOD_3 ( ) . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_5 ( VAR_1 ) ) INIT = VAR_3 . METHOD_5 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_6 ( ) ) INIT = VAR_2 . METHOD_6 ( ) ) VAR VAR ( IF IF ( COND cm . METHOD_7 ( ) ) COND cm . METHOD_7 ( ) ( THEN THEN ) THEN THEN ( ELSE ELSE (  METHOD_8 ( VAR_4 , VAR_1 ) )  METHOD_8 ( VAR_4 , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  change = ctx . getChange ( ) )  change = ctx . getChange ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME update ) NAME update ( INIT = ctx . METHOD_2 ( psId ) ) INIT = ctx . METHOD_2 ( psId ) ) VAR VAR (  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) )  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  change . METHOD_3 ( VAR_3 ) )  change . METHOD_3 ( VAR_3 ) (  update . METHOD_3 ( change . getStatus ( ) ) )  update . METHOD_3 ( change . getStatus ( ) ) (  TYPE_3 . METHOD_4 ( change ) )  TYPE_3 . METHOD_4 ( change ) (  ctx . METHOD_1 ( ) )  ctx . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( STRING_2 ) ) INIT = VAR_1 . METHOD_2 ( STRING_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ! ( s . METHOD_3 ( ) . isEmpty ( ) ) ) COND ! ( s . METHOD_3 ( ) . isEmpty ( ) ) ( THEN THEN (  VAR_2 . append ( ( ( STRING_3 + s ) + STRING_4 ) ) )  VAR_2 . append ( ( ( STRING_3 + s ) + STRING_4 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.PatchSet ) RETURN TYPE_1.PatchSet ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( currentPatchSetId ) != null ) COND ( currentPatchSetId ) != null ( THEN THEN ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = ( patchSets . size ( ) ) - 1 ) INIT = ( patchSets . size ( ) ) - 1 ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.PatchSet ) TYPE TYPE_1.PatchSet ( NAME ps ) NAME ps ( INIT = patchSets . get ( i ) ) INIT = patchSets . get ( i ) ) VAR VAR ( IF IF ( COND ps . getId ( ) . equals ( currentPatchSetId ) ) COND ps . getId ( ) . equals ( currentPatchSetId ) ( THEN THEN (  return ps ; )  return ps ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( false ) ) COND VAR_2 . METHOD_2 ( false ) ( THEN THEN (  throw new java.io.IOException ( STRING_1 ) ; )  throw new java.io.IOException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME result ) NAME result ( INIT = ( VAR_1 ) ? VAR_3 . METHOD_1 ( db , changeId ) : VAR_3 . METHOD_3 ( db , changeId ) ) INIT = ( VAR_1 ) ? VAR_3 . METHOD_1 ( db , changeId ) : VAR_3 . METHOD_3 ( db , changeId ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_2 ( false ) ) COND VAR_4 . METHOD_2 ( false ) ( THEN THEN (  throw new java.io.IOException ( STRING_2 ) ; )  throw new java.io.IOException ( STRING_2 ) ; ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_1 ( ) ) COND VAR_1 . METHOD_1 ( ) ( THEN THEN (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_2 ( STRING_2 ) )  VAR_2 . METHOD_2 ( STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( ( STRING_3 + ( e . getMessage ( ) ) ) ) ; )  throw new TYPE_1 ( ( STRING_3 + ( e . getMessage ( ) ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME user ) NAME user ( INIT = VAR_2 . create ( args . db , w . getAccountId ( ) ) ) INIT = VAR_2 . create ( args . db , w . getAccountId ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( user , w . METHOD_2 ( ) ) ) COND METHOD_1 ( user , w . METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND w . METHOD_3 ( type ) ) COND w . METHOD_3 ( type ) ( THEN THEN (  VAR_3 . add ( w . getAccountId ( ) ) )  VAR_3 . add ( w . getAccountId ( ) ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME c ) NAME c ( INIT = get ( changeId , VAR_1 ) ) INIT = get ( changeId , VAR_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( METHOD_2 ( 2 ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( METHOD_2 ( 2 ) ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_3 ( ) ) ) ) . METHOD_4 ( TYPE_3 . of ( METHOD_2 ( 2 ) ) ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_3 ( ) ) ) ) . METHOD_4 ( TYPE_3 . of ( METHOD_2 ( 2 ) ) ) (  com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_2 ( 2 ) ) . VAR_4 ) . isEqualTo ( INT_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_2 ( 2 ) ) . VAR_4 ) . isEqualTo ( INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ( IF IF ( COND TYPE_4 . equals ( info . path ( ) ) ) COND TYPE_4 . equals ( info . path ( ) ) ( THEN THEN (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( info . status ( ) ) )  VAR_1 . append ( info . status ( ) ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = ctx . getChange ( ) ) INIT = ctx . getChange ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME update ) NAME update ( INIT = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ) INIT = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ) VAR VAR (  change . METHOD_3 ( VAR_1 ) )  change . METHOD_3 ( VAR_1 ) (  change . METHOD_4 ( ctx . METHOD_5 ( ) ) )  change . METHOD_4 ( ctx . METHOD_5 ( ) ) (  update . METHOD_3 ( VAR_1 ) )  update . METHOD_3 ( VAR_1 ) (  METHOD_6 ( ctx , update ) )  METHOD_6 ( ctx , update ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME notes ) NAME notes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; )  return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; ) THEN THEN ( ELSE ELSE (  return notes . METHOD_5 ( ) . METHOD_6 ( ) ; )  return notes . METHOD_5 ( ) . METHOD_6 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( true ) ) )  METHOD_2 ( b , b . append ( true ) ) (  METHOD_2 ( b , b . append ( false ) ) )  METHOD_2 ( b , b . append ( false ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . getName ( ) ) INIT = VAR_2 . getName ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_3 ( VAR_4 , new TYPE_4 ( ( ( STRING_1 + ( VAR_7 ) ) + STRING_2 ) ) ) ) INIT = VAR_6 . METHOD_3 ( VAR_4 , new TYPE_4 ( ( ( STRING_1 + ( VAR_7 ) ) + STRING_2 ) ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) (  VAR_2 . METHOD_5 ( VAR_5 ) )  VAR_2 . METHOD_5 ( VAR_5 ) (  VAR_2 . METHOD_6 ( false ) )  VAR_2 . METHOD_6 ( false ) (  VAR_1 = true )  VAR_1 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ( INIT = notes . METHOD_4 ( ) ) INIT = notes . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ( INIT = METHOD_5 ( notes ) ) INIT = METHOD_5 ( notes ) ) VAR VAR (  ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_6 ( name ) )  ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_6 ( name ) (  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_7 ( ctl , null ) . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ( STRING_1 + name ) ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_7 ( ctl , null ) . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ( STRING_1 + name ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME branch ) NAME branch ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  new TYPE_2 ( server , VAR_1 , branch ) . METHOD_2 ( ) )  new TYPE_2 ( server , VAR_1 , branch ) . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . error ( ( ( STRING_1 + branch ) + STRING_2 ) , e ) )  VAR_2 . error ( ( ( STRING_1 + branch ) + STRING_2 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_5 ( path ) ) )  VAR_2 . add ( new TYPE_5 ( path ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) )  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) )  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ) BLOCK BLOCK ) CASE VAR_7 ) SWITCH SWITCH (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) COND ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ( THEN THEN (  return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; )  return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; ) THEN THEN ) IF IF (  throw new TYPE_3 ( rsrc . METHOD_2 ( ) . getProject ( ) . getName ( ) ) ; )  throw new TYPE_3 ( rsrc . METHOD_2 ( ) . getProject ( ) . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( this . VAR_2 , VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_7 ( ) ) . METHOD_6 ( this . VAR_4 , VAR_5 ) . METHOD_5 ( this . VAR_6 , VAR_7 , TYPE_3 . METHOD_8 ( ) ) . METHOD_5 ( this . psId , VAR_1 . psId , TYPE_3 . METHOD_8 ( ) . METHOD_9 ( ) ) . result ( ) ; )  return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( this . VAR_2 , VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_7 ( ) ) . METHOD_6 ( this . VAR_4 , VAR_5 ) . METHOD_5 ( this . VAR_6 , VAR_7 , TYPE_3 . METHOD_8 ( ) ) . METHOD_5 ( this . psId , VAR_1 . psId , TYPE_3 . METHOD_8 ( ) . METHOD_9 ( ) ) . result ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_2 ( ) ) COND VAR_3 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( STRING_1 ) )  r . append ( STRING_1 ) (  r . append ( VAR_1 . METHOD_3 ( ) ) )  r . append ( VAR_1 . METHOD_3 ( ) ) (  r . append ( STRING_2 ) )  r . append ( STRING_2 ) (  return r . toString ( ) ; )  return r . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) )  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) (  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) )  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) (  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) )  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) (  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 , STRING_6 , STRING_7 ) ) ) )  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 , STRING_6 , STRING_7 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_1 ) ) COND METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) )  VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) (  VAR_4 . METHOD_4 ( ) . METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_5 . METHOD_6 ( new TYPE_1 ( VAR_2 ) ) , VAR_6 ) )  VAR_4 . METHOD_4 ( ) . METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_5 . METHOD_6 ( new TYPE_1 ( VAR_2 ) ) , VAR_6 ) (  VAR_3 . METHOD_3 ( STRING_4 , VAR_1 ) )  VAR_3 . METHOD_3 ( STRING_4 , VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . error ( STRING_5 , VAR_1 ) )  VAR_3 . error ( STRING_5 , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME change ) NAME change ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME patchSet ) NAME patchSet ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( new TYPE_3 ( change , patchSet , path ) ) )  VAR_1 . METHOD_4 ( new TYPE_3 ( change , patchSet , path ) ) (  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) )  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) )  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) (  assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_7 , VAR_4 ) . to ( VAR_8 , VAR_9 ) . to ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_9 ( VAR_3 ) )  assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_7 , VAR_4 ) . to ( VAR_8 , VAR_9 ) . to ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_9 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . info ( STRING_1 ) )  VAR_1 . info ( STRING_1 ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . delete ( VAR_3 ) )  TYPE_1 . delete ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ( STRING_2 + ( VAR_3 ) ) , err ) )  VAR_1 . METHOD_1 ( ( STRING_2 + ( VAR_3 ) ) , err ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( p ) )  METHOD_2 ( p ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ( INIT = METHOD_3 ( ( STRING_2 + topic ) ) ) INIT = METHOD_3 ( ( STRING_2 + topic ) ) ) VAR VAR (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) (  r . METHOD_5 ( VAR_1 , topic ) )  r . METHOD_5 ( VAR_1 , topic ) (  r = METHOD_3 ( ( STRING_3 + topic ) ) )  r = METHOD_3 ( ( STRING_3 + topic ) ) (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) (  r . METHOD_5 ( VAR_1 , topic ) )  r . METHOD_5 ( VAR_1 , topic ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( token ) ) INIT = TYPE_2 . METHOD_2 ( token ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) )  TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw VAR_3 . reject ( e . getMessage ( ) ) ; )  throw VAR_3 . reject ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_4 . put ( VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) )  VAR_4 . put ( VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( VAR_2 . line ) . isEqualTo ( VAR_1 . line ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . line ) . isEqualTo ( VAR_1 . line ) (  com.google.common.truth.Truth.assertThat ( VAR_2 . message ) . isEqualTo ( VAR_1 . message ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . message ) . isEqualTo ( VAR_1 . message ) (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEqualTo ( VAR_4 ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEqualTo ( VAR_4 ) (  TYPE_3 . METHOD_2 ( VAR_5 , VAR_6 ) )  TYPE_3 . METHOD_2 ( VAR_5 , VAR_6 ) ( IF IF ( COND ( VAR_7 ) == null ) COND ( VAR_7 ) == null ( THEN THEN (  com.google.common.truth.Truth.assertThat ( VAR_8 ) . isEqualTo ( VAR_9 ) )  com.google.common.truth.Truth.assertThat ( VAR_8 ) . isEqualTo ( VAR_9 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ref ) NAME ref ( INIT = refs . get ( VAR_1 ) ) INIT = refs . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND ref != null ) COND ref != null ( THEN THEN ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_4 ) NAME VAR_4 ( INIT = ref . get ( ) ) INIT = ref . get ( ) ) VAR VAR ( IF IF ( COND VAR_4 . equals ( VAR_2 ) ) COND VAR_4 . equals ( VAR_2 ) ( THEN THEN (  ref . METHOD_2 ( VAR_4 , VAR_3 ) )  ref . METHOD_2 ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME git ) NAME git ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( git , STRING_1 ) )  TYPE_4 . METHOD_2 ( git , STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME file ) NAME file ( INIT = ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ) INIT = ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . create ( db , admin . METHOD_3 ( ) , ( STRING_5 + ( VAR_2 ) ) , file , ( STRING_6 + ( VAR_2 ) ) ) ) INIT = VAR_4 . create ( db , admin . METHOD_3 ( ) , ( STRING_5 + ( VAR_2 ) ) , file , ( STRING_6 + ( VAR_2 ) ) ) ) VAR VAR (  ( VAR_2 ) ++ )  ( VAR_2 ) ++ (  return VAR_3 . to ( git , STRING_7 ) ; )  return VAR_3 . to ( git , STRING_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( ) ) )  servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ( INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , null , STRING_2 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , null , STRING_2 ) ) VAR VAR ( IF IF ( COND type == null ) COND type == null ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( IN TYPE_2 . values ( ) ) IN TYPE_2 . values ( ) ( BLOCK BLOCK ( IF IF ( COND type . METHOD_4 ( t . name ( ) ) ) COND type . METHOD_4 ( t . name ( ) ) ( THEN THEN (  return t ; )  return t ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_3 ( ( STRING_3 + type ) ) ; )  throw new TYPE_3 ( ( STRING_3 + type ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) )  walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) (  VAR_1 = new TYPE_5 ( ) )  VAR_1 = new TYPE_5 ( ) (  VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 )  VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3.Id,TYPE_4.Id> ) TYPE TYPE_2<TYPE_3.Id,TYPE_4.Id> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  a . type = VAR_1 . getKey ( ) . get ( ) )  a . type = VAR_1 . getKey ( ) . get ( ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 . getKey ( ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 . getKey ( ) ) ) VAR VAR (  VAR_4 = VAR_2 . METHOD_3 ( ) . getName ( ) )  VAR_4 = VAR_2 . METHOD_3 ( ) . getName ( ) (  a . value = TYPE_6 . toString ( VAR_1 . getValue ( ) . get ( ) ) )  a . value = TYPE_6 . toString ( VAR_1 . getValue ( ) . get ( ) ) (  return a ; )  return a ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; )  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return VAR_2 . METHOD_4 ( db , VAR_3 , project , VAR_4 ) ; )  return VAR_2 . METHOD_4 ( db , VAR_3 , project , VAR_4 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( ( STRING_1 + project ) , e ) )  VAR_5 . error ( ( STRING_1 + project ) , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME patch ) NAME patch ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Key ) TYPE TYPE_1.Key ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_5 . patch ( token , base , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) )  TYPE_5 . patch ( token , base , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ProjectConfig ) TYPE TYPE_1.ProjectConfig ( NAME cfg ) NAME cfg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( VAR_2 , cfg . getProject ( ) . METHOD_1 ( ) , db ) ) INIT = new TYPE_4 ( VAR_2 , cfg . getProject ( ) . METHOD_1 ( ) , db ) ) VAR VAR (  util . METHOD_2 ( INT_1 ) )  util . METHOD_2 ( INT_1 ) (  util . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  util . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( STRING_1 ) )  VAR_1 . METHOD_5 ( STRING_1 ) (  cfg . commit ( VAR_1 ) )  cfg . commit ( VAR_1 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME ref ) NAME ref ( INIT = db . METHOD_6 ( VAR_3 ) ) INIT = db . METHOD_6 ( VAR_3 ) ) VAR VAR (  return util . METHOD_7 ( ) . parseCommit ( ref . METHOD_8 ( ) ) ; )  return util . METHOD_7 ( ) . parseCommit ( ref . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN (  return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; )  return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = new TYPE_3 ( null ) ) INIT = new TYPE_3 ( null ) ) VAR VAR (  r . METHOD_4 ( true ) )  r . METHOD_4 ( true ) (  return r ; )  return r ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_3 ( id ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_3 ( id ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( id . get ( ) , message , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( id ) ) ; METHOD_4 ( ) ; } } ) )  TYPE_1 . METHOD_2 ( id . get ( ) , message , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( id ) ) ; METHOD_4 ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( req . METHOD_3 ( ) ) . is ( VAR_1 ) ) COND TYPE_3 . METHOD_2 ( req . METHOD_3 ( ) ) . is ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . toString ( req . METHOD_4 ( ) ) ) INIT = TYPE_4 . toString ( req . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_6 ( ) . METHOD_5 ( VAR_4 class , new TYPE_7 ( ) ) . METHOD_5 ( VAR_5 class , new TYPE_8 ( ) ) . create ( ) ) INIT = new TYPE_6 ( ) . METHOD_5 ( VAR_4 class , new TYPE_7 ( ) ) . METHOD_5 ( VAR_5 class , new TYPE_8 ( ) ) . create ( ) ) VAR VAR (  return VAR_3 . METHOD_6 ( VAR_2 , VAR_4 class ) ; )  return VAR_3 . METHOD_6 ( VAR_2 , VAR_4 class ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_6 ( TYPE_3 ) ) COND VAR_2 . METHOD_6 ( TYPE_3 ) ( THEN THEN (  return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; )  return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; ) THEN THEN ( ELSE ELSE (  return VAR_2 ; )  return VAR_2 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( getRefName ( ) , VAR_3 . METHOD_3 ( ) ) ) COND TYPE_3 . METHOD_2 ( getRefName ( ) , VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ChangeInfo> ) TYPE TYPE_1<TYPE_2.ChangeInfo> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  input . message ( TYPE_4 . METHOD_2 ( msg ) ) )  input . message ( TYPE_4 . METHOD_2 ( msg ) ) (  TYPE_4 . METHOD_3 ( id , STRING_1 ) . data ( input ) . METHOD_4 ( VAR_1 ) )  TYPE_4 . METHOD_3 ( id , STRING_1 ) . data ( input ) . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( e . getValue ( ) ) )  VAR_1 . METHOD_2 ( e . getValue ( ) ) (  VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) )  VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  METHOD_4 ( view . METHOD_5 ( ) ) )  METHOD_4 ( view . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  view . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) )  view . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( INIT = type . METHOD_2 ( ) ) INIT = type . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND ! ( VAR_1 class . getName ( ) . equals ( t . METHOD_3 ( ) ) ) ) COND ! ( VAR_1 class . getName ( ) . equals ( t . METHOD_3 ( ) ) ) ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_4 ( t ) . length ) > 0 ) COND ( TYPE_2 . METHOD_4 ( t ) . length ) > 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  t = type . METHOD_2 ( ) )  t = type . METHOD_2 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( req , rsp ) )  METHOD_2 ( req , rsp ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( ) . log ( STRING_1 , e ) )  METHOD_3 ( ) . log ( STRING_1 , e ) (  METHOD_4 ( rsp , null , null ) )  METHOD_4 ( rsp , null , null ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 ) ) INIT = new TYPE_2 ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_5 ( ) ) INIT = TYPE_3 . METHOD_5 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_6 ( ) ) COND VAR_2 . METHOD_6 ( ) ( BLOCK BLOCK (  VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) )  VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) )  bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  bind ( VAR_5 . String class ) . METHOD_3 ( VAR_6 class ) . METHOD_2 ( VAR_7 class . getName ( ) ) )  bind ( VAR_5 . String class ) . METHOD_3 ( VAR_6 class ) . METHOD_2 ( VAR_7 class . getName ( ) ) (  bind ( VAR_8 class ) . METHOD_4 ( VAR_9 class ) )  bind ( VAR_8 class ) . METHOD_4 ( VAR_9 class ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( ) ) COND METHOD_1 ( ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_2 . get ( ) , new TYPE_2 ( VAR_3 ) ) )  VAR_2 . METHOD_2 ( VAR_2 . get ( ) , new TYPE_2 ( VAR_3 ) ) (  VAR_4 = METHOD_3 ( ) )  VAR_4 = METHOD_3 ( ) (  VAR_5 . info ( STRING_1 ) )  VAR_5 . info ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( ( STRING_2 + STRING_3 ) , e ) )  VAR_5 . error ( ( STRING_2 + STRING_3 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 . get ( ) . create ( VAR_1 ) ; )  return VAR_2 . get ( ) . create ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , admin , VAR_2 ) )  METHOD_3 ( VAR_1 , admin , VAR_2 ) (  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_2 ) )  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = change ( ) ) INIT = change ( ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  VAR_1 = java.util.Collections . METHOD_2 ( ) )  VAR_1 = java.util.Collections . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return VAR_2 . get ( c . currentPatchSetId ( ) ) ; )  return VAR_2 . get ( c . currentPatchSetId ( ) ) ; ) THEN THEN ( ELSE ELSE (  VAR_1 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( db , METHOD_5 ( ) , c . currentPatchSetId ( ) ) ) )  VAR_1 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( db , METHOD_5 ( ) , c . currentPatchSetId ( ) ) ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Account ) RETURN com.google.gerrit.reviewdb.client.Account ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME r ) NAME r ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  return ( r . size ( ) ) == 1 ? VAR_2 . get ( r . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) : null ; )  return ( r . size ( ) ) == 1 ? VAR_2 . get ( r . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = METHOD_2 ( ( ( STRING_1 + ( VAR_1 . get ( ) ) ) + STRING_2 ) ) ) INIT = METHOD_2 ( ( ( STRING_1 + ( VAR_1 . get ( ) ) ) + STRING_2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( r ) ) INIT = TYPE_3 . METHOD_4 ( r ) ) VAR VAR (  org.junit.Assert . METHOD_5 ( ( ( VAR_3 . size ( ) ) == 1 ) ) )  org.junit.Assert . METHOD_5 ( ( ( VAR_3 . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) )  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) (  cfg = new TYPE_3 ( ) )  cfg = new TYPE_3 ( ) (  cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) )  cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) (  VAR_2 = new TYPE_4 ( VAR_1 , cfg ) )  VAR_2 = new TYPE_4 ( VAR_1 , cfg ) (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME TYPE_2 . get ( ) ) NAME TYPE_2 . get ( ) ( CASE VAR_1 ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( VAR_1 ) ) INIT = VAR_3 . create ( VAR_1 ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3<com.google.gerrit.reviewdb.server.ReviewDb> ) RETURN TYPE_3<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return TYPE_4 . of ( db ) ; )  return TYPE_4 . of ( db ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_3 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_4 . of ( db ) ; } } ; )  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_3 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_4 . of ( db ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cd . METHOD_2 ( user ) ) COND cd . METHOD_2 ( user ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME c ) NAME c ( INIT = cd . change ( db ) ) INIT = cd . change ( db ) ) VAR VAR ( IF IF ( COND ( c != null ) && ( VAR_1 . METHOD_3 ( c , user ) . METHOD_4 ( ) ) ) COND ( c != null ) && ( VAR_1 . METHOD_3 ( c , user ) . METHOD_4 ( ) ) ( THEN THEN (  cd . METHOD_5 ( user ) )  cd . METHOD_5 ( user ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey,TYPE_2> ) TYPE java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_5 < > ( ) ) INIT = new TYPE_5 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ps ) NAME ps ( IN rsrc . METHOD_2 ( ) . METHOD_1 ( ) ) IN rsrc . METHOD_2 ( ) . METHOD_1 ( ) ( BLOCK BLOCK (  VAR_1 . put ( ps . getProject ( ) . METHOD_3 ( ) , ps ) )  VAR_1 . put ( ps . getProject ( ) . METHOD_3 ( ) , ps ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 . user ( user ) . METHOD_6 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 . user ( user ) . METHOD_6 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ) (  return VAR_1 . values ( ) ; )  return VAR_1 . values ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_3 ) ) INIT = util . user ( VAR_1 , VAR_3 ) ) VAR VAR (  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) )  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( true ) )  VAR_2 . METHOD_4 ( true ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_5 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_5 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( false ) )  VAR_2 . METHOD_4 ( false ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 . toString ( ) ) )  assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 . toString ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) )  VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) (  assertEquals ( VAR_2 , VAR_3 ) )  assertEquals ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2.ChangeInfo> ) TYPE java.util.List<TYPE_2.ChangeInfo> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ) INIT = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) )  org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) (  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( project . get ( ) ) ) INIT = TYPE_4 . METHOD_2 ( project . get ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_3 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  in . branch = VAR_1 )  in . branch = VAR_1 (  VAR_2 = STRING_1 )  VAR_2 = STRING_1 (  in . project = project . get ( ) )  in . project = project . get ( ) (  VAR_3 = true )  VAR_3 = true (  VAR_4 . METHOD_2 ( VAR_5 class ) )  VAR_4 . METHOD_2 ( VAR_5 class ) ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME info ) NAME info ( INIT = VAR_6 . changes ( ) . create ( in ) . get ( ) ) INIT = VAR_6 . changes ( ) . create ( in ) . get ( ) ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( info . branch ( ) ) )  VAR_1 . METHOD_2 ( info . branch ( ) ) (  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 . query ( info . METHOD_5 ( ) , info . status ( ) , info . branch ( ) , info . topic ( ) ) ) ) )  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 . query ( info . METHOD_5 ( ) , info . status ( ) , info . branch ( ) , info . topic ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) )  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) (  assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . to ( VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_9 ( VAR_10 ) . METHOD_9 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_10 ( VAR_3 ) )  assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . to ( VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_9 ( VAR_10 ) . METHOD_9 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_10 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) (  modules.add ( new TYPE_3 ( ) ) )  modules.add ( new TYPE_3 ( ) ) (  modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) )  modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) (  modules.add ( new TYPE_5 ( ) ) )  modules.add ( new TYPE_5 ( ) ) (  return VAR_1 . METHOD_3 ( modules ) ; )  return VAR_1 . METHOD_3 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( ) ) COND METHOD_1 ( ) ( THEN THEN (  return ( ( ( ( ( STRING_1 + ( error ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; )  return ( ( ( ( ( STRING_1 + ( error ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; ) THEN THEN ( ELSE ELSE (  return ( ( ( STRING_5 + ( VAR_3 ) ) + STRING_6 ) + ( VAR_4 ) ) + STRING_4 ; )  return ( ( ( STRING_5 + ( VAR_3 ) ) + STRING_6 ) + ( VAR_4 ) ) + STRING_4 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = insert ( METHOD_3 ( repo ) ) ) INIT = insert ( METHOD_3 ( repo ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = change . getKey ( ) . get ( ) ) INIT = change . getKey ( ) . get ( ) ) VAR VAR (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= INT_1 ) COND i <= INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) INIT = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) VAR VAR (  METHOD_4 ( VAR_1 , change ) )  METHOD_4 ( VAR_1 , change ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ) INIT = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ) VAR VAR (  METHOD_5 ( VAR_1 , n ) )  METHOD_5 ( VAR_1 , n ) (  assertEquals ( ( STRING_4 + ( ( STRING_5 + STRING_6 ) + STRING_7 ) ) , n . METHOD_6 ( ) ) )  assertEquals ( ( STRING_4 + ( ( STRING_5 + STRING_6 ) + STRING_7 ) ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) (  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( METHOD_7 ( ) , getRevision ( ) , METHOD_8 ( ) ) ) )  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( METHOD_7 ( ) , getRevision ( ) , METHOD_8 ( ) ) ) (  VAR_1 . METHOD_9 ( TYPE_5 . METHOD_4 ( ) ) )  VAR_1 . METHOD_9 ( TYPE_5 . METHOD_4 ( ) ) (  return java.util.Collections . METHOD_10 ( VAR_1 ) ; )  return java.util.Collections . METHOD_10 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . add ( METHOD_2 ( VAR_2 , admin , STRING_1 , 1 ) ) )  VAR_1 . add ( METHOD_2 ( VAR_2 , admin , STRING_1 , 1 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = user ( VAR_4 ) ) INIT = user ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = user ( VAR_4 , admin ) ) INIT = user ( VAR_4 , admin ) ) VAR VAR (  METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) )  METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) (  METHOD_5 ( STRING_3 , VAR_5 . METHOD_4 ( ) ) )  METHOD_5 ( STRING_3 , VAR_5 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME label ) NAME label ( IN METHOD_3 ( ) . METHOD_3 ( ) ) IN METHOD_3 ( ) . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . add ( label . getName ( ) ) )  VAR_1 . add ( label . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.junit.Assert.assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) )  org.junit.Assert.assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  change = c )  change = c ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  return TYPE_3 . create ( c , VAR_3 ) ; )  return TYPE_3 . create ( c , VAR_3 ) ; ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ( rw ) != null ) COND ( rw ) != null ( THEN THEN (  rw . METHOD_4 ( ) )  rw . METHOD_4 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( repo ) != null ) COND ( repo ) != null ( THEN THEN (  repo . close ( ) )  repo . close ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME ctl ) NAME ctl ( INIT = rsrc . METHOD_1 ( ) ) INIT = rsrc . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ! ( ctl . METHOD_2 ( ) ) ) COND ! ( ctl . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . user ( user ) . METHOD_3 ( VAR_2 ) )  VAR_1 . user ( user ) . METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF (  VAR_3 . index ( db . get ( ) , rsrc . getChange ( ) ) )  VAR_3 . index ( db . get ( ) , rsrc . getChange ( ) ) (  return TYPE_1 . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( IN result ) IN result ( BLOCK BLOCK (  r . add ( new TYPE_2 ( p ) ) )  r . add ( new TYPE_2 ( p ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_1 ( req , new TYPE_3 ( r ) ) )  VAR_1 . METHOD_1 ( req , new TYPE_3 ( r ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( VAR_1 ) ) INIT = METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( config ) ) INIT = new TYPE_1 ( config ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , e ) )  VAR_4 . error ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSet> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSet> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.PatchSet> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.PatchSet> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return METHOD_2 ( ) . METHOD_3 ( input , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ) INIT = new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return METHOD_2 ( ) . METHOD_3 ( input , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_2 ( ) . METHOD_3 ( input , db ) ; )  return METHOD_2 ( ) . METHOD_3 ( input , db ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_3 . METHOD_4 ( patchSets ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; )  return TYPE_3 . METHOD_4 ( patchSets ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) COND id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ( THEN THEN (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) COND id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND t . METHOD_5 ( id ) ) COND t . METHOD_5 ( id ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_5 ( VAR_12 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_5 ( VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME p ) NAME p ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_1<TYPE_2>> ) TYPE TYPE_3<TYPE_1<TYPE_2>> ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME r ) NAME r ( INIT = m . get ( p ) ) INIT = m . get ( p ) ) VAR VAR ( IF IF ( COND r == null ) COND r == null ( THEN THEN (  r = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) )  r = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) ) THEN THEN ) IF IF (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( ) ) COND TYPE_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return STRING_3 ; )  return STRING_3 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return STRING_3 ; )  return STRING_3 ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ( INIT = ( ( id . name ( ) ) + STRING_1 ) + VAR_2 ) INIT = ( ( id . name ( ) ) + STRING_1 ) + VAR_2 ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_1 . add ( new TYPE_2 ( message , true ) ) )  VAR_1 . add ( new TYPE_2 ( message , true ) ) (  throw new TYPE_3 ( STRING_2 , VAR_1 ) ; )  throw new TYPE_3 ( STRING_2 , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  VAR_1 . add ( new TYPE_2 ( ( STRING_3 + message ) , false ) ) )  VAR_1 . add ( new TYPE_2 ( ( STRING_3 + message ) , false ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 ) ) INIT = new TYPE_2 ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_5 ( ) ) COND VAR_2 . METHOD_5 ( ) ( BLOCK BLOCK (  VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) )  VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . commit ( ) . create ( ) ) INIT = repo . commit ( ) . create ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME master ) NAME master ( INIT = repo . commit ( ) . METHOD_2 ( VAR_1 ) . create ( ) ) INIT = repo . commit ( ) . METHOD_2 ( VAR_1 ) . create ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_3 ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_3 ( VAR_1 ) ) (  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_3 ( master ) ) )  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_3 ( master ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 . getValue ( ) ) ) INIT = new TYPE_2 ( VAR_2 . getValue ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_4 ) ) COND VAR_3 . equals ( VAR_4 ) ( THEN THEN (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( query ) == null ) COND ( query ) == null ( THEN THEN (  VAR_1 . run ( ) )  VAR_1 . run ( ) (  query = VAR_1 )  query = VAR_1 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; )  return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctx ) NAME ctx ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ctx ) ) INIT = METHOD_2 ( ctx ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ctx ) ) INIT = METHOD_3 ( ctx ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( VAR_1 , args ) ) INIT = METHOD_4 ( VAR_1 , args ) ) VAR VAR (  VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , METHOD_6 ( ctx ) , ( STRING_1 + VAR_5 ) , VAR_4 , TYPE_4 . METHOD_7 ( args ) , result ) ) )  VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , METHOD_6 ( ctx ) , ( STRING_1 + VAR_5 ) , VAR_4 , TYPE_4 . METHOD_7 ( args ) , result ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_1<TYPE_2>> ) TYPE TYPE_3<?extendsTYPE_1<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) != 1 ) COND ( VAR_1 . size ( ) ) != 1 ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_5 < TYPE_2 > ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; )  return new TYPE_5 < TYPE_2 > ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( STRING_1 ) ) INIT = repo . METHOD_2 ( STRING_1 ) ) VAR VAR (  repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) )  repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) (  org.junit.Assert.assertEquals ( ( ( STRING_4 + ( VAR_1 . name ( ) ) ) + STRING_5 ) , METHOD_3 ( STRING_6 , STRING_7 ) ) )  org.junit.Assert.assertEquals ( ( ( STRING_4 + ( VAR_1 . name ( ) ) ) + STRING_5 ) , METHOD_3 ( STRING_6 , STRING_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( TYPE_3 . METHOD_6 ( VAR_2 ) , result . METHOD_7 ( ) ) )  org.junit.Assert.assertEquals ( TYPE_3 . METHOD_6 ( VAR_2 ) , result . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null , null ) ) INIT = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME m ) NAME m ( INIT = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ) INIT = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_1 ) )  com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = cd . getId ( ) . toString ( ) ) INIT = cd . getId ( ) . toString ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) COND cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ( THEN THEN (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) (  commit ( VAR_1 ) )  commit ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_2 ( id ) )  VAR_2 . METHOD_2 ( id ) (  commit ( VAR_2 ) )  commit ( VAR_2 ) ) ELSE ELSE ) IF IF (  return TYPE_3 . METHOD_3 ( null ) ; )  return TYPE_3 . METHOD_3 ( null ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . add ( STRING_1 , STRING_2 ) . message ( STRING_3 ) . create ( ) ) INIT = METHOD_2 ( ) . add ( STRING_1 , STRING_2 ) . message ( STRING_3 ) . create ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = getChangeId ( VAR_1 ) ) INIT = getChangeId ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) . add ( STRING_4 , STRING_5 ) . message ( STRING_6 ) . create ( ) ) INIT = METHOD_2 ( ) . add ( STRING_4 , STRING_5 ) . message ( STRING_6 ) . create ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = getChangeId ( VAR_3 ) ) INIT = getChangeId ( VAR_3 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_5 , STRING_7 , false ) )  TYPE_1 . METHOD_3 ( VAR_5 , STRING_7 , false ) (  METHOD_4 ( VAR_2 , VAR_2 ) )  METHOD_4 ( VAR_2 , VAR_2 ) (  METHOD_4 ( VAR_4 , VAR_4 , VAR_2 ) )  METHOD_4 ( VAR_4 , VAR_4 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( 1 ) , 2 ) ) INIT = new TYPE_1 ( new TYPE_2 ( 1 ) , 2 ) ) VAR VAR (  assertEquals ( STRING_1 , VAR_1 . toString ( ) ) )  assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ) INIT = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) (  assertEquals ( VAR_1 , VAR_2 ) )  assertEquals ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.AccountGroup ) RETURN com.google.gerrit.reviewdb.client.AccountGroup ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME name ) NAME name ( INIT = new TYPE_1 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ) INIT = new TYPE_1 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = new com.google.gerrit.reviewdb.client . AccountGroup ( name , key , null ) ) INIT = new com.google.gerrit.reviewdb.client . AccountGroup ( name , key , null ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_2 ) + STRING_5 ) ) , METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) )  assertEquals ( ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_2 ) + STRING_5 ) ) , METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_2 ( ) ) != ( b . METHOD_2 ( ) ) ) COND ( a . METHOD_2 ( ) ) != ( b . METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( a . METHOD_2 ( ) ) ) COND i < ( a . METHOD_2 ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_3 ( i ) ) != ( b . METHOD_3 ( i ) ) ) COND ( a . METHOD_3 ( i ) ) != ( b . METHOD_3 ( i ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) INIT = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) ( IF IF ( COND VAR_4 . METHOD_4 ( VAR_1 ) ) COND VAR_4 . METHOD_4 ( VAR_1 ) ( THEN THEN (  VAR_3 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_1 ) ) )  VAR_3 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_1 ) ) ) THEN THEN ) IF IF (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  VAR_3 . close ( VAR_2 ) )  VAR_3 . close ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) (  VAR_3 = VAR_1 . METHOD_3 ( VAR_4 class ) )  VAR_3 = VAR_1 . METHOD_3 ( VAR_4 class ) (  VAR_5 = TYPE_3 . METHOD_4 ( VAR_1 ) )  VAR_5 = TYPE_3 . METHOD_4 ( VAR_1 ) (  VAR_6 = TYPE_3 . METHOD_5 ( VAR_1 ) )  VAR_6 = TYPE_3 . METHOD_5 ( VAR_1 ) (  VAR_7 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_8 class ) ) )  VAR_7 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_8 class ) ) (  VAR_9 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_10 class ) ) )  VAR_9 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_10 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = table . METHOD_2 ( ) ) INIT = table . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = table . METHOD_3 ( ) ) INIT = table . METHOD_3 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND row < VAR_2 ) COND row < VAR_2 ( UPDATE UPDATE (  row ++ )  row ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( METHOD_4 ( row ) ) != null ) COND ( METHOD_4 ( row ) ) != null ( THEN THEN (  table . METHOD_5 ( row , VAR_3 ) )  table . METHOD_5 ( row , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) (  add ( VAR_2 ) )  add ( VAR_2 ) (  VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . get ( ) ) ) ) )  VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . get ( ) ) ) ) (  display ( ) )  display ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = VAR_2 . get ( VAR_1 . getName ( ) ) ) INIT = VAR_2 . get ( VAR_1 . getName ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 . contains ( a ) ) COND VAR_3 . contains ( a ) ( THEN THEN (  VAR_2 . METHOD_1 ( a ) )  VAR_2 . METHOD_1 ( a ) ) THEN THEN ( ELSE ELSE (  a . METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) )  a . METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Change> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Change> ( NAME changes ) NAME changes ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  changes = db . changes ( ) . METHOD_2 ( project . METHOD_3 ( ) ) )  changes = db . changes ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_4 ( changes ) )  METHOD_4 ( changes ) (  db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) )  db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  index = new TYPE_1 ( VAR_1 ) )  index = new TYPE_1 ( VAR_1 ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . METHOD_2 ( index ) )  VAR_2 . METHOD_2 ( index ) (  VAR_3 = new TYPE_3 ( VAR_2 ) )  VAR_3 = new TYPE_3 ( VAR_2 ) (  VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null ) , new TYPE_6 ( null ) ) )  VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null ) , new TYPE_6 ( null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  index = new TYPE_1 ( VAR_1 ) )  index = new TYPE_1 ( VAR_1 ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . METHOD_2 ( index ) )  VAR_2 . METHOD_2 ( index ) (  VAR_3 = new TYPE_3 ( VAR_2 ) )  VAR_3 = new TYPE_3 ( VAR_2 ) (  VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null , VAR_2 ) ) )  VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( STRING_2 , STRING_3 ) ) INIT = new TYPE_3 ( STRING_2 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( STRING_4 , STRING_5 ) ) INIT = new TYPE_3 ( STRING_4 , STRING_5 ) ) VAR VAR (  assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) )  assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) (  assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) )  assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) )  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) (  assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) )  assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) (  assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) )  assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME edit ) NAME edit ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_3 ) NAME VAR_3 ( INIT = rw . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_2 . getRevision ( ) . get ( ) ) ) ) INIT = rw . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_2 . getRevision ( ) . get ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_3 ( ) . equals ( edit . METHOD_3 ( ) ) ) COND VAR_3 . METHOD_3 ( ) . equals ( edit . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_4 ( rw , VAR_1 , VAR_3 , edit ) ; )  return TYPE_3 . METHOD_4 ( rw , VAR_1 , VAR_3 , edit ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_6 . get ( VAR_1 ) ) INIT = TYPE_6 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . getProject ( ) . METHOD_4 ( ) ) INIT = VAR_4 . getProject ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_5 ( VAR_6 [ VAR_5 . METHOD_6 ( ) ] , VAR_7 ) ) ) COND ! ( VAR_2 . METHOD_5 ( VAR_6 [ VAR_5 . METHOD_6 ( ) ] , VAR_7 ) ) ( THEN THEN (  return VAR_1 . METHOD_7 ( ) ; )  return VAR_1 . METHOD_7 ( ) ; ) THEN THEN ) IF IF (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( req , rsp ) )  METHOD_2 ( req , rsp ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( ) . log ( STRING_1 , e ) )  METHOD_3 ( ) . log ( STRING_1 , e ) (  METHOD_4 ( rsp , false ) )  METHOD_4 ( rsp , false ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  return VAR_2 . values ( ) ; )  return VAR_2 . values ( ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME plugins ) NAME plugins ( INIT = new java.util.ArrayList < TYPE_2 > ( VAR_2 . values ( ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( VAR_2 . values ( ) ) ) VAR VAR (  plugins . METHOD_2 ( VAR_3 . values ( ) ) )  plugins . METHOD_2 ( VAR_3 . values ( ) ) (  return plugins ; )  return plugins ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_3 ) NAME VAR_3 ( INIT = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ) INIT = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_4 ) NAME VAR_4 ( INIT = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ) INIT = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ) VAR VAR (  METHOD_4 ( STRING_3 ) )  METHOD_4 ( STRING_3 ) (  METHOD_4 ( STRING_4 ) )  METHOD_4 ( STRING_4 ) (  METHOD_4 ( STRING_5 , VAR_3 ) )  METHOD_4 ( STRING_5 , VAR_3 ) (  METHOD_4 ( STRING_6 , VAR_4 ) )  METHOD_4 ( STRING_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME me ) NAME me ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 ) )  VAR_4 . METHOD_2 ( VAR_3 ) (  VAR_4 . METHOD_3 ( base ) )  VAR_4 . METHOD_3 ( base ) (  VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) (  VAR_4 . METHOD_6 ( METHOD_7 ( me ) ) )  VAR_4 . METHOD_6 ( METHOD_7 ( me ) ) (  VAR_4 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) )  VAR_4 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) (  return VAR_1 . insert ( VAR_4 ) ; )  return VAR_1 . insert ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) (  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) )  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) )  METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( db , change . change ( ) ) ) INIT = VAR_3 . METHOD_2 ( db , change . change ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . isEmpty ( ) )  com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . isEmpty ( ) ) THEN THEN ( ELSE ELSE (  com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . METHOD_4 ( ) ) ELSE ELSE ) IF IF (  METHOD_5 ( ( ( FLOAT_1 / ( VAR_4 ) ) / ( VAR_5 ) ) ) )  METHOD_5 ( ( ( FLOAT_1 / ( VAR_4 ) ) / ( VAR_5 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = TYPE_3 . METHOD_3 ( user . METHOD_4 ( ) . METHOD_5 ( ) ) ) INIT = TYPE_3 . METHOD_3 ( user . METHOD_4 ( ) . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND id == null ) COND id == null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return new TYPE_4 ( VAR_3 . get ( id ) ) ; )  return new TYPE_4 ( VAR_3 . get ( id ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_6 ( java.lang.String.format ( STRING_1 , id ) , e ) )  VAR_4 . METHOD_6 ( java.lang.String.format ( STRING_1 , id ) , e ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 , e ) )  VAR_2 . METHOD_2 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_3 . close ( true ) )  VAR_3 . close ( true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_2 , e ) )  VAR_2 . METHOD_2 ( STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_4 . close ( ) )  VAR_4 . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_3 , e ) )  VAR_2 . METHOD_2 ( STRING_3 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true (  TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) )  TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_7 ( true ) )  METHOD_7 ( true ) (  super . METHOD_6 ( VAR_3 ) )  super . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . topic ( change.getId ( ) . get ( ) , topic , METHOD_3 ( ) , new TYPE_2 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { VAR_2 = true ; TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) ; METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_5 VAR_3 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_3 ) ; } } ) )  TYPE_1 . topic ( change.getId ( ) . get ( ) , topic , METHOD_3 ( ) , new TYPE_2 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { VAR_2 = true ; TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) ; METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_5 VAR_3 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_3 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_4 ) , VAR_2 ) ) INIT = TYPE_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_4 ) , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ) INIT = TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_6 . METHOD_1 ( ) . METHOD_6 ( new TYPE_7 ( VAR_5 , VAR_7 ) ) ) INIT = TYPE_6 . METHOD_1 ( ) . METHOD_6 ( new TYPE_7 ( VAR_5 , VAR_7 ) ) ) VAR VAR (  VAR_1 . METHOD_7 ( VAR_6 ) )  VAR_1 . METHOD_7 ( VAR_6 ) (  VAR_6 . close ( ) )  VAR_6 . close ( ) (  return TYPE_2 . METHOD_8 ( VAR_5 ) ; )  return TYPE_2 . METHOD_8 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cm . METHOD_2 ( ) ) COND cm . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = cm . METHOD_3 ( ) ) INIT = cm . METHOD_3 ( ) ) VAR VAR (  cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) )  cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) (  cm . METHOD_4 ( VAR_1 , VAR_4 , VAR_3 . METHOD_6 ( ) ) )  cm . METHOD_4 ( VAR_1 , VAR_4 , VAR_3 . METHOD_6 ( ) ) (  cm . METHOD_7 ( null ) )  cm . METHOD_7 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) )  TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = TYPE_3 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ) INIT = TYPE_3 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ) VAR VAR (  TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) )  TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) (  return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; )  return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( admin ) )  METHOD_3 ( admin ) (  METHOD_4 ( VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_1 , VAR_2 ) (  assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) )  assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . get ( ) ) == ( rsrc . METHOD_1 ( ) ) ) COND ( VAR_1 . get ( ) ) == ( rsrc . METHOD_1 ( ) ) ( THEN THEN (  throw new TYPE_6 ( STRING_1 ) ; )  throw new TYPE_6 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return VAR_2 . METHOD_2 ( rsrc . METHOD_1 ( ) ) ; )  return VAR_2 . METHOD_2 ( rsrc . METHOD_1 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.Repository ) RETURN org.eclipse.jgit.lib.Repository ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_1 ( name ) ; )  return VAR_1 . METHOD_1 ( name ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) )  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( SWITCH SWITCH ( NAME p ) NAME p ( CASE VAR_1 ( BLOCK BLOCK (  url = VAR_2 )  url = VAR_2 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  url = admin . METHOD_2 ( ) )  url = admin . METHOD_2 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_3 ( ( STRING_1 + p ) ) ; )  throw new TYPE_3 ( ( STRING_1 + p ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  git = TYPE_4 . METHOD_3 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) )  git = TYPE_4 . METHOD_3 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME file ) NAME file ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ) INIT = VAR_3 . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ) VAR VAR (  return VAR_2 . isEmpty ( ) ? null : VAR_2 . METHOD_3 ( ) ; )  return VAR_2 . isEmpty ( ) ? null : VAR_2 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) (  install ( TYPE_1 . METHOD_3 ( ) ) )  install ( TYPE_1 . METHOD_3 ( ) ) (  install ( new TYPE_2 ( ) ) )  install ( new TYPE_2 ( ) ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) (  install ( new TYPE_3 ( ) ) )  install ( new TYPE_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) != null ) ) COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) != null ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( VAR_2 ) == null ) ) COND ( ( VAR_1 ) != null ) && ( ( VAR_2 ) == null ) ( THEN THEN (  throw new TYPE_3 ( STRING_2 ) ; )  throw new TYPE_3 ( STRING_2 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_1 ( key , 0 , true , ( ( VAR_1 ) != null ? new TYPE_4 < TYPE_5 > ( ) : null ) ) ; )  return METHOD_1 ( key , 0 , true , ( ( VAR_1 ) != null ? new TYPE_4 < TYPE_5 > ( ) : null ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_2 , VAR_3 , line ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 , line ) ) VAR VAR (  VAR_1 . append ( ( ( ( ( STRING_1 + line ) + STRING_2 ) + VAR_4 ) + STRING_3 ) ) )  VAR_1 . append ( ( ( ( ( STRING_1 + line ) + STRING_2 ) + VAR_4 ) + STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( rw . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( rw . METHOD_3 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( commit ) )  VAR_1 . METHOD_5 ( commit ) ( FOR-EACH FOR-EACH ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_6 ( VAR_1 . parseCommit ( VAR_2 ) , VAR_1 . parseCommit ( commit ) ) ) COND VAR_1 . METHOD_6 ( VAR_1 . parseCommit ( VAR_2 ) , VAR_1 . parseCommit ( commit ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( project . get ( ) ) ) INIT = TYPE_4 . METHOD_2 ( project . get ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) )  < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) (  return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . METHOD_1 ( ) ) ; )  return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . METHOD_1 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME index ) NAME index ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id,TYPE_2> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id,TYPE_2> ( NAME i ) NAME i ( IN METHOD_1 ( ) ) IN METHOD_1 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_2> ) TYPE TYPE_3<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( id ) ) INIT = VAR_2 . METHOD_2 ( id ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN (  i . METHOD_4 ( VAR_1 . get ( ) ) )  i . METHOD_4 ( VAR_1 . get ( ) ) ) THEN THEN ( ELSE ELSE (  i . delete ( id ) )  i . delete ( id ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_5 ( id . get ( ) ) )  METHOD_5 ( id . get ( ) ) (  TYPE_4 . METHOD_6 ( id ) )  TYPE_4 . METHOD_6 ( id ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME git ) NAME git ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Result ) TYPE TYPE_4.Result ( NAME change ) NAME change ( INIT = METHOD_3 ( git , true ) ) INIT = METHOD_3 ( git , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Result ) TYPE TYPE_4.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( git , true ) ) INIT = METHOD_3 ( git , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Result ) TYPE TYPE_4.Result ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( git , true ) ) INIT = METHOD_3 ( git , true ) ) VAR VAR (  METHOD_3 ( git , false ) )  METHOD_3 ( git , false ) ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME changes ) NAME changes ( INIT = METHOD_4 ( change ) ) INIT = METHOD_4 ( change ) ) VAR VAR (  METHOD_5 ( changes , VAR_1 , VAR_2 ) )  METHOD_5 ( changes , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . create ( ) . set ( STRING_1 , false ) . set ( STRING_2 , 0 ) . set ( STRING_3 , FLOAT_1 ) . set ( STRING_4 , true ) . set ( STRING_5 , INT_1 ) . set ( STRING_6 , false ) . set ( STRING_7 , true ) . set ( STRING_8 , true ) . set ( STRING_9 , STRING_10 ) . set ( STRING_11 , TYPE_2 . METHOD_2 ( type ) ) ; )  return TYPE_1 . create ( ) . set ( STRING_1 , false ) . set ( STRING_2 , 0 ) . set ( STRING_3 , FLOAT_1 ) . set ( STRING_4 , true ) . set ( STRING_5 , INT_1 ) . set ( STRING_6 , false ) . set ( STRING_7 , true ) . set ( STRING_8 , true ) . set ( STRING_9 , STRING_10 ) . set ( STRING_11 , TYPE_2 . METHOD_2 ( type ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ( INIT = getRevision ( ) ) INIT = getRevision ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( getChange ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = new TYPE_2 ( getChange ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) (  METHOD_3 ( VAR_7 , VAR_8 ) )  METHOD_3 ( VAR_7 , VAR_8 ) (  METHOD_3 ( VAR_9 , VAR_10 ) )  METHOD_3 ( VAR_9 , VAR_10 ) (  VAR_11 = VAR_12 )  VAR_11 = VAR_12 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_5 ) ( VAR_5 ) ) ) INIT = ( ( TYPE_5 ) ( VAR_5 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6.Change ) TYPE TYPE_6.Change ( NAME change ) NAME change ( INIT = TYPE_7 . get ( VAR_1 ) ) INIT = TYPE_7 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8.NameKey ) TYPE TYPE_8.NameKey ( NAME name ) NAME name ( INIT = change . METHOD_4 ( ) ) INIT = change . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_5 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) COND ! ( VAR_2 . METHOD_5 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ( THEN THEN (  return VAR_1 . METHOD_6 ( ) ; )  return VAR_1 . METHOD_6 ( ) ; ) THEN THEN ) IF IF (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; )  return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = ( ( TYPE_2 ) ( db ) ) ) INIT = ( ( TYPE_2 ) ( db ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( INIT = new TYPE_3 ( s ) ) INIT = new TYPE_3 ( s ) ) VAR VAR (  METHOD_2 ( db , s , e ) )  METHOD_2 ( db , s , e ) (  METHOD_3 ( db , s , e ) )  METHOD_3 ( db , s , e ) (  METHOD_4 ( db ) )  METHOD_4 ( db ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_3 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = TYPE_5 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_2 ( VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return new TYPE_1 ( in ) ; )  return new TYPE_1 ( in ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( name , value ) ) INIT = TYPE_2 . METHOD_2 ( name , value ) ) VAR VAR (  org.junit.Assert . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) )  org.junit.Assert . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) (  org.junit.Assert . METHOD_3 ( value , VAR_1 . getValue ( ) ) )  org.junit.Assert . METHOD_3 ( value , VAR_1 . getValue ( ) ) (  org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) )  org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME in ) NAME in ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_1 = user . email )  VAR_1 = user . email ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . changes ( ) . id ( r . getChangeId ( ) ) ) INIT = VAR_3 . changes ( ) . id ( r . getChangeId ( ) ) ) VAR VAR (  VAR_2 . METHOD_1 ( in ) )  VAR_2 . METHOD_1 ( in ) (  org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) )  org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_1 , VAR_2 ) (  assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) )  assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) , VAR_2 . edit ( ) ) , VAR_3 , VAR_4 , VAR_5 ) )  VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) , VAR_2 . edit ( ) ) , VAR_3 , VAR_4 , VAR_5 ) (  VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) )  VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( IF IF ( COND ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) COND ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_5 . get ( ) ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_5 . get ( ) ) ) ) VAR VAR (  VAR_6 . set ( VAR_7 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_8 ) ) )  VAR_6 . set ( VAR_7 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_8 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  input . METHOD_2 ( user ) )  input . METHOD_2 ( user ) (  TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( input , VAR_1 ) )  TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( input , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME url ) NAME url ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return info . METHOD_1 ( ) ? TYPE_2 . METHOD_2 ( base , VAR_1 , info . path ( ) ) : ( VAR_2 ) == ( VAR_3 ) ? TYPE_2 . METHOD_3 ( base , VAR_1 , info . path ( ) ) : TYPE_2 . METHOD_4 ( VAR_1 , info . path ( ) ) ; )  return info . METHOD_1 ( ) ? TYPE_2 . METHOD_2 ( base , VAR_1 , info . path ( ) ) : ( VAR_2 ) == ( VAR_3 ) ? TYPE_2 . METHOD_3 ( base , VAR_1 , info . path ( ) ) : TYPE_2 . METHOD_4 ( VAR_1 , info . path ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<TYPE_1.Key,TYPE_1.Id> ) RETURN java.util.Map<TYPE_1.Key,TYPE_1.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1.Key,TYPE_1.Id> ) TYPE java.util.Map<TYPE_1.Key,TYPE_1.Id> ( NAME r ) NAME r ( INIT = new TYPE_3 < TYPE_1 . Key , TYPE_1 . Id > ( ) ) INIT = new TYPE_3 < TYPE_1 . Key , TYPE_1 . Id > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4.Change ) TYPE TYPE_4.Change ( NAME c ) NAME c ( IN db . changes ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) IN db . changes ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ( BLOCK BLOCK (  r . put ( c . getKey ( ) , c . getId ( ) ) )  r . put ( c . getKey ( ) , c . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND in != null ) COND in != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; )  return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  java.util.Collections . METHOD_1 ( TYPE_3 . METHOD_2 ( in ) , new TYPE_4 < TYPE_2 > ( ) { public int METHOD_3 ( TYPE_2 a , TYPE_2 b ) { return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; } } ) )  java.util.Collections . METHOD_1 ( TYPE_3 . METHOD_2 ( in ) , new TYPE_4 < TYPE_2 > ( ) { public int METHOD_3 ( TYPE_2 a , TYPE_2 b ) { return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; } } ) ) THEN THEN ) IF IF (  return in ; )  return in ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ) COND ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( IN TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) ) IN TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( t ) ) ) COND ! ( VAR_2 . METHOD_4 ( t ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) VAR VAR (  return ( getName ( ) . equals ( VAR_2 . getName ( ) ) ) && ( METHOD_2 ( ) . equals ( VAR_2 . METHOD_2 ( ) ) ) ; )  return ( getName ( ) . equals ( VAR_2 . getName ( ) ) ) && ( METHOD_2 ( ) . equals ( VAR_2 . METHOD_2 ( ) ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) (  db = VAR_1 . METHOD_4 ( ) )  db = VAR_1 . METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ( ( db ) instanceof TYPE_2 ) ) . METHOD_7 ( ) )  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ( ( db ) instanceof TYPE_2 ) ) . METHOD_7 ( ) (  VAR_2 = ( ( TYPE_2 ) ( db ) ) . METHOD_8 ( ) )  VAR_2 = ( ( TYPE_2 ) ( db ) ) . METHOD_8 ( ) (  VAR_3 = VAR_2 . METHOD_9 ( STRING_1 ) )  VAR_3 = VAR_2 . METHOD_9 ( STRING_1 ) (  VAR_4 = VAR_2 . METHOD_9 ( STRING_2 ) )  VAR_4 = VAR_2 . METHOD_9 ( STRING_2 ) (  VAR_5 = VAR_2 . METHOD_9 ( STRING_3 ) )  VAR_5 = VAR_2 . METHOD_9 ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( ( ( java.lang.String ) ( null ) ) ) ) )  METHOD_2 ( b , b . append ( ( ( java.lang.String ) ( null ) ) ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) (  METHOD_2 ( b , b . append ( STRING_2 ) ) )  METHOD_2 ( b , b . append ( STRING_2 ) ) (  METHOD_2 ( b , b . append ( STRING_3 ) ) )  METHOD_2 ( b , b . append ( STRING_3 ) ) (  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Project ) TYPE TYPE_2.Project ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_2 ( VAR_1 , repo , project ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 , repo , project ) ) VAR VAR ( IF IF ( COND result != ( VAR_2 ) ) COND result != ( VAR_2 ) ( THEN THEN (  return result ; )  return result ; ) THEN THEN ) IF IF (  result = TYPE_3 . METHOD_2 ( VAR_3 , repo , project ) )  result = TYPE_3 . METHOD_2 ( VAR_3 , repo , project ) ( IF IF ( COND result != ( VAR_2 ) ) COND result != ( VAR_2 ) ( THEN THEN (  return result ; )  return result ; ) THEN THEN ) IF IF (  result = TYPE_3 . METHOD_2 ( VAR_4 , repo , project ) )  result = TYPE_3 . METHOD_2 ( VAR_4 , repo , project ) ( IF IF ( COND result != ( VAR_2 ) ) COND result != ( VAR_2 ) ( THEN THEN (  return result ; )  return result ; ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( STRING_1 ) ) INIT = VAR_2 . METHOD_3 ( STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( THEN THEN (  return new TYPE_1 ( VAR_3 . METHOD_5 ( 1 ) ) ; )  return new TYPE_1 ( VAR_3 . METHOD_5 ( 1 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . close ( ) )  VAR_2 . close ( ) ) FINALLY FINALLY ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( project , branch , null , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) )  TYPE_1 . METHOD_2 ( project , branch , null , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN Project.NameKey ) RETURN Project.NameKey ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  in . name = name ( VAR_1 ) )  in . name = name ( VAR_1 ) (  VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null )  VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null (  VAR_6 = VAR_4 )  VAR_6 = VAR_4 (  VAR_7 = VAR_3 )  VAR_7 = VAR_3 (  VAR_6 = VAR_4 )  VAR_6 = VAR_4 (  return METHOD_1 ( in ) ; )  return METHOD_1 ( in ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( false ) ) COND VAR_2 . METHOD_2 ( false ) ( THEN THEN (  throw new java.io.IOException ( STRING_1 ) ; )  throw new java.io.IOException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME result ) NAME result ( INIT = VAR_3 . METHOD_1 ( db , changeId , VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( db , changeId , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_2 ( false ) ) COND VAR_4 . METHOD_2 ( false ) ( THEN THEN (  throw new java.io.IOException ( STRING_2 ) ; )  throw new java.io.IOException ( STRING_2 ) ; ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME edit ) NAME edit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) )  VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) (  VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) )  VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account.Id,java.lang.String> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account.Id,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . of ( TYPE_3 . getName ( ) , TYPE_4 . getName ( ) ) ) INIT = TYPE_2 . of ( TYPE_3 . getName ( ) , TYPE_4 . getName ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ) TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( changeId ) ) INIT = VAR_3 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( changeId ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) != 1 ) COND ( VAR_2 . size ( ) ) != 1 ( THEN THEN (  throw new TYPE_5 ( changeId ) ; )  throw new TYPE_5 ( changeId ) ; ) THEN THEN ) IF IF (  return VAR_2 . get ( 0 ) . METHOD_4 ( ) ; )  return VAR_2 . get ( 0 ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ) INIT = VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  METHOD_1 ( repo ) )  METHOD_1 ( repo ) (  VAR_1 = true )  VAR_1 = true ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2|java.io.IOException ) TYPE TYPE_2|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Factory ) TYPE TYPE_2.Factory ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_2 . apply ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; )  return VAR_2 . apply ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ProjectConfig ) TYPE TYPE_1.ProjectConfig ( NAME cfg ) NAME cfg ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) VAR VAR (  cfg . METHOD_4 ( ) . METHOD_5 ( ) )  cfg . METHOD_4 ( ) . METHOD_5 ( ) (  cfg . METHOD_4 ( ) . put ( VAR_3 . getName ( ) , VAR_3 ) )  cfg . METHOD_4 ( ) . put ( VAR_3 . getName ( ) , VAR_3 ) (  METHOD_6 ( cfg ) )  METHOD_6 ( cfg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.PatchSet ) RETURN com.google.gerrit.reviewdb.client.PatchSet ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.server.ReviewDb> ) TYPE TYPE_1<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = change ( db ) ) INIT = change ( db ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME p ) NAME p ( IN METHOD_2 ( db ) ) IN METHOD_2 ( db ) ( BLOCK BLOCK ( IF IF ( COND p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) COND p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ( THEN THEN (  VAR_1 = p )  VAR_1 = p (  return p ; )  return p ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( IF IF ( COND config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) COND config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ( THEN THEN (  VAR_1 = new TYPE_1 ( false , TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) )  VAR_1 = new TYPE_1 ( false , TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 = new TYPE_1 ( false ) )  VAR_1 = new TYPE_1 ( false ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_5 . apply ( VAR_1 . METHOD_1 ( s ) . format ( change ) ) ; )  return TYPE_5 . apply ( VAR_1 . METHOD_1 ( s ) . format ( change ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_1 , e ) ; )  throw new TYPE_4 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<java.lang.String,java.lang.String> ) RETURN TYPE_1<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String,java.lang.String> ) TYPE TYPE_1<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < java.lang.String , java.lang.String > ( ) ) INIT = new TYPE_1 < java.lang.String , java.lang.String > ( ) ) VAR VAR (  VAR_1 . put ( STRING_1 , VAR_2 class . getName ( ) ) )  VAR_1 . put ( STRING_1 , VAR_2 class . getName ( ) ) (  VAR_1 . put ( STRING_2 , STRING_3 ) )  VAR_1 . put ( STRING_2 , STRING_3 ) (  VAR_1 . put ( STRING_4 , STRING_5 ) )  VAR_1 . put ( STRING_4 , STRING_5 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) COND ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( METHOD_2 ( ) ) )  r . append ( METHOD_2 ( ) ) (  r . append ( change . getChangeId ( ) ) )  r . append ( change . getChangeId ( ) ) (  return r . toString ( ) ; )  return r . toString ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) COND ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( METHOD_2 ( ) ) )  r . append ( METHOD_2 ( ) ) (  r . append ( change . getChangeId ( ) ) )  r . append ( change . getChangeId ( ) ) (  return r . toString ( ) ; )  return r . toString ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME approvals ) NAME approvals ( INIT = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ) INIT = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME a ) NAME a ( IN approvals ) IN approvals ( BLOCK BLOCK (  a . METHOD_5 ( change ) )  a . METHOD_5 ( change ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  db . METHOD_2 ( ) . update ( approvals ) )  db . METHOD_2 ( ) . update ( approvals ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  install ( new TYPE_1 ( ) . METHOD_2 ( VAR_1 class , VAR_2 class ) . METHOD_3 ( VAR_3 . Factory class ) ) )  install ( new TYPE_1 ( ) . METHOD_2 ( VAR_1 class , VAR_2 class ) . METHOD_3 ( VAR_3 . Factory class ) ) (  install ( new TYPE_1 ( ) . METHOD_2 ( VAR_4 class , VAR_5 class ) . METHOD_3 ( VAR_6 . Factory class ) ) )  install ( new TYPE_1 ( ) . METHOD_2 ( VAR_4 class , VAR_5 class ) . METHOD_3 ( VAR_6 . Factory class ) ) (  install ( new TYPE_2 ( VAR_7 ) ) )  install ( new TYPE_2 ( VAR_7 ) ) ( IF IF ( COND ( VAR_8 ) == null ) COND ( VAR_8 ) == null ( THEN THEN (  install ( new TYPE_3 ( ) ) )  install ( new TYPE_3 ( ) ) ) THEN THEN ( ELSE ELSE (  install ( new TYPE_4 ( ) ) )  install ( new TYPE_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; )  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( change.getId ( ) , e ) ; )  throw new TYPE_3 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( change.getId ( ) , e ) ; )  throw new TYPE_3 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( r . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( r . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( r . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( r . METHOD_5 ( ) ) (  return VAR_1 . apply ( change ) ; )  return VAR_1 . apply ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_3 ) NAME VAR_3 ( INIT = insert ( METHOD_3 ( VAR_1 ) ) ) INIT = insert ( METHOD_3 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_4 ) NAME VAR_4 ( INIT = insert ( METHOD_3 ( VAR_2 ) ) ) INIT = insert ( METHOD_3 ( VAR_2 ) ) ) VAR VAR (  METHOD_4 ( STRING_3 ) )  METHOD_4 ( STRING_3 ) (  METHOD_4 ( STRING_4 , VAR_3 ) )  METHOD_4 ( STRING_4 , VAR_3 ) (  METHOD_4 ( STRING_5 , VAR_4 ) )  METHOD_4 ( STRING_5 , VAR_4 ) (  METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) )  METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_1 ( VAR_1 ) ) COND VAR_2 . METHOD_1 ( VAR_1 ) ( THEN THEN ( IF IF ( COND ( ( VAR_3 ) instanceof TYPE_1 ) && ( VAR_4 . METHOD_2 ( false , true ) ) ) COND ( ( VAR_3 ) instanceof TYPE_1 ) && ( VAR_4 . METHOD_2 ( false , true ) ) ( THEN THEN (  ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) )  ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_3 ( this ) )  VAR_5 . METHOD_3 ( this ) (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( VAR_1 ) , TYPE_3 . name ( ) ) ) INIT = new TYPE_2 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( VAR_1 ) , TYPE_3 . name ( ) ) ) VAR VAR (  return new TYPE_4 ( VAR_3 ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( TYPE_3 . name ( ) ) . METHOD_7 ( VAR_2 ) ; )  return new TYPE_4 ( VAR_3 ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( TYPE_3 . name ( ) ) . METHOD_7 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( db ) != null ) COND ( db ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ps ) NAME ps ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ps != null ) COND ps != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME w ) NAME w ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND w . METHOD_4 ( ) ) COND w . METHOD_4 ( ) ( THEN THEN (  add ( VAR_1 , w . getAccountId ( ) ) )  add ( VAR_1 , w . getAccountId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3.OrmException ) TYPE TYPE_3.OrmException ( NAME err ) NAME err ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; )  return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME input ) NAME input ( INIT = TYPE_3 . METHOD_1 ( TYPE_4 . METHOD_2 ( VAR_1 , ObjectId : : getName ) ) ) INIT = TYPE_3 . METHOD_1 ( TYPE_4 . METHOD_2 ( VAR_1 , ObjectId : : getName ) ) ) VAR VAR (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME r ) NAME r ( INIT = VAR_4 . apply ( new TYPE_6 ( VAR_5 ) , input ) ) INIT = VAR_4 . apply ( new TYPE_6 ( VAR_5 ) , input ) ) VAR VAR (  METHOD_3 ( VAR_6 , STRING_1 ) )  METHOD_3 ( VAR_6 , STRING_1 ) (  METHOD_3 ( VAR_7 , STRING_2 ) )  METHOD_3 ( VAR_7 , STRING_2 ) (  METHOD_3 ( VAR_8 , STRING_3 ) )  METHOD_3 ( VAR_8 , STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7|java.io.IOException ) TYPE TYPE_7|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_4 ( e ) ; )  throw METHOD_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.util.Set<java.lang.String>> ) RETURN TYPE_1<java.util.Set<java.lang.String>> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = req . METHOD_1 ( ) ) INIT = req . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME notes ) NAME notes ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = notes . METHOD_4 ( ) ) INIT = notes . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = java.util.Collections . METHOD_5 ( ) )  VAR_2 = java.util.Collections . METHOD_5 ( ) ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_6 ( VAR_2 ) ; )  return TYPE_1 . METHOD_6 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME branch ) NAME branch ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  TYPE_3 . p ( r , branch . getParentKey ( ) ) )  TYPE_3 . p ( r , branch . getParentKey ( ) ) (  TYPE_3 . METHOD_2 ( r , branch ) )  TYPE_3 . METHOD_2 ( r , branch ) (  TYPE_3 . a ( r , STRING_1 ) )  TYPE_3 . a ( r , STRING_1 ) (  return ( VAR_1 ) + r ; )  return ( VAR_1 ) + r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN Account.Id ) RETURN Account.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME a ) NAME a ( INIT = VAR_1 . METHOD_2 ( db , VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( db , VAR_2 ) ) VAR VAR ( IF IF ( COND a == null ) COND a == null ( THEN THEN (  throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; )  throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  return a . getId ( ) ; )  return a . getId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) COND ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ( THEN THEN (  VAR_1 . put ( name , new TYPE_1 . String ( value ) ) )  VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) )  info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = info . METHOD_1 ( ) . values ( ) ) INIT = info . METHOD_1 ( ) . values ( ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_3 ( ) )  VAR_1 = new TYPE_3 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME insert ) NAME insert ( INIT = METHOD_2 ( VAR_2 , VAR_1 ) ) INIT = METHOD_2 ( VAR_2 , VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . insert ( VAR_4 ) )  VAR_3 . insert ( VAR_4 ) (  org.junit.Assert . METHOD_3 ( STRING_1 ) )  org.junit.Assert . METHOD_3 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1.OrmException ) TYPE TYPE_1.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) )  org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_6 ( insert , 1 ) )  METHOD_6 ( insert , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_4 ( VAR_1 . changeId , VAR_4 ) )  METHOD_4 ( VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_3 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_3 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ) INIT = TYPE_1 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = METHOD_2 ( c , VAR_1 ) ) INIT = METHOD_2 ( c , VAR_1 ) ) VAR VAR (  u . METHOD_3 ( c . METHOD_4 ( ) ) )  u . METHOD_3 ( c . METHOD_4 ( ) ) (  u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) )  u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) (  u . commit ( ) )  u . commit ( ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME file ) NAME file ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = new TYPE_1 ( name ) ) INIT = new TYPE_1 ( name ) ) VAR VAR (  e . METHOD_2 ( VAR_3 ) )  e . METHOD_2 ( VAR_3 ) (  e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) )  e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  return e ; )  return e ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.eclipse.jgit.revwalk.RevCommit> ) RETURN java.util.List<org.eclipse.jgit.revwalk.RevCommit> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( project ) ) INIT = VAR_1 . METHOD_2 ( project ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  rw . METHOD_3 ( rw . parseCommit ( repo . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) ) )  rw . METHOD_3 ( rw . parseCommit ( repo . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) ) (  return TYPE_1 . METHOD_6 ( rw ) ; )  return TYPE_1 . METHOD_6 ( rw ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  rw . METHOD_7 ( ) )  rw . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id != null ) COND id != null ( THEN THEN (  VAR_1 = db . METHOD_2 ( ) )  VAR_1 = db . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  revision = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) )  revision = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 = null )  VAR_1 = null ) FINALLY FINALLY ) TRY TRY ) THEN THEN ( ELSE ELSE (  revision = null )  revision = null (  METHOD_3 ( ) )  METHOD_3 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_3 , VAR_1 ) ) ) INIT = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_3 , VAR_1 ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return TYPE_1 . of ( VAR_2 . getAccountId ( ) ) ; )  return TYPE_1 . of ( VAR_2 . getAccountId ( ) ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_4 ( ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , size ) ) INIT = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , size ) ) VAR VAR ( IF IF ( COND TYPE_5 . METHOD_4 ( url ) ) COND TYPE_5 . METHOD_4 ( url ) ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_6 . METHOD_5 ( url ) ; )  return TYPE_6 . METHOD_5 ( url ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( INIT = this ) INIT = this ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( WHILE WHILE ( COND ( t . METHOD_2 ( ) ) && ( 0 < VAR_1 ) ) COND ( t . METHOD_2 ( ) ) && ( 0 < VAR_1 ) ( BLOCK BLOCK (  VAR_1 -- )  VAR_1 -- (  t = ( ( TYPE_2 ) ( t ) ) . VAR_3 . METHOD_3 ( ) )  t = ( ( TYPE_2 ) ( t ) ) . VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ) WHILE WHILE ( IF IF ( COND t . METHOD_2 ( ) ) COND t . METHOD_2 ( ) ( THEN THEN (  return ( ( TYPE_2 ) ( t ) ) . VAR_4 ; )  return ( ( TYPE_2 ) ( t ) ) . VAR_4 ; ) THEN THEN ) IF IF (  throw new TYPE_3 ( VAR_2 ) ; )  throw new TYPE_3 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME index ) NAME index ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2<TYPE_1,TYPE_3> ) TYPE TYPE_2<TYPE_1,TYPE_3> ( NAME i ) NAME i ( IN METHOD_1 ( ) ) IN METHOD_1 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4<TYPE_3> ) TYPE TYPE_4<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( THEN THEN (  i . METHOD_4 ( VAR_3 . get ( ) ) )  i . METHOD_4 ( VAR_3 . get ( ) ) ) THEN THEN ( ELSE ELSE (  i . delete ( VAR_1 ) )  i . delete ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_5 ( VAR_1 . get ( ) ) )  METHOD_5 ( VAR_1 . get ( ) ) (  TYPE_5 . METHOD_6 ( VAR_1 ) )  TYPE_5 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . getValue ( ) ) == null ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . getValue ( ) ) == null ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return TYPE_4 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 . getValue ( ) ) ) ; )  return TYPE_4 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 . getValue ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME in ) NAME in ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR (  VAR_2 = id )  VAR_2 = id ( VAR VAR ( TYPE java.util.List<TYPE_8> ) TYPE java.util.List<TYPE_8> ( NAME VAR_3 ) NAME VAR_3 ( INIT = put . get ( ) . apply ( VAR_1 , in ) ) INIT = put . get ( ) . apply ( VAR_1 , in ) ) VAR VAR ( IF IF ( COND VAR_3 . isEmpty ( ) ) COND VAR_3 . isEmpty ( ) ( THEN THEN (  return TYPE_9 . METHOD_1 ( ) ; )  return TYPE_9 . METHOD_1 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 . size ( ) ) == 1 ) COND ( VAR_3 . size ( ) ) == 1 ( THEN THEN (  return VAR_3 . get ( 0 ) ; )  return VAR_3 . get ( 0 ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_10 ( ) ; )  throw new TYPE_10 ( ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<com.google.gerrit.reviewdb.client.Account.Id,TYPE_1> ) RETURN java.util.Map<com.google.gerrit.reviewdb.client.Account.Id,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<com.google.gerrit.reviewdb.client.Account.Id,TYPE_1> ) TYPE java.util.Map<com.google.gerrit.reviewdb.client.Account.Id,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( IN db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) IN db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ( BLOCK BLOCK (  VAR_2 . put ( m . getAccountId ( ) , m ) )  VAR_2 . put ( m . getAccountId ( ) , m ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = req . METHOD_2 ( ) ) INIT = req . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_3 ( VAR_1 ) ) COND TYPE_2 . METHOD_3 ( VAR_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . is ( CHAR_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; )  return TYPE_3 . is ( CHAR_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = METHOD_3 ( c ) ) INIT = METHOD_3 ( c ) ) VAR VAR ( IF IF ( COND ps != null ) COND ps != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( ps , VAR_1 ) )  METHOD_4 ( ps , VAR_1 ) (  return METHOD_5 ( ) . insert ( VAR_4 , VAR_1 . toString ( ) . METHOD_6 ( STRING_1 ) ) ; )  return METHOD_5 ( ) . insert ( VAR_4 , VAR_1 . toString ( ) . METHOD_6 ( STRING_1 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME b ) NAME b ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND b . ref ( ) . contains ( VAR_1 . METHOD_2 ( ) ) ) COND b . ref ( ) . contains ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  VAR_3 . add ( new TYPE_4 ( b ) ) )  VAR_3 . add ( new TYPE_4 ( b ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_3 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) )  VAR_2 . METHOD_3 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Status ) TYPE TYPE_1.Status ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( input . getStatus ( ) ) == status ; )  return ( input . getStatus ( ) ) == status ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . getStatus ( ) ) == status ; } } ) ) ; )  return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . getStatus ( ) ) == status ; } } ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ( INIT = change . currentPatchSetId ( ) ) INIT = change . currentPatchSetId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ps ) NAME ps ( INIT = new TYPE_1 ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , ( VAR_1 != null ? ( VAR_1 . get ( ) ) + 1 : 1 ) ) ) ) INIT = new TYPE_1 ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , ( VAR_1 != null ? ( VAR_1 . get ( ) ) + 1 : 1 ) ) ) ) VAR VAR (  ps . METHOD_2 ( STRING_1 ) )  ps . METHOD_2 ( STRING_1 ) (  change . METHOD_3 ( ps ) )  change . METHOD_3 ( ps ) (  TYPE_2 . METHOD_4 ( change ) )  TYPE_2 . METHOD_4 ( change ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . equals ( VAR_1 ) ) ) COND ! ( VAR_2 . equals ( VAR_1 ) ) ( THEN THEN (  org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) )  org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.eclipse.jgit.lib.ObjectId> ) TYPE java.util.List<org.eclipse.jgit.lib.ObjectId> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) COND ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return id . getName ( ) ; )  return id . getName ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < org.eclipse.jgit.lib.ObjectId , java.lang.String > ( ) { public java.lang.String apply ( org.eclipse.jgit.lib.ObjectId id ) { return id . getName ( ) ; } } ) ; )  return TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < org.eclipse.jgit.lib.ObjectId , java.lang.String > ( ) { public java.lang.String apply ( org.eclipse.jgit.lib.ObjectId id ) { return id . getName ( ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_3 . METHOD_4 ( ) ) ) + ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_3 . METHOD_4 ( ) ) ) + ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) (  VAR_5 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_6 . METHOD_4 ( ) ) ) + ( VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) )  VAR_5 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_6 . METHOD_4 ( ) ) ) + ( VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME branch ) NAME branch ( INIT = db . METHOD_2 ( VAR_1 ) ) INIT = db . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND branch != null ) COND branch != null ( THEN THEN (  VAR_2 = VAR_3 . parseCommit ( branch . METHOD_3 ( ) ) )  VAR_2 = VAR_3 . parseCommit ( branch . METHOD_3 ( ) ) (  base = TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) )  base = TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_4 = TYPE_2 . METHOD_4 ( db . METHOD_6 ( ) , VAR_2 ) )  VAR_4 = TYPE_2 . METHOD_4 ( db . METHOD_6 ( ) , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_4 = TYPE_2 . METHOD_7 ( ) )  VAR_4 = TYPE_2 . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME p ) NAME p ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( METHOD_1 ( ) ) == ( VAR_2 ) ) INIT = ( METHOD_1 ( ) ) == ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( p . getRevision ( ) ) != null ) ? p . getRevision ( ) . get ( ) : null ) INIT = ( ( p . getRevision ( ) ) != null ) ? p . getRevision ( ) . get ( ) : null ) VAR VAR (  return ( VAR_1 && ( id . equals ( VAR_3 ) ) ) || ( ( ( ! VAR_1 ) && ( VAR_3 != null ) ) && ( VAR_3 . METHOD_2 ( id ) ) ) ; )  return ( VAR_1 && ( id . equals ( VAR_3 ) ) ) || ( ( ( ! VAR_1 ) && ( VAR_3 != null ) ) && ( VAR_3 . METHOD_2 ( id ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . apply ( rsrc , TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) )  VAR_2 . apply ( rsrc , TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( TRY TRY ( BLOCK BLOCK (  project ( ) . METHOD_3 ( input ) )  project ( ) . METHOD_3 ( input ) (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) )  com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( ) ) INIT = repo . METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) )  p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) (  return p ; )  return p ; (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . close ( ) )  VAR_1 . close ( ) (  METHOD_7 ( VAR_3 ) )  METHOD_7 ( VAR_3 ) (  to = VAR_4 )  to = VAR_4 ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME master ) NAME master ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ( INIT = git . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ) INIT = git . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ) VAR VAR (  METHOD_5 ( master , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_5 ( master , STRING_3 , STRING_4 , STRING_5 ) (  VAR_2 . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_6 ( VAR_1 ) (  METHOD_7 ( VAR_3 , project , STRING_6 ) )  METHOD_7 ( VAR_3 , project , STRING_6 ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_5 ( STRING_7 , STRING_8 , STRING_9 , STRING_10 ) ) INIT = METHOD_5 ( STRING_7 , STRING_8 , STRING_9 , STRING_10 ) ) VAR VAR (  r . METHOD_8 ( ) )  r . METHOD_8 ( ) (  r . METHOD_9 ( VAR_4 , null , admin ) )  r . METHOD_9 ( VAR_4 , null , admin ) (  METHOD_10 ( master , STRING_8 ) )  METHOD_10 ( master , STRING_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME update ) NAME update ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ) VAR VAR ( VAR VAR ( TYPE TYPE_4<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_4<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_5<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_1 ( db , update , VAR_1 , change , ps . getId ( ) , ps . METHOD_2 ( ) , info . METHOD_3 ( ) . METHOD_4 ( ) , info . METHOD_5 ( ) . METHOD_4 ( ) , VAR_2 , VAR_3 ) ; )  return METHOD_1 ( db , update , VAR_1 , change , ps . getId ( ) , ps . METHOD_2 ( ) , info . METHOD_3 ( ) . METHOD_4 ( ) , info . METHOD_5 ( ) . METHOD_4 ( ) , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME revision ) NAME revision ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( user . METHOD_2 ( ) . METHOD_3 ( null ) , revision . METHOD_4 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; )  return new TYPE_1 ( user . METHOD_2 ( ) . METHOD_3 ( null ) , revision . METHOD_4 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.Account ) RETURN com.google.gerrit.reviewdb.client.Account ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; )  return VAR_2 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_3 ) NAME VAR_3 ( CASE VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ) COND ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ( THEN THEN (  return METHOD_5 ( VAR_1 ) ; )  return METHOD_5 ( VAR_1 ) ; ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK ( IF IF ( COND ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ) COND ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ( THEN THEN (  return METHOD_5 ( VAR_1 ) ; )  return METHOD_5 ( VAR_1 ) ; ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK ( IF IF ( COND ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ) COND ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ( THEN THEN (  return METHOD_5 ( VAR_1 ) ; )  return METHOD_5 ( VAR_1 ) ; ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 2 ) INIT = 2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = new TYPE_2 ( p , VAR_2 ) ) INIT = new TYPE_2 ( p , VAR_2 ) ) VAR VAR (  METHOD_2 ( p , c . getParentKey ( ) ) )  METHOD_2 ( p , c . getParentKey ( ) ) (  METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) )  METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  res . METHOD_2 ( VAR_1 ) )  res . METHOD_2 ( VAR_1 ) (  TYPE_4 . METHOD_3 ( req , res , null , c ) )  TYPE_4 . METHOD_3 ( req , res , null , c ) (  TYPE_4 . METHOD_4 ( null , res , msg ) )  TYPE_4 . METHOD_4 ( null , res , msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3<byte[]> ) TYPE TYPE_3<byte[]> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE byte[] ) TYPE byte[] ( NAME key ) NAME key ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( key ) ) INIT = METHOD_2 ( key ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  r . add ( new TYPE_2 ( key , VAR_2 ) ) )  r . add ( new TYPE_2 ( key , VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_4 < TYPE_2 > ( r ) ; )  return new TYPE_4 < TYPE_2 > ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( VAR_1 . changes ( ) . id ( changeId ) . info ( ) . VAR_2 ) . METHOD_2 ( STRING_1 ) . isEqualTo ( true ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . changes ( ) . id ( changeId ) . info ( ) . VAR_2 ) . METHOD_2 ( STRING_1 ) . isEqualTo ( true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ( INIT = METHOD_3 ( changeId ) ) INIT = METHOD_3 ( changeId ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_4 ( rsrc ) ) INIT = VAR_4 . METHOD_4 ( rsrc ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_5 ( ) ) . METHOD_2 ( STRING_2 ) . METHOD_6 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_5 ( ) ) . METHOD_2 ( STRING_2 ) . METHOD_6 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_7 ( ) ) . METHOD_2 ( STRING_3 ) . METHOD_6 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_7 ( ) ) . METHOD_2 ( STRING_3 ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = true )  VAR_1 = true (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_7 ( true ) )  METHOD_7 ( true ) (  super . METHOD_6 ( VAR_2 ) )  super . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ; } public void METHOD_6 ( TYPE_6 VAR_2 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_2 ) ; } } ) )  TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ; } public void METHOD_6 ( TYPE_6 VAR_2 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_2 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , admin ) )  METHOD_3 ( VAR_1 . changeId , admin ) (  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( admin ) . to ( VAR_4 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( admin ) . to ( VAR_4 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 )  VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 (  VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 )  VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 (  VAR_3 = change . METHOD_5 ( ) )  VAR_3 = change . METHOD_5 ( ) (  VAR_4 = change . getStatus ( ) . METHOD_6 ( ) )  VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( new TYPE_3 ( ) ) ) . METHOD_6 ( ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( new TYPE_3 ( ) ) ) . METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) (  VAR_3 = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 , VAR_8 ) )  VAR_3 = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 , VAR_8 ) (  VAR_3 . METHOD_9 ( ) )  VAR_3 . METHOD_9 ( ) (  VAR_2 . METHOD_10 ( ) )  VAR_2 . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  res . METHOD_2 ( VAR_1 ) )  res . METHOD_2 ( VAR_1 ) (  METHOD_3 ( res , VAR_2 ) )  METHOD_3 ( res , VAR_2 ) (  METHOD_4 ( res ) )  METHOD_4 ( res ) ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME out ) NAME out ( INIT = TYPE_4 . METHOD_5 ( req , res ) ) INIT = TYPE_4 . METHOD_5 ( req , res ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  out . METHOD_6 ( message ) )  out . METHOD_6 ( message ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) == VAR_1 ) COND ( VAR_2 ) == VAR_1 ( THEN THEN (  VAR_3 = null )  VAR_3 = null (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_4 ) == VAR_1 ) COND ( VAR_4 ) == VAR_1 ( THEN THEN (  VAR_3 = null )  VAR_3 = null (  VAR_5 = false )  VAR_5 = false (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctl ) NAME ctl ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME user ) NAME user ( INIT = VAR_3 . create ( a . getAccountId ( ) ) ) INIT = VAR_3 . create ( a . getAccountId ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ctl . METHOD_3 ( user ) . METHOD_4 ( VAR_2 ) ) INIT = ctl . METHOD_3 ( user ) . METHOD_4 ( VAR_2 ) ) VAR VAR (  a . METHOD_5 ( ( ( short ) ( VAR_4 . METHOD_6 ( a . getValue ( ) ) ) ) ) )  a . METHOD_5 ( ( ( short ) ( VAR_4 . METHOD_6 ( a . getValue ( ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) )  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME u ) NAME u ( INIT = user ( ) ) INIT = user ( ) ) VAR VAR (  METHOD_4 ( STRING_2 , u . METHOD_5 ( ) ) )  METHOD_4 ( STRING_2 , u . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( null , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_2 ( ) ) ) )  VAR_1 . METHOD_1 ( null , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_2 ( ) ) ) (  VAR_1 . METHOD_3 ( m , VAR_3 , VAR_4 . get ( 0 ) , VAR_5 . get ( 0 ) ) )  VAR_1 . METHOD_3 ( m , VAR_3 , VAR_4 . get ( 0 ) , VAR_5 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ) INIT = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ) VAR VAR (  METHOD_5 ( STRING_7 ) )  METHOD_5 ( STRING_7 ) (  METHOD_5 ( STRING_8 , change ) )  METHOD_5 ( STRING_8 , change ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  b . append ( 1 ) )  b . append ( 1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = b . METHOD_2 ( ) ) INIT = b . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( VAR_1 , b ) )  METHOD_4 ( VAR_1 , b ) (  METHOD_5 ( ( VAR_1 instanceof TYPE_1 ) ) )  METHOD_5 ( ( VAR_1 instanceof TYPE_1 ) ) (  assertEquals ( STRING_1 , VAR_1 . METHOD_6 ( ) ) )  assertEquals ( STRING_1 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_1 - ( METHOD_2 ( ) . METHOD_3 ( ) ) )  VAR_2 = VAR_1 - ( METHOD_2 ( ) . METHOD_3 ( ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( METHOD_2 ( ) . METHOD_4 ( ) ) ) COND i < ( METHOD_2 ( ) . METHOD_4 ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 . get ( i ) . METHOD_1 ( VAR_2 ) )  VAR_3 . get ( i ) . METHOD_1 ( VAR_2 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String,org.eclipse.jgit.revwalk.RevCommit> ) TYPE TYPE_1<java.lang.String,org.eclipse.jgit.revwalk.RevCommit> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME input ) NAME input ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  project ( ) . METHOD_1 ( input ) )  project ( ) . METHOD_1 ( input ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = change ( ) ) INIT = change ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) )  VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . in ( VAR_2 class ) )  bind ( VAR_1 class ) . in ( VAR_2 class ) (  bind ( VAR_3 class ) )  bind ( VAR_3 class ) (  bind ( VAR_4 class ) . in ( VAR_5 ) )  bind ( VAR_4 class ) . in ( VAR_5 ) (  bind ( VAR_6 class ) . in ( VAR_2 class ) )  bind ( VAR_6 class ) . in ( VAR_2 class ) (  bind ( VAR_7 . Factory class ) . in ( VAR_5 ) )  bind ( VAR_7 . Factory class ) . in ( VAR_5 ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) (  factory ( VAR_9 . Factory class ) )  factory ( VAR_9 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Set<TYPE_1.Id> ) RETURN java.util.Set<TYPE_1.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ) VAR VAR (  r = VAR_1 . get ( change . METHOD_2 ( ) . getParentKey ( ) ) )  r = VAR_1 . get ( change . METHOD_2 ( ) . getParentKey ( ) ) (  return r != null ? r . METHOD_3 ( ) : VAR_2 . Collections < TYPE_1 . Id > METHOD_4 ( ) ; )  return r != null ? r . METHOD_3 ( ) : VAR_2 . Collections < TYPE_1 . Id > METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( id ) ) INIT = TYPE_2 . METHOD_1 ( id ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) )  TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) )  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) (  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 ) ) ) )  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 ) ) ) (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_4 , STRING_5 , STRING_3 , STRING_6 ) ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_4 , STRING_5 , STRING_3 , STRING_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) COND ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_4 . currentPatchSetId ( ) . equals ( VAR_3 ) ) ) COND ! ( VAR_4 . currentPatchSetId ( ) . equals ( VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . base = base )  this . base = base (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 (  this . VAR_3 = VAR_3 )  this . VAR_3 = VAR_3 (  this . VAR_4 = VAR_4 )  this . VAR_4 = VAR_4 (  this . VAR_5 = VAR_5 )  this . VAR_5 = VAR_5 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) (  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = util . user ( VAR_3 , VAR_4 ) ) INIT = util . user ( VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) )  METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( repo . METHOD_3 ( ) . METHOD_4 ( ref ) ) != null ) COND ( repo . METHOD_3 ( ) . METHOD_4 ( ref ) ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = repo . METHOD_5 ( ref ) ) INIT = repo . METHOD_5 ( ref ) ) VAR VAR (  VAR_4 . METHOD_6 ( true ) )  VAR_4 . METHOD_6 ( true ) (  com.google.common.truth.Truth . METHOD_7 ( ) . METHOD_8 ( ( STRING_1 + ref ) ) . METHOD_9 ( VAR_4 . delete ( ) ) . isEqualTo ( VAR_5 ) )  com.google.common.truth.Truth . METHOD_7 ( ) . METHOD_8 ( ( STRING_1 + ref ) ) . METHOD_9 ( VAR_4 . delete ( ) ) . isEqualTo ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == 0 ) && ( ( VAR_2 ) != null ) ) COND ( VAR_1 == 0 ) && ( ( VAR_2 ) != null ) ( THEN THEN (  return METHOD_2 ( key ) ; )  return METHOD_2 ( key ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( key ) ; )  return METHOD_3 ( key ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3|com.google.gwtorm.server.OrmException ) TYPE TYPE_3|com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_3 . METHOD_4 ( ( ( msg + STRING_2 ) + ( TYPE_4 . METHOD_5 ( key . METHOD_6 ( ) ) ) ) , e ) )  VAR_3 . METHOD_4 ( ( ( msg + STRING_2 ) + ( TYPE_4 . METHOD_5 ( key . METHOD_6 ( ) ) ) ) , e ) (  return TYPE_1 . METHOD_7 ( msg ) ; )  return TYPE_1 . METHOD_7 ( msg ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  org.junit.Assert . METHOD_3 ( VAR_3 ) )  org.junit.Assert . METHOD_3 ( VAR_3 ) (  org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) )  org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) (  org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) , VAR_5 ) )  org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = e . getValue ( ) ) INIT = e . getValue ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) )  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ( IF IF ( COND ( view ) != null ) COND ( view ) != null ( THEN THEN (  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) )  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( VAR_3 ) )  TYPE_3 . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( STRING_1 , e ) ; )  throw METHOD_5 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) INIT = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME err ) NAME err ( BLOCK BLOCK (  throw new TYPE_5 ( STRING_1 , err ) ; )  throw new TYPE_5 ( STRING_1 , err ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( repo ) == null ) COND ( repo ) == null ( THEN THEN (  this . repo = VAR_1 . METHOD_2 ( project ) )  this . repo = VAR_1 . METHOD_2 ( project ) (  VAR_2 = true )  VAR_2 = true (  VAR_3 = repo . METHOD_3 ( ) )  VAR_3 = repo . METHOD_3 ( ) (  VAR_4 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_4 ( ) ) )  VAR_4 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_4 ( ) ) (  commands = new TYPE_1 ( repo ) )  commands = new TYPE_1 ( repo ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) INIT = java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( STRING_2 ) ) INIT = VAR_3 . METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_1 . METHOD_3 ( VAR_4 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_4 ) ) VAR VAR (  return VAR_6 . METHOD_4 ( VAR_5 ) ; )  return VAR_6 . METHOD_4 ( VAR_5 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = c . getName ( ) ) INIT = c . getName ( ) ) VAR VAR (  n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) )  n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ( WHILE WHILE ( COND n . METHOD_4 ( STRING_1 ) ) COND n . METHOD_4 ( STRING_1 ) ( BLOCK BLOCK (  n = n . METHOD_2 ( 1 ) )  n = n . METHOD_2 ( 1 ) ) BLOCK BLOCK ) WHILE WHILE (  return TYPE_2 . METHOD_5 ( n ) ; )  return TYPE_2 . METHOD_5 ( n ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Project ) TYPE TYPE_1.Project ( NAME p ) NAME p ) VAR VAR (  p = new TYPE_1 . Project ( VAR_1 , VAR_2 ) )  p = new TYPE_1 . Project ( VAR_1 , VAR_2 ) (  p . METHOD_2 ( STRING_1 ) )  p . METHOD_2 ( STRING_1 ) (  p . METHOD_3 ( false ) )  p . METHOD_3 ( false ) (  c . projects ( ) . insert ( java.util.Collections.singleton ( p ) ) )  c . projects ( ) . insert ( java.util.Collections.singleton ( p ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  super . METHOD_2 ( ) )  super . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  super . METHOD_3 ( ) )  super . METHOD_3 ( ) (  display ( ) )  display ( ) ) BLOCK BLOCK ) METHOD METHOD (  table = new TYPE_1 ( VAR_1 ) { protected void METHOD_2 ( ) { super . METHOD_2 ( ) ; } public void METHOD_3 ( ) { super . METHOD_3 ( ) ; display ( ) ; } } )  table = new TYPE_1 ( VAR_1 ) { protected void METHOD_2 ( ) { super . METHOD_2 ( ) ; } public void METHOD_3 ( ) { super . METHOD_3 ( ) ; display ( ) ; } } (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = table . METHOD_4 ( ) ) INIT = table . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) THEN THEN ) IF IF (  add ( table ) )  add ( table ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.HttpServletResponse ) TYPE TYPE_1.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR (  res . METHOD_3 ( VAR_3 ) )  res . METHOD_3 ( VAR_3 ) (  res . METHOD_4 ( STRING_1 ) )  res . METHOD_4 ( STRING_1 ) (  res . METHOD_5 ( STRING_2 ) )  res . METHOD_5 ( STRING_2 ) (  res . METHOD_6 ( VAR_2 . length ) )  res . METHOD_6 ( VAR_2 . length ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME out ) NAME out ( INIT = res . METHOD_7 ( ) ) INIT = res . METHOD_7 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  out . METHOD_8 ( VAR_2 ) )  out . METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  out . close ( ) )  out . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . revision = patchSet . getRevision ( ) . get ( ) )  p . revision = patchSet . getRevision ( ) . get ( ) (  VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) )  VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME schema ) NAME schema ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( schema . METHOD_4 ( ) ) )  METHOD_3 ( schema . METHOD_4 ( ) ) (  assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) )  assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) (  assertEquals ( 2 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) )  assertEquals ( 2 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctx ) NAME ctx ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) . add ( VAR_1 ) ) INIT = new TYPE_4 ( ) . add ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  ctx . METHOD_3 ( VAR_3 ) )  ctx . METHOD_3 ( VAR_3 ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK (  ctx . close ( ) )  ctx . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( STRING_1 , e ) )  VAR_4 . METHOD_4 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME base ) NAME base ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; )  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( SWITCH SWITCH ( NAME p ) NAME p ( CASE VAR_1 ( BLOCK BLOCK (  url = VAR_2 )  url = VAR_2 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  url = admin . METHOD_2 ( server ) )  url = admin . METHOD_2 ( server ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_2 ( ( STRING_1 + p ) ) ; )  throw new TYPE_2 ( ( STRING_1 + p ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  METHOD_3 ( TYPE_3 . METHOD_4 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) )  METHOD_3 ( TYPE_3 . METHOD_4 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME close ) NAME close ( BLOCK BLOCK (  VAR_1 = null )  VAR_1 = null ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . isEqualTo ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . isEqualTo ( VAR_2 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) )  TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) (  TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_6 ( ) )  TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_6 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . METHOD_7 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.ProjectConfig ) TYPE TYPE_2.ProjectConfig ( NAME cfg ) NAME cfg ( INIT = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ) VAR VAR (  TYPE_3 . METHOD_1 ( cfg , VAR_1 , id , ref ) )  TYPE_3 . METHOD_1 ( cfg , VAR_1 , id , ref ) (  METHOD_4 ( project , cfg ) )  METHOD_4 ( project , cfg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( c . METHOD_2 ( db ) ) ) COND ! ( c . METHOD_2 ( db ) ) ( THEN THEN (  throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; )  throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; ) THEN THEN ) IF IF (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_3 ( query ( r . getChangeId ( ) ) ) ) INIT = TYPE_3 . METHOD_3 ( query ( r . getChangeId ( ) ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_4 < ? > ) ( VAR_2 ) ) ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_4 < ? > ) ( VAR_2 ) ) ) . METHOD_4 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) VAR VAR (  METHOD_6 ( db , VAR_2 , VAR_4 , VAR_5 ) )  METHOD_6 ( db , VAR_2 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  r . METHOD_3 ( ) )  r . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( db , admin . METHOD_4 ( ) , VAR_3 , STRING_2 , STRING_3 , r . getChangeId ( ) ) ) INIT = VAR_2 . create ( db , admin . METHOD_4 ( ) , VAR_3 , STRING_2 , STRING_3 , r . getChangeId ( ) ) ) VAR VAR (  r = VAR_1 . to ( git , ( STRING_4 + ( r . getChange ( ) . change ( ) . getId ( ) . get ( ) ) ) ) )  r = VAR_1 . to ( git , ( STRING_4 + ( r . getChange ( ) . change ( ) . getId ( ) . get ( ) ) ) ) (  r . METHOD_3 ( ) )  r . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_5 ) . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_2 ( VAR_5 ) . METHOD_3 ( ) ) VAR VAR (  VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_2 . METHOD_5 ( ) ; )  return VAR_2 . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( result . change ) ) INIT = VAR_1 . create ( result . change ) ) VAR VAR (  cm . METHOD_1 ( VAR_2 . getAccountId ( ) ) )  cm . METHOD_1 ( VAR_2 . getAccountId ( ) ) (  cm . METHOD_2 ( result . patchSet , result . info ) )  cm . METHOD_2 ( result . patchSet , result . info ) (  cm . METHOD_3 ( ) )  cm . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . getId ( ) ) INIT = VAR_4 . getId ( ) ) VAR VAR (  VAR_5 . error ( ( STRING_1 + VAR_3 ) , e ) )  VAR_5 . error ( ( STRING_1 + VAR_3 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_2 = METHOD_2 ( VAR_2 ) )  VAR_2 = METHOD_2 ( VAR_2 ) ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = cfg . METHOD_2 ( VAR_3 , null , VAR_4 ) ) INIT = cfg . METHOD_2 ( VAR_3 , null , VAR_4 ) ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_3 ( VAR_2 ) ) COND TYPE_2 . METHOD_3 ( VAR_2 ) ( THEN THEN (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 ) THEN THEN ) IF IF (  VAR_2 = VAR_2 . METHOD_4 ( STRING_1 , VAR_1 ) )  VAR_2 = VAR_2 . METHOD_4 ( STRING_1 , VAR_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ) INIT = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . get ( ) ) INIT = VAR_6 . get ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) (  VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) )  VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_4 ( account . getId ( ) ) ) INIT = new TYPE_4 ( account . getId ( ) ) ) VAR VAR (  VAR_7 . METHOD_5 ( VAR_1 ) )  VAR_7 . METHOD_5 ( VAR_1 ) (  VAR_7 . METHOD_6 ( account ) )  VAR_7 . METHOD_6 ( account ) (  VAR_7 . commit ( VAR_2 ) )  VAR_7 . commit ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) INIT = repo ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_4 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) (  METHOD_6 ( VAR_3 , project , STRING_6 ) )  METHOD_6 ( VAR_3 , project , STRING_6 ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_4 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ) INIT = METHOD_4 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ) VAR VAR (  r . METHOD_7 ( ) )  r . METHOD_7 ( ) (  r . METHOD_8 ( VAR_4 , null , admin ) )  r . METHOD_8 ( VAR_4 , null , admin ) (  r . METHOD_9 ( TYPE_2 . getMessage ( ) ) )  r . METHOD_9 ( TYPE_2 . getMessage ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND url != null ) COND url != null ( THEN THEN (  return TYPE_1 . of ( STRING_1 , VAR_1 , STRING_2 , url ) ; )  return TYPE_1 . of ( STRING_1 , VAR_1 , STRING_2 , url ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . of ( STRING_1 , VAR_1 ) ; )  return TYPE_1 . of ( STRING_1 , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ( INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ) INIT = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ) VAR VAR (  VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) )  VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . get ( STRING_1 ) ) INIT = VAR_1 . get ( STRING_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME result ) NAME result ( INIT = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_2 > > ( ) { } . METHOD_6 ( ) ) ) INIT = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_2 > > ( ) { } . METHOD_6 ( ) ) ) VAR VAR (  org.junit.Assert . METHOD_7 ( result . isEmpty ( ) ) )  org.junit.Assert . METHOD_7 ( result . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<org.eclipse.jgit.lib.ObjectId,TYPE_1> ) RETURN java.util.Map<org.eclipse.jgit.lib.ObjectId,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_2 < org.eclipse.jgit.lib.ObjectId , TYPE_1 > ( ) )  VAR_1 = new TYPE_2 < org.eclipse.jgit.lib.ObjectId , TYPE_1 > ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( IN repo . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . values ( ) ) IN repo . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . values ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_4 ( r . getName ( ) ) ) COND TYPE_3 . METHOD_4 ( r . getName ( ) ) ( THEN THEN (  VAR_1 . put ( r . METHOD_5 ( ) , r ) )  VAR_1 . put ( r . METHOD_5 ( ) , r ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , TYPE_2 . METHOD_2 ( STRING_3 ) ) ) INIT = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , TYPE_2 . METHOD_2 ( STRING_3 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cm ) NAME cm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( ) ) ) COND ! ( TYPE_3 . METHOD_2 ( ) ) ( THEN THEN (  return METHOD_3 ( cm ) ; )  return METHOD_3 ( cm ) ; ) THEN THEN ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND cm . METHOD_4 ( ) . METHOD_5 ( ) ) COND cm . METHOD_4 ( ) . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( cm ) )  METHOD_6 ( cm ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_6 ( cm ) ; } } } ; )  return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_6 ( cm ) ; } } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ctl ) NAME ctl ( INIT = rsrc . METHOD_1 ( ) ) INIT = rsrc . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = VAR_1 . METHOD_2 ( db . get ( ) , rsrc . METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( db . get ( ) , rsrc . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = ctl . getProject ( ) . METHOD_4 ( ) ) INIT = ctl . getProject ( ) . METHOD_4 ( ) ) VAR VAR (  return VAR_2 . apply ( project , ps . getRevision ( ) . get ( ) ) ; )  return VAR_2 . apply ( project , ps . getRevision ( ) . get ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) , STRING_1 , c ) )  TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) , STRING_1 , c ) (  TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_2 + STRING_3 ) , METHOD_5 ( ) . getAccountId ( ) , c ) )  TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_2 + STRING_3 ) , METHOD_5 ( ) . getAccountId ( ) , c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND VAR_3 != VAR_1 ) COND VAR_3 != VAR_1 ( THEN THEN (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return new TYPE_2 ( ) ; )  return new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_3 ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; )  return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_6 ( ( STRING_1 + VAR_2 ) ) ; )  throw new TYPE_6 ( ( STRING_1 + VAR_2 ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.PatchSetApproval ) RETURN com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctl ) NAME ctl ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ( INIT = TYPE_3 . METHOD_2 ( ctl . METHOD_3 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) ) INIT = TYPE_3 . METHOD_2 ( ctl . METHOD_3 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_3 ) NAME VAR_3 ( INIT = new com.google.gerrit.reviewdb.client . PatchSetApproval ( new TYPE_4 . Key ( VAR_1 , VAR_2 , id ) , ( ( short ) ( 0 ) ) , TYPE_5 . METHOD_5 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client . PatchSetApproval ( new TYPE_4 . Key ( VAR_1 , VAR_2 , id ) , ( ( short ) ( 0 ) ) , TYPE_5 . METHOD_5 ( ) ) ) VAR VAR (  VAR_3 . METHOD_6 ( ctl . getChange ( ) ) )  VAR_3 . METHOD_6 ( ctl . getChange ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME branch ) NAME branch ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME u ) NAME u ( INIT = VAR_1 . METHOD_1 ( ( ( VAR_2 ) + branch ) ) ) INIT = VAR_1 . METHOD_1 ( ( ( VAR_2 ) + branch ) ) ) VAR VAR (  u . METHOD_2 ( true ) )  u . METHOD_2 ( true ) (  u . METHOD_3 ( id ) )  u . METHOD_3 ( id ) ( SWITCH SWITCH ( NAME u . update ( ) ) NAME u . update ( ) ( CASE VAR_3 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  METHOD_4 ( ( ( ( STRING_1 + branch ) + STRING_2 ) + ( u . METHOD_5 ( ) ) ) ) )  METHOD_4 ( ( ( ( STRING_1 + branch ) + STRING_2 ) + ( u . METHOD_5 ( ) ) ) ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  req . METHOD_3 ( path ) )  req . METHOD_3 ( path ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  req . METHOD_4 ( VAR_1 ) )  req . METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  servlet . METHOD_5 ( req , res ) )  servlet . METHOD_5 ( req , res ) (  org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) (  return res ; )  return res ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = VAR_2 . get ( VAR_1 ) . path ( ) ) INIT = VAR_2 . get ( VAR_1 ) . path ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_3 ( VAR_3 . getParentKey ( ) ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_3 ( VAR_3 . getParentKey ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_4 ( TYPE_6 VAR_4 ) { } } ) )  TYPE_1 . METHOD_2 ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_4 ( TYPE_6 VAR_4 ) { } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  VAR_1 . append ( STRING_1 ) )  VAR_1 . append ( STRING_1 ) (  VAR_1 . append ( STRING_2 ) )  VAR_1 . append ( STRING_2 ) (  VAR_1 . append ( id ) )  VAR_1 . append ( id ) (  VAR_1 . append ( STRING_3 ) )  VAR_1 . append ( STRING_3 ) (  VAR_1 . append ( STRING_4 ) )  VAR_1 . append ( STRING_4 ) (  VAR_1 . append ( STRING_5 ) )  VAR_1 . append ( STRING_5 ) (  VAR_1 . append ( STRING_6 ) )  VAR_1 . append ( STRING_6 ) (  w . METHOD_2 ( ) . METHOD_3 ( STRING_7 , VAR_1 . toString ( ) ) )  w . METHOD_2 ( ) . METHOD_3 ( STRING_7 , VAR_1 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) IN TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND r . METHOD_4 ( VAR_2 . METHOD_5 ( ) . getId ( ) ) ) COND r . METHOD_4 ( VAR_2 . METHOD_5 ( ) . getId ( ) ) ( THEN THEN (  METHOD_6 ( r , VAR_1 , VAR_2 ) )  METHOD_6 ( r , VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = rsrc . getChange ( ) ) INIT = rsrc . getChange ( ) ) VAR VAR (  return new TYPE_3 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ( ( ( ! ( change . METHOD_5 ( ) ) ) && ( ( change . getStatus ( ) ) != ( VAR_1 ) ) ) && ( METHOD_6 ( rsrc ) ) ) ) ; )  return new TYPE_3 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ( ( ( ! ( change . METHOD_5 ( ) ) ) && ( ( change . getStatus ( ) ) != ( VAR_1 ) ) ) && ( METHOD_6 ( rsrc ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME update ) NAME update ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = message . getMessage ( ) ) INIT = message . getMessage ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_2 ( msg ) . METHOD_3 ( ) ) COND TYPE_2 . METHOD_2 ( msg ) . METHOD_3 ( ) ( THEN THEN (  update . METHOD_1 ( VAR_1 ) )  update . METHOD_1 ( VAR_1 ) (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . METHOD_2 ( msg ) . METHOD_3 ( ) ) COND TYPE_3 . METHOD_2 ( msg ) . METHOD_3 ( ) ( THEN THEN (  update . METHOD_1 ( VAR_3 ) )  update . METHOD_1 ( VAR_3 ) (  VAR_2 . METHOD_1 ( VAR_3 ) )  VAR_2 . METHOD_1 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME query ) NAME query ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( query ) ) INIT = TYPE_2 . METHOD_2 ( query ) ) VAR VAR ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN (  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) )  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ) THEN THEN ) IF IF (  TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) )  TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ( IF IF ( COND ! ( TYPE_4 . equals ( VAR_2 ) ) ) COND ! ( TYPE_4 . equals ( VAR_2 ) ) ( THEN THEN (  VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) )  VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_5 ( VAR_3 ) )  VAR_4 . METHOD_5 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( db . get ( ) , VAR_2 ) ; )  return VAR_1 . METHOD_2 ( db . get ( ) , VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) )  VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) (  return java.util.Collections . METHOD_3 ( ) ; )  return java.util.Collections . METHOD_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( url == null ) || ( ! ( url . contains ( VAR_1 ) ) ) ) COND ( url == null ) || ( ! ( url . contains ( VAR_1 ) ) ) ( THEN THEN (  return url ; )  return url ; ) THEN THEN ) IF IF (  return url . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; )  return url . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = rsrc . METHOD_1 ( ) ) INIT = rsrc . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = rsrc . METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) ) INIT = rsrc . METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) ) VAR VAR (  return VAR_1 . apply ( project , commit . getId ( ) . getName ( ) ) ; )  return VAR_1 . apply ( project , commit . getId ( ) . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND u instanceof TYPE_3 ) COND u instanceof TYPE_3 ( THEN THEN (  return TYPE_4 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; )  return TYPE_4 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND u instanceof TYPE_5 ) COND u instanceof TYPE_5 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  throw new TYPE_6 ( ) ; )  throw new TYPE_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( e . getValue ( ) ) )  VAR_1 . METHOD_2 ( e . getValue ( ) ) (  view . METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) )  view . METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) (  view . METHOD_3 ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) )  view . METHOD_3 ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME to ) NAME to ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = repo . commit ( ) . create ( ) ) INIT = repo . commit ( ) . create ( ) ) VAR VAR (  repo . METHOD_2 ( 1 ) )  repo . METHOD_2 ( 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_3 ( STRING_1 , commit ) ) INIT = repo . METHOD_3 ( STRING_1 , commit ) ) VAR VAR (  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_4 ( commit ) ) )  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_4 ( commit ) ) (  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_4 ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_4 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  VAR_2 . info ( STRING_1 , VAR_1 ) )  VAR_2 . info ( STRING_1 , VAR_1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_4 ( VAR_1 ) ) COND TYPE_2 . METHOD_4 ( VAR_1 ) ( THEN THEN (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  VAR_2 . info ( STRING_2 , VAR_1 ) )  VAR_2 . info ( STRING_2 , VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_6 ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) )  VAR_2 . METHOD_6 ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  index = new TYPE_1 ( VAR_1 ) )  index = new TYPE_1 ( VAR_1 ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . METHOD_2 ( index ) )  VAR_2 . METHOD_2 ( index ) (  VAR_3 = new TYPE_3 ( VAR_2 ) )  VAR_3 = new TYPE_3 ( VAR_2 ) (  VAR_4 = new TYPE_4 ( VAR_2 , TYPE_5 . create ( 0 , 0 , INT_1 , INT_2 ) ) )  VAR_4 = new TYPE_4 ( VAR_2 , TYPE_5 . create ( 0 , 0 , INT_1 , INT_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME label ) NAME label ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  return new TYPE_3 ( args , label , VAR_1 , null ) ; )  return new TYPE_3 ( args , label , VAR_1 , null ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME a ) NAME a ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  r . add ( new TYPE_3 ( args , label , VAR_1 , a ) ) )  r . add ( new TYPE_3 ( args , label , VAR_1 , a ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return METHOD_2 ( r ) ; )  return METHOD_2 ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) )  TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME e ) NAME e ( INIT = VAR_1 . METHOD_4 ( CHAR_1 ) ) INIT = VAR_1 . METHOD_4 ( CHAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) )  TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) (  return TYPE_1 . create ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; )  return TYPE_1 . create ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_2 . get ( ( VAR_1 ? METHOD_2 ( ) : METHOD_3 ( ) ) ) ) INIT = VAR_2 . get ( ( VAR_1 ? METHOD_2 ( ) : METHOD_3 ( ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) (  return METHOD_5 ( ) . METHOD_6 ( r . METHOD_7 ( ) , VAR_4 class ) ; )  return METHOD_5 ( ) . METHOD_6 ( r . METHOD_7 ( ) , VAR_4 class ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 ) ) INIT = new TYPE_1 ( 1 ) ) VAR VAR (  assertEquals ( STRING_1 , VAR_1 . toString ( ) ) )  assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) (  assertEquals ( VAR_1 , VAR_2 ) )  assertEquals ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( out ) ) INIT = new TYPE_2 ( out ) ) VAR VAR (  VAR_3 . METHOD_2 ( repo ) )  VAR_3 . METHOD_2 ( repo ) (  VAR_3 . format ( VAR_1 , VAR_2 ) )  VAR_3 . format ( VAR_1 , VAR_2 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  return out . toString ( ) ; )  return out . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = ( ( info . METHOD_2 ( ) . name ( ) ) != null ) ? info . METHOD_2 ( ) . name ( ) : TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = ( ( info . METHOD_2 ( ) . name ( ) ) != null ) ? info . METHOD_2 ( ) . name ( ) : TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  VAR_1 . METHOD_5 ( name ) )  VAR_1 . METHOD_5 ( name ) (  VAR_1 . METHOD_6 ( name ) )  VAR_1 . METHOD_6 ( name ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) <= 0 ) COND ( VAR_1 . size ( ) ) <= 0 ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME out ) NAME out ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( out . length ( ) ) > 0 ) COND ( out . length ( ) ) > 0 ( THEN THEN (  out . append ( STRING_2 ) )  out . append ( STRING_2 ) ) THEN THEN ) IF IF (  out . append ( VAR_2 . getValue ( ) ) )  out . append ( VAR_2 . getValue ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return ( STRING_3 + STRING_4 ) + ( out . toString ( ) ) ; )  return ( STRING_3 + STRING_4 ) + ( out . toString ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_5 ( VAR_3 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_5 ( VAR_3 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME change ) NAME change ( INIT = METHOD_2 ( git ) ) INIT = METHOD_2 ( git ) ) VAR VAR (  submit ( change . getChangeId ( ) ) )  submit ( change . getChangeId ( ) ) (  METHOD_3 ( git , false ) )  METHOD_3 ( git , false ) (  com.google.common.truth.Truth.assertThat ( METHOD_4 ( ) . METHOD_5 ( 0 ) ) . isEqualTo ( change . METHOD_6 ( ) . METHOD_5 ( 0 ) ) )  com.google.common.truth.Truth.assertThat ( METHOD_4 ( ) . METHOD_5 ( 0 ) ) . isEqualTo ( change . METHOD_6 ( ) . METHOD_5 ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5.NameKey ) TYPE TYPE_5.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; )  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( change.getId ( ) , e ) ; )  throw new TYPE_4 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) )  assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) (  assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) )  assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) (  assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) )  assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME submit ) NAME submit ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME commit ) NAME commit ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  in . METHOD_1 ( true ) )  in . METHOD_1 ( true ) (  TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . data ( in ) . METHOD_3 ( VAR_1 ) )  TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . data ( in ) . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . base = base )  this . base = base (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 (  this . VAR_3 = VAR_3 )  this . VAR_3 = VAR_3 (  this . VAR_4 = VAR_4 )  this . VAR_4 = VAR_4 (  this . VAR_5 = VAR_5 )  this . VAR_5 = VAR_5 (  this . VAR_6 = VAR_6 )  this . VAR_6 = VAR_6 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  in . METHOD_2 ( path ) )  in . METHOD_2 ( path ) (  in . METHOD_3 ( VAR_1 ) )  in . METHOD_3 ( VAR_1 ) (  TYPE_4 . edit ( id ) . METHOD_4 ( in , VAR_2 ) )  TYPE_4 . edit ( id ) . METHOD_4 ( in , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( ) ) INIT = METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) )  METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_8 ( STRING_1 , VAR_2 ) . METHOD_9 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) )  assertThat ( VAR_4 ) . METHOD_8 ( STRING_1 , VAR_2 ) . METHOD_9 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME user ) NAME user ( INIT = args . METHOD_2 ( ) ) INIT = args . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND user . METHOD_3 ( ) ) COND user . METHOD_3 ( ) ( THEN THEN (  return VAR_1 . get ( args . METHOD_2 ( ) . getAccountId ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) ; )  return VAR_1 . get ( args . METHOD_2 ( ) . getAccountId ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return VAR_2 . Collections < TYPE_2 > METHOD_6 ( ) ; )  return VAR_2 . Collections < TYPE_2 > METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN Account.Id ) RETURN Account.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Account ) TYPE TYPE_3.Account ( NAME a ) NAME a ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND a == null ) COND a == null ( THEN THEN (  throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  return a . getId ( ) ; )  return a . getId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 . ref , VAR_2 . ref ) )  org.junit.Assert.assertEquals ( VAR_1 . ref , VAR_2 . ref ) ( IF IF ( COND ( VAR_1 . revision ) != null ) COND ( VAR_1 . revision ) != null ( THEN THEN (  org.junit.Assert.assertEquals ( VAR_1 . revision , VAR_2 . revision ) )  org.junit.Assert.assertEquals ( VAR_1 . revision , VAR_2 . revision ) ) THEN THEN ) IF IF (  org.junit.Assert.assertEquals ( VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 ) ) )  org.junit.Assert.assertEquals ( VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_3 ( ) )  VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_3 ( ) (  VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_1 ( ) )  VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND isEmpty ( ) ) COND isEmpty ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_1 . METHOD_1 ( VAR_2 ) )  TYPE_1 . METHOD_1 ( VAR_2 ) (  TYPE_1 . METHOD_1 ( VAR_3 ) )  TYPE_1 . METHOD_1 ( VAR_3 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . close ( ) )  VAR_2 . close ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . close ( ) )  VAR_3 . close ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME git ) NAME git ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ) INIT = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ) VAR VAR (  return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; )  return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ) RETURN TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSet> ) TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSet> ( NAME patchSets ) NAME patchSets ( INIT = cd . patchSets ( ) ) INIT = cd . patchSets ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ) TYPE TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ( NAME result ) NAME result ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( IN patchSets ) IN patchSets ( BLOCK BLOCK (  result . put ( ps . getId ( ) . get ( ) , ps ) )  result . put ( ps . getId ( ) . get ( ) , ps ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) )  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) (  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) )  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) (  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) )  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_2 ( ) ) COND VAR_3 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_4 ) ) INIT = METHOD_3 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN ( IF IF ( COND VAR_4 . get ( ) ) COND VAR_4 . get ( ) ( THEN THEN (  VAR_1 . METHOD_4 ( getRefName ( ) ) )  VAR_1 . METHOD_4 ( getRefName ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( VAR_5 ) )  VAR_2 . METHOD_5 ( VAR_5 ) (  VAR_1 . METHOD_6 ( VAR_2 ) )  VAR_1 . METHOD_6 ( VAR_2 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) )  r . append ( VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  r . append ( STRING_1 ) )  r . append ( STRING_1 ) (  r . append ( METHOD_5 ( ) ) )  r . append ( METHOD_5 ( ) ) (  r . append ( STRING_2 ) )  r . append ( STRING_2 ) ) THEN THEN ) IF IF (  return r . toString ( ) ; )  return r . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = TYPE_2 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ) INIT = TYPE_2 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ) VAR VAR (  TYPE_3 . METHOD_2 ( change , STRING_1 , changeId ) )  TYPE_3 . METHOD_2 ( change , STRING_1 , changeId ) (  TYPE_3 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) )  TYPE_3 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) (  return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; )  return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( ( ( java.lang.StringBuilder ) ( null ) ) ) ) )  METHOD_2 ( b , b . append ( ( ( java.lang.StringBuilder ) ( null ) ) ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) (  METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_2 ) ) ) )  METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_2 ) ) ) (  METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_3 ) ) ) )  METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_3 ) ) ) (  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  c = METHOD_2 ( ) )  c = METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  s . METHOD_4 ( STRING_1 ) )  s . METHOD_4 ( STRING_1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  s . close ( ) )  s . close ( ) ) FINALLY FINALLY ) TRY TRY (  VAR_2 = METHOD_5 ( ) )  VAR_2 = METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . METHOD_6 ( ( STRING_2 + ( url ) ) , e ) )  VAR_3 . METHOD_6 ( ( STRING_2 + ( url ) ) , e ) (  c = close ( c ) )  c = close ( c ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  METHOD_7 ( c ) )  METHOD_7 ( c ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 ) )  VAR_3 . METHOD_3 ( STRING_1 ) (  TYPE_2 . METHOD_4 ( 1 ) )  TYPE_2 . METHOD_4 ( 1 ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_3 ( ( STRING_2 + VAR_2 ) ) )  VAR_4 . METHOD_3 ( ( STRING_2 + VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME m ) NAME m ( INIT = TYPE_2 . METHOD_3 ( repo , c , TYPE_3 . METHOD_4 ( ) ) ) INIT = TYPE_2 . METHOD_3 ( repo , c , TYPE_3 . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . of ( ( STRING_1 + ( VAR_2 ) ) ) ) INIT = TYPE_4 . of ( ( STRING_1 + ( VAR_2 ) ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( TYPE_5 . METHOD_5 ( m ) ) . METHOD_6 ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( TYPE_5 . METHOD_5 ( m ) ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) COND ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ( THEN THEN ( IF IF ( COND VAR_4 . isEmpty ( ) ) COND VAR_4 . isEmpty ( ) ( THEN THEN (  TYPE_2 . METHOD_1 ( ) . METHOD_2 ( this ) )  TYPE_2 . METHOD_1 ( ) . METHOD_2 ( this ) ) THEN THEN ) IF IF (  VAR_4 . add ( VAR_1 ) )  VAR_4 . add ( VAR_1 ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME on ) NAME on ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = on )  VAR_1 = on ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = getValue ( ) . METHOD_2 ( ) ) INIT = getValue ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( p . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( p . METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) ) ELSE ELSE ) IF IF (  METHOD_5 ( update . METHOD_6 ( ) ) )  METHOD_5 ( update . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ) INIT = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( STRING_4 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( STRING_4 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) (  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 , VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_6 ( VAR_12 ) . METHOD_6 ( VAR_2 , VAR_3 ) )  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 , VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_6 ( VAR_12 ) . METHOD_6 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  servlet . METHOD_2 ( req , res ) )  servlet . METHOD_2 ( req , res ) (  org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) (  org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) )  org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_1 ) (  VAR_2 . METHOD_3 ( VAR_3 , null , VAR_4 , VAR_5 ) )  VAR_2 . METHOD_3 ( VAR_3 , null , VAR_4 , VAR_5 ) (  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_5 ) )  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 [ ( ++ ( VAR_2 ) ) ] = t )  VAR_1 [ ( ++ ( VAR_2 ) ) ] = t ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . length ) INIT = VAR_1 . length ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 [ VAR_3 + INT_1 ] ) INIT = new TYPE_1 [ VAR_3 + INT_1 ] ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_1 , 0 , VAR_4 , 0 , VAR_3 ) )  TYPE_3 . METHOD_2 ( VAR_1 , 0 , VAR_4 , 0 , VAR_3 ) (  VAR_1 = VAR_4 )  VAR_1 = VAR_4 (  VAR_1 [ VAR_2 ] = t )  VAR_1 [ VAR_2 ] = t ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = VAR_1 . get ( ) . changes ( ) . get ( id ) ) INIT = VAR_1 . get ( ) . changes ( ) . get ( id ) ) VAR VAR ( IF IF ( COND c != null ) COND c != null ( THEN THEN (  return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( java.util.Collections . METHOD_2 ( VAR_2 . create ( VAR_1 . get ( ) , c ) ) ) ; )  return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( java.util.Collections . METHOD_2 ( VAR_2 . create ( VAR_1 . get ( ) , c ) ) ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( VAR_3 . Collections < com.google.gerrit.server.query.change.ChangeData > METHOD_3 ( ) ) ; )  return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( VAR_3 . Collections < com.google.gerrit.server.query.change.ChangeData > METHOD_3 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) )  VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_5 . getName ( ) ) . METHOD_3 ( ) ) ) INIT = new TYPE_4 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_5 . getName ( ) ) . METHOD_3 ( ) ) ) VAR VAR (  return VAR_4 . get ( ) . METHOD_4 ( VAR_3 ) ; )  return VAR_4 . get ( ) . METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = VAR_1 . change ( VAR_2 ) ) INIT = VAR_1 . change ( VAR_2 ) ) VAR VAR ( IF IF ( COND change == null ) COND change == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . create ( VAR_2 , change . METHOD_2 ( ) ) ) INIT = VAR_4 . create ( VAR_2 , change . METHOD_2 ( ) ) ) VAR VAR (  return VAR_3 . METHOD_3 ( ) . contains ( VAR_5 ) ; )  return VAR_3 . METHOD_3 ( ) . contains ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( topic ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( topic ) . METHOD_3 ( ) (  return VAR_1 . to ( git , ( STRING_1 + topic ) ) ; )  return VAR_1 . to ( git , ( STRING_1 + topic ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( project ) ) INIT = VAR_3 . create ( project ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  r . METHOD_2 ( VAR_2 ) )  r . METHOD_2 ( VAR_2 ) (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  r . commit ( VAR_2 ) )  r . commit ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . close ( ) )  VAR_2 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . rw = walk )  this . rw = walk (  this . VAR_1 = walk . METHOD_2 ( ) )  this . VAR_1 = walk . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  revision = ( id != null ) ? walk . parseCommit ( id ) : null )  revision = ( id != null ) ? walk . parseCommit ( id ) : null (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  walk = null )  walk = null (  VAR_1 = null )  VAR_1 = null ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  db = VAR_1 . METHOD_1 ( ) )  db = VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_2 ( ) )  e . METHOD_2 ( ) (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK ( FOR FOR ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF (  METHOD_4 ( db , VAR_2 ) )  METHOD_4 ( db , VAR_2 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_3 . update ( 1 ) )  VAR_3 . update ( 1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ProjectConfig ) TYPE TYPE_1.ProjectConfig ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN config . METHOD_2 ( ) ) IN config . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ) INIT = new TYPE_4 ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME in ) NAME in ( INIT = new TYPE_6 ( VAR_2 ) ) INIT = new TYPE_6 ( VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  in = TYPE_7 . METHOD_3 ( in ) )  in = TYPE_7 . METHOD_3 ( in ) (  return new TYPE_1 ( in ) ; )  return new TYPE_1 ( in ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  in . close ( ) )  in . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME add ) NAME add ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  in . add = add )  in . add = add ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . apply ( account , in ) ; )  return VAR_1 . apply ( account , in ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE TYPE_4|com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 . isEmpty ( ) ) ) && ( ! ( METHOD_2 ( ) ) ) ) COND ( ! ( VAR_1 . isEmpty ( ) ) ) && ( ! ( METHOD_2 ( ) ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1<java.lang.String,TYPE_2> ) TYPE TYPE_1<java.lang.String,TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_2 . getValue ( ) . METHOD_4 ( projectName . get ( ) , VAR_2 . getKey ( ) , VAR_3 , VAR_4 ) )  VAR_2 . getValue ( ) . METHOD_4 ( projectName . get ( ) , VAR_2 . getKey ( ) , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( VAR_5 ) )  VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( VAR_5 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_1 , p ) )  TYPE_3 . METHOD_4 ( VAR_1 , p ) ( IF IF ( COND ( p . value ) >= ( VAR_1 . length ) ) COND ( p . value ) >= ( VAR_1 . length ) ( THEN THEN (  VAR_6 = null )  VAR_6 = null (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 = TYPE_4 . METHOD_5 ( METHOD_1 ( VAR_1 , p . value ) ) )  VAR_6 = TYPE_4 . METHOD_5 ( METHOD_1 ( VAR_1 , p . value ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Change ) RETURN TYPE_1.Change ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  c . METHOD_1 ( VAR_1 ) )  c . METHOD_1 ( VAR_1 ) (  c . METHOD_2 ( true ) )  c . METHOD_2 ( true ) ( IF IF ( COND ! ( VAR_2 . equals ( c . currentPatchSetId ( ) ) ) ) COND ! ( VAR_2 . equals ( c . currentPatchSetId ( ) ) ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  c . METHOD_3 ( VAR_3 . get ( VAR_2 ) ) )  c . METHOD_3 ( VAR_3 . get ( VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  VAR_5 . error ( ( STRING_1 + VAR_2 ) , VAR_4 ) )  VAR_5 . error ( ( STRING_1 + VAR_2 ) , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  TYPE_3 . METHOD_4 ( c ) )  TYPE_3 . METHOD_4 ( c ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return METHOD_2 ( VAR_1 ) ; )  return METHOD_2 ( VAR_1 ) ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME status . getStatus ( ) ) NAME status . getStatus ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; )  return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME u ) NAME u ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) != VAR_2 ) COND ( VAR_3 ) != VAR_2 ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) || ( METHOD_4 ( db ) ) ) COND ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) || ( METHOD_4 ( db ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_5 ( ) ) COND METHOD_5 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return METHOD_6 ( ) . METHOD_1 ( ) ; )  return METHOD_6 ( ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) COND VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.NameKey ) TYPE TYPE_4.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = change . METHOD_2 ( ) . getParentKey ( ) ) INIT = change . METHOD_2 ( ) . getParentKey ( ) ) VAR VAR (  return VAR_2 . METHOD_3 ( VAR_1 ) . METHOD_1 ( change ) ; )  return VAR_2 . METHOD_3 ( VAR_1 ) . METHOD_1 ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( change.getId ( ) , e ) ; )  throw new TYPE_3 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  out . METHOD_2 ( TYPE_2 . METHOD_3 ( commit ) . METHOD_4 ( VAR_1 ) ) )  out . METHOD_2 ( TYPE_2 . METHOD_3 ( commit ) . METHOD_4 ( VAR_1 ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( out ) ) INIT = new TYPE_3 ( out ) ) VAR VAR (  VAR_2 . METHOD_5 ( repo ) )  VAR_2 . METHOD_5 ( repo ) (  VAR_2 . format ( base . METHOD_6 ( ) , commit . METHOD_6 ( ) ) )  VAR_2 . format ( base . METHOD_6 ( ) , commit . METHOD_6 ( ) ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ) COND ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 . get ( ) ) COND VAR_3 . get ( ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_6 ) ) INIT = METHOD_5 ( VAR_6 ) ) VAR VAR ( IF IF ( COND VAR_5 <= 0 ) COND VAR_5 <= 0 ( THEN THEN (  return VAR_7 ; )  return VAR_7 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND 0 < VAR_5 ) COND 0 < VAR_5 ( THEN THEN (  return VAR_8 ; )  return VAR_8 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) )  VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) (  VAR_2 = TYPE_3 . METHOD_4 ( ) )  VAR_2 = TYPE_3 . METHOD_4 ( ) ( IF IF ( COND TYPE_4 . info ( ) . auth ( ) . METHOD_5 ( ) ) COND TYPE_4 . info ( ) . auth ( ) . METHOD_5 ( ) ( THEN THEN (  VAR_3 . METHOD_6 ( VAR_2 ) )  VAR_3 . METHOD_6 ( VAR_2 ) (  VAR_1 . add ( TYPE_2 . METHOD_7 ( ) , VAR_2 ) )  VAR_1 . add ( TYPE_2 . METHOD_7 ( ) , VAR_2 ) ) THEN THEN ) IF IF (  VAR_4 = TYPE_3 . METHOD_4 ( ) )  VAR_4 = TYPE_3 . METHOD_4 ( ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) (  VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) , VAR_4 ) )  VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = VAR_1 . get ( ) . patchSets ( ) . get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getChange ( ) . getId ( ) , TYPE_3 . METHOD_2 ( id ) ) ) ) INIT = VAR_1 . get ( ) . patchSets ( ) . get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getChange ( ) . getId ( ) , TYPE_3 . METHOD_2 ( id ) ) ) ) VAR VAR ( IF IF ( COND ps != null ) COND ps != null ( THEN THEN (  return java.util.Collections . METHOD_3 ( new TYPE_1 ( change , ps ) ) ; )  return java.util.Collections . METHOD_3 ( new TYPE_1 ( change , ps ) ) ; ) THEN THEN ) IF IF (  return java.util.Collections . METHOD_4 ( ) ; )  return java.util.Collections . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account> ) RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_4 . equals ( VAR_1 ) ) COND TYPE_4 . equals ( VAR_1 ) ( THEN THEN (  return METHOD_2 ( project , VAR_2 ) ; )  return METHOD_2 ( project , VAR_2 ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME group ) NAME group ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND group != null ) COND group != null ( THEN THEN (  return METHOD_3 ( group , project , VAR_2 ) ; )  return METHOD_3 ( group , project , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return java.util.Collections . METHOD_4 ( ) ; )  return java.util.Collections . METHOD_4 ( ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_5 class ) ) INIT = VAR_4 . METHOD_2 ( VAR_5 class ) ) VAR VAR (  return METHOD_1 ( VAR_1 , VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , VAR_7 , STRING_1 ) , VAR_2 ) ; )  return METHOD_1 ( VAR_1 , VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , VAR_7 , STRING_1 ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME revision ) NAME revision ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( new TYPE_3 ( projectName , revision , path ) ) )  VAR_1 . METHOD_4 ( new TYPE_3 ( projectName , revision , path ) ) (  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) )  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2>.TYPE_3 ) RETURN TYPE_1<TYPE_2>.TYPE_3 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4.Key<TYPE_2> ) TYPE TYPE_4.Key<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_2> ) TYPE TYPE_5<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6<TYPE_2> ) TYPE TYPE_6<TYPE_2> ( NAME n ) NAME n ( INIT = new TYPE_6 < TYPE_2 > ( VAR_2 , VAR_3 ) ) INIT = new TYPE_6 < TYPE_2 > ( VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND ref . METHOD_2 ( VAR_4 , n ) ) COND ref . METHOD_2 ( VAR_4 , n ) ( THEN THEN (  return new TYPE_3 ( VAR_1 , n , VAR_5 ) ; )  return new TYPE_3 ( VAR_1 , n , VAR_5 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( token , changes ) )  VAR_1 . METHOD_1 ( token , changes ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e . getMessage ( ) , e ) ; )  throw new TYPE_2 ( e . getMessage ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( IN db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . getAccountId ( ) ) ) IN db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . getAccountId ( ) ) ( BLOCK BLOCK (  VAR_1 . put ( c . getKey ( ) . get ( ) , c ) )  VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.AccountGroup ) RETURN com.google.gerrit.reviewdb.client.AccountGroup ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_2 ( name , VAR_2 ) )  VAR_1 = TYPE_2 . METHOD_2 ( name , VAR_2 ) ) THEN THEN ) IF IF (  return new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_3 . NameKey ( name ) , new TYPE_3 . Id ( c . METHOD_3 ( ) ) , VAR_1 , TYPE_4 . METHOD_4 ( ) ) ; )  return new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_3 . NameKey ( name ) , new TYPE_3 . Id ( c . METHOD_3 ( ) ) , VAR_1 , TYPE_4 . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( notes , VAR_1 , VAR_2 . getAccountId ( ) , VAR_2 . getValue ( ) ) ) COND METHOD_2 ( notes , VAR_1 , VAR_2 . getAccountId ( ) , VAR_2 . getValue ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) )  VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME display ) NAME display ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Account ) TYPE TYPE_1.Account ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  info . METHOD_1 ( 0 , VAR_1 , account . METHOD_2 ( ) ) )  info . METHOD_1 ( 0 , VAR_1 , account . METHOD_2 ( ) ) (  info . METHOD_1 ( 1 , VAR_1 , account . METHOD_3 ( ) ) )  info . METHOD_1 ( 1 , VAR_1 , account . METHOD_3 ( ) ) (  info . METHOD_1 ( 2 , VAR_1 , account . METHOD_4 ( ) ) )  info . METHOD_1 ( 2 , VAR_1 , account . METHOD_4 ( ) ) (  info . METHOD_1 ( INT_1 , VAR_1 , TYPE_2 . METHOD_5 ( account . METHOD_6 ( ) ) ) )  info . METHOD_1 ( INT_1 , VAR_1 , TYPE_2 . METHOD_5 ( account . METHOD_6 ( ) ) ) (  info . METHOD_1 ( INT_2 , VAR_1 , account . getId ( ) . toString ( ) ) )  info . METHOD_1 ( INT_2 , VAR_1 , account . getId ( ) . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( FOR FOR ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF (  METHOD_3 ( db , VAR_2 ) )  METHOD_3 ( db , VAR_2 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_3 . update ( 1 ) )  VAR_3 . update ( 1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_4 ( ) )  e . METHOD_4 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_1 ( notes . METHOD_2 ( ) ) ) INIT = VAR_1 . METHOD_1 ( notes . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return VAR_3 . METHOD_3 ( VAR_2 , notes , patchSet ) ; )  return VAR_3 . METHOD_3 ( VAR_2 , notes , patchSet ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_4 ( e ) ; )  throw TYPE_2 . METHOD_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; )  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ( ) ) == 0 ) COND ( VAR_1 . length ( ) ) == 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_3 . contains ( VAR_4 ) ) ) COND ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_3 . contains ( VAR_4 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = ctx . METHOD_2 ( ) . get ( ) ) INIT = ctx . METHOD_2 ( ) . get ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . changes ( ) . get ( id ) ) INIT = db . changes ( ) . get ( id ) ) VAR VAR (  VAR_1 . create ( VAR_2 , VAR_3 ) . index ( db , c ) )  VAR_1 . create ( VAR_2 , VAR_3 ) . index ( db , c ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME res ) NAME res ( INIT = METHOD_2 ( STRING_1 , VAR_1 ) ) INIT = METHOD_2 ( STRING_1 , VAR_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( res ) . METHOD_3 ( 1 ) )  com.google.common.truth.Truth.assertThat ( res ) . METHOD_3 ( 1 ) (  com.google.common.truth.Truth.assertThat ( res ) . METHOD_4 ( STRING_2 ) )  com.google.common.truth.Truth.assertThat ( res ) . METHOD_4 ( STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = res . get ( STRING_2 ) ) INIT = res . get ( STRING_2 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) )  com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( info . status ( ) ) == ( VAR_1 ) ) COND ( info . status ( ) ) == ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( info . METHOD_2 ( ) ) ? info . METHOD_3 ( ) : VAR_3 < TYPE_3 > create ( ) ) INIT = ( info . METHOD_2 ( ) ) ? info . METHOD_3 ( ) : VAR_3 < TYPE_3 > create ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( STRING_1 ) )  VAR_2 . METHOD_4 ( STRING_1 ) ( IF IF ( COND VAR_2 . METHOD_5 ( STRING_2 ) ) COND VAR_2 . METHOD_5 ( STRING_2 ) ( THEN THEN (  VAR_4 . METHOD_6 ( true ) )  VAR_4 . METHOD_6 ( true ) (  VAR_4 . METHOD_7 ( VAR_2 . get ( STRING_2 ) . METHOD_8 ( ) ) )  VAR_4 . METHOD_7 ( VAR_2 . get ( STRING_2 ) . METHOD_8 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME label ) NAME label ( IN METHOD_3 ( ) . METHOD_3 ( ) ) IN METHOD_3 ( ) . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . add ( label . getName ( ) ) )  VAR_1 . add ( label . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  assertEquals ( TYPE_3 . of ( STRING_1 , STRING_2 ) , VAR_1 ) )  assertEquals ( TYPE_3 . of ( STRING_1 , STRING_2 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_3 , ( INT_1 < < INT_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_3 , ( INT_1 < < INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_2 ) ) INIT = new TYPE_4 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) (  VAR_4 . close ( ) )  VAR_4 . close ( ) (  return TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; )  return TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_2.ChangeInfo> ) TYPE java.util.List<TYPE_2.ChangeInfo> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . changes ( ) . query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) . get ( ) ) INIT = VAR_3 . changes ( ) . query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) . get ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_3 ( changeId ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_3 ( changeId ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_1 ( changeId . get ( ) , path , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( changeId ) ) ; } public void METHOD_4 ( TYPE_6 VAR_2 ) { } } ) )  TYPE_1 . METHOD_1 ( changeId . get ( ) , path , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( changeId ) ) ; } public void METHOD_4 ( TYPE_6 VAR_2 ) { } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME branch ) NAME branch ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( INIT = VAR_1 . get ( branch ) ) INIT = VAR_1 . get ( branch ) ) VAR VAR ( IF IF ( COND e == null ) COND e == null ( THEN THEN (  e = new TYPE_2 ( branch ) )  e = new TYPE_2 ( branch ) (  VAR_1 . put ( branch , e ) )  VAR_1 . put ( branch , e ) ) THEN THEN ) IF IF (  VAR_2 = true )  VAR_2 = true (  METHOD_2 ( e ) )  METHOD_2 ( e ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = java.lang.String.format ( STRING_1 , ps . getParentKey ( ) . get ( ) , ps . get ( ) ) ) INIT = java.lang.String.format ( STRING_1 , ps . getParentKey ( ) . get ( ) , ps . get ( ) ) ) VAR VAR (  return METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( url ) . METHOD_4 ( ) , VAR_2 class ) . changes ; )  return METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( url ) . METHOD_4 ( ) , VAR_2 class ) . changes ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . in ( VAR_2 ) )  bind ( VAR_1 class ) . in ( VAR_2 ) (  bind ( VAR_3 class ) . in ( VAR_2 ) )  bind ( VAR_3 class ) . in ( VAR_2 ) (  bind ( VAR_4 class ) . to ( VAR_3 class ) )  bind ( VAR_4 class ) . to ( VAR_3 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_2 ( ) ) )  install ( new TYPE_2 ( ) ) (  bind ( VAR_5 class ) )  bind ( VAR_5 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_3<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_5 . METHOD_1 ( schema ) ) == ( VAR_2 ) ) COND ( TYPE_5 . METHOD_1 ( schema ) ) == ( VAR_2 ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . add ( new TYPE_5 ( id ) ) )  VAR_3 . add ( new TYPE_5 ( id ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_1 . METHOD_2 ( VAR_3 ) ; )  return TYPE_1 . METHOD_2 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME user ) NAME user ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.AccountGroup ) TYPE TYPE_2.AccountGroup ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Factory ) TYPE TYPE_3.Factory ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 . Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 , final java.lang.String ref ) { return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; } } ) INIT = new TYPE_3 . Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 , final java.lang.String ref ) { return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; )  return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_2 , new TYPE_5 ( VAR_1 ) , METHOD_2 ( ) ) ; )  return new TYPE_1 ( VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_2 , new TYPE_5 ( VAR_1 ) , METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_1 . append ( STRING_1 ) )  VAR_1 . append ( STRING_1 ) (  VAR_1 . append ( METHOD_5 ( ) ) )  VAR_1 . append ( METHOD_5 ( ) ) (  VAR_1 . append ( STRING_2 ) )  VAR_1 . append ( STRING_2 ) (  msg . METHOD_6 ( VAR_1 . toString ( ) , STRING_3 ) )  msg . METHOD_6 ( VAR_1 . toString ( ) , STRING_3 ) (  TYPE_2 . METHOD_1 ( msg ) )  TYPE_2 . METHOD_1 ( msg ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  VAR_4 . METHOD_3 ( false ) )  VAR_4 . METHOD_3 ( false ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  VAR_4 . METHOD_3 ( true ) )  VAR_4 . METHOD_3 ( true ) ) ELSE ELSE ) IF IF ( IF IF ( COND ( ( VAR_5 ) == null ) || ( ( VAR_5 ) == VAR_2 ) ) COND ( ( VAR_5 ) == null ) || ( ( VAR_5 ) == VAR_2 ) ( THEN THEN (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) )  TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) (  return new TYPE_1 ( args , project , change ) . METHOD_3 ( ) ; )  return new TYPE_1 ( args , project , change ) . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME refs ) NAME refs ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = refs . get ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) . getAccountId ( ) ) ) ) INIT = refs . get ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) . getAccountId ( ) ) ) ) VAR VAR ( IF IF ( COND r != null ) COND r != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME s ) NAME s ( INIT = new TYPE_3 ( VAR_2 , r ) ) INIT = new TYPE_3 ( VAR_2 , r ) ) VAR VAR (  refs = new TYPE_4 ( refs ) )  refs = new TYPE_4 ( refs ) (  refs . put ( s . getName ( ) , s ) )  refs . put ( s . getName ( ) , s ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return refs ; )  return refs ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_4 ( VAR_1 . changeId , VAR_4 ) )  METHOD_4 ( VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = METHOD_2 ( path ) ) INIT = METHOD_2 ( path ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_2 ) ) )  org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_2 ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = res . METHOD_4 ( ) ) INIT = res . METHOD_4 ( ) ) VAR VAR (  return new java.lang.String ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) , VAR_4 ) ; )  return new java.lang.String ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_7 ( ) ) INIT = METHOD_7 ( ) ) VAR VAR ( IF IF ( COND ! ( METHOD_8 ( ) . METHOD_9 ( ) ) ) COND ! ( METHOD_8 ( ) . METHOD_9 ( ) ) ( THEN THEN (  METHOD_4 ( ) . METHOD_10 ( VAR_2 ) )  METHOD_4 ( ) . METHOD_10 ( VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  METHOD_11 ( ) )  METHOD_11 ( ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( IF IF ( COND t != null ) COND t != null ( THEN THEN (  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) )  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ) THEN THEN ( ELSE ELSE (  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) )  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( project ) ) ) COND ! ( METHOD_2 ( project ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME projects ) NAME projects ( INIT = config . METHOD_3 ( ) ) INIT = config . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( projects . length ) < 1 ) COND ( projects . length ) < 1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return new TYPE_1 ( TYPE_2 . METHOD_4 ( projects ) ) . METHOD_5 ( project ) ; )  return new TYPE_1 ( TYPE_2 . METHOD_4 ( projects ) ) . METHOD_5 ( project ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_4 , project , STRING_1 ) )  METHOD_3 ( VAR_4 , project , STRING_1 ) (  METHOD_3 ( VAR_5 , project , STRING_2 ) )  METHOD_3 ( VAR_5 , project , STRING_2 ) (  return METHOD_4 ( project ) ; )  return METHOD_4 ( project ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND path . isEmpty ( ) ) COND path . isEmpty ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  path = TYPE_3 . METHOD_2 ( path ) )  path = TYPE_3 . METHOD_2 ( path ) ( VAR VAR ( TYPE TYPE_4.Result ) TYPE TYPE_4.Result ( NAME result ) NAME result ( INIT = METHOD_3 ( req , path ) ) INIT = METHOD_3 ( req , path ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( result . METHOD_4 ( ) ) != null ) COND ( result . METHOD_4 ( ) ) != null ( THEN THEN (  return METHOD_5 ( VAR_1 , result , path ) ; )  return METHOD_5 ( VAR_1 , result , path ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_6 ( VAR_1 , result , path ) ; )  return METHOD_6 ( VAR_1 , result , path ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME getChange ) NAME getChange ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_1 . length ) > 0 ) ? STRING_1 + ( TYPE_3 . on ( STRING_2 ) . METHOD_1 ( VAR_1 ) ) : STRING_3 ) INIT = ( ( VAR_1 . length ) > 0 ) ? STRING_1 + ( TYPE_3 . on ( STRING_2 ) . METHOD_1 ( VAR_1 ) ) : STRING_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME r ) NAME r ( INIT = VAR_3 . get ( ( ( STRING_4 + changeId ) + VAR_2 ) ) ) INIT = VAR_3 . get ( ( ( STRING_4 + changeId ) + VAR_2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) (  return TYPE_5 . METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 . ChangeInfo class ) ; )  return TYPE_5 . METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 . ChangeInfo class ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_2 , VAR_1 ) )  new TYPE_1 ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_2 , VAR_1 ) (  METHOD_4 ( STRING_3 ) )  METHOD_4 ( STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  assertEquals ( ( STRING_4 + VAR_1 ) , e . getMessage ( ) ) )  assertEquals ( ( STRING_4 + VAR_1 ) , e . getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME err ) NAME err ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND err != null ) COND err != null ( THEN THEN (  TYPE_5 . METHOD_2 ( req , err ) )  TYPE_5 . METHOD_2 ( req , err ) ) THEN THEN ) IF IF (  TYPE_6 . METHOD_3 ( req , res , null , null , c ) )  TYPE_6 . METHOD_3 ( req , res , null , null , c ) (  res . METHOD_4 ( VAR_1 ) )  res . METHOD_4 ( VAR_1 ) (  TYPE_6 . METHOD_5 ( req , res , msg ) )  TYPE_6 . METHOD_5 ( req , res , msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_2 . METHOD_3 ( ( message + STRING_1 ) ) )  VAR_2 . METHOD_3 ( ( message + STRING_1 ) ) (  VAR_2 . METHOD_3 ( TYPE_2 . on ( STRING_2 ) . METHOD_4 ( VAR_1 ) ) )  VAR_2 . METHOD_3 ( TYPE_2 . on ( STRING_2 ) . METHOD_4 ( VAR_1 ) ) (  VAR_2 . METHOD_3 ( STRING_3 ) )  VAR_2 . METHOD_3 ( STRING_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ( IN changes . values ( ) ) IN changes . values ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  index . apply ( rsrc , new TYPE_3 ( ) ) )  index . apply ( rsrc , new TYPE_3 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException|TYPE_4|com.google.gwtorm.server.OrmException|TYPE_5 ) TYPE java.io.IOException|TYPE_4|com.google.gwtorm.server.OrmException|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 = false )  VAR_1 = false (  METHOD_1 ( STRING_1 , java.lang.String.format ( STRING_2 , rsrc . getId ( ) , e . getMessage ( ) ) ) )  METHOD_1 ( STRING_1 , java.lang.String.format ( STRING_2 , rsrc . getId ( ) , e . getMessage ( ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  throw METHOD_2 ( STRING_3 ) ; )  throw METHOD_2 ( STRING_3 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( schema , id ) ) INIT = TYPE_2 . METHOD_1 ( schema , id ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) )  TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) (  com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_3 . put ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) , c ) ) INIT = VAR_3 . put ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) , c ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ( VAR_1 ? 1 : 0 ) ) )  METHOD_1 ( ( VAR_1 ? 1 : 0 ) ) (  VAR_2 = TYPE_2 . METHOD_2 ( psId , VAR_2 . getKey ( ) . get ( ) , result ) )  VAR_2 = TYPE_2 . METHOD_2 ( psId , VAR_2 . getKey ( ) . get ( ) , result ) (  VAR_3 . METHOD_3 ( false ) )  VAR_3 . METHOD_3 ( false ) (  VAR_4 . METHOD_4 ( true ) )  VAR_4 . METHOD_4 ( true ) (  VAR_5 . METHOD_4 ( true ) )  VAR_5 . METHOD_4 ( true ) (  VAR_6 . METHOD_4 ( true ) )  VAR_6 . METHOD_4 ( true ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_7 . onSuccess ( VAR_8 ) )  VAR_7 . onSuccess ( VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME branch ) NAME branch ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ) INIT = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_2 . append ( STRING_1 , project . get ( ) ) )  VAR_2 . append ( STRING_1 , project . get ( ) ) (  VAR_2 . append ( STRING_2 , branch ) )  VAR_2 . append ( STRING_2 , branch ) (  VAR_2 . append ( VAR_5 , VAR_6 ) )  VAR_2 . append ( VAR_5 , VAR_6 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( IN METHOD_4 ( VAR_1 ) ) IN METHOD_4 ( VAR_1 ) ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( VAR_8 , VAR_7 ) )  VAR_2 . METHOD_5 ( VAR_8 , VAR_7 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME c ) NAME c ( INIT = getChange ( changeId , VAR_1 ) ) INIT = getChange ( changeId , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( STRING_1 ) ) INIT = VAR_3 . get ( STRING_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) (  com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value ) . isEqualTo ( 2 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value ) . isEqualTo ( 2 ) (  com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) )  com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  add ( VAR_1 , to ) )  add ( VAR_1 , to ) ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  METHOD_3 ( TYPE_2 . METHOD_4 ( ) , ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) )  METHOD_3 ( TYPE_2 . METHOD_4 ( ) , ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.NameKey ) TYPE TYPE_3.NameKey ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_6 . create ( VAR_3 , db , VAR_1 . repo , VAR_1 . rw , VAR_7 , VAR_8 , METHOD_2 ( VAR_1 , VAR_4 ) , VAR_2 , VAR_5 , VAR_9 ) ; )  return VAR_6 . create ( VAR_3 , db , VAR_1 . repo , VAR_1 . rw , VAR_7 , VAR_8 , METHOD_2 ( VAR_1 , VAR_4 ) , VAR_2 , VAR_5 , VAR_9 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) )  METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) (  METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) )  METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) COND ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ( THEN THEN (  VAR_1 . put ( name , new TYPE_1 . String ( value ) ) )  VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_4 ) ) INIT = util . user ( VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = METHOD_2 ( change , user ) ) INIT = METHOD_2 ( change , user ) ) VAR VAR ( IF IF ( COND ! ( c . METHOD_3 ( db . get ( ) ) ) ) COND ! ( c . METHOD_3 ( db . get ( ) ) ) ( THEN THEN (  throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; )  throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; ) THEN THEN ) IF IF (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ( INIT = new TYPE_1 ( util . METHOD_4 ( account ) , VAR_1 ) ) INIT = new TYPE_1 ( util . METHOD_4 ( account ) , VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( event ) )  VAR_3 . METHOD_5 ( event ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  util . METHOD_6 ( TYPE_3 . log , e ) )  util . METHOD_6 ( TYPE_3 . log , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME u ) NAME u ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_5 . METHOD_2 ( u ) )  TYPE_5 . METHOD_2 ( u ) ( IF IF ( COND u instanceof TYPE_6 ) COND u instanceof TYPE_6 ( THEN THEN (  return VAR_1 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 , VAR_2 , VAR_3 ) ; )  return VAR_1 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 , VAR_2 , VAR_3 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND u instanceof TYPE_7 ) COND u instanceof TYPE_7 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  throw new TYPE_8 ( ) ; )  throw new TYPE_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  factory ( VAR_1 . Factory class ) )  factory ( VAR_1 . Factory class ) (  factory ( VAR_2 . Factory class ) )  factory ( VAR_2 . Factory class ) (  factory ( VAR_3 . Factory class ) )  factory ( VAR_3 . Factory class ) (  factory ( VAR_4 . Factory class ) )  factory ( VAR_4 . Factory class ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) (  factory ( VAR_6 . Factory class ) )  factory ( VAR_6 . Factory class ) (  factory ( VAR_7 . Factory class ) )  factory ( VAR_7 . Factory class ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) (  factory ( VAR_9 . Factory class ) )  factory ( VAR_9 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_3 . delete ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ) INIT = VAR_3 . delete ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.HttpServletResponse ) TYPE TYPE_1.HttpServletResponse ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 . HttpServletResponse class ) ) INIT = METHOD_2 ( VAR_2 . HttpServletResponse class ) ) VAR VAR (  servlet . METHOD_3 ( null , VAR_1 ) )  servlet . METHOD_3 ( null , VAR_1 ) (  TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) (  VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) )  VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) (  METHOD_6 ( new java.io.IOException ( STRING_1 ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( VAR_4 ) )  METHOD_6 ( new java.io.IOException ( STRING_1 ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( VAR_4 ) (  servlet . METHOD_9 ( null , VAR_1 ) )  servlet . METHOD_9 ( null , VAR_1 ) (  TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME n ) NAME n ( INIT = TYPE_3 . not ( p ) ) INIT = TYPE_3 . not ( p ) ) VAR VAR (  METHOD_3 ( ( n instanceof TYPE_4 ) ) )  METHOD_3 ( ( n instanceof TYPE_4 ) ) (  METHOD_4 ( p , n ) )  METHOD_4 ( p , n ) (  METHOD_5 ( p , TYPE_3 . not ( n ) ) )  METHOD_5 ( p , TYPE_3 . not ( n ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  display ( result ) )  display ( result ) (  VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) )  VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { display ( result ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; } } ) )  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { display ( result ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) )  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) )  VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) (  VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) )  VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME args ) NAME args ( INIT = VAR_2 . args ) INIT = VAR_2 . args ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_3 ( ) ) ) COND VAR_4 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_3 ( ) ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = VAR_5 . get ( VAR_6 . getAccountId ( ) ) . METHOD_4 ( ) ) INIT = VAR_5 . get ( VAR_6 . getAccountId ( ) ) . METHOD_4 ( ) ) VAR VAR (  VAR_7 . METHOD_5 ( VAR_8 , VAR_4 . METHOD_3 ( ) , VAR_4 . METHOD_2 ( ) , account ) )  VAR_7 . METHOD_5 ( VAR_8 , VAR_4 . METHOD_3 ( ) , VAR_4 . METHOD_2 ( ) , account ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = insert ( METHOD_4 ( repo , commit ) ) ) INIT = insert ( METHOD_4 ( repo , commit ) ) ) VAR VAR (  METHOD_5 ( STRING_7 ) )  METHOD_5 ( STRING_7 ) (  METHOD_5 ( STRING_8 ) )  METHOD_5 ( STRING_8 ) (  METHOD_5 ( STRING_9 , change ) )  METHOD_5 ( STRING_9 , change ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR (  VAR_3 += VAR_1 )  VAR_3 += VAR_1 ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_3 ) - ( VAR_5 ) ) INIT = ( VAR_3 ) - ( VAR_5 ) ) VAR VAR (  VAR_6 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) )  VAR_6 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) (  VAR_7 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) )  VAR_7 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_3 ( VAR_1 . changes ( ) . query ( r . getChangeId ( ) ) . get ( ) ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 . changes ( ) . query ( r . getChangeId ( ) ) . get ( ) ) ) VAR VAR (  org.junit.Assert . METHOD_4 ( VAR_2 ) )  org.junit.Assert . METHOD_4 ( VAR_2 ) (  org.junit.Assert . METHOD_4 ( VAR_3 ) )  org.junit.Assert . METHOD_4 ( VAR_3 ) (  org.junit.Assert . METHOD_4 ( VAR_4 ) )  org.junit.Assert . METHOD_4 ( VAR_4 ) (  org.junit.Assert . METHOD_4 ( VAR_5 ) )  org.junit.Assert . METHOD_4 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) ) ) )  assertEquals ( ( ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME r ) NAME r ( INIT = VAR_1 . apply ( change , null ) ) INIT = VAR_1 . apply ( change , null ) ) VAR VAR (  return r . METHOD_2 ( ) ? null : r . value ( ) ; )  return r . METHOD_2 ( ) ? null : r . value ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_4 , project , STRING_1 ) )  METHOD_3 ( VAR_4 , project , STRING_1 ) (  METHOD_3 ( VAR_5 , project , STRING_2 ) )  METHOD_3 ( VAR_5 , project , STRING_2 ) (  return METHOD_4 ( project ) ; )  return METHOD_4 ( project ) ; (  METHOD_5 ( VAR_6 ) )  METHOD_5 ( VAR_6 ) ( LABELED LABELED ( NAME VAR_7 ) NAME VAR_7 (  Test = VAR_8 )  Test = VAR_8 ) LABELED LABELED ( VAR VAR ( TYPE TYPE_3.submit ) TYPE TYPE_3.submit ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR (  on ( projects ) )  on ( projects ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . projects ( ) . name ( VAR_1 . get ( ) ) . METHOD_2 ( VAR_2 ) )  VAR_3 . projects ( ) . name ( VAR_1 . get ( ) ) . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_3 ( ) )  e . METHOD_3 ( ) (  com.google.common.truth.Truth.assertThat ( e . getMessage ( ) ) . contains ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( e . getMessage ( ) ) . contains ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ( INIT = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) INIT = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME res ) NAME res ( INIT = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , line , 0 , false ) , METHOD_7 ( ) ) ) INIT = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , line , 0 , false ) , METHOD_7 ( ) ) ) VAR VAR (  METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) )  METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ( INIT = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  account . METHOD_3 ( name ) )  account . METHOD_3 ( name ) (  account . METHOD_4 ( email ) )  account . METHOD_4 ( email ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = new TYPE_1 ( account , VAR_2 . Collections < TYPE_3 > METHOD_5 ( ) , VAR_2 . Collections < TYPE_4 > METHOD_5 ( ) ) ) INIT = new TYPE_1 ( account , VAR_2 . Collections < TYPE_3 > METHOD_5 ( ) , VAR_2 . Collections < TYPE_4 > METHOD_5 ( ) ) ) VAR VAR (  return s ; )  return s ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 = db . METHOD_2 ( ) )  VAR_4 = db . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; )  return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected synchronized ) MODIFIER protected synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) . VAR_3 . METHOD_3 ( VAR_4 ) ) INIT = TYPE_3 . METHOD_2 ( ) . VAR_3 . METHOD_3 ( VAR_4 ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  VAR_2 . add ( this ) )  VAR_2 . add ( this ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN (  new TYPE_5 ( VAR_5 , VAR_5 . toString ( ) ) . METHOD_5 ( ) )  new TYPE_5 ( VAR_5 , VAR_5 . toString ( ) ) . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_6 = VAR_7 . submit ( VAR_5 ) )  VAR_6 = VAR_7 . submit ( VAR_5 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( IF IF ( COND FLOAT_1 <= ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) COND FLOAT_1 <= ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( STRING_2 ) )  VAR_2 . METHOD_4 ( STRING_2 ) (  VAR_2 . METHOD_4 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) )  VAR_2 . METHOD_4 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( id ) ) INIT = TYPE_2 . METHOD_1 ( id ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) )  TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ) VAR VAR (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ) INIT = TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME err ) NAME err ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND e == null ) COND e == null ( THEN THEN (  VAR_2 . error ( err ) )  VAR_2 . error ( err ) ) THEN THEN ( ELSE ELSE (  VAR_2 . error ( err , e ) )  VAR_2 . error ( err , e ) ) ELSE ELSE ) IF IF (  return TYPE_2 . METHOD_2 ( ) ; )  return TYPE_2 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_3 ( err ) ; )  return TYPE_2 . METHOD_3 ( err ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( rw ) != null ) COND ( rw ) != null ( THEN THEN (  rw . close ( ) )  rw . close ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( repo ) != null ) COND ( repo ) != null ( THEN THEN (  repo . close ( ) )  repo . close ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , config . METHOD_4 ( ) ) )  VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , config . METHOD_4 ( ) ) (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ) IF IF (  return VAR_4 . create ( VAR_1 ) ; )  return VAR_4 . create ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN Account.Id ) RETURN Account.Id ( NAME getAccountId ) NAME getAccountId ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ( INIT = get ( 0 ) . VAR_1 ) INIT = get ( 0 ) . VAR_1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i < ( size ( ) ) ) COND i < ( size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( TYPE_2 . equals ( id , get ( i ) . VAR_1 ) , STRING_1 , id , get ( i ) . VAR_1 ) )  TYPE_1 . METHOD_1 ( TYPE_2 . equals ( id , get ( i ) . VAR_1 ) , STRING_1 , id , get ( i ) . VAR_1 ) ) BLOCK BLOCK ) FOR FOR (  return id ; )  return id ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( name ) )  TYPE_1 . METHOD_2 ( name ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME values ) NAME values ( INIT = new java.util.ArrayList < TYPE_2 > ( 2 ) ) INIT = new java.util.ArrayList < TYPE_2 > ( 2 ) ) VAR VAR (  values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) )  values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) (  values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) )  values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = new TYPE_1 ( name , values ) ) INIT = new TYPE_1 ( name , values ) ) VAR VAR (  type . METHOD_3 ( id ) )  type . METHOD_3 ( id ) (  return type ; )  return type ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME i ) NAME i ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  i . i = 1 )  i . i = 1 (  VAR_1 = 2 )  VAR_1 = 2 (  i . id = INT_1 )  i . id = INT_1 (  VAR_2 = INT_2 )  VAR_2 = INT_2 (  VAR_3 = INT_3 )  VAR_3 = INT_3 (  VAR_4 = INT_4 )  VAR_4 = INT_4 (  i . b = true )  i . b = true (  VAR_5 = false )  VAR_5 = false (  VAR_6 = true )  VAR_6 = true (  i . s = STRING_1 )  i . s = STRING_1 (  VAR_7 = STRING_2 )  VAR_7 = STRING_2 (  VAR_8 = null )  VAR_8 = null (  i . t = VAR_9 )  i . t = VAR_9 (  VAR_10 = VAR_9 )  VAR_10 = VAR_9 (  return i ; )  return i ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = user ( VAR_1 , VAR_4 ) ) INIT = user ( VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_3 ( VAR_5 ) )  METHOD_3 ( VAR_5 ) (  METHOD_4 ( VAR_5 ) )  METHOD_4 ( VAR_5 ) (  METHOD_5 ( STRING_2 , VAR_5 ) )  METHOD_5 ( STRING_2 , VAR_5 ) (  METHOD_5 ( STRING_3 , VAR_5 ) )  METHOD_5 ( STRING_3 , VAR_5 ) (  METHOD_5 ( STRING_4 , VAR_5 ) )  METHOD_5 ( STRING_4 , VAR_5 ) (  METHOD_3 ( STRING_1 , VAR_5 ) )  METHOD_3 ( STRING_1 , VAR_5 ) (  METHOD_3 ( STRING_5 , VAR_5 ) )  METHOD_3 ( STRING_5 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ( THEN THEN (  VAR_1 . set ( STRING_1 , VAR_2 ) )  VAR_1 . set ( STRING_1 , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 != null ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ) COND ( VAR_3 != null ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ( THEN THEN (  VAR_4 . METHOD_2 ( STRING_2 , null , STRING_3 , VAR_3 ) )  VAR_4 . METHOD_2 ( STRING_2 , null , STRING_3 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ( INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( rsrc ) )  VAR_2 . METHOD_4 ( rsrc ) (  VAR_2 . apply ( account , new TYPE_4 ( ) ) )  VAR_2 . apply ( account , new TYPE_4 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( result ) )  METHOD_3 ( result ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( patchSet . getKey ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { METHOD_3 ( result ) ; } } ) )  TYPE_2 . METHOD_2 ( patchSet . getKey ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { METHOD_3 ( result ) ; } } ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 (  VAR_4 = VAR_5 )  VAR_4 = VAR_5 ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_6 ( BLOCK BLOCK (  VAR_8 = VAR_9 )  VAR_8 = VAR_9 ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_8 = VAR_9 )  VAR_8 = VAR_9 ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_10 ( BLOCK BLOCK (  path = VAR_1 . path )  path = VAR_1 . path ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  revision = VAR_1 . revision )  revision = VAR_1 . revision ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  VAR_13 = VAR_14 )  VAR_13 = VAR_14 ) BLOCK BLOCK ) CASE VAR_12 ) SWITCH SWITCH (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 . append ( CHAR_1 ) )  VAR_1 . append ( CHAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_3 = false )  VAR_3 = false ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( CHAR_2 ) )  VAR_1 . append ( CHAR_2 ) ) ELSE ELSE ) IF IF (  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) )  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . append ( CHAR_3 ) )  VAR_1 . append ( CHAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( VAR_6 ) )  VAR_1 . append ( VAR_6 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_4 ( VAR_1 ) ) COND TYPE_2 . METHOD_4 ( VAR_1 ) ( THEN THEN (  TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_6 ( java.lang.String.format ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , VAR_1 ) ) )  VAR_3 . METHOD_6 ( java.lang.String.format ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , VAR_1 ) ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) COND ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . getProject ( ) . getName ( ) ) INIT = VAR_4 . getProject ( ) . getName ( ) ) VAR VAR (  return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; )  return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ( INIT = VAR_4 . getProject ( ) ) INIT = VAR_4 . getProject ( ) ) VAR VAR ( IF IF ( COND project . METHOD_3 ( ) ) COND project . METHOD_3 ( ) ( THEN THEN (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  factory ( VAR_1 . Factory class ) )  factory ( VAR_1 . Factory class ) (  factory ( VAR_2 . Factory class ) )  factory ( VAR_2 . Factory class ) (  factory ( VAR_3 . Factory class ) )  factory ( VAR_3 . Factory class ) (  factory ( VAR_4 . Factory class ) )  factory ( VAR_4 . Factory class ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) (  factory ( VAR_6 . Factory class ) )  factory ( VAR_6 . Factory class ) (  factory ( VAR_7 . Factory class ) )  factory ( VAR_7 . Factory class ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) (  factory ( VAR_9 . Factory class ) )  factory ( VAR_9 . Factory class ) (  factory ( VAR_10 . Factory class ) )  factory ( VAR_10 . Factory class ) (  factory ( VAR_11 . Factory class ) )  factory ( VAR_11 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  m . METHOD_2 ( ) )  m . METHOD_2 ( ) (  m . METHOD_3 ( STRING_1 ) )  m . METHOD_3 ( STRING_1 ) (  m . METHOD_4 ( ) )  m . METHOD_4 ( ) (  m . METHOD_5 ( ) )  m . METHOD_5 ( ) (  m . METHOD_2 ( ) )  m . METHOD_2 ( ) (  m . METHOD_6 ( STRING_2 ) )  m . METHOD_6 ( STRING_2 ) (  m . METHOD_6 ( STRING_3 ) )  m . METHOD_6 ( STRING_3 ) (  m . METHOD_4 ( ) )  m . METHOD_4 ( ) (  m . METHOD_5 ( ) )  m . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME not ) NAME not ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ( NAME n ) NAME n ( INIT = p . METHOD_1 ( 0 ) ) INIT = p . METHOD_1 ( 0 ) ) VAR VAR ( IF IF ( COND n instanceof TYPE_5 ) COND n instanceof TYPE_5 ( THEN THEN (  return TYPE_6 . METHOD_2 ( ( ( TYPE_5 < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; )  return TYPE_6 . METHOD_2 ( ( ( TYPE_5 < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_8 ( ) , VAR_2 ) )  VAR_1 . add ( new TYPE_8 ( ) , VAR_2 ) (  VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , n ) , VAR_3 ) )  VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , n ) , VAR_3 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return ( ( ! ( METHOD_2 ( ) ) ) && ( ( user . METHOD_3 ( ) ) || ( METHOD_4 ( VAR_3 ) ) ) ) || ( METHOD_5 ( ) ) ; )  return ( ( ! ( METHOD_2 ( ) ) ) && ( ( user . METHOD_3 ( ) ) || ( METHOD_4 ( VAR_3 ) ) ) ) || ( METHOD_5 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return ( ( ! ( METHOD_2 ( ) ) ) && ( METHOD_6 ( java.util.Collections . METHOD_7 ( ) ) ) ) || ( METHOD_5 ( ) ) ; )  return ( ( ! ( METHOD_2 ( ) ) ) && ( METHOD_6 ( java.util.Collections . METHOD_7 ( ) ) ) ) || ( METHOD_5 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_4 ) SWITCH SWITCH (  throw new TYPE_2 ( ( VAR_1 + STRING_1 ) ) ; )  throw new TYPE_2 ( ( VAR_1 + STRING_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ( THEN THEN (  TYPE_2 . METHOD_4 ( true ) )  TYPE_2 . METHOD_4 ( true ) (  VAR_2 . METHOD_5 ( false ) )  VAR_2 . METHOD_5 ( false ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_6 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_6 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_4 ( false ) )  TYPE_2 . METHOD_4 ( false ) (  VAR_2 . METHOD_5 ( true ) )  VAR_2 . METHOD_5 ( true ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME err ) NAME err ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  res . METHOD_2 ( VAR_1 ) )  res . METHOD_2 ( VAR_1 ) (  TYPE_5 . METHOD_3 ( req , res , null , c ) )  TYPE_5 . METHOD_3 ( req , res , null , c ) (  TYPE_5 . METHOD_4 ( req , res , msg ) )  TYPE_5 . METHOD_4 ( req , res , msg ) ( IF IF ( COND err != null ) COND err != null ( THEN THEN (  TYPE_6 . METHOD_5 ( req , err ) )  TYPE_6 . METHOD_5 ( req , err ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . create ( db , admin . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_1 , VAR_2 ) ) INIT = VAR_6 . create ( db , admin . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME r ) NAME r ( INIT = VAR_5 . to ( git , STRING_3 ) ) INIT = VAR_5 . to ( git , STRING_3 ) ) VAR VAR (  r . METHOD_3 ( ) )  r . METHOD_3 ( ) (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ) VAR VAR ( IF IF ( COND TYPE_2 . isEmpty ( VAR_3 ) ) COND TYPE_2 . isEmpty ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . contains ( VAR_3 . METHOD_4 ( ) ) ) INIT = TYPE_3 . contains ( VAR_3 . METHOD_4 ( ) ) ) VAR VAR (  VAR_5 . METHOD_5 ( ( ( ( ( ( STRING_2 + VAR_2 ) + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_4 ) ) )  VAR_5 . METHOD_5 ( ( ( ( ( ( STRING_2 + VAR_2 ) + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_4 ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( admin ) )  METHOD_3 ( admin ) (  METHOD_4 ( VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_1 , VAR_2 ) (  assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 , VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) )  assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 , VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME config ) NAME config ( INIT = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) INIT = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 ) , new TYPE_4 ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 ) , new TYPE_4 ( ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( STRING_1 ) ) INIT = VAR_2 . create ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_3 . create ( ) . METHOD_3 ( db , VAR_1 . getId ( ) ) )  VAR_3 . create ( ) . METHOD_3 ( db , VAR_1 . getId ( ) ) (  METHOD_4 ( ctl , null , TYPE_3 . METHOD_5 ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) ) ) )  METHOD_4 ( ctl , null , TYPE_3 . METHOD_5 ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.AccountGroup ) RETURN TYPE_1.AccountGroup ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.NameKey ) TYPE TYPE_3.NameKey ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 . NameKey ( VAR_1 ) ) INIT = new TYPE_3 . NameKey ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.AccountGroup ) TYPE TYPE_1.AccountGroup ( NAME group ) NAME group ( INIT = db . METHOD_3 ( ) . get ( VAR_2 ) ) INIT = db . METHOD_3 ( ) . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND group != null ) COND group != null ( THEN THEN (  return group ; )  return group ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME result ) NAME result ( INIT = VAR_1 . to ( git , STRING_1 ) ) INIT = VAR_1 . to ( git , STRING_1 ) ) VAR VAR (  VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 , STRING_2 , STRING_3 , result . getChangeId ( ) ) )  VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 , STRING_2 , STRING_3 , result . getChangeId ( ) ) (  return VAR_1 . to ( git , STRING_1 ) . getChangeId ( ) ; )  return VAR_1 . to ( git , STRING_1 ) . getChangeId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.AccountGroup ) RETURN TYPE_1.AccountGroup ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME name ) NAME name ( INIT = new TYPE_2 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ) INIT = new TYPE_2 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.AccountGroup ) TYPE TYPE_1.AccountGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 . AccountGroup ( name , key ) ) INIT = new TYPE_1 . AccountGroup ( name , key ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME me ) NAME me ) VAR VAR (  me = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) , ( ( TYPE_4 ) ( null ) ) ) )  me = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) , ( ( TYPE_4 ) ( null ) ) ) (  me . METHOD_5 ( STRING_1 ) )  me . METHOD_5 ( STRING_1 ) (  me . METHOD_6 ( STRING_2 ) )  me . METHOD_6 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + STRING_7 ) + STRING_8 ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + STRING_7 ) + STRING_8 ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( ) ) INIT = repo . METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) )  p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) (  return p ; )  return p ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) )  info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = info . METHOD_1 ( ) . values ( ) ) INIT = info . METHOD_1 ( ) . values ( ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_1 , diff ) )  VAR_2 . METHOD_4 ( VAR_1 , diff ) (  VAR_3 . METHOD_5 ( info ) )  VAR_3 . METHOD_5 ( info ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND user . METHOD_2 ( ) ) COND user . METHOD_2 ( ) ( THEN THEN (  return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; )  return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND user instanceof TYPE_3 ) COND user instanceof TYPE_3 ( THEN THEN (  return STRING_1 + ( user . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; )  return STRING_1 + ( user . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; ) THEN THEN ) IF IF (  return user . toString ( ) ; )  return user . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_2 . getName ( ) ) ) INIT = METHOD_3 ( VAR_2 . getName ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_1 ( VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . add ( VAR_3 ) )  VAR_4 . add ( VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( TRY TRY ( BLOCK BLOCK (  new TYPE_3 ( VAR_1 ) )  new TYPE_3 ( VAR_1 ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  assertEquals ( ( STRING_2 + ( VAR_1 . METHOD_6 ( ) ) ) , e . getMessage ( ) ) )  assertEquals ( ( STRING_2 + ( VAR_1 . METHOD_6 ( ) ) ) , e . getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . delete ( ) )  VAR_1 . delete ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) )  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) (  cfg = new TYPE_3 ( ) )  cfg = new TYPE_3 ( ) (  cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) )  cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) (  VAR_2 = new TYPE_4 ( VAR_1 , cfg , METHOD_8 ( VAR_3 class ) ) )  VAR_2 = new TYPE_4 ( VAR_1 , cfg , METHOD_8 ( VAR_3 class ) ) (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) )  VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) (  VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) )  VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) (  TYPE_2 . METHOD_7 ( true ) )  TYPE_2 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME base ) NAME base ( INIT = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_1 ) ) INIT = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . create ( projectName , base , VAR_2 , msg ) . to ( VAR_3 ) )  VAR_4 . create ( projectName , base , VAR_2 , msg ) . to ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == 1 ) || ( VAR_1 == 2 ) ) COND ( VAR_1 == 1 ) || ( VAR_1 == 2 ) ( THEN THEN ( IF IF ( COND ! ( STRING_1 . equals ( table . METHOD_2 ( row , VAR_1 ) ) ) ) COND ! ( STRING_1 . equals ( table . METHOD_2 ( row , VAR_1 ) ) ) ( THEN THEN (  METHOD_3 ( row , VAR_1 ) )  METHOD_3 ( row , VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = e . getValue ( ) ) INIT = e . getValue ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) )  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ( IF IF ( COND ( view ) != null ) COND ( view ) != null ( THEN THEN (  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) )  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ( ( VAR_4 . METHOD_2 ( ) ) + VAR_1 ) ) ) INIT = new TYPE_2 ( ( ( VAR_4 . METHOD_2 ( ) ) + VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) COND ! ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ( THEN THEN (  VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . toString ( ) ) )  VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . toString ( ) ) (  VAR_3 . METHOD_5 ( new TYPE_5 ( VAR_2 , VAR_5 ) ) )  VAR_3 . METHOD_5 ( new TYPE_5 ( VAR_2 , VAR_5 ) ) ) THEN THEN ) IF IF (  return VAR_6 . METHOD_6 ( VAR_3 , new TYPE_6 ( ) ) ; )  return VAR_6 . METHOD_6 ( VAR_3 , new TYPE_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 class ) )  VAR_1 . METHOD_2 ( VAR_2 class ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  in . account = user . email )  in . account = user . email (  VAR_3 = STRING_2 )  VAR_3 = STRING_2 (  in . ref = STRING_3 )  in . ref = STRING_3 (  VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) )  VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  in . name = VAR_1 )  in . name = VAR_1 (  VAR_2 = true )  VAR_2 = true (  VAR_3 . projects ( ) . create ( in ) )  VAR_3 . projects ( ) . create ( in ) (  METHOD_2 ( VAR_1 , VAR_4 ) )  METHOD_2 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME edit ) NAME edit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_5 . add ( new TYPE_2 ( VAR_6 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) )  VAR_5 . add ( new TYPE_2 ( VAR_6 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReceiveCommand ) TYPE TYPE_1.ReceiveCommand ( NAME cmd ) NAME cmd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ( INIT = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ) INIT = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ) VAR VAR ( IF IF ( COND ctl . METHOD_3 ( ) ) COND ctl . METHOD_3 ( ) ( THEN THEN ( IF IF ( COND ( TYPE_3 . METHOD_4 ( cmd ) ) && ( ! ( METHOD_5 ( cmd ) ) ) ) COND ( TYPE_3 . METHOD_4 ( cmd ) ) && ( ! ( METHOD_5 ( cmd ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_6 ( ctl , cmd ) )  METHOD_6 ( ctl , cmd ) (  cmd . METHOD_7 ( rp ) )  cmd . METHOD_7 ( rp ) ) THEN THEN ( ELSE ELSE (  TYPE_3 . reject ( cmd , STRING_1 ) )  TYPE_3 . reject ( cmd , STRING_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData,?> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( id . length ( ) ) == ( VAR_1 ) ) && ( schema . METHOD_2 ( VAR_2 ) ) ) COND ( ( id . length ( ) ) == ( VAR_1 ) ) && ( schema . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND p instanceof TYPE_4 < ? > ) COND p instanceof TYPE_4 < ? > ( THEN THEN (  return METHOD_2 ( p ) ; )  return METHOD_2 ( p ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; )  return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_2 ) NAME VAR_2 ( IN index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( args , VAR_1 . getId ( ) ) , this ) , 1 ) . METHOD_4 ( ) ) IN index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( args , VAR_1 . getId ( ) ) , this ) , 1 ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) COND VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME message ) NAME message ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_3 . METHOD_1 ( schema ) )  VAR_2 = TYPE_3 . METHOD_1 ( schema ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4.OrmException ) TYPE TYPE_4.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( INIT = new TYPE_1 ( new TYPE_1 . Key ( c . getId ( ) , VAR_2 ) , null ) ) INIT = new TYPE_1 ( new TYPE_1 . Key ( c . getId ( ) , VAR_2 ) , null ) ) VAR VAR (  m . METHOD_2 ( VAR_1 ) )  m . METHOD_2 ( VAR_1 ) (  return m ; )  return m ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ; )  return METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( e . getMessage ( ) ) ) INIT = new TYPE_2 ( e . getMessage ( ) ) ) VAR VAR (  VAR_4 . METHOD_5 ( e ) )  VAR_4 . METHOD_5 ( e ) (  throw VAR_4 ; )  throw VAR_4 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo . METHOD_2 ( 2 ) )  repo . METHOD_2 ( 2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_3 ( STRING_1 , repo . commit ( ) . create ( ) ) ) INIT = repo . METHOD_3 ( STRING_1 , repo . commit ( ) . create ( ) ) ) VAR VAR (  repo . METHOD_2 ( ( - 1 ) ) )  repo . METHOD_2 ( ( - 1 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = repo . METHOD_3 ( STRING_2 , VAR_1 ) ) INIT = repo . METHOD_3 ( STRING_2 , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( ( ( VAR_3 ) + INT_1 ) , METHOD_4 ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( ( ( VAR_3 ) + INT_1 ) , METHOD_4 ( VAR_1 ) ) (  org.junit.Assert.assertEquals ( ( ( VAR_3 ) + 2 ) , METHOD_4 ( VAR_2 ) ) )  org.junit.Assert.assertEquals ( ( ( VAR_3 ) + 2 ) , METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( ) ) INIT = repo . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ( INIT = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) INIT = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) VAR VAR (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  return id ; )  return id ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME a ) NAME a ( IN out . values ( ) ) IN out . values ( ) ( BLOCK BLOCK (  r . add ( new TYPE_2 ( a ) ) )  r . add ( new TYPE_2 ( a ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_1 ( r ) ; )  return new TYPE_1 ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) IN VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ) INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ) VAR VAR (  VAR_2 . add ( VAR_5 [ 0 ] ) )  VAR_2 . add ( VAR_5 [ 0 ] ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME insert ) NAME insert ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  table . METHOD_1 ( row ) )  table . METHOD_1 ( row ) (  METHOD_2 ( row ) )  METHOD_2 ( row ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = table . METHOD_3 ( ) ) INIT = table . METHOD_3 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_5 ( ) ) (  VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_6 ( ) ) )  VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_6 ( ) ) (  VAR_2 . METHOD_4 ( row , 2 , TYPE_3 . css ( ) . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( row , 2 , TYPE_3 . css ( ) . METHOD_5 ( ) ) (  METHOD_7 ( row , VAR_1 ) )  METHOD_7 ( row , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( ctx . getProject ( ) , psId . getParentKey ( ) ) ) INIT = VAR_1 . create ( ctx . getProject ( ) , psId . getParentKey ( ) ) ) VAR VAR (  cm . METHOD_1 ( ctx . METHOD_2 ( ) . getAccountId ( ) ) )  cm . METHOD_1 ( ctx . METHOD_2 ( ) . getAccountId ( ) ) (  cm . METHOD_3 ( patchSet , info ) )  cm . METHOD_3 ( patchSet , info ) (  cm . METHOD_4 ( ) )  cm . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . error ( ( STRING_1 + ( psId ) ) , e ) )  VAR_2 . error ( ( STRING_1 + ( psId ) ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( 1 ) )  TYPE_2 . METHOD_2 ( 1 ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_3 ( ) . equals ( STRING_1 ) ) COND VAR_1 . METHOD_3 ( ) . equals ( STRING_1 ) ( THEN THEN (  METHOD_4 ( e ) )  METHOD_4 ( e ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( e . toString ( ) ) )  VAR_2 . METHOD_5 ( e . toString ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_4 ( e ) )  METHOD_4 ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME revision ) NAME revision ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( cfg . METHOD_4 ( VAR_2 , true ) ) . METHOD_5 ( STRING_1 ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( cfg . METHOD_4 ( VAR_2 , true ) ) . METHOD_5 ( STRING_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN VAR_3 . METHOD_6 ( ) ) IN VAR_3 . METHOD_6 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_7 ( name , VAR_3 . METHOD_8 ( name ) ) )  VAR_1 . METHOD_7 ( name , VAR_3 . METHOD_8 ( name ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_7 ( STRING_2 ) )  VAR_1 . METHOD_7 ( STRING_2 ) (  VAR_1 . METHOD_7 ( STRING_3 , revision ) )  VAR_1 . METHOD_7 ( STRING_3 , revision ) (  return VAR_1 . get ( ) ; )  return VAR_1 . get ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) COND ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , rsrc . getChange ( ) . getId ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , rsrc . getChange ( ) . getId ( ) ) (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_3 ( VAR_4 , STRING_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_4 , STRING_1 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_4 . METHOD_4 ( VAR_5 ) ) ) COND ! ( TYPE_4 . METHOD_4 ( VAR_5 ) ) ( THEN THEN (  VAR_6 . METHOD_5 ( VAR_1 , VAR_5 ) )  VAR_6 . METHOD_5 ( VAR_1 , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( topic == null ) || ( topic . isEmpty ( ) ) ) COND ( topic == null ) || ( topic . isEmpty ( ) ) ( THEN THEN (  topic = STRING_1 + ( TYPE_2 . METHOD_2 ( ) . toString ( ) ) )  topic = STRING_1 + ( TYPE_2 . METHOD_2 ( ) . toString ( ) ) (  VAR_2 . METHOD_3 ( STRING_2 , VAR_1 , topic ) )  VAR_2 . METHOD_3 ( STRING_2 , VAR_1 , topic ) (  VAR_3 . changes ( ) . id ( VAR_1 ) . topic ( topic ) )  VAR_3 . changes ( ) . id ( VAR_1 ) . topic ( topic ) ) THEN THEN ) IF IF (  return topic ; )  return topic ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.util.Map<java.lang.String,?> ) RETURN java.util.Map<java.lang.String,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( req ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( req ) . METHOD_3 ( ) ) VAR VAR (  return TYPE_3 . of ( STRING_1 , VAR_3 , STRING_2 , TYPE_4 . METHOD_4 ( VAR_4 ) , STRING_3 , METHOD_5 ( req , VAR_5 , TYPE_5 . METHOD_6 ( VAR_6 ) ) , STRING_4 , METHOD_5 ( req , VAR_7 , METHOD_7 ( req ) ) ) ; )  return TYPE_3 . of ( STRING_1 , VAR_3 , STRING_2 , TYPE_4 . METHOD_4 ( VAR_4 ) , STRING_3 , METHOD_5 ( req , VAR_5 , TYPE_5 . METHOD_6 ( VAR_6 ) ) , STRING_4 , METHOD_5 ( req , VAR_7 , METHOD_7 ( req ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( TYPE_1 . index ( this ) ) - ( TYPE_1 . index ( b ) ) ) INIT = ( TYPE_1 . index ( this ) ) - ( TYPE_1 . index ( b ) ) ) VAR VAR ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  getName ( ) . METHOD_1 ( b . getName ( ) ) )  getName ( ) . METHOD_1 ( b . getName ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  db . create ( ) )  db . create ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = db . METHOD_2 ( ) ) INIT = db . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = db . METHOD_2 ( ) ) INIT = db . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  assertEquals ( VAR_3 , VAR_4 ) )  assertEquals ( VAR_3 , VAR_4 ) (  assertEquals ( VAR_5 , VAR_6 ) )  assertEquals ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) )  VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = METHOD_3 ( ctl ) ) INIT = METHOD_3 ( ctl ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( ctl , VAR_5 . create ( db . get ( ) , ctl ) , in , repo , true ) ) INIT = METHOD_4 ( ctl , VAR_5 . create ( db . get ( ) , ctl ) , in , repo , true ) ) VAR VAR (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) )  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_4 ) ) , METHOD_2 ( STRING_1 ) ) )  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_4 ) ) , METHOD_2 ( STRING_1 ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) )  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return cfg . METHOD_1 ( name , VAR_1 ) ; )  return cfg . METHOD_1 ( name , VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . error ( java.lang.String.format ( STRING_1 , name , VAR_1 ) ) )  VAR_2 . error ( java.lang.String.format ( STRING_1 , name , VAR_1 ) ) (  VAR_2 . METHOD_2 ( ( STRING_2 + ( e . getMessage ( ) ) ) , e ) )  VAR_2 . METHOD_2 ( ( STRING_2 + ( e . getMessage ( ) ) ) , e ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_2<TYPE_3>> ) TYPE TYPE_4<TYPE_2<TYPE_3>> ( NAME ref ) NAME ref ( INIT = new TYPE_4 < TYPE_2 < TYPE_3 > > ( VAR_1 ) ) INIT = new TYPE_4 < TYPE_2 < TYPE_3 > > ( VAR_1 ) ) VAR VAR (  VAR_2 . add ( ref ) )  VAR_2 . add ( ref ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ref . METHOD_2 ( VAR_1 , null ) ) COND ref . METHOD_2 ( VAR_1 , null ) ( THEN THEN (  VAR_2 . METHOD_1 ( ref ) )  VAR_2 . METHOD_1 ( ref ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ref . METHOD_2 ( VAR_1 , null ) ) { VAR_2 . METHOD_1 ( ref ) ; } } } ; )  return new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ref . METHOD_2 ( VAR_1 , null ) ) { VAR_2 . METHOD_1 ( ref ) ; } } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR (  VAR_3 . info ( java.lang.String.format ( STRING_1 , name , VAR_1 . METHOD_3 ( ) ) ) )  VAR_3 . info ( java.lang.String.format ( STRING_1 , name , VAR_1 . METHOD_3 ( ) ) ) (  VAR_1 . METHOD_4 ( VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_4 ) (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) (  VAR_5 . METHOD_6 ( name ) )  VAR_5 . METHOD_6 ( name ) (  VAR_6 . METHOD_6 ( name ) )  VAR_6 . METHOD_6 ( name ) (  VAR_7 . add ( VAR_1 ) )  VAR_7 . add ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1 . METHOD_3 ( VAR_2 ) ; } } . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) INIT = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1 . METHOD_3 ( VAR_2 ) ; } } . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . display ( r . METHOD_3 ( ) ) )  VAR_2 . display ( r . METHOD_3 ( ) ) (  VAR_3 . display ( r . METHOD_4 ( ) ) )  VAR_3 . display ( r . METHOD_4 ( ) ) (  VAR_4 . display ( r . METHOD_5 ( ) ) )  VAR_4 . display ( r . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_5 . log ( STRING_1 , VAR_5 ) )  TYPE_5 . log ( STRING_1 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { VAR_2 . display ( r . METHOD_3 ( ) ) ; VAR_3 . display ( r . METHOD_4 ( ) ) ; VAR_4 . display ( r . METHOD_5 ( ) ) ; } public void METHOD_6 ( final TYPE_4 VAR_5 ) { TYPE_5 . log ( STRING_1 , VAR_5 ) ; } } ) )  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { VAR_2 . display ( r . METHOD_3 ( ) ) ; VAR_3 . display ( r . METHOD_4 ( ) ) ; VAR_4 . display ( r . METHOD_5 ( ) ) ; } public void METHOD_6 ( final TYPE_4 VAR_5 ) { TYPE_5 . log ( STRING_1 , VAR_5 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( ( VAR_1 instanceof TYPE_3 ) ) )  METHOD_3 ( ( VAR_1 instanceof TYPE_3 ) ) (  METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) )  METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_2 ) ) VAR VAR (  METHOD_3 ( ( VAR_2 instanceof TYPE_5 ) ) )  METHOD_3 ( ( VAR_2 instanceof TYPE_5 ) ) (  METHOD_5 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) )  METHOD_5 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( ) ) COND METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( cd != null ) ? cd . reviewers ( TYPE_2 . of ( db ) ) . values ( ) : VAR_2 . METHOD_4 ( db , change.getId ( ) ) . values ( ) ) INIT = ( cd != null ) ? cd . reviewers ( TYPE_2 . of ( db ) ) . values ( ) : VAR_2 . METHOD_4 ( db , change.getId ( ) ) . values ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME user ) NAME user ( INIT = ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ) VAR VAR (  return VAR_1 . contains ( user . getAccountId ( ) ) ; )  return VAR_1 . contains ( user . getAccountId ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_1 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_6 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ) INIT = TYPE_6 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( db , VAR_2 , VAR_5 , VAR_6 ) )  METHOD_7 ( db , VAR_2 , VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME w ) NAME w ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ) INIT INIT ( COND w != null ) COND w != null ( UPDATE UPDATE (  w = w . METHOD_2 ( ) )  w = w . METHOD_2 ( ) ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND w instanceof TYPE_2 ) COND w instanceof TYPE_2 ( THEN THEN (  ( ( TYPE_2 ) ( w ) ) . METHOD_1 ( ) )  ( ( TYPE_2 ) ( w ) ) . METHOD_1 ( ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( project ) ) INIT = VAR_1 . METHOD_2 ( project ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ( INIT = repo . METHOD_3 ( STRING_1 ) ) INIT = repo . METHOD_3 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_3 ) NAME VAR_3 ( INIT = repo . METHOD_3 ( STRING_2 ) ) INIT = repo . METHOD_3 ( STRING_2 ) ) VAR VAR (  return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; )  return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  rw . METHOD_5 ( ) )  rw . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( IF IF ( COND TYPE_2 . METHOD_2 ( ) . auth ( ) . METHOD_3 ( ) ) COND TYPE_2 . METHOD_2 ( ) . auth ( ) . METHOD_3 ( ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ( IF IF ( COND ( VAR_4 . METHOD_4 ( ) ) == 0 ) COND ( VAR_4 . METHOD_4 ( ) ) == 0 ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME me ) NAME me ( INIT = TYPE_2 . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_5 ( ) ) VAR VAR (  me . METHOD_6 ( VAR_3 ) )  me . METHOD_6 ( VAR_3 ) (  METHOD_7 ( me ) )  METHOD_7 ( me ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_8 ( true ) )  VAR_5 . METHOD_8 ( true ) ) ELSE ELSE ) IF IF (  METHOD_9 ( ) )  METHOD_9 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = VAR_1 . change ( ) . getProject ( ) ) INIT = VAR_1 . change ( ) . getProject ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return ( ( VAR_2 . config ) == null ) || ( project == null ) ? VAR_3 : VAR_4 . METHOD_2 ( project , VAR_5 ) . METHOD_3 ( VAR_6 , VAR_3 ) ; )  return ( ( VAR_2 . config ) == null ) || ( project == null ) ? VAR_3 : VAR_4 . METHOD_2 ( project , VAR_5 ) . METHOD_3 ( VAR_6 , VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_7 . error ( ( STRING_1 + project ) ) )  VAR_7 . error ( ( STRING_1 + project ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( change , VAR_1 . user , db ) ) COND METHOD_2 ( change , VAR_1 . user , db ) ( THEN THEN (  VAR_3 . METHOD_3 ( event ) )  VAR_3 . METHOD_3 ( event ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( event ) )  METHOD_4 ( event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ProjectConfig ) TYPE TYPE_1.ProjectConfig ( NAME cfg ) NAME cfg ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) )  TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) (  METHOD_6 ( VAR_2 , cfg ) )  METHOD_6 ( VAR_2 , cfg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME name ) NAME name ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  in . name = name )  in . name = name ( TRY TRY ( BLOCK BLOCK (  VAR_1 . apply ( rsrc , in ) )  VAR_1 . apply ( rsrc , in ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( name , e ) ; )  throw new TYPE_4 ( name , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_5 . METHOD_1 ( STRING_1 , e ) ; )  throw TYPE_5 . METHOD_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = get ( name ) ) INIT = get ( name ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = ui . METHOD_2 ( ( VAR_4 != null ? VAR_4 : VAR_2 ) , STRING_1 , VAR_1 ) ) INIT = ui . METHOD_2 ( ( VAR_4 != null ? VAR_4 : VAR_2 ) , STRING_1 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 && ( VAR_5 == VAR_2 ) ) COND VAR_3 && ( VAR_5 == VAR_2 ) ( THEN THEN (  VAR_5 = null )  VAR_5 = null ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_5 ) ) ) COND ! ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_5 ) ) ( THEN THEN (  set ( name , VAR_5 ) )  set ( name , VAR_5 ) ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.junit.Assert . METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) )  org.junit.Assert . METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) (  org.junit.Assert . METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) )  org.junit.Assert . METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) (  TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 ) )  TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 ) (  TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) , VAR_2 ) )  TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i < INT_1 ) COND i < INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME p ) NAME p ( INIT = STRING_1 + i ) INIT = STRING_1 + i ) VAR VAR (  METHOD_2 ( p ) )  METHOD_2 ( p ) (  TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) )  TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  return VAR_4 . to ( git , ref ) ; )  return VAR_4 . to ( git , ref ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 , STRING_1 ) ) INIT = new TYPE_1 ( VAR_1 , STRING_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  METHOD_3 ( VAR_2 . METHOD_5 ( ) ) )  METHOD_3 ( VAR_2 . METHOD_5 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) (  assertEquals ( VAR_1 , VAR_5 ) )  assertEquals ( VAR_1 , VAR_5 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . delete ( ) )  VAR_2 . delete ( ) (  VAR_1 . delete ( ) )  VAR_1 . delete ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FIELD FIELD ( MODIFIER private static final ) MODIFIER private static final ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) FIELD FIELD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ) INIT = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( VAR_2 ) )  VAR_4 . METHOD_2 ( VAR_2 ) (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_4 . close ( ) )  VAR_4 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME err ) NAME err ( BLOCK BLOCK (  throw new TYPE_6 ( STRING_1 , err ) ; )  throw new TYPE_6 ( STRING_1 , err ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 < TYPE_2 > ( ) { private static final long VAR_1 = INT_1 ; public void METHOD_1 ( TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { try { TYPE_4 VAR_4 = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ; try { VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; } finally { VAR_4 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_6 ( STRING_1 , err ) ; } } } ; )  return new TYPE_1 < TYPE_2 > ( ) { private static final long VAR_1 = INT_1 ; public void METHOD_1 ( TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { try { TYPE_4 VAR_4 = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ; try { VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; } finally { VAR_4 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_6 ( STRING_1 , err ) ; } } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = insert ( METHOD_3 ( repo ) ) ) INIT = insert ( METHOD_3 ( repo ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME query ) NAME query ( INIT = METHOD_4 ( STRING_2 ) . METHOD_5 ( INT_1 ) ) INIT = METHOD_4 ( STRING_2 ) . METHOD_5 ( INT_1 ) ) VAR VAR (  METHOD_6 ( query , change ) )  METHOD_6 ( query , change ) (  METHOD_6 ( query . METHOD_7 ( 1 ) ) )  METHOD_6 ( query . METHOD_7 ( 1 ) ) (  METHOD_6 ( query . METHOD_7 ( INT_2 ) ) )  METHOD_6 ( query . METHOD_7 ( INT_2 ) ) (  METHOD_8 ( query . METHOD_7 ( INT_3 ) ) )  METHOD_8 ( query . METHOD_7 ( INT_3 ) ) (  METHOD_6 ( query . METHOD_5 ( INT_3 ) . METHOD_7 ( INT_3 ) ) )  METHOD_6 ( query . METHOD_5 ( INT_3 ) . METHOD_7 ( INT_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_6 ( new TYPE_6 . Id ( user . getAccountId ( ) , VAR_2 ) , VAR_3 ) ) INIT = new TYPE_6 ( new TYPE_6 . Id ( user . getAccountId ( ) , VAR_2 ) , VAR_3 ) ) VAR VAR (  VAR_4 . apply ( new TYPE_7 ( user . METHOD_2 ( ) , VAR_1 ) , null ) )  VAR_4 . apply ( new TYPE_7 ( user . METHOD_2 ( ) , VAR_1 ) , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<com.google.gerrit.reviewdb.client.PatchSet.Id> ) RETURN java.util.Set<com.google.gerrit.reviewdb.client.PatchSet.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.PatchSet.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.PatchSet.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . add ( cd . change ( ) . currentPatchSetId ( ) ) )  VAR_1 . add ( cd . change ( ) . currentPatchSetId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 . delete ( ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . delete ( ) ) . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) )  TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_9 ( VAR_3 ) ) INIT = VAR_5 . METHOD_9 ( VAR_3 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_10 ( ) . METHOD_11 ( ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_10 ( ) . METHOD_11 ( ) ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN Account.Id ) RETURN Account.Id ( NAME user ) NAME user ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = METHOD_1 ( name , email ) ) INIT = METHOD_1 ( name , email ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( s . METHOD_5 ( ) . getId ( ) ) ) ) . METHOD_6 ( TYPE_3 . of ( s ) ) )  TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( s . METHOD_5 ( ) . getId ( ) ) ) ) . METHOD_6 ( TYPE_3 . of ( s ) ) (  return s . METHOD_5 ( ) . getId ( ) ; )  return s . METHOD_5 ( ) . getId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 , VAR_4 ) ) )  VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 , VAR_4 ) ) (  VAR_2 . METHOD_5 ( STRING_1 ) )  VAR_2 . METHOD_5 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_6 ( VAR_1 , VAR_5 ) ) INIT = METHOD_6 ( VAR_1 , VAR_5 ) ) VAR VAR ( IF IF ( COND VAR_5 . get ( ) ) COND VAR_5 . get ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_6 ) ) )  VAR_2 . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_6 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ( INIT = ctl . getChange ( ) . currentPatchSetId ( ) ) INIT = ctl . getChange ( ) . currentPatchSetId ( ) ) VAR VAR (  return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , VAR_1 , psId , VAR_3 ) ) ; )  return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , VAR_1 , psId , VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( ) ; )  return TYPE_1 . METHOD_2 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3.OrmException ) TYPE TYPE_3.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( INT_1 , STRING_1 ) ; )  throw new TYPE_2 ( INT_1 , STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( INT_1 , STRING_1 ) ; )  throw new TYPE_2 ( INT_1 , STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) COND ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ( THEN THEN (  return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; )  return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; ) THEN THEN ) IF IF (  throw new TYPE_3 ( rsrc . getName ( ) ) ; )  throw new TYPE_3 ( rsrc . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<TYPE_3> ) RETURN java.util.Set<TYPE_3> ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4<TYPE_3> ) TYPE TYPE_4<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<TYPE_3> ) RETURN java.util.Set<TYPE_3> ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4<TYPE_3> ) TYPE TYPE_4<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME contains ) NAME contains ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; )  return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( null ) { public TYPE_2 METHOD_2 ( ) { return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; } } ; )  return new TYPE_1 ( null ) { public TYPE_2 METHOD_2 ( ) { return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME factory ) NAME factory ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  factory . METHOD_3 ( false ) )  factory . METHOD_3 ( false ) (  factory . METHOD_4 ( false ) )  factory . METHOD_4 ( false ) (  factory . METHOD_5 ( true ) )  factory . METHOD_5 ( true ) (  factory . METHOD_6 ( true ) )  factory . METHOD_6 ( true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = factory . METHOD_7 ( ) ) INIT = factory . METHOD_7 ( ) ) VAR VAR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) INIT = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = change . getKey ( ) . get ( ) ) INIT = change . getKey ( ) . get ( ) ) VAR VAR (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= INT_1 ) COND i <= INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) INIT = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) VAR VAR (  METHOD_4 ( VAR_1 , change ) )  METHOD_4 ( VAR_1 , change ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) )  TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME repo ) NAME repo ( INIT = METHOD_3 ( STRING_1 ) ) INIT = METHOD_3 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_2 ) NAME VAR_2 ( INIT = insert ( METHOD_4 ( repo ) ) ) INIT = insert ( METHOD_4 ( repo ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_3 ) NAME VAR_3 ( INIT = insert ( METHOD_4 ( repo ) ) ) INIT = insert ( METHOD_4 ( repo ) ) ) VAR VAR (  TYPE_1 . METHOD_5 ( 0 , VAR_4 ) )  TYPE_1 . METHOD_5 ( 0 , VAR_4 ) (  METHOD_6 ( STRING_2 ) )  METHOD_6 ( STRING_2 ) (  METHOD_6 ( STRING_3 , VAR_3 ) )  METHOD_6 ( STRING_3 , VAR_3 ) (  METHOD_6 ( STRING_4 , VAR_3 ) )  METHOD_6 ( STRING_4 , VAR_3 ) (  METHOD_6 ( STRING_5 , VAR_3 ) )  METHOD_6 ( STRING_5 , VAR_3 ) (  METHOD_6 ( STRING_6 , VAR_3 , VAR_2 ) )  METHOD_6 ( STRING_6 , VAR_3 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return new TYPE_2 ( server ) ; )  return new TYPE_2 ( server ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4.Account ) TYPE TYPE_4.Account ( NAME account ) NAME account ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw VAR_1 ; )  throw VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public void METHOD_1 ( TYPE_4 . Account account , TYPE_5 info ) throws TYPE_3 { throw VAR_1 ; } } ; )  return new TYPE_1 ( ) { public void METHOD_1 ( TYPE_4 . Account account , TYPE_5 info ) throws TYPE_3 { throw VAR_1 ; } } ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN com.google.gerrit.reviewdb.client.Change.Id ) RETURN com.google.gerrit.reviewdb.client.Change.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ref . METHOD_2 ( TYPE_1 ) ) + ( TYPE_1 . length ( ) ) ) INIT = ( ref . METHOD_2 ( TYPE_1 ) ) + ( TYPE_1 . length ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ref , VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( ref , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = ref . METHOD_4 ( VAR_1 , VAR_2 ) ) INIT = ref . METHOD_4 ( VAR_1 , VAR_2 ) ) VAR VAR (  return new com.google.gerrit.reviewdb.client.Change . Id ( TYPE_3 . METHOD_5 ( id ) ) ; )  return new com.google.gerrit.reviewdb.client.Change . Id ( TYPE_3 . METHOD_5 ( id ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( IN in ) IN in ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  r . add ( new TYPE_1 ( c , VAR_2 ) ) )  r . add ( new TYPE_1 ( c , VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ( ELSE ELSE (  r . add ( m ) )  r . add ( m ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME msg ) NAME msg ( INIT = TYPE_3 . message ( VAR_1 ) ) INIT = TYPE_3 . message ( VAR_1 ) ) VAR VAR (  res . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , STRING_1 ) )  res . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , STRING_1 ) (  res . METHOD_4 ( msg . length ) )  res . METHOD_4 ( msg . length ) ( TRY TRY ( BLOCK BLOCK (  TYPE_5 . METHOD_5 ( res ) )  TYPE_5 . METHOD_5 ( res ) ) BLOCK BLOCK ( FINALLY FINALLY ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME out ) NAME out ( INIT = res . METHOD_6 ( ) ) INIT = res . METHOD_6 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  out . METHOD_7 ( msg ) )  out . METHOD_7 ( msg ) ) BLOCK BLOCK ( FINALLY FINALLY (  out . close ( ) )  out . close ( ) ) FINALLY FINALLY ) TRY TRY ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( s == null ) || ( ( s . length ( ) ) == 0 ) ) COND ( s == null ) || ( ( s . length ( ) ) == 0 ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = s . METHOD_3 ( STRING_2 ) ) INIT = s . METHOD_3 ( STRING_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . length ) < INT_1 ) COND ( VAR_1 . length ) < INT_1 ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF (  return VAR_1 [ 2 ] ; )  return VAR_1 [ 2 ] ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  id = TYPE_2 . METHOD_2 ( VAR_1 ) )  id = TYPE_2 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_3 ( ) ) INIT = schema . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return auth ( db . METHOD_4 ( ) . get ( id ) ) ; )  return auth ( db . METHOD_4 ( ) . get ( id ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( ) . log ( STRING_1 , e ) )  METHOD_5 ( ) . log ( STRING_1 , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME close ) NAME close ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( WHILE WHILE ( COND ( VAR_1 . METHOD_2 ( ) ) != ( - 1 ) ) COND ( VAR_1 . METHOD_2 ( ) ) != ( - 1 ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . close ( ) )  VAR_2 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . add ( new TYPE_3 ( TYPE_4 . METHOD_2 ( ) ) ) )  VAR_2 . add ( new TYPE_3 ( TYPE_4 . METHOD_2 ( ) ) ) (  VAR_3 = new TYPE_5 ( STRING_1 , STRING_1 ) )  VAR_3 = new TYPE_5 ( STRING_1 , STRING_1 ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSet> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSet> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = info . METHOD_2 ( ) . values ( ) ) INIT = info . METHOD_2 ( ) . values ( ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.PatchSet> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.PatchSet> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSet > ( VAR_1 . length ( ) ) ) INIT = new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSet > ( VAR_1 . length ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_4 . METHOD_4 ( VAR_1 ) ) IN TYPE_4 . METHOD_4 ( VAR_1 ) ( BLOCK BLOCK (  r . add ( TYPE_5 . METHOD_5 ( info , VAR_2 ) ) )  r . add ( TYPE_5 . METHOD_5 ( info , VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) || ( VAR_1 instanceof TYPE_2 ) ) COND ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) || ( VAR_1 instanceof TYPE_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 . getMessage ( ) ) )  METHOD_3 ( VAR_1 . getMessage ( ) ) ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( cfg . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( cfg . METHOD_5 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) )  TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) (  org.junit.Assert.assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) (  org.junit.Assert.assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) )  org.junit.Assert.assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String,TYPE_2> ) TYPE TYPE_1<java.lang.String,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ) IN TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( TYPE_5 . METHOD_4 ( ) . get ( VAR_2 ) . METHOD_6 ( ) , VAR_1 . get ( VAR_2 ) . METHOD_6 ( ) ) )  org.junit.Assert.assertEquals ( TYPE_5 . METHOD_4 ( ) . get ( VAR_2 ) . METHOD_6 ( ) , VAR_1 . get ( VAR_2 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND t . METHOD_2 ( ) ) COND t . METHOD_2 ( ) ( THEN THEN (  return new TYPE_2 ( ( ( this . METHOD_3 ( ) ) - ( t . METHOD_3 ( ) ) ) ) ; )  return new TYPE_2 ( ( ( this . METHOD_3 ( ) ) - ( t . METHOD_3 ( ) ) ) ) ; ) THEN THEN ) IF IF (  return new TYPE_3 ( ( ( this . VAR_1 ) - ( t . METHOD_4 ( ) ) ) ) ; )  return new TYPE_3 ( ( ( this . VAR_1 ) - ( t . METHOD_4 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME query ) NAME query ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = ( VAR_2 <= 0 ) ? INT_1 : TYPE_3 . METHOD_2 ( VAR_2 , INT_1 ) ) INIT = ( VAR_2 <= 0 ) ? INT_1 : TYPE_3 . METHOD_2 ( VAR_2 , INT_1 ) ) VAR VAR (  return TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( query ) , n ) ) ; )  return TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( query ) , n ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME in ) NAME in ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR (  VAR_2 = TYPE_8 . of ( VAR_1 . METHOD_1 ( ) . toString ( ) ) )  VAR_2 = TYPE_8 . of ( VAR_1 . METHOD_1 ( ) . toString ( ) ) (  return delete . get ( ) . apply ( VAR_1 , in ) ; )  return delete . get ( ) . apply ( VAR_1 , in ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( index , false , VAR_3 ) ) INIT = METHOD_2 ( index , false , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; )  return METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR (  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) (  modules.add ( VAR_3 . METHOD_2 ( VAR_4 class ) ) )  modules.add ( VAR_3 . METHOD_2 ( VAR_4 class ) ) (  modules.add ( VAR_1 . METHOD_2 ( VAR_5 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_5 class ) ) (  modules.add ( TYPE_3 . METHOD_3 ( ) ) )  modules.add ( TYPE_3 . METHOD_3 ( ) ) (  modules.add ( TYPE_4 . METHOD_3 ( ) ) )  modules.add ( TYPE_4 . METHOD_3 ( ) ) (  return VAR_3 . METHOD_4 ( modules ) ; )  return VAR_3 . METHOD_4 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_3 class ) ) INIT = METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_3 class ) ) VAR VAR (  TYPE_3 . METHOD_7 ( user , VAR_2 ) )  TYPE_3 . METHOD_7 ( user , VAR_2 ) (  METHOD_8 ( STRING_2 , admin , user ) )  METHOD_8 ( STRING_2 , admin , user ) (  r . METHOD_9 ( ) )  r . METHOD_9 ( ) (  org.junit.Assert.assertEquals ( VAR_4 , METHOD_10 ( STRING_1 ) ) )  org.junit.Assert.assertEquals ( VAR_4 , METHOD_10 ( STRING_1 ) ) (  METHOD_8 ( STRING_2 , admin ) )  METHOD_8 ( STRING_2 , admin ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) )  VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) (  id = TYPE_2 . METHOD_2 ( VAR_4 ) )  id = TYPE_2 . METHOD_2 ( VAR_4 ) (  TYPE_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( ( STRING_1 + ( VAR_4 ) ) ) )  TYPE_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( ( STRING_1 + ( VAR_4 ) ) ) (  change = new com.google.gerrit.reviewdb.client.Change ( null , id , null , null , TYPE_4 . METHOD_6 ( ) ) )  change = new com.google.gerrit.reviewdb.client.Change ( null , id , null , null , TYPE_4 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ( INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ) INIT = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ) VAR VAR (  VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) )  VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN (  return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; )  return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = new TYPE_3 ( null ) ) INIT = new TYPE_3 ( null ) ) VAR VAR (  r . METHOD_4 ( true ) )  r . METHOD_4 ( true ) (  return r ; )  return r ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( new TYPE_1 . NameKey ( STRING_1 ) ) ) INIT = VAR_2 . get ( new TYPE_1 . NameKey ( STRING_1 ) ) ) VAR VAR (  METHOD_1 ( ( STRING_2 + ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) , VAR_1 ) )  METHOD_1 ( ( STRING_2 + ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) , VAR_1 ) (  METHOD_1 ( ( STRING_2 + ( VAR_1 . getName ( ) ) ) , VAR_1 ) )  METHOD_1 ( ( STRING_2 + ( VAR_1 . getName ( ) ) ) , VAR_1 ) (  METHOD_1 ( ( STRING_2 + ( VAR_1 . getId ( ) . get ( ) ) ) , VAR_1 ) )  METHOD_1 ( ( STRING_2 + ( VAR_1 . getId ( ) . get ( ) ) ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME index ) NAME index ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id,TYPE_2> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id,TYPE_2> ( NAME i ) NAME i ( IN METHOD_1 ( ) ) IN METHOD_1 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) ( VAR VAR ( TYPE TYPE_3<TYPE_2> ) TYPE TYPE_3<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . get ( id ) ) INIT = VAR_1 . get ( id ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  i . METHOD_4 ( VAR_2 . get ( ) ) )  i . METHOD_4 ( VAR_2 . get ( ) ) ) THEN THEN ( ELSE ELSE (  i . delete ( id ) )  i . delete ( id ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_5 ( id . get ( ) ) )  METHOD_5 ( id . get ( ) ) (  TYPE_4 . METHOD_6 ( id ) )  TYPE_4 . METHOD_6 ( id ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME view ) NAME view ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME values ) NAME values ( INIT = view . METHOD_2 ( ) . get ( name ) ) INIT = view . METHOD_2 ( ) . get ( name ) ) VAR VAR (  return ( ! ( values . isEmpty ( ) ) ) && ( ( values . get ( 0 ) . equals ( STRING_1 ) ) || ( values . get ( 0 ) . equals ( STRING_2 ) ) ) ; )  return ( ! ( values . isEmpty ( ) ) ) && ( ( values . get ( 0 ) . equals ( STRING_1 ) ) || ( values . get ( 0 ) . equals ( STRING_2 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( IN new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ) IN new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( s ) )  VAR_1 . METHOD_3 ( s ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 ) )  TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 ) (  TYPE_2 . METHOD_5 ( STRING_9 , STRING_10 ) )  TYPE_2 . METHOD_5 ( STRING_9 , STRING_10 ) (  TYPE_2 . METHOD_5 ( STRING_11 , STRING_12 ) )  TYPE_2 . METHOD_5 ( STRING_11 , STRING_12 ) (  TYPE_2 . METHOD_5 ( STRING_13 , STRING_10 ) )  TYPE_2 . METHOD_5 ( STRING_13 , STRING_10 ) (  TYPE_2 . METHOD_5 ( STRING_14 , STRING_12 ) )  TYPE_2 . METHOD_5 ( STRING_14 , STRING_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 . append ( CHAR_1 ) )  VAR_1 . append ( CHAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_3 = false )  VAR_3 = false ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( CHAR_2 ) )  VAR_1 . append ( CHAR_2 ) ) ELSE ELSE ) IF IF (  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) )  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . append ( CHAR_3 ) )  VAR_1 . append ( CHAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( VAR_6 ) )  VAR_1 . append ( VAR_6 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.junit.Assert . METHOD_2 ( ( ( VAR_2 . get ( ) ) == ( VAR_3 ) ) ) )  org.junit.Assert . METHOD_2 ( ( ( VAR_2 . get ( ) ) == ( VAR_3 ) ) ) (  org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . name ) )  org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . name ) (  org.junit.Assert.assertEquals ( a . email , VAR_1 . email ) )  org.junit.Assert.assertEquals ( a . email , VAR_1 . email ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return METHOD_2 ( revision . METHOD_3 ( STRING_1 , METHOD_4 ( projectName ) ) . METHOD_3 ( STRING_2 , METHOD_4 ( revision ) ) . METHOD_3 ( STRING_3 , METHOD_4 ( VAR_1 ) ) . toString ( ) ) ; )  return METHOD_2 ( revision . METHOD_3 ( STRING_1 , METHOD_4 ( projectName ) ) . METHOD_3 ( STRING_2 , METHOD_4 ( revision ) ) . METHOD_3 ( STRING_3 , METHOD_4 ( VAR_1 ) ) . toString ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( ( STRING_2 + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( ( STRING_2 + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . get ( VAR_1 ) ) == null ) COND ( VAR_2 . get ( VAR_1 ) ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 ) )  VAR_4 . METHOD_2 ( VAR_3 ) (  VAR_2 . put ( VAR_1 , VAR_3 . METHOD_1 ( ) ) )  VAR_2 . put ( VAR_1 , VAR_3 . METHOD_1 ( ) ) ) THEN THEN ) IF IF (  return VAR_2 . get ( VAR_1 ) ; )  return VAR_2 . get ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  display ( result ) )  display ( result ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; display ( result ) ; } } ) )  TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; display ( result ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) )  VAR_3 . METHOD_4 ( METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_4 . put ( VAR_1 . METHOD_7 ( ) , VAR_1 ) )  VAR_4 . put ( VAR_1 . METHOD_7 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( db ) != null ) COND ( db ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ps ) NAME ps ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ps != null ) COND ps != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME w ) NAME w ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND w . METHOD_4 ( ) ) COND w . METHOD_4 ( ) ( THEN THEN (  add ( VAR_1 , w . getAccountId ( ) ) )  add ( VAR_1 , w . getAccountId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3.OrmException ) TYPE TYPE_3.OrmException ( NAME err ) NAME err ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) )  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 , VAR_7 , VAR_4 ) . to ( VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_9 ( VAR_3 ) )  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 , VAR_7 , VAR_4 ) . to ( VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_9 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  TYPE_4 . p ( r , project ) )  TYPE_4 . p ( r , project ) (  TYPE_4 . METHOD_2 ( r , ps ) )  TYPE_4 . METHOD_2 ( r , ps ) (  return ( VAR_1 ) + r ; )  return ( VAR_1 ) + r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) )  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_10 ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) )  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_10 ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_3 = VAR_4 . FALSE )  VAR_3 = VAR_4 . FALSE ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = VAR_5 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ) INIT = VAR_5 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_6 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_6 , r . METHOD_2 ( ) ) (  r . METHOD_3 ( ) )  r . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , admin , VAR_3 ) )  METHOD_3 ( VAR_1 . changeId , admin , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_5 ( VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_5 ( VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Factory ) TYPE TYPE_4.Factory ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_6> ) TYPE TYPE_5<TYPE_6> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = new TYPE_1 ( cfg , null , VAR_1 , VAR_2 , VAR_3 , null , null , null ) ) INIT = new TYPE_1 ( cfg , null , VAR_1 , VAR_2 , VAR_3 , null , null , null ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_9 ) TYPE TYPE_9 ( NAME view ) NAME view ( IN TYPE_10 . values ( ) ) IN TYPE_10 . values ( ) ( BLOCK BLOCK (  s . METHOD_2 ( view , VAR_4 ) )  s . METHOD_2 ( view , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return s ; )  return s ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) (  org.junit.Assert.assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) (  org.junit.Assert.assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) )  org.junit.Assert.assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.line ) TYPE TYPE_3.line ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR (  VAR_4 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) )  VAR_4 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( 0 , ( ( VAR_2 . METHOD_3 ( STRING_1 ) ) - 1 ) ) ) INIT = VAR_2 . METHOD_2 ( 0 , ( ( VAR_2 . METHOD_3 ( STRING_1 ) ) - 1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) INIT = VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  METHOD_4 ( VAR_4 , VAR_1 , VAR_3 ) )  METHOD_4 ( VAR_4 , VAR_1 , VAR_3 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = VAR_1 . get ( i ) . METHOD_2 ( ) ) INIT = VAR_1 . get ( i ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME e ) NAME e ( INIT = VAR_1 . get ( ( i - 1 ) ) . METHOD_3 ( ) ) INIT = VAR_1 . get ( ( i - 1 ) ) . METHOD_3 ( ) ) VAR VAR (  return ( s - e ) <= ( 2 * ( VAR_2 ) ) ; )  return ( s - e ) <= ( 2 * ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . get ( VAR_3 . get ( ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getParentKey ( ) , ( ( VAR_1 . get ( ) ) - 1 ) ) ) ; )  return VAR_2 . get ( VAR_3 . get ( ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getParentKey ( ) , ( ( VAR_1 . get ( ) ) - 1 ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e . getMessage ( ) ) ; )  throw new TYPE_2 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_4 , VAR_2 . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( VAR_4 , VAR_2 . METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = db . patchSets ( ) . get ( psId ) ) INIT = db . patchSets ( ) . get ( psId ) ) VAR VAR ( IF IF ( COND ps == null ) COND ps == null ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ps . getRevision ( ) . get ( ) ) ; )  return org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ps . getRevision ( ) . get ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . error ( ( ( STRING_1 + psId ) + STRING_2 ) ) )  VAR_1 . error ( ( ( STRING_1 + psId ) + STRING_2 ) ) (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME branch ) NAME branch ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( topic != null ) && ( ! ( topic . isEmpty ( ) ) ) ) COND ( topic != null ) && ( ! ( topic . isEmpty ( ) ) ) ( THEN THEN (  return ( ( branch + STRING_1 ) + topic ) + STRING_2 ; )  return ( ( branch + STRING_1 ) + topic ) + STRING_2 ; ) THEN THEN ( ELSE ELSE (  return branch ; )  return branch ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1,byte[]> ) TYPE java.util.Map<TYPE_1,byte[]> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 , null ) )  VAR_2 . put ( VAR_3 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_4 . METHOD_1 ( repo , message , VAR_2 ) ; )  return TYPE_4 . METHOD_1 ( repo , message , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_2 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) )  assertThat ( VAR_4 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_2 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) COND VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( db ) )  METHOD_3 ( db ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( db ) )  METHOD_3 ( db ) ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) ELSE ELSE ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_3 . update ( 1 ) )  VAR_3 . update ( 1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  value = VAR_1 )  value = VAR_1 (  VAR_2 . METHOD_2 ( ( ( STRING_1 + ( 2 * VAR_1 ) ) + STRING_2 ) ) )  VAR_2 . METHOD_2 ( ( ( STRING_1 + ( 2 * VAR_1 ) ) + STRING_2 ) ) (  msg . METHOD_3 ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_3 ) ) )  msg . METHOD_3 ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = TYPE_2 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ) INIT = TYPE_2 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME u ) NAME u ( INIT = METHOD_2 ( c , VAR_1 ) ) INIT = METHOD_2 ( c , VAR_1 ) ) VAR VAR (  u . METHOD_3 ( c . METHOD_4 ( ) ) )  u . METHOD_3 ( c . METHOD_4 ( ) ) (  u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) )  u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) (  u . commit ( ) )  u . commit ( ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR (  return ( ( ( ( TYPE_3 . equals ( name , r . name ) ) && ( TYPE_3 . equals ( id , r . id ) ) ) && ( TYPE_3 . equals ( type , r . type ) ) ) && ( TYPE_3 . equals ( VAR_2 , VAR_3 ) ) ) && ( TYPE_3 . equals ( VAR_4 , VAR_5 ) ) ; )  return ( ( ( ( TYPE_3 . equals ( name , r . name ) ) && ( TYPE_3 . equals ( id , r . id ) ) ) && ( TYPE_3 . equals ( type , r . type ) ) ) && ( TYPE_3 . equals ( VAR_2 , VAR_3 ) ) ) && ( TYPE_3 . equals ( VAR_4 , VAR_5 ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( repo , VAR_2 ) ) INIT = METHOD_3 ( repo , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_3 ) NAME VAR_3 ( INIT = insert ( VAR_1 ) ) INIT = insert ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( repo , VAR_5 ) ) INIT = METHOD_3 ( repo , VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_6 ) NAME VAR_6 ( INIT = insert ( VAR_4 ) ) INIT = insert ( VAR_4 ) ) VAR VAR (  METHOD_4 ( STRING_2 , VAR_3 ) )  METHOD_4 ( STRING_2 , VAR_3 ) (  METHOD_4 ( STRING_3 , VAR_3 ) )  METHOD_4 ( STRING_3 , VAR_3 ) (  METHOD_4 ( STRING_4 , VAR_3 ) )  METHOD_4 ( STRING_4 , VAR_3 ) (  METHOD_4 ( STRING_5 , VAR_6 ) )  METHOD_4 ( STRING_5 , VAR_6 ) (  METHOD_4 ( STRING_6 , VAR_6 ) )  METHOD_4 ( STRING_6 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 . METHOD_4 ( event ) ) && ( ( VAR_3 ) > 0 ) ) COND ( VAR_2 . METHOD_4 ( event ) ) && ( ( VAR_3 ) > 0 ) ( THEN THEN (  TYPE_2 . METHOD_5 ( STRING_1 , VAR_3 ) )  TYPE_2 . METHOD_5 ( STRING_1 , VAR_3 ) (  VAR_3 = 0 )  VAR_3 = 0 ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( VAR_3 ) % INT_1 ) == 0 ) COND ( ( VAR_3 ) % INT_1 ) == 0 ( THEN THEN (  TYPE_2 . error ( STRING_2 , VAR_3 ) )  TYPE_2 . error ( STRING_2 , VAR_3 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) )  TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME e ) NAME e ( INIT = VAR_1 . METHOD_4 ( CHAR_1 ) ) INIT = VAR_1 . METHOD_4 ( CHAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) )  TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) (  return new TYPE_1 ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; )  return new TYPE_1 ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( STRING_1 ) )  VAR_1 = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( STRING_1 ) (  name = new TYPE_1 . NameKey ( STRING_2 ) )  name = new TYPE_1 . NameKey ( STRING_2 ) (  VAR_2 = METHOD_3 ( ) )  VAR_2 = METHOD_3 ( ) (  VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 . Repository class ) )  VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 . Repository class ) (  VAR_5 = TYPE_2 . METHOD_4 ( VAR_6 class ) )  VAR_5 = TYPE_2 . METHOD_4 ( VAR_6 class ) (  VAR_7 = TYPE_2 . METHOD_4 ( VAR_8 . Factory class ) )  VAR_7 = TYPE_2 . METHOD_4 ( VAR_8 . Factory class ) (  VAR_9 = TYPE_2 . METHOD_4 ( VAR_10 class ) )  VAR_9 = TYPE_2 . METHOD_4 ( VAR_10 class ) (  VAR_11 = new java.util.ArrayList < TYPE_3 > ( ) )  VAR_11 = new java.util.ArrayList < TYPE_3 > ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( req . METHOD_2 ( ) ) ) INIT = VAR_2 . get ( req . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  rsp . METHOD_3 ( VAR_3 ) )  rsp . METHOD_3 ( VAR_3 ) (  return ; )  return ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME VAR_1 . METHOD_4 ( ) ) NAME VAR_1 . METHOD_4 ( ) ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_5 ( VAR_1 , req , rsp ) )  METHOD_5 ( VAR_1 , req , rsp ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  METHOD_6 ( VAR_1 , req , rsp ) )  METHOD_6 ( VAR_1 , req , rsp ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  rsp . METHOD_3 ( VAR_3 ) )  rsp . METHOD_3 ( VAR_3 ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . revision ( r . METHOD_3 ( ) . name ( ) ) . METHOD_1 ( ) )  VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . revision ( r . METHOD_3 ( ) . name ( ) ) . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME error ) NAME error ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) . getName ( ) , error ) ) )  VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) . getName ( ) , error ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_4 ( ) . getName ( ) , error . getMessage ( ) ) )  VAR_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_4 ( ) . getName ( ) , error . getMessage ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) COND ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN ( IF IF ( COND ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( VAR_2 . METHOD_5 ( ) ) ) ) COND ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( VAR_2 . METHOD_5 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return ( METHOD_6 ( VAR_3 ) ) && ( METHOD_7 ( ) ) ; )  return ( METHOD_6 ( VAR_3 ) ) && ( METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( TYPE_3 . of ( TYPE_4 . METHOD_3 ( STRING_3 ) ) , VAR_3 ) ) INIT = new TYPE_2 ( TYPE_3 . of ( TYPE_4 . METHOD_3 ( STRING_3 ) ) , VAR_3 ) ) VAR VAR (  org.junit.Assert.assertEquals ( STRING_4 , VAR_2 . format ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( STRING_4 , VAR_2 . format ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( VAR_2 ) ) INIT = VAR_1 . create ( VAR_2 ) ) VAR VAR (  cm . METHOD_1 ( VAR_3 . getAccountId ( ) ) )  cm . METHOD_1 ( VAR_3 . getAccountId ( ) ) (  cm . METHOD_2 ( VAR_4 , result . info ) )  cm . METHOD_2 ( VAR_4 , result . info ) (  cm . METHOD_3 ( ) )  cm . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . getId ( ) ) INIT = VAR_4 . getId ( ) ) VAR VAR (  VAR_6 . error ( ( STRING_1 + VAR_5 ) , e ) )  VAR_6 . error ( ( STRING_1 + VAR_5 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( this ) ) COND ( VAR_2 ) != ( this ) ( THEN THEN (  return VAR_2 . METHOD_1 ( VAR_1 ) ; )  return VAR_2 . METHOD_1 ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( this . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ) INIT = ( this . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_5 != 0 ) COND VAR_5 != 0 ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 class , VAR_2 ) )  METHOD_2 ( VAR_1 class , VAR_2 ) (  bind ( VAR_3 class ) )  bind ( VAR_3 class ) (  bind ( VAR_4 class ) . in ( VAR_1 class ) )  bind ( VAR_4 class ) . in ( VAR_1 class ) (  bind ( VAR_5 class ) . METHOD_3 ( this ) )  bind ( VAR_5 class ) . METHOD_3 ( this ) (  bind ( VAR_6 class ) . METHOD_3 ( config . METHOD_4 ( ) ) )  bind ( VAR_6 class ) . METHOD_3 ( config . METHOD_4 ( ) ) (  install ( new TYPE_1 ( ) . METHOD_5 ( VAR_7 . Factory class ) ) )  install ( new TYPE_1 ( ) . METHOD_5 ( VAR_7 . Factory class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  rpc ( VAR_1 class ) )  rpc ( VAR_1 class ) (  rpc ( VAR_2 class ) )  rpc ( VAR_2 class ) (  rpc ( VAR_3 class ) )  rpc ( VAR_3 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_2 ( ) ) )  install ( new TYPE_2 ( ) ) (  install ( new TYPE_3 ( ) ) )  install ( new TYPE_3 ( ) ) (  install ( new TYPE_4 ( ) ) )  install ( new TYPE_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ( INIT = ( ( TYPE_2 ) ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( change , user . METHOD_5 ( ) , rsrc . METHOD_6 ( ) , message . getMessage ( ) , VAR_2 , db ) )  VAR_1 . METHOD_4 ( change , user . METHOD_5 ( ) , rsrc . METHOD_6 ( ) , message . getMessage ( ) , VAR_2 , db ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . METHOD_7 ( STRING_1 , e ) )  VAR_3 . METHOD_7 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) (  return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } . METHOD_6 ( ) ) ; )  return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ( INIT = METHOD_2 ( STRING_1 ) . getChangeId ( ) ) INIT = METHOD_2 ( STRING_1 ) . getChangeId ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( changeId ) ) INIT = METHOD_3 ( changeId ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 . METHOD_2 ( VAR_3 class ) ) == null ) INIT = ( VAR_2 . METHOD_2 ( VAR_3 class ) ) == null ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( VAR_2 . METHOD_2 ( VAR_5 class ) ) == null ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( VAR_5 class ) ) == null ) ) INIT = ( ( VAR_2 . METHOD_2 ( VAR_5 class ) ) == null ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( VAR_5 class ) ) == null ) ) VAR VAR (  METHOD_4 ( config ( VAR_2 ) , VAR_1 , VAR_4 ) )  METHOD_4 ( config ( VAR_2 ) , VAR_1 , VAR_4 ) (  base . METHOD_1 ( ) )  base . METHOD_1 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = ctx . getChange ( ) ) INIT = ctx . getChange ( ) ) VAR VAR ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  VAR_1 = VAR_2 . get ( ) )  VAR_1 = VAR_2 . get ( ) (  VAR_1 . METHOD_3 ( ctx ) )  VAR_1 . METHOD_3 ( ctx ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND c . currentPatchSetId ( ) . equals ( psId ) ) COND c . currentPatchSetId ( ) . equals ( psId ) ( THEN THEN (  c . METHOD_4 ( METHOD_5 ( ctx ) ) )  c . METHOD_4 ( METHOD_5 ( ctx ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . get ( ) ) INIT = VAR_7 . get ( ) ) VAR VAR (  return new TYPE_1 ( METHOD_1 ( VAR_1 ) , VAR_4 , VAR_2 , VAR_1 , VAR_3 , new TYPE_7 ( METHOD_1 ( VAR_1 ) , VAR_6 , VAR_1 ) , VAR_5 , VAR_6 . METHOD_2 ( ) ) ; )  return new TYPE_1 ( METHOD_1 ( VAR_1 ) , VAR_4 , VAR_2 , VAR_1 , VAR_3 , new TYPE_7 ( METHOD_1 ( VAR_1 ) , VAR_6 , VAR_1 ) , VAR_5 , VAR_6 . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME psId ) NAME psId ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Id ) TYPE TYPE_3.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Id ) TYPE TYPE_4.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.PatchSetApproval ) TYPE TYPE_1.PatchSetApproval ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 . PatchSetApproval ( new TYPE_7 . Key ( psId , VAR_1 , VAR_2 ) , ( ( short ) ( 0 ) ) ) ) INIT = new TYPE_1 . PatchSetApproval ( new TYPE_7 . Key ( psId , VAR_1 , VAR_2 ) , ( ( short ) ( 0 ) ) ) ) VAR VAR (  VAR_4 . METHOD_2 ( change ) )  VAR_4 . METHOD_2 ( change ) (  db . METHOD_3 ( ) . insert ( java.util.Collections.singleton ( VAR_4 ) , VAR_3 ) )  db . METHOD_3 ( ) . insert ( java.util.Collections.singleton ( VAR_4 ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( IF IF ( COND name . METHOD_2 ( STRING_1 ) ) COND name . METHOD_2 ( STRING_1 ) ( THEN THEN (  name = name . METHOD_3 ( 0 , name . METHOD_4 ( CHAR_1 ) ) )  name = name . METHOD_3 ( 0 , name . METHOD_4 ( CHAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = name . METHOD_4 ( CHAR_1 ) ) INIT = name . METHOD_4 ( CHAR_1 ) ) VAR VAR (  return 0 < VAR_2 ? name . METHOD_3 ( 0 , VAR_2 ) : name ; )  return 0 < VAR_2 ? name . METHOD_3 ( 0 , VAR_2 ) : name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( ) ) COND METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ( INIT = METHOD_2 ( ) . METHOD_4 ( ) . getAccountId ( ) ) INIT = METHOD_2 ( ) . METHOD_4 ( ) . getAccountId ( ) ) VAR VAR (  return id . equals ( getChange ( ) . METHOD_5 ( ) ) ; )  return id . equals ( getChange ( ) . METHOD_5 ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME in ) NAME in ( INIT = new TYPE_1 . ChangeInfo ( ) ) INIT = new TYPE_1 . ChangeInfo ( ) ) VAR VAR (  in . branch = VAR_1 )  in . branch = VAR_1 (  VAR_2 = STRING_1 )  VAR_2 = STRING_1 (  in . project = project . get ( ) )  in . project = project . get ( ) ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ( INIT = VAR_3 . changes ( ) . create ( in ) . get ( ) ) INIT = VAR_3 . changes ( ) . create ( in ) . get ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( in . project , info . project ) )  org.junit.Assert.assertEquals ( in . project , info . project ) (  org.junit.Assert.assertEquals ( in . branch , info . branch ) )  org.junit.Assert.assertEquals ( in . branch , info . branch ) (  org.junit.Assert.assertEquals ( VAR_2 , VAR_4 ) )  org.junit.Assert.assertEquals ( VAR_2 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK (  TYPE_4 . METHOD_5 ( VAR_2 , true ) )  TYPE_4 . METHOD_5 ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { } protected void METHOD_4 ( ) { TYPE_4 . METHOD_5 ( VAR_2 , true ) ; } } ) )  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { } protected void METHOD_4 ( ) { TYPE_4 . METHOD_5 ( VAR_2 , true ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME git ) NAME git ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  return VAR_4 . to ( git , STRING_1 ) ; )  return VAR_4 . to ( git , STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cm ) NAME cm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND cm . METHOD_2 ( ) . METHOD_3 ( ) ) COND cm . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN (  cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) )  cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) )  METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_2 ( ) . METHOD_3 ( ) ) { cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ; } } } ; )  return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_2 ( ) . METHOD_3 ( ) ) { cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ; } } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME msg ) NAME msg ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  msg . append ( STRING_1 ) )  msg . append ( STRING_1 ) (  msg . append ( STRING_2 ) )  msg . append ( STRING_2 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  msg . append ( STRING_3 ) )  msg . append ( STRING_3 ) ) THEN THEN ( ELSE ELSE (  msg . append ( STRING_4 ) )  msg . append ( STRING_4 ) (  msg . append ( STRING_5 ) )  msg . append ( STRING_5 ) ) ELSE ELSE ) IF IF (  msg . append ( STRING_6 ) )  msg . append ( STRING_6 ) (  return VAR_1 . METHOD_3 ( msg . toString ( ) , name ) ; )  return VAR_1 . METHOD_3 ( msg . toString ( ) , name ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return TYPE_1 . getRevision ( ) ; )  return TYPE_1 . getRevision ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_3 . METHOD_3 ( METHOD_4 ( ) ) ) INIT = VAR_3 . METHOD_3 ( METHOD_4 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ref ) NAME ref ( INIT = repo . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getRefName ( ) ) ) INIT = repo . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getRefName ( ) ) ) VAR VAR (  return ref != null ? ref . METHOD_7 ( ) : null ; )  return ref != null ? ref . METHOD_7 ( ) : null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( project , VAR_1 , 1 ) ) INIT = TYPE_1 . METHOD_2 ( project , VAR_1 , 1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME update ) NAME update ( INIT = METHOD_3 ( c , VAR_1 ) ) INIT = METHOD_3 ( c , VAR_1 ) ) VAR VAR (  update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) )  update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) (  update . commit ( ) )  update . commit ( ) (  org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) )  org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) (  METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) )  METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) INIT = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( STRING_2 , VAR_4 . METHOD_5 ( VAR_1 ) ) )  VAR_3 . METHOD_4 ( STRING_2 , VAR_4 . METHOD_5 ( VAR_1 ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  VAR_3 . close ( VAR_2 ) )  VAR_3 . close ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME p ) NAME p ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME size ) NAME size ( INIT = VAR_3 . get ( p ) . get ( ) ) INIT = VAR_3 . get ( p ) . get ( ) ) VAR VAR (  event . METHOD_3 ( size , p . get ( ) ) )  event . METHOD_3 ( size , p . get ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return event ; )  return event ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME commit ) NAME commit ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ChangeInfo> ) TYPE TYPE_1<TYPE_2.ChangeInfo> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( base ) )  VAR_2 . METHOD_2 ( base ) (  TYPE_4 . METHOD_3 ( id , commit , STRING_1 ) . METHOD_4 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( id , commit , STRING_1 ) . METHOD_4 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME values ) NAME values ( INIT = req . METHOD_3 ( STRING_1 ) ) INIT = req . METHOD_3 ( STRING_1 ) ) VAR VAR ( IF IF ( COND values != null ) COND values != null ( THEN THEN (  VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) )  VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ) THEN THEN ) IF IF (  values = req . METHOD_3 ( STRING_2 ) )  values = req . METHOD_3 ( STRING_2 ) ( IF IF ( COND values != null ) COND values != null ( THEN THEN (  VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) )  VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId[] ) TYPE org.eclipse.jgit.lib.ObjectId[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long[] ) TYPE long[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean[] ) TYPE boolean[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList ( VAR_1 . length ) ) INIT = new java.util.ArrayList ( VAR_1 . length ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_4 . add ( new TYPE_1 ( VAR_1 [ i ] . name ( ) , new TYPE_2 ( VAR_2 [ i ] ) , VAR_3 [ i ] ) ) )  VAR_4 . add ( new TYPE_1 ( VAR_1 [ i ] . name ( ) , new TYPE_2 ( VAR_2 [ i ] ) , VAR_3 [ i ] ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( INIT = TYPE_4 . METHOD_2 ( ) . get ( VAR_2 ) ) INIT = TYPE_4 . METHOD_2 ( ) . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND e == null ) COND e == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.Set<TYPE_5.Id> ) TYPE java.util.Set<TYPE_5.Id> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) VAR VAR (  return TYPE_6 . METHOD_5 ( VAR_3 , e , VAR_4 , ( ( short ) ( 1 ) ) , true ) ; )  return TYPE_6 . METHOD_5 ( VAR_3 , e , VAR_4 , ( ( short ) ( 1 ) ) , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( project , VAR_1 . getAccountId ( ) , 1 ) ) INIT = TYPE_1 . METHOD_2 ( project , VAR_1 . getAccountId ( ) , 1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME update ) NAME update ( INIT = METHOD_3 ( c , VAR_1 ) ) INIT = METHOD_3 ( c , VAR_1 ) ) VAR VAR (  update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) )  update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) (  update . commit ( ) )  update . commit ( ) (  org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) )  org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) (  METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) )  METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ) VAR VAR ( WHILE WHILE ( COND ( line = VAR_1 . METHOD_1 ( ) ) != null ) COND ( line = VAR_1 . METHOD_1 ( ) ) != null ( BLOCK BLOCK (  VAR_2 . error ( ( STRING_2 + line ) ) )  VAR_2 . error ( ( STRING_2 + line ) ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_3 , e ) )  VAR_2 . METHOD_2 ( STRING_3 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ctx ) )  METHOD_3 ( ctx ) (  ctx . METHOD_4 ( new TYPE_4 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_5 ( ) , commit , METHOD_6 ( ) . METHOD_7 ( ) , VAR_1 ) ) )  ctx . METHOD_4 ( new TYPE_4 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_5 ( ) , commit , METHOD_6 ( ) . METHOD_7 ( ) , VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME notes ) NAME notes ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return METHOD_1 ( db , VAR_1 , notes , patchSet ) ; )  return METHOD_1 ( db , VAR_1 , notes , patchSet ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . error ( STRING_1 , e ) )  VAR_2 . error ( STRING_1 , e ) (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) )  METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  input . ref = STRING_2 )  input . ref = STRING_2 (  VAR_4 . METHOD_3 ( VAR_5 class ) )  VAR_4 . METHOD_3 ( VAR_5 class ) (  VAR_4 . METHOD_4 ( STRING_3 ) )  VAR_4 . METHOD_4 ( STRING_3 ) (  METHOD_5 ( input . ref ) . create ( input ) )  METHOD_5 ( input . ref ) . create ( input ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME submit ) NAME submit ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_2 ( ) ) INIT = VAR_2 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) (  VAR_1 . submit ( ) )  VAR_1 . submit ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ) INIT = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Project> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Project> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME p ) NAME p ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( p . METHOD_3 ( ) ) )  VAR_2 . add ( p . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND user . METHOD_2 ( ) ) COND user . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ) INIT = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return user ; )  return user ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( true ) )  TYPE_2 . METHOD_4 ( true ) (  VAR_2 . METHOD_5 ( cd ) )  VAR_2 . METHOD_5 ( cd ) (  VAR_2 . METHOD_6 ( id ) )  VAR_2 . METHOD_6 ( id ) (  TYPE_2 . METHOD_7 ( ) )  TYPE_2 . METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) )  METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) (  VAR_3 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) )  VAR_3 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) (  VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) )  VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) (  VAR_5 = null )  VAR_5 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.util.List<TYPE_1>> ) RETURN java.util.Map<java.lang.String,java.util.List<TYPE_1>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.List<TYPE_1>> ) TYPE java.util.Map<java.lang.String,java.util.List<TYPE_1>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = config . METHOD_3 ( VAR_3 , true ) ) INIT = config . METHOD_3 ( VAR_3 , true ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND key . METHOD_4 ( STRING_1 ) ) COND key . METHOD_4 ( STRING_1 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = config . METHOD_5 ( VAR_3 , null , key ) ) INIT = config . METHOD_5 ( VAR_3 , null , key ) ) VAR VAR (  VAR_1 . put ( key , METHOD_6 ( VAR_4 ) ) )  VAR_1 . put ( key , METHOD_6 ( VAR_4 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) INIT = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey> ( NAME n ) NAME n ( INIT = TYPE_2 . METHOD_3 ( VAR_2 . get ( VAR_3 ) ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 . get ( VAR_3 ) ) ) VAR VAR (  n . METHOD_1 ( p . METHOD_4 ( ) ) )  n . METHOD_1 ( p . METHOD_4 ( ) ) (  VAR_2 . put ( VAR_3 , java.util.Collections . METHOD_5 ( n ) ) )  VAR_2 . put ( VAR_3 , java.util.Collections . METHOD_5 ( n ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_6 ( STRING_1 , e ) )  VAR_4 . METHOD_6 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY (  METHOD_8 ( p ) )  METHOD_8 ( p ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = db . METHOD_2 ( ) )  VAR_1 = db . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null )  revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 = null )  VAR_1 = null ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_5 ( VAR_11 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_5 ( VAR_11 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME get ) NAME get ( INIT = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  get . METHOD_3 ( VAR_2 ) )  get . METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF (  return METHOD_4 ( get ) ; )  return METHOD_4 ( get ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( repo . METHOD_2 ( ) ) , new TYPE_9 ( ) ) )  servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( repo . METHOD_2 ( ) ) , new TYPE_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  factory ( VAR_1 . Factory class ) )  factory ( VAR_1 . Factory class ) (  factory ( VAR_2 . Factory class ) )  factory ( VAR_2 . Factory class ) (  factory ( VAR_3 . Factory class ) )  factory ( VAR_3 . Factory class ) (  factory ( VAR_4 . Factory class ) )  factory ( VAR_4 . Factory class ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) (  factory ( VAR_6 . Factory class ) )  factory ( VAR_6 . Factory class ) (  factory ( VAR_7 . Factory class ) )  factory ( VAR_7 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME cfg ) NAME cfg ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . isEmpty ( ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) COND ( VAR_2 . isEmpty ( ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_2 = TYPE_3 . METHOD_2 ( d ) )  VAR_2 = TYPE_3 . METHOD_2 ( d ) ) THEN THEN ) IF IF (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( project ) ) INIT = VAR_1 . METHOD_2 ( project ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = rw . parseCommit ( id ) ) INIT = rw . parseCommit ( id ) ) VAR VAR (  rw . METHOD_3 ( c ) )  rw . METHOD_3 ( c ) (  return c ; )  return c ; ) BLOCK BLOCK ( FINALLY FINALLY ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = VAR_1 . create ( db . get ( ) , project , ps . getId ( ) . getParentKey ( ) ) ) INIT = VAR_1 . create ( db . get ( ) , project , ps . getId ( ) . getParentKey ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ctl ) NAME ctl ( INIT = cd . METHOD_2 ( ) ) INIT = cd . METHOD_2 ( ) ) VAR VAR (  return VAR_2 . METHOD_3 ( ctl , ps ) ; )  return VAR_2 . METHOD_3 ( ctl , ps ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) (  index . METHOD_3 ( VAR_1 . get ( id ) ) )  index . METHOD_3 ( VAR_1 . get ( id ) ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_4 ( ( STRING_1 + VAR_3 ) ) )  VAR_2 . METHOD_4 ( ( STRING_1 + VAR_3 ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 = VAR_2 . TRUE )  VAR_1 = VAR_2 . TRUE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_3 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ) INIT = VAR_3 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) (  r . METHOD_3 ( ) )  r . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( IF IF ( COND type == ( VAR_1 . METHOD_2 ( ) ) ) COND type == ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( ) )  TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  new TYPE_2 ( STRING_1 , type , VAR_1 ) . METHOD_1 ( ) )  new TYPE_2 ( STRING_1 , type , VAR_1 ) . METHOD_1 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( ) ) INIT = METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_3 , VAR_4 ) )  METHOD_7 ( VAR_2 , VAR_3 , VAR_4 ) (  VAR_5 . METHOD_8 ( ) )  VAR_5 . METHOD_8 ( ) (  METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) )  METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) (  assertThat ( VAR_5 ) . METHOD_9 ( STRING_1 , VAR_2 ) . METHOD_10 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_11 ( VAR_10 ) )  assertThat ( VAR_5 ) . METHOD_9 ( STRING_1 , VAR_2 ) . METHOD_10 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_11 ( VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( STRING_1 ) ) INIT = VAR_3 . get ( STRING_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( ( ( int ) ( VAR_4 ) ) ) . isEqualTo ( ( - 1 ) ) )  com.google.common.truth.Truth.assertThat ( ( ( int ) ( VAR_4 ) ) ) . isEqualTo ( ( - 1 ) ) (  com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_2 ( 1 ) )  com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_2 ( 1 ) (  com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . name ) . isEqualTo ( STRING_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . name ) . isEqualTo ( STRING_2 ) (  com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) )  METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) (  METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_2 ) ) ) )  METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_2 ) ) ) (  METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_3 ) ) ) )  METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_3 ) ) ) (  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 (  METHOD_2 ( user ) )  METHOD_2 ( user ) ( TRY TRY ( BLOCK BLOCK (  project ( ) . METHOD_3 ( input ) )  project ( ) . METHOD_3 ( input ) (  org.junit.Assert . METHOD_4 ( STRING_1 ) )  org.junit.Assert . METHOD_4 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( VAR_2 ) ) )  com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( VAR_2 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( admin ) )  METHOD_2 ( admin ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME walk ) NAME walk ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.eclipse.jgit.revwalk.RevCommit> ) TYPE java.util.List<org.eclipse.jgit.revwalk.RevCommit> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  rw . METHOD_1 ( VAR_1 ) )  rw . METHOD_1 ( VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  rw . METHOD_2 ( VAR_4 ) )  rw . METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  rw . METHOD_3 ( VAR_2 ) )  rw . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ) VAR VAR ( WHILE WHILE ( COND ( c = rw . METHOD_4 ( ) ) != null ) COND ( c = rw . METHOD_4 ( ) ) != null ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ( INIT = r . METHOD_3 ( ) ) INIT = r . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ( INIT = psId . getParentKey ( ) ) INIT = psId . getParentKey ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( psId , user . getId ( ) , TYPE_3 . METHOD_5 ( ) , STRING_1 ) ) INIT = METHOD_4 ( psId , user . getId ( ) , TYPE_3 . METHOD_5 ( ) , STRING_1 ) ) VAR VAR (  METHOD_4 ( psId , null , VAR_1 . METHOD_6 ( ) , STRING_2 ) )  METHOD_4 ( psId , null , VAR_1 . METHOD_6 ( ) , STRING_2 ) (  VAR_2 . METHOD_7 ( id ) )  VAR_2 . METHOD_7 ( id ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME account ) NAME account ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = account . METHOD_3 ( ) ) INIT = account . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = VAR_4 . METHOD_4 ( ) . getKey ( ) . get ( ) ) INIT = VAR_4 . METHOD_4 ( ) . getKey ( ) . get ( ) ) VAR VAR ( IF IF ( COND key . METHOD_5 ( TYPE_5 ) ) COND key . METHOD_5 ( TYPE_5 ) ( THEN THEN (  return new TYPE_1 ( key . METHOD_6 ( TYPE_5 . length ( ) ) ) ; )  return new TYPE_1 ( key . METHOD_6 ( TYPE_5 . length ( ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME event ) NAME event ( INIT = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( event ) )  VAR_5 . METHOD_4 ( event ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  util . METHOD_5 ( TYPE_7 . log , e ) )  util . METHOD_5 ( TYPE_7 . log , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ) RETURN TYPE_1<TYPE_2.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_2.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ) TYPE TYPE_3<TYPE_2.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . create ( ) ) INIT = TYPE_4 . create ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd . getId ( ) ) )  VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = cfg . METHOD_2 ( STRING_1 , STRING_2 , 0 ) ) INIT = cfg . METHOD_2 ( STRING_1 , STRING_2 , 0 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = p . METHOD_3 ( ) ) INIT = p . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) COND ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ( THEN THEN (  return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; )  return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; )  return TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . git ( ) . METHOD_2 ( ) ) INIT = VAR_1 . git ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_3 ) (  VAR_4 . METHOD_4 ( new TYPE_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) ) ) )  VAR_4 . METHOD_4 ( new TYPE_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) ) ) ( VAR VAR ( TYPE TYPE_6<TYPE_1> ) TYPE TYPE_6<TYPE_1> ( NAME r ) NAME r ( INIT = VAR_4 . METHOD_5 ( ) ) INIT = VAR_4 . METHOD_5 ( ) ) VAR VAR (  return TYPE_7 . METHOD_6 ( r ) ; )  return TYPE_7 . METHOD_6 ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ( VAR_1 = ( VAR_2 ) - ( ( TYPE_1 ) ( METHOD_3 ( ) ) ) ) ) )  METHOD_2 ( ( VAR_1 = ( VAR_2 ) - ( ( TYPE_1 ) ( METHOD_3 ( ) ) ) ) ) ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME info ) NAME info ( INIT = METHOD_4 ( METHOD_5 ( VAR_3 ) ) ) INIT = METHOD_4 ( METHOD_5 ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ( INIT = VAR_4 . get ( VAR_5 ) . commit . message ) INIT = VAR_4 . get ( VAR_5 ) . commit . message ) VAR VAR (  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_6 ( ) . METHOD_7 ( ) ) ) )  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = c . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = c . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = c . getId ( ) . get ( ) ) INIT = c . getId ( ) . get ( ) ) VAR VAR (  c . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 , id ) ) )  c . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 , id ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( project ) . run ( ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( project ) . run ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . error ( STRING_1 , e ) )  VAR_2 . error ( STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( p ) )  METHOD_2 ( p ) ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ( INIT = METHOD_3 ( STRING_1 ) ) INIT = METHOD_3 ( STRING_1 ) ) VAR VAR (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) (  r . METHOD_5 ( VAR_1 , null ) )  r . METHOD_5 ( VAR_1 , null ) (  r = METHOD_3 ( STRING_2 ) )  r = METHOD_3 ( STRING_2 ) (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) (  r . METHOD_5 ( VAR_1 , null ) )  r . METHOD_5 ( VAR_1 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 = VAR_2 . get ( ctx . METHOD_4 ( ) , commit , psId ) )  VAR_1 = VAR_2 . get ( ctx . METHOD_4 ( ) , commit , psId ) (  ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , METHOD_7 ( ) . METHOD_8 ( ) , VAR_3 ) ) )  ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , METHOD_7 ( ) . METHOD_8 ( ) , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Status ) TYPE TYPE_3.Status ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME event ) NAME event ( INIT = new TYPE_4 ( project , ref , TYPE_5 . METHOD_2 ( VAR_1 ) , status , VAR_2 ) ) INIT = new TYPE_4 ( project , ref , TYPE_5 . METHOD_2 ( VAR_1 ) , status , VAR_2 ) ) VAR VAR (  METHOD_3 ( project , event ) )  METHOD_3 ( project , event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( row ) )  METHOD_2 ( row ) (  METHOD_3 ( row , 0 , TYPE_1 . METHOD_4 ( ) ) )  METHOD_3 ( row , 0 , TYPE_1 . METHOD_4 ( ) ) (  METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_1 ) )  METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_1 ) (  METHOD_7 ( row , 0 , STRING_1 ) )  METHOD_7 ( row , 0 , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ( SWITCH SWITCH ( NAME VAR_3 . METHOD_4 ( ) ) NAME VAR_3 . METHOD_4 ( ) ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  throw new com.google.gwtorm.server.OrmException ( VAR_2 ) ; )  throw new com.google.gwtorm.server.OrmException ( VAR_2 ) ; ) THEN THEN ) IF IF ( IF IF ( COND isEmpty ( ) ) COND isEmpty ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( VAR_5 ) ) INIT = VAR_4 . METHOD_3 ( VAR_5 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_2 . METHOD_1 ( VAR_6 ) )  TYPE_2 . METHOD_1 ( VAR_6 ) (  TYPE_2 . METHOD_1 ( VAR_7 ) )  TYPE_2 . METHOD_1 ( VAR_7 ) ) BLOCK BLOCK ( FINALLY FINALLY (  close ( ) )  close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.server.query.change.ChangeData> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK (  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd ) )  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  bind ( VAR_1 class ) . to ( VAR_2 class ) )  bind ( VAR_1 class ) . to ( VAR_2 class ) (  bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) )  bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_6 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_6 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ( INIT = METHOD_2 ( VAR_1 ) . get ( ) ) INIT = METHOD_2 ( VAR_1 ) . get ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . project = projectName )  VAR_3 . project = projectName (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) (  VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) )  VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ) INIT = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_7 ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , new TYPE_4 ( ( ( TYPE_5 . METHOD_5 ( ) ) - ( TYPE_6 . METHOD_6 ( VAR_1 , VAR_7 ) ) ) ) ) ) )  VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , new TYPE_4 ( ( ( TYPE_5 . METHOD_5 ( ) ) - ( TYPE_6 . METHOD_6 ( VAR_1 , VAR_7 ) ) ) ) ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  METHOD_7 ( VAR_4 ) )  METHOD_7 ( VAR_4 ) (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  rsp . METHOD_2 ( STRING_1 ) )  rsp . METHOD_2 ( STRING_1 ) (  rsp . METHOD_3 ( STRING_2 ) )  rsp . METHOD_3 ( STRING_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME out ) NAME out ( INIT = rsp . METHOD_4 ( ) ) INIT = rsp . METHOD_4 ( ) ) VAR VAR (  out . METHOD_5 ( STRING_3 ) )  out . METHOD_5 ( STRING_3 ) (  out . METHOD_5 ( STRING_4 ) )  out . METHOD_5 ( STRING_4 ) (  out . METHOD_5 ( STRING_5 ) )  out . METHOD_5 ( STRING_5 ) (  out . METHOD_5 ( STRING_6 ) )  out . METHOD_5 ( STRING_6 ) (  out . METHOD_5 ( STRING_7 ) )  out . METHOD_5 ( STRING_7 ) (  out . close ( ) )  out . close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) (  METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) )  METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) (  METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) )  METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) (  METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( change , ps ) ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( change , ps ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( change ) . get ( ) , VAR_4 , VAR_5 ) )  VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( change ) . get ( ) , VAR_4 , VAR_5 ) (  org.junit.Assert . METHOD_5 ( ) )  org.junit.Assert . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( STRING_1 , e . getMessage ( ) ) )  org.junit.Assert.assertEquals ( STRING_1 , e . getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME w ) NAME w ( IN VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) IN VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ( BLOCK BLOCK (  add ( VAR_2 , w . getAccountId ( ) ) )  add ( VAR_2 , w . getAccountId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2.OrmException ) TYPE TYPE_2.OrmException ( NAME err ) NAME err ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) VAR VAR (  new TYPE_5 ( ( STRING_1 + n ) ) . METHOD_4 ( ) . data ( in ) . put ( VAR_2 ) )  new TYPE_5 ( ( STRING_1 + n ) ) . METHOD_4 ( ) . data ( in ) . put ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( ) ) INIT = repo . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ( INIT = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) INIT = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) VAR VAR (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  return id ; )  return id ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = info . METHOD_1 ( ) )  VAR_1 = info . METHOD_1 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = info . METHOD_2 ( ) ) INIT = info . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( STRING_1 . equals ( VAR_2 ) ) ) ) COND ( VAR_2 != null ) && ( ! ( STRING_1 . equals ( VAR_2 ) ) ) ( THEN THEN (  p . insert ( new TYPE_2 ( VAR_1 ) , 0 ) )  p . insert ( new TYPE_2 ( VAR_1 ) , 0 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , null ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , null ) ) VAR VAR (  return ( VAR_1 != null ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 . getProject ( ) . METHOD_5 ( ) ) ) ; )  return ( VAR_1 != null ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 . getProject ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME b ) NAME b ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  b . append ( STRING_1 ) )  b . append ( STRING_1 ) ( IF IF ( COND VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) COND VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN (  b . append ( ( ( STRING_2 + ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . get ( ) ) ) + STRING_3 ) ) )  b . append ( ( ( STRING_2 + ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . get ( ) ) ) + STRING_3 ) ) ) THEN THEN ) IF IF (  return b . toString ( ) ; )  return b . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( METHOD_2 ( ) ) )  r . append ( METHOD_2 ( ) ) (  r . append ( change . getChangeId ( ) ) )  r . append ( change . getChangeId ( ) ) (  return r . toString ( ) ; )  return r . toString ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_2 . get ( url ) ) INIT = VAR_2 . get ( url ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) (  TYPE_3 . METHOD_3 ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_4 class ) ) )  TYPE_3 . METHOD_3 ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_4 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_2 ( VAR_2 . getKey ( ) , TYPE_4 . METHOD_1 ( VAR_2 ) ) ) )  VAR_1 . add ( new TYPE_2 ( VAR_2 . getKey ( ) , TYPE_4 . METHOD_1 ( VAR_2 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_2 ( db , VAR_2 ) )  METHOD_2 ( db , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME TYPE_2 . METHOD_2 ( VAR_1 ) ) NAME TYPE_2 . METHOD_2 ( VAR_1 ) ( CASE VAR_2 ( BLOCK BLOCK (  return TYPE_3 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; )  return TYPE_3 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return TYPE_5 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; )  return TYPE_5 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_6 ( STRING_1 ) ; )  throw new TYPE_6 ( STRING_1 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME query ) NAME query ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_2 ( query ) ) INIT = TYPE_3 . METHOD_2 ( query ) ) VAR VAR ( IF IF ( COND VAR_2 > 0 ) COND VAR_2 > 0 ( THEN THEN (  VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) )  VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ) THEN THEN ) IF IF (  TYPE_3 . METHOD_4 ( VAR_5 , VAR_3 ) )  TYPE_3 . METHOD_4 ( VAR_5 , VAR_3 ) ( IF IF ( COND VAR_1 != 0 ) COND VAR_1 != 0 ( THEN THEN (  VAR_5 . METHOD_3 ( STRING_2 , VAR_1 ) )  VAR_5 . METHOD_3 ( STRING_2 , VAR_1 ) ) THEN THEN ) IF IF (  VAR_5 . get ( VAR_4 ) )  VAR_5 . get ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME git ) NAME git ( INIT = VAR_1 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ref ) NAME ref ( INIT = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) INIT = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( ref == null ) || ( ( ref . METHOD_6 ( ) ) == null ) ) COND ( ref == null ) || ( ( ref . METHOD_6 ( ) ) == null ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ! ( ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ) ; )  return ! ( ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  return true ; )  return true ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME view ) NAME view ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME res ) NAME res ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , view , res ) )  METHOD_3 ( VAR_1 , view , res ) (  METHOD_4 ( ( STRING_1 + ( res . getStatus ( ) ) ) , ( ( ( res . getStatus ( ) ) < INT_1 ) || ( ( res . getStatus ( ) ) >= INT_2 ) ) ) )  METHOD_4 ( ( STRING_1 + ( res . getStatus ( ) ) ) , ( ( ( res . getStatus ( ) ) < INT_1 ) || ( ( res . getStatus ( ) ) >= INT_2 ) ) ) (  return view . get ( ) ; )  return view . get ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . METHOD_3 ( ) ) )  METHOD_2 ( b , b . METHOD_3 ( ) ) (  METHOD_2 ( b , b . append ( STRING_1 ) ) )  METHOD_2 ( b , b . append ( STRING_1 ) ) (  METHOD_2 ( b , b . METHOD_4 ( ) ) )  METHOD_2 ( b , b . METHOD_4 ( ) ) (  assertEquals ( STRING_2 , b . METHOD_5 ( ) ) )  assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 (  VAR_3 = true )  VAR_3 = true (  VAR_4 = true )  VAR_4 = true (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  VAR_7 = VAR_8 )  VAR_7 = VAR_8 (  VAR_9 = VAR_10 )  VAR_9 = VAR_10 (  VAR_11 = null )  VAR_11 = null (  VAR_12 = VAR_13 )  VAR_12 = VAR_13 (  VAR_14 = VAR_15 )  VAR_14 = VAR_15 (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  VAR_18 = false )  VAR_18 = false (  VAR_19 = true )  VAR_19 = true (  VAR_20 = false )  VAR_20 = false (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  VAR_23 = true )  VAR_23 = true (  VAR_24 = false )  VAR_24 = false (  VAR_25 = true )  VAR_25 = true (  VAR_26 = false )  VAR_26 = false (  VAR_27 = VAR_28 )  VAR_27 = VAR_28 (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) )  VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) (  VAR_2 = TYPE_3 . METHOD_4 ( ) )  VAR_2 = TYPE_3 . METHOD_4 ( ) ( IF IF ( COND TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ) COND TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ( THEN THEN (  VAR_3 . METHOD_7 ( VAR_2 ) )  VAR_3 . METHOD_7 ( VAR_2 ) (  VAR_1 . add ( TYPE_2 . METHOD_8 ( ) , VAR_2 ) )  VAR_1 . add ( TYPE_2 . METHOD_8 ( ) , VAR_2 ) ) THEN THEN ) IF IF (  VAR_4 = TYPE_3 . METHOD_4 ( ) )  VAR_4 = TYPE_3 . METHOD_4 ( ) (  VAR_3 . METHOD_7 ( VAR_4 ) )  VAR_3 . METHOD_7 ( VAR_4 ) (  VAR_1 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) , VAR_4 ) )  VAR_1 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_3 ) ) INIT = util . user ( VAR_3 ) ) VAR VAR (  METHOD_5 ( STRING_2 , u . METHOD_6 ( ) ) )  METHOD_5 ( STRING_2 , u . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new TYPE_4 ( args . rw , VAR_2 , VAR_3 ) . METHOD_1 ( VAR_1 ) ) INIT = new TYPE_4 ( args . rw , VAR_2 , VAR_3 ) . METHOD_1 ( VAR_1 ) ) VAR VAR (  java.util.Collections . METHOD_1 ( result , VAR_4 ) )  java.util.Collections . METHOD_1 ( result , VAR_4 ) (  return result ; )  return result ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2.ReceiveCommand ) TYPE TYPE_2.ReceiveCommand ( NAME cmd ) NAME cmd ( IN VAR_1 . METHOD_4 ( ) ) IN VAR_1 . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND ( cmd . METHOD_5 ( ) ) == ( VAR_4 ) ) COND ( cmd . METHOD_5 ( ) ) == ( VAR_4 ) ( THEN THEN (  METHOD_1 ( project , cmd , util . METHOD_6 ( VAR_2 ) ) )  METHOD_1 ( project , cmd , util . METHOD_6 ( VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( change.getId ( ) ) ) INIT = TYPE_2 . METHOD_2 ( change.getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( repo , VAR_2 ) ) INIT = VAR_1 . METHOD_3 ( repo , VAR_2 ) ) VAR VAR (  VAR_1 . add ( new TYPE_3 . ReceiveCommand ( VAR_3 , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , VAR_2 ) ) )  VAR_1 . add ( new TYPE_3 . ReceiveCommand ( VAR_3 , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) . changes ( ) . METHOD_2 ( rsrc . getChange ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_3 ) ) { change . METHOD_3 ( VAR_4 ) ; TYPE_3 . METHOD_4 ( change ) ; } return change ; } } ) ) INIT = VAR_2 . get ( ) . changes ( ) . METHOD_2 ( rsrc . getChange ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_3 ) ) { change . METHOD_3 ( VAR_4 ) ; TYPE_3 . METHOD_4 ( change ) ; } return change ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( change . getStatus ( ) ) == ( VAR_3 ) ) COND ( change . getStatus ( ) ) == ( VAR_3 ) ( THEN THEN (  change . METHOD_3 ( VAR_4 ) )  change . METHOD_3 ( VAR_4 ) (  TYPE_3 . METHOD_4 ( change ) )  TYPE_3 . METHOD_4 ( change ) ) THEN THEN ) IF IF (  return change ; )  return change ; ) BLOCK BLOCK ) METHOD METHOD (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME req ) NAME req ( INIT = ( ( TYPE_5 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_5 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_6 . METHOD_2 ( req ) ) ) COND ! ( TYPE_6 . METHOD_2 ( req ) ) ( THEN THEN (  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME rsp ) NAME rsp ( INIT = new TYPE_7 ( req , ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) INIT = new TYPE_7 ( req , ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND METHOD_3 ( req , rsp ) ) COND METHOD_3 ( req , rsp ) ( THEN THEN (  VAR_3 . METHOD_1 ( req , rsp ) )  VAR_3 . METHOD_1 ( req , rsp ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 . ChangeInfo ( ) ) INIT = new TYPE_1 . ChangeInfo ( ) ) VAR VAR (  VAR_1 . project = project . get ( ) )  VAR_1 . project = project . get ( ) (  VAR_1 . branch = STRING_1 )  VAR_1 . branch = STRING_1 ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_2 . METHOD_2 ( STRING_2 , VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( STRING_2 , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) (  org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_3 ) ) )  org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , admin , VAR_2 , VAR_3 ) )  METHOD_3 ( VAR_1 , admin , VAR_2 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( admin ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_2 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( admin ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . get ( ) . changes ( ) . get ( changeId ) ) INIT = db . get ( ) . changes ( ) . get ( changeId ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; )  throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  return VAR_1 . create ( c ) ; )  return VAR_1 . create ( c ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<com.google.gerrit.reviewdb.client.Change> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.Change> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  db = VAR_1 . METHOD_2 ( ) )  db = VAR_1 . METHOD_2 ( ) (  return db . changes ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; )  return db . changes ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ( STRING_1 + ( e . getMessage ( ) ) ) ) )  VAR_2 . METHOD_5 ( ( STRING_1 + ( e . getMessage ( ) ) ) ) (  return java.util.Collections . METHOD_6 ( ) ; )  return java.util.Collections . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( IF IF ( COND db != null ) COND db != null ( THEN THEN (  db . close ( ) )  db . close ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( change.getId ( ) ) ) INIT = VAR_1 . create ( change.getId ( ) ) ) VAR VAR (  cm . METHOD_1 ( change . METHOD_2 ( ) ) )  cm . METHOD_1 ( change . METHOD_2 ( ) ) (  cm . METHOD_3 ( patchSet , VAR_2 ) )  cm . METHOD_3 ( patchSet , VAR_2 ) (  cm . METHOD_4 ( VAR_3 ) )  cm . METHOD_4 ( VAR_3 ) (  cm . METHOD_5 ( reviewers ) )  cm . METHOD_5 ( reviewers ) (  cm . METHOD_6 ( VAR_4 ) )  cm . METHOD_6 ( VAR_4 ) (  cm . METHOD_7 ( ) )  cm . METHOD_7 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) )  VAR_5 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) (  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_2 , VAR_2 ) )  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_2 , VAR_2 ) (  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_3 , VAR_3 ) )  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_3 , VAR_3 ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<?> ) RETURN java.util.List<?> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new TYPE_2 ( TYPE_2 . METHOD_5 ( ) ) , rw , VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new TYPE_2 ( TYPE_2 . METHOD_5 ( ) ) , rw , VAR_1 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  rw . METHOD_6 ( ) )  rw . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( format ) == ( VAR_2 ) ) COND ( format ) == ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_6 ( ) ) INIT = new TYPE_6 ( ) ) VAR VAR (  display ( VAR_3 ) )  display ( VAR_3 ) (  return TYPE_7 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) ; )  return TYPE_7 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) ; ) THEN THEN ) IF IF (  format = VAR_4 )  format = VAR_4 (  return display ( null ) ; )  return display ( null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Change> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Change> ( NAME changes ) NAME changes ( INIT = METHOD_2 ( id . METHOD_3 ( ) ) ) INIT = METHOD_2 ( id . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( changes . size ( ) ) != 1 ) COND ( changes . size ( ) ) != 1 ( THEN THEN (  throw new TYPE_4 ( id ) ; )  throw new TYPE_4 ( id ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_3 . METHOD_4 ( changes . get ( 0 ) ) )  VAR_2 = VAR_3 . METHOD_4 ( changes . get ( 0 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( id ) ; )  throw new TYPE_4 ( id ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ( ( reviewers . size ( ) ) + ( VAR_2 . size ( ) ) ) ) ) INIT = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ( ( reviewers . size ( ) ) + ( VAR_2 . size ( ) ) ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( reviewers ) )  VAR_1 . METHOD_2 ( reviewers ) (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  return java.util.Collections . METHOD_3 ( VAR_1 ) ; )  return java.util.Collections . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( project , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( project , VAR_1 ) ) VAR VAR (  db . changes ( ) . insert ( java.util.Collections.singleton ( c ) ) )  db . changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = VAR_2 . create ( VAR_3 . METHOD_3 ( c , VAR_4 . create ( VAR_1 ) ) ) ) INIT = VAR_2 . create ( VAR_3 . METHOD_3 ( c , VAR_4 . create ( VAR_1 ) ) ) ) VAR VAR (  u . METHOD_4 ( c . METHOD_5 ( ) ) )  u . METHOD_4 ( c . METHOD_5 ( ) ) (  u . METHOD_6 ( c . METHOD_7 ( ) . get ( ) ) )  u . METHOD_6 ( c . METHOD_7 ( ) . get ( ) ) (  u . commit ( ) )  u . commit ( ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . get ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ) INIT = VAR_1 . get ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_3 class ) ) INIT = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_3 class ) ) VAR VAR (  TYPE_3 . METHOD_5 ( admin , info ) )  TYPE_3 . METHOD_5 ( admin , info ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = VAR_4 . get ( admin . getId ( ) ) . METHOD_6 ( ) ) INIT = VAR_4 . get ( admin . getId ( ) ) . METHOD_6 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_5 ) . isEqualTo ( account . METHOD_7 ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_5 ) . isEqualTo ( account . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = e . getValue ( ) ) INIT = e . getValue ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) )  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) (  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) )  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME to ) NAME to ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . add ( git , VAR_1 , VAR_2 ) )  TYPE_3 . add ( git , VAR_1 , VAR_2 ) (  changeId = TYPE_3 . METHOD_1 ( git , VAR_3 . METHOD_2 ( ) , VAR_4 ) )  changeId = TYPE_3 . METHOD_1 ( git , VAR_3 . METHOD_2 ( ) , VAR_4 ) (  return TYPE_3 . METHOD_3 ( git , ref ) ; )  return TYPE_3 . METHOD_3 ( git , ref ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  VAR_2 . info ( ( STRING_1 + VAR_1 ) ) )  VAR_2 . info ( ( STRING_1 + VAR_1 ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_4 ( VAR_1 ) ) COND TYPE_2 . METHOD_4 ( VAR_1 ) ( THEN THEN (  TYPE_2 . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) (  VAR_2 . info ( ( STRING_2 + VAR_1 ) ) )  VAR_2 . info ( ( STRING_2 + VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_6 ( java.lang.String.format ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) )  VAR_2 . METHOD_6 ( java.lang.String.format ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) (  install ( TYPE_1 . METHOD_3 ( ) ) )  install ( TYPE_1 . METHOD_3 ( ) ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) (  install ( new TYPE_2 ( ) ) )  install ( new TYPE_2 ( ) ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ) INIT = ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( IN value . METHOD_2 ( ) ) IN value . METHOD_2 ( ) ( BLOCK BLOCK (  size += e . METHOD_1 ( ) )  size += e . METHOD_1 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return size ; )  return size ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( this ) )  VAR_1 . METHOD_3 ( this ) (  VAR_2 = new TYPE_4 ( ) )  VAR_2 = new TYPE_4 ( ) (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  db = VAR_3 . METHOD_5 ( ) )  db = VAR_3 . METHOD_5 ( ) (  VAR_4 . create ( db ) )  VAR_4 . create ( db ) (  VAR_5 = VAR_6 . METHOD_6 ( TYPE_5 . METHOD_7 ( STRING_1 ) ) . getAccountId ( ) )  VAR_5 = VAR_6 . METHOD_6 ( TYPE_5 . METHOD_7 ( STRING_1 ) ) . getAccountId ( ) (  user = VAR_7 . create ( VAR_5 ) )  user = VAR_7 . create ( VAR_5 ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getRefName ( ) ) ) COND VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getRefName ( ) ) ( THEN THEN (  return METHOD_4 ( VAR_1 . commit ) ; )  return METHOD_4 ( VAR_1 . commit ) ; ) THEN THEN ( ELSE ELSE (  return java.util.Collections . METHOD_5 ( ) ; )  return java.util.Collections . METHOD_5 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR (  VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_2 , repo ) ) )  VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_2 , repo ) ) (  VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_3 , repo ) ) )  VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_3 , repo ) ) (  return TYPE_4 . METHOD_1 ( repo , STRING_1 , VAR_1 ) ; )  return TYPE_4 . METHOD_1 ( repo , STRING_1 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME display ) NAME display ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  project = result . project )  project = result . project (  VAR_1 . METHOD_1 ( project . METHOD_2 ( ) ) )  VAR_1 . METHOD_1 ( project . METHOD_2 ( ) ) (  TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) (  TYPE_2 . METHOD_3 ( VAR_4 , VAR_5 ) )  TYPE_2 . METHOD_3 ( VAR_4 , VAR_5 ) (  TYPE_2 . METHOD_3 ( VAR_6 , VAR_7 ) )  TYPE_2 . METHOD_3 ( VAR_6 , VAR_7 ) (  TYPE_2 . METHOD_3 ( VAR_8 , VAR_9 ) )  TYPE_2 . METHOD_3 ( VAR_8 , VAR_9 ) (  METHOD_4 ( project . METHOD_5 ( ) ) )  METHOD_4 ( project . METHOD_5 ( ) ) (  METHOD_6 ( project . METHOD_7 ( ) ) )  METHOD_6 ( project . METHOD_7 ( ) ) (  VAR_10 . METHOD_8 ( false ) )  VAR_10 . METHOD_8 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) COND ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR (  METHOD_6 ( VAR_2 , url , VAR_3 , false ) )  METHOD_6 ( VAR_2 , url , VAR_3 , false ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ) COND ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = METHOD_8 ( ) ) INIT = METHOD_8 ( ) ) VAR VAR (  METHOD_6 ( VAR_2 , url , VAR_3 , true ) )  METHOD_6 ( VAR_2 , url , VAR_3 , true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME err ) NAME err ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND e == null ) COND e == null ( THEN THEN (  VAR_2 . error ( err ) )  VAR_2 . error ( err ) ) THEN THEN ( ELSE ELSE (  VAR_2 . error ( err , e ) )  VAR_2 . error ( err , e ) ) ELSE ELSE ) IF IF (  return TYPE_2 . METHOD_2 ( ) ; )  return TYPE_2 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_3 ( err ) ; )  return TYPE_2 . METHOD_3 ( err ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( TYPE_3 . create ( res ) . METHOD_2 ( ) , true , VAR_2 ) ) INIT = new TYPE_1 ( TYPE_3 . create ( res ) . METHOD_2 ( ) , true , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) COND ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ( THEN THEN (  return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; )  return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; )  return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) INIT = TYPE_2 . METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( STRING_5 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_7 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( STRING_5 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_7 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  VAR_7 = VAR_1 )  VAR_7 = VAR_1 (  VAR_8 = VAR_9 . METHOD_2 ( ) )  VAR_8 = VAR_9 . METHOD_2 ( ) (  VAR_10 = ++ ( VAR_11 ) )  VAR_10 = ++ ( VAR_11 ) (  VAR_12 . METHOD_3 ( VAR_2 ) )  VAR_12 . METHOD_3 ( VAR_2 ) (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) )  VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) (  VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 ) ) )  VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) { protected void METHOD_2 ( ) { bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) . in ( VAR_5 ) ; } } ) ) INIT = TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) { protected void METHOD_2 ( ) { bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) . in ( VAR_5 ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) . in ( VAR_5 ) )  bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) . in ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_7 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 class ) ) )  TYPE_7 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 class ) ) (  VAR_1 . METHOD_5 ( VAR_6 class ) . METHOD_6 ( ) )  VAR_1 . METHOD_5 ( VAR_6 class ) . METHOD_6 ( ) (  return METHOD_7 ( ) ; )  return METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) INIT = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ( INIT = VAR_2 . create ( c ) . METHOD_2 ( ) ) INIT = VAR_2 . create ( c ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME a ) NAME a ( INIT = VAR_3 . METHOD_3 ( db , notes , VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( db , notes , VAR_1 ) ) VAR VAR (  org.junit.Assert . METHOD_4 ( a . METHOD_5 ( ) ) )  org.junit.Assert . METHOD_4 ( a . METHOD_5 ( ) ) (  org.junit.Assert.assertEquals ( 1 , a . getValue ( ) ) )  org.junit.Assert.assertEquals ( 1 , a . getValue ( ) ) (  org.junit.Assert.assertEquals ( admin . id , a . getAccountId ( ) ) )  org.junit.Assert.assertEquals ( admin . id , a . getAccountId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( name , value ) ) INIT = TYPE_2 . METHOD_2 ( name , value ) ) VAR VAR (  METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) )  METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) (  METHOD_3 ( value , VAR_1 . getValue ( ) ) )  METHOD_3 ( value , VAR_1 . getValue ( ) ) (  assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) )  assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME add ) NAME add ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME values ) NAME values ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = input . getValue ( ) . METHOD_1 ( ) ) INIT = input . getValue ( ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  input . METHOD_2 ( STRING_1 ) )  input . METHOD_2 ( STRING_1 ) (  values . add ( VAR_2 ) )  values . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  t . insert ( values ) )  t . insert ( values ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ( INIT = git . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) INIT = git . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) VAR VAR (  METHOD_5 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_5 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) (  VAR_2 . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_6 ( VAR_1 ) (  METHOD_7 ( VAR_3 , project , STRING_6 ) )  METHOD_7 ( VAR_3 , project , STRING_6 ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_5 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ) INIT = METHOD_5 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ) VAR VAR (  r . METHOD_8 ( ) )  r . METHOD_8 ( ) (  r . METHOD_9 ( VAR_4 , null , admin ) )  r . METHOD_9 ( VAR_4 , null , admin ) (  r . METHOD_10 ( TYPE_2 . getMessage ( ) ) )  r . METHOD_10 ( TYPE_2 . getMessage ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , true ) )  TYPE_1 . METHOD_2 ( VAR_1 , true ) (  TYPE_1 . METHOD_2 ( VAR_2 , false ) )  TYPE_1 . METHOD_2 ( VAR_2 , false ) (  TYPE_1 . METHOD_2 ( error , false ) )  TYPE_1 . METHOD_2 ( error , false ) (  VAR_3 . METHOD_2 ( false ) )  VAR_3 . METHOD_2 ( false ) (  VAR_4 . METHOD_3 ( true ) )  VAR_4 . METHOD_3 ( true ) (  VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_5 ) ) )  VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_5 ) ) (  VAR_4 . METHOD_6 ( ) )  VAR_4 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) COND ( VAR_1 == null ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ( ( this . VAR_3 ) != ( VAR_4 ) ) || ( ( this . VAR_5 ) != ( VAR_6 ) ) ) COND ( ( this . VAR_3 ) != ( VAR_4 ) ) || ( ( this . VAR_5 ) != ( VAR_6 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ) RETURN java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME refs ) NAME refs ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ) TYPE java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( IN refs ) IN refs ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( rw . parseCommit ( r . METHOD_3 ( ) ) ) )  VAR_1 . add ( rw . parseCommit ( r . METHOD_3 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( cd ) == null ) COND ( cd ) == null ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME VAR_1 ) NAME VAR_1 ( INIT = db ( ) ) INIT = db ( ) ) VAR VAR (  TYPE_1 . METHOD_2 ( ( VAR_1 != null ) , STRING_1 ) )  TYPE_1 . METHOD_2 ( ( VAR_1 != null ) , STRING_1 ) (  cd = VAR_2 . create ( VAR_1 , METHOD_3 ( ) ) )  cd = VAR_2 . create ( VAR_1 , METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) COND ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; )  return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) )  METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  METHOD_5 ( r , STRING_2 ) )  METHOD_5 ( r , STRING_2 ) (  METHOD_6 ( r ) . METHOD_7 ( STRING_2 ) )  METHOD_6 ( r ) . METHOD_7 ( STRING_2 ) (  METHOD_8 ( r , STRING_3 ) )  METHOD_8 ( r , STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ( INIT = name . get ( ) ) INIT = name . get ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( projectName , VAR_2 ) ) COND METHOD_2 ( projectName , VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = rw . parseCommit ( VAR_2 ) ) INIT = rw . parseCommit ( VAR_2 ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) COND ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  rw . METHOD_3 ( ) )  rw . METHOD_3 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ( ) ) == 0 ) COND ( VAR_1 . length ( ) ) == 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 . size ( ) ) == 1 ) && ( VAR_2 . contains ( VAR_3 ) ) ) COND ( ( VAR_2 . size ( ) ) == 1 ) && ( VAR_2 . contains ( VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME update ) NAME update ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  schema = VAR_1 . METHOD_1 ( ) )  schema = VAR_1 . METHOD_1 ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( VAR_2 , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) )  METHOD_3 ( VAR_2 , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( IF IF ( COND ( schema ) != null ) COND ( schema ) != null ( THEN THEN (  schema . close ( ) )  schema . close ( ) (  schema = null )  schema = null ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , new com.google.gerrit.reviewdb.client.Account.Id ( 2 ) , new TYPE_2 . NameKey ( VAR_2 , STRING_2 ) , TYPE_3 . METHOD_2 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , new com.google.gerrit.reviewdb.client.Account.Id ( 2 ) , new TYPE_2 . NameKey ( VAR_2 , STRING_2 ) , TYPE_3 . METHOD_2 ( ) ) ) VAR VAR (  VAR_1 . set ( VAR_3 , change ) )  VAR_1 . set ( VAR_3 , change ) (  VAR_1 . set ( VAR_4 , util . user ( VAR_5 ) . METHOD_3 ( change ) ) )  VAR_1 . set ( VAR_4 , util . user ( VAR_5 ) . METHOD_3 ( change ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME display ) NAME display ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND 1 < ( table . METHOD_1 ( ) ) ) COND 1 < ( table . METHOD_1 ( ) ) ( BLOCK BLOCK (  table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) )  table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ) BLOCK BLOCK ) WHILE WHILE ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN result ) IN result ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ( INIT = table . METHOD_1 ( ) ) INIT = table . METHOD_1 ( ) ) VAR VAR (  table . METHOD_3 ( row ) )  table . METHOD_3 ( row ) (  METHOD_4 ( row ) )  METHOD_4 ( row ) (  METHOD_5 ( row , VAR_1 ) )  METHOD_5 ( row , VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME label ) NAME label ( IN METHOD_3 ( ) . METHOD_3 ( ) ) IN METHOD_3 ( ) . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . add ( label . getName ( ) ) )  VAR_1 . add ( label . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) )  assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ( INIT = METHOD_3 ( in ) ) INIT = METHOD_3 ( in ) ) VAR VAR (  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) (  assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) ) , out . METHOD_8 ( ) ) )  assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) ) , out . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 = c . getId ( ) . toString ( ) )  VAR_1 = c . getId ( ) . toString ( ) (  d . id = c . getKey ( ) . toString ( ) )  d . id = c . getKey ( ) . toString ( ) (  d . revision = ps . getRevision ( ) . get ( ) )  d . revision = ps . getRevision ( ) . get ( ) (  d . ref = ps . getRefName ( ) )  d . ref = ps . getRefName ( ) (  return d ; )  return d ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME b ) NAME b ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  TYPE_4 . METHOD_3 ( ) . METHOD_4 ( b , VAR_1 ) )  TYPE_4 . METHOD_3 ( ) . METHOD_4 ( b , VAR_1 ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME key ) NAME key ( INIT = b . METHOD_5 ( ) ) INIT = b . METHOD_5 ( ) ) VAR VAR (  return TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_6 ( VAR_2 , key ) ) . METHOD_5 ( ) ; )  return TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_6 ( VAR_2 , key ) ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME revision ) NAME revision ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( TYPE_2 . METHOD_3 ( revision , VAR_2 ) ) ) INIT = repo . METHOD_2 ( TYPE_2 . METHOD_3 ( revision , VAR_2 ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.PatchSetApproval ) RETURN com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) INIT = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ( INIT = VAR_2 . create ( c ) . METHOD_2 ( ) ) INIT = VAR_2 . create ( c ) . METHOD_2 ( ) ) VAR VAR (  return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; )  return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) (  METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) )  METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) )  METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = util . user ( VAR_1 , VAR_5 ) ) INIT = util . user ( VAR_1 , VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = util . user ( VAR_1 , VAR_5 , VAR_3 ) ) INIT = util . user ( VAR_1 , VAR_5 , VAR_3 ) ) VAR VAR (  METHOD_3 ( STRING_2 , VAR_4 . METHOD_4 ( ) ) )  METHOD_3 ( STRING_2 , VAR_4 . METHOD_4 ( ) ) (  METHOD_5 ( STRING_3 , VAR_6 . METHOD_4 ( ) ) )  METHOD_5 ( STRING_3 , VAR_6 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_1.ChangeInfo> ) TYPE java.util.List<TYPE_1.ChangeInfo> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . changes ( ) . query ( STRING_1 ) . get ( ) ) INIT = VAR_2 . changes ( ) . query ( STRING_1 ) . get ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) )  org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) (  VAR_1 = VAR_2 . changes ( ) . query ( STRING_2 ) . get ( ) )  VAR_1 = VAR_2 . changes ( ) . query ( STRING_2 ) . get ( ) (  org.junit.Assert . METHOD_3 ( VAR_1 . isEmpty ( ) ) )  org.junit.Assert . METHOD_3 ( VAR_1 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME update ) NAME update ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  ps . METHOD_1 ( VAR_1 ) )  ps . METHOD_1 ( VAR_1 ) (  update . METHOD_1 ( VAR_1 ) )  update . METHOD_1 ( VAR_1 ) (  db . patchSets ( ) . update ( java.util.Collections.singleton ( ps ) ) )  db . patchSets ( ) . update ( java.util.Collections.singleton ( ps ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ( INIT = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( cd . METHOD_3 ( ) . getRevision ( ) . get ( ) ) ) INIT = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( cd . METHOD_3 ( ) . getRevision ( ) . get ( ) ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_4 ( cd . change ( ) . getProject ( ) ) ) INIT = VAR_1 . METHOD_4 ( cd . change ( ) . getProject ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = TYPE_1 . METHOD_5 ( repo ) ) INIT = TYPE_1 . METHOD_5 ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = rw . parseCommit ( id ) ) INIT = rw . parseCommit ( id ) ) VAR VAR (  return ( commit . METHOD_6 ( ) ) > 1 ; )  return ( commit . METHOD_6 ( ) ) > 1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( name ) ) INIT = VAR_2 . get ( name ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw TYPE_5 . error ( ( ( ( STRING_1 + name ) + STRING_2 ) + value ) ) ; )  throw TYPE_5 . error ( ( ( ( STRING_1 + name ) + STRING_2 ) + value ) ) ; ) THEN THEN ) IF IF (  return VAR_1 . create ( this , value ) ; )  return VAR_1 . create ( this , value ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( db , TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ) INIT = VAR_2 . create ( db , TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ) INIT = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 . METHOD_2 ( commit . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_2 ( commit . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_7 ( ) ) INIT = TYPE_1 . METHOD_7 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( VAR_3 . METHOD_8 ( STRING_1 ) ) ) COND ( VAR_3 != null ) && ( VAR_3 . METHOD_8 ( STRING_1 ) ) ( THEN THEN (  METHOD_9 ( VAR_3 . METHOD_10 ( INT_1 ) ) )  METHOD_9 ( VAR_3 . METHOD_10 ( INT_1 ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  METHOD_11 ( ) )  METHOD_11 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; )  return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) VAR VAR (  VAR_1 . error ( msg , e ) )  VAR_1 . error ( msg , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME currentPatchSetId ) NAME currentPatchSetId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ) INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ) VAR VAR (  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) )  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( server , user ) )  VAR_1 = new TYPE_1 ( server , user ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( server , user ) ) INIT = new TYPE_2 ( server , user ) ) VAR VAR (  TYPE_3 . METHOD_2 ( user ) )  TYPE_3 . METHOD_2 ( user ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  METHOD_4 ( TYPE_3 . METHOD_5 ( ( ( ( VAR_2 . METHOD_6 ( ) ) + STRING_1 ) + ( project . get ( ) ) ) ) ) )  METHOD_4 ( TYPE_3 . METHOD_5 ( ( ( ( VAR_2 . METHOD_6 ( ) ) + STRING_1 ) + ( project . get ( ) ) ) ) ) (  VAR_2 . close ( ) )  VAR_2 . close ( ) (  VAR_3 = VAR_4 . METHOD_7 ( ) )  VAR_3 = VAR_4 . METHOD_7 ( ) (  VAR_5 = new TYPE_1 ( server , VAR_3 ) )  VAR_5 = new TYPE_1 ( server , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  res . METHOD_2 ( VAR_1 ) )  res . METHOD_2 ( VAR_1 ) (  METHOD_3 ( req , res , VAR_2 ) )  METHOD_3 ( req , res , VAR_2 ) (  METHOD_4 ( req , res ) )  METHOD_4 ( req , res ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME out ) NAME out ( INIT = res . METHOD_5 ( ) ) INIT = res . METHOD_5 ( ) ) VAR VAR (  out . METHOD_6 ( message ) )  out . METHOD_6 ( message ) (  out . close ( ) )  out . close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) )  p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) (  p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) )  p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) (  db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) )  db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) (  VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) )  VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( ) . apply ( account ) ; )  return VAR_1 . METHOD_2 ( ) . apply ( account ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|TYPE_5|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|TYPE_5|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( p . METHOD_3 ( ) , p . getKey ( ) , 0 , null ) ) INIT = new TYPE_3 ( p . METHOD_3 ( ) , p . getKey ( ) , 0 , null ) ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . toString ( ) , p . METHOD_3 ( ) , null ) )  TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . toString ( ) , p . METHOD_3 ( ) , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( repo . METHOD_2 ( ) ) , new TYPE_8 ( ) ) )  servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( repo . METHOD_2 ( ) ) , new TYPE_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ) INIT = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) (  r . METHOD_6 ( ) )  r . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ( INIT = METHOD_2 ( name ( STRING_1 ) ) . getChangeId ( ) ) INIT = METHOD_2 ( name ( STRING_1 ) ) . getChangeId ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( changeId ) ) INIT = METHOD_3 ( changeId ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ( INIT = METHOD_2 ( VAR_1 , STRING_1 ) ) INIT = METHOD_2 ( VAR_1 , STRING_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 class ) )  VAR_2 . METHOD_3 ( VAR_3 class ) (  VAR_2 . METHOD_4 ( STRING_2 ) )  VAR_2 . METHOD_4 ( STRING_2 ) (  VAR_4 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( info . id ) . get ( true ) )  VAR_4 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( info . id ) . get ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; )  throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( change ) != null ) COND ( change ) != null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_3 ( change , user ) )  VAR_1 = VAR_2 . METHOD_3 ( change , user ) ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 . METHOD_3 ( VAR_3 , user ) )  VAR_1 = VAR_2 . METHOD_3 ( VAR_3 , user ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_6 = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) )  this . VAR_6 = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 (  this . VAR_5 = VAR_5 )  this . VAR_5 = VAR_5 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( row , VAR_1 ) )  super . METHOD_1 ( row , VAR_1 ) ( IF IF ( COND ( ! ( VAR_2 ) ) || ( STRING_1 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) COND ( ! ( VAR_2 ) ) || ( STRING_1 . equals ( VAR_3 . METHOD_2 ( ) ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( METHOD_4 ( row ) . getName ( ) ) )  VAR_3 . METHOD_3 ( METHOD_4 ( row ) . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) COND getChange ( ) . getStatus ( ) . METHOD_2 ( ) ( THEN THEN (  return ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; )  return ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = walk . METHOD_2 ( ) )  this . VAR_1 = walk . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null )  revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 = null )  VAR_1 = null ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME u ) NAME u ( INIT = repo . METHOD_3 ( VAR_3 ) ) INIT = repo . METHOD_3 ( VAR_3 ) ) VAR VAR (  u . METHOD_4 ( VAR_2 ) )  u . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_2 ) , e ) )  VAR_4 . error ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_2 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_5 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_5 . METHOD_4 ( VAR_3 ) ) VAR VAR (  TYPE_5 . METHOD_5 ( VAR_5 , VAR_3 ) )  TYPE_5 . METHOD_5 ( VAR_5 , VAR_3 ) (  TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 ) )  TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 ) (  TYPE_5 . METHOD_7 ( VAR_5 , VAR_4 ) )  TYPE_5 . METHOD_7 ( VAR_5 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) ; )  return cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_2 ( cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) , VAR_1 ) ; )  return TYPE_1 . METHOD_2 ( cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Key ) TYPE TYPE_1.Key ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_5 = VAR_1 )  VAR_5 = VAR_1 (  VAR_6 = VAR_2 )  VAR_6 = VAR_2 (  VAR_7 = METHOD_2 ( VAR_3 , VAR_4 ) )  VAR_7 = METHOD_2 ( VAR_3 , VAR_4 ) (  VAR_8 . METHOD_3 ( ) )  VAR_8 . METHOD_3 ( ) (  VAR_9 = METHOD_4 ( ) )  VAR_9 = METHOD_4 ( ) (  VAR_8 . add ( VAR_9 ) )  VAR_8 . add ( VAR_9 ) (  VAR_8 . add ( METHOD_5 ( ) ) )  VAR_8 . add ( METHOD_5 ( ) ) (  VAR_10 . METHOD_3 ( ) )  VAR_10 . METHOD_3 ( ) (  VAR_11 = METHOD_4 ( ) )  VAR_11 = METHOD_4 ( ) (  VAR_10 . add ( VAR_11 ) )  VAR_10 . add ( VAR_11 ) (  VAR_10 . add ( METHOD_5 ( ) ) )  VAR_10 . add ( METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME account ) NAME account ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME add ) NAME add ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME delete ) NAME delete ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME in ) NAME in ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR (  in . add = add )  in . add = add (  in . delete = delete )  in . delete = delete ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . apply ( account , in ) ; )  return VAR_1 . apply ( account , in ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6|com.google.gwtorm.server.OrmException|java.io.IOException|TYPE_7 ) TYPE TYPE_6|com.google.gwtorm.server.OrmException|java.io.IOException|TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( STRING_1 ) ) INIT = repo . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = repo . METHOD_3 ( repo . file ( STRING_2 , VAR_1 ) ) ) INIT = repo . METHOD_3 ( repo . file ( STRING_2 , VAR_1 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_1 ) ) (  org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_2 ) ) )  org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<?>.VAR_1 ) RETURN TYPE_1<?>.VAR_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?>.VAR_1 ) TYPE TYPE_1<?>.VAR_1 ( NAME b ) NAME b ( INIT = VAR_3 . METHOD_5 ( STRING_1 ) ) INIT = VAR_3 . METHOD_5 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME id ) NAME id ( INIT = TYPE_3 . getChangeId ( VAR_3 , VAR_2 ) ) INIT = TYPE_3 . getChangeId ( VAR_3 , VAR_2 ) ) VAR VAR ( IF IF ( COND id . METHOD_6 ( ) ) COND id . METHOD_6 ( ) ( THEN THEN (  b . METHOD_7 ( id . get ( ) . METHOD_8 ( 1 ) ) )  b . METHOD_7 ( id . get ( ) . METHOD_8 ( 1 ) ) ) THEN THEN ( ELSE ELSE (  b . METHOD_7 ( ) )  b . METHOD_7 ( ) ) ELSE ELSE ) IF IF (  return b ; )  return b ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME values ) NAME values ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( values . length ) > 0 ) COND ( values . length ) > 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN values ) IN values ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_3 ( VAR_3 ) ) )  VAR_2 . add ( new TYPE_3 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . add ( key , VAR_2 ) )  VAR_1 . add ( key , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( ( user ) instanceof TYPE_1 ) || ( user . METHOD_2 ( group . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) || ( user . METHOD_5 ( ) . METHOD_6 ( ) ) ) || ( VAR_1 . METHOD_7 ( group . METHOD_3 ( ) ) ) ; )  return ( ( ( ( ( user ) instanceof TYPE_1 ) || ( user . METHOD_2 ( group . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) || ( user . METHOD_5 ( ) . METHOD_6 ( ) ) ) || ( VAR_1 . METHOD_7 ( group . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ) != null ) COND ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ) != null ( THEN THEN ( IF IF ( COND ( ! ( VAR_1 . METHOD_5 ( ) ) ) || ( ! ( VAR_3 . get ( ) . METHOD_6 ( ) ) ) ) COND ( ! ( VAR_1 . METHOD_5 ( ) ) ) || ( ! ( VAR_3 . get ( ) . METHOD_6 ( ) ) ) ( THEN THEN (  VAR_1 . METHOD_7 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_7 ( new TYPE_2 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME url ) NAME url ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME ps ) NAME ps ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_1 ( null , ps , info . path ( ) , ( ( info . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : VAR_3 ) , info . line ( ) ) ; )  return TYPE_2 . METHOD_1 ( null , ps , info . path ( ) , ( ( info . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : VAR_3 ) , info . line ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME update ) NAME update ( INIT = METHOD_3 ( c , VAR_1 ) ) INIT = METHOD_3 ( c , VAR_1 ) ) VAR VAR (  update . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) , VAR_2 ) )  update . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) , VAR_2 ) (  update . commit ( ) )  update . commit ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME notes ) NAME notes ( INIT = METHOD_6 ( c ) ) INIT = METHOD_6 ( c ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSet.Id,TYPE_4> ) TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSet.Id,TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = notes . METHOD_7 ( ) ) INIT = notes . METHOD_7 ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( 0 , VAR_3 . METHOD_8 ( ) . size ( ) ) )  org.junit.Assert.assertEquals ( 0 , VAR_3 . METHOD_8 ( ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = VAR_1 . getValue ( ) . METHOD_2 ( ) ) INIT = VAR_1 . getValue ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  return ( msg . length ( ) ) > 0 ; )  return ( msg . length ( ) ) > 0 ; ) THEN THEN ) IF IF (  return msg . equals ( ( ( VAR_2 . message ( ) ) != null ? VAR_2 . message ( ) . METHOD_2 ( ) : STRING_1 ) ) ; )  return msg . equals ( ( ( VAR_2 . message ( ) ) != null ? VAR_2 . message ( ) . METHOD_2 ( ) : STRING_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME result ) NAME result ( INIT = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ) INIT = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( email ) ) INIT = VAR_3 . METHOD_2 ( email ) ) VAR VAR (  result . METHOD_3 ( VAR_2 ) )  result . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ( INIT = TYPE_1 . METHOD_2 ( ps ) ) INIT = TYPE_1 . METHOD_2 ( ps ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( BLOCK BLOCK (  TYPE_3 . display ( this . token , METHOD_3 ( ) ) )  TYPE_3 . display ( this . token , METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_4 ) RETURN TYPE_4 ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return new TYPE_5 ( ps ) ; )  return new TYPE_5 ( ps ) ; ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_2 ( token ) { public void onSuccess ( ) { TYPE_3 . display ( this . token , METHOD_3 ( ) ) ; } private TYPE_4 METHOD_3 ( ) { return new TYPE_5 ( ps ) ; } } . onSuccess ( ) )  new TYPE_2 ( token ) { public void onSuccess ( ) { TYPE_3 . display ( this . token , METHOD_3 ( ) ) ; } private TYPE_4 METHOD_3 ( ) { return new TYPE_5 ( ps ) ; } } . onSuccess ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cm ) NAME cm ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_3 ) ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  install ( VAR_5 ) )  install ( VAR_5 ) (  install ( cm ) )  install ( cm ) (  install ( VAR_2 ) )  install ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_4 = new TYPE_4 ( ) { protected void METHOD_3 ( ) { install ( VAR_5 ) ; install ( cm ) ; install ( VAR_2 ) ; } } )  VAR_4 = new TYPE_4 ( ) { protected void METHOD_3 ( ) { install ( VAR_5 ) ; install ( cm ) ; install ( VAR_2 ) ; } } ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR (  return ( ( ( n . METHOD_2 ( STRING_1 ) ) || ( n . METHOD_2 ( STRING_2 ) ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( n . METHOD_4 ( STRING_3 ) ) >= 0 ) ; )  return ( ( ( n . METHOD_2 ( STRING_1 ) ) || ( n . METHOD_2 ( STRING_2 ) ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( n . METHOD_4 ( STRING_3 ) ) >= 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( a . getId ( ) . get ( ) ) ) INIT = new TYPE_1 ( a . getId ( ) . get ( ) ) ) VAR VAR (  VAR_1 . email = a . METHOD_2 ( ) )  VAR_1 . email = a . METHOD_2 ( ) (  VAR_1 . name = a . METHOD_3 ( ) )  VAR_1 . name = a . METHOD_3 ( ) (  VAR_2 = a . METHOD_4 ( ) )  VAR_2 = a . METHOD_4 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( ( STRING_1 + line ) ) )  VAR_1 . append ( ( STRING_1 + line ) ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , line ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , line ) ) VAR VAR (  VAR_1 . append ( STRING_2 ) )  VAR_1 . append ( STRING_2 ) (  VAR_1 . append ( VAR_4 ) )  VAR_1 . append ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . append ( STRING_3 ) )  VAR_1 . append ( STRING_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . append ( STRING_4 ) )  VAR_1 . append ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) INIT = TYPE_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  return ! ( ( VAR_1 || ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( 0 >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) ) ) || ( ( ( VAR_3 ) == ( VAR_5 ) ) && ( 0 >= ( VAR_2 . METHOD_4 ( ) . size ( ) ) ) ) ) ; )  return ! ( ( VAR_1 || ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( 0 >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) ) ) || ( ( ( VAR_3 ) == ( VAR_5 ) ) && ( 0 >= ( VAR_2 . METHOD_4 ( ) . size ( ) ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) COND getChange ( ) . getStatus ( ) . METHOD_2 ( ) ( THEN THEN (  return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; )  return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; ) THEN THEN ) IF IF (  return METHOD_4 ( ) . METHOD_9 ( ) ; )  return METHOD_4 ( ) . METHOD_9 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 . getParentKey ( ) ) ) INIT = VAR_3 . get ( VAR_1 . getParentKey ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( user ) ) INIT = VAR_2 . METHOD_2 ( user ) ) VAR VAR (  return VAR_4 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; )  return VAR_4 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; )  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . email ( ) ) != null ) COND ( VAR_1 . email ( ) ) != null ( THEN THEN (  return VAR_1 . email ( ) ; )  return VAR_1 . email ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . name ( ) ) != null ) COND ( VAR_1 . name ( ) ) != null ( THEN THEN (  return VAR_1 . name ( ) ; )  return VAR_1 . name ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != 0 ) COND ( VAR_1 . METHOD_2 ( ) ) != 0 ( THEN THEN (  return STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; )  return STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return STRING_1 ; )  return STRING_1 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_2 . projects ( ) . name ( VAR_1 ) . create ( ) . get ( ) ) INIT = VAR_2 . projects ( ) . name ( VAR_1 ) . create ( ) . get ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) (  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) )  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) (  METHOD_4 ( VAR_1 , STRING_2 ) )  METHOD_4 ( VAR_1 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ( INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) INIT = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( rsrc ) )  VAR_2 . METHOD_4 ( rsrc ) (  VAR_2 . apply ( account , new TYPE_4 ( ) ) )  VAR_2 . apply ( account , new TYPE_4 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return rw . parseCommit ( repo . METHOD_2 ( name ) . METHOD_3 ( ) ) ; )  return rw . parseCommit ( repo . METHOD_2 ( name ) . METHOD_3 ( ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  rw . METHOD_4 ( ) )  rw . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . get ( ) ) INIT = super . get ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  req = VAR_2 . get ( ) )  req = VAR_2 . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_1 ( ) ) instanceof TYPE_3 ) COND ( VAR_3 . METHOD_1 ( ) ) instanceof TYPE_3 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE (  throw VAR_3 ; )  throw VAR_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return TYPE_4 . METHOD_2 ( req ) ; )  return TYPE_4 . METHOD_2 ( req ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?,java.io.IOException> ) RETURN TYPE_1<?,java.io.IOException> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.Change.Id> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.Change.Id> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3<?>> ) TYPE java.util.List<TYPE_3<?>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( METHOD_1 ( id ) ) )  VAR_2 . add ( METHOD_1 ( id ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_4 . METHOD_2 ( VAR_2 ) ; )  return TYPE_4 . METHOD_2 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) )  VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7|java.io.IOException ) TYPE TYPE_7|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e . getMessage ( ) ) ; )  throw new TYPE_5 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return TYPE_1 . METHOD_6 ( ) ; )  return TYPE_1 . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME git ) NAME git ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  return VAR_4 . to ( git , ( STRING_1 + topic ) ) ; )  return VAR_4 . to ( git , ( STRING_1 + topic ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static final ) MODIFIER static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( TYPE_4 . METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( ) , VAR_1 . get ( ) . METHOD_4 ( ) ) , ( ( int ) ( ( VAR_1 . get ( ) . METHOD_4 ( ) ) * ( VAR_1 . get ( ) . METHOD_3 ( ) ) ) ) ) ; )  return new TYPE_1 ( TYPE_4 . METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( ) , VAR_1 . get ( ) . METHOD_4 ( ) ) , ( ( int ) ( ( VAR_1 . get ( ) . METHOD_4 ( ) ) * ( VAR_1 . get ( ) . METHOD_3 ( ) ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME name ) NAME name ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  in . name = name )  in . name = name ( TRY TRY ( BLOCK BLOCK (  VAR_1 . apply ( rsrc , in ) )  VAR_1 . apply ( rsrc , in ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( name , e ) ; )  throw new TYPE_4 ( name , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  modules.add ( new TYPE_3 ( ) ) )  modules.add ( new TYPE_3 ( ) ) ) THEN THEN ) IF IF (  modules.add ( new TYPE_4 ( VAR_4 , VAR_1 . METHOD_2 ( VAR_5 class ) , VAR_1 . METHOD_2 ( VAR_6 class ) ) ) )  modules.add ( new TYPE_4 ( VAR_4 , VAR_1 . METHOD_2 ( VAR_5 class ) , VAR_1 . METHOD_2 ( VAR_6 class ) ) ) ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  modules.add ( new TYPE_5 ( ) ) )  modules.add ( new TYPE_5 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 . METHOD_3 ( modules ) ; )  return VAR_1 . METHOD_3 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  cm . METHOD_2 ( line , VAR_2 , VAR_3 . diff ( ) ) )  cm . METHOD_2 ( line , VAR_2 , VAR_3 . diff ( ) ) ) BLOCK BLOCK ) FOR FOR (  return line + VAR_1 ; )  return line + VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( VAR_2 . METHOD_2 ( VAR_5 , VAR_6 ) ) )  VAR_3 . add ( VAR_2 . METHOD_2 ( VAR_5 , VAR_6 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . add ( STRING_1 ) )  VAR_3 . add ( STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_3 ( METHOD_4 ( VAR_4 , VAR_2 , VAR_5 ) ) )  VAR_3 . METHOD_3 ( METHOD_4 ( VAR_4 , VAR_2 , VAR_5 ) ) ) ELSE ELSE ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = true )  VAR_1 = true (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_8 ) NAME METHOD_8 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_9 ( true ) )  METHOD_9 ( true ) (  super . METHOD_8 ( VAR_2 ) )  super . METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( project , METHOD_3 ( ) , message . METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) )  TYPE_1 . METHOD_2 ( project , METHOD_3 ( ) , message . METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 ) ) INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME result ) NAME result ( INIT = VAR_1 . to ( STRING_1 ) ) INIT = VAR_1 . to ( STRING_1 ) ) VAR VAR (  result . METHOD_3 ( ) )  result . METHOD_3 ( ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND i . METHOD_2 ( ) ) COND i . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = i . METHOD_3 ( ) ) INIT = i . METHOD_3 ( ) ) VAR VAR (  table . METHOD_4 ( row ) )  table . METHOD_4 ( row ) (  table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) )  table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) (  METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) ) )  METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) ) (  row ++ )  row ++ ) BLOCK BLOCK ) WHILE WHILE (  return row ; )  return row ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) INIT = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . close ( ) )  VAR_3 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME err ) NAME err ( BLOCK BLOCK (  throw new TYPE_5 ( STRING_1 , err ) ; )  throw new TYPE_5 ( STRING_1 , err ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = cd . getId ( ) . toString ( ) ) INIT = cd . getId ( ) . toString ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND cd . change ( ) . getStatus ( ) . METHOD_1 ( ) ) COND cd . change ( ) . getStatus ( ) . METHOD_1 ( ) ( THEN THEN (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) (  commit ( VAR_1 ) )  commit ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_2 ( id ) )  VAR_2 . METHOD_2 ( id ) (  commit ( VAR_2 ) )  commit ( VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|TYPE_1 ) TYPE com.google.gwtorm.server.OrmException|TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME message ) NAME message ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME commit ) NAME commit ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  input . METHOD_1 ( message ) )  input . METHOD_1 ( message ) (  TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . METHOD_3 ( input , VAR_1 ) )  TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . METHOD_3 ( input , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = rw . parseCommit ( VAR_2 ) ) INIT = rw . parseCommit ( VAR_2 ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) COND ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ) TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ( NAME changes ) NAME changes ( INIT = METHOD_2 ( changeId ) ) INIT = METHOD_2 ( changeId ) ) VAR VAR ( IF IF ( COND changes . isEmpty ( ) ) COND changes . isEmpty ( ) ( THEN THEN (  throw new TYPE_2 ( changeId ) ; )  throw new TYPE_2 ( changeId ) ; ) THEN THEN ) IF IF (  return create ( db , project , changeId ) ; )  return create ( db , project , changeId ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) ) INIT = VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return ( 0 < VAR_1 ) && ( VAR_1 <= VAR_2 ) ? VAR_1 : VAR_2 ; )  return ( 0 < VAR_1 ) && ( VAR_1 <= VAR_2 ) ? VAR_1 : VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ( INIT = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) INIT = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME res ) NAME res ( INIT = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , line , false ) , METHOD_7 ( ) ) ) INIT = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , line , false ) , METHOD_7 ( ) ) ) VAR VAR (  METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) )  METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . METHOD_3 ( STRING_1 ) ) )  METHOD_2 ( b , b . METHOD_3 ( STRING_1 ) ) (  METHOD_2 ( b , b . METHOD_4 ( INT_1 ) ) )  METHOD_2 ( b , b . METHOD_4 ( INT_1 ) ) (  METHOD_2 ( b , b . METHOD_5 ( INT_2 ) ) )  METHOD_2 ( b , b . METHOD_5 ( INT_2 ) ) (  METHOD_2 ( b , b . METHOD_6 ( ) ) )  METHOD_2 ( b , b . METHOD_6 ( ) ) (  assertEquals ( STRING_2 , b . METHOD_7 ( ) ) )  assertEquals ( STRING_2 , b . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME user ) NAME user ( INIT = user ( name , null ) ) INIT = user ( name , null ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = create ( ) . METHOD_4 ( user ) ) INIT = create ( ) . METHOD_4 ( user ) ) VAR VAR (  METHOD_5 ( r ) )  METHOD_5 ( r ) (  assertEquals ( name , r . name ) )  assertEquals ( name , r . name ) (  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) )  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) (  TYPE_1 . METHOD_7 ( VAR_1 ) )  TYPE_1 . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ref ) NAME ref ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  b . ref = ref . getName ( ) )  b . ref = ref . getName ( ) ( IF IF ( COND ( ref . METHOD_2 ( ) ) != null ) COND ( ref . METHOD_2 ( ) ) != null ( THEN THEN (  b . revision = ref . METHOD_2 ( ) . name ( ) )  b . revision = ref . METHOD_2 ( ) . name ( ) ) THEN THEN ) IF IF (  b . METHOD_3 ( ( ( ! ( VAR_2 . contains ( ref . getName ( ) ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) )  b . METHOD_3 ( ( ( ! ( VAR_2 . contains ( ref . getName ( ) ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) (  return b ; )  return b ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.Key<TYPE_2> ) TYPE TYPE_3.Key<TYPE_2> ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_4<TYPE_2> ) TYPE TYPE_4<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<TYPE_4<TYPE_2>> ) TYPE TYPE_5<TYPE_4<TYPE_2>> ( NAME ref ) NAME ref ( INIT = new TYPE_5 < TYPE_4 < TYPE_2 > > ( VAR_1 ) ) INIT = new TYPE_5 < TYPE_4 < TYPE_2 > > ( VAR_1 ) ) VAR VAR (  VAR_2 . add ( ref ) )  VAR_2 . add ( ref ) (  return new TYPE_6 ( ref , key , VAR_1 ) ; )  return new TYPE_6 ( ref , key , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = null )  VAR_1 = null (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) (  TYPE_1 . METHOD_2 ( VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_3 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_3 . METHOD_4 ( ) )  TYPE_3 . METHOD_4 ( ) ( IF IF ( COND ( ( VAR_6 ) != null ) && ( VAR_6 . METHOD_5 ( ) ) ) COND ( ( VAR_6 ) != null ) && ( VAR_6 . METHOD_5 ( ) ) ( THEN THEN (  TYPE_4 . METHOD_6 ( VAR_7 ) )  TYPE_4 . METHOD_6 ( VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) COND ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ( THEN THEN (  return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; )  return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_1 ( BLOCK BLOCK (  this . VAR_3 = revision )  this . VAR_3 = revision (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  this . VAR_3 = revision )  this . VAR_3 = revision (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( ( revision == null ) , STRING_1 , type ) )  TYPE_3 . METHOD_2 ( ( revision == null ) , STRING_1 , type ) (  this . VAR_3 = revision )  this . VAR_3 = revision (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND d . METHOD_5 ( ) ) COND d . METHOD_5 ( ) ( THEN THEN (  TYPE_2 . METHOD_1 ( d ) )  TYPE_2 . METHOD_1 ( d ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_6 ( d ) )  TYPE_2 . METHOD_6 ( d ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  TYPE_2 . METHOD_6 ( VAR_1 ) )  TYPE_2 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_1 ( ctx ) )  VAR_1 . METHOD_1 ( ctx ) (  return ; )  return ; ) THEN THEN ) IF IF (  ctx . METHOD_2 ( new TYPE_2 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( patchSet . getRevision ( ) . get ( ) ) , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , patchSet . getRefName ( ) ) ) )  ctx . METHOD_2 ( new TYPE_2 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( patchSet . getRevision ( ) . get ( ) ) , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , patchSet . getRefName ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( CHAR_1 ) )  VAR_1 . append ( CHAR_1 ) (  VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) )  VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) (  VAR_1 . append ( CHAR_2 ) )  VAR_1 . append ( CHAR_2 ) (  VAR_1 . append ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . append ( VAR_2 . METHOD_3 ( ) ) (  VAR_1 . append ( CHAR_2 ) )  VAR_1 . append ( CHAR_2 ) (  VAR_1 . append ( VAR_2 . METHOD_4 ( ) ) )  VAR_1 . append ( VAR_2 . METHOD_4 ( ) ) (  VAR_1 . append ( CHAR_2 ) )  VAR_1 . append ( CHAR_2 ) (  VAR_1 . append ( VAR_2 . METHOD_5 ( ) ) )  VAR_1 . append ( VAR_2 . METHOD_5 ( ) ) (  VAR_1 . append ( CHAR_3 ) )  VAR_1 . append ( CHAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_5 . apply ( VAR_1 . get ( ) . METHOD_1 ( s ) . format ( change ) ) ; )  return TYPE_5 . apply ( VAR_1 . get ( ) . METHOD_1 ( s ) . format ( change ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_1 , e ) ; )  throw new TYPE_4 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  m . METHOD_2 ( ) )  m . METHOD_2 ( ) (  m . METHOD_3 ( ) )  m . METHOD_3 ( ) (  m . METHOD_4 ( VAR_2 ) )  m . METHOD_4 ( VAR_2 ) (  m . METHOD_5 ( ) )  m . METHOD_5 ( ) (  m . METHOD_6 ( ) )  m . METHOD_6 ( ) (  m . METHOD_3 ( ) )  m . METHOD_3 ( ) (  m . METHOD_4 ( STRING_1 ) )  m . METHOD_4 ( STRING_1 ) (  m . METHOD_7 ( STRING_2 , INT_1 ) )  m . METHOD_7 ( STRING_2 , INT_1 ) (  m . append ( TYPE_2 . METHOD_8 ( VAR_1 ) ) )  m . append ( TYPE_2 . METHOD_8 ( VAR_1 ) ) (  m . METHOD_6 ( ) )  m . METHOD_6 ( ) (  m . METHOD_9 ( ) )  m . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  rw . METHOD_2 ( ) )  rw . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( null , VAR_1 ) ) INIT = new TYPE_3 ( null , VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( rw , commit ) )  VAR_2 . METHOD_3 ( rw , commit ) (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ) VAR VAR (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; )  return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( req , res , VAR_3 ) )  METHOD_2 ( req , res , VAR_3 ) (  res . METHOD_3 ( VAR_4 ) )  res . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = res . METHOD_4 ( ) ) INIT = res . METHOD_4 ( ) ) VAR VAR (  new TYPE_6 ( ) . METHOD_5 ( VAR_6 ) . METHOD_6 ( ) . METHOD_7 ( ) . create ( ) . METHOD_8 ( VAR_1 , VAR_2 , VAR_5 ) )  new TYPE_6 ( ) . METHOD_5 ( VAR_6 ) . METHOD_6 ( ) . METHOD_7 ( ) . create ( ) . METHOD_8 ( VAR_1 , VAR_2 , VAR_5 ) (  VAR_5 . METHOD_9 ( CHAR_1 ) )  VAR_5 . METHOD_9 ( CHAR_1 ) (  VAR_5 . close ( ) )  VAR_5 . close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) + STRING_5 ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) + STRING_5 ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) )  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) (  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) (  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_3 , STRING_4 ) ) , TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_5 ) ) ) )  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_3 , STRING_4 ) ) , TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_5 ) ) ) (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_6 , STRING_7 , STRING_4 , STRING_8 , STRING_9 , STRING_10 , STRING_5 ) ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_6 , STRING_7 , STRING_4 , STRING_8 , STRING_9 , STRING_10 , STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) (  org.junit.Assert . METHOD_5 ( r . METHOD_6 ( ) . contains ( STRING_2 ) ) )  org.junit.Assert . METHOD_5 ( r . METHOD_6 ( ) . contains ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( change , VAR_1 . user , db ) ) COND METHOD_2 ( change , VAR_1 . user , db ) ( THEN THEN (  VAR_3 . METHOD_3 ( event ) )  VAR_3 . METHOD_3 ( event ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getKey ( ) . getParentKey ( ) . get ( ) ) INIT = VAR_1 . getKey ( ) . getParentKey ( ) . get ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . getKey ( ) . getParentKey ( ) . get ( ) ) INIT = VAR_2 . getKey ( ) . getParentKey ( ) . get ( ) ) VAR VAR (  return TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_1 ( VAR_3 , VAR_4 ) . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) . result ( ) ; )  return TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_1 ( VAR_3 , VAR_4 ) . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) . result ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) (  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) )  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) )  com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Status ) TYPE com.google.gerrit.reviewdb.client.Change.Status ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME status ) NAME status ( CASE VAR_1 ( BLOCK BLOCK (  return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; )  return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; )  return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME edit ) NAME edit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , ( ( line - VAR_3 ) + 1 ) , VAR_2 , edit ) ) )  VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , ( ( line - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME change ) NAME change ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND project == null ) COND project == null ( THEN THEN (  return new TYPE_1 ( STRING_1 ) . id ( java.lang.String . METHOD_1 ( id ) ) ; )  return new TYPE_1 ( STRING_1 ) . id ( java.lang.String . METHOD_1 ( id ) ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_1 ( STRING_1 ) . id ( project , id ) ; )  return new TYPE_1 ( STRING_1 ) . id ( project , id ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME git ) NAME git ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME change ) NAME change ( INIT = METHOD_3 ( git ) ) INIT = METHOD_3 ( git ) ) VAR VAR (  submit ( change . getChangeId ( ) ) )  submit ( change . getChangeId ( ) ) (  METHOD_4 ( git , false ) )  METHOD_4 ( git , false ) (  org.junit.Assert.assertEquals ( change . METHOD_5 ( ) . METHOD_6 ( 0 ) , METHOD_7 ( ) . METHOD_6 ( 0 ) ) )  org.junit.Assert.assertEquals ( change . METHOD_5 ( ) . METHOD_6 ( 0 ) , METHOD_7 ( ) . METHOD_6 ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cfg ) NAME cfg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( null , null , null , VAR_2 ) ) INIT = new TYPE_3 ( null , null , null , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_2 ( cfg ) ) INIT = TYPE_3 . METHOD_2 ( cfg ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME m ) NAME m ( INIT = VAR_3 . METHOD_3 ( repo , c , rw , VAR_4 , VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( repo , c , rw , VAR_4 , VAR_1 ) ) VAR VAR (  return TYPE_5 . METHOD_4 ( m ) ; )  return TYPE_5 . METHOD_4 ( m ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( r . length ( ) ) > 0 ) COND ( r . length ( ) ) > 0 ( THEN THEN (  r . append ( STRING_1 ) )  r . append ( STRING_1 ) ) THEN THEN ) IF IF (  r . append ( n ) )  r . append ( n ) (  r . append ( STRING_2 ) )  r . append ( STRING_2 ) (  r . append ( TYPE_2 . METHOD_2 ( VAR_1 ) ) )  r . append ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME view ) NAME view ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ( INIT = view . METHOD_2 ( ) ) INIT = view . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( token . equals ( TYPE_2 . METHOD_2 ( ) ) ) ) COND ! ( token . equals ( TYPE_2 . METHOD_2 ( ) ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( token , false ) )  TYPE_2 . METHOD_3 ( token , false ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  TYPE_3 . METHOD_4 ( token ) )  TYPE_3 . METHOD_4 ( token ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND view instanceof TYPE_4 ) COND view instanceof TYPE_4 ( THEN THEN (  VAR_2 = token )  VAR_2 = token ) THEN THEN ) IF IF (  super . METHOD_1 ( view ) )  super . METHOD_1 ( view ) (  view . METHOD_1 ( ) )  view . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME msg ) NAME msg ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  msg . append ( STRING_1 ) )  msg . append ( STRING_1 ) (  msg . append ( STRING_2 ) )  msg . append ( STRING_2 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  msg . append ( STRING_3 ) )  msg . append ( STRING_3 ) ) THEN THEN ( ELSE ELSE (  msg . append ( STRING_4 ) )  msg . append ( STRING_4 ) (  msg . append ( STRING_5 ) )  msg . append ( STRING_5 ) ) ELSE ELSE ) IF IF (  msg . append ( STRING_6 ) )  msg . append ( STRING_6 ) (  return VAR_1 . METHOD_3 ( true , msg . toString ( ) , name ) ; )  return VAR_1 . METHOD_3 ( true , msg . toString ( ) , name ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) )  VAR_2 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME p ) NAME p ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( project . getName ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( project . getName ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME db ) NAME db ( INIT = VAR_2 . METHOD_1 ( p ) ) INIT = VAR_2 . METHOD_1 ( p ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME git ) NAME git ( INIT = new TYPE_3 ( db ) ) INIT = new TYPE_3 ( db ) ) VAR VAR (  git . METHOD_2 ( ) . METHOD_3 ( branch ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) )  git . METHOD_2 ( ) . METHOD_3 ( branch ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) (  git . close ( ) )  git . close ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME user ) NAME user ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ProjectConfig ) TYPE TYPE_2.ProjectConfig ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , null , VAR_5 , VAR_6 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; )  return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , null , VAR_5 , VAR_6 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) )  VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) (  VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) )  VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) COND id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) COND id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME t ) NAME t ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND t . METHOD_4 ( id ) ) COND t . METHOD_4 ( id ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = projectName + ( VAR_2 ) ) INIT = projectName + ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( n ) . METHOD_4 ( ) , VAR_4 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( n ) . METHOD_4 ( ) , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME db ) NAME db ( INIT = TYPE_3 . METHOD_5 ( VAR_3 , false ) ) INIT = TYPE_3 . METHOD_5 ( VAR_3 , false ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  db . create ( true ) )  db . create ( true ) ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . change ( ) . METHOD_3 ( ) ) )  VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . change ( ) . METHOD_3 ( ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 = index . METHOD_4 ( VAR_2 , VAR_4 ) )  VAR_3 = index . METHOD_4 ( VAR_2 , VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.Repository ) RETURN org.eclipse.jgit.lib.Repository ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  name = TYPE_1 . METHOD_2 ( VAR_1 , name ) )  name = TYPE_1 . METHOD_2 ( VAR_1 , name ) ( IF IF ( COND VAR_2 . METHOD_3 ( name ) ) COND VAR_2 . METHOD_3 ( name ) ( THEN THEN (  return VAR_2 . get ( name ) ; )  return VAR_2 . get ( name ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) INIT = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) VAR VAR (  VAR_2 . put ( name , repo ) )  VAR_2 . put ( name , repo ) (  return repo ; )  return repo ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND ( TYPE_2 . METHOD_2 ( VAR_1 ) ) != null ) COND ( TYPE_2 . METHOD_2 ( VAR_1 ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_2 . add ( TYPE_3 . METHOD_4 ( VAR_5 class , VAR_4 . METHOD_5 ( ) ) ) )  VAR_2 . add ( TYPE_3 . METHOD_4 ( VAR_5 class , VAR_4 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  < com.google.gerrit.reviewdb.server.ReviewDb > schema = METHOD_2 ( VAR_1 class ) )  < com.google.gerrit.reviewdb.server.ReviewDb > schema = METHOD_2 ( VAR_1 class ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = METHOD_2 ( VAR_2 . ReviewDb class ) ) INIT = METHOD_2 ( VAR_2 . ReviewDb class ) ) VAR VAR (  TYPE_2 . METHOD_3 ( schema . METHOD_4 ( ) ) . METHOD_5 ( db ) . METHOD_6 ( ) )  TYPE_2 . METHOD_3 ( schema . METHOD_4 ( ) ) . METHOD_5 ( db ) . METHOD_6 ( ) (  VAR_3 = new TYPE_3 ( VAR_4 , schema ) )  VAR_3 = new TYPE_3 ( VAR_4 , schema ) (  req = METHOD_2 ( VAR_5 class ) )  req = METHOD_2 ( VAR_5 class ) (  rsp = METHOD_2 ( VAR_6 . HttpServletResponse class ) )  rsp = METHOD_2 ( VAR_6 . HttpServletResponse class ) (  TYPE_2 . METHOD_3 ( req . METHOD_7 ( ) ) . METHOD_5 ( TYPE_4 . toString ( ) ) )  TYPE_2 . METHOD_3 ( req . METHOD_7 ( ) ) . METHOD_5 ( TYPE_4 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  METHOD_2 ( STRING_2 , VAR_1 ) )  METHOD_2 ( STRING_2 , VAR_1 ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_3 ) ) ) ) ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_3 ) ) ) ) ) . METHOD_4 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) . toString ( ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) . toString ( ) ) . isEqualTo ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = TYPE_3 . getChange ( VAR_1 ) ) INIT = TYPE_3 . getChange ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_4 . get ( change , ps ) ; )  return VAR_4 . get ( change , ps ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_7 ( e . getMessage ( ) ) ; )  throw new TYPE_7 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME parseCommit ) NAME parseCommit ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id instanceof org.eclipse.jgit.revwalk.RevCommit ) COND id instanceof org.eclipse.jgit.revwalk.RevCommit ( THEN THEN (  return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; )  return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = walk . parseCommit ( id ) ) INIT = walk . parseCommit ( id ) ) VAR VAR (  walk . METHOD_1 ( commit ) )  walk . METHOD_1 ( commit ) (  return commit ; )  return commit ; ) BLOCK BLOCK ( FINALLY FINALLY (  walk . METHOD_2 ( ) )  walk . METHOD_2 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . update ( result ) )  VAR_1 . update ( result ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  b . METHOD_3 ( true ) )  b . METHOD_3 ( true ) ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_2 ( patchSet . getId ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { VAR_1 . update ( result ) ; } public void METHOD_2 ( TYPE_5 VAR_2 ) { b . METHOD_3 ( true ) ; } } ) . METHOD_4 ( ) )  new TYPE_2 ( patchSet . getId ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { VAR_1 . update ( result ) ; } public void METHOD_2 ( TYPE_5 VAR_2 ) { b . METHOD_3 ( true ) ; } } ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) . METHOD_3 ( VAR_3 . toString ( ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( path , VAR_4 ) ) ; )  return TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) . METHOD_3 ( VAR_3 . toString ( ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( path , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ) INIT = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( 2 ) )  VAR_1 . METHOD_2 ( 2 ) ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_6 . METHOD_3 ( ) ) INIT = TYPE_6 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = METHOD_4 ( VAR_1 ) )  VAR_4 = METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( STRING_1 , e ) )  VAR_5 . error ( STRING_1 , e ) (  return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; )  return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return METHOD_5 ( index , VAR_4 , VAR_1 ) ; )  return METHOD_5 ( index , VAR_4 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) ) ; )  return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) VAR VAR (  VAR_1 . error ( msg , e ) )  VAR_1 . error ( msg , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND token . METHOD_2 ( STRING_1 ) ) COND token . METHOD_2 ( STRING_1 ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( group . METHOD_4 ( ) , VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( group . METHOD_4 ( ) , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_3 ( group . METHOD_5 ( ) , VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( group . METHOD_5 ( ) , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) COND rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; )  return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; ) THEN THEN ( ELSE ELSE ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( account ) ) INIT = VAR_2 . create ( account ) ) VAR VAR (  return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; )  return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( account ) ; return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } } ; )  return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( account ) ; return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } } ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = new TYPE_2 ( p , VAR_2 ) ) INIT = new TYPE_2 ( p , VAR_2 ) ) VAR VAR (  METHOD_2 ( p , c . getParentKey ( ) ) )  METHOD_2 ( p , c . getParentKey ( ) ) (  METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) != ( c . METHOD_4 ( ) ) ) ) )  METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) != ( c . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = METHOD_1 ( VAR_1 ) ) INIT = METHOD_1 ( VAR_1 ) ) VAR VAR (  return new TYPE_1 ( name , VAR_4 , VAR_3 . user , VAR_1 , VAR_2 , new TYPE_6 ( name ) , VAR_5 , VAR_6 , METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_7 class , null ) ; )  return new TYPE_1 ( name , VAR_4 , VAR_3 . user , VAR_1 , VAR_2 , new TYPE_6 ( name ) , VAR_5 , VAR_6 , METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_7 class , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME p ) NAME p ( IN VAR_1 . approvals ( VAR_2 ) ) IN VAR_1 . approvals ( VAR_2 ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . create ( VAR_2 , p . getAccountId ( ) ) ) INIT = VAR_4 . create ( VAR_2 , p . getAccountId ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_2 ( ) . contains ( VAR_5 ) ) COND VAR_3 . METHOD_2 ( ) . contains ( VAR_5 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( info . METHOD_3 ( ) ) ) )  VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( info . METHOD_3 ( ) ) ) ( IF IF ( COND ( info . message ( ) ) != null ) COND ( info . message ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = info . message ( ) . METHOD_4 ( ) ) INIT = info . message ( ) . METHOD_4 ( ) ) VAR VAR (  VAR_2 . METHOD_1 ( msg ) )  VAR_2 . METHOD_1 ( msg ) (  message . METHOD_5 ( VAR_3 . apply ( new TYPE_3 ( ) . append ( msg ) . METHOD_6 ( ) ) ) )  message . METHOD_5 ( VAR_3 . apply ( new TYPE_3 ( ) . append ( msg ) . METHOD_6 ( ) ) ) ) THEN THEN ) IF IF (  this . VAR_4 = info )  this . VAR_4 = info ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , METHOD_2 ( STRING_3 ) ) ) INIT = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , METHOD_2 ( STRING_3 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . get ( key , VAR_3 . create ( key , args ) ) ; )  return VAR_2 . get ( key , VAR_3 . create ( key , args ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( ( STRING_1 + key ) , e ) )  VAR_4 . METHOD_2 ( ( STRING_1 + key ) , e ) (  return new TYPE_1 ( VAR_5 ) ; )  return new TYPE_1 ( VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  return new TYPE_1 ( VAR_6 ) ; )  return new TYPE_1 ( VAR_6 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.HttpServletResponse ) TYPE TYPE_1.HttpServletResponse ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 . HttpServletResponse class ) ) INIT = METHOD_3 ( VAR_2 . HttpServletResponse class ) ) VAR VAR (  servlet . METHOD_4 ( null , VAR_1 ) )  servlet . METHOD_4 ( null , VAR_1 ) (  TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) )  VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) (  servlet . METHOD_4 ( null , VAR_1 ) )  servlet . METHOD_4 ( null , VAR_1 ) (  TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME m ) NAME m ( INIT = TYPE_2 . METHOD_3 ( repo , c , VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( repo , c , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( ( STRING_1 + VAR_3 ) ) )  VAR_2 . add ( ( STRING_1 + VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) INIT = ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) VAR VAR ( IF IF ( COND VAR_2 > 0 ) COND VAR_2 > 0 ( THEN THEN (  return ( TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ( VAR_2 + 1 ) ) ) + VAR_4 ; )  return ( TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ( VAR_2 + 1 ) ) ) + VAR_4 ; ) THEN THEN ( ELSE ELSE (  return VAR_4 ; )  return VAR_4 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( path ) == null ) || ( VAR_1 == null ) ) COND ( ( path ) == null ) || ( VAR_1 == null ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = rw . METHOD_2 ( VAR_1 ) ) INIT = rw . METHOD_2 ( VAR_1 ) ) VAR VAR (  return TYPE_1 . METHOD_3 ( VAR_2 , path , VAR_3 ) ; )  return TYPE_1 . METHOD_3 ( VAR_2 , path , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) )  VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  servlet . METHOD_2 ( req , res ) )  servlet . METHOD_2 ( req , res ) (  assertEquals ( VAR_2 , res . getStatus ( ) ) )  assertEquals ( VAR_2 , res . getStatus ( ) ) (  assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) )  assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.util.Collections . METHOD_3 ( ) ) INIT = java.util.Collections . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_5> ) TYPE java.util.Set<TYPE_5> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_6 . of ( VAR_4 ) ) INIT = TYPE_6 . of ( VAR_4 ) ) VAR VAR (  return new TYPE_1 ( account , VAR_3 , VAR_2 ) ; )  return new TYPE_1 ( account , VAR_3 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( STRING_1 , STRING_2 , INT_1 ) ) INIT = new TYPE_2 ( STRING_1 , STRING_2 , INT_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_1 . METHOD_5 ( VAR_3 . ReviewDb class ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_1 . METHOD_5 ( VAR_3 . ReviewDb class ) ) (  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) )  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( VAR_1 ) )  TYPE_1 . METHOD_8 ( VAR_1 ) (  VAR_4 . METHOD_9 ( STRING_1 , STRING_2 , INT_1 ) )  VAR_4 . METHOD_9 ( STRING_1 , STRING_2 , INT_1 ) (  TYPE_1 . METHOD_10 ( VAR_1 ) )  TYPE_1 . METHOD_10 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 . METHOD_5 ( ) ) . METHOD_6 ( ) , STRING_1 , VAR_3 ) )  TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 . METHOD_5 ( ) ) . METHOD_6 ( ) , STRING_1 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_8 ( e ) ; )  throw new TYPE_8 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . add ( VAR_3 ) )  VAR_1 . add ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ; )  return VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME info ) NAME info ( INIT = METHOD_7 ( METHOD_8 ( VAR_1 ) ) ) INIT = METHOD_7 ( METHOD_8 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ( INIT = VAR_2 . get ( VAR_3 ) . commit . message ) INIT = VAR_2 . get ( VAR_3 ) . commit . message ) VAR VAR (  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_9 ( ) . METHOD_10 ( ) ) ) )  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_9 ( ) . METHOD_10 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 ) ? STRING_1 : STRING_2 ) INIT = ( VAR_2 ) ? STRING_1 : STRING_2 ) VAR VAR (  return java.lang.String.format ( STRING_3 , VAR_1 , ( TYPE_3 . METHOD_1 ( input . message ) ? TYPE_4 . METHOD_2 ( user . get ( ) . METHOD_3 ( ) , STRING_4 ) : input . message ) , rsrc . getName ( ) ) ; )  return java.lang.String.format ( STRING_3 , VAR_1 , ( TYPE_3 . METHOD_1 ( input . message ) ? TYPE_4 . METHOD_2 ( user . get ( ) . METHOD_3 ( ) , STRING_4 ) : input . message ) , rsrc . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND t . METHOD_2 ( ) ) COND t . METHOD_2 ( ) ( THEN THEN (  return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; )  return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( t . METHOD_3 ( ) ) ) COND ! ( t . METHOD_3 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; )  return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rp ) NAME rp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = rp . METHOD_2 ( ) )  VAR_1 = rp . METHOD_2 ( ) ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 = rp . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) )  VAR_1 = rp . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( e . getMessage ( ) ) ) INIT = new TYPE_2 ( e . getMessage ( ) ) ) VAR VAR (  VAR_3 . METHOD_6 ( e ) )  VAR_3 . METHOD_6 ( e ) (  throw VAR_3 ; )  throw VAR_3 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  rp . METHOD_7 ( VAR_1 , rp . METHOD_8 ( ) ) )  rp . METHOD_7 ( VAR_1 , rp . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_3.HttpServletResponse ) TYPE TYPE_3.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,?> ) TYPE java.util.Map<java.lang.String,?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  req . METHOD_2 ( VAR_3 , true ) )  req . METHOD_2 ( VAR_3 , true ) (  return VAR_4 . METHOD_3 ( res , VAR_1 , METHOD_4 ( req , res , VAR_2 ) ) ; )  return VAR_4 . METHOD_3 ( res , VAR_1 , METHOD_4 ( req , res , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id . METHOD_2 ( VAR_1 ) ) COND id . METHOD_2 ( VAR_1 ) ( THEN THEN (  return METHOD_3 ( ) ; )  return METHOD_3 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND id . METHOD_2 ( VAR_2 ) ) COND id . METHOD_2 ( VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND id . METHOD_2 ( VAR_3 ) ) COND id . METHOD_2 ( VAR_3 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND id . METHOD_2 ( VAR_4 ) ) COND id . METHOD_2 ( VAR_4 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK ( IF IF ( COND p . METHOD_4 ( id ) ) COND p . METHOD_4 ( id ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4<TYPE_5> ) TYPE TYPE_4<TYPE_5> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_2 ) ) INIT = METHOD_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( THEN THEN (  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_2 . getId ( ) ) ) ; )  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_2 . getId ( ) ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( VAR_2 ) ) INIT = METHOD_5 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_6 . METHOD_6 ( VAR_4 ) ) INIT = TYPE_6 . METHOD_6 ( VAR_4 ) ) VAR VAR (  METHOD_7 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , TYPE_7 . METHOD_8 ( ) ) )  METHOD_7 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , TYPE_7 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_3 ) )  METHOD_3 ( VAR_2 , VAR_3 ) (  METHOD_4 ( VAR_1 , VAR_4 ) )  METHOD_4 ( VAR_1 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_2 , VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) )  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_2 , VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . to ( VAR_2 class ) )  bind ( VAR_1 class ) . to ( VAR_2 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i < INT_1 ) COND i < INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME p ) NAME p ( INIT = STRING_1 + i ) INIT = STRING_1 + i ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 , p ) )  TYPE_2 . METHOD_2 ( VAR_1 , p ) (  TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) )  TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  db . create ( ) )  db . create ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  assertEquals ( VAR_3 , VAR_4 ) )  assertEquals ( VAR_3 , VAR_4 ) (  assertEquals ( VAR_5 , VAR_6 ) )  assertEquals ( VAR_5 , VAR_6 ) (  assertEquals ( VAR_7 , VAR_8 ) )  assertEquals ( VAR_7 , VAR_8 ) (  assertEquals ( VAR_9 , VAR_10 ) )  assertEquals ( VAR_9 , VAR_10 ) (  assertEquals ( VAR_11 , VAR_12 ) )  assertEquals ( VAR_11 , VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) && ( METHOD_2 ( ) . equals ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . METHOD_2 ( ) ) ) ; )  return ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) && ( METHOD_2 ( ) . equals ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . METHOD_2 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) INIT = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  METHOD_4 ( project . METHOD_2 ( ) , VAR_2 ) )  METHOD_4 ( project . METHOD_2 ( ) , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_4 ) ) INIT = util . user ( VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) )  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = insert ( METHOD_4 ( repo , commit ) ) ) INIT = insert ( METHOD_4 ( repo , commit ) ) ) VAR VAR (  METHOD_5 ( STRING_7 ) )  METHOD_5 ( STRING_7 ) (  METHOD_5 ( STRING_8 , change ) )  METHOD_5 ( STRING_8 , change ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND VAR_1 <= ( VAR_4 ) ) COND VAR_1 <= ( VAR_4 ) ( THEN THEN (  ( VAR_4 ) ++ )  ( VAR_4 ) ++ ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 < ( VAR_5 ) ) COND VAR_1 < ( VAR_5 ) ( THEN THEN (  ( VAR_5 ) ++ )  ( VAR_5 ) ++ ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return table . METHOD_1 ( VAR_1 ) ; )  return table . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctl ) NAME ctl ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . isEmpty ( ) ) ) COND ! ( VAR_3 . isEmpty ( ) ) ( THEN THEN (  VAR_4 . get ( ) . apply ( new TYPE_3 ( new TYPE_4 ( ctl ) , db . patchSets ( ) . get ( VAR_1 ) ) , VAR_2 ) )  VAR_4 . get ( ) . apply ( new TYPE_3 ( new TYPE_4 ( ctl ) , db . patchSets ( ) . get ( VAR_1 ) ) , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME project ) NAME project ( INIT = VAR_2 . getProject ( ) . getName ( ) ) INIT = VAR_2 . getProject ( ) . getName ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( TYPE_4 . METHOD_2 ( user . METHOD_3 ( ) ) ) ? STRING_1 : user . METHOD_3 ( ) ) INIT = ( TYPE_4 . METHOD_2 ( user . METHOD_3 ( ) ) ) ? STRING_1 : user . METHOD_3 ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_1 , VAR_3 , project ) ) )  VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_1 , VAR_3 , project ) ) (  throw new TYPE_3 ( VAR_1 , project ) ; )  throw new TYPE_3 ( VAR_1 , project ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME currentPatchSetId ) NAME currentPatchSetId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ) INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ) VAR VAR (  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) )  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( IN db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . METHOD_6 ( ) ) ) IN db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . METHOD_6 ( ) ) ( BLOCK BLOCK (  VAR_1 . put ( c . getKey ( ) . get ( ) , c ) )  VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( change ) != null ) && ( VAR_1 ) ) COND ( ( change ) != null ) && ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( change ) ) INIT = TYPE_2 . METHOD_2 ( change ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( new TYPE_3 ( repo ) , VAR_3 ) ) ) ) COND ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( new TYPE_3 ( repo ) , VAR_3 ) ) ) ( THEN THEN (  return METHOD_4 ( repo ) ; )  return METHOD_4 ( repo ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . METHOD_1 ( repo ) ; )  return super . METHOD_1 ( repo ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_1 . put ( STRING_2 , VAR_2 ) )  VAR_1 . put ( STRING_2 , VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME query ) NAME query ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR (  org.junit.Assert . METHOD_3 ( query . contains ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ) )  org.junit.Assert . METHOD_3 ( query . contains ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.eclipse.jgit.lib.Repository> ) TYPE TYPE_2<org.eclipse.jgit.lib.Repository> ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = repo . METHOD_2 ( VAR_1 ) ) INIT = repo . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = ( VAR_2 == null ) ? repo . commit ( VAR_3 ) : repo . commit ( VAR_3 , VAR_2 ) ) INIT = ( VAR_2 == null ) ? repo . commit ( VAR_3 ) : repo . commit ( VAR_3 , VAR_2 ) ) VAR VAR (  repo . METHOD_3 ( c ) )  repo . METHOD_3 ( c ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.NameKey> ) TYPE TYPE_1<TYPE_2.NameKey> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( ) ) INIT = VAR_3 . get ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( db , VAR_1 , VAR_4 , VAR_5 ) )  VAR_2 . METHOD_1 ( db , VAR_1 , VAR_4 , VAR_5 ) (  METHOD_2 ( STRING_2 ) )  METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) )  METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  p . METHOD_2 ( VAR_1 ) )  p . METHOD_2 ( VAR_1 ) ( IF IF ( COND p . METHOD_3 ( ) ) COND p . METHOD_3 ( ) ( THEN THEN (  p . METHOD_1 ( ) )  p . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_1 ) ) COND METHOD_2 ( VAR_1 ) ( THEN THEN (  TYPE_1 . info ( STRING_1 ) )  TYPE_1 . info ( STRING_1 ) (  bind ( VAR_2 class ) . to ( VAR_3 class ) . in ( VAR_4 ) )  bind ( VAR_2 class ) . to ( VAR_3 class ) . in ( VAR_4 ) (  bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( new TYPE_3 ( VAR_1 , VAR_6 ) ) )  bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( new TYPE_3 ( VAR_1 , VAR_6 ) ) (  install ( new TYPE_4 ( VAR_1 , VAR_6 ) ) )  install ( new TYPE_4 ( VAR_1 , VAR_6 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  type = type . METHOD_2 ( ) )  type = type . METHOD_2 ( ) ( WHILE WHILE ( COND ! ( VAR_1 class . getName ( ) . equals ( type . METHOD_3 ( ) ) ) ) COND ! ( VAR_1 class . getName ( ) . equals ( type . METHOD_3 ( ) ) ) ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_4 ( type ) . length ) > 0 ) COND ( TYPE_2 . METHOD_4 ( type ) . length ) > 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  type = type . METHOD_2 ( ) )  type = type . METHOD_2 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) COND ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  return new TYPE_1 ( ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) ) ; )  return new TYPE_1 ( ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( THEN THEN (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) )  revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) (  METHOD_6 ( r , ( - 2 ) ) )  METHOD_6 ( r , ( - 2 ) ) (  r = METHOD_7 ( r . getChangeId ( ) ) )  r = METHOD_7 ( r . getChangeId ( ) ) (  METHOD_6 ( r , ( - 2 ) ) )  METHOD_6 ( r , ( - 2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  revision ( r ) . submit ( ) )  revision ( r ) . submit ( ) ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_4 ( project ) ) INIT = VAR_1 . METHOD_4 ( project ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( repo . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) . isEqualTo ( r . METHOD_7 ( ) ) )  com.google.common.truth.Truth.assertThat ( repo . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) . isEqualTo ( r . METHOD_7 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) ) ) )  assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) ) ) (  assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_5 ) + STRING_6 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) + ( VAR_1 ) ) ) ) )  assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_5 ) + STRING_6 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) + ( VAR_1 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . to ( VAR_2 class ) )  bind ( VAR_1 class ) . to ( VAR_2 class ) (  factory ( VAR_3 . Factory class ) )  factory ( VAR_3 . Factory class ) (  factory ( VAR_4 . Factory class ) )  factory ( VAR_4 . Factory class ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) (  factory ( VAR_6 . Factory class ) )  factory ( VAR_6 . Factory class ) (  factory ( VAR_7 . Factory class ) )  factory ( VAR_7 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Id ) TYPE TYPE_3.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_4 . METHOD_2 ( getRefName ( ) , VAR_4 . METHOD_3 ( ) ) ) && ( VAR_4 . METHOD_4 ( ) . equals ( VAR_2 ) ) ) COND ( TYPE_4 . METHOD_2 ( getRefName ( ) , VAR_4 . METHOD_3 ( ) ) ) && ( VAR_4 . METHOD_4 ( ) . equals ( VAR_2 ) ) ( THEN THEN (  VAR_3 . add ( VAR_4 ) )  VAR_3 . add ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_3 . METHOD_2 ( ) ) ) INIT = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_3 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_3 ( ) ) COND VAR_4 . METHOD_3 ( ) ( THEN THEN (  VAR_1 += VAR_4 . METHOD_2 ( ) )  VAR_1 += VAR_4 . METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_5 . METHOD_3 ( ) ) COND VAR_5 . METHOD_3 ( ) ( THEN THEN (  VAR_1 += VAR_5 . METHOD_2 ( ) )  VAR_1 += VAR_5 . METHOD_2 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME set ) NAME set ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( set . METHOD_2 ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( set . METHOD_2 ( ) ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; )  return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  java.util.Collections . METHOD_1 ( VAR_1 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; } } ) )  java.util.Collections . METHOD_1 ( VAR_1 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; } } ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( ( VAR_1 + STRING_1 ) , 1 , p . METHOD_2 ( ) ) )  assertEquals ( ( VAR_1 + STRING_1 ) , 1 , p . METHOD_2 ( ) ) (  METHOD_3 ( ( VAR_1 + STRING_1 ) , c , p . METHOD_4 ( 0 ) ) )  METHOD_3 ( ( VAR_1 + STRING_1 ) , c , p . METHOD_4 ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return new TYPE_2 ( ) ; )  return new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_3 ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; )  return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return new TYPE_6 ( ) ; )  return new TYPE_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_7 ( ( STRING_1 + VAR_2 ) ) ; )  throw new TYPE_7 ( ( STRING_1 + VAR_2 ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( VAR_3 class ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 class ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( VAR_3 class ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 class ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_4 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( CHAR_1 ) )  VAR_1 . append ( CHAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_3 = false )  VAR_3 = false ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( CHAR_2 ) )  VAR_1 . append ( CHAR_2 ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) )  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( VAR_6 ) )  VAR_1 . append ( VAR_6 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . append ( CHAR_3 ) )  VAR_1 . append ( CHAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN Project.NameKey ) RETURN Project.NameKey ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  in . name = ( VAR_4 ) + VAR_1 )  in . name = ( VAR_4 ) + VAR_1 (  VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null )  VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null (  VAR_6 = VAR_3 )  VAR_6 = VAR_3 (  return METHOD_1 ( in ) ; )  return METHOD_1 ( in ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_2 ( ) . label ( STRING_3 , 2 ) ) ) INIT = VAR_1 . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_2 ( ) . label ( STRING_3 , 2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ) VAR VAR (  assertEquals ( STRING_3 , VAR_3 . toString ( ) ) )  assertEquals ( STRING_3 , VAR_3 . toString ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_4 ) , STRING_4 ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_4 ) , STRING_4 ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) )  VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) (  assertEquals ( VAR_3 , VAR_4 ) )  assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN PatchSet.Id ) RETURN PatchSet.Id ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND magicBranch . edit ) COND magicBranch . edit ( THEN THEN (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( TYPE_2 . METHOD_3 ( ) ) ) COND VAR_1 == ( TYPE_2 . METHOD_3 ( ) ) ( THEN THEN (  return METHOD_4 ( db ) ; )  return METHOD_4 ( db ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return METHOD_4 ( db ) ; )  return METHOD_4 ( db ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_3 . update ( 1 ) )  VAR_3 . update ( 1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ) INIT = VAR_2 . create ( TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ) INIT = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME getChange ) NAME getChange ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = VAR_2 . get ( ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) + STRING_2 ) ) ) INIT = VAR_2 . get ( ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) + STRING_2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_1 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_1 ( ) ) (  return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 . ChangeInfo class ) ; )  return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 . ChangeInfo class ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( IF IF ( COND sshd ) COND sshd ( THEN THEN (  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  modules.add ( new TYPE_3 ( ) ) )  modules.add ( new TYPE_3 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  modules.add ( new TYPE_4 ( ) ) )  modules.add ( new TYPE_4 ( ) ) ) THEN THEN ( ELSE ELSE (  modules.add ( new TYPE_5 ( ) ) )  modules.add ( new TYPE_5 ( ) ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  modules.add ( new TYPE_6 ( ) ) )  modules.add ( new TYPE_6 ( ) ) ) ELSE ELSE ) IF IF (  return VAR_1 . METHOD_3 ( modules ) ; )  return VAR_1 . METHOD_3 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) )  TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = TYPE_1 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ) INIT = TYPE_1 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ) VAR VAR (  TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) )  TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) (  return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; )  return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( admin , VAR_2 ) )  METHOD_3 ( admin , VAR_2 ) (  METHOD_4 ( admin ) )  METHOD_4 ( admin ) (  METHOD_5 ( VAR_1 , VAR_3 ) )  METHOD_5 ( VAR_1 , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 , admin , VAR_3 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_11 ) )  assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 , admin , VAR_3 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_11 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME in ) NAME in ( INIT = new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 , STRING_1 ) , STRING_2 ) ) ) INIT = new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 , STRING_1 ) , STRING_2 ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( in ) )  VAR_2 . METHOD_2 ( in ) ) BLOCK BLOCK ( FINALLY FINALLY (  in . close ( ) )  in . close ( ) ) FINALLY FINALLY ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 ) ) INIT = new TYPE_5 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME u ) NAME u ( INIT = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_3 ( ) , VAR_1 . METHOD_2 ( ) , TYPE_7 . METHOD_4 ( ) ) ) INIT = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_3 ( ) , VAR_1 . METHOD_2 ( ) , TYPE_7 . METHOD_4 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) )  u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ) BLOCK BLOCK ) TRY TRY (  return VAR_4 . change ; )  return VAR_4 . change ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( id . equals ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ) ) ) ) COND ! ( id . equals ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  p . METHOD_3 ( walk . METHOD_4 ( ) , walk . METHOD_5 ( id ) ) )  p . METHOD_3 ( walk . METHOD_4 ( ) , walk . METHOD_5 ( id ) ) (  return p ; )  return p ; ) THEN THEN ( ELSE ELSE (  return new TYPE_3 ( ) ; )  return new TYPE_3 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ( INIT = cd . change ( ) . currentPatchSetId ( ) ) INIT = cd . change ( ) . currentPatchSetId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ctl ) NAME ctl ( INIT = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ) INIT = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ) VAR VAR (  return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , ctl , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) ) ) ; )  return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , ctl , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( p . METHOD_2 ( ) ) ) COND i < ( p . METHOD_2 ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , p . METHOD_4 ( i ) ) , VAR_2 ) )  VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , p . METHOD_4 ( i ) ) , VAR_2 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( ( STRING_1 + p ) , e ) ; )  throw new TYPE_4 ( ( STRING_1 + p ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) (  VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) )  VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , METHOD_4 ( ) . METHOD_5 ( ) ) (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ) IF IF (  return VAR_4 . create ( VAR_1 ) ; )  return VAR_4 . create ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . changes ( ) . get ( psId . getParentKey ( ) ) ) INIT = db . changes ( ) . get ( psId . getParentKey ( ) ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ( INIT = VAR_1 . create ( db , c ) ) INIT = VAR_1 . create ( db , c ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = VAR_2 . get ( db , notes , psId ) ) INIT = VAR_2 . get ( db , notes , psId ) ) VAR VAR (  return ps != null ? ps . METHOD_2 ( ) : null ; )  return ps != null ? ps . METHOD_2 ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_7 ( VAR_1 ) ) INIT = new TYPE_7 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_8 . METHOD_2 ( VAR_6 ) ) INIT = TYPE_8 . METHOD_2 ( VAR_6 ) ) VAR VAR (  VAR_5 . METHOD_3 ( VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_3 ) (  VAR_4 . METHOD_3 ( VAR_2 , key . get ( ) , VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_2 , key . get ( ) , VAR_5 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return this . apply ( new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 , VAR_3 . get ( ) ) ) ) ; )  return this . apply ( new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 , VAR_3 . get ( ) ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( VAR_1 . get ( ) ) ; )  throw new TYPE_3 ( VAR_1 . get ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . equals ( TYPE_2 . METHOD_2 ( VAR_1 . getValue ( VAR_1 . METHOD_3 ( ) ) ) ) ) COND TYPE_1 . equals ( TYPE_2 . METHOD_2 ( VAR_1 . getValue ( VAR_1 . METHOD_3 ( ) ) ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( false ) )  VAR_2 . METHOD_4 ( false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_4 . FALSE ) )  VAR_3 . METHOD_5 ( VAR_4 . FALSE ) (  TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 ) )  TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( VAR_1 . METHOD_7 ( ) ) )  VAR_2 . METHOD_4 ( VAR_1 . METHOD_7 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<?> ) TYPE java.util.List<?> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ( ( java.lang.String ) ( VAR_1 ) ) ) ) INIT = VAR_3 . METHOD_2 ( ( ( java.lang.String ) ( VAR_1 ) ) ) ) VAR VAR (  return ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ? VAR_2 : null ; )  return ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ? VAR_2 : null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ) INIT = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ) VAR VAR (  r . METHOD_2 ( ) )  r . METHOD_2 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_3 ) INIT = STRING_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  r = VAR_2 . put ( ( STRING_2 + VAR_3 ) , in ) )  r = VAR_2 . put ( ( STRING_2 + VAR_3 ) , in ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ( INIT = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_3 ) ) . getProject ( ) ) INIT = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_3 ) ) . getProject ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , project . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , project . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Change ) RETURN TYPE_1.Change ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( change . getStatus ( ) ) == ( VAR_1 ) ) && ( change . currentPatchSetId ( ) . equals ( VAR_2 ) ) ) COND ( ( change . getStatus ( ) ) == ( VAR_1 ) ) && ( change . currentPatchSetId ( ) . equals ( VAR_2 ) ) ( THEN THEN (  change . METHOD_1 ( VAR_3 ) )  change . METHOD_1 ( VAR_3 ) (  TYPE_2 . METHOD_2 ( change ) )  TYPE_2 . METHOD_2 ( change ) (  return change ; )  return change ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ( ) ) ) COND i < ( VAR_1 . length ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . get ( i ) . METHOD_2 ( path ) )  VAR_1 . get ( i ) . METHOD_2 ( path ) ) BLOCK BLOCK ) FOR FOR (  return TYPE_3 . METHOD_3 ( VAR_1 ) ; )  return TYPE_3 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.AccountGroup ) RETURN com.google.gerrit.reviewdb.client.AccountGroup ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) )  VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) ) ) VAR VAR (  return VAR_4 . get ( VAR_3 ) ; )  return VAR_4 . get ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_2> ) TYPE TYPE_3<TYPE_2> ( NAME m ) NAME m ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4<TYPE_2>> ) TYPE java.util.List<TYPE_4<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( type ) ) INIT = VAR_2 . METHOD_1 ( type ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4<TYPE_2> ) TYPE TYPE_4<TYPE_2> ( NAME b ) NAME b ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  m . put ( STRING_1 , b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) )  m . put ( STRING_1 , b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return m ; )  return m ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . display ( result , VAR_1 ) )  VAR_2 . display ( result , VAR_1 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_3 = false )  VAR_3 = false (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_1 > ( this , new TYPE_3 < TYPE_1 > ( ) { public void onSuccess ( final TYPE_1 result ) { VAR_2 . display ( result , VAR_1 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_3 ( ) ; } } } ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_1 > ( this , new TYPE_3 < TYPE_1 > ( ) { public void onSuccess ( final TYPE_1 result ) { VAR_2 . display ( result , VAR_1 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_3 ( ) ; } } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( change ) ) INIT = TYPE_2 . METHOD_2 ( change ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME refs ) NAME refs ( INIT = ( ( this . refs ) != null ) ? this . refs : new TYPE_4 ( repo ) ) INIT = ( ( this . refs ) != null ) ? this . refs : new TYPE_4 ( repo ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( refs ) ) ) ) COND ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( refs ) ) ) ( THEN THEN (  return METHOD_4 ( repo ) ; )  return METHOD_4 ( repo ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . METHOD_1 ( repo ) ; )  return super . METHOD_1 ( repo ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3,TYPE_4> ) TYPE TYPE_2<TYPE_3,TYPE_4> ( NAME view ) NAME view ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  view = VAR_2 )  view = VAR_2 ) THEN THEN ( ELSE ELSE (  view = VAR_3 )  view = VAR_3 ) ELSE ELSE ) IF IF (  view . apply ( VAR_4 . get ( ) . METHOD_2 ( revision , TYPE_5 . METHOD_3 ( path ) ) , new TYPE_4 ( ) ) )  view . apply ( VAR_4 . get ( ) . METHOD_2 ( revision , TYPE_5 . METHOD_3 ( path ) ) , new TYPE_4 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME group ) NAME group ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND ( TYPE_3 . METHOD_2 ( group ) ) && ( ( ( TYPE_4 ) ( group ) ) . METHOD_3 ( ) ) ) COND ( TYPE_3 . METHOD_2 ( group ) ) && ( ( ( TYPE_4 ) ( group ) ) . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) (  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_2 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_5 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_5 ) (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_6 ) . isEqualTo ( 1 ) )  com.google.common.truth.Truth.assertThat ( VAR_6 ) . isEqualTo ( 1 ) ( IF IF ( COND name . equals ( STRING_1 ) ) COND name . equals ( STRING_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND name . equals ( STRING_2 ) ) COND name . equals ( STRING_2 ) ( THEN THEN (  VAR_1 . label = STRING_3 )  VAR_1 . label = STRING_3 ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR ( IF IF ( COND ! ( METHOD_6 ( ) . METHOD_7 ( ) ) ) COND ! ( METHOD_6 ( ) . METHOD_7 ( ) ) ( THEN THEN (  VAR_1 . METHOD_8 ( VAR_3 , VAR_4 . METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( VAR_3 , VAR_4 . METHOD_9 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  METHOD_10 ( ) )  METHOD_10 ( ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME projects ) NAME projects ( INIT = config . METHOD_2 ( ) ) INIT = config . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( projects . length ) == 1 ) INIT = ( projects . length ) == 1 ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = projects [ 0 ] ) INIT = projects [ 0 ] ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_3 ( VAR_2 ) ) != ( VAR_3 ) ) COND ( TYPE_1 . METHOD_3 ( VAR_2 ) ) != ( VAR_3 ) ( THEN THEN (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Account ) TYPE TYPE_1.Account ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND account != null ) COND account != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ) INIT = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( account . METHOD_3 ( ) ) != null ) COND ( account . METHOD_3 ( ) ) != null ( THEN THEN (  result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 )  result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ) THEN THEN ) IF IF (  return result ; )  return result ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ChangeInfo> ) TYPE TYPE_1<TYPE_2.ChangeInfo> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ( ( ( VAR_3 ) + changeId ) + STRING_1 ) ) ) INIT = new TYPE_3 ( ( ( ( VAR_3 ) + changeId ) + STRING_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME msg ) NAME msg ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  msg . METHOD_2 ( message ) )  msg . METHOD_2 ( message ) (  VAR_2 . METHOD_3 ( msg , VAR_1 ) )  VAR_2 . METHOD_3 ( msg , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ( TRY TRY ( BLOCK BLOCK (  VAR_3 . apply ( rsrc , in ) )  VAR_3 . apply ( rsrc , in ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.PatchSetApproval> ) TYPE java.util.List<TYPE_1.PatchSetApproval> ( NAME approvals ) NAME approvals ( INIT = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ) INIT = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.PatchSetApproval ) TYPE TYPE_1.PatchSetApproval ( NAME a ) NAME a ( IN approvals ) IN approvals ( BLOCK BLOCK (  a . METHOD_5 ( change ) )  a . METHOD_5 ( change ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  db . METHOD_2 ( ) . update ( approvals ) )  db . METHOD_2 ( ) . update ( approvals ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME display ) NAME display ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  currentPatchSetId = VAR_2 . METHOD_3 ( ) )  currentPatchSetId = VAR_2 . METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME ps ) NAME ps ( IN VAR_1 . METHOD_4 ( ) ) IN VAR_1 . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND ps == VAR_2 ) COND ps == VAR_2 ( THEN THEN (  add ( new TYPE_3 ( VAR_3 , VAR_1 , VAR_1 . METHOD_5 ( ) ) ) )  add ( new TYPE_3 ( VAR_3 , VAR_1 , VAR_1 . METHOD_5 ( ) ) ) ) THEN THEN ( ELSE ELSE (  add ( new TYPE_3 ( VAR_3 , VAR_1 , ps ) ) )  add ( new TYPE_3 ( VAR_3 , VAR_1 , ps ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME ps ) NAME ps ( INIT = db . patchSets ( ) . get ( id ) ) INIT = db . patchSets ( ) . get ( id ) ) VAR VAR ( IF IF ( COND ps == null ) COND ps == null ( THEN THEN (  throw new TYPE_3 . OrmException ( ( ( STRING_1 + id ) + STRING_2 ) ) ; )  throw new TYPE_3 . OrmException ( ( ( STRING_1 + id ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  return ps . METHOD_2 ( ) ; )  return ps . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( IF IF ( COND info . METHOD_2 ( ) . equals ( info . METHOD_3 ( ) ) ) COND info . METHOD_2 ( ) . equals ( info . METHOD_3 ( ) ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_4 ( ) )  VAR_1 = TYPE_2 . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = TYPE_2 . METHOD_5 ( ) )  VAR_1 = TYPE_2 . METHOD_5 ( ) ) ELSE ELSE ) IF IF (  VAR_2 . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_6 ( VAR_1 ) (  VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( info . METHOD_3 ( ) ) ) )  VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( info . METHOD_3 ( ) ) ) (  METHOD_8 ( ( ( FLOAT_1 - ( VAR_4 ) ) - ( METHOD_9 ( VAR_5 ) ) ) ) )  METHOD_8 ( ( ( FLOAT_1 - ( VAR_4 ) ) - ( METHOD_9 ( VAR_5 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME group ) NAME group ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND group != null ) COND group != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ref ) NAME ref ( INIT = VAR_1 . get ( group . METHOD_2 ( ) ) ) INIT = VAR_1 . get ( group . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND ref != null ) COND ref != null ( THEN THEN (  return ref ; )  return ref ; ) THEN THEN ) IF IF (  VAR_1 . put ( group . METHOD_2 ( ) , group ) )  VAR_1 . put ( group . METHOD_2 ( ) , group ) ) THEN THEN ) IF IF (  return group ; )  return group ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME repo ) NAME repo ( INIT = VAR_1 . get ( name . get ( ) . METHOD_1 ( ) ) ) INIT = VAR_1 . get ( name . get ( ) . METHOD_1 ( ) ) ) VAR VAR ( IF IF ( COND repo != null ) COND repo != null ( THEN THEN (  return repo ; )  return repo ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( name . get ( ) ) ; )  throw new TYPE_2 ( name . get ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3.PatchSetApproval> ) TYPE TYPE_2<TYPE_3.PatchSetApproval> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  p . approvals = new java.util.ArrayList < TYPE_4 > ( VAR_1 . size ( ) ) )  p . approvals = new java.util.ArrayList < TYPE_4 > ( VAR_1 . size ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3.PatchSetApproval ) TYPE TYPE_3.PatchSetApproval ( NAME a ) NAME a ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( a . getValue ( ) ) != 0 ) COND ( a . getValue ( ) ) != 0 ( THEN THEN (  VAR_2 . add ( METHOD_2 ( a ) ) )  VAR_2 . add ( METHOD_2 ( a ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN (  p . approvals = null )  p . approvals = null ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = p . METHOD_2 ( ) ) INIT = p . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) COND ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ( THEN THEN (  return TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; )  return TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; )  return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND e == null ) COND e == null ( THEN THEN (  e = new TYPE_3 ( this , project . get ( ) , VAR_3 , VAR_1 ) )  e = new TYPE_3 ( this , project . get ( ) , VAR_3 , VAR_1 ) (  VAR_4 . METHOD_1 ( e , VAR_5 , VAR_6 ) )  VAR_4 . METHOD_1 ( e , VAR_5 , VAR_6 ) (  VAR_2 . put ( VAR_1 , e ) )  VAR_2 . put ( VAR_1 , e ) ) THEN THEN ) IF IF (  e . METHOD_2 ( ref ) )  e . METHOD_2 ( ref ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME revision ) NAME revision ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( user . METHOD_2 ( ) , revision . METHOD_3 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; )  return new TYPE_1 ( user . METHOD_2 ( ) , revision . METHOD_3 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_2 ( ) )  VAR_1 = new TYPE_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME update ) NAME update ( INIT = METHOD_2 ( VAR_2 , VAR_1 ) ) INIT = METHOD_2 ( VAR_2 , VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . update ( VAR_4 ) )  VAR_3 . update ( VAR_4 ) (  org.junit.Assert . METHOD_3 ( STRING_1 ) )  org.junit.Assert . METHOD_3 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4.OrmException ) TYPE TYPE_4.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) )  org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_6 ( update , 1 ) )  METHOD_6 ( update , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME file ) NAME file ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 . get ( ) . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ) IN VAR_4 . get ( ) . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ( BLOCK BLOCK ( IF IF ( COND ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . name ) ) ) && ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . url ) ) ) ) COND ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . name ) ) ) && ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . url ) ) ) ( THEN THEN (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . get ( ) . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) )  VAR_2 . get ( ) . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ; )  return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 , VAR_11 ) . METHOD_6 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 , VAR_11 ) . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_2 . of ( STRING_1 , TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_2 . of ( STRING_1 , TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) ) ) (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_6 , VAR_7 . Collections < java.lang.String , java.util.ArrayList < TYPE_4 > > METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_6 , VAR_7 . Collections < java.lang.String , java.util.ArrayList < TYPE_4 > > METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( ) ) INIT = repo . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ( INIT = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) INIT = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) VAR VAR (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  return id ; )  return id ; (  METHOD_4 ( INT_1 ) )  METHOD_4 ( INT_1 ) ( VAR VAR ( TYPE TYPE_2.a ) TYPE TYPE_2.a ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME to ) NAME to ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME revision ) NAME revision ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ( INIT = res . getAccountId ( ) ) INIT = res . getAccountId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME VAR_2 ) NAME VAR_2 ( INIT = res . METHOD_2 ( ) ) INIT = res . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_4 . METHOD_3 ( key ) )  VAR_4 . METHOD_3 ( key ) ) THEN THEN ) IF IF (  key = VAR_4 . METHOD_4 ( id ) )  key = VAR_4 . METHOD_4 ( id ) (  VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 , null ) )  VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 , null ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_2> ) TYPE java.util.Map<java.lang.String,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) INIT = VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4<java.lang.String,TYPE_2> ) TYPE TYPE_4<java.lang.String,TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . getValue ( ) ) INIT = VAR_3 . getValue ( ) ) VAR VAR ( IF IF ( COND ( VAR_4 . type ) == null ) COND ( VAR_4 . type ) == null ( THEN THEN (  VAR_4 . type = VAR_5 )  VAR_4 . type = VAR_5 ) THEN THEN ) IF IF (  VAR_4 . name = VAR_3 . getKey ( ) )  VAR_4 . name = VAR_3 . getKey ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . values ( ) ; )  return VAR_1 . values ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) )  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) (  bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) )  bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) (  factory ( VAR_7 . Factory class ) )  factory ( VAR_7 . Factory class ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) (  install ( VAR_11 ) )  install ( VAR_11 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . getName ( ) . METHOD_3 ( STRING_1 ) ) COND VAR_3 . getName ( ) . METHOD_3 ( STRING_1 ) ( THEN THEN (  return VAR_3 . getValue ( ) ; )  return VAR_3 . getValue ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME m ) NAME m ( INIT = TYPE_2 . METHOD_3 ( repo , c , VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( repo , c , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . add ( ( STRING_1 + VAR_4 ) ) )  VAR_3 . add ( ( STRING_1 + VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_3 ) )  com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME revision ) NAME revision ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . create ( VAR_2 . METHOD_1 ( change , TYPE_3 . METHOD_2 ( id ) ) ) ; )  return VAR_1 . create ( VAR_2 . METHOD_1 ( change , TYPE_3 . METHOD_2 ( id ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( db . METHOD_3 ( ) . METHOD_4 ( changeId ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_2 ( db . METHOD_3 ( ) . METHOD_4 ( changeId ) . METHOD_5 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME m ) NAME m ( IN VAR_1 . METHOD_6 ( ) ) IN VAR_1 . METHOD_6 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_7 ( m . METHOD_8 ( ) ) )  VAR_2 . METHOD_7 ( m . METHOD_8 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Factory ) TYPE TYPE_1.Factory ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , project , user , VAR_2 , VAR_3 , VAR_4 , TYPE_7 . of ( ) ) )  METHOD_1 ( VAR_1 , project , user , VAR_2 , VAR_3 , VAR_4 , TYPE_7 . of ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_3 . get ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ) INIT = VAR_3 . get ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) (  return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 class ) ; )  return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 class ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.Id ) TYPE TYPE_4.Id ( NAME VAR_1 ) NAME VAR_1 ( INIT = getAccountId ( ) ) INIT = getAccountId ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . getAccountId ( ) . equals ( getAccountId ( ) ) ) ) COND ! ( VAR_2 . getAccountId ( ) . equals ( getAccountId ( ) ) ) ( THEN THEN (  throw new TYPE_5 ( ( ( ( ( STRING_1 + ( VAR_2 . getAccountId ( ) ) ) + STRING_2 ) + STRING_3 ) + ( getAccountId ( ) ) ) ) ; )  throw new TYPE_5 ( ( ( ( ( STRING_1 + ( VAR_2 . getAccountId ( ) ) ) + STRING_2 ) + STRING_3 ) + ( getAccountId ( ) ) ) ) ; ) THEN THEN ) IF IF (  db . METHOD_1 ( ) . METHOD_2 ( java.util.Collections.singleton ( VAR_2 ) ) )  db . METHOD_1 ( ) . METHOD_2 ( java.util.Collections.singleton ( VAR_2 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_2 > ( 2 ) ) INIT = new java.util.ArrayList < TYPE_2 > ( 2 ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_3 ) )  TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_3 ) (  TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_4 ) )  TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_4 ) (  return java.util.Collections . METHOD_4 ( VAR_2 ) ; )  return java.util.Collections . METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN Account.Id ) RETURN Account.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ) INIT = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ) VAR VAR (  return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; )  return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ( VAR VAR ( TYPE com.google.gerrit.extensions.registration.DynamicSet<TYPE_2> ) TYPE com.google.gerrit.extensions.registration.DynamicSet<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = com.google.gerrit.extensions.registration.DynamicSet . METHOD_3 ( ) ) INIT = com.google.gerrit.extensions.registration.DynamicSet . METHOD_3 ( ) ) VAR VAR (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) (  VAR_4 = new TYPE_3 ( null , VAR_3 , null , null , null ) )  VAR_4 = new TYPE_3 ( null , VAR_3 , null , null , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( ) ) COND METHOD_1 ( ) ( THEN THEN ( IF IF ( COND ( ( result . length ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ) COND ( ( result . length ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME c ) NAME c ( INIT = result . get ( 0 ) ) INIT = result . get ( 0 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ( INIT = c . METHOD_3 ( ) ) INIT = c . METHOD_3 ( ) ) VAR VAR (  TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ) THEN THEN ( ELSE ELSE (  display ( result ) )  display ( result ) (  this . display ( ) )  this . display ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME index ) NAME index ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2<TYPE_1,TYPE_3> ) TYPE TYPE_2<TYPE_1,TYPE_3> ( NAME i ) NAME i ( IN METHOD_1 ( ) ) IN METHOD_1 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_3> ) TYPE TYPE_4<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  i . METHOD_4 ( VAR_2 . get ( ) ) )  i . METHOD_4 ( VAR_2 . get ( ) ) ) THEN THEN ( ELSE ELSE (  i . delete ( VAR_1 ) )  i . delete ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_5 ( VAR_1 . get ( ) ) )  METHOD_5 ( VAR_1 . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) ) )  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = cfg . METHOD_1 ( VAR_2 ) ) INIT = cfg . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . size ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . add ( TYPE_3 . METHOD_3 ( cfg , name ) ) )  VAR_3 . add ( TYPE_3 . METHOD_3 ( cfg , name ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_4 . METHOD_4 ( VAR_3 ) ; )  return TYPE_4 . METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.util.Set<TYPE_1> ) RETURN java.util.Set<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_3 ( VAR_3 ) ) INIT = VAR_2 . METHOD_3 ( VAR_3 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return TYPE_2 . METHOD_1 ( repo , TYPE_2 . METHOD_4 ( repo ) ) ; )  return TYPE_2 . METHOD_1 ( repo , TYPE_2 . METHOD_4 ( repo ) ) ; ) BLOCK BLOCK ) TRY TRY ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_5 ( db . METHOD_6 ( ) . METHOD_1 ( ) . METHOD_7 ( ) ) ; )  return TYPE_1 . METHOD_5 ( db . METHOD_6 ( ) . METHOD_1 ( ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( IN TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ) IN TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( t ) ) ) COND ! ( VAR_2 . METHOD_3 ( t ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_1 , false ) )  VAR_2 . METHOD_4 ( VAR_1 , false ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_4 ( VAR_1 , true ) )  VAR_2 . METHOD_4 ( VAR_1 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.Repository ) RETURN org.eclipse.jgit.lib.Repository ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( name ) ) COND VAR_1 . METHOD_2 ( name ) ( THEN THEN (  return VAR_1 . get ( name ) ; )  return VAR_1 . get ( name ) ; ) THEN THEN ) IF IF (  name = TYPE_1 . METHOD_3 ( VAR_2 , name ) )  name = TYPE_1 . METHOD_3 ( VAR_2 , name ) ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) INIT = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) VAR VAR (  VAR_1 . put ( name , repo ) )  VAR_1 . put ( name , repo ) (  return repo ; )  return repo ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctx ) NAME ctx ( INIT = VAR_2 . METHOD_2 ( VAR_3 , null ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . set ( ctx ) ) INIT = VAR_2 . set ( ctx ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . set ( VAR_4 ) )  VAR_2 . set ( VAR_4 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ) INIT = db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ) VAR VAR (  return ! ( VAR_2 . isEmpty ( ) ) ; )  return ! ( VAR_2 . isEmpty ( ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4.OrmException ) TYPE TYPE_4.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME p ) NAME p ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = project . get ( ) ) INIT = project . get ( ) ) VAR VAR ( IF IF ( COND ! ( n . METHOD_1 ( STRING_1 ) ) ) COND ! ( n . METHOD_1 ( STRING_1 ) ) ( THEN THEN (  n += STRING_1 )  n += STRING_1 ) THEN THEN ) IF IF (  TYPE_3 . METHOD_2 ( r , STRING_2 , n ) )  TYPE_3 . METHOD_2 ( r , STRING_2 , n ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME group ) NAME group ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_3 ( VAR_1 ) ; )  throw new TYPE_3 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; )  return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1.ChangeInfo> ) RETURN java.util.List<TYPE_1.ChangeInfo> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME query ) NAME query ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME changes ) NAME changes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.ChangeInfo> ) TYPE java.util.List<TYPE_1.ChangeInfo> ( NAME result ) NAME result ( INIT = query . get ( ) ) INIT = query . get ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_5 . METHOD_2 ( result ) ) INIT = TYPE_5 . METHOD_2 ( result ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( query . METHOD_4 ( ) ) . METHOD_5 ( TYPE_5 . METHOD_2 ( changes ) ) . METHOD_6 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( query . METHOD_4 ( ) ) . METHOD_5 ( TYPE_5 . METHOD_2 ( changes ) ) . METHOD_6 ( ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME args ) NAME args ( INIT = VAR_2 . args ) INIT = VAR_2 . args ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = VAR_4 . get ( VAR_5 . getAccountId ( ) ) . METHOD_2 ( ) ) INIT = VAR_4 . get ( VAR_5 . getAccountId ( ) ) . METHOD_2 ( ) ) VAR VAR (  VAR_6 . METHOD_3 ( VAR_7 , VAR_8 . METHOD_4 ( ) , VAR_8 . METHOD_5 ( ) , account ) )  VAR_6 . METHOD_3 ( VAR_7 , VAR_8 . METHOD_4 ( ) , VAR_8 . METHOD_5 ( ) , account ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) INIT = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) VAR VAR (  cd . METHOD_2 ( user ) )  cd . METHOD_2 ( user ) ( IF IF ( COND TYPE_5 . METHOD_3 ( cfg ) ) COND TYPE_5 . METHOD_3 ( cfg ) ( THEN THEN (  return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; )  return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; )  return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ! ( VAR_3 . isEmpty ( ) ) ) INIT = ! ( VAR_3 . isEmpty ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( IN VAR_3 . values ( ) ) IN VAR_3 . values ( ) ( BLOCK BLOCK (  p . METHOD_1 ( ) )  p . METHOD_1 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_2 . METHOD_4 ( ) )  TYPE_2 . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( project , revision , file ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( project , revision , file ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . name = info . name )  VAR_2 . name = info . name (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_2 . url = info . url )  VAR_2 . url = info . url (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME rpc ) NAME rpc ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Key<TYPE_4> ) TYPE TYPE_3.Key<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . get ( VAR_3 class , TYPE_6 . create ( ) ) ) INIT = TYPE_5 . get ( VAR_3 class , TYPE_6 . create ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_7 ( VAR_1 ) ) INIT = new TYPE_7 ( VAR_1 ) ) VAR VAR (  METHOD_1 ( ( ( VAR_5 ) + name ) ) . METHOD_2 ( VAR_2 ) )  METHOD_1 ( ( ( VAR_5 ) + name ) ) . METHOD_2 ( VAR_2 ) (  bind ( VAR_2 ) . METHOD_3 ( VAR_4 ) . in ( VAR_6 ) )  bind ( VAR_2 ) . METHOD_3 ( VAR_4 ) . in ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = name ( STRING_1 ) ) INIT = name ( STRING_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) )  com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( name , VAR_3 ) ) INIT = METHOD_2 ( name , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) )  VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) (  VAR_4 . METHOD_3 ( name , STRING_3 , new java.lang.String [ ] { } ) )  VAR_4 . METHOD_3 ( name , STRING_3 , new java.lang.String [ ] { } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw METHOD_2 ( STRING_1 , psId . get ( ) ) ; )  throw METHOD_2 ( STRING_1 , psId . get ( ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND line . METHOD_3 ( STRING_2 ) ) COND line . METHOD_3 ( STRING_2 ) ( THEN THEN (  METHOD_4 ( psId , VAR_1 , line ) )  METHOD_4 ( psId , VAR_1 , line ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( psId , VAR_1 , VAR_2 , line ) )  METHOD_5 ( psId , VAR_1 , VAR_2 , line ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ( INIT = res . getAccountId ( ) ) INIT = res . getAccountId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME VAR_2 ) NAME VAR_2 ( INIT = res . METHOD_2 ( ) ) INIT = res . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_4 . METHOD_3 ( key ) )  VAR_4 . METHOD_3 ( key ) ) THEN THEN ) IF IF (  key = VAR_4 . METHOD_4 ( id ) )  key = VAR_4 . METHOD_4 ( id ) (  VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) )  VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( rsrc . METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( rsrc . METHOD_3 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( repo . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . isEmpty ( ) ) ) COND ! ( repo . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . isEmpty ( ) ) ( THEN THEN (  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , rsrc . getName ( ) ) ) ; )  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , rsrc . getName ( ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.PatchSetApproval ) TYPE TYPE_1.PatchSetApproval ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) IN VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ( BLOCK BLOCK ( IF IF ( COND ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) COND ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  add ( VAR_4 , VAR_2 . getAccountId ( ) ) )  add ( VAR_4 , VAR_2 . getAccountId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2.OrmException ) TYPE TYPE_2.OrmException ( NAME err ) NAME err ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( db . get ( ) , rsrc . getId ( ) ) )  VAR_2 . METHOD_2 ( db . get ( ) , rsrc . getId ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( TYPE_7 . METHOD_3 ( rsrc . getId ( ) . toString ( ) ) ) ; )  throw new TYPE_4 ( TYPE_7 . METHOD_3 ( rsrc . getId ( ) . toString ( ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return TYPE_1 . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME p ) NAME p ( INIT = TYPE_6 . METHOD_3 ( ) ) INIT = TYPE_6 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND p == null ) COND p == null ( THEN THEN (  p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) )  p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) ) THEN THEN ) IF IF (  result . METHOD_6 ( p ) )  result . METHOD_6 ( p ) (  TYPE_6 . METHOD_7 ( p ) )  TYPE_6 . METHOD_7 ( p ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; if ( p == null ) { p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) ; } result . METHOD_6 ( p ) ; TYPE_6 . METHOD_7 ( p ) ; } } ) )  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; if ( p == null ) { p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) ; } result . METHOD_6 ( p ) ; TYPE_6 . METHOD_7 ( p ) ; } } ) (  close ( ) )  close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 . equals ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 ) ) COND VAR_3 . equals ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF (  return ( VAR_3 . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 . METHOD_3 ( ) ) ; )  return ( VAR_3 . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME currentPatchSetId ) NAME currentPatchSetId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ) INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ) VAR VAR (  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) )  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = e . getValue ( ) ) INIT = e . getValue ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) )  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) (  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) )  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME view ) NAME view ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = TYPE_2 . METHOD_2 ( ) )  VAR_1 = TYPE_2 . METHOD_2 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ( INIT = view . METHOD_2 ( ) ) INIT = view . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( token . equals ( VAR_1 ) ) ) COND ! ( token . equals ( VAR_1 ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( token , false ) )  TYPE_2 . METHOD_3 ( token , false ) (  TYPE_3 . METHOD_4 ( token ) )  TYPE_3 . METHOD_4 ( token ) ) THEN THEN ) IF IF ( IF IF ( COND view instanceof TYPE_4 ) COND view instanceof TYPE_4 ( THEN THEN (  VAR_2 = token )  VAR_2 = token ) THEN THEN ) IF IF (  super . METHOD_1 ( view ) )  super . METHOD_1 ( view ) (  view . METHOD_1 ( ) )  view . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . values ( ) ) IN VAR_3 . values ( ) ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_1 , VAR_2 . user ) ) COND METHOD_2 ( VAR_1 , VAR_2 . user ) ( THEN THEN (  VAR_4 . METHOD_3 ( event ) )  VAR_4 . METHOD_3 ( event ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( event ) )  METHOD_4 ( event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List ) RETURN java.util.List ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ( INIT = this ) INIT = this ) VAR VAR ( WHILE WHILE ( COND t . METHOD_2 ( ) ) COND t . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( ( ( TYPE_3 ) ( t ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( ) ) )  VAR_1 . add ( ( ( TYPE_3 ) ( t ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( ) ) (  t = ( ( TYPE_3 ) ( t ) ) . METHOD_5 ( ) . METHOD_4 ( ) )  t = ( ( TYPE_3 ) ( t ) ) . METHOD_5 ( ) . METHOD_4 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 . METHOD_3 ( VAR_1 ) ) IN VAR_2 . METHOD_3 ( VAR_1 ) ( BLOCK BLOCK (  METHOD_4 ( cd . change ( ) ) )  METHOD_4 ( cd . change ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  db . close ( ) )  db . close ( ) (  db = null )  db = null ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException|com.google.gwtorm.server.OrmException ) TYPE java.io.IOException|com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( STRING_1 , e ) )  METHOD_5 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) )  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) )  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) (  assertThat ( VAR_5 ) . METHOD_12 ( ) )  assertThat ( VAR_5 ) . METHOD_12 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_3 , STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , VAR_3 , STRING_1 ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , VAR_3 , STRING_1 ) . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = util . user ( VAR_4 , VAR_3 ) ) INIT = util . user ( VAR_4 , VAR_3 ) ) VAR VAR (  METHOD_5 ( STRING_2 , d . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) )  METHOD_5 ( STRING_2 , d . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 class ) )  VAR_1 . METHOD_2 ( VAR_2 class ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  in . account = user . email )  in . account = user . email (  VAR_3 = STRING_2 )  VAR_3 = STRING_2 (  VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) )  VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = change ( ) ) INIT = change ( ) ) VAR VAR (  VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) )  VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  input . METHOD_2 ( user ) )  input . METHOD_2 ( user ) (  TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( user , VAR_1 ) )  TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( user , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) )  org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) (  org.junit.Assert.assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) )  org.junit.Assert.assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) (  org.junit.Assert.assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) )  org.junit.Assert.assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN AccountGroup.Id ) RETURN AccountGroup.Id ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( user . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( user . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , user . METHOD_4 ( ) ) ) ; )  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , user . METHOD_4 ( ) ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( ) ) INIT = VAR_2 . create ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5.Id ) TYPE TYPE_5.Id ( NAME me ) NAME me ( INIT = user . getAccountId ( ) ) INIT = user . getAccountId ( ) ) VAR VAR (  return VAR_1 . METHOD_5 ( VAR_3 , null , false , null , java.util.Collections.singleton ( me ) , null ) ; )  return VAR_1 . METHOD_5 ( VAR_3 , null , false , null , java.util.Collections.singleton ( me ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ( VAR VAR ( TYPE java.util.Map<TYPE_1,byte[]> ) TYPE java.util.Map<TYPE_1,byte[]> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME git ) NAME git ( INIT = new TYPE_3 ( repo ) ) INIT = new TYPE_3 ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_4 . METHOD_2 ( git , VAR_1 ) )  TYPE_4 . METHOD_2 ( git , VAR_1 ) ) THEN THEN ) IF IF (  return git . commit ( ) . METHOD_3 ( message ) . METHOD_4 ( ) ; )  return git . commit ( ) . METHOD_3 ( message ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) COND ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ( THEN THEN (  return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; )  return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; )  return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_2.ChangeInfo> ) TYPE java.util.List<TYPE_2.ChangeInfo> ( NAME VAR_2 ) NAME VAR_2 ( INIT = query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) ) INIT = query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  diff = VAR_1 )  diff = VAR_1 (  VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) )  VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) (  TYPE_3 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 ) )  TYPE_3 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 ) ( IF IF ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( THEN THEN ( IF IF ( COND ( VAR_2 . METHOD_5 ( VAR_5 ) ) > 0 ) COND ( VAR_2 . METHOD_5 ( VAR_5 ) ) > 0 ( THEN THEN (  VAR_6 . onSuccess ( null ) )  VAR_6 . onSuccess ( null ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( VAR_1 , VAR_6 ) )  METHOD_6 ( VAR_1 , VAR_6 ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_6 . onSuccess ( null ) )  VAR_6 . onSuccess ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  r . add ( e . METHOD_2 ( VAR_1 ) ) )  r . add ( e . METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME put ) NAME put ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . equals ( path ) ) COND TYPE_3 . equals ( path ) ( THEN THEN (  TYPE_4 . METHOD_1 ( id , VAR_1 , VAR_2 ) )  TYPE_4 . METHOD_1 ( id , VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  TYPE_4 . METHOD_2 ( id , path ) . put ( VAR_1 , VAR_2 ) )  TYPE_4 . METHOD_2 ( id , path ) . put ( VAR_1 , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( patchSet . METHOD_2 ( ) ) ) COND ! ( patchSet . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  patchSet . METHOD_3 ( false ) )  patchSet . METHOD_3 ( false ) ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  TYPE_4 . METHOD_4 ( change ) )  TYPE_4 . METHOD_4 ( change ) (  ctx . METHOD_5 ( ) )  ctx . METHOD_5 ( ) ) THEN THEN ) IF IF (  ctx . METHOD_6 ( ) . patchSets ( ) . update ( java.util.Collections.singleton ( patchSet ) ) )  ctx . METHOD_6 ( ) . patchSets ( ) . update ( java.util.Collections.singleton ( patchSet ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ) VAR VAR ( WHILE WHILE ( COND ( line = VAR_1 . METHOD_1 ( ) ) != null ) COND ( line = VAR_1 . METHOD_1 ( ) ) != null ( BLOCK BLOCK (  VAR_2 . error ( ( STRING_2 + line ) ) )  VAR_2 . error ( ( STRING_2 + line ) ) ) BLOCK BLOCK ) WHILE WHILE (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_3 , e ) )  VAR_2 . METHOD_2 ( STRING_3 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME isEmpty ) NAME isEmpty ( BLOCK BLOCK (  return ( ( ( ( ( ( ( approvals . isEmpty ( ) ) && ( ( VAR_1 ) == null ) ) && ( VAR_2 . isEmpty ( ) ) ) && ( reviewers . isEmpty ( ) ) ) && ( ( status ) == null ) ) && ( ( VAR_3 ) == null ) ) && ( ( VAR_4 ) == null ) ) && ( ( VAR_5 ) == null ) ; )  return ( ( ( ( ( ( ( approvals . isEmpty ( ) ) && ( ( VAR_1 ) == null ) ) && ( VAR_2 . isEmpty ( ) ) ) && ( reviewers . isEmpty ( ) ) ) && ( ( status ) == null ) ) && ( ( VAR_3 ) == null ) ) && ( ( VAR_4 ) == null ) ) && ( ( VAR_5 ) == null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == ( - 1 ) ) COND VAR_3 == ( - 1 ) ( THEN THEN (  return VAR_2 . equals ( STRING_1 ) ? INT_1 : INT_2 ; )  return VAR_2 . equals ( STRING_1 ) ? INT_1 : INT_2 ; ) THEN THEN ( ELSE ELSE (  return VAR_3 ; )  return VAR_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<?extendsTYPE_1<?,java.lang.String,TYPE_2<java.lang.String>>,java.lang.String,TYPE_2<java.lang.String>> ) RETURN TYPE_1<?extendsTYPE_1<?,java.lang.String,TYPE_2<java.lang.String>>,java.lang.String,TYPE_2<java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < java.lang.String > ) ( VAR_1 . changes ( ) . id ( r . getChange ( ) . getId ( ) . get ( ) ) . METHOD_2 ( ) ) ) ) ; )  return com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < java.lang.String > ) ( VAR_1 . changes ( ) . id ( r . getChange ( ) . getId ( ) . get ( ) ) . METHOD_2 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 != null ) ? VAR_1 . METHOD_2 ( ) : STRING_1 ) INIT = ( VAR_1 != null ) ? VAR_1 . METHOD_2 ( ) : STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME c ) NAME c ( INIT = new TYPE_4 ( VAR_3 , VAR_2 ) ) INIT = new TYPE_4 ( VAR_3 , VAR_2 ) ) VAR VAR (  c . METHOD_3 ( STRING_2 ) )  c . METHOD_3 ( STRING_2 ) (  c . METHOD_4 ( false ) )  c . METHOD_4 ( false ) (  c . METHOD_5 ( TYPE_5 . METHOD_6 ( req ) ) )  c . METHOD_5 ( TYPE_5 . METHOD_6 ( req ) ) (  c . METHOD_7 ( ( VAR_1 != null ? - 1 : 0 ) ) )  c . METHOD_7 ( ( VAR_1 != null ? - 1 : 0 ) ) (  rsp . METHOD_8 ( c ) )  rsp . METHOD_8 ( c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String,TYPE_2> ) RETURN TYPE_1<java.lang.String,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME query ) NAME query ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = VAR_3 . METHOD_2 ( ) )  VAR_1 = VAR_3 . METHOD_2 ( ) (  VAR_2 = VAR_1 . METHOD_3 ( ) )  VAR_2 = VAR_1 . METHOD_3 ( ) (  return METHOD_4 ( VAR_2 , query ) ; )  return METHOD_4 ( VAR_2 , query ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  org.junit.Assert . METHOD_4 ( VAR_3 ) )  org.junit.Assert . METHOD_4 ( VAR_3 ) (  org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) )  org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . delete ( VAR_1 ) )  TYPE_3 . delete ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3,TYPE_4> ) TYPE TYPE_2<TYPE_3,TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME p ) NAME p ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return new TYPE_6 ( VAR_1 , VAR_2 . METHOD_3 ( STRING_1 ) , false ) ; )  return new TYPE_6 ( VAR_1 , VAR_2 . METHOD_3 ( STRING_1 ) , false ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_6 ( VAR_1 , METHOD_4 ( STRING_2 ) , true ) ; )  return new TYPE_6 ( VAR_1 , METHOD_4 ( STRING_2 ) , true ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) || ( METHOD_7 ( db ) ) ) COND ( ! ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) || ( METHOD_7 ( db ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_8 ( ) ) COND METHOD_8 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( t ) )  METHOD_3 ( t ) (  assertEquals ( VAR_1 , t . METHOD_4 ( ) ) )  assertEquals ( VAR_1 , t . METHOD_4 ( ) ) (  assertEquals ( 1 , t . METHOD_5 ( ) ) )  assertEquals ( 1 , t . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( t . METHOD_7 ( 0 ) , STRING_2 ) )  TYPE_3 . METHOD_6 ( t . METHOD_7 ( 0 ) , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 . METHOD_4 ( ) ) || ( TYPE_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 . METHOD_4 ( ) ) || ( TYPE_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_7 ( name ) )  VAR_1 . METHOD_7 ( name ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_3 , cfg ) ) INIT = new TYPE_3 ( VAR_3 , cfg ) ) VAR VAR (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) (  VAR_2 . METHOD_7 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) )  VAR_2 . METHOD_7 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<java.lang.String,java.lang.String> ) TYPE TYPE_2<java.lang.String,java.lang.String> ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_6 . METHOD_4 ( VAR_1 , config , req ) )  TYPE_6 . METHOD_4 ( VAR_1 , config , req ) (  TYPE_6 . METHOD_5 ( VAR_1 , config ) )  TYPE_6 . METHOD_5 ( VAR_1 , config ) (  return VAR_1 . create ( ) ; )  return VAR_1 . create ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME c ) NAME c ( INIT = METHOD_3 ( ( STRING_1 + changeId ) ) ) INIT = METHOD_3 ( ( STRING_1 + changeId ) ) ) VAR VAR (  org.junit.Assert . METHOD_4 ( VAR_1 ) )  org.junit.Assert . METHOD_4 ( VAR_1 ) (  org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) )  org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) (  org.junit.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) )  org.junit.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ref ) NAME ref ( INIT = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 , changeId ) ) ) INIT = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 , changeId ) ) ) VAR VAR ( IF IF ( COND ref == null ) COND ref == null ( THEN THEN (  return ! ( VAR_3 . METHOD_4 ( VAR_2 ) ) ; )  return ! ( VAR_3 . METHOD_4 ( VAR_2 ) ) ; ) THEN THEN ) IF IF (  return ref . METHOD_5 ( ) . equals ( VAR_3 . get ( VAR_2 ) ) ; )  return ref . METHOD_5 ( ) . equals ( VAR_3 . get ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  VAR_1 . add ( STRING_2 ) )  VAR_1 . add ( STRING_2 ) (  VAR_1 . add ( STRING_3 ) )  VAR_1 . add ( STRING_3 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( c . getName ( ) ) )  VAR_1 . add ( c . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME s ) NAME s ( INIT = db . METHOD_2 ( ) ) INIT = db . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = s . METHOD_3 ( STRING_1 ) ) INIT = s . METHOD_3 ( STRING_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<java.lang.String> ) TYPE TYPE_5<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 < java.lang.String > ( ) ) INIT = new TYPE_5 < java.lang.String > ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_2 . add ( VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) )  VAR_2 . add ( VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  s . close ( ) )  s . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_3 ) NAME VAR_3 ( INIT = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ) INIT = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_4 ) NAME VAR_4 ( INIT = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ) INIT = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ) VAR VAR (  METHOD_4 ( STRING_3 ) )  METHOD_4 ( STRING_3 ) (  METHOD_4 ( STRING_4 , VAR_3 ) )  METHOD_4 ( STRING_4 , VAR_3 ) (  METHOD_4 ( STRING_5 , VAR_4 ) )  METHOD_4 ( STRING_5 , VAR_4 ) (  METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) )  METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) )  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_2 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_3 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_2 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . toString ( ) ) INIT = VAR_1 . METHOD_2 ( ) . toString ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_3 ( VAR_2 ) ) COND TYPE_2 . METHOD_3 ( VAR_2 ) ( THEN THEN (  return VAR_2 . METHOD_4 ( 0 , VAR_2 . METHOD_5 ( CHAR_1 ) ) ; )  return VAR_2 . METHOD_4 ( 0 , VAR_2 . METHOD_5 ( CHAR_1 ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 . METHOD_6 ( VAR_1 ) ) COND VAR_3 . METHOD_6 ( VAR_1 ) ( THEN THEN (  return VAR_3 . METHOD_7 ( VAR_1 ) ; )  return VAR_3 . METHOD_7 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME diff ) NAME diff ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( path . equals ( STRING_1 ) ) ) COND ! ( path . equals ( STRING_1 ) ) ( THEN THEN (  diff . METHOD_2 ( TYPE_3 . create ( path ) ) )  diff . METHOD_2 ( TYPE_3 . create ( path ) ) ) THEN THEN ) IF IF (  diff . METHOD_3 ( repo ) )  diff . METHOD_3 ( repo ) (  diff . METHOD_4 ( true ) )  diff . METHOD_4 ( true ) (  diff . format ( VAR_1 , VAR_2 ) )  diff . format ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  diff . METHOD_5 ( ) )  diff . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( ctx . getProject ( ) , VAR_2 , VAR_3 , VAR_1 ) )  METHOD_2 ( ctx . getProject ( ) , VAR_2 , VAR_3 , VAR_1 ) (  VAR_4 . METHOD_3 ( VAR_2 , VAR_5 , VAR_6 , ctx . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 . getMessage ( ) , VAR_7 , VAR_8 , ctx . METHOD_7 ( ) ) )  VAR_4 . METHOD_3 ( VAR_2 , VAR_5 , VAR_6 , ctx . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 . getMessage ( ) , VAR_7 , VAR_8 , ctx . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_1 . get ( VAR_1 class , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) )  METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_1 . get ( VAR_1 class , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  METHOD_5 ( STRING_2 ) . METHOD_6 ( new TYPE_3 ( VAR_4 , VAR_5 ) ) )  METHOD_5 ( STRING_2 ) . METHOD_6 ( new TYPE_3 ( VAR_4 , VAR_5 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . in ( VAR_2 ) )  bind ( VAR_1 class ) . in ( VAR_2 ) (  bind ( VAR_3 class ) . in ( VAR_2 ) )  bind ( VAR_3 class ) . in ( VAR_2 ) (  bind ( VAR_4 class ) . to ( VAR_3 class ) )  bind ( VAR_4 class ) . to ( VAR_3 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_2 ( ) ) )  install ( new TYPE_2 ( ) ) (  TYPE_3 . METHOD_2 ( binder ( ) , VAR_5 ) )  TYPE_3 . METHOD_2 ( binder ( ) , VAR_5 ) (  METHOD_3 ( VAR_6 , STRING_1 ) . to ( VAR_7 class ) )  METHOD_3 ( VAR_6 , STRING_1 ) . to ( VAR_7 class ) (  get ( VAR_5 ) . to ( VAR_8 class ) )  get ( VAR_5 ) . to ( VAR_8 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) )  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) (  bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) )  bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) (  bind ( VAR_7 class ) . METHOD_3 ( VAR_8 class ) . in ( VAR_6 ) )  bind ( VAR_7 class ) . METHOD_3 ( VAR_8 class ) . in ( VAR_6 ) (  bind ( VAR_9 . String class ) . METHOD_2 ( VAR_10 class ) . METHOD_3 ( VAR_11 class ) )  bind ( VAR_9 . String class ) . METHOD_2 ( VAR_10 class ) . METHOD_3 ( VAR_11 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . get ( ) . METHOD_2 ( ) ) COND VAR_1 . get ( ) . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctl ) NAME ctl ( INIT = VAR_1 . get ( ) . METHOD_3 ( ) ) INIT = VAR_1 . get ( ) . METHOD_3 ( ) ) VAR VAR (  return ( ctl . METHOD_4 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) || ( ctl . METHOD_5 ( ) ) ; )  return ( ctl . METHOD_4 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) || ( ctl . METHOD_5 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME to ) NAME to ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = ( ( TYPE_1 ) ( db ) ) ) INIT = ( ( TYPE_1 ) ( db ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( INIT = new TYPE_2 ( s ) ) INIT = new TYPE_2 ( s ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  s . METHOD_1 ( e , VAR_1 , to ) )  s . METHOD_1 ( e , VAR_1 , to ) ) BLOCK BLOCK ( FINALLY FINALLY (  e . close ( ) )  e . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ( INIT = cd . change ( ) . currentPatchSetId ( ) ) INIT = cd . change ( ) . currentPatchSetId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ctl ) NAME ctl ( INIT = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ) INIT = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ) VAR VAR (  return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , cd . notes ( ) , ctl . METHOD_4 ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; )  return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , cd . notes ( ) , ctl . METHOD_4 ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( TYPE_5 ) )  VAR_2 . METHOD_2 ( TYPE_5 ) (  return ; )  return ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND VAR_4 . METHOD_3 ( VAR_1 , repo , commit ) ) COND VAR_4 . METHOD_3 ( VAR_1 , repo , commit ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , TYPE_5 . METHOD_4 ( ) ) ) ; )  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , TYPE_5 . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = VAR_2 . METHOD_1 ( VAR_3 , id ) ) INIT = VAR_2 . METHOD_1 ( VAR_3 , id ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ( IN p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) IN p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) COND VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ( THEN THEN (  return new TYPE_1 ( VAR_1 , p . METHOD_3 ( ) ) ; )  return new TYPE_1 ( VAR_1 , p . METHOD_3 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_4 ( id ) ; )  throw new TYPE_4 ( id ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = create ( ) . METHOD_4 ( null ) ) INIT = create ( ) . METHOD_4 ( null ) ) VAR VAR (  METHOD_5 ( r ) )  METHOD_5 ( r ) (  assertEquals ( VAR_2 . getName ( ) , r . name ) )  assertEquals ( VAR_2 . getName ( ) , r . name ) (  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) )  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) (  TYPE_1 . METHOD_7 ( VAR_1 ) )  TYPE_1 . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) COND ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ( THEN THEN (  return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; )  return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME err ) NAME err ( INIT = new TYPE_1 ( name ) ) INIT = new TYPE_1 ( name ) ) VAR VAR (  METHOD_2 ( ) . METHOD_3 ( err ) )  METHOD_2 ( ) . METHOD_3 ( err ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  new TYPE_2 ( VAR_1 , VAR_2 , name ) . METHOD_5 ( ) )  new TYPE_2 ( VAR_1 , VAR_2 , name ) . METHOD_5 ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_7 ( err , VAR_3 ) )  METHOD_7 ( err , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) (  VAR_1 . add ( METHOD_3 ( STRING_1 , null ) ) )  VAR_1 . add ( METHOD_3 ( STRING_1 , null ) ) (  changeId = VAR_1 . get ( 0 ) . getChangeId ( ) )  changeId = VAR_1 . get ( 0 ) . getChangeId ( ) (  VAR_1 . add ( METHOD_3 ( STRING_2 , changeId ) ) )  VAR_1 . add ( METHOD_3 ( STRING_2 , changeId ) ) (  VAR_1 . add ( METHOD_3 ( STRING_3 , changeId ) ) )  VAR_1 . add ( METHOD_3 ( STRING_3 , changeId ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<java.lang.String,TYPE_2> ) RETURN TYPE_1<java.lang.String,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME plugins ) NAME plugins ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String,TYPE_2> ) TYPE TYPE_1<java.lang.String,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN plugins ) IN plugins ( BLOCK BLOCK (  VAR_1 . put ( TYPE_4 . METHOD_2 ( VAR_2 ) , VAR_2 ) )  VAR_1 . put ( TYPE_4 . METHOD_2 ( VAR_2 ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  assertEquals ( VAR_1 , VAR_4 ) )  assertEquals ( VAR_1 , VAR_4 ) (  assertEquals ( new TYPE_1 ( VAR_1 , STRING_1 ) , VAR_5 ) )  assertEquals ( new TYPE_1 ( VAR_1 , STRING_1 ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) COND ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ( THEN THEN (  return METHOD_2 ( ) . METHOD_3 ( ) ; )  return METHOD_2 ( ) . METHOD_3 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_2 ( ) . METHOD_4 ( ) ) != ( - 1 ) ) COND ( METHOD_2 ( ) . METHOD_4 ( ) ) != ( - 1 ) ( THEN THEN (  return TYPE_1 . toString ( METHOD_2 ( ) . METHOD_4 ( ) ) ; )  return TYPE_1 . toString ( METHOD_2 ( ) . METHOD_4 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return STRING_1 ; )  return STRING_1 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME git ) NAME git ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME change ) NAME change ( INIT = METHOD_4 ( git ) ) INIT = METHOD_4 ( git ) ) VAR VAR (  submit ( change . getChangeId ( ) ) )  submit ( change . getChangeId ( ) ) ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( change . METHOD_5 ( ) , VAR_2 . getId ( ) ) )  org.junit.Assert.assertEquals ( change . METHOD_5 ( ) , VAR_2 . getId ( ) ) (  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_6 ( 0 ) ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_6 ( 0 ) ) (  METHOD_7 ( change . getChangeId ( ) , 1 ) )  METHOD_7 ( change . getChangeId ( ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = ( VAR_1 . size ( ) ) - 1 ) INIT = ( VAR_1 . size ( ) ) - 1 ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 = new TYPE_2 ( VAR_1 . get ( i ) , VAR_2 ) )  VAR_2 = new TYPE_2 ( VAR_1 . get ( i ) , VAR_2 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) == VAR_1 ) COND ( VAR_2 ) == VAR_1 ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) == VAR_1 ) COND ( VAR_3 ) == VAR_1 ( THEN THEN (  VAR_4 = false )  VAR_4 = false (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return METHOD_2 ( VAR_1 ) ; )  return METHOD_2 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( SWITCH SWITCH ( NAME status ) NAME status ( CASE VAR_2 ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; )  return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  return VAR_2 . values ( ) ; )  return VAR_2 . values ( ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME plugins ) NAME plugins ( INIT = new java.util.ArrayList ( VAR_2 . values ( ) ) ) INIT = new java.util.ArrayList ( VAR_2 . values ( ) ) ) VAR VAR (  plugins . METHOD_2 ( VAR_3 . values ( ) ) )  plugins . METHOD_2 ( VAR_3 . values ( ) ) (  return plugins ; )  return plugins ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND d . METHOD_5 ( ) ) COND d . METHOD_5 ( ) ( THEN THEN (  TYPE_2 . METHOD_1 ( d ) )  TYPE_2 . METHOD_1 ( d ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_6 ( d ) )  TYPE_2 . METHOD_6 ( d ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  TYPE_2 . METHOD_6 ( VAR_1 ) )  TYPE_2 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME commit ) NAME commit ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ChangeInfo> ) TYPE TYPE_1<TYPE_2.ChangeInfo> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( message ) )  VAR_3 . METHOD_2 ( message ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  TYPE_4 . METHOD_4 ( id , commit , STRING_1 ) . METHOD_5 ( VAR_3 , VAR_2 ) )  TYPE_4 . METHOD_4 ( id , commit , STRING_1 ) . METHOD_5 ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME res ) NAME res ( INIT = METHOD_5 ( STRING_1 , VAR_1 ) ) INIT = METHOD_5 ( STRING_1 , VAR_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( res ) . METHOD_6 ( 1 ) )  com.google.common.truth.Truth.assertThat ( res ) . METHOD_6 ( 1 ) (  com.google.common.truth.Truth.assertThat ( res ) . METHOD_7 ( name ) )  com.google.common.truth.Truth.assertThat ( res ) . METHOD_7 ( name ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = res . get ( name ) ) INIT = res . get ( name ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( name ) )  com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( name ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME w ) NAME w ( IN this ) IN this ( BLOCK BLOCK ( IF IF ( COND w instanceof TYPE_2 ) COND w instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = ( ( TYPE_2 ) ( w ) ) ) INIT = ( ( TYPE_2 ) ( w ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = d )  VAR_2 = d ) THEN THEN ) IF IF ( IF IF ( COND ( d . METHOD_2 ( ) ) == VAR_1 ) COND ( d . METHOD_2 ( ) ) == VAR_1 ( THEN THEN (  d . METHOD_1 ( ) )  d . METHOD_1 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME git ) NAME git ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ) INIT = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ) VAR VAR (  return VAR_2 . METHOD_2 ( git , STRING_1 ) . getChangeId ( ) ; )  return VAR_2 . METHOD_2 ( git , STRING_1 ) . getChangeId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  repo = VAR_1 . METHOD_2 ( change . getProject ( ) ) )  repo = VAR_1 . METHOD_2 ( change . getProject ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( change . getProject ( ) , e ) ; )  throw new TYPE_2 ( change . getProject ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  return new TYPE_1 ( repo , change ) ; )  return new TYPE_1 ( repo , change ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( db ) != null ) COND ( db ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) IN db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ( BLOCK BLOCK ( IF IF ( COND ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) COND ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  add ( VAR_3 , VAR_2 . getAccountId ( ) ) )  add ( VAR_3 , VAR_2 . getAccountId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3.OrmException ) TYPE TYPE_3.OrmException ( NAME err ) NAME err ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( VAR_1 ) ) != ( - 1 ) ) COND ( METHOD_2 ( VAR_1 ) ) != ( - 1 ) ( THEN THEN ( IF IF ( COND ! ( VAR_1 . equals ( VAR_2 ) ) ) COND ! ( VAR_1 . equals ( VAR_2 ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR (  VAR_3 . METHOD_4 ( true ) )  VAR_3 . METHOD_4 ( true ) (  VAR_3 . METHOD_5 ( true ) )  VAR_3 . METHOD_5 ( true ) (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  TYPE_2 . display ( TYPE_3 . METHOD_6 ( VAR_1 . getParentKey ( ) ) ) )  TYPE_2 . display ( TYPE_3 . METHOD_6 ( VAR_1 . getParentKey ( ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < TYPE_2 > ( ) { private int VAR_2 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { METHOD_2 ( ) ; } } } ) INIT = new TYPE_1 < TYPE_2 > ( ) { private int VAR_2 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { METHOD_2 ( ) ; } } } ) VAR VAR ( FIELD FIELD ( MODIFIER private ) MODIFIER private ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) FIELD FIELD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) COND ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  p . METHOD_3 ( VAR_1 ) )  p . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . create ( VAR_3 , name , 0 ) ) INIT = TYPE_3 . create ( VAR_3 , name , 0 ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_4 , STRING_1 , VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_4 , STRING_1 , VAR_2 ) ) ( THEN THEN (  METHOD_3 ( ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + name ) ) )  METHOD_3 ( ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + name ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( value ( ) ) <= ( ( short ) ( 0 ) ) ) COND ( value ( ) ) <= ( ( short ) ( 0 ) ) ( THEN THEN (  return ( ( label ( ) ) + CHAR_1 ) + ( value ( ) ) ; )  return ( ( label ( ) ) + CHAR_1 ) + ( value ( ) ) ; ) THEN THEN ( ELSE ELSE (  return ( ( label ( ) ) + STRING_1 ) + ( value ( ) ) ; )  return ( ( label ( ) ) + STRING_1 ) + ( value ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ ] { STRING_1 , STRING_1 , STRING_2 , STRING_2 , STRING_3 , STRING_3 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 } ) INIT = new java.lang.String [ ] { STRING_1 , STRING_1 , STRING_2 , STRING_2 , STRING_3 , STRING_3 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 } ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i += 2 )  i += 2 ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) , VAR_1 [ ( i + 1 ) ] ) )  assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) , VAR_1 [ ( i + 1 ) ] ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME group ) NAME group ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( TYPE_1 . METHOD_2 ( group ) , METHOD_3 ( group , null ) ) . get ( ) )  METHOD_1 ( TYPE_1 . METHOD_2 ( group ) , METHOD_3 ( group , null ) ) . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2|TYPE_3 ) TYPE TYPE_2|TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = VAR_2 . put ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) , c ) ) INIT = VAR_2 . put ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) , c ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) (  return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; )  return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME group ) NAME group ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( repo , TYPE_2 . METHOD_3 ( db , group . getId ( ) ) ) )  VAR_3 . METHOD_1 ( repo , TYPE_2 . METHOD_3 ( db , group . getId ( ) ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_4 ( repo , group . METHOD_5 ( ) ) ) INIT = TYPE_3 . METHOD_4 ( repo , group . METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4<TYPE_1> ) TYPE TYPE_4<TYPE_1> ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_6 ( ) ) INIT = VAR_4 . METHOD_6 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( result ) . METHOD_7 ( ) )  com.google.common.truth.Truth.assertThat ( result ) . METHOD_7 ( ) (  return result . get ( ) ; )  return result . get ( ) ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return new TYPE_4 ( args . rw , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , args . repo ) . METHOD_1 ( VAR_1 ) ; )  return new TYPE_4 ( args . rw , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , args . repo ) . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<TYPE_1> ) RETURN java.util.Set<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME n ) NAME n ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = VAR_2 . METHOD_4 ( n ) ) INIT = VAR_2 . METHOD_4 ( n ) ) VAR VAR ( IF IF ( COND p != null ) COND p != null ( THEN THEN (  VAR_1 . METHOD_5 ( p . METHOD_6 ( ) . METHOD_7 ( ) ) )  VAR_1 . METHOD_5 ( p . METHOD_6 ( ) . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = ctx . getChange ( ) ) INIT = ctx . getChange ( ) ) VAR VAR ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  VAR_1 = VAR_2 . get ( ) )  VAR_1 = VAR_2 . get ( ) (  VAR_1 . METHOD_3 ( ctx ) )  VAR_1 . METHOD_3 ( ctx ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND c . currentPatchSetId ( ) . equals ( psId ) ) COND c . currentPatchSetId ( ) . equals ( psId ) ( THEN THEN (  c . METHOD_4 ( METHOD_5 ( ctx ) ) )  c . METHOD_4 ( METHOD_5 ( ctx ) ) ) THEN THEN ) IF IF (  ctx . METHOD_6 ( ) )  ctx . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) COND ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( rsrc ) )  VAR_1 . METHOD_4 ( rsrc ) (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = add ( TYPE_2 . METHOD_2 ( ) , user ) ) INIT = add ( TYPE_2 . METHOD_2 ( ) , user ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = add ( TYPE_2 . METHOD_3 ( ) , METHOD_4 ( STRING_1 ) ) ) INIT = add ( TYPE_2 . METHOD_3 ( ) , METHOD_4 ( STRING_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . create ( ) . METHOD_5 ( user ) . METHOD_6 ( VAR_5 ) ) INIT = VAR_4 . create ( ) . METHOD_5 ( user ) . METHOD_6 ( VAR_5 ) ) VAR VAR (  METHOD_7 ( VAR_3 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_6 , STRING_2 , ( ( STRING_3 + ( TYPE_4 . METHOD_10 ( VAR_2 . METHOD_9 ( ) ) ) ) + STRING_4 ) , STRING_5 ) )  METHOD_7 ( VAR_3 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_6 , STRING_2 , ( ( STRING_3 + ( TYPE_4 . METHOD_10 ( VAR_2 . METHOD_9 ( ) ) ) ) + STRING_4 ) , STRING_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) )  VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  VAR_3 = VAR_5 )  VAR_3 = VAR_5 ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_6 . METHOD_1 ( ) )  VAR_6 . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  diff = VAR_1 )  diff = VAR_1 ( IF IF ( COND VAR_2 . METHOD_1 ( ) ) COND VAR_2 . METHOD_1 ( ) ( THEN THEN (  VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) )  VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ( IF IF ( COND ( VAR_3 . METHOD_3 ( VAR_4 ) ) > 0 ) COND ( VAR_3 . METHOD_3 ( VAR_4 ) ) > 0 ( THEN THEN (  VAR_5 . onSuccess ( null ) )  VAR_5 . onSuccess ( null ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( VAR_1 , VAR_5 ) )  METHOD_4 ( VAR_1 , VAR_5 ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_5 . onSuccess ( null ) )  VAR_5 . onSuccess ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  change = new com.google.gerrit.reviewdb.client.Change ( TYPE_2 . METHOD_2 ( commit ) , changeId , ctx . METHOD_3 ( ) . getAccountId ( ) , new TYPE_3 . NameKey ( ctx . getProject ( ) , VAR_1 ) , ctx . METHOD_4 ( ) ) )  change = new com.google.gerrit.reviewdb.client.Change ( TYPE_2 . METHOD_2 ( commit ) , changeId , ctx . METHOD_3 ( ) . getAccountId ( ) , new TYPE_3 . NameKey ( ctx . getProject ( ) , VAR_1 ) , ctx . METHOD_4 ( ) ) (  change . METHOD_5 ( TYPE_4 . METHOD_6 ( status , VAR_2 ) ) )  change . METHOD_5 ( TYPE_4 . METHOD_6 ( status , VAR_2 ) ) (  change . METHOD_7 ( topic ) )  change . METHOD_7 ( topic ) (  return change ; )  return change ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME group ) NAME group ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME create ) NAME create ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_3 ( r , group ) ) COND TYPE_3 . METHOD_3 ( r , group ) ( THEN THEN (  return r ; )  return r ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND create ) COND create ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = new TYPE_1 ( group ) ) INIT = new TYPE_1 ( group ) ) VAR VAR (  VAR_1 . add ( r ) )  VAR_1 . add ( r ) (  return r ; )  return r ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ! ( VAR_1 ) ) && ( ( METHOD_2 ( ) ) != null ) ) && ( STRING_1 . equals ( super . METHOD_3 ( ) ) ) ) COND ( ( ! ( VAR_1 ) ) && ( ( METHOD_2 ( ) ) != null ) ) && ( STRING_1 . equals ( super . METHOD_3 ( ) ) ) ( THEN THEN (  super . METHOD_4 ( METHOD_2 ( ) ) )  super . METHOD_4 ( METHOD_2 ( ) ) (  VAR_1 = true )  VAR_1 = true ( IF IF ( COND ( METHOD_5 ( ) ) != null ) COND ( METHOD_5 ( ) ) != null ( THEN THEN (  METHOD_6 ( METHOD_5 ( ) ) )  METHOD_6 ( METHOD_5 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME r ) NAME r ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  r . add ( new TYPE_4 ( schema , id ) ) )  r . add ( new TYPE_4 ( schema , id ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ) BLOCK BLOCK ) TRY TRY ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_4 ( VAR_1 ) ) INIT = VAR_2 . METHOD_4 ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ) BLOCK BLOCK ) TRY TRY (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return TYPE_1 . METHOD_2 ( VAR_1 ) ; )  return TYPE_1 . METHOD_2 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . equals ( STRING_1 ) ) COND VAR_1 . equals ( STRING_1 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . equals ( STRING_2 ) ) COND VAR_1 . equals ( STRING_2 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ( ELSE ELSE (  throw new com.google.gwtorm.server.OrmException ( ( STRING_3 + VAR_1 ) ) ; )  throw new com.google.gwtorm.server.OrmException ( ( STRING_3 + VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( VAR_1 < TYPE_9 > METHOD_3 ( ) ) , new TYPE_10 ( ) ) )  servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( VAR_1 < TYPE_9 > METHOD_3 ( ) ) , new TYPE_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t = t . METHOD_2 ( ) )  t = t . METHOD_2 ( ) ( IF IF ( COND t . METHOD_3 ( ) ) COND t . METHOD_3 ( ) ( THEN THEN (  ( ( TYPE_3 ) ( t ) ) . bind ( this , VAR_1 ) )  ( ( TYPE_3 ) ( t ) ) . bind ( this , VAR_1 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return TYPE_4 . METHOD_4 ( this , t ) ; )  return TYPE_4 . METHOD_4 ( this , t ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_5 ( VAR_4 ) ) INIT = new TYPE_5 ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_2 ( false ) )  VAR_3 . METHOD_2 ( false ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) ( WHILE WHILE ( COND ( VAR_3 . METHOD_4 ( ) ) && ( ! ( METHOD_5 ( ) ) ) ) COND ( VAR_3 . METHOD_4 ( ) ) && ( ! ( METHOD_5 ( ) ) ) ( BLOCK BLOCK (  METHOD_6 ( VAR_3 ) )  METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME event ) NAME event ( INIT = new TYPE_3 ( change , VAR_1 , VAR_2 ) ) INIT = new TYPE_3 ( change , VAR_1 , VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( event ) )  VAR_4 . METHOD_4 ( event ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  util . METHOD_5 ( TYPE_5 . log , e ) )  util . METHOD_5 ( TYPE_5 . log , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < java.lang.String > ( m . METHOD_2 ( ) ) ) INIT = new TYPE_1 < java.lang.String > ( m . METHOD_2 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( id ) )  VAR_1 . METHOD_3 ( id ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = label ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) INIT = label ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) VAR VAR ( IF IF ( COND ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( r . isEmpty ( ) ) ) COND ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( r . isEmpty ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return r . contains ( VAR_1 . value ( ) ) ; )  return r . contains ( VAR_1 . value ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . revision = patchSet . getRevision ( ) . get ( ) )  p . revision = patchSet . getRevision ( ) . get ( ) (  VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) )  VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) (  p . ref = patchSet . getRefName ( ) )  p . ref = patchSet . getRefName ( ) (  VAR_2 = METHOD_3 ( patchSet . METHOD_4 ( ) ) )  VAR_2 = METHOD_3 ( patchSet . METHOD_4 ( ) ) (  VAR_3 = ( patchSet . METHOD_5 ( ) . METHOD_6 ( ) ) / INT_1 )  VAR_3 = ( patchSet . METHOD_5 ( ) . METHOD_6 ( ) ) / INT_1 (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_4 ) NAME VAR_4 ( INIT = cd . change ( ) . METHOD_4 ( ) ) INIT = cd . change ( ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cm ) NAME cm ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( cm . METHOD_5 ( ) ) ) COND VAR_1 . equals ( cm . METHOD_5 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_4 . equals ( cm . METHOD_5 ( ) ) ) COND VAR_4 . equals ( cm . METHOD_5 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( util . METHOD_2 ( change ) , util . METHOD_3 ( change . getProject ( ) , patchSet ) , util . METHOD_4 ( VAR_1 ) , VAR_2 ) )  METHOD_1 ( util . METHOD_2 ( change ) , util . METHOD_3 ( change . getProject ( ) , patchSet ) , util . METHOD_4 ( VAR_1 ) , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2|TYPE_3|java.io.IOException|com.google.gwtorm.server.OrmException ) TYPE TYPE_2|TYPE_3|java.io.IOException|com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( STRING_1 , e ) )  VAR_3 . error ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME update ) NAME update ( INIT = METHOD_3 ( c , VAR_1 ) ) INIT = METHOD_3 ( c , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR (  VAR_2 . add ( STRING_1 ) )  VAR_2 . add ( STRING_1 ) (  VAR_2 . add ( STRING_2 ) )  VAR_2 . add ( STRING_2 ) (  update . METHOD_4 ( VAR_2 ) )  update . METHOD_4 ( VAR_2 ) (  update . commit ( ) )  update . commit ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME notes ) NAME notes ( INIT = METHOD_5 ( c ) ) INIT = METHOD_5 ( c ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , notes . METHOD_6 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , notes . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME close ) NAME close ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_1 ( ( ( TYPE_3 . contains ( VAR_1 ) ) && ( ! ( TYPE_4 . equals ( VAR_1 ) ) ) ) , STRING_1 , VAR_1 ) )  TYPE_2 . METHOD_1 ( ( ( TYPE_3 . contains ( VAR_1 ) ) && ( ! ( TYPE_4 . equals ( VAR_1 ) ) ) ) , STRING_1 , VAR_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_2 . append ( STRING_2 ) . append ( VAR_1 ) . append ( CHAR_1 ) )  VAR_2 . append ( STRING_2 ) . append ( VAR_1 ) . append ( CHAR_1 ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + STRING_2 ) INIT = STRING_1 + STRING_2 ) VAR VAR (  repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) )  repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_5 ) ) INIT = METHOD_2 ( STRING_5 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_7 + STRING_7 ) + STRING_8 ) ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_7 + STRING_7 ) + STRING_8 ) ) ) (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_9 + STRING_10 ) + STRING_11 ) ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_9 + STRING_10 ) + STRING_11 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN PatchSet.Id ) RETURN PatchSet.Id ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ) COND VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  return METHOD_3 ( db ) ; )  return METHOD_3 ( db ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return METHOD_3 ( db ) ; )  return METHOD_3 ( db ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_4 . update ( 1 ) )  VAR_4 . update ( 1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( TYPE_4 . create ( VAR_4 , VAR_1 ) ) ) INIT = VAR_3 . get ( TYPE_4 . create ( VAR_4 , VAR_1 ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return TYPE_1 . METHOD_2 ( ) ; )  return TYPE_1 . METHOD_2 ( ) ; ) THEN THEN ) IF IF (  return METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; )  return METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException|TYPE_5 ) TYPE java.io.IOException|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( ( STRING_1 + VAR_1 ) , e ) )  VAR_5 . METHOD_5 ( ( STRING_1 + VAR_1 ) , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . sshd ( config , VAR_1 ) )  TYPE_4 . sshd ( config , VAR_1 ) (  TYPE_4 . METHOD_2 ( config , VAR_1 ) )  TYPE_4 . METHOD_2 ( config , VAR_1 ) (  TYPE_4 . user ( config , VAR_1 ) )  TYPE_4 . user ( config , VAR_1 ) (  TYPE_4 . auth ( config , VAR_1 ) )  TYPE_4 . auth ( config , VAR_1 ) (  TYPE_4 . METHOD_3 ( config , VAR_1 ) )  TYPE_4 . METHOD_3 ( config , VAR_1 ) (  TYPE_4 . repo ( config , VAR_1 ) )  TYPE_4 . repo ( config , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( TRY TRY ( BLOCK BLOCK (  project ( ) . METHOD_3 ( input ) )  project ( ) . METHOD_3 ( input ) (  org.junit.Assert . METHOD_4 ( STRING_2 ) )  org.junit.Assert . METHOD_4 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) )  com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( name ) ) INIT = VAR_2 . METHOD_1 ( name ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( name ) ; )  throw new TYPE_3 ( name ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; )  return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME on ) NAME on ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = on )  VAR_1 = on ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 . METHOD_2 ( getValue ( ) . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( getValue ( ) . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_2 ( false ) )  VAR_2 . METHOD_2 ( false ) ) ELSE ELSE ) IF IF (  METHOD_4 ( VAR_3 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME ps ) NAME ps ( INIT = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ) INIT = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ps ) ) INIT = METHOD_4 ( ps ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEmpty ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEmpty ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3> ) TYPE TYPE_2<?extendsTYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( VAR_4 class ) ) INIT = VAR_2 . METHOD_2 ( VAR_4 class ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) THEN THEN ) IF IF (  bind ( TYPE_6 . key ( VAR_1 , VAR_3 . name ( ) , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) )  bind ( TYPE_6 . key ( VAR_1 , VAR_3 . name ( ) , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  e . METHOD_2 ( ) )  e . METHOD_2 ( ) (  TYPE_2 . METHOD_3 ( VAR_1 . line ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . line ( ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ( INIT = TYPE_3 . METHOD_4 ( psId , VAR_1 . path ( ) ) ) INIT = TYPE_3 . METHOD_4 ( psId , VAR_1 . path ( ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_4 . METHOD_5 ( ) ) ) COND ! ( TYPE_4 . METHOD_5 ( ) ) ( THEN THEN (  TYPE_4 . METHOD_6 ( token ) )  TYPE_4 . METHOD_6 ( token ) ) THEN THEN ( ELSE ELSE (  TYPE_4 . display ( token ) )  TYPE_4 . display ( token ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 . getAccountId ( ) ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 . getAccountId ( ) ) (  return VAR_4 . create ( VAR_2 . getParentKey ( ) ) . METHOD_1 ( ) ; )  return VAR_4 . create ( VAR_2 . getParentKey ( ) ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ( INIT = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  return VAR_4 . get ( key , new TYPE_3 ( key , VAR_5 , project , repo ) ) ; )  return VAR_4 . get ( key , new TYPE_3 ( key , VAR_5 , project , repo ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_6 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) )  VAR_6 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 ) )  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 ) (  bind ( VAR_4 class ) . METHOD_3 ( VAR_5 ) )  bind ( VAR_4 class ) . METHOD_3 ( VAR_5 ) (  bind ( TYPE_1 . get ( VAR_6 class , TYPE_2 . METHOD_4 ( STRING_1 ) ) ) . METHOD_5 ( VAR_7 class ) . in ( VAR_8 ) )  bind ( TYPE_1 . get ( VAR_6 class , TYPE_2 . METHOD_4 ( STRING_1 ) ) ) . METHOD_5 ( VAR_7 class ) . in ( VAR_8 ) (  METHOD_6 ( ) . to ( VAR_7 class ) )  METHOD_6 ( ) . to ( VAR_7 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ( INIT = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ) INIT = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 = VAR_3 . toString ( ) )  VAR_2 = VAR_3 . toString ( ) (  VAR_4 = true )  VAR_4 = true (  in . label ( STRING_1 , INT_1 ) )  in . label ( STRING_1 , INT_1 ) (  VAR_5 . METHOD_5 ( VAR_6 class ) )  VAR_5 . METHOD_5 ( VAR_6 class ) (  VAR_5 . METHOD_6 ( STRING_2 ) )  VAR_5 . METHOD_6 ( STRING_2 ) (  revision . METHOD_7 ( in ) )  revision . METHOD_7 ( in ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) )  TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = user ( VAR_4 ) ) INIT = user ( VAR_4 ) ) VAR VAR (  METHOD_4 ( u ) )  METHOD_4 ( u ) (  METHOD_5 ( STRING_3 , u ) )  METHOD_5 ( STRING_3 , u ) (  METHOD_5 ( STRING_4 , u ) )  METHOD_5 ( STRING_4 , u ) (  METHOD_5 ( STRING_5 , u ) )  METHOD_5 ( STRING_5 , u ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2.ChangeInfo> ) TYPE java.util.List<TYPE_2.ChangeInfo> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . changes ( ) . query ( STRING_1 ) . get ( ) ) INIT = VAR_4 . changes ( ) . query ( STRING_1 ) . get ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) )  org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) (  org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) (  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_1 ( ) ) COND VAR_1 . METHOD_1 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = cm . METHOD_2 ( ) ) INIT = cm . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( ( VAR_2 . METHOD_3 ( ) ) - ( VAR_2 . METHOD_4 ( ) ) ) + 1 ) INIT = ( ( VAR_2 . METHOD_3 ( ) ) - ( VAR_2 . METHOD_4 ( ) ) ) + 1 ) VAR VAR ( IF IF ( COND ( cm . METHOD_5 ( ) ) == size ) COND ( cm . METHOD_5 ( ) ) == size ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  cm . METHOD_6 ( size ) )  cm . METHOD_6 ( size ) (  VAR_3 . METHOD_7 ( VAR_4 ) )  VAR_3 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( id ) ) INIT = VAR_1 . create ( id ) ) VAR VAR (  cm . METHOD_1 ( user . getAccountId ( ) ) )  cm . METHOD_1 ( user . getAccountId ( ) ) (  cm . METHOD_2 ( VAR_2 , result . info ) )  cm . METHOD_2 ( VAR_2 , result . info ) (  cm . METHOD_3 ( ) )  cm . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . getId ( ) ) INIT = VAR_2 . getId ( ) ) VAR VAR (  VAR_4 . error ( ( STRING_1 + VAR_3 ) , e ) )  VAR_4 . error ( ( STRING_1 + VAR_3 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( res , VAR_1 . type ) )  METHOD_2 ( res , VAR_1 . type ) ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( req , res , null ) ) INIT = METHOD_3 ( req , res , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME out ) NAME out ( INIT = TYPE_6 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) INIT = TYPE_6 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . id ) . METHOD_8 ( out ) )  VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . id ) . METHOD_8 ( out ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_4 ( VAR_1 . changeId , VAR_4 ) )  METHOD_4 ( VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_7 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_7 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( ( ( TYPE_6 ) ( VAR_1 ) ) ) ) INIT = VAR_5 . get ( ( ( TYPE_6 ) ( VAR_1 ) ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( VAR_6 ) ) ) COND ! ( VAR_4 . METHOD_2 ( VAR_6 ) ) ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_6 ) )  VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_6 ) (  return ; )  return ; ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME event ) NAME event ( INIT = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( event ) )  VAR_5 . METHOD_4 ( event ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  util . METHOD_5 ( TYPE_6 . log , e ) )  util . METHOD_5 ( TYPE_6 . log , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 , changeId ) ) INIT = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 , changeId ) ) VAR VAR (  return VAR_4 . to ( git , ref ) ; )  return VAR_4 . to ( git , ref ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = req . METHOD_2 ( VAR_2 ) ) INIT = req . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( TYPE_3 ) ) ) ) COND ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( TYPE_3 ) ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE (  return new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( TYPE_3 . length ( ) ) ) , TYPE_5 . METHOD_6 ( req ) ) ; )  return new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( TYPE_3 . length ( ) ) ) , TYPE_5 . METHOD_6 ( req ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( rsrc ) )  VAR_1 . METHOD_1 ( rsrc ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e . getMessage ( ) ) ; )  throw new TYPE_2 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) . getProject ( ) ) )  VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) . getProject ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e . getMessage ( ) ) ; )  throw new TYPE_2 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME result ) NAME result ( INIT = TYPE_2 . METHOD_2 ( repo , VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( repo , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( INT_1 , result . METHOD_3 ( ) . getStatus ( ) ) )  org.junit.Assert.assertEquals ( INT_1 , result . METHOD_3 ( ) . getStatus ( ) ) (  return result . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; )  return result . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2.ChangeInfo> ) TYPE java.util.List<TYPE_2.ChangeInfo> ( NAME VAR_3 ) NAME VAR_3 ( INIT = query ( STRING_1 ) ) INIT = query ( STRING_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) )  org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) (  org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) (  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( STRING_1 , token ) ) COND TYPE_1 . METHOD_2 ( STRING_1 , token ) ( THEN THEN (  return TYPE_2 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( token ) ) ; )  return TYPE_2 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( token ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( STRING_3 , token ) ) COND TYPE_1 . METHOD_2 ( STRING_3 , token ) ( THEN THEN (  return TYPE_2 . METHOD_3 ( STRING_4 , TYPE_1 . METHOD_4 ( token ) ) ; )  return TYPE_2 . METHOD_3 ( STRING_4 , TYPE_1 . METHOD_4 ( token ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( STRING_5 , token ) ) COND TYPE_1 . METHOD_2 ( STRING_5 , token ) ( THEN THEN (  return TYPE_2 . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( token ) ) ; )  return TYPE_2 . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( token ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) )  VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) )  VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7|java.io.IOException ) TYPE TYPE_7|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e . getMessage ( ) ) ; )  throw new TYPE_5 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return TYPE_1 . METHOD_6 ( ) ; )  return TYPE_1 . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = METHOD_3 ( STRING_1 ) ) INIT = METHOD_3 ( STRING_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( METHOD_4 ( STRING_2 ) ) ) + STRING_4 ) , res . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( METHOD_4 ( STRING_2 ) ) ) + STRING_4 ) , res . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME c ) NAME c ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . create ( c ) )  VAR_2 . create ( c ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; )  throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; )  throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  c . close ( ) )  c . close ( ) ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 . ChangeInfo ( ) ) INIT = new TYPE_1 . ChangeInfo ( ) ) VAR VAR (  VAR_1 . project = project . get ( ) )  VAR_1 . project = project . get ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) (  org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_2 ) ) )  org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 . METHOD_1 ( ) ) ) COND ! ( VAR_2 . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME r ) NAME r ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND r . get ( ) . METHOD_3 ( VAR_3 ) ) COND r . get ( ) . METHOD_3 ( VAR_3 ) ( THEN THEN (  VAR_1 = r )  VAR_1 = r (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  VAR_2 = VAR_4 . Collections < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_4 ( ) . METHOD_5 ( ) )  VAR_2 = VAR_4 . Collections < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_4 ( ) . METHOD_5 ( ) (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME branch ) NAME branch ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) > VAR_2 ) COND ( VAR_1 . size ( ) ) > VAR_2 ( THEN THEN (  return METHOD_2 ( repo , db , branch , VAR_1 ) ; )  return METHOD_2 ( repo , db , branch , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( branch , VAR_1 ) ; )  return METHOD_3 ( branch , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME in ) NAME in ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR (  VAR_2 = id )  VAR_2 = id ( VAR VAR ( TYPE java.util.List<TYPE_8> ) TYPE java.util.List<TYPE_8> ( NAME VAR_3 ) NAME VAR_3 ( INIT = put . get ( ) . apply ( VAR_1 , in ) ) INIT = put . get ( ) . apply ( VAR_1 , in ) ) VAR VAR ( IF IF ( COND ( VAR_3 . size ( ) ) == 1 ) COND ( VAR_3 . size ( ) ) == 1 ( THEN THEN (  return VAR_3 . get ( 0 ) ; )  return VAR_3 . get ( 0 ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_9 ( ) ; )  throw new TYPE_9 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( VAR_1 ) )  TYPE_3 . METHOD_4 ( VAR_1 ) (  TYPE_3 . METHOD_5 ( VAR_2 ) )  TYPE_3 . METHOD_5 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  org.junit.Assert . METHOD_6 ( VAR_4 ) )  org.junit.Assert . METHOD_6 ( VAR_4 ) (  org.junit.Assert.assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_5 ) )  org.junit.Assert.assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_5 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . delete ( VAR_2 ) )  TYPE_3 . delete ( VAR_2 ) (  TYPE_3 . delete ( VAR_1 ) )  TYPE_3 . delete ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_2> ) TYPE java.util.Map<java.lang.String,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.Map < java.lang.String , TYPE_2 > ) ( VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) ) ) INIT = ( ( java.util.Map < java.lang.String , TYPE_2 > ) ( VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4<java.lang.String,TYPE_2> ) TYPE TYPE_4<java.lang.String,TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . getValue ( ) ) INIT = VAR_3 . getValue ( ) ) VAR VAR (  VAR_4 . name = VAR_3 . getKey ( ) )  VAR_4 . name = VAR_3 . getKey ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . values ( ) ; )  return VAR_1 . values ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = VAR_1 . change ( ) ) INIT = VAR_1 . change ( ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_2 ) NAME VAR_2 ( INIT = c . currentPatchSetId ( ) ) INIT = c . currentPatchSetId ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME p ) NAME p ( IN VAR_1 . approvals ( ) . values ( ) ) IN VAR_1 . approvals ( ) . values ( ) ( BLOCK BLOCK ( IF IF ( COND ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ) COND ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) . append ( TYPE_2 . ps ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . commit ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_7 ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_8 ( ) ) . METHOD_6 ( ) . METHOD_9 ( ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) . append ( TYPE_2 . ps ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . commit ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_7 ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_8 ( ) ) . METHOD_6 ( ) . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Change ) RETURN TYPE_1.Change ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND change . getStatus ( ) . METHOD_1 ( ) ) COND change . getStatus ( ) . METHOD_1 ( ) ( THEN THEN ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  change . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? null : VAR_1 ) ) )  change . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? null : VAR_1 ) ) ) THEN THEN ) IF IF (  change . METHOD_3 ( VAR_2 ) )  change . METHOD_3 ( VAR_2 ) (  change . METHOD_4 ( result . info ) )  change . METHOD_4 ( result . info ) (  TYPE_2 . METHOD_5 ( change ) )  TYPE_2 . METHOD_5 ( change ) (  return change ; )  return change ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( IF IF ( COND ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) COND ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_5 , VAR_6 ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_5 , VAR_6 ) ) ) VAR VAR (  VAR_7 . set ( VAR_8 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_9 ) ) )  VAR_7 . set ( VAR_8 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_9 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsp ) NAME rsp ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME s ) NAME s ( INIT = ( user . get ( ) . METHOD_2 ( ) ) ? VAR_2 . get ( ) : null ) INIT = ( user . get ( ) . METHOD_2 ( ) ) ? VAR_2 . get ( ) : null ) VAR VAR (  TYPE_6 . METHOD_3 ( ( ( TYPE_7 ) ( req ) ) , ( ( TYPE_8 . HttpServletResponse ) ( rsp ) ) , s ) )  TYPE_6 . METHOD_3 ( ( ( TYPE_7 ) ( req ) ) , ( ( TYPE_8 . HttpServletResponse ) ( rsp ) ) , s ) (  VAR_1 . METHOD_1 ( req , rsp ) )  VAR_1 . METHOD_1 ( req , rsp ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN AccountGroup.Id ) RETURN AccountGroup.Id ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( ) ) INIT = VAR_2 . create ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME me ) NAME me ( INIT = user . getAccountId ( ) ) INIT = user . getAccountId ( ) ) VAR VAR (  return VAR_1 . METHOD_2 ( VAR_3 , null , VAR_4 , null , java.util.Collections.singleton ( me ) , null ) ; )  return VAR_1 . METHOD_2 ( VAR_3 , null , VAR_4 , null , java.util.Collections.singleton ( me ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) )  VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_4 . METHOD_3 ( ctl . getProject ( ) . METHOD_4 ( ) ) ) INIT = VAR_4 . METHOD_3 ( ctl . getProject ( ) . METHOD_4 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( ctl , VAR_6 . create ( db . get ( ) , ctl ) , in , repo ) ) INIT = METHOD_5 ( ctl , VAR_6 . create ( db . get ( ) , ctl ) , in , repo ) ) VAR VAR (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_1 , ( ( short ) ( 1 ) ) ) ) COND METHOD_2 ( VAR_1 , ( ( short ) ( 1 ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( getRefName ( ) . equals ( TYPE_1 . METHOD_3 ( 0 , ( ( TYPE_1 . length ( ) ) - 1 ) ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ) COND ( getRefName ( ) . equals ( TYPE_1 . METHOD_3 ( 0 , ( ( TYPE_1 . length ( ) ) - 1 ) ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( input == null ) || ( ( VAR_1 ) == null ) ) || ( VAR_1 . isEmpty ( ) ) ) COND ( ( input == null ) || ( ( VAR_1 ) == null ) ) || ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_2 . create ( project ) . refs ( VAR_1 ) . delete ( ) )  VAR_2 . create ( project ) . refs ( VAR_1 ) . delete ( ) (  return TYPE_1 . METHOD_1 ( ) ; )  return TYPE_1 . METHOD_1 ( ) ; (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME plugins ) NAME plugins ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME w ) NAME w ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( ) ) INIT = TYPE_2 . METHOD_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME u ) NAME u ( IN plugins ) IN plugins ( BLOCK BLOCK (  VAR_1 . add ( java.lang.String.format ( STRING_1 , u . METHOD_2 ( ) , u . METHOD_3 ( ) ) ) )  VAR_1 . add ( java.lang.String.format ( STRING_1 , u . METHOD_2 ( ) , u . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  w . METHOD_4 ( ( ( VAR_2 ) + STRING_2 ) ) )  w . METHOD_4 ( ( ( VAR_2 ) + STRING_2 ) ) (  METHOD_5 ( VAR_1 , w ) )  METHOD_5 ( VAR_1 , w ) (  w . METHOD_4 ( STRING_3 ) )  w . METHOD_4 ( STRING_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( config . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( config . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) (  TYPE_1 . METHOD_2 ( config . METHOD_5 ( ) ) . METHOD_4 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( config . METHOD_5 ( ) ) . METHOD_4 ( VAR_1 ) (  TYPE_1 . METHOD_2 ( config . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( config . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) (  TYPE_1 . METHOD_2 ( config . METHOD_7 ( ) ) . METHOD_4 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( config . METHOD_7 ( ) ) . METHOD_4 ( VAR_2 ) (  TYPE_1 . METHOD_2 ( config . METHOD_8 ( ) ) . METHOD_4 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( config . METHOD_8 ( ) ) . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_2> ) TYPE TYPE_3<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ) INIT = new TYPE_3 < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) )  VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) (  return new TYPE_5 < TYPE_2 > ( VAR_3 ) ; )  return new TYPE_5 < TYPE_2 > ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND event instanceof TYPE_2 ) COND event instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( event ) ) ) INIT = ( ( TYPE_2 ) ( event ) ) ) VAR VAR (  VAR_2 . put ( VAR_3 , VAR_4 ) )  VAR_2 . put ( VAR_3 , VAR_4 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND event instanceof TYPE_3 ) COND event instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( INIT = ( ( TYPE_3 ) ( event ) ) ) INIT = ( ( TYPE_3 ) ( event ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME r ) NAME r ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  VAR_6 . put ( ( ( ( r . project ) + STRING_1 ) + ( VAR_7 ) ) , VAR_8 ) )  VAR_6 . put ( ( ( ( r . project ) + STRING_1 ) + ( VAR_7 ) ) , VAR_8 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( 0 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) )  assertEquals ( 0 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) (  assertEquals ( INT_1 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 ) ) ) ) )  assertEquals ( INT_1 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 ) ) ) ) (  assertEquals ( INT_2 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( ( INT_3 | INT_4 ) , 1 ) ) ) ) )  assertEquals ( INT_2 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( ( INT_3 | INT_4 ) , 1 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  org.junit.Assert . METHOD_3 ( VAR_3 ) )  org.junit.Assert . METHOD_3 ( VAR_3 ) (  org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) )  org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) (  org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) . METHOD_4 ( ) , VAR_5 ) )  org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) . METHOD_4 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( project , VAR_1 , VAR_2 , STRING_1 ) )  TYPE_1 . METHOD_2 ( project , VAR_1 , VAR_2 , STRING_1 ) ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ( INIT = repo . branch ( STRING_2 ) . commit ( ) . create ( ) ) INIT = repo . branch ( STRING_2 ) . commit ( ) . create ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = repo . METHOD_4 ( ) ) INIT = repo . METHOD_4 ( ) ) VAR VAR (  org.junit.Assert . METHOD_5 ( VAR_3 . METHOD_6 ( db , rw , rw . parseCommit ( id ) ) ) )  org.junit.Assert . METHOD_5 ( VAR_3 . METHOD_6 ( db , rw , rw . parseCommit ( id ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  change = ctx . getChange ( ) )  change = ctx . getChange ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME update ) NAME update ( INIT = ctx . METHOD_2 ( ) ) INIT = ctx . METHOD_2 ( ) ) VAR VAR (  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) )  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  change . METHOD_3 ( VAR_3 ) )  change . METHOD_3 ( VAR_3 ) (  update . METHOD_3 ( change . getStatus ( ) ) )  update . METHOD_3 ( change . getStatus ( ) ) (  TYPE_3 . METHOD_4 ( change ) )  TYPE_3 . METHOD_4 ( change ) (  ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) )  ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME currentPatchSetId ) NAME currentPatchSetId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , id ) ) INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , id ) ) VAR VAR (  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) )  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( id . get ( ) , VAR_1 ) ) INIT = new TYPE_2 ( id . get ( ) , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 . add ( VAR_2 ) ) COND VAR_3 . add ( VAR_2 ) ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_2 ) )  VAR_4 . METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = VAR_2 . get ( VAR_1 ) . path ( ) ) INIT = VAR_2 . get ( VAR_1 ) . path ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_2 ( VAR_3 . getParentKey ( ) ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_2 ( VAR_3 . getParentKey ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . delete ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_3 ( TYPE_6 VAR_4 ) { } } ) )  TYPE_1 . delete ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_3 ( TYPE_6 VAR_4 ) { } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND c . METHOD_2 ( ) ) COND c . METHOD_2 ( ) ( THEN THEN (  r . METHOD_3 ( c . METHOD_4 ( ) ) )  r . METHOD_3 ( c . METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE (  r . add ( c ) )  r . add ( c ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ( INIT = new byte [ VAR_2 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) ] ) INIT = new byte [ VAR_2 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) ] ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_5 ( in , data , 0 , data . length ) )  TYPE_4 . METHOD_5 ( in , data , 0 , data . length ) ) BLOCK BLOCK ( FINALLY FINALLY (  in . close ( ) )  in . close ( ) ) FINALLY FINALLY ) TRY TRY (  return data ; )  return data ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ( INIT = cd . change ( ) . currentPatchSetId ( ) ) INIT = cd . change ( ) . currentPatchSetId ( ) ) VAR VAR (  return format ( user , out , VAR_1 , cd , VAR_2 . METHOD_1 ( db . get ( ) , cd . notes ( ) , VAR_1 . user ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; )  return format ( user , out , VAR_1 , cd , VAR_2 . METHOD_1 ( db . get ( ) , cd . notes ( ) , VAR_1 . user ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  assertEquals ( VAR_1 , VAR_4 ) )  assertEquals ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . delete ( ) )  VAR_1 . delete ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( server , admin ) ) INIT = new TYPE_1 ( server , admin ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_2 ) NAME VAR_2 ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) VAR VAR (  METHOD_2 ( VAR_2 . get ( ) ) )  METHOD_2 ( VAR_2 . get ( ) ) (  VAR_1 . close ( ) )  VAR_1 . close ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_3 ( VAR_2 . get ( ) ) . get ( ) ) INIT = VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_3 ( VAR_2 . get ( ) ) . get ( ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_6 . get ( VAR_2 ) . getProject ( ) , VAR_3 ) )  TYPE_3 . METHOD_4 ( VAR_6 . get ( VAR_2 ) . getProject ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND t . METHOD_2 ( ) ) COND t . METHOD_2 ( ) ( THEN THEN (  return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; )  return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( t . METHOD_3 ( ) ) ) COND ! ( t . METHOD_3 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; )  return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  factory ( VAR_1 . Factory class ) )  factory ( VAR_1 . Factory class ) (  factory ( VAR_2 class ) )  factory ( VAR_2 class ) (  bind ( VAR_3 class ) )  bind ( VAR_3 class ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) (  TYPE_1 . METHOD_2 ( binder ( ) , VAR_6 class ) )  TYPE_1 . METHOD_2 ( binder ( ) , VAR_6 class ) (  TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) )  TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.NameKey ) TYPE TYPE_3.NameKey ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ) TYPE java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_9> ) TYPE java.util.Set<TYPE_9> ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE TYPE_10 ) TYPE TYPE_10 ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE TYPE_11 ) TYPE TYPE_11 ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ( VAR VAR ( TYPE TYPE_12<TYPE_13,com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_12<TYPE_13,com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_11 ) NAME VAR_11 ) VAR VAR ( VAR VAR ( TYPE TYPE_14 ) TYPE TYPE_14 ( NAME VAR_12 ) NAME VAR_12 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_13 ) NAME VAR_13 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND 0 <= VAR_1 ) COND 0 <= VAR_1 ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = VAR_2 . getValue ( VAR_1 ) ) INIT = VAR_2 . getValue ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) (  TYPE_2 . display ( TYPE_3 . METHOD_4 ( changeId , n ) , new TYPE_4 ( changeId , n ) ) )  TYPE_2 . display ( TYPE_3 . METHOD_4 ( changeId , n ) , new TYPE_4 ( changeId , n ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.PatchSet ) RETURN com.google.gerrit.reviewdb.client.PatchSet ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = change ( ) ) INIT = change ( ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME p ) NAME p ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) COND p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ( THEN THEN (  VAR_1 = p )  VAR_1 = p (  return p ; )  return p ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . put ( ( ( STRING_1 + ( VAR_2 . get ( ) ) ) + STRING_2 ) , METHOD_2 ( project . get ( ) ) ) ) INIT = VAR_1 . put ( ( ( STRING_1 + ( VAR_2 . get ( ) ) ) + STRING_2 ) , METHOD_2 ( project . get ( ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  rpc ( VAR_1 class ) )  rpc ( VAR_1 class ) (  rpc ( VAR_2 class ) )  rpc ( VAR_2 class ) (  rpc ( VAR_3 class ) )  rpc ( VAR_3 class ) (  rpc ( VAR_4 class ) )  rpc ( VAR_4 class ) (  rpc ( VAR_5 class ) )  rpc ( VAR_5 class ) (  rpc ( VAR_6 class ) )  rpc ( VAR_6 class ) (  rpc ( VAR_7 class ) )  rpc ( VAR_7 class ) (  rpc ( VAR_8 class ) )  rpc ( VAR_8 class ) (  rpc ( VAR_9 class ) )  rpc ( VAR_9 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME cmd ) NAME cmd ( INIT = STRING_1 + VAR_2 ) INIT = STRING_1 + VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_4 ( ) ) INIT = TYPE_4 . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_5 ( VAR_1 , cmd , VAR_3 ) )  TYPE_4 . METHOD_5 ( VAR_1 , cmd , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( java.lang.String.format ( ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , VAR_1 , e , cmd , VAR_3 ) , e ) )  VAR_4 . error ( java.lang.String.format ( ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , VAR_1 , e , cmd , VAR_3 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) COND TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; )  return VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( STRING_1 , e ) )  VAR_3 . METHOD_4 ( STRING_1 , e ) (  return true ; )  return true ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  c . METHOD_1 ( VAR_1 ) )  c . METHOD_1 ( VAR_1 ) (  c . METHOD_2 ( VAR_2 ) )  c . METHOD_2 ( VAR_2 ) ( IF IF ( COND ! ( VAR_3 . equals ( c . currentPatchSetId ( ) ) ) ) COND ! ( VAR_3 . equals ( c . currentPatchSetId ( ) ) ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  c . METHOD_3 ( VAR_4 . get ( db , VAR_3 ) ) )  c . METHOD_3 ( VAR_4 . get ( db , VAR_3 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  METHOD_4 ( ( STRING_1 + VAR_3 ) , VAR_5 ) )  METHOD_4 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  TYPE_2 . METHOD_5 ( c ) )  TYPE_2 . METHOD_5 ( c ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; )  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( change.getId ( ) , e ) ; )  throw new TYPE_3 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_6 ( TYPE_3 ) ) COND VAR_2 . METHOD_6 ( TYPE_3 ) ( THEN THEN (  return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; )  return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; ) THEN THEN ( ELSE ELSE (  return VAR_2 ; )  return VAR_2 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = TYPE_1 . METHOD_2 ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) (  VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( ) (  VAR_2 = VAR_2 . METHOD_5 ( 0 , ( ( VAR_2 . length ( ) ) - INT_1 ) ) )  VAR_2 = VAR_2 . METHOD_5 ( 0 , ( ( VAR_2 . length ( ) ) - INT_1 ) ) (  VAR_3 = TYPE_2 . METHOD_6 ( VAR_2 , VAR_1 ) )  VAR_3 = TYPE_2 . METHOD_6 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.ProjectConfig ) TYPE TYPE_3.ProjectConfig ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = config . commit ( VAR_2 ) ) INIT = config . commit ( VAR_2 ) ) VAR VAR (  VAR_4 . METHOD_2 ( config . getProject ( ) . METHOD_3 ( ) , VAR_5 , base , commit . getId ( ) , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  VAR_4 . METHOD_2 ( config . getProject ( ) . METHOD_3 ( ) , VAR_5 , base , commit . getId ( ) , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) (  VAR_6 . METHOD_7 ( config . getProject ( ) ) )  VAR_6 . METHOD_7 ( config . getProject ( ) ) (  return VAR_7 . create ( projectName ) . METHOD_8 ( ) ; )  return VAR_7 . create ( projectName ) . METHOD_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = group ( STRING_1 ) )  VAR_1 = group ( STRING_1 ) (  VAR_2 = group ( STRING_2 ) )  VAR_2 = group ( STRING_2 ) (  VAR_3 = group ( STRING_3 ) )  VAR_3 = group ( STRING_3 ) (  METHOD_2 ( INT_1 ) )  METHOD_2 ( INT_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME to ) NAME to ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME revision ) NAME revision ) VAR VAR (  VAR_5 = user ( STRING_4 , STRING_5 , VAR_1 ) )  VAR_5 = user ( STRING_4 , STRING_5 , VAR_1 ) (  VAR_6 = user ( STRING_6 , STRING_7 , VAR_2 ) )  VAR_6 = user ( STRING_6 , STRING_7 , VAR_2 ) (  VAR_7 = user ( STRING_8 , STRING_9 , VAR_1 , VAR_2 ) )  VAR_7 = user ( STRING_8 , STRING_9 , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) COND ! ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ( THEN THEN (  VAR_2 = VAR_2 . METHOD_4 ( new TYPE_5 ( VAR_3 ) ) )  VAR_2 = VAR_2 . METHOD_4 ( new TYPE_5 ( VAR_3 ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( TYPE_4 . METHOD_3 ( VAR_4 ) ) ) COND ! ( TYPE_4 . METHOD_3 ( VAR_4 ) ) ( THEN THEN (  VAR_2 = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_4 ) ) )  VAR_2 = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_4 ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME n ) NAME n ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . equals ( VAR_1 ) ) COND TYPE_1 . equals ( VAR_1 ) ( THEN THEN (  return STRING_1 + ( n . toString ( ) ) ; )  return STRING_1 + ( n . toString ( ) ) ; ) THEN THEN ) IF IF (  return ( ( STRING_1 + ( n . toString ( ) ) ) + STRING_2 ) + VAR_1 ; )  return ( ( STRING_1 + ( n . toString ( ) ) ) + STRING_2 ) + VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( values . size ( ) ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( values . size ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN values ) IN values ( BLOCK BLOCK (  VAR_1 . add ( TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) ) ) )  VAR_1 . add ( TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  java.util.Collections . METHOD_3 ( VAR_1 ) )  java.util.Collections . METHOD_3 ( VAR_1 ) (  java.util.Collections . METHOD_4 ( VAR_1 ) )  java.util.Collections . METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey> ( NAME projects ) NAME projects ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( IN projects ) IN projects ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( project , true ) )  VAR_1 . METHOD_2 ( project , true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . project ( ) ) ) + STRING_2 ) + STRING_3 ) ) )  METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . project ( ) ) ) + STRING_2 ) + STRING_3 ) ) (  METHOD_4 ( VAR_2 . project ( ) ) )  METHOD_4 ( VAR_2 . project ( ) ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( ( STRING_4 + project ) , e ) ; )  throw new TYPE_2 ( ( STRING_4 + project ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_1 ( BLOCK BLOCK (  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_13 ( DEFAULT DEFAULT ( BLOCK BLOCK (  this . revision = TYPE_4 . METHOD_2 ( revision ) )  this . revision = TYPE_4 . METHOD_2 ( revision ) (  return this ; )  return this ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) INIT = ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME p ) NAME p ( IN value . METHOD_2 ( ) ) IN value . METHOD_2 ( ) ( BLOCK BLOCK (  size += p . length ( ) )  size += p . length ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  size += ( value . METHOD_2 ( ) . size ( ) ) - 1 )  size += ( value . METHOD_2 ( ) . size ( ) ) - 1 (  return size ; )  return size ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Account ) TYPE TYPE_1.Account ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Account ) TYPE TYPE_1.Account ( NAME me ) NAME me ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  me . METHOD_3 ( result . METHOD_4 ( ) ) )  me . METHOD_3 ( result . METHOD_4 ( ) ) (  me . METHOD_5 ( result . METHOD_6 ( ) ) )  me . METHOD_5 ( result . METHOD_6 ( ) ) (  me . METHOD_7 ( result . METHOD_8 ( ) ) )  me . METHOD_7 ( result . METHOD_8 ( ) ) (  TYPE_2 . METHOD_9 ( ) )  TYPE_2 . METHOD_9 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . display ( me ) )  VAR_1 . display ( me ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( IN TYPE_4 . METHOD_2 ( ) ) IN TYPE_4 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_3 ( VAR_1 ) ) COND VAR_3 . METHOD_3 ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( VAR_3 , VAR_1 ) ) INIT = METHOD_4 ( VAR_3 , VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( METHOD_5 ( VAR_3 , VAR_2 , VAR_4 ) ) ) COND ! ( METHOD_5 ( VAR_3 , VAR_2 , VAR_4 ) ) ( THEN THEN (  db . delete ( VAR_4 ) )  db . delete ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN Project.NameKey ) RETURN Project.NameKey ( NAME projectName ) NAME projectName ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_1 ( ) . METHOD_2 ( ) ) INIT = repo . METHOD_1 ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_3 ( VAR_2 ) ) COND VAR_1 . METHOD_3 ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME p ) NAME p ( INIT = VAR_2 . METHOD_4 ( VAR_1 ) . toString ( ) ) INIT = VAR_2 . METHOD_4 ( VAR_1 ) . toString ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = p . METHOD_5 ( 0 , ( ( p . length ( ) ) - ( STRING_1 . length ( ) ) ) ) ) INIT = p . METHOD_5 ( 0 , ( ( p . length ( ) ) - ( STRING_1 . length ( ) ) ) ) ) VAR VAR (  return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; )  return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_6 ( ( STRING_2 + VAR_1 ) ) )  VAR_3 . METHOD_6 ( ( STRING_2 + VAR_1 ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . get ( new TYPE_3 . Key ( project , repo , VAR_1 , VAR_2 , VAR_4 ) ) ; )  return VAR_3 . get ( new TYPE_3 . Key ( project , repo , VAR_1 , VAR_2 , VAR_4 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) )  VAR_5 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( TYPE_1 . METHOD_2 ( ) ) - ( ( TYPE_2 . METHOD_3 ( ) ) + INT_1 ) ) INIT = ( TYPE_1 . METHOD_2 ( ) ) - ( ( TYPE_2 . METHOD_3 ( ) ) + INT_1 ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  VAR_4 . METHOD_4 ( VAR_2 ) )  VAR_4 . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  METHOD_5 ( diff ) )  METHOD_5 ( diff ) (  VAR_5 . METHOD_5 ( VAR_6 , VAR_1 . METHOD_6 ( ) ) )  VAR_5 . METHOD_5 ( VAR_6 , VAR_1 . METHOD_6 ( ) ) (  VAR_7 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , diff ) )  VAR_7 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , diff ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == 0 ) COND ( VAR_1 ) == 0 ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_3 . get ( 0 ) ) )  VAR_2 . METHOD_2 ( VAR_3 . get ( 0 ) ) (  METHOD_3 ( ) . METHOD_4 ( VAR_2 ) )  METHOD_3 ( ) . METHOD_4 ( VAR_2 ) (  VAR_1 = VAR_2 . METHOD_5 ( ) )  VAR_1 = VAR_2 . METHOD_5 ( ) (  VAR_4 = VAR_2 . METHOD_6 ( ) )  VAR_4 = VAR_2 . METHOD_6 ( ) (  METHOD_3 ( ) . METHOD_7 ( VAR_2 ) )  METHOD_3 ( ) . METHOD_7 ( VAR_2 ) (  METHOD_3 ( ) . METHOD_8 ( ) . METHOD_9 ( ( ( VAR_1 ) * ( VAR_3 . size ( ) ) ) , VAR_5 ) )  METHOD_3 ( ) . METHOD_8 ( ) . METHOD_9 ( ( ( VAR_1 ) * ( VAR_3 . size ( ) ) ) , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND row < ( VAR_2 ) ) COND row < ( VAR_2 ) ( THEN THEN (  ( VAR_2 ) -- )  ( VAR_2 ) -- ) THEN THEN ) IF IF ( IF IF ( COND row < ( VAR_3 ) ) COND row < ( VAR_3 ) ( THEN THEN (  ( VAR_3 ) -- )  ( VAR_3 ) -- ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  super . METHOD_1 ( row ) )  super . METHOD_1 ( row ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 . METHOD_2 ( VAR_1 ) ) IN VAR_2 . METHOD_2 ( VAR_1 ) ( BLOCK BLOCK (  METHOD_3 ( cd . change ( ) ) )  METHOD_3 ( cd . change ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException|com.google.gwtorm.server.OrmException ) TYPE java.io.IOException|com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_4 ( STRING_1 , e ) )  METHOD_4 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_4 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ( INIT = ctl . getChange ( ) . currentPatchSetId ( ) ) INIT = ctl . getChange ( ) . currentPatchSetId ( ) ) VAR VAR (  return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , ctl , psId , VAR_3 ) ) ; )  return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , ctl , psId , VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 . get ( ) ) ) )  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 . get ( ) ) ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , r ) ) )  VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , r ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 = VAR_2 . METHOD_4 ( ) . size ( ) )  VAR_1 = VAR_2 . METHOD_4 ( ) . size ( ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME err ) NAME err ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND err != null ) COND err != null ( THEN THEN (  TYPE_5 . METHOD_2 ( req , err ) )  TYPE_5 . METHOD_2 ( req , err ) ) THEN THEN ) IF IF (  TYPE_6 . METHOD_3 ( req , res , null , c ) )  TYPE_6 . METHOD_3 ( req , res , null , c ) (  res . METHOD_4 ( VAR_1 ) )  res . METHOD_4 ( VAR_1 ) (  TYPE_6 . METHOD_5 ( req , res , msg ) )  TYPE_6 . METHOD_5 ( req , res , msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . get ( ) . METHOD_2 ( ) ) COND VAR_1 . get ( ) . METHOD_2 ( ) ( THEN THEN (  return ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_4 ) ) ) && ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( VAR_5 ) ) ; )  return ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_4 ) ) ) && ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( VAR_5 ) ) ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ctx ) NAME ctx ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME schema ) NAME schema ( INIT = VAR_2 . METHOD_3 ( ctx ) ) INIT = VAR_2 . METHOD_3 ( ctx ) ) VAR VAR (  VAR_2 . METHOD_4 ( schema , ctx , VAR_1 , false ) )  VAR_2 . METHOD_4 ( schema , ctx , VAR_1 , false ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK (  ctx . close ( ) )  ctx . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( STRING_1 , e ) )  VAR_3 . METHOD_5 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 ) )  VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 ) (  VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) )  VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey> ( NAME n ) NAME n ( INIT = new TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_3 ) ) INIT = new TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_3 ) ) VAR VAR (  n . add ( VAR_1 ) )  n . add ( VAR_1 ) (  VAR_3 = java.util.Collections . METHOD_3 ( n ) )  VAR_3 = java.util.Collections . METHOD_3 ( n ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_6> ) TYPE TYPE_5<TYPE_6> ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ctx . METHOD_2 ( STRING_1 ) ) INIT = ctx . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( STRING_2 ) ) INIT = VAR_2 . get ( STRING_2 ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( VAR_3 . contains ( STRING_3 ) ) ) COND ( VAR_3 != null ) && ( VAR_3 . contains ( STRING_3 ) ) ( THEN THEN (  return new TYPE_9 ( VAR_2 ) ; )  return new TYPE_9 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ) VAR VAR (  cm = VAR_1 . create ( change ) )  cm = VAR_1 . create ( change ) (  cm . METHOD_1 ( me ) )  cm . METHOD_1 ( me ) (  cm . METHOD_2 ( ps , info ) )  cm . METHOD_2 ( ps , info ) (  cm . METHOD_3 ( reviewers ) )  cm . METHOD_3 ( reviewers ) (  cm . METHOD_4 ( VAR_2 ) )  cm . METHOD_4 ( VAR_2 ) (  cm . METHOD_5 ( ) )  cm . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) )  VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) )  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2.NameKey,com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<TYPE_2.NameKey,com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_2.NameKey,com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_3<TYPE_2.NameKey,com.google.gerrit.server.query.change.ChangeData> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . create ( ) ) INIT = TYPE_4 . create ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd ) )  VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_1> ) TYPE TYPE_2<?extendsTYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 . METHOD_4 ( ) . equals ( VAR_5 ) ) INIT = VAR_4 . METHOD_4 ( ) . equals ( VAR_5 ) ) VAR VAR (  METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) )  METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cfg ) NAME cfg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . create ( cfg . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_3 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_4 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_5 , VAR_1 ) ) ; )  return TYPE_1 . create ( cfg . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_3 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_4 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_5 , VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ) TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < > ( INT_1 ) ) INIT = new java.util.ArrayList < > ( INT_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Change.Status ) TYPE com.google.gerrit.reviewdb.client.Change.Status ( NAME e ) NAME e ( IN TYPE_3 . values ( ) ) IN TYPE_3 . values ( ) ( BLOCK BLOCK ( IF IF ( COND e . METHOD_2 ( ) ) COND e . METHOD_2 ( ) ( THEN THEN (  r . add ( new TYPE_4 ( e ) ) )  r . add ( new TYPE_4 ( e ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; )  return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( db , VAR_4 . create ( db , c ) ) . values ( ) ) INIT = VAR_3 . METHOD_2 ( db , VAR_4 . create ( db , c ) ) . values ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ) INIT = TYPE_3 . METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE (  return TYPE_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; )  return TYPE_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME git ) NAME git ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME change ) NAME change ( INIT = METHOD_3 ( git ) ) INIT = METHOD_3 ( git ) ) VAR VAR (  submit ( change . getChangeId ( ) ) )  submit ( change . getChangeId ( ) ) (  METHOD_4 ( git , false ) )  METHOD_4 ( git , false ) (  com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( 0 ) ) . isEqualTo ( change . METHOD_7 ( ) . METHOD_6 ( 0 ) ) )  com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( 0 ) ) . isEqualTo ( change . METHOD_7 ( ) . METHOD_6 ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return METHOD_1 ( repo , changeId ) ; )  return METHOD_1 ( repo , changeId ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 ? TYPE_2 . METHOD_2 ( id . getParentKey ( ) , VAR_2 ) : TYPE_3 . revision ( id ) . view ( STRING_1 ) . id ( VAR_2 ) . view ( STRING_2 ) ; )  return VAR_1 ? TYPE_2 . METHOD_2 ( id . getParentKey ( ) , VAR_2 ) : TYPE_3 . revision ( id ) . view ( STRING_1 ) . id ( VAR_2 ) . view ( STRING_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<com.google.gerrit.reviewdb.client.Change> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.Change> ( NAME submit ) NAME submit ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ( INIT = rsrc . getChange ( ) . METHOD_1 ( ) ) INIT = rsrc . getChange ( ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) && ( ! ( TYPE_4 . METHOD_2 ( topic ) ) ) ) COND ( VAR_3 ) && ( ! ( TYPE_4 . METHOD_2 ( topic ) ) ) ( THEN THEN (  return METHOD_3 ( rsrc , VAR_1 , VAR_2 , topic ) ; )  return METHOD_3 ( rsrc , VAR_1 , VAR_2 , topic ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_5 . METHOD_4 ( METHOD_5 ( rsrc , VAR_1 , VAR_2 ) ) ; )  return TYPE_5 . METHOD_4 ( METHOD_5 ( rsrc , VAR_1 , VAR_2 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) INIT = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) VAR VAR (  cd . METHOD_2 ( user ) )  cd . METHOD_2 ( user ) ( IF IF ( COND TYPE_5 . METHOD_3 ( cfg ) ) COND TYPE_5 . METHOD_3 ( cfg ) ( THEN THEN (  return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; )  return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; ) THEN THEN ) IF IF (  return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; )  return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_1> ) TYPE TYPE_2<?extendsTYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ++ i ) == ( VAR_4 . size ( ) ) ) INIT = ( ++ i ) == ( VAR_4 . size ( ) ) ) VAR VAR (  METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) )  METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  db . create ( ) )  db . create ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = db . METHOD_2 ( ) ) INIT = db . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = db . METHOD_2 ( ) ) INIT = db . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  assertEquals ( VAR_3 , VAR_4 ) )  assertEquals ( VAR_3 , VAR_4 ) (  assertEquals ( VAR_5 , VAR_6 ) )  assertEquals ( VAR_5 , VAR_6 ) (  assertEquals ( VAR_7 , VAR_8 ) )  assertEquals ( VAR_7 , VAR_8 ) (  assertEquals ( VAR_9 , VAR_10 ) )  assertEquals ( VAR_9 , VAR_10 ) (  assertEquals ( VAR_11 , VAR_12 ) )  assertEquals ( VAR_11 , VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ProjectConfig ) TYPE TYPE_1.ProjectConfig ( NAME cfg ) NAME cfg ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) VAR VAR (  VAR_3 = TYPE_2 . METHOD_4 ( cfg . METHOD_5 ( ) . get ( STRING_1 ) ) )  VAR_3 = TYPE_2 . METHOD_4 ( cfg . METHOD_5 ( ) . get ( STRING_1 ) ) (  VAR_3 . METHOD_6 ( false ) )  VAR_3 . METHOD_6 ( false ) (  VAR_3 . METHOD_7 ( false ) )  VAR_3 . METHOD_7 ( false ) (  VAR_3 . METHOD_8 ( false ) )  VAR_3 . METHOD_8 ( false ) (  VAR_3 . METHOD_9 ( false ) )  VAR_3 . METHOD_9 ( false ) (  VAR_3 . METHOD_10 ( false ) )  VAR_3 . METHOD_10 ( false ) (  VAR_3 . METHOD_11 ( ( ( short ) ( - 1 ) ) ) )  VAR_3 . METHOD_11 ( ( ( short ) ( - 1 ) ) ) (  METHOD_12 ( cfg ) )  METHOD_12 ( cfg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME error ) NAME error ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  this . VAR_1 . update ( 1 ) )  this . VAR_1 . update ( 1 ) ) THEN THEN ) IF IF ( IF IF ( COND e != null ) COND e != null ( THEN THEN (  VAR_2 . METHOD_2 ( error , e ) )  VAR_2 . METHOD_2 ( error , e ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_2 ( error ) )  VAR_2 . METHOD_2 ( error ) ) ELSE ELSE ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_3 ( error ) )  VAR_3 . METHOD_3 ( error ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME git ) NAME git ( INIT = METHOD_2 ( false ) ) INIT = METHOD_2 ( false ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Result ) TYPE TYPE_4.Result ( NAME change ) NAME change ( INIT = METHOD_3 ( git ) ) INIT = METHOD_3 ( git ) ) VAR VAR (  submit ( change . getChangeId ( ) ) )  submit ( change . getChangeId ( ) ) (  org.junit.Assert.assertEquals ( change . METHOD_4 ( ) , METHOD_5 ( ) . getId ( ) ) )  org.junit.Assert.assertEquals ( change . METHOD_4 ( ) , METHOD_5 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2.ReceiveCommand ) TYPE TYPE_2.ReceiveCommand ( NAME cmd ) NAME cmd ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( cmd . METHOD_3 ( ) ) == ( VAR_2 ) ) COND ( cmd . METHOD_3 ( ) ) == ( VAR_2 ) ( THEN THEN (  METHOD_1 ( project , cmd . getRefName ( ) , cmd . METHOD_4 ( ) , cmd . METHOD_5 ( ) ) )  METHOD_1 ( project , cmd . getRefName ( ) , cmd . METHOD_4 ( ) , cmd . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( change . getProject ( ) ) ) INIT = VAR_2 . get ( change . getProject ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( user ) ) INIT = VAR_1 . METHOD_2 ( user ) ) VAR VAR (  return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; )  return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) INIT = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) . isEqualTo ( VAR_1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; )  throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( change ) != null ) COND ( change ) != null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_3 ( change , user ) )  VAR_1 = VAR_2 . METHOD_3 ( change , user ) ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 . METHOD_3 ( project , VAR_3 , user ) )  VAR_1 = VAR_2 . METHOD_3 ( project , VAR_3 , user ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . get ( VAR_1 ) ) INIT = TYPE_4 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_5 . get ( VAR_1 ) ) INIT = TYPE_5 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_6 ) ( VAR_5 ) ) ) INIT = ( ( TYPE_6 ) ( VAR_5 ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return new TYPE_1 ( VAR_6 , VAR_3 , VAR_2 ) ; )  return new TYPE_1 ( VAR_6 , VAR_3 , VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_7 ( e . getMessage ( ) ) ; )  throw new TYPE_7 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME b ) NAME b ( INIT = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ) INIT = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.String . METHOD_2 ( revision . get ( ) ) ) INIT = java.lang.String . METHOD_2 ( revision . get ( ) ) ) VAR VAR (  TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 ) ) )  TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) RETURN java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = change ( ) ) INIT = change ( ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return java.util.Collections . METHOD_2 ( ) ; )  return java.util.Collections . METHOD_2 ( ) ; ) THEN THEN ) IF IF (  VAR_1 = new TYPE_1 < > ( ) )  VAR_1 = new TYPE_1 < > ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_3 ( db , notes ) ) IN VAR_3 . METHOD_3 ( db , notes ) ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) )  VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . delete ( METHOD_2 ( ) ) ) INIT = VAR_1 . delete ( METHOD_2 ( ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME edit ) NAME edit ( INIT = VAR_3 . METHOD_4 ( change ) ) INIT = VAR_3 . METHOD_4 ( change ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( edit . get ( ) . getChange ( ) . getProject ( ) , edit . get ( ) . getRevision ( ) . get ( ) , VAR_5 ) )  VAR_4 . METHOD_5 ( edit . get ( ) . getChange ( ) . getProject ( ) , edit . get ( ) . getRevision ( ) . get ( ) , VAR_5 ) (  org.junit.Assert . METHOD_6 ( STRING_1 ) )  org.junit.Assert . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) ) COND ( ( VAR_2 ) == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) ( THEN THEN (  VAR_2 = new TYPE_1 ( args , getChangeId ( ) , VAR_1 ) )  VAR_2 = new TYPE_1 ( args , getChangeId ( ) , VAR_1 ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( STRING_1 ) ) INIT = METHOD_3 ( STRING_1 ) ) VAR VAR (  assertEquals ( 0 , METHOD_4 ( VAR_4 , VAR_3 , VAR_2 . METHOD_5 ( ) ) ) )  assertEquals ( 0 , METHOD_4 ( VAR_4 , VAR_3 , VAR_2 . METHOD_5 ( ) ) ) (  return METHOD_6 ( VAR_2 ) ; )  return METHOD_6 ( VAR_2 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . delete ( ) )  VAR_2 . delete ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) (  METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) )  METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) )  com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) (  METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) )  METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) (  METHOD_2 ( STRING_2 ) )  METHOD_2 ( STRING_2 ) (  METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) )  METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) (  METHOD_2 ( STRING_3 ) )  METHOD_2 ( STRING_3 ) (  METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) )  METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getAccountId ( ) ) INIT = VAR_1 . getAccountId ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Key ) TYPE TYPE_3.Key ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_1 ( change . getProject ( ) ) ) INIT = VAR_1 . METHOD_1 ( change . getProject ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return VAR_3 . METHOD_2 ( VAR_2 , patchSet ) ; )  return VAR_3 . METHOD_2 ( VAR_2 , patchSet ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_3 ( e ) ; )  throw TYPE_2 . METHOD_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME diff ) NAME diff ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME base ) NAME base ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . get ( ) . METHOD_1 ( base ) . apply ( file ) . value ( ) ; )  return VAR_1 . get ( ) . METHOD_1 ( base ) . apply ( file ) . value ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException|TYPE_3|com.google.gwtorm.server.OrmException ) TYPE java.io.IOException|TYPE_3|com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME group ) NAME group ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME c ) NAME c ( INIT = VAR_2 . METHOD_2 ( group . METHOD_3 ( ) ) ) INIT = VAR_2 . METHOD_2 ( group . METHOD_3 ( ) ) ) VAR VAR (  return VAR_3 . METHOD_4 ( VAR_4 ) . format ( c . METHOD_5 ( ) ) ; )  return VAR_3 . METHOD_4 ( VAR_4 ) . format ( c . METHOD_5 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  ui . METHOD_1 ( STRING_1 ) )  ui . METHOD_1 ( STRING_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( auth . METHOD_3 ( STRING_2 ) ) == null ) COND ( auth . METHOD_3 ( STRING_2 ) ) == null ( THEN THEN (  auth . METHOD_4 ( STRING_2 , TYPE_1 . METHOD_5 ( ) ) )  auth . METHOD_4 ( STRING_2 , TYPE_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( auth . METHOD_3 ( STRING_3 ) ) == null ) COND ( auth . METHOD_3 ( STRING_3 ) ) == null ( THEN THEN (  auth . METHOD_4 ( STRING_3 , TYPE_1 . METHOD_5 ( ) ) )  auth . METHOD_4 ( STRING_3 , TYPE_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , STRING_2 , VAR_3 ) ) INIT = util . user ( VAR_1 , STRING_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = util . user ( VAR_1 , STRING_3 , VAR_3 ) ) INIT = util . user ( VAR_1 , STRING_3 , VAR_3 ) ) VAR VAR (  METHOD_3 ( STRING_4 , u . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) )  METHOD_3 ( STRING_4 , u . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) (  METHOD_6 ( STRING_6 , d . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) )  METHOD_6 ( STRING_6 , d . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) ( IF IF ( COND ( view ) != null ) COND ( view ) != null ( THEN THEN (  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) )  view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN TYPE_4 . METHOD_4 ( ) ) IN TYPE_4 . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND ( METHOD_5 ( name ) ) && ( VAR_2 . METHOD_6 ( name ) ) ) COND ( METHOD_5 ( name ) ) && ( VAR_2 . METHOD_6 ( name ) ) ( THEN THEN (  VAR_1 . put ( name , new TYPE_5 ( VAR_2 . METHOD_7 ( name ) ) ) )  VAR_1 . put ( name , new TYPE_5 ( VAR_2 . METHOD_7 ( name ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static synchronized ) MODIFIER private static synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == 0 ) COND ( VAR_2 ) == 0 ( THEN THEN (  VAR_3 = db . METHOD_2 ( ) )  VAR_3 = db . METHOD_2 ( ) (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 ) THEN THEN ) IF IF (  TYPE_3 . METHOD_3 ( VAR_1 , 0 , VAR_3 ) )  TYPE_3 . METHOD_3 ( VAR_1 , 0 , VAR_3 ) (  TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , ( ( VAR_2 ) -- ) ) )  TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , ( ( VAR_2 ) -- ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME a ) NAME a ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( patchSet . getRevision ( ) ) == null ) COND ( patchSet . getRevision ( ) ) == null ( THEN THEN (  throw new TYPE_2 ( ( STRING_1 + ( patchSet . getId ( ) ) ) ) ; )  throw new TYPE_2 ( ( STRING_1 + ( patchSet . getId ( ) ) ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME b ) NAME b ( INIT = org.eclipse.jgit.lib.ObjectId . METHOD_1 ( patchSet . getRevision ( ) . get ( ) ) ) INIT = org.eclipse.jgit.lib.ObjectId . METHOD_1 ( patchSet . getRevision ( ) . get ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  return get ( new TYPE_4 ( a , b , VAR_1 ) , project ) ; )  return get ( new TYPE_4 ( a , b , VAR_1 ) , project ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_2 < java.lang.String , TYPE_1 > ( ) )  VAR_1 = new TYPE_2 < java.lang.String , TYPE_1 > ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( t . getId ( ) , t ) )  VAR_1 . put ( t . getId ( ) , t ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME git ) NAME git ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Result ) TYPE TYPE_2.Result ( NAME change ) NAME change ( INIT = METHOD_4 ( git ) ) INIT = METHOD_4 ( git ) ) VAR VAR (  submit ( change . getChangeId ( ) ) )  submit ( change . getChangeId ( ) ) ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_5 ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_5 ( ) ) (  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_6 ( 0 ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_6 ( 0 ) ) . isEqualTo ( VAR_1 ) (  METHOD_7 ( change . getChangeId ( ) , 1 ) )  METHOD_7 ( change . getChangeId ( ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN Account.Id ) RETURN Account.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ) INIT = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ) VAR VAR (  return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; )  return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ) TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ( NAME changes ) NAME changes ( INIT = VAR_1 . get ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) INIT = VAR_1 . get ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) VAR VAR (  METHOD_4 ( changes ) )  METHOD_4 ( changes ) (  db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) )  db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) (  db . METHOD_6 ( ) . delete ( db . METHOD_6 ( ) . METHOD_7 ( project . METHOD_3 ( ) ) ) )  db . METHOD_6 ( ) . delete ( db . METHOD_6 ( ) . METHOD_7 ( project . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND account != null ) COND account != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ) INIT = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( account . METHOD_3 ( ) ) != null ) COND ( account . METHOD_3 ( ) ) != null ( THEN THEN (  result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 )  result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ) THEN THEN ) IF IF (  return result ; )  return result ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ( INIT = new TYPE_1 ( id , TYPE_3 . METHOD_1 ( VAR_1 ) ) ) INIT = new TYPE_1 ( id , TYPE_3 . METHOD_1 ( VAR_1 ) ) ) VAR VAR (  TYPE_3 . METHOD_2 ( key ) )  TYPE_3 . METHOD_2 ( key ) (  return key ; )  return key ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . error ( STRING_1 , e ) )  VAR_2 . error ( STRING_1 , e ) (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( change , VAR_1 . METHOD_3 ( ) , db ) ) COND METHOD_2 ( change , VAR_1 . METHOD_3 ( ) , db ) ( THEN THEN (  VAR_1 . METHOD_4 ( event ) )  VAR_1 . METHOD_4 ( event ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_5 ( event ) )  METHOD_5 ( event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( user . METHOD_6 ( ) . contains ( getChange ( ) . getId ( ) ) ) ) INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( user . METHOD_6 ( ) . contains ( getChange ( ) . getId ( ) ) ) ) VAR VAR (  METHOD_7 ( VAR_2 , user ) )  METHOD_7 ( VAR_2 , user ) (  return VAR_2 . METHOD_8 ( ) . toString ( ) ; )  return VAR_2 . METHOD_8 ( ) . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME api ) NAME api ( INIT = TYPE_2 . change ( id ) . view ( STRING_1 ) . METHOD_2 ( STRING_2 , n ) . METHOD_2 ( STRING_3 , e ) ) INIT = TYPE_2 . change ( id ) . view ( STRING_1 ) . METHOD_2 ( STRING_2 , n ) . METHOD_2 ( STRING_3 , e ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  api . METHOD_2 ( STRING_4 , VAR_1 ) )  api . METHOD_2 ( STRING_4 , VAR_1 ) ) THEN THEN ) IF IF (  return api ; )  return api ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.util.List<TYPE_2>> ) TYPE TYPE_1<java.util.List<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.ReviewDb ) TYPE TYPE_3.ReviewDb ( NAME db ) NAME db ( INIT = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . onSuccess ( db . METHOD_1 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_1 . onSuccess ( db . METHOD_1 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5.OrmException ) TYPE TYPE_5.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . METHOD_6 ( e ) )  VAR_1 . METHOD_6 ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( change , METHOD_3 ( changeId ) ) ) . isEqualTo ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( change , METHOD_3 ( changeId ) ) ) . isEqualTo ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME edit ) NAME edit ( INIT = VAR_3 . METHOD_4 ( change ) ) INIT = VAR_3 . METHOD_4 ( change ) ) VAR VAR (  METHOD_5 ( FLOAT_1 ) )  METHOD_5 ( FLOAT_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR (  METHOD_6 ( VAR_6 ) )  METHOD_6 ( VAR_6 ) (  VAR_7 . METHOD_7 ( VAR_8 class ) )  VAR_7 . METHOD_7 ( VAR_8 class ) (  VAR_7 . METHOD_8 ( STRING_1 ) )  VAR_7 . METHOD_8 ( STRING_1 ) (  VAR_1 . METHOD_9 ( edit . get ( ) , edit . get ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) )  VAR_1 . METHOD_9 ( edit . get ( ) , edit . get ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = VAR_1 . create ( db . get ( ) , rsrc . METHOD_1 ( ) ) ) INIT = VAR_1 . create ( db . get ( ) , rsrc . METHOD_1 ( ) ) ) VAR VAR (  return format ( cd , TYPE_3 . of ( rsrc . METHOD_2 ( ) . getId ( ) ) ) ; )  return format ( cd , TYPE_3 . of ( rsrc . METHOD_2 ( ) . getId ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  a . METHOD_2 ( VAR_1 ) )  a . METHOD_2 ( VAR_1 ) (  a . METHOD_3 ( TYPE_2 . METHOD_4 ( name ) ) )  a . METHOD_3 ( TYPE_2 . METHOD_4 ( name ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = a . METHOD_5 ( ) ) INIT = a . METHOD_5 ( ) ) VAR VAR (  VAR_3 . METHOD_6 ( VAR_2 ) )  VAR_3 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME group ) NAME group ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_3 ( VAR_1 ) ; )  throw new TYPE_3 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; )  return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 instanceof TYPE_3 ) COND VAR_3 instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_3 ) ) ) VAR VAR (  out . append ( STRING_1 ) . append ( VAR_5 ) . append ( STRING_2 ) . append ( VAR_6 ) . append ( STRING_3 ) )  out . append ( STRING_1 ) . append ( VAR_5 ) . append ( STRING_2 ) . append ( VAR_6 ) . append ( STRING_3 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN (  METHOD_2 ( out , VAR_1 , VAR_2 , VAR_3 ) )  METHOD_2 ( out , VAR_1 , VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( out , VAR_1 , VAR_2 , VAR_3 ) )  METHOD_3 ( out , VAR_1 , VAR_2 , VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = VAR_1 . get ( ) . changes ( ) . get ( id ) ) INIT = VAR_1 . get ( ) . changes ( ) . get ( id ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( c ) ; )  return rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( c ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ( INIT = req . METHOD_1 ( ) ) INIT = req . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 . get ( ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 . get ( ) ) ) ( THEN THEN (  throw new TYPE_7 ( STRING_1 ) ; )  throw new TYPE_7 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = METHOD_3 ( VAR_1 , input . message , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) INIT = METHOD_3 ( VAR_1 , input . message , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) VAR VAR (  return VAR_3 . create ( VAR_4 ) . format ( change ) ; )  return VAR_3 . create ( VAR_4 ) . format ( change ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3.NameKey ) TYPE TYPE_3.NameKey ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 . NameKey ( STRING_1 ) ) INIT = new TYPE_3 . NameKey ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_5.Project ) TYPE TYPE_5.Project ( NAME project ) NAME project ( INIT = new TYPE_5 . Project ( ) ) INIT = new TYPE_5 . Project ( ) ) VAR VAR (  project . METHOD_2 ( VAR_4 . get ( ) ) )  project . METHOD_2 ( VAR_4 . get ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ps ) NAME ps ( INIT = new TYPE_1 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , project , VAR_6 ) ) INIT = new TYPE_1 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , project , VAR_6 ) ) VAR VAR (  ps . METHOD_3 ( VAR_7 ) )  ps . METHOD_3 ( VAR_7 ) (  return ps ; )  return ps ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( CHAR_1 ) ) )  METHOD_2 ( b , b . append ( CHAR_1 ) ) (  METHOD_2 ( b , b . append ( CHAR_2 ) ) )  METHOD_2 ( b , b . append ( CHAR_2 ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) . create ( ) . METHOD_3 ( key ) ) INIT = new TYPE_3 ( ) . create ( ) . METHOD_3 ( key ) ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( VAR_3 ) , VAR_1 ) ) . METHOD_7 ( new TYPE_5 ( VAR_4 , VAR_5 ) ) )  TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( VAR_3 ) , VAR_1 ) ) . METHOD_7 ( new TYPE_5 ( VAR_4 , VAR_5 ) ) (  com.google.common.truth.Truth.assertThat ( VAR_6 . METHOD_8 ( VAR_3 , key ) ) . METHOD_9 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_6 . METHOD_8 ( VAR_3 , key ) ) . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) VAR VAR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  assertEquals ( STRING_1 , VAR_1 . getName ( ) ) )  assertEquals ( STRING_1 , VAR_1 . getName ( ) ) (  assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) ) )  assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) ) (  assertEquals ( STRING_3 , VAR_1 . METHOD_6 ( ) ) )  assertEquals ( STRING_3 , VAR_1 . METHOD_6 ( ) ) (  METHOD_7 ( VAR_1 . METHOD_8 ( ) ) )  METHOD_7 ( VAR_1 . METHOD_8 ( ) ) (  METHOD_9 ( VAR_1 , 2 , 1 , 0 , ( - 1 ) , ( - 2 ) ) )  METHOD_9 ( VAR_1 , 2 , 1 , 0 , ( - 1 ) , ( - 2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ( INIT = METHOD_2 ( admin ) ) INIT = METHOD_2 ( admin ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME reviewers ) NAME reviewers ( INIT = METHOD_3 ( changeId , STRING_1 , INT_1 ) ) INIT = METHOD_3 ( changeId , STRING_1 , INT_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_1 ) )  org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_1 ) (  reviewers = METHOD_3 ( changeId , STRING_1 , INT_2 ) )  reviewers = METHOD_3 ( changeId , STRING_1 , INT_2 ) (  org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_2 ) )  org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_2 ) (  reviewers = METHOD_3 ( changeId , STRING_2 , INT_3 ) )  reviewers = METHOD_3 ( changeId , STRING_2 , INT_3 ) (  org.junit.Assert.assertEquals ( reviewers . size ( ) , 1 ) )  org.junit.Assert.assertEquals ( reviewers . size ( ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 . Id ( INT_1 ) ) INIT = new TYPE_2 . Id ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Account ) TYPE TYPE_3.Account ( NAME account ) NAME account ( INIT = new TYPE_3 . Account ( VAR_1 ) ) INIT = new TYPE_3 . Account ( VAR_1 ) ) VAR VAR (  account . METHOD_2 ( name ) )  account . METHOD_2 ( name ) (  account . METHOD_3 ( email ) )  account . METHOD_3 ( email ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = new TYPE_1 ( account , VAR_2 . Collections < TYPE_4 . Id > METHOD_4 ( ) , VAR_2 . Collections < TYPE_5 > METHOD_4 ( ) ) ) INIT = new TYPE_1 ( account , VAR_2 . Collections < TYPE_4 . Id > METHOD_4 ( ) , VAR_2 . Collections < TYPE_5 > METHOD_4 ( ) ) ) VAR VAR (  return s ; )  return s ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  change = ctx . getChange ( ) )  change = ctx . getChange ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME update ) NAME update ( INIT = ctx . METHOD_2 ( psId ) ) INIT = ctx . METHOD_2 ( psId ) ) VAR VAR (  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) )  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  change . METHOD_3 ( VAR_3 ) )  change . METHOD_3 ( VAR_3 ) (  update . METHOD_3 ( change . getStatus ( ) ) )  update . METHOD_3 ( change . getStatus ( ) ) (  TYPE_3 . METHOD_4 ( change ) )  TYPE_3 . METHOD_4 ( change ) (  ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) )  ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_3 ) NAME VAR_3 ( INIT = walk . parseCommit ( VAR_2 . getId ( ) ) ) INIT = walk . parseCommit ( VAR_2 . getId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 . METHOD_2 ( ) ) > 0 ) COND ( VAR_3 . METHOD_2 ( ) ) > 0 ( THEN THEN (  return TYPE_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . contains ( VAR_1 . getId ( ) ) ; )  return TYPE_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . contains ( VAR_1 . getId ( ) ) ; ) THEN THEN ( ELSE ELSE (  return VAR_1 == ( VAR_4 ) ; )  return VAR_1 == ( VAR_4 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME display ) NAME display ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . revision = revision )  this . revision = revision ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_1 ( ) ) INIT = TYPE_2 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = info . revision ( revision ) ) INIT = info . revision ( revision ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME commit ) NAME commit ( INIT = VAR_3 . commit ( ) ) INIT = VAR_3 . commit ( ) ) VAR VAR (  changeId = info . METHOD_2 ( ) )  changeId = info . METHOD_2 ( ) (  project = info . project ( ) )  project = info . project ( ) (  VAR_4 = commit . METHOD_3 ( ) )  VAR_4 = commit . METHOD_3 ( ) (  message = commit . message ( ) )  message = commit . message ( ) (  METHOD_4 ( info , VAR_2 ) )  METHOD_4 ( info , VAR_2 ) (  METHOD_5 ( info , VAR_3 , VAR_1 , VAR_2 ) )  METHOD_5 ( info , VAR_3 , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , 2 ) )  VAR_1 . METHOD_2 ( STRING_1 , 2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( METHOD_3 ( ) ) + STRING_2 ) + ( METHOD_4 ( ) ) ) INIT = ( ( METHOD_3 ( ) ) + STRING_2 ) + ( METHOD_4 ( ) ) ) VAR VAR (  VAR_1 . update ( 1 ) )  VAR_1 . update ( 1 ) (  VAR_3 . METHOD_5 ( METHOD_3 ( ) , VAR_4 , VAR_5 ) )  VAR_3 . METHOD_5 ( METHOD_3 ( ) , VAR_4 , VAR_5 ) (  VAR_1 . update ( 1 ) )  VAR_1 . update ( 1 ) (  VAR_3 . METHOD_6 ( METHOD_3 ( ) , ( ( VAR_6 ) + STRING_3 ) , VAR_2 ) )  VAR_3 . METHOD_6 ( METHOD_3 ( ) , ( ( VAR_6 ) + STRING_3 ) , VAR_2 ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) COND ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , change.getId ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , change.getId ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME change ) NAME change ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_2 . getChangeId ( ) ) )  METHOD_4 ( VAR_2 . getChangeId ( ) ) ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 . getId ( ) ) . isEqualTo ( VAR_1 . getId ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_3 . getId ( ) ) . isEqualTo ( VAR_1 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME add ) NAME add ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME values ) NAME values ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = input . getValue ( ) . METHOD_1 ( ) ) INIT = input . getValue ( ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  input . METHOD_2 ( STRING_1 ) )  input . METHOD_2 ( STRING_1 ) (  values . add ( VAR_2 ) )  values . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  insert ( values ) )  insert ( values ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( key . repo , key . path ) ) INIT = new TYPE_3 ( key . repo , key . path ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( null , VAR_2 ) )  VAR_1 . METHOD_2 ( null , VAR_2 ) (  return TYPE_2 . METHOD_3 ( VAR_1 ) ; )  return TYPE_2 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  key . repo = null )  key . repo = null ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( INT_1 ) )  METHOD_2 ( INT_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( STRING_1 , e ) )  VAR_4 . METHOD_3 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME api ) NAME api ( INIT = TYPE_3 . revision ( VAR_1 ) . view ( STRING_1 ) . id ( info . path ( ) ) . view ( STRING_2 ) ) INIT = TYPE_3 . revision ( VAR_1 ) . view ( STRING_1 ) . id ( info . path ( ) ) . view ( STRING_2 ) ) VAR VAR ( IF IF ( COND r ) COND r ( THEN THEN (  api . put ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) )  api . put ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  api . delete ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) )  api . delete ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_3 ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( config ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; )  return new TYPE_3 ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( config ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) )  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.NameKey ) TYPE TYPE_3.NameKey ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_9 ) TYPE TYPE_9 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ) TYPE java.util.Set<org.eclipse.jgit.revwalk.RevCommit> ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_10> ) TYPE java.util.Set<TYPE_10> ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE TYPE_11 ) TYPE TYPE_11 ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ( VAR VAR ( TYPE TYPE_12 ) TYPE TYPE_12 ( NAME VAR_11 ) NAME VAR_11 ) VAR VAR ( VAR VAR ( TYPE TYPE_13<TYPE_14,com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_13<TYPE_14,com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_12 ) NAME VAR_12 ) VAR VAR ( VAR VAR ( TYPE TYPE_15 ) TYPE TYPE_15 ( NAME VAR_13 ) NAME VAR_13 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_14 ) NAME VAR_14 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new java.lang.String ( VAR_1 , VAR_3 ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new java.lang.String ( VAR_1 , VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) )  p . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) (  org.junit.Assert.assertEquals ( TYPE_3 . of ( ) , p . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( TYPE_3 . of ( ) , p . METHOD_5 ( ) ) (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( true ) ) INIT = VAR_3 . create ( true ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . add ( VAR_2 . get ( VAR_4 ) ) )  result . add ( VAR_2 . get ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME t ) NAME t ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( STRING_1 ) )  r . append ( STRING_1 ) ( IF IF ( COND VAR_1 . METHOD_5 ( ) ) COND VAR_1 . METHOD_5 ( ) ( THEN THEN (  r . append ( ( STRING_2 + VAR_3 ) ) )  r . append ( ( STRING_2 + VAR_3 ) ) (  r . append ( STRING_3 ) )  r . append ( STRING_3 ) ) THEN THEN ) IF IF (  return r . toString ( ) ; )  return r . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ) INIT = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( new TYPE_4 ( ) ) ; )  throw new TYPE_3 ( new TYPE_4 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( new TYPE_4 ( ) ) ; )  throw new TYPE_3 ( new TYPE_4 ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  index = new TYPE_1 ( VAR_1 ) )  index = new TYPE_1 ( VAR_1 ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . METHOD_2 ( index ) )  VAR_2 . METHOD_2 ( index ) (  VAR_3 = new TYPE_3 ( VAR_2 ) )  VAR_3 = new TYPE_3 ( VAR_2 ) (  VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null ) ) )  VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = config . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) ) INIT = config . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) ) VAR VAR ( IF IF ( COND VAR_3 <= 0 ) COND VAR_3 <= 0 ( THEN THEN (  VAR_3 = config . METHOD_2 ( STRING_3 , null , STRING_4 , 0 ) )  VAR_3 = config . METHOD_2 ( STRING_3 , null , STRING_4 , 0 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 <= 0 ) COND VAR_3 <= 0 ( THEN THEN (  VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ) THEN THEN ) IF IF (  return TYPE_5 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_3 , STRING_5 ) ) ; )  return TYPE_5 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_3 , STRING_5 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR (  VAR_2 = VAR_2 . METHOD_3 ( ) )  VAR_2 = VAR_2 . METHOD_3 ( ) ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( ) ) ) COND ! ( VAR_2 . METHOD_4 ( ) ) ( THEN THEN (  throw new TYPE_4 ( this , 1 , STRING_1 , VAR_2 ) ; )  throw new TYPE_4 ( this , 1 , STRING_1 , VAR_2 ) ; ) THEN THEN ) IF IF (  VAR_4 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) )  VAR_4 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) (  VAR_5 . METHOD_6 ( VAR_4 ) )  VAR_5 . METHOD_6 ( VAR_4 ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ ] { STRING_1 , STRING_2 } ) INIT = new java.lang.String [ ] { STRING_1 , STRING_2 } ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME m ) NAME m ( INIT = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , true ) ) INIT = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , true ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_3 ) )  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) )  new TYPE_1 ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) (  METHOD_4 ( STRING_4 ) )  METHOD_4 ( STRING_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  assertEquals ( ( STRING_5 + VAR_1 ) , e . getMessage ( ) ) )  assertEquals ( ( STRING_5 + VAR_1 ) , e . getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Key<TYPE_2> ) RETURN TYPE_1.Key<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FIELD FIELD ( MODIFIER private static final ) MODIFIER private static final ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) FIELD FIELD ( CONSTRUCTOR CONSTRUCTOR ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) CONSTRUCTOR CONSTRUCTOR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_5.HttpServletResponse ) TYPE TYPE_5.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) )  TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) (  METHOD_7 ( VAR_4 ) )  METHOD_7 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_9.to ) TYPE TYPE_9.to ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_2 ( ) { private static final long VAR_1 = INT_1 ; VAR_2 ( TYPE_3 VAR_3 ) { } protected void METHOD_2 ( final TYPE_4 req , final TYPE_5 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) ; METHOD_7 ( VAR_4 ) ; TYPE_7 VAR_5 ; TYPE_8 VAR_6 ; TYPE_9 . to VAR_7 ; } } )  new TYPE_2 ( ) { private static final long VAR_1 = INT_1 ; VAR_2 ( TYPE_3 VAR_3 ) { } protected void METHOD_2 ( final TYPE_4 req , final TYPE_5 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) ; METHOD_7 ( VAR_4 ) ; TYPE_7 VAR_5 ; TYPE_8 VAR_6 ; TYPE_9 . to VAR_7 ; } } ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( patchSet . METHOD_2 ( ) ) ) COND ! ( patchSet . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_3 ( ctx . METHOD_4 ( ) , ctx . METHOD_5 ( psId ) , patchSet ) )  VAR_1 . METHOD_3 ( ctx . METHOD_4 ( ) , ctx . METHOD_5 ( psId ) , patchSet ) ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  ctx . METHOD_6 ( ) )  ctx . METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  index = new TYPE_1 ( VAR_1 ) )  index = new TYPE_1 ( VAR_1 ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . METHOD_2 ( index ) )  VAR_2 . METHOD_2 ( index ) (  VAR_3 = new TYPE_3 ( VAR_2 ) )  VAR_3 = new TYPE_3 ( VAR_2 ) (  VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) , new TYPE_6 ( null ) ) )  VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) , new TYPE_6 ( null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = r . METHOD_1 ( ) ) INIT = r . METHOD_1 ( ) ) VAR VAR (  METHOD_2 ( n ) )  METHOD_2 ( n ) ( IF IF ( COND ( VAR_1 . put ( n , r ) ) != null ) COND ( VAR_1 . put ( n , r ) ) != null ( THEN THEN (  throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; )  throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; ) THEN THEN ) IF IF (  VAR_2 . add ( n ) )  VAR_2 . add ( n ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.OrmException ) RETURN TYPE_1.OrmException ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME err ) NAME err ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ) COND ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ( THEN THEN (  err . METHOD_4 ( err . METHOD_3 ( ) ) )  err . METHOD_4 ( err . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return new TYPE_1 . OrmException ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , err ) ; )  return new TYPE_1 . OrmException ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , err ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . projects ( ) . name ( VAR_1 ) . create ( ) ) INIT = VAR_3 . projects ( ) . name ( VAR_1 ) . create ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , p . name ) )  org.junit.Assert.assertEquals ( VAR_1 , p . name ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) INIT = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) VAR VAR (  org.junit.Assert . METHOD_2 ( VAR_4 ) )  org.junit.Assert . METHOD_2 ( VAR_4 ) (  TYPE_5 . METHOD_3 ( VAR_4 . getProject ( ) , p ) )  TYPE_5 . METHOD_3 ( VAR_4 . getProject ( ) , p ) (  METHOD_4 ( VAR_1 , STRING_2 ) )  METHOD_4 ( VAR_1 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN Account.Id ) RETURN Account.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME a ) NAME a ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND a == null ) COND a == null ( THEN THEN (  throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; )  throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  return a . getId ( ) ; )  return a . getId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) )  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) )  VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) (  VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) )  VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return ! ( VAR_2 . isEmpty ( ) ) ; )  return ! ( VAR_2 . isEmpty ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME edit ) NAME edit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , VAR_2 , edit ) ) )  VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ) VAR VAR ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME reviewers ) NAME reviewers ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( db , change , null , ps , commit , VAR_1 , VAR_2 , info , reviewers ) )  METHOD_1 ( db , change , null , ps , commit , VAR_1 , VAR_2 , info , reviewers ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = p . METHOD_2 ( ) . METHOD_3 ( p . getName ( ) ) ) INIT = p . METHOD_2 ( ) . METHOD_3 ( p . getName ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_4 ( in , VAR_1 ) )  TYPE_4 . METHOD_4 ( in , VAR_1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  in . close ( ) )  in . close ( ) (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) FINALLY FINALLY ) TRY TRY (  return VAR_1 . METHOD_5 ( ) ; )  return VAR_1 . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) (  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_3 , VAR_4 ) ) INIT = util . user ( VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) )  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  index = new TYPE_1 ( VAR_1 ) )  index = new TYPE_1 ( VAR_1 ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . METHOD_2 ( index ) )  VAR_2 . METHOD_2 ( index ) (  VAR_3 = new TYPE_3 ( VAR_2 ) )  VAR_3 = new TYPE_3 ( VAR_2 ) (  VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) ) )  VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . get ( ) ) instanceof TYPE_2 ) COND ( VAR_1 . get ( ) ) instanceof TYPE_2 ( THEN THEN ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_1 ( 1 , STRING_1 ) ; )  throw new TYPE_1 ( 1 , STRING_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_1 ( 1 , STRING_2 ) ; )  throw new TYPE_1 ( 1 , STRING_2 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ) THEN THEN ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_1 ( VAR_3 , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_4 VAR_4 ) { } public void onSuccess ( TYPE_3 result ) { } } ) )  TYPE_1 . METHOD_1 ( VAR_3 , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_4 VAR_4 ) { } public void onSuccess ( TYPE_3 result ) { } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ) INIT = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.ReviewDb ) RETURN TYPE_1.ReviewDb ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( db ) == null ) COND ( db ) == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  db = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) )  db = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3.OrmException ) TYPE TYPE_3.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( 1 , STRING_1 , e ) ; )  throw new TYPE_2 ( 1 , STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return db ; )  return db ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) (  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) )  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_3 , VAR_5 ) ) INIT = util . user ( VAR_3 , VAR_5 ) ) VAR VAR (  METHOD_6 ( STRING_2 , u . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ) )  METHOD_6 ( STRING_2 , u . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME diff ) NAME diff ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . diff ( VAR_6 , VAR_1 , VAR_2 ) ) INIT = VAR_3 . diff ( VAR_6 , VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( INIT = new TYPE_5 ( VAR_7 ) ) INIT = new TYPE_5 ( VAR_7 ) ) VAR VAR (  VAR_8 . format ( VAR_5 , VAR_1 , VAR_2 ) )  VAR_8 . format ( VAR_5 , VAR_1 , VAR_2 ) (  return VAR_7 . toString ( VAR_9 ) ; )  return VAR_7 . toString ( VAR_9 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME projectName ) NAME projectName ( IN VAR_3 . METHOD_3 ( ) ) IN VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( INIT = VAR_3 . get ( projectName ) ) INIT = VAR_3 . get ( projectName ) ) VAR VAR ( IF IF ( COND e == null ) COND e == null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . equals ( e . getProject ( ) . METHOD_4 ( VAR_4 ) ) ) COND VAR_1 . equals ( e . getProject ( ) . METHOD_4 ( VAR_4 ) ) ( THEN THEN (  VAR_2 . add ( VAR_5 . format ( e . getProject ( ) ) ) )  VAR_2 . add ( VAR_5 . format ( e . getProject ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( insert ( VAR_4 , VAR_1 ) ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( ) ) INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( insert ( VAR_4 , VAR_1 ) ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ( INIT = client . METHOD_7 ( VAR_2 ) ) INIT = client . METHOD_7 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ! ( result . METHOD_8 ( ) ) ) COND ! ( result . METHOD_8 ( ) ) ( THEN THEN (  throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_9 ( ) . getId ( ) , VAR_3 , result . METHOD_10 ( ) ) ) ; )  throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_9 ( ) . getId ( ) , VAR_3 , result . METHOD_10 ( ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ( INIT = notes . getChange ( ) . METHOD_2 ( ) ) INIT = notes . getChange ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ( INIT = METHOD_3 ( ) . getAccountId ( ) ) INIT = METHOD_3 ( ) . getAccountId ( ) ) VAR VAR (  return id . equals ( VAR_1 ) ; )  return id . equals ( VAR_1 ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME change ) NAME change ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME notes ) NAME notes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = notes . getChange ( ) ) INIT = notes . getChange ( ) ) VAR VAR (  TYPE_3 . METHOD_1 ( METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) . equals ( change . getProject ( ) ) , STRING_1 ) )  TYPE_3 . METHOD_1 ( METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) . equals ( change . getProject ( ) ) , STRING_1 ) (  return METHOD_2 ( ) . METHOD_4 ( notes ) . METHOD_5 ( ) ; )  return METHOD_2 ( ) . METHOD_4 ( notes ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_1 == ( VAR_5 ) ) ? VAR_2 . insert ( VAR_6 , VAR_3 ) : TYPE_5 . METHOD_2 ( repo , rw , base , path ) ) INIT = ( VAR_1 == ( VAR_5 ) ) ? VAR_2 . insert ( VAR_6 , VAR_3 ) : TYPE_5 . METHOD_2 ( repo , rw , base , path ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_7 . METHOD_3 ( VAR_8 ) )  VAR_7 . METHOD_3 ( VAR_8 ) (  VAR_7 . METHOD_4 ( VAR_4 ) )  VAR_7 . METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( path ) { public void apply ( TYPE_6 VAR_7 ) { VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; } } ; )  return new TYPE_1 ( path ) { public void apply ( TYPE_6 VAR_7 ) { VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 )  VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 (  VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 )  VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 (  VAR_3 = change . METHOD_5 ( ) )  VAR_3 = change . METHOD_5 ( ) (  VAR_4 = change . getStatus ( ) . METHOD_6 ( ) )  VAR_4 = change . getStatus ( ) . METHOD_6 ( ) (  a . status = change . getStatus ( ) )  a . status = change . getStatus ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) INIT = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 , repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) )  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) (  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) )  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) (  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) )  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME user ) NAME user ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( IF IF ( COND user instanceof TYPE_5 ) COND user instanceof TYPE_5 ( THEN THEN (  throw new TYPE_6 ( STRING_1 ) ; )  throw new TYPE_6 ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( user instanceof TYPE_7 ) ) COND ! ( user instanceof TYPE_7 ) ( THEN THEN (  throw new TYPE_3 ( id ) ; )  throw new TYPE_3 ( id ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return TYPE_8 . METHOD_1 ( id , VAR_3 ) ; )  return TYPE_8 . METHOD_1 ( id , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project ) TYPE com.google.gerrit.reviewdb.client.Project ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) INIT = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSetApproval> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME approvals ) NAME approvals ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return input . getAccountId ( ) . equals ( rsrc . METHOD_4 ( ) . getAccountId ( ) ) ; )  return input . getAccountId ( ) . equals ( rsrc . METHOD_4 ( ) . getAccountId ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_3 . METHOD_1 ( db . METHOD_2 ( ) . METHOD_3 ( rsrc . getChange ( ) . getId ( ) ) , new TYPE_4 < com.google.gerrit.reviewdb.client . PatchSetApproval > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client . PatchSetApproval input ) { return input . getAccountId ( ) . equals ( rsrc . METHOD_4 ( ) . getAccountId ( ) ) ; } } ) ; )  return TYPE_3 . METHOD_1 ( db . METHOD_2 ( ) . METHOD_3 ( rsrc . getChange ( ) . getId ( ) ) , new TYPE_4 < com.google.gerrit.reviewdb.client . PatchSetApproval > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client . PatchSetApproval input ) { return input . getAccountId ( ) . equals ( rsrc . METHOD_4 ( ) . getAccountId ( ) ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  res . METHOD_2 ( type . METHOD_3 ( ) ) )  res . METHOD_2 ( type . METHOD_3 ( ) ) (  res . METHOD_4 ( TYPE_4 . name ( ) ) )  res . METHOD_4 ( TYPE_4 . name ( ) ) (  res . METHOD_5 ( VAR_1 , STRING_1 ) )  res . METHOD_5 ( VAR_1 , STRING_1 ) (  res . METHOD_5 ( VAR_2 , STRING_2 ) )  res . METHOD_5 ( VAR_2 , STRING_2 ) (  METHOD_6 ( req , res ) )  METHOD_6 ( req , res ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN (  display ( r ) )  display ( r ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( VAR_2 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { if ( METHOD_4 ( ) ) { display ( r ) ; } } } ) )  TYPE_1 . METHOD_3 ( VAR_2 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { if ( METHOD_4 ( ) ) { display ( r ) ; } } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME file ) NAME file ) VAR VAR ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME set ) NAME set ( INIT = VAR_2 . get ( file ) ) INIT = VAR_2 . get ( file ) ) VAR VAR ( IF IF ( COND set != null ) COND set != null ( THEN THEN (  set . METHOD_2 ( VAR_1 ) )  set . METHOD_2 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . put ( file , TYPE_1 . METHOD_3 ( VAR_1 ) ) )  VAR_2 . put ( file , TYPE_1 . METHOD_3 ( VAR_1 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( db ) != null ) COND ( db ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME w ) NAME w ( IN db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) IN db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ( BLOCK BLOCK (  add ( VAR_1 , w . getAccountId ( ) ) )  add ( VAR_1 , w . getAccountId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3.OrmException ) TYPE TYPE_3.OrmException ( NAME err ) NAME err ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ref ) NAME ref ( INIT = repo . METHOD_2 ( VAR_1 ) ) INIT = repo . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . run ( ) )  VAR_2 . run ( ) ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND ref == null ) COND ref == null ( THEN THEN (  VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) )  VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) (  VAR_4 = VAR_5 . get ( ) )  VAR_4 = VAR_5 . get ( ) ) THEN THEN ( ELSE ELSE (  VAR_3 = ref . METHOD_4 ( ) )  VAR_3 = ref . METHOD_4 ( ) (  VAR_4 = METHOD_5 ( rw , VAR_3 ) )  VAR_4 = METHOD_5 ( rw , VAR_3 ) ) ELSE ELSE ) IF IF (  return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; )  return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) && ( ! ( METHOD_7 ( db ) ) ) ; )  return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) && ( ! ( METHOD_7 ( db ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( p ) ) INIT = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( p ) ) VAR VAR ( IF IF ( COND in != null ) COND in != null ( THEN THEN (  METHOD_4 ( in , ( STRING_1 + p ) ) )  METHOD_4 ( in , ( STRING_1 + p ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . error ( ( STRING_2 + p ) ) )  VAR_2 . error ( ( STRING_2 + p ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME length ) NAME length ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( INIT = this ) INIT = this ) VAR VAR ( WHILE WHILE ( COND t . METHOD_1 ( ) ) COND t . METHOD_1 ( ) ( BLOCK BLOCK (  VAR_1 ++ )  VAR_1 ++ (  t = ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) . METHOD_3 ( ) )  t = ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) . METHOD_3 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( change , patchSet ) ) INIT = VAR_3 . get ( change , patchSet ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME patch ) NAME patch ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  VAR_4 = new java.util.ArrayList < TYPE_5 > ( ) )  VAR_4 = new java.util.ArrayList < TYPE_5 > ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME p ) NAME p ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR (  p . file = patch . METHOD_3 ( ) )  p . file = patch . METHOD_3 ( ) (  p . type = patch . METHOD_4 ( ) )  p . type = patch . METHOD_4 ( ) (  VAR_4 . add ( p ) )  VAR_4 . add ( p ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  commit . METHOD_2 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) ) ) ) )  commit . METHOD_2 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) ) ) ) (  VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) )  VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) (  VAR_5 . METHOD_2 ( VAR_1 ) )  VAR_5 . METHOD_2 ( VAR_1 ) (  VAR_6 . METHOD_2 ( VAR_1 ) )  VAR_6 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ( INIT = METHOD_3 ( METHOD_4 ( VAR_1 ) ) ) INIT = METHOD_3 ( METHOD_4 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ( INIT = VAR_2 . get ( VAR_3 ) . commit . message ) INIT = VAR_2 . get ( VAR_3 ) . commit . message ) VAR VAR (  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_5 ( ) . METHOD_6 ( ) ) ) )  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME topic ) NAME topic ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  in . topic = topic )  in . topic = topic ( TRY TRY ( BLOCK BLOCK (  VAR_1 . apply ( change , in ) )  VAR_1 . apply ( change , in ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException|TYPE_3 ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException|TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_2 ) NAME VAR_2 ( IN index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( db , VAR_1 . getId ( ) ) , this ) ) . METHOD_4 ( ) ) IN index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( db , VAR_1 . getId ( ) ) , this ) ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) COND VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME user ) NAME user ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ProjectConfig ) TYPE TYPE_2.ProjectConfig ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , VAR_5 , null , VAR_6 , VAR_7 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; )  return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , VAR_5 , null , VAR_6 , VAR_7 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1.Result> ) TYPE java.util.Map<java.lang.String,TYPE_1.Result> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_3 , STRING_5 , project ) )  METHOD_3 ( VAR_2 , VAR_3 , STRING_5 , project ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = METHOD_4 ( VAR_4 ) ) INIT = METHOD_4 ( VAR_4 ) ) VAR VAR (  in . branch = STRING_3 )  in . branch = STRING_3 (  VAR_5 = VAR_1 . get ( STRING_1 ) . getChangeId ( ) )  VAR_5 = VAR_1 . get ( STRING_1 ) . getChangeId ( ) (  METHOD_5 ( in , VAR_6 class , ( STRING_6 + ( VAR_5 ) ) ) )  METHOD_5 ( in , VAR_6 class , ( STRING_6 + ( VAR_5 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Id ) TYPE TYPE_3.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_4 . METHOD_2 ( change . METHOD_3 ( ) . get ( ) , VAR_3 . METHOD_4 ( ) ) ) && ( VAR_2 . equals ( VAR_3 . METHOD_5 ( ) ) ) ) COND ( TYPE_4 . METHOD_2 ( change . METHOD_3 ( ) . get ( ) , VAR_3 . METHOD_4 ( ) ) ) && ( VAR_2 . equals ( VAR_3 . METHOD_5 ( ) ) ) ( THEN THEN (  result . add ( VAR_3 ) )  result . add ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . equals ( VAR_1 ) ) ) COND ! ( VAR_2 . equals ( VAR_1 ) ) ( THEN THEN (  org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) )  org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) )  METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) (  METHOD_4 ( STRING_1 ) )  METHOD_4 ( STRING_1 ) (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME s ) NAME s ( INIT = VAR_1 . METHOD_3 ( db ) ) INIT = VAR_1 . METHOD_3 ( db ) ) VAR VAR (  assertEquals ( 1 , s . size ( ) ) )  assertEquals ( 1 , s . size ( ) ) (  METHOD_2 ( s . contains ( STRING_3 ) ) )  METHOD_2 ( s . contains ( STRING_3 ) ) (  METHOD_5 ( s . contains ( STRING_4 ) ) )  METHOD_5 ( s . contains ( STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( ( s . METHOD_3 ( ) . METHOD_4 ( ) ? s . METHOD_3 ( ) . get ( ) : TYPE_4 . METHOD_2 ( s . METHOD_5 ( ) . getId ( ) ) ) ) ) INIT = TYPE_4 . METHOD_2 ( ( s . METHOD_3 ( ) . METHOD_4 ( ) ? s . METHOD_3 ( ) . get ( ) : TYPE_4 . METHOD_2 ( s . METHOD_5 ( ) . getId ( ) ) ) ) ) VAR VAR (  return new TYPE_1 ( VAR_1 , TYPE_4 . METHOD_6 ( VAR_1 , s ) ) ; )  return new TYPE_1 ( VAR_1 , TYPE_4 . METHOD_6 ( VAR_1 , s ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ui ) NAME ui ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN (  ui = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) )  ui = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ui == null ) COND ui == null ( THEN THEN (  ui = TYPE_2 . METHOD_6 ( ) . METHOD_5 ( ) )  ui = TYPE_2 . METHOD_6 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF (  return ui == ( VAR_2 ) ; )  return ui == ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE TYPE_2<?extendsTYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.ArrayList<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( VAR_1 ) ) INIT = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( VAR_1 ) ) VAR VAR (  java.util.Collections . METHOD_1 ( r , VAR_2 ) )  java.util.Collections . METHOD_1 ( r , VAR_2 ) (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  user = ctx . METHOD_2 ( ) . METHOD_3 ( ) )  user = ctx . METHOD_2 ( ) . METHOD_3 ( ) (  notes = ctx . METHOD_4 ( ) )  notes = ctx . METHOD_4 ( ) (  ps = VAR_1 . get ( ctx . METHOD_5 ( ) , ctx . METHOD_4 ( ) , psId ) )  ps = VAR_1 . get ( ctx . METHOD_5 ( ) , ctx . METHOD_4 ( ) , psId ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR (  VAR_2 |= METHOD_6 ( ctx ) )  VAR_2 |= METHOD_6 ( ctx ) (  VAR_2 |= METHOD_7 ( ctx ) )  VAR_2 |= METHOD_7 ( ctx ) (  VAR_2 |= METHOD_8 ( ctx ) )  VAR_2 |= METHOD_8 ( ctx ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  ctx . METHOD_9 ( ) )  ctx . METHOD_9 ( ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( IN p . METHOD_3 ( ) ) IN p . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND c . METHOD_4 ( ) ) COND c . METHOD_4 ( ) ( THEN THEN (  VAR_1 . add ( VAR_2 . format ( c . getProject ( ) ) ) )  VAR_1 . add ( VAR_2 . format ( c . getProject ( ) ) ) (  VAR_1 . METHOD_5 ( METHOD_1 ( c ) ) )  VAR_1 . METHOD_5 ( METHOD_1 ( c ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) )  VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) )  VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) (  TYPE_2 . METHOD_7 ( true ) )  TYPE_2 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_3 ) NAME VAR_3 ( INIT = insert ( METHOD_3 ( VAR_1 ) ) ) INIT = insert ( METHOD_3 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_4 ) NAME VAR_4 ( INIT = insert ( METHOD_3 ( VAR_2 ) ) ) INIT = insert ( METHOD_3 ( VAR_2 ) ) ) VAR VAR (  METHOD_4 ( STRING_3 ) )  METHOD_4 ( STRING_3 ) (  METHOD_4 ( STRING_4 ) )  METHOD_4 ( STRING_4 ) (  METHOD_4 ( STRING_5 , VAR_3 ) )  METHOD_4 ( STRING_5 , VAR_3 ) (  METHOD_4 ( STRING_6 , VAR_4 ) )  METHOD_4 ( STRING_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) VAR VAR (  r . METHOD_3 ( ) )  r . METHOD_3 ( ) (  r . METHOD_4 ( true ) )  r . METHOD_4 ( true ) (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_4 ) ) INIT = util . user ( VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) )  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME git ) NAME git ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( patchSet , VAR_1 , git , rw , db ) )  TYPE_2 . METHOD_2 ( patchSet , VAR_1 , git , rw , db ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , patchSet . getId ( ) , VAR_1 ) , e ) )  VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , patchSet . getId ( ) , VAR_1 ) , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( res . METHOD_3 ( ) . close ( ) ) )  METHOD_2 ( res . METHOD_3 ( ) . close ( ) ) (  METHOD_4 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) )  METHOD_4 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) )  METHOD_2 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) (  METHOD_4 ( res . METHOD_3 ( ) . close ( ) ) )  METHOD_4 ( res . METHOD_3 ( ) . close ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = cd . getId ( ) . toString ( ) ) INIT = cd . getId ( ) . toString ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) COND cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ( THEN THEN (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) (  commit ( VAR_1 ) )  commit ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_2 ( id ) )  VAR_2 . METHOD_2 ( id ) (  commit ( VAR_2 ) )  commit ( VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Factory ) TYPE TYPE_1.Factory ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ( db ) != null ) , STRING_1 ) )  TYPE_2 . METHOD_2 ( ( ( db ) != null ) , STRING_1 ) ( IF IF ( COND ( update ) == null ) COND ( update ) == null ( THEN THEN (  update = VAR_1 . create ( db , METHOD_3 ( ) , VAR_2 , VAR_3 ) . METHOD_4 ( repo , rw , VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 . create ( ) ) )  update = VAR_1 . create ( db , METHOD_3 ( ) , VAR_2 , VAR_3 ) . METHOD_4 ( repo , rw , VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 . create ( ) ) ) THEN THEN ) IF IF (  return update ; )  return update ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( false ) )  VAR_1 . METHOD_1 ( false ) ( VAR VAR ( TYPE TYPE_2.Account ) TYPE TYPE_2.Account ( NAME me ) NAME me ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  me . METHOD_3 ( VAR_2 ) )  me . METHOD_3 ( VAR_2 ) (  me . METHOD_4 ( VAR_3 ) )  me . METHOD_4 ( VAR_3 ) (  me . METHOD_5 ( info ) )  me . METHOD_5 ( info ) (  TYPE_3 . METHOD_6 ( ) )  TYPE_3 . METHOD_6 ( ) (  VAR_4 . display ( me ) )  VAR_4 . display ( me ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i < ( args . length ) ) COND i < ( args . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 = ( VAR_2 + STRING_1 ) + ( args [ i ] ) )  VAR_2 = ( VAR_2 + STRING_1 ) + ( args [ i ] ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) )  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) (  assertEquals ( ( STRING_4 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_4 ) ) )  assertEquals ( ( STRING_4 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_4 ) ) (  assertEquals ( ( STRING_6 + ( STRING_2 + STRING_7 ) ) , METHOD_2 ( STRING_6 ) ) )  assertEquals ( ( STRING_6 + ( STRING_2 + STRING_7 ) ) , METHOD_2 ( STRING_6 ) ) (  assertEquals ( ( STRING_8 + ( STRING_2 + STRING_9 ) ) , METHOD_2 ( STRING_8 ) ) )  assertEquals ( ( STRING_8 + ( STRING_2 + STRING_9 ) ) , METHOD_2 ( STRING_8 ) ) (  assertEquals ( ( STRING_10 + ( STRING_2 + STRING_11 ) ) , METHOD_2 ( STRING_10 ) ) )  assertEquals ( ( STRING_10 + ( STRING_2 + STRING_11 ) ) , METHOD_2 ( STRING_10 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < TYPE_2 > ( ) { private int VAR_3 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ) { METHOD_2 ( ) ; } } } ) INIT = new TYPE_1 < TYPE_2 > ( ) { private int VAR_3 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ) { METHOD_2 ( ) ; } } } ) VAR VAR ( FIELD FIELD ( MODIFIER private ) MODIFIER private ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) FIELD FIELD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ) COND ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  p . METHOD_3 ( VAR_2 ) )  p . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Factory ) TYPE TYPE_2.Factory ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_2 . apply ( VAR_1 , rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; )  return VAR_2 . apply ( VAR_1 , rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.Repository ) RETURN org.eclipse.jgit.lib.Repository ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME name ) NAME name ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_1 ( name . get ( ) ) ; )  return VAR_1 . METHOD_1 ( name . get ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) )  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSet.Id,com.google.gerrit.reviewdb.client.PatchSetApproval> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSet.Id,com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ) TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_3 . create ( ) )  VAR_1 = TYPE_3 . create ( ) ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_4 . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) IN TYPE_4 . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ( BLOCK BLOCK (  VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) )  VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  cm . METHOD_2 ( ( line + i ) , VAR_2 , VAR_3 . diff ( ) ) )  cm . METHOD_2 ( ( line + i ) , VAR_2 , VAR_3 . diff ( ) ) ) BLOCK BLOCK ) FOR FOR (  return line + VAR_1 ; )  return line + VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_1 ( STRING_1 ) ) INIT = VAR_1 . METHOD_1 ( STRING_1 ) ) VAR VAR (  display ( VAR_3 , VAR_4 . METHOD_2 ( ) , ( ( VAR_5 . METHOD_3 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_4 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_5 ( ) ) || VAR_2 ) ) )  display ( VAR_3 , VAR_4 . METHOD_2 ( ) , ( ( VAR_5 . METHOD_3 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_4 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_5 ( ) ) || VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( CHAR_1 ) )  VAR_1 . append ( CHAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_3 = false )  VAR_3 = false ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( CHAR_2 ) )  VAR_1 . append ( CHAR_2 ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) )  VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( VAR_6 ) )  VAR_1 . append ( VAR_6 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . append ( CHAR_3 ) )  VAR_1 . append ( CHAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = METHOD_2 ( branch ) ) INIT = METHOD_2 ( branch ) ) VAR VAR ( IF IF ( COND c != null ) COND c != null ( THEN THEN (  ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) )  ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) (  METHOD_5 ( branch , c ) )  METHOD_5 ( branch , c ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME p ) NAME p ( INIT = TYPE_6 . METHOD_3 ( ) ) INIT = TYPE_6 . METHOD_3 ( ) ) VAR VAR (  result . METHOD_4 ( p ) )  result . METHOD_4 ( p ) (  TYPE_6 . METHOD_5 ( p ) )  TYPE_6 . METHOD_5 ( p ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; result . METHOD_4 ( p ) ; TYPE_6 . METHOD_5 ( p ) ; } } ) )  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; result . METHOD_4 ( p ) ; TYPE_6 . METHOD_5 ( p ) ; } } ) (  close ( ) )  close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; )  return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME schema ) NAME schema ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( schema . METHOD_4 ( ) ) )  METHOD_3 ( schema . METHOD_4 ( ) ) (  assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) )  assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) (  assertEquals ( 1 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) )  assertEquals ( 1 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  java.util.Collections . METHOD_2 ( VAR_1 ) )  java.util.Collections . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ) INIT = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ) VAR VAR (  return VAR_2 . to ( git , STRING_1 ) ; )  return VAR_2 . to ( git , STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ( INIT = METHOD_3 ( in ) ) INIT = METHOD_3 ( in ) ) VAR VAR (  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) (  assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 1 ) ) , in . METHOD_6 ( 0 ) ) , out . METHOD_7 ( ) ) )  assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 1 ) ) , in . METHOD_6 ( 0 ) ) , out . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  in . revision = revision )  in . revision = revision (  VAR_1 . projects ( ) . name ( project . getProject ( ) . METHOD_1 ( ) . get ( ) ) . branch ( name ) . create ( in ) )  VAR_1 . projects ( ) . name ( project . getProject ( ) . METHOD_1 ( ) . get ( ) ) . branch ( name ) . create ( in ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_2 ( e ) ; )  throw METHOD_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4.ReviewDb> ) TYPE TYPE_3<TYPE_4.ReviewDb> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME config ) NAME config ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  return new TYPE_7 ( VAR_2 , VAR_3 , config ) ; )  return new TYPE_7 ( VAR_2 , VAR_3 , config ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME err ) NAME err ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND e == null ) COND e == null ( THEN THEN (  VAR_2 . error ( err ) )  VAR_2 . error ( err ) ) THEN THEN ( ELSE ELSE (  VAR_2 . error ( err , e ) )  VAR_2 . error ( err , e ) ) ELSE ELSE ) IF IF (  return TYPE_2 . METHOD_2 ( ) ; )  return TYPE_2 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . error ( err ) ; )  return TYPE_1 . error ( err ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) (  modules.add ( new TYPE_3 ( ) ) )  modules.add ( new TYPE_3 ( ) ) (  modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) )  modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ( IF IF ( COND ( VAR_5 ) == ( VAR_6 ) ) COND ( VAR_5 ) == ( VAR_6 ) ( THEN THEN (  modules.add ( new TYPE_5 ( ) ) )  modules.add ( new TYPE_5 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 . METHOD_3 ( modules ) ; )  return VAR_1 . METHOD_3 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_3 ( VAR_1 . getValue ( i ) ) ) == VAR_3 ) COND ( TYPE_2 . METHOD_3 ( VAR_1 . getValue ( i ) ) ) == VAR_3 ( THEN THEN (  VAR_1 . METHOD_4 ( i ) )  VAR_1 . METHOD_4 ( i ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ( IF IF ( COND VAR_3 != VAR_2 ) COND VAR_3 != VAR_2 ( THEN THEN (  METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) && ( user . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( METHOD_2 ( ) ) && ( user . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) )  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) )  VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME msg ) NAME msg ( INIT = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( rsrc . getChange ( ) . getId ( ) ) . METHOD_7 ( ) ) , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . METHOD_8 ( ) ) == null ; } } ) , null ) ) INIT = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( rsrc . getChange ( ) . getId ( ) ) . METHOD_7 ( ) ) , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . METHOD_8 ( ) ) == null ; } } ) , null ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( input . METHOD_8 ( ) ) == null ; )  return ( input . METHOD_8 ( ) ) == null ; ) BLOCK BLOCK ) METHOD METHOD (  return msg ; )  return msg ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) ) COND ! ( METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) ( THEN THEN (  throw new TYPE_1 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) ; )  throw new TYPE_1 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) ; ) THEN THEN ) IF IF (  METHOD_6 ( VAR_2 , VAR_3 ) )  METHOD_6 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR (  return VAR_4 . getValue ( VAR_5 ) ; )  return VAR_4 . getValue ( VAR_5 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . close ( ) )  VAR_2 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( IF IF ( COND ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( VAR_4 ) ) COND ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_6 ) ) INIT = new TYPE_1 ( VAR_6 ) ) VAR VAR (  VAR_7 . set ( VAR_8 . create ( null , VAR_5 ) . METHOD_3 ( INT_1 , VAR_9 ) ) )  VAR_7 . set ( VAR_8 . create ( null , VAR_5 ) . METHOD_3 ( INT_1 , VAR_9 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) COND ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) )  VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) COND ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_4 ( db , cd ) ) ) ) COND ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_4 ( db , cd ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_5 ( ) . METHOD_1 ( ) ; )  return METHOD_5 ( ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME type ) NAME type ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_1 ( VAR_2 ) ) != null ) COND ( VAR_1 . METHOD_1 ( VAR_2 ) ) != null ( THEN THEN (  return VAR_1 . METHOD_1 ( VAR_2 ) ; )  return VAR_1 . METHOD_1 ( VAR_2 ) ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) COND VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , name ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , name ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , VAR_2 , name ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 , name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME commit ) NAME commit ( INIT = VAR_1 . get ( c . getId ( ) ) ) INIT = VAR_1 . get ( c . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME s ) NAME s ( INIT = ( commit != null ) ? VAR_2 : null ) INIT = ( commit != null ) ? VAR_2 : null ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( s != null ) && ( ( ( s . equals ( VAR_4 ) ) || ( s . equals ( VAR_5 ) ) ) || ( s . equals ( VAR_6 ) ) ) ) COND ( s != null ) && ( ( ( s . equals ( VAR_4 ) ) || ( s . equals ( VAR_5 ) ) ) || ( s . equals ( VAR_6 ) ) ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( name . get ( ) ) ) INIT = VAR_5 . METHOD_2 ( name . get ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 ) INIT = VAR_7 ) VAR VAR ( IF IF ( COND VAR_6 != null ) COND VAR_6 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( INIT = VAR_6 . METHOD_3 ( ) ) INIT = VAR_6 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_8 != null ) COND VAR_8 != null ( THEN THEN (  VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME group ) NAME group ( INIT = VAR_3 . get ( VAR_2 ) ) INIT = VAR_3 . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_4 ( VAR_2 ) ; )  throw new TYPE_4 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_1 , group ) ; )  return new TYPE_1 ( VAR_1 , group ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME status ) NAME status ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  VAR_3 . append ( VAR_4 ) )  VAR_3 . append ( VAR_4 ) (  VAR_3 . append ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) ) )  VAR_3 . append ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) ) (  METHOD_1 ( VAR_6 , VAR_3 . toString ( ) ) )  METHOD_1 ( VAR_6 , VAR_3 . toString ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_2 ( VAR_6 ) ) COND METHOD_2 ( VAR_6 ) ( THEN THEN (  METHOD_1 ( VAR_6 , null ) )  METHOD_1 ( VAR_6 , null ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 . METHOD_3 ( ) ) + 1 ) INIT = ( VAR_1 . METHOD_3 ( ) ) + 1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 , VAR_1 . METHOD_6 ( ) ) ) INIT = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 , VAR_1 . METHOD_6 ( ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( TYPE_3 . METHOD_7 ( STRING_1 ) , result . METHOD_8 ( ) ) )  org.junit.Assert.assertEquals ( TYPE_3 . METHOD_7 ( STRING_1 ) , result . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = walk . METHOD_2 ( ) )  this . VAR_1 = walk . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  revision = ( id != null ) ? walk . parseCommit ( id ) : null )  revision = ( id != null ) ? walk . parseCommit ( id ) : null (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 = null )  VAR_1 = null ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = METHOD_2 ( name ) ) INIT = METHOD_2 ( name ) ) VAR VAR (  return VAR_1 . get ( p , METHOD_3 ( name , p ) ) ; )  return VAR_1 . get ( p , METHOD_3 ( name , p ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) )  VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  TYPE_1 . METHOD_1 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ) )  TYPE_1 . METHOD_1 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ) (  TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_5 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) )  VAR_5 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_7 ( VAR_6 . METHOD_6 ( ) ) )  VAR_5 . METHOD_7 ( VAR_6 . METHOD_6 ( ) ) ) ELSE ELSE ) IF IF (  VAR_3 . METHOD_8 ( ) )  VAR_3 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME branch ) NAME branch ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME p ) NAME p ( INIT = VAR_1 . get ( branch . getParentKey ( ) ) ) INIT = VAR_1 . get ( branch . getParentKey ( ) ) ) VAR VAR ( IF IF ( COND p == null ) COND p == null ( THEN THEN (  throw new TYPE_3 ( branch . getParentKey ( ) ) ; )  throw new TYPE_3 ( branch . getParentKey ( ) ) ; ) THEN THEN ) IF IF (  return p . METHOD_1 ( ) ; )  return p . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cfg ) NAME cfg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  c . METHOD_2 ( null ) )  c . METHOD_2 ( null ) (  c . METHOD_3 ( cfg . METHOD_4 ( STRING_1 , null , STRING_2 , INT_1 ) ) )  c . METHOD_3 ( cfg . METHOD_4 ( STRING_1 , null , STRING_2 , INT_1 ) ) (  c . METHOD_5 ( false ) )  c . METHOD_5 ( false ) (  return new TYPE_1 [ ] { c } ; )  return new TYPE_1 [ ] { c } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( db , change . change ( ) , user ( admin ) ) ) INIT = VAR_3 . METHOD_2 ( db , change . change ( ) , user ( admin ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) . isEmpty ( ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) . isEmpty ( ) ) . isEqualTo ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = null )  VAR_1 = null (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) (  TYPE_1 . METHOD_2 ( VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_3 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_3 . METHOD_4 ( ) )  TYPE_3 . METHOD_4 ( ) ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_6 . METHOD_3 ( ) )  VAR_6 . METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME reviewers ) NAME reviewers ( INIT = VAR_1 . METHOD_2 ( db , TYPE_1 . of ( user . email , admin . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ) INIT = VAR_1 . METHOD_2 ( db , TYPE_1 . of ( user . email , admin . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( reviewers ) . METHOD_4 ( user . id ) )  com.google.common.truth.Truth.assertThat ( reviewers ) . METHOD_4 ( user . id ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME res ) NAME res ( INIT = METHOD_2 ( STRING_1 , new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } . METHOD_3 ( ) ) ) INIT = METHOD_2 ( STRING_1 , new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } . METHOD_3 ( ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( 1 , res . size ( ) ) )  org.junit.Assert.assertEquals ( 1 , res . size ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = res . get ( STRING_2 ) ) INIT = res . get ( STRING_2 ) ) VAR VAR (  METHOD_4 ( STRING_3 , d ) )  METHOD_4 ( STRING_3 , d ) (  org.junit.Assert.assertEquals ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , d . name ) )  org.junit.Assert.assertEquals ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , d . name ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Account> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Account> ( NAME VAR_1 ) NAME VAR_1 ( INIT = db . METHOD_3 ( ) . METHOD_1 ( email ) . METHOD_4 ( ) ) INIT = db . METHOD_3 ( ) . METHOD_1 ( email ) . METHOD_4 ( ) ) VAR VAR (  return ( VAR_1 . size ( ) ) == 1 ? auth ( VAR_1 . get ( 0 ) ) : null ; )  return ( VAR_1 . size ( ) ) == 1 ? auth ( VAR_1 . get ( 0 ) ) : null ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( ) . log ( STRING_1 , e ) )  METHOD_5 ( ) . log ( STRING_1 , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ( IF IF ( COND ! ( TYPE_4 . equals ( info . path ( ) ) ) ) COND ! ( TYPE_4 . equals ( info . path ( ) ) ) ( THEN THEN (  VAR_1 . append ( info . status ( ) ) )  VAR_1 . append ( info . status ( ) ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME out ) NAME out ( INIT = new TYPE_4 ( VAR_3 ) ) INIT = new TYPE_4 ( VAR_3 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  git . METHOD_3 ( VAR_1 ) . METHOD_4 ( out ) )  git . METHOD_3 ( VAR_1 ) . METHOD_4 ( out ) ) BLOCK BLOCK ( FINALLY FINALLY (  out . close ( ) )  out . close ( ) ) FINALLY FINALLY ) TRY TRY (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME diff ) NAME diff ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( path . isEmpty ( ) ) ) COND ! ( path . isEmpty ( ) ) ( THEN THEN (  diff . METHOD_2 ( TYPE_3 . create ( path ) ) )  diff . METHOD_2 ( TYPE_3 . create ( path ) ) ) THEN THEN ) IF IF (  diff . METHOD_3 ( repo ) )  diff . METHOD_3 ( repo ) (  diff . METHOD_4 ( true ) )  diff . METHOD_4 ( true ) (  diff . format ( VAR_1 , VAR_2 ) )  diff . format ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  diff . METHOD_5 ( ) )  diff . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<TYPE_3.Id,TYPE_4.Id> ) TYPE java.util.Map<TYPE_3.Id,TYPE_4.Id> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 ) )  VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 , VAR_2 . get ( VAR_1 . getId ( ) ) ) )  VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 , VAR_2 . get ( VAR_1 . getId ( ) ) ) ) ELSE ELSE ) IF IF (  VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 ) ) )  VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ) INIT = ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_5 . format ( null , null , null , null , cfg , VAR_1 ) , VAR_2 ) )  org.junit.Assert.assertEquals ( VAR_5 . format ( null , null , null , null , cfg , VAR_1 ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME p ) NAME p ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = ( VAR_1 ) ? VAR_2 . METHOD_2 ( p ) : VAR_2 . METHOD_3 ( p ) ) INIT = ( VAR_1 ) ? VAR_2 . METHOD_2 ( p ) : VAR_2 . METHOD_3 ( p ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = repo . METHOD_4 ( ) ) INIT = repo . METHOD_4 ( ) ) VAR VAR (  return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_5 ( ) ) , VAR_3 , new TYPE_3 ( ) , true ) ; )  return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_5 ( ) ) , VAR_3 , new TYPE_3 ( ) , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND info . METHOD_1 ( ) ) COND info . METHOD_1 ( ) ( THEN THEN (  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) , STRING_1 ) )  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND info . METHOD_3 ( ) ) COND info . METHOD_3 ( ) ( THEN THEN (  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) , STRING_2 ) )  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) , STRING_2 ) ) THEN THEN ) IF IF ( IF IF ( COND info . METHOD_4 ( ) ) COND info . METHOD_4 ( ) ( THEN THEN (  TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) , STRING_3 ) )  TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) , STRING_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b . isEmpty ( ) ) )  METHOD_2 ( b . isEmpty ( ) ) (  METHOD_3 ( b . METHOD_4 ( ) ) )  METHOD_3 ( b . METHOD_4 ( ) ) (  assertEquals ( STRING_1 , b . METHOD_5 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_5 ( ) ) (  b . append ( STRING_2 ) )  b . append ( STRING_2 ) (  METHOD_2 ( b . METHOD_4 ( ) ) )  METHOD_2 ( b . METHOD_4 ( ) ) (  assertEquals ( STRING_2 , b . METHOD_5 ( ) ) )  assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3> ) TYPE TYPE_2<?extendsTYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . projects ( ) . create ( in ) )  VAR_2 . projects ( ) . create ( in ) (  org.junit.Assert . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) )  org.junit.Assert . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( VAR_1 ) (  METHOD_5 ( INT_1 ) )  METHOD_5 ( INT_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.PatchSet> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.PatchSet> ( NAME patchSets ) NAME patchSets ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ( IN patchSets ) IN patchSets ( BLOCK BLOCK (  db . METHOD_2 ( ) . delete ( db . METHOD_2 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) )  db . METHOD_2 ( ) . delete ( db . METHOD_2 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) (  db . METHOD_4 ( ) . delete ( db . METHOD_4 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) )  db . METHOD_4 ( ) . delete ( db . METHOD_4 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) (  db . patchSets ( ) . delete ( java.util.Collections.singleton ( patchSet ) ) )  db . patchSets ( ) . delete ( java.util.Collections.singleton ( patchSet ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  VAR_4 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  VAR_4 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( user ) ) INIT = TYPE_1 . METHOD_1 ( user ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_2 ( CHAR_1 ) ) < 0 ) COND ( VAR_1 . METHOD_2 ( CHAR_1 ) ) < 0 ( THEN THEN (  return ( ( VAR_2 ) + STRING_1 ) + VAR_1 ; )  return ( ( VAR_2 ) + STRING_1 ) + VAR_1 ; ) THEN THEN ( ELSE ELSE (  return ( ( ( VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; )  return ( ( ( VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( req ) ) INIT = METHOD_2 ( req ) ) VAR VAR (  res . METHOD_3 ( VAR_2 ) )  res . METHOD_3 ( VAR_2 ) (  res . METHOD_4 ( STRING_1 ) )  res . METHOD_4 ( STRING_1 ) (  res . METHOD_5 ( ( ( int ) ( VAR_1 . length ( ) ) ) ) )  res . METHOD_5 ( ( ( int ) ( VAR_1 . length ( ) ) ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME out ) NAME out ( INIT = res . METHOD_6 ( ) ) INIT = res . METHOD_6 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME in ) NAME in ( INIT = new TYPE_6 ( VAR_1 ) ) INIT = new TYPE_6 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_7 . METHOD_7 ( in , out ) )  TYPE_7 . METHOD_7 ( in , out ) ) BLOCK BLOCK ( FINALLY FINALLY (  in . close ( ) )  in . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME url ) NAME url ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  url . append ( req . METHOD_2 ( ) ) )  url . append ( req . METHOD_2 ( ) ) (  url . append ( CHAR_1 ) )  url . append ( CHAR_1 ) (  url . append ( CHAR_2 ) )  url . append ( CHAR_2 ) (  url . append ( VAR_1 ) )  url . append ( VAR_1 ) (  rsp . METHOD_3 ( url . toString ( ) ) )  rsp . METHOD_3 ( url . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ( VAR_2 ) != null ) , STRING_1 ) )  TYPE_2 . METHOD_2 ( ( ( VAR_2 ) != null ) , STRING_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_2 . isEmpty ( ) ) ? 1 : ( VAR_2 . size ( ) ) + 1 ) INIT = ( VAR_2 . isEmpty ( ) ) ? 1 : ( VAR_2 . size ( ) ) + 1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 . Id ( VAR_5 , VAR_3 ) ) INIT = new TYPE_1 . Id ( VAR_5 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ( INIT = new TYPE_3 ( ) . create ( VAR_4 , VAR_1 ) ) INIT = new TYPE_3 ( ) . create ( VAR_4 , VAR_1 ) ) VAR VAR (  VAR_2 . add ( TYPE_4 . of ( key ) ) )  VAR_2 . add ( TYPE_4 . of ( key ) ) (  return key ; )  return key ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) )  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) (  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) )  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME u ) NAME u ( INIT = user ( ) ) INIT = user ( ) ) VAR VAR (  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) (  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_5 ) . METHOD_6 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_5 ) . METHOD_6 ( ) ) (  METHOD_7 ( STRING_6 , u . METHOD_5 ( STRING_7 ) . METHOD_6 ( ) ) )  METHOD_7 ( STRING_6 , u . METHOD_5 ( STRING_7 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) )  METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_2 ) NAME VAR_2 ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( repo ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( repo ) . METHOD_5 ( ) ) BLOCK BLOCK ) TRY TRY (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( project , STRING_1 ) )  METHOD_2 ( project , STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME master ) NAME master ( INIT = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ) INIT = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ) VAR VAR (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) (  METHOD_5 ( user ) )  METHOD_5 ( user ) (  TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_3 , STRING_4 , false ) , TYPE_3 . branch ( STRING_2 , master , false ) ) , METHOD_7 ( ) . get ( ) ) )  TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_3 , STRING_4 , false ) , TYPE_3 . branch ( STRING_2 , master , false ) ) , METHOD_7 ( ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME c ) NAME c ( INIT = get ( r . getChangeId ( ) , VAR_2 ) ) INIT = get ( r . getChangeId ( ) , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( STRING_1 ) ) INIT = VAR_4 . get ( STRING_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( 1 , VAR_5 . size ( ) ) )  org.junit.Assert.assertEquals ( 1 , VAR_5 . size ( ) ) (  org.junit.Assert.assertEquals ( STRING_2 , VAR_5 . get ( 0 ) . name ) )  org.junit.Assert.assertEquals ( STRING_2 , VAR_5 . get ( 0 ) . name ) (  org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( 0 ) . value . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( 0 ) . value . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) == ( TYPE_4 . METHOD_2 ( VAR_5 ) ) ) COND ( VAR_4 ) == ( TYPE_4 . METHOD_2 ( VAR_5 ) ) ( THEN THEN ( IF IF ( COND ( VAR_6 ) == null ) COND ( VAR_6 ) == null ( THEN THEN (  VAR_6 = new java.util.ArrayList < > ( ) )  VAR_6 = new java.util.ArrayList < > ( ) ) THEN THEN ) IF IF (  VAR_6 . add ( METHOD_3 ( VAR_3 ) ) )  VAR_6 . add ( METHOD_3 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( TYPE_1 . METHOD_1 ( ) ) - ( ( TYPE_2 . METHOD_2 ( ) ) + INT_1 ) ) INIT = ( TYPE_1 . METHOD_1 ( ) ) - ( ( TYPE_2 . METHOD_2 ( ) ) + INT_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  METHOD_4 ( diff ) )  METHOD_4 ( diff ) (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) ( IF IF ( COND VAR_6 . METHOD_5 ( ) ) COND VAR_6 . METHOD_5 ( ) ( THEN THEN (  VAR_4 . METHOD_6 ( true ) )  VAR_4 . METHOD_6 ( true ) ) THEN THEN ) IF IF (  VAR_7 . METHOD_4 ( VAR_6 . METHOD_7 ( ) , diff ) )  VAR_7 . METHOD_4 ( VAR_6 . METHOD_7 ( ) , diff ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList ( ( 1 + ( VAR_3 . length ) ) ) ) INIT = new java.util.ArrayList ( ( 1 + ( VAR_3 . length ) ) ) ) VAR VAR (  VAR_4 . add ( VAR_2 ) )  VAR_4 . add ( VAR_2 ) (  VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) )  VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) (  com.google.common.truth.Truth.assertThat ( VAR_5 . METHOD_4 ( METHOD_5 ( notes ) , VAR_1 ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_4 ) . METHOD_8 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_5 . METHOD_4 ( METHOD_5 ( notes ) , VAR_1 ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_4 ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( 0 <= ( VAR_1 ) ) && ( ( VAR_1 ) < ( table . METHOD_2 ( ) ) ) ) COND ( 0 <= ( VAR_1 ) ) && ( ( VAR_1 ) < ( table . METHOD_2 ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ref ) NAME ref ( INIT = repo . METHOD_2 ( VAR_1 ) ) INIT = repo . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . run ( ) )  VAR_2 . run ( ) ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND ref == null ) COND ref == null ( THEN THEN (  VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) )  VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) (  VAR_4 = VAR_5 . get ( ) )  VAR_4 = VAR_5 . get ( ) ) THEN THEN ( ELSE ELSE (  VAR_3 = ref . METHOD_4 ( ) )  VAR_3 = ref . METHOD_4 ( ) (  VAR_4 = METHOD_5 ( VAR_3 ) )  VAR_4 = METHOD_5 ( VAR_3 ) ) ELSE ELSE ) IF IF (  return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; )  return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME req ) NAME req ( INIT = ( ( TYPE_5 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_5 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_6 . METHOD_2 ( req ) ) ) COND ! ( TYPE_6 . METHOD_2 ( req ) ) ( THEN THEN (  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME rsp ) NAME rsp ( INIT = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) INIT = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND METHOD_3 ( req , rsp ) ) COND METHOD_3 ( req , rsp ) ( THEN THEN (  VAR_3 . METHOD_1 ( req , rsp ) )  VAR_3 . METHOD_1 ( req , rsp ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME in ) NAME in ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR (  VAR_2 = id )  VAR_2 = id ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = put . get ( ) . apply ( VAR_1 , in ) ) INIT = put . get ( ) . apply ( VAR_1 , in ) ) VAR VAR ( IF IF ( COND ( VAR_3 . size ( ) ) == 1 ) COND ( VAR_3 . size ( ) ) == 1 ( THEN THEN (  return VAR_3 . get ( 0 ) ; )  return VAR_3 . get ( 0 ) ; ) THEN THEN ) IF IF (  throw new TYPE_8 ( ) ; )  throw new TYPE_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( VAR_1 , STRING_2 ) ) INIT = new TYPE_1 ( VAR_1 , STRING_2 ) ) VAR VAR (  assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) )  assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) (  assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) )  assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME currentPatchSetId ) NAME currentPatchSetId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , id ) ) INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , id ) ) VAR VAR (  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) )  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME currentPatchSetId ) NAME currentPatchSetId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , id ) ) INIT = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , id ) ) VAR VAR (  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) )  VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) )  p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) (  p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) )  p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) (  db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) )  db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) (  VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) )  VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . get ( ( ( STRING_1 + ( admin . email ) ) + STRING_2 ) ) ) INIT = VAR_1 . get ( ( ( STRING_1 + ( admin . email ) ) + STRING_2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ) INIT = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ) VAR VAR (  TYPE_3 . METHOD_6 ( new TYPE_4 ( admin . id ) , VAR_3 ) )  TYPE_3 . METHOD_6 ( new TYPE_4 ( admin . id ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME edit ) NAME edit ( INIT = VAR_1 . METHOD_2 ( change ) ) INIT = VAR_1 . METHOD_2 ( change ) ) VAR VAR ( IF IF ( COND edit . METHOD_3 ( ) ) COND edit . METHOD_3 ( ) ( THEN THEN (  return edit . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; )  return edit . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  throw new TYPE_2 ( change.getId ( ) ) ; )  throw new TYPE_2 ( change.getId ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = factory . create ( name , VAR_1 , VAR_2 ) ) INIT = factory . create ( name , VAR_1 , VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( user ) ) )  VAR_3 . METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( user ) ) (  VAR_3 . METHOD_1 ( ) . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_1 ( ) . METHOD_4 ( VAR_4 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_2,byte[]> ) TYPE java.util.Map<TYPE_2,byte[]> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR (  VAR_1 . put ( new TYPE_2 ( repo . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) , null ) )  VAR_1 . put ( new TYPE_2 ( repo . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) , null ) (  return TYPE_4 . METHOD_4 ( repo , STRING_2 , VAR_1 ) ; )  return TYPE_4 . METHOD_4 ( repo , STRING_2 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  db . create ( ) )  db . create ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 , 1 , 2 ) )  METHOD_3 ( VAR_1 , VAR_2 , 1 , 2 ) (  METHOD_3 ( VAR_1 , VAR_3 , ( - 1 ) , 1 ) )  METHOD_3 ( VAR_1 , VAR_3 , ( - 1 ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) ) ) )  assertEquals ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) ) ) (  assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) ) ) )  assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = rw . parseCommit ( VAR_2 ) ) INIT = rw . parseCommit ( VAR_2 ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( db . get ( ) , repo , commit ) ) ) COND ! ( VAR_1 . METHOD_2 ( db . get ( ) , repo , commit ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( IF IF ( COND t != null ) COND t != null ( THEN THEN (  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) )  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ) THEN THEN ( ELSE ELSE (  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) )  VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME key ) NAME key ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = get ( key ) ) INIT = get ( key ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  r . add ( VAR_2 ) )  r . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_5 < TYPE_2 > ( r ) ; )  return new TYPE_5 < TYPE_2 > ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_1 . getValue ( i ) . equals ( VAR_3 ) ) COND VAR_1 . getValue ( i ) . equals ( VAR_3 ) ( THEN THEN (  VAR_1 . METHOD_3 ( i ) )  VAR_1 . METHOD_3 ( i ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ( IF IF ( COND VAR_3 != VAR_2 ) COND VAR_3 != VAR_2 ( THEN THEN (  METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) )  VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = VAR_1 . get ( id ) ) INIT = VAR_1 . get ( id ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  c = db . changes ( ) . get ( id ) )  c = db . changes ( ) . get ( id ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME notes ) NAME notes ( INIT = VAR_2 . METHOD_2 ( c ) ) INIT = VAR_2 . METHOD_2 ( c ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ( INIT = new TYPE_1 ( VAR_3 . METHOD_3 ( notes , user ) , new TYPE_3 ( db ) ) ) INIT = new TYPE_1 ( VAR_3 . METHOD_3 ( notes , user ) , new TYPE_3 ( db ) ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_4 ( ) ) COND VAR_4 . METHOD_4 ( ) ( THEN THEN (  ctx . METHOD_5 ( ) . METHOD_6 ( ) )  ctx . METHOD_5 ( ) . METHOD_6 ( ) ) THEN THEN ) IF IF (  return ctx ; )  return ctx ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  TYPE_1 . METHOD_2 ( this , VAR_1 ) )  TYPE_1 . METHOD_2 ( this , VAR_1 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_3 ( this ) )  TYPE_1 . METHOD_3 ( this ) (  TYPE_2 . METHOD_4 ( new TYPE_3 ( this ) ) )  TYPE_2 . METHOD_4 ( new TYPE_3 ( this ) ) (  TYPE_1 . METHOD_5 ( null ) )  TYPE_1 . METHOD_5 ( null ) (  METHOD_6 ( ) )  METHOD_6 ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  TYPE_4 . set ( VAR_2 ) )  TYPE_4 . set ( VAR_2 ) (  VAR_3 = true )  VAR_3 = true ) THEN THEN ( ELSE ELSE (  TYPE_4 . METHOD_7 ( ) )  TYPE_4 . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) . METHOD_4 ( ) ) INIT = METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_5 ( 0 , ( ( VAR_3 . length ( ) ) - ( TYPE_3 . length ( ) ) ) ) ) INIT = VAR_3 . METHOD_5 ( 0 , ( ( VAR_3 . length ( ) ) - ( TYPE_3 . length ( ) ) ) ) ) VAR VAR (  VAR_1 . add ( VAR_4 ) )  VAR_1 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME branch ) NAME branch ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_3<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ( INIT = TYPE_4 . schema ( VAR_2 ) ) INIT = TYPE_4 . schema ( VAR_2 ) ) VAR VAR ( IF IF ( COND schema . METHOD_2 ( VAR_3 ) ) COND schema . METHOD_2 ( VAR_3 ) ( THEN THEN (  return query ( TYPE_4 . METHOD_3 ( branch , TYPE_4 . METHOD_4 ( schema , VAR_1 ) ) ) ; )  return query ( TYPE_4 . METHOD_3 ( branch , TYPE_4 . METHOD_4 ( schema , VAR_1 ) ) ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_1 ( schema , branch , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; )  return METHOD_1 ( schema , branch , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( METHOD_3 ( ( VAR_1 - INT_1 ) ) ) < line ) COND ( METHOD_3 ( ( VAR_1 - INT_1 ) ) ) < line ( THEN THEN (  METHOD_4 ( ( ( METHOD_5 ( line , STRING_1 ) ) - ( FLOAT_1 * VAR_1 ) ) ) )  METHOD_4 ( ( ( METHOD_5 ( line , STRING_1 ) ) - ( FLOAT_1 * VAR_1 ) ) ) ) THEN THEN ) IF IF (  METHOD_6 ( TYPE_1 . create ( line ) ) )  METHOD_6 ( TYPE_1 . create ( line ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME update ) NAME update ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  schema = VAR_1 . METHOD_1 ( ) )  schema = VAR_1 . METHOD_1 ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( VAR_2 , rw , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) )  METHOD_3 ( VAR_2 , rw , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( IF IF ( COND ( schema ) != null ) COND ( schema ) != null ( THEN THEN (  schema . close ( ) )  schema . close ( ) (  schema = null )  schema = null ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Status ) TYPE com.google.gerrit.reviewdb.client.Change.Status ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND status == null ) COND status == null ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME status ) NAME status ( CASE VAR_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( ) ; )  return TYPE_1 . METHOD_2 ( ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return TYPE_1 . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return TYPE_1 . METHOD_5 ( ) ; )  return TYPE_1 . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return TYPE_1 . METHOD_6 ( ) ; )  return TYPE_1 . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return status . name ( ) ; )  return status . name ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  rsp . METHOD_3 ( VAR_3 , INT_1 ) )  rsp . METHOD_3 ( VAR_3 , INT_1 ) (  rsp . METHOD_4 ( VAR_4 , STRING_1 ) )  rsp . METHOD_4 ( VAR_4 , STRING_1 ) (  rsp . METHOD_4 ( VAR_5 , STRING_2 ) )  rsp . METHOD_4 ( VAR_5 , STRING_2 ) (  rsp . METHOD_5 ( STRING_3 ) )  rsp . METHOD_5 ( STRING_3 ) (  rsp . METHOD_6 ( VAR_2 . length ) )  rsp . METHOD_6 ( VAR_2 . length ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME out ) NAME out ( INIT = rsp . METHOD_7 ( ) ) INIT = rsp . METHOD_7 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  out . METHOD_8 ( VAR_2 ) )  out . METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  out . close ( ) )  out . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME me ) NAME me ) VAR VAR ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ( INIT = server . METHOD_2 ( ) ) INIT = server . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Account ) TYPE TYPE_2.Account ( NAME a ) NAME a ( INIT = TYPE_4 . METHOD_3 ( ) . get ( me , db ) ) INIT = TYPE_4 . METHOD_3 ( ) . get ( me , db ) ) VAR VAR ( IF IF ( COND ( a != null ) && ( ( a . METHOD_4 ( ) ) != null ) ) COND ( a != null ) && ( ( a . METHOD_4 ( ) ) != null ) ( THEN THEN (  c . METHOD_5 ( a . METHOD_4 ( ) ) )  c . METHOD_5 ( a . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> ( NAME reviewers ) NAME reviewers ( INIT = VAR_1 . METHOD_2 ( db , java.util.Collections.singleton ( user . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ) INIT = VAR_1 . METHOD_2 ( db , java.util.Collections.singleton ( user . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) )  com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = name ( STRING_1 ) ) INIT = name ( STRING_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) )  com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( name , VAR_3 ) ) INIT = METHOD_2 ( name , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) )  VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) (  VAR_4 . METHOD_3 ( name , STRING_2 , new java.lang.String [ ] { } ) )  VAR_4 . METHOD_3 ( name , STRING_2 , new java.lang.String [ ] { } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) )  VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME METHOD_4 ( ) . METHOD_5 ( ) ) NAME METHOD_4 ( ) . METHOD_5 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; )  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; )  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; )  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; )  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; )  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; )  return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME status ) NAME status ( CASE VAR_1 ( BLOCK BLOCK (  return new TYPE_2 ( project , STRING_1 ) ; )  return new TYPE_2 ( project , STRING_1 ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return new TYPE_3 ( project , STRING_1 ) ; )  return new TYPE_3 ( project , STRING_1 ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return new TYPE_4 ( project , STRING_1 ) ; )  return new TYPE_4 ( project , STRING_1 ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return new TYPE_4 ( project , STRING_1 ) ; )  return new TYPE_4 ( project , STRING_1 ) ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return new TYPE_4 ( project , STRING_1 ) ; )  return new TYPE_4 ( project , STRING_1 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) , null ) ; )  return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( change . getProject ( ) ) ) INIT = VAR_2 . get ( change . getProject ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( user ) ) INIT = VAR_1 . METHOD_2 ( user ) ) VAR VAR (  return VAR_3 . METHOD_2 ( db , change ) . METHOD_3 ( db ) ; )  return VAR_3 . METHOD_2 ( db , change ) . METHOD_3 ( db ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Change> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Change> ( NAME changes ) NAME changes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME git ) NAME git ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  git = VAR_1 . METHOD_2 ( project ) )  git = VAR_1 . METHOD_2 ( project ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME notes ) NAME notes ( INIT = VAR_2 . create ( db , git ) ) INIT = VAR_2 . create ( db , git ) ) VAR VAR (  notes . create ( changes , null , STRING_1 , VAR_3 ) )  notes . create ( changes , null , STRING_1 , VAR_3 ) ) BLOCK BLOCK ( FINALLY FINALLY (  git . close ( ) )  git . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) COND ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( rsrc ) )  VAR_1 . METHOD_4 ( rsrc ) (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME u ) NAME u ( INIT = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , TYPE_7 . METHOD_4 ( ) ) ) INIT = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , TYPE_7 . METHOD_4 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) )  u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ) BLOCK BLOCK ) TRY TRY (  return VAR_4 . change ; )  return VAR_4 . change ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( notes , VAR_1 , VAR_2 , value ) ) COND METHOD_2 ( notes , VAR_1 , VAR_2 , value ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; )  return VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_6 . METHOD_1 ( req ) ) INIT = TYPE_6 . METHOD_1 ( req ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( repo ) ) INIT = new TYPE_1 ( repo ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ( IF IF ( COND ! ( VAR_1 . METHOD_4 ( ) ) ) COND ! ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  VAR_2 . METHOD_5 ( new TYPE_7 ( repo , VAR_1 , db . get ( ) ) ) )  VAR_2 . METHOD_5 ( new TYPE_7 ( repo , VAR_1 , db . get ( ) ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 > ( cfg . METHOD_2 ( ) ) ) COND VAR_2 > ( cfg . METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) >= ( VAR_4 ) ) COND ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) >= ( VAR_4 ) ( THEN THEN (  METHOD_5 ( VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) ) )  METHOD_5 ( VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME bind ) NAME bind ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND t . METHOD_1 ( ) ) COND t . METHOD_1 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( t ) ) ) INIT = ( ( TYPE_3 ) ( t ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) >= ( this . VAR_4 ) ) COND ( VAR_3 ) >= ( this . VAR_4 ) ( THEN THEN (  VAR_5 = this )  VAR_5 = this ( IF IF ( COND ( VAR_3 ) < ( VAR_6 ) ) COND ( VAR_3 ) < ( VAR_6 ) ( THEN THEN (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ) THEN THEN ) IF IF (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_7 = t )  VAR_7 = t ( IF IF ( COND ( VAR_4 ) < ( VAR_6 ) ) COND ( VAR_4 ) < ( VAR_6 ) ( THEN THEN (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  in . name = VAR_1 )  in . name = VAR_1 (  VAR_2 = true )  VAR_2 = true (  VAR_3 . projects ( ) . create ( in ) )  VAR_3 . projects ( ) . create ( in ) (  METHOD_2 ( VAR_1 , STRING_2 ) )  METHOD_2 ( VAR_1 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( ) ) COND METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( db , cd ) . reviewers ( ) . METHOD_5 ( ) ) INIT = METHOD_4 ( db , cd ) . reviewers ( ) . METHOD_5 ( ) ) VAR VAR (  return VAR_1 . contains ( METHOD_2 ( ) . getAccountId ( ) ) ; )  return VAR_1 . contains ( METHOD_2 ( ) . getAccountId ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME METHOD_4 ( ) . METHOD_5 ( ) ) NAME METHOD_4 ( ) . METHOD_5 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; )  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; )  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; )  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; )  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; )  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; )  return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) COND ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) )  VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) (  return TYPE_1 . METHOD_3 ( STRING_1 ) ; )  return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN com.google.gerrit.server.query.change.ChangeData ) RETURN com.google.gerrit.server.query.change.ChangeData ( NAME change ) NAME change ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 ) )  TYPE_1 . METHOD_1 ( VAR_1 ) ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ) ) INIT = com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ) ) VAR VAR (  cd . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) )  cd . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) (  return cd ; )  return cd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cfg ) NAME cfg ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  cfg . METHOD_2 ( STRING_1 , null , STRING_2 , INT_1 ) )  cfg . METHOD_2 ( STRING_1 , null , STRING_2 , INT_1 ) (  cfg . METHOD_2 ( STRING_1 , null , STRING_3 , ( ( int ) ( FLOAT_1 ) ) ) )  cfg . METHOD_2 ( STRING_1 , null , STRING_3 , ( ( int ) ( FLOAT_1 ) ) ) (  bind ( VAR_1 class ) . METHOD_3 ( new TYPE_2 ( null , null , null , null , null , null , cfg ) ) )  bind ( VAR_1 class ) . METHOD_3 ( new TYPE_2 ( null , null , null , null , null , null , cfg ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this : : METHOD_4 ) . collect ( TYPE_3 . METHOD_5 ( ) ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this : : METHOD_4 ) . collect ( TYPE_3 . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 = user . email )  VAR_1 = user . email (  VAR_2 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( in ) )  VAR_2 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( in ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( METHOD_3 ( r . getChangeId ( ) ) ) ) ) . METHOD_4 ( TYPE_4 . of ( user . id ) ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( METHOD_3 ( r . getChangeId ( ) ) ) ) ) . METHOD_4 ( TYPE_4 . of ( user . id ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + STRING_2 ) INIT = STRING_1 + STRING_2 ) VAR VAR (  repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) )  repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_5 ) ) INIT = METHOD_2 ( STRING_5 ) ) VAR VAR (  org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ) )  org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ) (  org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_9 + STRING_10 ) ) ) ) )  org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_9 + STRING_10 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . in ( VAR_2 class ) )  bind ( VAR_1 class ) . in ( VAR_2 class ) (  bind ( VAR_3 . ReviewDb class ) . METHOD_2 ( VAR_4 class ) )  bind ( VAR_3 . ReviewDb class ) . METHOD_2 ( VAR_4 class ) (  bind ( VAR_5 class ) . in ( VAR_6 ) )  bind ( VAR_5 class ) . in ( VAR_6 ) (  bind ( VAR_7 class ) )  bind ( VAR_7 class ) (  bind ( VAR_8 . Factory class ) . in ( VAR_6 ) )  bind ( VAR_8 . Factory class ) . in ( VAR_6 ) (  bind ( VAR_9 . Factory class ) . in ( VAR_6 ) )  bind ( VAR_9 . Factory class ) . in ( VAR_6 ) (  bind ( VAR_10 . Factory class ) . in ( VAR_6 ) )  bind ( VAR_10 . Factory class ) . in ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND change . getStatus ( ) . METHOD_3 ( ) ) COND change . getStatus ( ) . METHOD_3 ( ) ( THEN THEN (  change . METHOD_4 ( VAR_2 ) )  change . METHOD_4 ( VAR_2 ) (  change . METHOD_5 ( VAR_1 ) )  change . METHOD_5 ( VAR_1 ) (  return change ; )  return change ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  return db . changes ( ) . METHOD_2 ( change.getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_3 ( ) ) { change . METHOD_4 ( VAR_2 ) ; change . METHOD_5 ( VAR_1 ) ; return change ; } return null ; } } ) ; )  return db . changes ( ) . METHOD_2 ( change.getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_3 ( ) ) { change . METHOD_4 ( VAR_2 ) ; change . METHOD_5 ( VAR_1 ) ; return change ; } return null ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . put ( VAR_2 , VAR_3 ) )  VAR_1 . put ( VAR_2 , VAR_3 ) (  VAR_1 . put ( VAR_4 , VAR_5 ) )  VAR_1 . put ( VAR_4 , VAR_5 ) ( IF IF ( COND STRING_1 . equals ( VAR_3 ) ) COND STRING_1 . equals ( VAR_3 ) ( THEN THEN (  return METHOD_3 ( VAR_1 ) ; )  return METHOD_3 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_1 . put ( VAR_7 , VAR_6 ) )  VAR_1 . put ( VAR_7 , VAR_6 ) (  VAR_1 . put ( VAR_8 , VAR_9 ) )  VAR_1 . put ( VAR_8 , VAR_9 ) ) THEN THEN ) IF IF (  return new TYPE_5 ( VAR_1 ) ; )  return new TYPE_5 ( VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . get ( ) . changes ( ) . get ( changeId ) ) INIT = db . get ( ) . changes ( ) . get ( changeId ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; )  throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  return VAR_1 . create ( db . get ( ) , c ) ; )  return VAR_1 . create ( db . get ( ) , c ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = TYPE_4 . METHOD_2 ( VAR_2 , name ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 , name ) ) VAR VAR ( IF IF ( COND in != null ) COND in != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_6 . METHOD_3 ( in , INT_1 ) ) INIT = TYPE_6 . METHOD_3 ( in , INT_1 ) ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_1 , VAR_3 ) )  TYPE_4 . METHOD_4 ( VAR_1 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) )  TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 p ) { TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) ; } } ) )  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 p ) { TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) ; } } ) (  close ( ) )  close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME b ) NAME b ( INIT = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ) INIT = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.String . METHOD_2 ( revision . get ( ) ) ) INIT = java.lang.String . METHOD_2 ( revision . get ( ) ) ) VAR VAR (  TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 , false ) ) )  TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 , false ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = METHOD_3 ( STRING_1 ) ) INIT = METHOD_3 ( STRING_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( id ( STRING_4 ) ) ) + STRING_5 ) , res . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( id ( STRING_4 ) ) ) + STRING_5 ) , res . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getValue ( ) ) < 0 ) COND ( getValue ( ) ) < 0 ( THEN THEN (  return TYPE_1 . toString ( getValue ( ) ) ; )  return TYPE_1 . toString ( getValue ( ) ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( getValue ( ) ) == 0 ) COND ( getValue ( ) ) == 0 ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ( ELSE ELSE (  return STRING_2 + ( TYPE_1 . toString ( getValue ( ) ) ) ; )  return STRING_2 + ( TYPE_1 . toString ( getValue ( ) ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = c . getName ( ) ) INIT = c . getName ( ) ) VAR VAR (  n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) )  n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ( WHILE WHILE ( COND n . METHOD_4 ( STRING_1 ) ) COND n . METHOD_4 ( STRING_1 ) ( BLOCK BLOCK (  n = n . METHOD_2 ( 1 ) )  n = n . METHOD_2 ( 1 ) ) BLOCK BLOCK ) WHILE WHILE (  return TYPE_2 . METHOD_5 ( n ) ; )  return TYPE_2 . METHOD_5 ( n ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) )  VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_5 = db . METHOD_2 ( ) )  VAR_5 = db . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND i . METHOD_2 ( ) ) COND i . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = i . METHOD_3 ( ) ) INIT = i . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( c . METHOD_4 ( ) ) == ( VAR_3 ) ) COND ( c . METHOD_4 ( ) ) == ( VAR_3 ) ( THEN THEN (  METHOD_5 ( row ) )  METHOD_5 ( row ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( row ) )  METHOD_6 ( row ) ) ELSE ELSE ) IF IF (  METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) , VAR_2 ) )  METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) , VAR_2 ) (  row ++ )  row ++ ) BLOCK BLOCK ) WHILE WHILE (  return row ; )  return row ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( input , VAR_3 ) ) INIT = VAR_2 . METHOD_1 ( input , VAR_3 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  throw new TYPE_2 ( ( ( ( STRING_1 + ( toString ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; )  throw new TYPE_2 ( ( ( ( STRING_1 + ( toString ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = new TYPE_3 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_3 , VAR_1 ) . append ( TYPE_4 . METHOD_5 ( input ) ) . METHOD_6 ( ) . METHOD_7 ( ) ) INIT = new TYPE_3 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_3 , VAR_1 ) . append ( TYPE_4 . METHOD_5 ( input ) ) . METHOD_6 ( ) . METHOD_7 ( ) ) VAR VAR (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 . NameKey ( VAR_2 . getName ( ) ) ) . METHOD_5 ( new TYPE_4 . Id ( VAR_3 ) ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) . METHOD_10 ( ) ; )  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 . NameKey ( VAR_2 . getName ( ) ) ) . METHOD_5 ( new TYPE_4 . Id ( VAR_3 ) ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) . METHOD_10 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_1<TYPE_2>> ) TYPE TYPE_3<?extendsTYPE_1<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) != 1 ) COND ( VAR_1 . size ( ) ) != 1 ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_5 < TYPE_2 > ( getName ( ) , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; )  return new TYPE_5 < TYPE_2 > ( getName ( ) , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) ) ) INIT = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND TYPE_4 . METHOD_3 ( url ) ) COND TYPE_4 . METHOD_3 ( url ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ( ELSE ELSE (  return url ; )  return url ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 , STRING_5 ) . METHOD_5 ( STRING_6 , VAR_2 ) . METHOD_6 ( STRING_7 ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) )  new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 , STRING_5 ) . METHOD_5 ( STRING_6 , VAR_2 ) . METHOD_6 ( STRING_7 ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.util.List<TYPE_2>> ) RETURN TYPE_1<java.util.List<TYPE_2>> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Change> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Change> ( NAME changes ) NAME changes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<TYPE_2>> ) TYPE java.util.List<TYPE_1<TYPE_2>> ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_1 ( changes . size ( ) ) ) INIT = TYPE_3 . METHOD_1 ( changes . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( IN changes ) IN changes ( BLOCK BLOCK (  result . add ( VAR_1 . submit ( new TYPE_4 ( event , c . METHOD_2 ( ) , c . getId ( ) ) ) ) )  result . add ( VAR_1 . submit ( new TYPE_4 ( event , c . METHOD_2 ( ) , c . getId ( ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_5 . METHOD_3 ( result ) ; )  return TYPE_5 . METHOD_3 ( result ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME file ) NAME file ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new TYPE_3 ( name ) ) )  VAR_1 . METHOD_2 ( new TYPE_3 ( name ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME input ) NAME input ( INIT = new TYPE_4 ( file ) ) INIT = new TYPE_4 ( file ) ) VAR VAR (  TYPE_5 . METHOD_3 ( input , VAR_1 ) )  TYPE_5 . METHOD_3 ( input , VAR_1 ) (  input . close ( ) )  input . close ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME me ) NAME me ( INIT = TYPE_2 . getAccountId ( ) ) INIT = TYPE_2 . getAccountId ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_3.Id> ) TYPE java.util.Set<TYPE_3.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( me ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( me ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( change . METHOD_4 ( ) . getParentKey ( ) ) ) INIT = VAR_3 . get ( change . METHOD_4 ( ) . getParentKey ( ) ) ) VAR VAR (  METHOD_1 ( VAR_1 , VAR_2 . METHOD_5 ( ) ) )  METHOD_1 ( VAR_1 , VAR_2 . METHOD_5 ( ) ) (  METHOD_1 ( VAR_1 , VAR_3 . METHOD_6 ( ) ) )  METHOD_1 ( VAR_1 , VAR_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) INIT = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ) INIT = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ) VAR VAR (  METHOD_5 ( STRING_7 ) )  METHOD_5 ( STRING_7 ) (  METHOD_5 ( STRING_8 ) )  METHOD_5 ( STRING_8 ) (  METHOD_5 ( STRING_9 , change ) )  METHOD_5 ( STRING_9 , change ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_5 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_6 , VAR_7 ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_6 , VAR_7 ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) )  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ) INIT = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) (  r . METHOD_5 ( ) )  r . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_3 > ( result . length ( ) ) ) INIT = new java.util.ArrayList < TYPE_3 > ( result . length ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN TYPE_4 . METHOD_1 ( result ) ) IN TYPE_4 . METHOD_1 ( result ) ( BLOCK BLOCK (  r . add ( new TYPE_3 ( VAR_1 ) ) )  r . add ( new TYPE_3 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_2 ( req , new TYPE_5 ( r ) ) )  VAR_2 . METHOD_2 ( req , new TYPE_5 ( r ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME git ) NAME git ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) , changeId ) ) INIT = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) , changeId ) ) VAR VAR (  return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; )  return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME git ) NAME git ( INIT = VAR_1 . METHOD_1 ( VAR_2 ) ) INIT = VAR_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME p ) NAME p ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR (  p . METHOD_3 ( git ) )  p . METHOD_3 ( git ) (  return new TYPE_1 ( null , p , git ) ; )  return new TYPE_1 ( null , p , git ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  git . close ( ) )  git . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ChangeInfo> ) TYPE TYPE_1<TYPE_2.ChangeInfo> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR (  input . message ( TYPE_4 . METHOD_2 ( msg ) ) )  input . message ( TYPE_4 . METHOD_2 ( msg ) ) (  TYPE_4 . METHOD_3 ( id , STRING_1 ) . METHOD_4 ( input , VAR_1 ) )  TYPE_4 . METHOD_3 ( id , STRING_1 ) . METHOD_4 ( input , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME display ) NAME display ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.util.List<java.lang.String>> ) TYPE java.util.List<java.util.List<java.lang.String>> ( NAME values ) NAME values ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ( INIT = 2 ) INIT = 2 ) VAR VAR ) INIT INIT ( COND row < ( table . METHOD_1 ( ) ) ) COND row < ( table . METHOD_1 ( ) ) ( UPDATE UPDATE (  row ++ )  row ++ ) UPDATE UPDATE ( BLOCK BLOCK (  table . METHOD_2 ( ( row -- ) ) )  table . METHOD_2 ( ( row -- ) ) ) BLOCK BLOCK ) FOR FOR ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ( INIT = 2 ) INIT = 2 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( IN values ) IN values ( BLOCK BLOCK (  METHOD_3 ( row , VAR_1 ) )  METHOD_3 ( row , VAR_1 ) (  row ++ )  row ++ ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME change ) NAME change ( INIT = db . changes ( ) . get ( id ) ) INIT = db . changes ( ) . get ( id ) ) VAR VAR ( IF IF ( COND change == null ) COND change == null ( THEN THEN (  throw new TYPE_3 ( new TYPE_5 ( ) ) ; )  throw new TYPE_3 ( new TYPE_5 ( ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_6 ( db ) ) INIT = new TYPE_6 ( db ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) )  d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) (  return d ; )  return d ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = VAR_3 . METHOD_2 ( ) )  VAR_1 = VAR_3 . METHOD_2 ( ) (  VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( null , null , TYPE_4 . METHOD_5 ( ) , null ) )  VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( null , null , TYPE_4 . METHOD_5 ( ) , null ) (  return VAR_2 . METHOD_6 ( ) ; )  return VAR_2 . METHOD_6 ( ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  METHOD_8 ( VAR_1 ) )  METHOD_8 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . size ( ) ) > 0 ) COND ( VAR_3 . size ( ) ) > 0 ( THEN THEN ( VAR VAR ( TYPE java.util.Set<TYPE_3> ) TYPE java.util.Set<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 < TYPE_3 > ( VAR_2 . METHOD_2 ( ) ) ) INIT = new TYPE_4 < TYPE_3 > ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME s ) NAME s ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 . contains ( s . METHOD_3 ( ) ) ) COND VAR_3 . contains ( s . METHOD_3 ( ) ) ( THEN THEN (  VAR_4 . METHOD_4 ( s ) )  VAR_4 . METHOD_4 ( s ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_5 ( VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_4 ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME get ) NAME get ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_1 ( VAR_1 ) ) ) COND ! ( TYPE_3 . METHOD_1 ( VAR_1 ) ) ( THEN THEN (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return METHOD_3 ( ( ( user ) != null ? VAR_3 . create ( user ) : VAR_4 . get ( ) ) ) ; )  return METHOD_3 ( ( ( user ) != null ? VAR_3 . create ( user ) : VAR_4 . get ( ) ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( user ) != null ) COND ( user ) != null ( THEN THEN (  return VAR_5 . get ( ) . apply ( new TYPE_4 ( VAR_3 . create ( user ) ) ) ; )  return VAR_5 . get ( ) . apply ( new TYPE_4 ( VAR_3 . create ( user ) ) ) ; ) THEN THEN ) IF IF (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.AccountGroup> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.AccountGroup> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return java.util.Collections . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( ) . METHOD_5 ( ) ) ; )  return java.util.Collections . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . METHOD_6 ( STRING_1 , e ) )  VAR_1 . METHOD_6 ( STRING_1 , e ) (  return java.util.Collections . METHOD_7 ( ) ; )  return java.util.Collections . METHOD_7 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME branch ) NAME branch ( INIT = VAR_2 . change ( ) . METHOD_1 ( ) . get ( ) ) INIT = VAR_2 . change ( ) . METHOD_1 ( ) . get ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 . getId ( ) . get ( ) , VAR_3 , branch ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 . getId ( ) . get ( ) , VAR_3 , branch ) ) VAR VAR (  return get ( VAR_4 , VAR_1 , branch , VAR_2 . METHOD_3 ( ) ) ; )  return get ( VAR_4 , VAR_1 , branch , VAR_2 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) . METHOD_3 ( true ) )  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) . METHOD_3 ( true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME u ) NAME u ( INIT = user ( ) ) INIT = user ( ) ) VAR VAR (  METHOD_4 ( STRING_3 , u . METHOD_5 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_5 ( ) ) (  METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_4 ) . METHOD_5 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_4 ) . METHOD_5 ( ) ) (  METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_5 ) . METHOD_5 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_5 ) . METHOD_5 ( ) ) (  METHOD_4 ( STRING_6 , u . METHOD_6 ( STRING_7 ) . METHOD_5 ( ) ) )  METHOD_4 ( STRING_6 , u . METHOD_6 ( STRING_7 ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) COND ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; )  return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.NameKey ) TYPE TYPE_4.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR (  return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_1 ( change ) ; )  return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_1 ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( change.getId ( ) , e ) ; )  throw new TYPE_3 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) )  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) (  assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_2 ) ) )  assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_2 ) ) (  assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_4 ) ) )  assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_4 ) ) (  assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_5 ) ) )  assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_5 ) ) (  assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) )  assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) (  assertEquals ( STRING_8 , TYPE_1 . METHOD_2 ( STRING_9 ) ) )  assertEquals ( STRING_8 , TYPE_1 . METHOD_2 ( STRING_9 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; )  return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME branch ) NAME branch ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return query ( TYPE_3 . METHOD_2 ( TYPE_4 . ref ( branch ) , TYPE_4 . project ( branch . getParentKey ( ) ) , TYPE_3 . not ( TYPE_4 . status ( VAR_2 ) ) , TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_4 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; )  return query ( TYPE_3 . METHOD_2 ( TYPE_4 . ref ( branch ) , TYPE_4 . project ( branch . getParentKey ( ) ) , TYPE_3 . not ( TYPE_4 . status ( VAR_2 ) ) , TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_4 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_3 . equals ( VAR_1 ) ) && ( ( token ) != null ) ) && ( ( VAR_4 ) != null ) ) INIT = ( ( VAR_3 . equals ( VAR_1 ) ) && ( ( token ) != null ) ) && ( ( VAR_4 ) != null ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_5 = VAR_4 . METHOD_2 ( ) )  VAR_5 = VAR_4 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_6 . error ( STRING_1 , e ) )  VAR_6 . error ( STRING_1 , e ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_2 = false )  VAR_2 = false ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) )  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) (  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) )  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) (  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 , STRING_4 ) ) ) )  METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 , STRING_4 ) ) ) (  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 ) ) ) )  METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  in . name = VAR_1 )  in . name = VAR_1 (  VAR_2 = true )  VAR_2 = true (  VAR_3 = TYPE_2 . METHOD_2 ( INT_1 ) )  VAR_3 = TYPE_2 . METHOD_2 ( INT_1 ) (  VAR_3 . add ( STRING_2 ) )  VAR_3 . add ( STRING_2 ) (  VAR_3 . add ( STRING_3 ) )  VAR_3 . add ( STRING_3 ) (  VAR_3 . add ( STRING_4 ) )  VAR_3 . add ( STRING_4 ) (  VAR_4 . projects ( ) . create ( in ) )  VAR_4 . projects ( ) . create ( in ) (  METHOD_3 ( VAR_1 , STRING_2 ) )  METHOD_3 ( VAR_1 , STRING_2 ) (  METHOD_4 ( VAR_1 , STRING_2 , STRING_3 , STRING_5 ) )  METHOD_4 ( VAR_1 , STRING_2 , STRING_3 , STRING_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_2.ChangeInfo> ) TYPE java.util.List<TYPE_2.ChangeInfo> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ) INIT = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) )  org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_1 , n ) )  METHOD_4 ( VAR_1 , n ) (  assertEquals ( ( ( ( ( ( VAR_2 ) + ( TYPE_2 . METHOD_5 ( STRING_2 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( VAR_3 ) ) + STRING_4 ) , n . METHOD_6 ( ) ) )  assertEquals ( ( ( ( ( ( VAR_2 ) + ( TYPE_2 . METHOD_5 ( STRING_2 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( VAR_3 ) ) + STRING_4 ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( cd . METHOD_2 ( ) ) != null ) COND ( cd . METHOD_2 ( ) ) != null ( THEN THEN (  return cd . METHOD_2 ( ) ; )  return cd . METHOD_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = cd . METHOD_3 ( ) ) INIT = cd . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ps == null ) COND ps == null ( THEN THEN (  return TYPE_2 . of ( ) ; )  return TYPE_2 . of ( ) ; ) THEN THEN ) IF IF (  cd . METHOD_4 ( new TYPE_3 ( cd ) . METHOD_5 ( ps ) . METHOD_6 ( true ) . METHOD_7 ( true ) . METHOD_8 ( ) ) )  cd . METHOD_4 ( new TYPE_3 ( cd ) . METHOD_5 ( ps ) . METHOD_6 ( true ) . METHOD_7 ( true ) . METHOD_8 ( ) ) (  return cd . METHOD_2 ( ) ; )  return cd . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = ctx . getChange ( ) ) INIT = ctx . getChange ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = ctx . METHOD_2 ( ) ) INIT = ctx . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( STRING_1 , c . getId ( ) ) )  METHOD_3 ( STRING_1 , c . getId ( ) ) (  c . METHOD_4 ( VAR_1 ) )  c . METHOD_4 ( VAR_1 ) (  c . METHOD_5 ( VAR_2 ) )  c . METHOD_5 ( VAR_2 ) (  ctx . METHOD_6 ( ) )  ctx . METHOD_6 ( ) ( IF IF ( COND msg != null ) COND msg != null ( THEN THEN (  VAR_3 . METHOD_7 ( db , ctx . METHOD_8 ( msg . METHOD_9 ( ) ) , msg ) )  VAR_3 . METHOD_7 ( db , ctx . METHOD_8 ( msg . METHOD_9 ( ) ) , msg ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_1 ( ) ) ) COND ! ( METHOD_1 ( ) ) ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_4 , ( ( int ) ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) )  VAR_3 . METHOD_2 ( VAR_4 , ( ( int ) ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) (  set ( null ) )  set ( null ) ) THEN THEN ) IF IF (  return super . get ( VAR_1 , VAR_2 ) ; )  return super . get ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  METHOD_2 ( VAR_1 , VAR_2 < TYPE_3 > METHOD_3 ( ) , res ) )  METHOD_2 ( VAR_1 , VAR_2 < TYPE_3 > METHOD_3 ( ) , res ) (  assertEquals ( INT_1 , res . getStatus ( ) ) )  assertEquals ( INT_1 , res . getStatus ( ) ) (  return res . METHOD_4 ( VAR_3 ) ; )  return res . METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME change ) NAME change ( INIT = METHOD_2 ( git , true ) ) INIT = METHOD_2 ( git , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( git , true ) ) INIT = METHOD_2 ( git , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( git , true ) ) INIT = METHOD_2 ( git , true ) ) VAR VAR (  METHOD_2 ( git , false ) )  METHOD_2 ( git , false ) ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME changes ) NAME changes ( INIT = METHOD_3 ( change ) ) INIT = METHOD_3 ( change ) ) VAR VAR (  METHOD_4 ( changes , VAR_1 , VAR_2 ) )  METHOD_4 ( changes , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3> ) TYPE TYPE_2<?extendsTYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( VAR_4 class ) ) INIT = VAR_2 . METHOD_2 ( VAR_4 class ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) THEN THEN ) IF IF (  bind ( TYPE_6 . key ( VAR_1 , name , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) )  bind ( TYPE_6 . key ( VAR_1 , name , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = new TYPE_2 ( this , base , revision , path , result . METHOD_2 ( ) , METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_1 = new TYPE_2 ( this , base , revision , path , result . METHOD_2 ( ) , METHOD_3 ( ) . METHOD_4 ( ) ) (  METHOD_5 ( result . METHOD_6 ( ) ) )  METHOD_5 ( result . METHOD_6 ( ) ) (  display ( VAR_2 ) )  display ( VAR_2 ) (  VAR_3 . METHOD_7 ( VAR_2 ) )  VAR_3 . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . in ( VAR_2 class ) )  bind ( VAR_1 class ) . in ( VAR_2 class ) (  bind ( VAR_3 class ) )  bind ( VAR_3 class ) (  bind ( VAR_4 class ) . in ( VAR_5 ) )  bind ( VAR_4 class ) . in ( VAR_5 ) (  bind ( VAR_6 class ) . in ( VAR_2 class ) )  bind ( VAR_6 class ) . in ( VAR_2 class ) (  bind ( VAR_7 . Factory class ) . in ( VAR_5 ) )  bind ( VAR_7 . Factory class ) . in ( VAR_5 ) (  bind ( VAR_8 . Factory class ) . in ( VAR_5 ) )  bind ( VAR_8 . Factory class ) . in ( VAR_5 ) (  factory ( VAR_9 . Factory class ) )  factory ( VAR_9 . Factory class ) (  factory ( VAR_10 . Factory class ) )  factory ( VAR_10 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME table ) NAME table ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME to ) NAME to ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = ( ( TYPE_1 ) ( db ) ) ) INIT = ( ( TYPE_1 ) ( db ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( INIT = new TYPE_2 ( s ) ) INIT = new TYPE_2 ( s ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  s . METHOD_2 ( e , table , VAR_1 , to ) )  s . METHOD_2 ( e , table , VAR_1 , to ) ) BLOCK BLOCK ( FINALLY FINALLY (  e . close ( ) )  e . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  input . ref = VAR_1 )  input . ref = VAR_1 ( TRY TRY ( BLOCK BLOCK (  VAR_2 . apply ( new TYPE_2 ( project . METHOD_1 ( ) , project . METHOD_2 ( ) ) , input ) )  VAR_2 . apply ( new TYPE_2 ( project . METHOD_1 ( ) , project . METHOD_2 ( ) ) , input ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_3 ( e ) ; )  throw METHOD_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND VAR_1 <= ( VAR_4 ) ) COND VAR_1 <= ( VAR_4 ) ( THEN THEN (  ( VAR_4 ) ++ )  ( VAR_4 ) ++ ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 < ( VAR_5 ) ) COND VAR_1 < ( VAR_5 ) ( THEN THEN (  ( VAR_5 ) ++ )  ( VAR_5 ) ++ ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return super . METHOD_1 ( VAR_1 ) ; )  return super . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . email ( ) ) != null ) COND ( VAR_1 . email ( ) ) != null ( THEN THEN (  return VAR_1 . email ( ) ; )  return VAR_1 . email ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . name ( ) ) != null ) COND ( VAR_1 . name ( ) ) != null ( THEN THEN (  return VAR_1 . name ( ) ; )  return VAR_1 . name ( ) ; ) THEN THEN ( ELSE ELSE (  return STRING_1 ; )  return STRING_1 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) INIT = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) INIT = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) VAR VAR (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) (  METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) )  METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) (  METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) )  METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ref ) NAME ref ( INIT = TYPE_4 . METHOD_1 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ref != null ) COND ref != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getName ) NAME getName ( BLOCK BLOCK (  return ref . getName ( ) ; )  return ref . getName ( ) ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_6 ) RETURN TYPE_6 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return ref . METHOD_3 ( ) ; )  return ref . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_5 ) NAME METHOD_5 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_5 ( ) { public java.lang.String getName ( ) { return ref . getName ( ) ; } public TYPE_6 METHOD_2 ( ) { return ref . METHOD_3 ( ) ; } public java.lang.String METHOD_4 ( ) { return null ; } public java.lang.String METHOD_5 ( ) { return null ; } } ; )  return new TYPE_5 ( ) { public java.lang.String getName ( ) { return ref . getName ( ) ; } public TYPE_6 METHOD_2 ( ) { return ref . METHOD_3 ( ) ; } public java.lang.String METHOD_4 ( ) { return null ; } public java.lang.String METHOD_5 ( ) { return null ; } } ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( ( STRING_1 + line ) ) )  VAR_1 . append ( ( STRING_1 + line ) ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , line ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , line ) ) VAR VAR (  VAR_1 . append ( STRING_2 ) )  VAR_1 . append ( STRING_2 ) (  VAR_1 . append ( VAR_4 ) )  VAR_1 . append ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . append ( STRING_3 ) )  VAR_1 . append ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . sshd ( config , VAR_1 ) )  TYPE_4 . sshd ( config , VAR_1 ) (  TYPE_4 . METHOD_2 ( config , VAR_1 ) )  TYPE_4 . METHOD_2 ( config , VAR_1 ) (  TYPE_4 . user ( config , VAR_1 ) )  TYPE_4 . user ( config , VAR_1 ) (  TYPE_4 . auth ( config , VAR_1 ) )  TYPE_4 . auth ( config , VAR_1 ) (  TYPE_4 . METHOD_3 ( config , VAR_1 ) )  TYPE_4 . METHOD_3 ( config , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = out . METHOD_2 ( ) ) INIT = out . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( VAR_1 [ i ] , VAR_2 [ i ] ) )  assertEquals ( VAR_1 [ i ] , VAR_2 [ i ] ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . changes ( ) . get ( psId . getParentKey ( ) ) ) INIT = db . changes ( ) . get ( psId . getParentKey ( ) ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ( INIT = VAR_1 . create ( c ) ) INIT = VAR_1 . create ( c ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = VAR_2 . get ( db , notes , psId ) ) INIT = VAR_2 . get ( db , notes , psId ) ) VAR VAR (  return ps != null ? ps . METHOD_2 ( ) : null ; )  return ps != null ? ps . METHOD_2 ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( WHILE WHILE ( COND ( ( VAR_1 ) == null ) && ( VAR_2 . METHOD_1 ( ) ) ) COND ( ( VAR_1 ) == null ) && ( VAR_2 . METHOD_1 ( ) ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME p ) NAME p ( INIT = VAR_2 . METHOD_2 ( ) . get ( ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( ) ) VAR VAR ( IF IF ( COND p != null ) COND p != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 = p . get ( ) )  VAR_1 = p . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( ( ( STRING_1 + p ) + STRING_2 ) , e ) )  VAR_3 . error ( ( ( STRING_1 + p ) + STRING_2 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return ( VAR_1 ) != null ; )  return ( VAR_1 ) != null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_2 ( db , null ) ) ) ) COND ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_2 ( db , null ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_3 ( ) ; )  return METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = event . METHOD_2 ( ) ) INIT = event . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN (  VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) )  VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  VAR_2 = TYPE_3 . METHOD_4 ( ) )  VAR_2 = TYPE_3 . METHOD_4 ( ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_5 ( true ) )  METHOD_5 ( true ) (  METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 , VAR_3 ) ) )  METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 , VAR_3 ) ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( false ) )  METHOD_5 ( false ) ) ELSE ELSE ) IF IF (  super . METHOD_1 ( event ) )  super . METHOD_1 ( event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ) INIT = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_4<com.google.gerrit.reviewdb.server.ReviewDb> ) RETURN TYPE_4<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return TYPE_3 . of ( db ) ; )  return TYPE_3 . of ( db ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; )  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) (  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) )  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME req ) NAME req ( INIT = ( ( TYPE_5 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_5 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_6 . METHOD_2 ( req ) ) ) COND ! ( TYPE_6 . METHOD_2 ( req ) ) ( THEN THEN (  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME rsp ) NAME rsp ( INIT = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) INIT = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND METHOD_3 ( req , rsp ) ) COND METHOD_3 ( req , rsp ) ( THEN THEN (  VAR_3 . METHOD_1 ( req , VAR_2 ) )  VAR_3 . METHOD_1 ( req , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) (  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( base , revision , path ) ) )  VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( base , revision , path ) ) (  VAR_1 . METHOD_7 ( TYPE_5 . METHOD_4 ( ) ) )  VAR_1 . METHOD_7 ( TYPE_5 . METHOD_4 ( ) ) (  return java.util.Collections . METHOD_8 ( VAR_1 ) ; )  return java.util.Collections . METHOD_8 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND rsrc . METHOD_1 ( ) ) COND rsrc . METHOD_1 ( ) ( THEN THEN (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_2 ( rsrc ) ) ) COND ! ( METHOD_2 ( rsrc ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( rsrc ) )  VAR_1 . METHOD_3 ( rsrc ) ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_4 ( STRING_2 ) ; )  return TYPE_1 . METHOD_4 ( STRING_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_7 ( e . getMessage ( ) ) ; )  throw new TYPE_7 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_3 , e ) ; )  throw new TYPE_4 ( STRING_3 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.AccountGroup ) TYPE TYPE_2.AccountGroup ( NAME group ) NAME group ( INIT = db . METHOD_1 ( ) . get ( VAR_1 ) ) INIT = db . METHOD_1 ( ) . get ( VAR_1 ) ) VAR VAR (  METHOD_2 ( db , group ) )  METHOD_2 ( db , group ) (  group . METHOD_3 ( VAR_2 ) )  group . METHOD_3 ( VAR_2 ) (  db . METHOD_1 ( ) . update ( java.util.Collections.singleton ( group ) ) )  db . METHOD_1 ( ) . update ( java.util.Collections.singleton ( group ) ) (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( STRING_1 . equals ( req . METHOD_2 ( ) ) ) ) && ( ! ( STRING_2 . equals ( req . METHOD_2 ( ) ) ) ) ) COND ( ! ( STRING_1 . equals ( req . METHOD_2 ( ) ) ) ) && ( ! ( STRING_2 . equals ( req . METHOD_2 ( ) ) ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , STRING_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_7 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_7 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( index , false , VAR_3 ) ) INIT = METHOD_2 ( index , false , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ) INIT = METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return new TYPE_3 ( ) . METHOD_2 ( new TYPE_4 . Key ( project , repo , VAR_1 , VAR_2 , VAR_3 ) ) ; )  return new TYPE_3 ( ) . METHOD_2 ( new TYPE_4 . Key ( project , repo , VAR_1 , VAR_2 , VAR_3 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) )  VAR_4 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ctx ) )  METHOD_2 ( ctx ) (  VAR_1 = VAR_2 . get ( ctx . METHOD_3 ( ) , commit , patchSet . getId ( ) ) )  VAR_1 = VAR_2 . get ( ctx . METHOD_3 ( ) , commit , patchSet . getId ( ) ) (  change . METHOD_4 ( VAR_1 ) )  change . METHOD_4 ( VAR_1 ) ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , patchSet . getRefName ( ) ) ) )  ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , patchSet . getRefName ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ( IF IF ( COND VAR_1 < VAR_2 ) COND VAR_1 < VAR_2 ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 - VAR_1 ) INIT = VAR_2 - VAR_1 ) VAR VAR (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 > VAR_2 ) COND VAR_1 > VAR_2 ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 - VAR_2 ) INIT = VAR_1 - VAR_2 ) VAR VAR (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rsrc ) NAME rsrc ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  VAR_4 = VAR_5 )  VAR_4 = VAR_5 (  VAR_6 = true )  VAR_6 = true (  VAR_7 = VAR_8 )  VAR_7 = VAR_8 (  return VAR_9 . METHOD_2 ( rsrc , VAR_2 ) ; )  return VAR_9 . METHOD_2 ( rsrc , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( type . getName ( ) ) , TYPE_4 . METHOD_2 ( type . getId ( ) ) , TYPE_4 . METHOD_2 ( type . METHOD_3 ( ) ) , new TYPE_5 ( type . METHOD_4 ( ) . getValue ( ) ) , new TYPE_5 ( type . METHOD_5 ( ) . getValue ( ) ) ) ; )  return new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( type . getName ( ) ) , TYPE_4 . METHOD_2 ( type . getId ( ) ) , TYPE_4 . METHOD_2 ( type . METHOD_3 ( ) ) , new TYPE_5 ( type . METHOD_4 ( ) . getValue ( ) ) , new TYPE_5 ( type . METHOD_5 ( ) . getValue ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = table . METHOD_2 ( event ) ) INIT = table . METHOD_2 ( event ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ( THEN THEN (  METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ( THEN THEN ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_6 ( VAR_1 . METHOD_5 ( ) ) ) != null ) COND ( METHOD_6 ( VAR_1 . METHOD_5 ( ) ) ) != null ( THEN THEN (  METHOD_7 ( VAR_1 . METHOD_5 ( ) ) )  METHOD_7 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = METHOD_2 ( TYPE_3 . METHOD_3 ( req ) , TYPE_4 . METHOD_4 ( req ) , req , res ) ) INIT = METHOD_2 ( TYPE_3 . METHOD_3 ( req ) , TYPE_4 . METHOD_4 ( req ) , req , res ) ) VAR VAR ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME out ) NAME out ( INIT = METHOD_5 ( req , res ) ) INIT = METHOD_5 ( req , res ) ) VAR VAR (  out . METHOD_6 ( TYPE_6 . METHOD_7 ( name ) ) )  out . METHOD_6 ( TYPE_6 . METHOD_7 ( name ) ) (  out . close ( ) )  out . close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( INIT = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND ! ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK (  VAR_6 . METHOD_4 ( e ) )  VAR_6 . METHOD_4 ( e ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = s . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_3 ( ) . label ( STRING_3 , 2 ) ) ) INIT = s . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_3 ( ) . label ( STRING_3 , 2 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME group ) NAME group ( INIT = ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_1 ( ) ) != null ) ) ? VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) : null ) INIT = ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_1 ( ) ) != null ) ) ? VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) : null ) VAR VAR (  return new TYPE_6 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) , group ) ; )  return new TYPE_6 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) , group ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cm . METHOD_2 ( ) ) COND cm . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = cm . METHOD_3 ( ) ) INIT = cm . METHOD_3 ( ) ) VAR VAR (  cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) )  cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) (  cm . METHOD_6 ( null ) )  cm . METHOD_6 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) )  VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) ELSE ELSE ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME get ) NAME get ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_4 . create ( VAR_5 , new TYPE_3 < TYPE_2 > ( ) { public TYPE_2 get ( ) { return VAR_1 ; } } , VAR_6 ) ) ; )  return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_4 . create ( VAR_5 , new TYPE_3 < TYPE_2 > ( ) { public TYPE_2 get ( ) { return VAR_1 ; } } , VAR_6 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < java.lang.String > ( ) ) INIT = new TYPE_1 < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_2 . add ( VAR_3 . METHOD_4 ( ) ) )  VAR_2 . add ( VAR_3 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME config ) NAME config ( INIT = STRING_1 + ( STRING_2 + STRING_3 ) ) INIT = STRING_1 + ( STRING_2 + STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_4 ) , new TYPE_4 ( new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_5 . NameKey ( STRING_5 ) , new TYPE_5 . Id ( 1 ) , new TYPE_6 ( STRING_4 ) ) ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_4 ) , new TYPE_4 ( new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_5 . NameKey ( STRING_5 ) , new TYPE_5 . Id ( 1 ) , new TYPE_6 ( STRING_4 ) ) ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) (  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_4 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) )  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_4 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ) VAR VAR (  out = METHOD_3 ( in ) )  out = METHOD_3 ( in ) (  METHOD_4 ( ( ( out instanceof TYPE_2 ) || ( out instanceof TYPE_3 ) ) ) )  METHOD_4 ( ( ( out instanceof TYPE_2 ) || ( out instanceof TYPE_3 ) ) ) (  VAR_1 . METHOD_5 ( null ) )  VAR_1 . METHOD_5 ( null ) (  out = METHOD_3 ( in ) )  out = METHOD_3 ( in ) (  METHOD_4 ( ( out instanceof TYPE_4 ) ) )  METHOD_4 ( ( out instanceof TYPE_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 < > ( ) ) INIT = new TYPE_4 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 ) ) )  VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( e . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( e . METHOD_3 ( ) ) (  throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; )  throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) (  VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 . METHOD_6 ( project ) ) ) ) )  VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 . METHOD_6 ( project ) ) ) ) (  VAR_4 = VAR_2 . METHOD_7 ( ) . parseCommit ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( STRING_1 ) . METHOD_10 ( ) ) )  VAR_4 = VAR_2 . METHOD_7 ( ) . parseCommit ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( STRING_1 ) . METHOD_10 ( ) ) (  VAR_5 = admin . getId ( ) )  VAR_5 = admin . getId ( ) (  VAR_6 = VAR_7 . get ( ) )  VAR_6 = VAR_7 . get ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; )  return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) VAR VAR (  VAR_1 . error ( msg , e ) )  VAR_1 . error ( msg , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; )  return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; )  return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1.PatchSet ) TYPE TYPE_1.PatchSet ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  patchSet = ps )  patchSet = ps (  info = db . METHOD_2 ( ) . get ( patchSet . getKey ( ) ) )  info = db . METHOD_2 ( ) . get ( patchSet . getKey ( ) ) (  VAR_1 = db . METHOD_3 ( ) . METHOD_4 ( patchSet . getKey ( ) ) . METHOD_5 ( ) )  VAR_1 = db . METHOD_3 ( ) . METHOD_4 ( patchSet . getKey ( ) ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( METHOD_8 ( cfg , revision ) ) . METHOD_9 ( true ) . METHOD_10 ( out ) . get ( ) ; )  return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( METHOD_8 ( cfg , revision ) ) . METHOD_9 ( true ) . METHOD_10 ( out ) . get ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME event ) NAME event ( INIT = new TYPE_6 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_6 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( event ) )  VAR_5 . METHOD_4 ( event ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  util . METHOD_5 ( TYPE_8 . log , e ) )  util . METHOD_5 ( TYPE_8 . log , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR (  VAR_2 = VAR_4 . METHOD_3 ( ) )  VAR_2 = VAR_4 . METHOD_3 ( ) ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( ) ) ) COND ! ( VAR_2 . METHOD_4 ( ) ) ( THEN THEN (  return VAR_1 . METHOD_5 ( ) ; )  return VAR_1 . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  VAR_3 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_6 ( ) )  VAR_3 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_6 ( ) (  VAR_5 = this . VAR_6 )  VAR_5 = this . VAR_6 (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) )  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  VAR_1 . add ( file ( STRING_4 ) ) )  VAR_1 . add ( file ( STRING_4 ) ) (  METHOD_5 ( VAR_1 . commit ( ) ) )  METHOD_5 ( VAR_1 . commit ( ) ) (  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) )  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME event ) NAME event ( INIT = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( event ) )  VAR_5 . METHOD_4 ( event ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  util . METHOD_5 ( TYPE_7 . log , e ) )  util . METHOD_5 ( TYPE_7 . log , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ( INIT = VAR_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_3 . METHOD_1 ( VAR_4 , line ) ) INIT = VAR_3 . METHOD_1 ( VAR_4 , line ) ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_3 ( VAR_6 , STRING_1 ) ) INIT = VAR_2 . METHOD_3 ( VAR_6 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . METHOD_3 ( VAR_9 , STRING_1 ) ) INIT = VAR_8 . METHOD_3 ( VAR_9 , STRING_1 ) ) VAR VAR (  return TYPE_2 . METHOD_4 ( 0 , ( VAR_7 + ( VAR_1 - VAR_5 ) ) ) ; )  return TYPE_2 . METHOD_4 ( 0 , ( VAR_7 + ( VAR_1 - VAR_5 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME insert ) NAME insert ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME in ) NAME in ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = in . METHOD_1 ( ) ) INIT = in . METHOD_1 ( ) ) VAR VAR ) INIT INIT ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  table . METHOD_4 ( row ) )  table . METHOD_4 ( row ) (  table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) )  table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) (  METHOD_7 ( row , VAR_3 , c , ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) )  METHOD_7 ( row , VAR_3 , c , ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) (  row ++ )  row ++ ) BLOCK BLOCK ) FOR FOR (  return row ; )  return row ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( change . getProject ( ) ) ) INIT = VAR_2 . get ( change . getProject ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( user ) ) INIT = VAR_1 . METHOD_2 ( user ) ) VAR VAR (  return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; )  return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  set ( ( ( VAR_1 . css ( ) ) != null ? VAR_1 . css ( ) : VAR_2 ) , ( ( VAR_1 . METHOD_1 ( ) ) != null ? VAR_1 . METHOD_1 ( ) : VAR_3 ) , ( ( VAR_1 . METHOD_2 ( ) ) != null ? VAR_1 . METHOD_2 ( ) : VAR_4 ) ) )  set ( ( ( VAR_1 . css ( ) ) != null ? VAR_1 . css ( ) : VAR_2 ) , ( ( VAR_1 . METHOD_1 ( ) ) != null ? VAR_1 . METHOD_1 ( ) : VAR_3 ) , ( ( VAR_1 . METHOD_2 ( ) ) != null ? VAR_1 . METHOD_2 ( ) : VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( IF IF ( COND ( value & ( ~ INT_1 ) ) == 0 ) COND ( value & ( ~ INT_1 ) ) == 0 ( THEN THEN (  VAR_1 . METHOD_2 ( value ) )  VAR_1 . METHOD_2 ( value ) (  return ; )  return ; ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_2 ( ( ( value & INT_1 ) | INT_2 ) ) )  VAR_1 . METHOD_2 ( ( ( value & INT_1 ) | INT_2 ) ) (  value >>>= INT_3 )  value >>>= INT_3 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  res . METHOD_2 ( VAR_1 ) )  res . METHOD_2 ( VAR_1 ) (  TYPE_4 . METHOD_3 ( req , res , c ) )  TYPE_4 . METHOD_3 ( req , res , c ) (  TYPE_4 . METHOD_4 ( null , res , msg ) )  TYPE_4 . METHOD_4 ( null , res , msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME user ) NAME user ( INIT = user ( name , null ) ) INIT = user ( name , null ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = create ( ) . METHOD_4 ( user ) ) INIT = create ( ) . METHOD_4 ( user ) ) VAR VAR (  METHOD_5 ( r ) )  METHOD_5 ( r ) (  assertEquals ( ( name + STRING_3 ) , r . name ) )  assertEquals ( ( name + STRING_3 ) , r . name ) (  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) )  assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) (  TYPE_1 . METHOD_7 ( VAR_1 ) )  TYPE_1 . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = result . config )  VAR_1 = result . config ( IF IF ( COND ( result . account ) != null ) COND ( result . account ) != null ( THEN THEN (  VAR_2 = result . account )  VAR_2 = result . account ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN (  VAR_8 = VAR_7 )  VAR_8 = VAR_7 (  METHOD_1 ( INT_1 ) )  METHOD_1 ( INT_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR (  diff ( VAR_10 ) )  diff ( VAR_10 ) ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_4 . METHOD_2 ( VAR_2 ) ) ) COND ! ( TYPE_4 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_5 . METHOD_3 ( VAR_1 , path , t ) ) INIT = TYPE_5 . METHOD_3 ( VAR_1 , path , t ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return VAR_3 != null ? repo . METHOD_4 ( VAR_3 . METHOD_5 ( 0 ) , VAR_4 ) . METHOD_6 ( ) : 0 ; )  return VAR_3 != null ? repo . METHOD_4 ( VAR_3 . METHOD_5 ( 0 ) , VAR_4 ) . METHOD_6 ( ) : 0 ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR (  VAR_3 += VAR_1 )  VAR_3 += VAR_1 ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_3 ) - ( VAR_5 ) ) INIT = ( VAR_3 ) - ( VAR_5 ) ) VAR VAR (  VAR_6 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) )  VAR_6 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) (  VAR_7 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) )  VAR_7 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( IF IF ( COND config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) COND config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ( THEN THEN (  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) )  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_3 ( ) )  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) )  VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( project ) == null ) COND ( project ) == null ( THEN THEN (  notes = VAR_1 . METHOD_2 ( db , VAR_2 ) )  notes = VAR_1 . METHOD_2 ( db , VAR_2 ) ) THEN THEN ( ELSE ELSE (  notes = VAR_1 . create ( db , project , VAR_2 ) )  notes = VAR_1 . create ( db , project , VAR_2 ) ) ELSE ELSE ) IF IF (  change = notes . getChange ( ) )  change = notes . getChange ( ) ( IF IF ( COND ( change ) == null ) COND ( change ) == null ( THEN THEN (  throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + ( VAR_2 ) ) ) ; )  throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + ( VAR_2 ) ) ) ; ) THEN THEN ) IF IF (  METHOD_3 ( null ) )  METHOD_3 ( null ) (  return change ; )  return change ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 class , VAR_2 ) )  METHOD_2 ( VAR_1 class , VAR_2 ) (  METHOD_2 ( VAR_3 class , VAR_4 ) )  METHOD_2 ( VAR_3 class , VAR_4 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  bind ( VAR_5 class ) . to ( VAR_6 class ) . in ( VAR_7 ) )  bind ( VAR_5 class ) . to ( VAR_6 class ) . in ( VAR_7 ) (  bind ( VAR_8 class ) . METHOD_5 ( VAR_9 class ) )  bind ( VAR_8 class ) . METHOD_5 ( VAR_9 class ) (  bind ( VAR_10 class ) . to ( VAR_11 class ) )  bind ( VAR_10 class ) . to ( VAR_11 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1<java.lang.String,java.lang.String> ) RETURN TYPE_1<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ) TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String,java.lang.String> ) TYPE TYPE_1<java.lang.String,java.lang.String> ( NAME result ) NAME result ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( IN TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) IN TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( BLOCK BLOCK (  result . put ( key , java.lang.String . METHOD_5 ( STRING_1 , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( key ) ) ) ) )  result . put ( key , java.lang.String . METHOD_5 ( STRING_1 , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( key ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) )  METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  com.google.common.truth.Truth.assertThat ( METHOD_5 ( r , user . email ) . VAR_3 ) . isEqualTo ( user . getId ( ) . get ( ) ) )  com.google.common.truth.Truth.assertThat ( METHOD_5 ( r , user . email ) . VAR_3 ) . isEqualTo ( user . getId ( ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_8 ( ) )  METHOD_8 ( ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( repo ) ) INIT = METHOD_3 ( repo ) ) VAR VAR (  insert ( VAR_1 ) )  insert ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( ) . getRevision ( ) . get ( ) ) INIT = VAR_1 . METHOD_4 ( ) . getRevision ( ) . get ( ) ) VAR VAR (  METHOD_5 ( STRING_2 ) )  METHOD_5 ( STRING_2 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= INT_1 ) COND i <= INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_6 ( 0 , ( INT_2 - i ) ) ) INIT = VAR_2 . METHOD_6 ( 0 , ( INT_2 - i ) ) ) VAR VAR (  METHOD_5 ( VAR_3 , VAR_1 . getChange ( ) ) )  METHOD_5 ( VAR_3 , VAR_1 . getChange ( ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cfg ) NAME cfg ( INIT = VAR_1 . METHOD_2 ( TYPE_2 . get ( VAR_2 class , VAR_3 class ) ) ) INIT = VAR_1 . METHOD_2 ( TYPE_2 . get ( VAR_2 class , VAR_3 class ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = cfg . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( VAR_5 class ) . METHOD_4 ( ) ) ) INIT = cfg . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( VAR_5 class ) . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = cfg . METHOD_5 ( STRING_1 , STRING_3 , VAR_7 ) ) INIT = cfg . METHOD_5 ( STRING_1 , STRING_3 , VAR_7 ) ) VAR VAR ( IF IF ( COND VAR_4 && ( ( VAR_8 ) > VAR_6 ) ) COND VAR_4 && ( ( VAR_8 ) > VAR_6 ) ( THEN THEN (  VAR_9 . METHOD_6 ( ( ( STRING_4 + VAR_6 ) + STRING_5 ) ) )  VAR_9 . METHOD_6 ( ( ( STRING_4 + VAR_6 ) + STRING_5 ) ) (  VAR_8 = VAR_6 )  VAR_8 = VAR_6 ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) COND getChange ( ) . getStatus ( ) . METHOD_2 ( ) ( THEN THEN (  return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; )  return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_4 ( ) . METHOD_9 ( ) ; )  return METHOD_4 ( ) . METHOD_9 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME file ) NAME file ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = new TYPE_1 ( name ) ) INIT = new TYPE_1 ( name ) ) VAR VAR (  e . METHOD_2 ( VAR_3 ) )  e . METHOD_2 ( VAR_3 ) (  e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) )  e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  return e ; )  return e ; (  METHOD_6 ( INT_1 ) )  METHOD_6 ( INT_1 ) ( VAR VAR ( TYPE TYPE_4.a ) TYPE TYPE_4.a ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME to ) NAME to ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME revision ) NAME revision ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ProjectConfig ) TYPE TYPE_1.ProjectConfig ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( VAR_1 . getProject ( ) . METHOD_2 ( ) , user ) ) INIT = VAR_3 . create ( VAR_1 . getProject ( ) . METHOD_2 ( ) , user ) ) VAR VAR (  VAR_1 . commit ( VAR_2 ) )  VAR_1 . commit ( VAR_2 ) (  VAR_4 . METHOD_3 ( VAR_1 . getProject ( ) . METHOD_2 ( ) ) )  VAR_4 . METHOD_3 ( VAR_1 . getProject ( ) . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_1 ( event ) ) ) COND ! ( VAR_2 . METHOD_1 ( event ) ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_4 ) == null ) && ( ! ( VAR_5 ) ) ) COND ( ( VAR_4 ) == null ) && ( ! ( VAR_5 ) ) ( THEN THEN (  VAR_4 = VAR_6 . submit ( VAR_7 ) )  VAR_4 = VAR_6 . submit ( VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) (  VAR_5 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  VAR_5 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( INIT = new TYPE_4 ( change , revision , VAR_1 , VAR_2 ) ) INIT = new TYPE_4 ( change , revision , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( e ) )  VAR_4 . METHOD_4 ( e ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cd . METHOD_2 ( user ) ) COND cd . METHOD_2 ( user ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = cd . change ( db ) ) INIT = cd . change ( db ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( c , user ) ) INIT = VAR_2 . METHOD_3 ( c , user ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_4 ( db . get ( ) ) ) COND VAR_1 . METHOD_4 ( db . get ( ) ) ( THEN THEN (  cd . METHOD_5 ( VAR_1 ) )  cd . METHOD_5 ( VAR_1 ) (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  install ( new TYPE_2 ( VAR_2 ) ) )  install ( new TYPE_2 ( VAR_2 ) ) (  bind ( VAR_3 class ) . to ( VAR_4 class ) )  bind ( VAR_3 class ) . to ( VAR_4 class ) (  METHOD_4 ( ) . to ( VAR_4 class ) )  METHOD_4 ( ) . to ( VAR_4 class ) ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  METHOD_4 ( ) . to ( VAR_6 class ) )  METHOD_4 ( ) . to ( VAR_6 class ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  r . add ( e . METHOD_2 ( VAR_1 ) ) )  r . add ( e . METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND p instanceof TYPE_3 < ? > ) COND p instanceof TYPE_3 < ? > ( THEN THEN (  return TYPE_4 . METHOD_2 ( p ) ; )  return TYPE_4 . METHOD_2 ( p ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; )  return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) )  METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 ) . to ( VAR_7 , VAR_4 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_11 ( VAR_11 ) . METHOD_11 ( VAR_3 ) )  assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 ) . to ( VAR_7 , VAR_4 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_11 ( VAR_11 ) . METHOD_11 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND t . METHOD_2 ( ) ) COND t . METHOD_2 ( ) ( THEN THEN (  return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; )  return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( t . METHOD_3 ( ) ) ) COND ! ( t . METHOD_3 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_2 . equals ( ( ( TYPE_4 ) ( t ) ) . VAR_2 ) ; )  return VAR_2 . equals ( ( ( TYPE_4 ) ( t ) ) . VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( INIT = rw . parseCommit ( id ) ) INIT = rw . parseCommit ( id ) ) VAR VAR (  rw . METHOD_2 ( commit ) )  rw . METHOD_2 ( commit ) (  this . commit = commit )  this . commit = commit (  VAR_2 = commit . METHOD_3 ( ) )  VAR_2 = commit . METHOD_3 ( ) (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( t . METHOD_2 ( ) ) ) COND ! ( t . METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND t . equals ( VAR_1 ) ) COND t . equals ( VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ( ( ( TYPE_2 ) ( t ) ) . name ( ) . length ( ) ) == 1 ; )  return ( ( ( TYPE_2 ) ( t ) ) . name ( ) . length ( ) ) == 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( project , STRING_1 ) )  METHOD_2 ( project , STRING_1 ) (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ) INIT = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ) VAR VAR (  METHOD_5 ( user ) )  METHOD_5 ( user ) (  TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_2 , VAR_1 , false ) ) , METHOD_7 ( ) . get ( ) ) )  TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_2 , VAR_1 , false ) ) , METHOD_7 ( ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( db , key ) ) INIT = METHOD_1 ( db , key ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME user ) NAME user ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND user != null ) COND user != null ( THEN THEN (  VAR_2 . put ( user , TYPE_2 . of ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) )  VAR_2 . put ( user , TYPE_2 . of ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME u ) NAME u ( INIT = user . get ( ) ) INIT = user . get ( ) ) VAR VAR ( IF IF ( COND u . METHOD_1 ( ) ) COND u . METHOD_1 ( ) ( THEN THEN (  ( ( TYPE_6 ) ( u ) ) . METHOD_2 ( ) )  ( ( TYPE_6 ) ( u ) ) . METHOD_2 ( ) ) THEN THEN ) IF IF (  return VAR_1 . get ( ) . METHOD_3 ( s ) . format ( change ) ; )  return VAR_1 . get ( ) . METHOD_3 ( s ) . format ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_1 , e ) ; )  throw new TYPE_4 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) )  VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( ) ) INIT = VAR_5 . get ( ) ) VAR VAR ( IF IF ( COND VAR_4 instanceof TYPE_4 ) COND VAR_4 instanceof TYPE_4 ( THEN THEN (  VAR_4 = null )  VAR_4 = null ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_6 . METHOD_3 ( VAR_1 , VAR_7 , VAR_4 ) ) ; )  return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_6 . METHOD_3 ( VAR_1 , VAR_7 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = s . METHOD_1 ( ) ) INIT = s . METHOD_1 ( ) ) VAR VAR (  METHOD_2 ( n ) )  METHOD_2 ( n ) ( IF IF ( COND ( VAR_1 . put ( n , s ) ) != null ) COND ( VAR_1 . put ( n , s ) ) != null ( THEN THEN (  throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; )  throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; ) THEN THEN ) IF IF (  VAR_2 . add ( n ) )  VAR_2 . add ( n ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<com.google.gerrit.server.query.change.ChangeData> ) RETURN java.util.List<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . schema ( VAR_2 ) . METHOD_3 ( VAR_3 ) ) ) ) COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . schema ( VAR_2 ) . METHOD_3 ( VAR_3 ) ) ) ( THEN THEN (  return java.util.Collections . METHOD_4 ( ) ; )  return java.util.Collections . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE (  return query ( new TYPE_3 ( VAR_1 ) ) ; )  return query ( new TYPE_3 ( VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = p . METHOD_2 ( schema ) ) INIT = p . METHOD_2 ( schema ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = p . METHOD_3 ( schema ) ) INIT = p . METHOD_3 ( schema ) ) VAR VAR (  return TYPE_4 . METHOD_4 ( p . METHOD_5 ( ) . getName ( ) , ( VAR_1 != ( VAR_3 ) ? VAR_1 : null ) , ( VAR_2 != ( VAR_4 ) ? VAR_2 : null ) , false , false ) ; )  return TYPE_4 . METHOD_4 ( p . METHOD_5 ( ) . getName ( ) , ( VAR_1 != ( VAR_3 ) ? VAR_1 : null ) , ( VAR_2 != ( VAR_4 ) ? VAR_2 : null ) , false , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME label ) NAME label ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( status . METHOD_2 ( ) ) && ( ( status . METHOD_3 ( ) ) == 1 ) ) COND ( status . METHOD_2 ( ) ) && ( ( status . METHOD_3 ( ) ) == 1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = status . METHOD_4 ( 0 ) ) INIT = status . METHOD_4 ( 0 ) ) VAR VAR ( IF IF ( COND TYPE_4 . METHOD_5 ( VAR_1 ) ) COND TYPE_4 . METHOD_5 ( VAR_1 ) ( THEN THEN (  VAR_2 = new com.google.gerrit.reviewdb.client.Account.Id ( ( ( TYPE_5 ) ( VAR_1 . METHOD_4 ( 0 ) ) ) . METHOD_6 ( ) ) )  VAR_2 = new com.google.gerrit.reviewdb.client.Account.Id ( ( ( TYPE_5 ) ( VAR_1 . METHOD_4 ( 0 ) ) ) . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE (  throw new TYPE_3 ( label ) ; )  throw new TYPE_3 ( label ) ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ( INIT = VAR_4 . change ( ) . getProject ( ) ) INIT = VAR_4 . change ( ) . getProject ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME branch ) NAME branch ( INIT = VAR_4 . change ( ) . METHOD_1 ( ) . get ( ) ) INIT = VAR_4 . change ( ) . METHOD_1 ( ) . get ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_4 . METHOD_2 ( VAR_4 . getId ( ) . get ( ) , VAR_5 , branch ) ) INIT = TYPE_4 . METHOD_2 ( VAR_4 . getId ( ) . get ( ) , VAR_5 , branch ) ) VAR VAR (  return get ( VAR_1 , VAR_2 , VAR_6 , VAR_3 , project , branch , VAR_4 . METHOD_3 ( ) ) ; )  return get ( VAR_1 , VAR_2 , VAR_6 , VAR_3 , project , branch , VAR_4 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( ( ( VAR_1 ) >= 0 ) && ( ( VAR_2 ) >= 0 ) ) && ( ( VAR_3 ) >= 0 ) ) && ( ( VAR_4 ) >= 0 ) ) && ( ( VAR_1 ) <= ( VAR_3 ) ) ) && ( ( ( VAR_1 ) != ( VAR_3 ) ) || ( ( VAR_2 ) <= ( VAR_4 ) ) ) ; )  return ( ( ( ( ( ( VAR_1 ) >= 0 ) && ( ( VAR_2 ) >= 0 ) ) && ( ( VAR_3 ) >= 0 ) ) && ( ( VAR_4 ) >= 0 ) ) && ( ( VAR_1 ) <= ( VAR_3 ) ) ) && ( ( ( VAR_1 ) != ( VAR_3 ) ) || ( ( VAR_2 ) <= ( VAR_4 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME t ) NAME t ( INIT = e . METHOD_1 ( id ) ) INIT = e . METHOD_1 ( id ) ) VAR VAR ( IF IF ( COND t != null ) COND t != null ( THEN THEN ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE (  result = t )  result = t ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ) RETURN TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSet> ) TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSet> ( NAME patchSets ) NAME patchSets ( INIT = cd . METHOD_2 ( ) ) INIT = cd . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ) TYPE TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> ( NAME result ) NAME result ( INIT = TYPE_4 . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( IN patchSets ) IN patchSets ( BLOCK BLOCK (  result . put ( ps . getId ( ) . get ( ) , ps ) )  result . put ( ps . getId ( ) . get ( ) , ps ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF (  TYPE_1 . METHOD_5 ( true ) )  TYPE_1 . METHOD_5 ( true ) (  VAR_4 = null )  VAR_4 = null (  VAR_5 = null )  VAR_5 = null (  VAR_6 = null )  VAR_6 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = ctx . getChange ( ) ) INIT = ctx . getChange ( ) ) VAR VAR ( IF IF ( COND ( change . getStatus ( ) ) == ( VAR_1 ) ) COND ( change . getStatus ( ) ) == ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME update ) NAME update ( INIT = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ) INIT = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ) VAR VAR (  change . METHOD_3 ( VAR_2 ) )  change . METHOD_3 ( VAR_2 ) (  change . METHOD_4 ( ctx . METHOD_5 ( ) ) )  change . METHOD_4 ( ctx . METHOD_5 ( ) ) (  update . METHOD_3 ( VAR_2 ) )  update . METHOD_3 ( VAR_2 ) (  METHOD_6 ( ctx , update ) )  METHOD_6 ( ctx , update ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = repo . METHOD_2 ( ) ) INIT = repo . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) )  p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) (  return p ; )  return p ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_4 ) ( req . METHOD_1 ( VAR_2 ) ) ) ) INIT = ( ( TYPE_4 ) ( req . METHOD_1 ( VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = factory . create ( VAR_1 , db , TYPE_6 . of ( ) ) ) INIT = factory . create ( VAR_1 , db , TYPE_6 . of ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME rp ) NAME rp ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR (  req . METHOD_5 ( VAR_4 , VAR_3 ) )  req . METHOD_5 ( VAR_4 , VAR_3 ) (  return rp ; )  return rp ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME account ) NAME account ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . create ( VAR_3 . METHOD_2 ( account , VAR_1 ) ) ; )  return VAR_2 . create ( VAR_3 . METHOD_2 ( account , VAR_1 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6|com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE TYPE_6|com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e ) ; )  throw new TYPE_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ChangeInfo> ) TYPE TYPE_1<TYPE_2.ChangeInfo> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( changeId . get ( ) ) ) INIT = TYPE_4 . METHOD_2 ( changeId . get ( ) ) ) VAR VAR (  TYPE_5 . METHOD_3 ( VAR_3 , TYPE_6 . of ( VAR_4 , VAR_5 , VAR_6 ) ) )  TYPE_5 . METHOD_3 ( VAR_3 , TYPE_6 . of ( VAR_4 , VAR_5 , VAR_6 ) ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF (  VAR_3 . get ( VAR_2 ) )  VAR_3 . get ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . get ( VAR_1 ) ) INIT = TYPE_3 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . get ( VAR_1 ) ) INIT = TYPE_5 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_6 . get ( VAR_1 ) ) INIT = TYPE_6 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_7 . get ( VAR_1 ) ) INIT = TYPE_7 . get ( VAR_1 ) ) VAR VAR (  return new TYPE_8 ( VAR_6 , VAR_5 , VAR_2 ) . METHOD_1 ( VAR_3 , VAR_4 ) ; )  return new TYPE_8 ( VAR_6 , VAR_5 , VAR_2 ) . METHOD_1 ( VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_7 . error ( STRING_1 , e ) )  VAR_7 . error ( STRING_1 , e ) (  return 0 ; )  return 0 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME m ) NAME m ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  m . append ( METHOD_2 ( ) ) )  m . append ( METHOD_2 ( ) ) ( IF IF ( COND user . METHOD_3 ( ) ) COND user . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME u ) NAME u ( INIT = user . METHOD_4 ( ) ) INIT = user . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND u . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) COND u . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ( THEN THEN (  m . append ( STRING_1 ) . append ( u . METHOD_5 ( ) . METHOD_6 ( ) . get ( ) ) . append ( STRING_2 ) )  m . append ( STRING_1 ) . append ( u . METHOD_5 ( ) . METHOD_6 ( ) . get ( ) ) . append ( STRING_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return m . toString ( ) ; )  return m . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME edit ) NAME edit ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  out . commit = TYPE_3 . METHOD_2 ( edit . METHOD_3 ( ) ) )  out . commit = TYPE_3 . METHOD_2 ( edit . METHOD_3 ( ) ) (  VAR_2 = edit . METHOD_4 ( ) . getRevision ( ) . get ( ) )  VAR_2 = edit . METHOD_4 ( ) . getRevision ( ) . get ( ) (  VAR_3 = TYPE_3 . METHOD_5 ( edit ) )  VAR_3 = TYPE_3 . METHOD_5 ( edit ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_4 = METHOD_6 ( edit ) )  VAR_4 = METHOD_6 ( edit ) ) THEN THEN ) IF IF (  return out ; )  return out ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData,?> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData,?> ( NAME VAR_1 ) NAME VAR_1 ( INIT = schema . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) ) INIT = schema . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == ( TYPE_4 ) ) COND VAR_1 == ( TYPE_4 ) ( THEN THEN (  return TYPE_5 . METHOD_1 ( value ) ; )  return TYPE_5 . METHOD_1 ( value ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_6 . METHOD_3 ( value ) ; )  return TYPE_6 . METHOD_3 ( value ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = c . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = c . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND d . METHOD_4 ( url , c ) ) COND d . METHOD_4 ( url , c ) ( THEN THEN (  return d . METHOD_5 ( c ) ; )  return d . METHOD_5 ( c ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_3 . OrmException ( ( STRING_1 + url ) ) ; )  throw new TYPE_3 . OrmException ( ( STRING_1 + url ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( token ) ) INIT = TYPE_2 . METHOD_2 ( token ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) )  TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) (  TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) )  TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw VAR_3 . reject ( e . getMessage ( ) ) ; )  throw VAR_3 . reject ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) )  VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Result ) TYPE TYPE_3.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME in ) NAME in ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_1 = user . email )  VAR_1 = user . email ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) ) INIT = VAR_3 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) ) VAR VAR (  VAR_2 . METHOD_1 ( in ) )  VAR_2 . METHOD_1 ( in ) (  org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) )  org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( change ) ) INIT = VAR_1 . create ( change ) ) VAR VAR (  cm . METHOD_1 ( change . METHOD_2 ( ) ) )  cm . METHOD_1 ( change . METHOD_2 ( ) ) (  cm . METHOD_3 ( patchSet , VAR_2 ) )  cm . METHOD_3 ( patchSet , VAR_2 ) (  cm . METHOD_4 ( reviewers ) )  cm . METHOD_4 ( reviewers ) (  cm . METHOD_5 ( VAR_3 ) )  cm . METHOD_5 ( VAR_3 ) (  cm . METHOD_6 ( ) )  cm . METHOD_6 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) )  VAR_4 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME p ) NAME p ( INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) VAR VAR (  return ( TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( ( METHOD_3 ( ) ) == ( p . METHOD_3 ( ) ) ) ; )  return ( TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( ( METHOD_3 ( ) ) == ( p . METHOD_3 ( ) ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( ( 0 <= VAR_1 ? VAR_1 : 0 ) ) )  VAR_4 . METHOD_3 ( ( 0 <= VAR_1 ? VAR_1 : 0 ) ) (  display ( TYPE_1 . METHOD_4 ( ) ) )  display ( TYPE_1 . METHOD_4 ( ) ) (  display ( ) )  display ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( db , VAR_4 . create ( c ) ) . values ( ) ) INIT = VAR_3 . METHOD_2 ( db , VAR_4 . create ( c ) ) . values ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.revwalk.RevCommit ) RETURN org.eclipse.jgit.revwalk.RevCommit ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_4 . METHOD_2 ( ) ) IN TYPE_4 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 ) ) )  VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , STRING_1 ) ) )  VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , STRING_1 ) ) (  return TYPE_5 . METHOD_1 ( repo , STRING_2 , VAR_1 ) ; )  return TYPE_5 . METHOD_1 ( repo , STRING_2 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 ) (  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) (  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) )  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) )  METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; )  return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ProjectConfig ) TYPE TYPE_1.ProjectConfig ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 . METHOD_3 ( ) ) IN VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ! ( VAR_2 . equals ( config . METHOD_5 ( VAR_2 . getName ( ) ) ) ) ) INIT = ! ( VAR_2 . equals ( config . METHOD_5 ( VAR_2 . getName ( ) ) ) ) ) VAR VAR (  config . METHOD_1 ( VAR_2 ) )  config . METHOD_1 ( VAR_2 ) (  VAR_1 . METHOD_6 ( VAR_2 . getName ( ) ) )  VAR_1 . METHOD_6 ( VAR_2 . getName ( ) ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  factory ( VAR_1 . Factory class ) )  factory ( VAR_1 . Factory class ) (  factory ( VAR_2 . Factory class ) )  factory ( VAR_2 . Factory class ) (  factory ( VAR_3 . Factory class ) )  factory ( VAR_3 . Factory class ) (  factory ( VAR_4 . Factory class ) )  factory ( VAR_4 . Factory class ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) (  factory ( VAR_6 . Factory class ) )  factory ( VAR_6 . Factory class ) (  factory ( VAR_7 . Factory class ) )  factory ( VAR_7 . Factory class ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) (  factory ( VAR_9 . Factory class ) )  factory ( VAR_9 . Factory class ) (  factory ( VAR_10 . Factory class ) )  factory ( VAR_10 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME m ) NAME m ( INIT = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , false ) ) INIT = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , false ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 ) )  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; )  return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; )  return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME p ) NAME p ( IN VAR_1 . approvals ( ) ) IN VAR_1 . approvals ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( VAR_4 , p . getAccountId ( ) ) ) INIT = VAR_3 . create ( VAR_4 , p . getAccountId ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( ) . contains ( VAR_5 ) ) COND VAR_2 . METHOD_2 ( ) . contains ( VAR_5 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) ) (  METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( STRING_2 ) . METHOD_9 ( ) , TYPE_1 . METHOD_3 ( STRING_3 ) ) )  METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( STRING_2 ) . METHOD_9 ( ) , TYPE_1 . METHOD_3 ( STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == null ) || ( ( VAR_2 ) != ( VAR_1 ) ) ) ) COND ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == null ) || ( ( VAR_2 ) != ( VAR_1 ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . create ( VAR_5 , VAR_1 , rw , db , VAR_6 , VAR_7 , VAR_8 ) ) INIT = VAR_4 . create ( VAR_5 , VAR_1 , rw , db , VAR_6 , VAR_7 , VAR_8 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . update ( ) )  VAR_3 . update ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_9 . error ( ( STRING_1 + ( e . getMessage ( ) ) ) ) )  VAR_9 . error ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_3 ) ) . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) )  com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_3 ) ) . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_2 + VAR_2 ) ) . METHOD_4 ( ( ( TYPE_1 < ? > ) ( VAR_2 ) ) ) . isEmpty ( ) )  com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_2 + VAR_2 ) ) . METHOD_4 ( ( ( TYPE_1 < ? > ) ( VAR_2 ) ) ) . isEmpty ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ui ) NAME ui ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  ui . message ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) )  ui . message ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) (  VAR_2 . METHOD_3 ( db ) )  VAR_2 . METHOD_3 ( db ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME s ) NAME s ( INIT = ( ( TYPE_4 ) ( db ) ) ) INIT = ( ( TYPE_4 ) ( db ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( INIT = new TYPE_5 ( s ) ) INIT = new TYPE_5 ( s ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  s . METHOD_1 ( e ) )  s . METHOD_1 ( e ) ) BLOCK BLOCK ( FINALLY FINALLY (  e . close ( ) )  e . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( value != null ) && ( ( value . length ( ) ) > 0 ) ) COND ( value != null ) && ( ( value . length ( ) ) > 0 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME e ) NAME e ( INIT = METHOD_2 ( name ) ) INIT = METHOD_2 ( name ) ) VAR VAR (  return METHOD_3 ( name , ( ( e . length ( ) ) > 0 ? ( e + STRING_1 ) + value : e ) ) ; )  return METHOD_3 ( name , ( ( e . length ( ) ) > 0 ? ( e + STRING_1 ) + value : e ) ) ; ) THEN THEN ) IF IF (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; )  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; )  return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME u ) NAME u ( INIT = user . get ( ) ) INIT = user . get ( ) ) VAR VAR ( IF IF ( COND u . METHOD_1 ( ) ) COND u . METHOD_1 ( ) ( THEN THEN (  u . METHOD_2 ( ) . METHOD_3 ( ) )  u . METHOD_2 ( ) . METHOD_3 ( ) ) THEN THEN ) IF IF (  return VAR_1 . create ( s ) . format ( change ) ; )  return VAR_1 . create ( s ) . format ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_1 , e ) ; )  throw new TYPE_4 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) )  assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) (  assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) )  assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) (  assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) )  assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.PatchSetApproval ) RETURN com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) INIT = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ( INIT = VAR_2 . create ( db , c ) . METHOD_2 ( ) ) INIT = VAR_2 . create ( db , c ) . METHOD_2 ( ) ) VAR VAR (  return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; )  return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( ) ) COND METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( db , cd ) . reviewers ( ) . values ( ) ) INIT = METHOD_4 ( db , cd ) . reviewers ( ) . values ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ( INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ) VAR VAR (  return VAR_1 . contains ( user . getAccountId ( ) ) ; )  return VAR_1 . contains ( user . getAccountId ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  walk . METHOD_2 ( walk . parseCommit ( VAR_1 ) ) )  walk . METHOD_2 ( walk . parseCommit ( VAR_1 ) ) ( FOR-EACH FOR-EACH ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ( IN walk ) IN walk ( BLOCK BLOCK (  walk . METHOD_3 ( commit ) )  walk . METHOD_3 ( commit ) (  METHOD_4 ( commit ) )  METHOD_4 ( commit ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_5 ( ) )  METHOD_5 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.PatchSetApproval> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME VAR_2 ) NAME VAR_2 ( IN approvals . METHOD_6 ( ) . values ( ) ) IN approvals . METHOD_6 ( ) . values ( ) ( BLOCK BLOCK (  java.util.Collections . METHOD_7 ( ( ( java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > ) ( VAR_2 ) ) , VAR_3 ) )  java.util.Collections . METHOD_7 ( ( ( java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > ) ( VAR_2 ) ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) COND ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( VAR_1 . METHOD_1 ( ) ) && ( METHOD_4 ( ) . getProject ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; )  return ( VAR_1 . METHOD_1 ( ) ) && ( METHOD_4 ( ) . getProject ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 instanceof TYPE_2 ) ) COND ! ( VAR_1 instanceof TYPE_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ( ! ( name . equals ( VAR_2 . name ) ) ) || ( ( VAR_3 ) != ( VAR_4 ) ) ) COND ( ! ( name . equals ( VAR_2 . name ) ) ) || ( ( VAR_3 ) != ( VAR_4 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( VAR_2 . METHOD_1 ( ) ) ) ; )  return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( VAR_2 . METHOD_1 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) (  display ( result ) )  display ( result ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; display ( result ) ; } } ) )  TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; display ( result ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME format ) NAME format ( BLOCK BLOCK ( IF IF ( COND ( value ) == ( ( short ) ( 0 ) ) ) COND ( value ) == ( ( short ) ( 0 ) ) ( THEN THEN (  return CHAR_1 + ( name ) ; )  return CHAR_1 + ( name ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( value ) == ( ( short ) ( 1 ) ) ) COND ( value ) == ( ( short ) ( 1 ) ) ( THEN THEN (  return name ; )  return name ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( value ) < 0 ) COND ( value ) < 0 ( THEN THEN (  return ( name ) + ( value ) ; )  return ( name ) + ( value ) ; ) THEN THEN ( ELSE ELSE (  return ( ( name ) + CHAR_2 ) + ( value ) ; )  return ( ( name ) + CHAR_2 ) + ( value ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( id . get ( ) ) != 0 ) COND ( id . get ( ) ) != 0 ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  TYPE_4 . METHOD_2 ( id . getParentKey ( ) . get ( ) , path ) . view ( STRING_2 ) . get ( VAR_1 ) )  TYPE_4 . METHOD_2 ( id . getParentKey ( ) . get ( ) , path ) . view ( STRING_2 ) . get ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = VAR_1 . change ( ) ) INIT = VAR_1 . change ( ) ) VAR VAR ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_2 ) NAME VAR_2 ( INIT = c . currentPatchSetId ( ) ) INIT = c . currentPatchSetId ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME p ) NAME p ( IN VAR_1 . approvals ( ) ) IN VAR_1 . approvals ( ) ( BLOCK BLOCK ( IF IF ( COND ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ) COND ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ) INIT = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 class ) ) INIT = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 class ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 . name ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_3 . name ) . isEqualTo ( VAR_1 ) ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.AccountGroup ) TYPE com.google.gerrit.reviewdb.client.AccountGroup ( NAME group ) NAME group ( INIT = VAR_5 . get ( new TYPE_3 . NameKey ( VAR_1 ) ) ) INIT = VAR_5 . get ( new TYPE_3 . NameKey ( VAR_1 ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( group ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( group ) . METHOD_5 ( ) (  TYPE_4 . METHOD_6 ( group , VAR_3 ) )  TYPE_4 . METHOD_6 ( group , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_2 ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_3 ) ) INIT = util . user ( VAR_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = util . user ( VAR_1 , VAR_3 ) ) INIT = util . user ( VAR_1 , VAR_3 ) ) VAR VAR (  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) (  METHOD_4 ( STRING_5 , d . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) )  METHOD_4 ( STRING_5 , d . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME VAR_1 ) NAME VAR_1 ( IN schema . METHOD_2 ( cd , VAR_2 ) ) IN schema . METHOD_2 ( cd , VAR_2 ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) != null ) COND ( VAR_1 . METHOD_3 ( ) ) != null ( THEN THEN (  add ( result , VAR_1 ) )  add ( result , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Id ) TYPE TYPE_3.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4.ReviewDb ) TYPE TYPE_4.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( result . change , VAR_4 . getId ( ) , VAR_1 , VAR_2 , db , VAR_3 ) )  METHOD_1 ( result . change , VAR_4 . getId ( ) , VAR_1 , VAR_2 , db , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) )  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) (  assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_3 ) ) )  assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_3 ) ) (  assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_5 ) ) )  assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_5 ) ) (  assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) )  assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) (  METHOD_3 ( VAR_1 , VAR_2 , STRING_5 , project ) )  METHOD_3 ( VAR_1 , VAR_2 , STRING_5 , project ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = METHOD_4 ( VAR_3 ) ) INIT = METHOD_4 ( VAR_3 ) ) VAR VAR (  in . branch = STRING_1 )  in . branch = STRING_1 (  METHOD_5 ( in , VAR_4 class , STRING_6 ) )  METHOD_5 ( in , VAR_4 class , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cm ) NAME cm ) VAR VAR (  cm = VAR_1 . create ( change ) )  cm = VAR_1 . create ( change ) (  cm . METHOD_1 ( me ) )  cm . METHOD_1 ( me ) (  cm . METHOD_2 ( ps , info ) )  cm . METHOD_2 ( ps , info ) (  cm . METHOD_3 ( reviewers ) )  cm . METHOD_3 ( reviewers ) (  cm . METHOD_4 ( VAR_2 ) )  cm . METHOD_4 ( VAR_2 ) (  cm . METHOD_5 ( ) )  cm . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) )  VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( VAR_2 )  VAR_1 . METHOD_3 ( VAR_2 (  new TYPE_2 ( VAR_3 , false ) ) )  new TYPE_2 ( VAR_3 , false ) ) (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_4 . METHOD_7 ( cd ) )  VAR_4 . METHOD_7 ( cd ) (  VAR_4 . METHOD_7 ( cd ) )  VAR_4 . METHOD_7 ( cd ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) )  ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public void run ( ) { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } } ; )  return new TYPE_1 ( ) { public void run ( ) { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } } ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_6 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) )  ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public void run ( ) { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } } ; )  return new TYPE_1 ( ) { public void run ( ) { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } } ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public void run ( ) { } } ; )  return new TYPE_1 ( ) { public void run ( ) { } } ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN com.google.gerrit.reviewdb.client.PatchSet ) RETURN com.google.gerrit.reviewdb.client.PatchSet ( NAME patch ) NAME patch ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) != null ) && ( VAR_1 . getId ( ) . equals ( psId ) ) ) COND ( ( VAR_1 ) != null ) && ( VAR_1 . getId ( ) . equals ( psId ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( IN METHOD_1 ( ) ) IN METHOD_1 ( ) ( BLOCK BLOCK ( IF IF ( COND ps . getId ( ) . equals ( psId ) ) COND ps . getId ( ) . equals ( psId ) ( THEN THEN (  return ps ; )  return ps ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( args . length ) > 1 ) COND ( args . length ) > 1 ( THEN THEN (  return ( VAR_2 + STRING_1 ) + ( args [ 1 ] ) ; )  return ( VAR_2 + STRING_1 ) + ( args [ 1 ] ) ; ) THEN THEN ( ELSE ELSE (  return VAR_2 ; )  return VAR_2 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ( INIT = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  account . METHOD_3 ( name ) )  account . METHOD_3 ( name ) (  account . METHOD_4 ( email ) )  account . METHOD_4 ( email ) (  return new TYPE_1 ( new TYPE_3 ( VAR_2 ) , account , java.util.Collections . METHOD_5 ( ) , java.util.Collections . METHOD_5 ( ) , new TYPE_4 < > ( ) ) ; )  return new TYPE_1 ( new TYPE_3 ( VAR_2 ) , account , java.util.Collections . METHOD_5 ( ) , java.util.Collections . METHOD_5 ( ) , new TYPE_4 < > ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
