( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  db . create ( ) )  db . create ( ) ( VAR VAR ( TYPE TYPE_2.ProjectConfig ) TYPE TYPE_2.ProjectConfig ( NAME c ) NAME c ( INIT = new TYPE_2 . ProjectConfig ( VAR_1 ) ) INIT = new TYPE_2 . ProjectConfig ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  c . METHOD_3 ( repo ) )  c . METHOD_3 ( repo ) (  return new TYPE_1 ( TYPE_3 . METHOD_4 ( c . METHOD_5 ( ) . values ( ) ) ) ; )  return new TYPE_1 ( TYPE_3 . METHOD_4 ( c . METHOD_5 ( ) . values ( ) ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME user ) NAME user ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  user . METHOD_3 ( ) )  user . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME change ) NAME change ( INIT = changes . METHOD_1 ( VAR_2 , id ) ) INIT = changes . METHOD_1 ( VAR_2 , id ) ) VAR VAR ( IF IF ( COND user . METHOD_4 ( ) . contains ( change . getChange ( ) . getId ( ) ) ) COND user . METHOD_4 ( ) . contains ( change . getChange ( ) . getId ( ) ) ( THEN THEN (  return new TYPE_7 ( user , change ) ; )  return new TYPE_7 ( user , change ) ; ) THEN THEN ) IF IF (  throw new TYPE_4 ( id ) ; )  throw new TYPE_4 ( id ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  user . METHOD_5 ( ) )  user . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( METHOD_2 ( ) ) )  r . append ( METHOD_2 ( ) ) (  r . append ( STRING_1 ) )  r . append ( STRING_1 ) (  return r . toString ( ) ; )  return r . toString ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( config ) )  super . METHOD_1 ( config ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = config . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = config . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  base = ( TYPE_3 . METHOD_4 ( path ) ) + STRING_1 )  base = ( TYPE_3 . METHOD_4 ( path ) ) + STRING_1 ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( VAR_1 ) ) INIT = METHOD_5 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  plugins . put ( VAR_1 . getName ( ) , VAR_3 ) )  plugins . put ( VAR_1 . getName ( ) , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 = null )  VAR_2 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; )  return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( change.getId ( ) , e ) ; )  throw new TYPE_3 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( change.getId ( ) , e ) ; )  throw new TYPE_3 ( change.getId ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = getValue ( ) ) INIT = getValue ( ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_1 ( VAR_1 ) ) COND TYPE_1 . METHOD_1 ( VAR_1 ) ( THEN THEN (  return ( ( METHOD_2 ( ) ) + STRING_1 ) + VAR_1 ; )  return ( ( METHOD_2 ( ) ) + STRING_1 ) + VAR_1 ; ) THEN THEN ( ELSE ELSE (  return ( ( ( METHOD_2 ( ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ; )  return ( ( ( METHOD_2 ( ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME s ) NAME s ( IN METHOD_4 ( ) ) IN METHOD_4 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( s . METHOD_2 ( ) ) )  VAR_2 . METHOD_5 ( s . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_2 = new TYPE_2 ( new TYPE_3 . Factory ( ) . METHOD_2 ( ) ) )  VAR_2 = new TYPE_2 ( new TYPE_3 . Factory ( ) . METHOD_2 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_4<?,?> ) TYPE TYPE_4<?,?> ( NAME p ) NAME p ( IN VAR_3 . values ( ) ) IN VAR_3 . values ( ) ( BLOCK BLOCK (  p . bind ( VAR_2 . METHOD_3 ( p . getName ( ) ) ) )  p . bind ( VAR_2 . METHOD_3 ( p . getName ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ( INIT = VAR_1 . get ( ) . METHOD_2 ( ) ) INIT = VAR_1 . get ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( ctl . METHOD_3 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) ) COND ! ( ctl . METHOD_3 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) ( THEN THEN (  throw new TYPE_1 ( java.lang.String.format ( STRING_2 , VAR_1 . get ( ) . METHOD_4 ( ) , new TYPE_3 ( ) . METHOD_5 ( ) ) ) ; )  throw new TYPE_1 ( java.lang.String.format ( STRING_2 , VAR_1 . get ( ) . METHOD_4 ( ) , new TYPE_3 ( ) . METHOD_5 ( ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.AccountGroup ) TYPE TYPE_2.AccountGroup ( NAME group ) NAME group ( INIT = db . METHOD_1 ( ) . get ( VAR_1 ) ) INIT = db . METHOD_1 ( ) . get ( VAR_1 ) ) VAR VAR (  METHOD_2 ( db , group ) )  METHOD_2 ( db , group ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( group . getId ( ) ) ) INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( group . getId ( ) ) ) VAR VAR (  d . METHOD_5 ( db , new TYPE_6 ( db ) , group , VAR_2 ) )  d . METHOD_5 ( db , new TYPE_6 ( db ) , group , VAR_2 ) (  return d ; )  return d ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  java.util.Collections . METHOD_2 ( VAR_1 ) )  java.util.Collections . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ) INIT = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ) VAR VAR (  return VAR_2 . to ( git , ref ) ; )  return VAR_2 . to ( git , ref ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = insert ( METHOD_3 ( repo , null , null , null , null ) ) ) INIT = insert ( METHOD_3 ( repo , null , null , null , null ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = change . getKey ( ) . get ( ) ) INIT = change . getKey ( ) . get ( ) ) VAR VAR (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= INT_1 ) COND i <= INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) INIT = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) VAR VAR (  METHOD_4 ( VAR_1 , change ) )  METHOD_4 ( VAR_1 , change ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_2 ( 0 ) ) INIT = VAR_1 . METHOD_2 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.AccountGroup ) TYPE TYPE_3.AccountGroup ( NAME group ) NAME group ( INIT = VAR_2 . get ( new TYPE_4 . NameKey ( n ) ) ) INIT = VAR_2 . get ( new TYPE_4 . NameKey ( n ) ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_2 ( VAR_3 , ( ( STRING_1 + n ) + STRING_2 ) ) ; )  throw new TYPE_2 ( VAR_3 , ( ( STRING_1 + n ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_3 ( group . getId ( ) ) )  VAR_4 . METHOD_3 ( group . getId ( ) ) (  return 1 ; )  return 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) )  VAR_2 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) (  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_6 ) )  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.junit.Assert . METHOD_3 ( STRING_1 ) )  org.junit.Assert . METHOD_3 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ) INIT = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . toString ( VAR_1 ) ) INIT = TYPE_5 . toString ( VAR_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME display ) NAME display ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.Branch> ) TYPE java.util.List<TYPE_1.Branch> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = false )  VAR_1 = false ( WHILE WHILE ( COND 1 < ( table . METHOD_1 ( ) ) ) COND 1 < ( table . METHOD_1 ( ) ) ( BLOCK BLOCK (  table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) )  table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ) BLOCK BLOCK ) WHILE WHILE ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Branch ) TYPE TYPE_1.Branch ( NAME VAR_2 ) NAME VAR_2 ( IN result ) IN result ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ( INIT = table . METHOD_1 ( ) ) INIT = table . METHOD_1 ( ) ) VAR VAR (  table . METHOD_3 ( row ) )  table . METHOD_3 ( row ) (  METHOD_4 ( row ) )  METHOD_4 ( row ) (  METHOD_5 ( row , VAR_2 ) )  METHOD_5 ( row , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN project . METHOD_2 ( ) ) IN project . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME cfg ) NAME cfg ( INIT = VAR_2 . METHOD_3 ( p , VAR_3 ) ) INIT = VAR_2 . METHOD_3 ( p , VAR_3 ) ) VAR VAR ( IF IF ( COND cfg . METHOD_4 ( VAR_4 ) . contains ( VAR_1 ) ) COND cfg . METHOD_4 ( VAR_4 ) . contains ( VAR_1 ) ( THEN THEN (  return new TYPE_4 ( cfg ) . METHOD_1 ( VAR_1 ) ; )  return new TYPE_4 ( cfg ) . METHOD_1 ( VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_1 ( VAR_1 ) ; )  return new TYPE_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( project , branch , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) )  TYPE_1 . METHOD_2 ( project , branch , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = METHOD_2 ( name ) ) INIT = METHOD_2 ( name ) ) VAR VAR (  return VAR_1 . get ( p , METHOD_3 ( p ) ) ; )  return VAR_1 . get ( p , METHOD_3 ( p ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) )  VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_2 ( ) . METHOD_6 ( ) ) INIT = VAR_5 . get ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_2 ( ) . METHOD_6 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_4 . METHOD_7 ( ) ) COND VAR_4 . METHOD_7 ( ) ( BLOCK BLOCK (  VAR_3 . add ( VAR_4 . METHOD_5 ( ) ) )  VAR_3 . add ( VAR_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) WHILE WHILE (  org.junit.Assert.assertEquals ( VAR_3 , TYPE_3 . METHOD_8 ( VAR_2 ) ) )  org.junit.Assert.assertEquals ( VAR_3 , TYPE_3 . METHOD_8 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_1 , id . get ( ) ) ; )  return new TYPE_1 ( VAR_1 , id . get ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE CHAR_1 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE CHAR_1 ( CASE CHAR_2 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE CHAR_2 ( CASE CHAR_3 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE CHAR_3 ( CASE CHAR_4 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE CHAR_4 ( CASE CHAR_5 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE CHAR_5 ( CASE CHAR_6 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE CHAR_6 ( CASE CHAR_7 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE CHAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK ( IF IF ( COND ( ( ( CHAR_8 <= VAR_1 ) && ( VAR_1 <= CHAR_9 ) ) || ( ( CHAR_10 <= VAR_1 ) && ( VAR_1 <= CHAR_11 ) ) ) || ( ( CHAR_12 <= VAR_1 ) && ( VAR_1 <= CHAR_13 ) ) ) COND ( ( ( CHAR_8 <= VAR_1 ) && ( VAR_1 <= CHAR_9 ) ) || ( ( CHAR_10 <= VAR_1 ) && ( VAR_1 <= CHAR_11 ) ) ) || ( ( CHAR_12 <= VAR_1 ) && ( VAR_1 <= CHAR_13 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  return true ; )  return true ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME c ) NAME c ( INIT = getChange ( changeId , VAR_1 ) ) INIT = getChange ( changeId , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( STRING_1 ) ) INIT = VAR_3 . get ( STRING_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) (  com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( 2 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( 2 ) (  com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) )  com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ( INIT = METHOD_3 ( in ) ) INIT = METHOD_3 ( in ) ) VAR VAR (  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) (  assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 0 ) , INT_1 ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) )  assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 0 ) , INT_1 ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN AccountGroup.Id ) RETURN AccountGroup.Id ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( ) ) INIT = VAR_2 . create ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Id ) TYPE TYPE_4.Id ( NAME me ) NAME me ( INIT = user . getAccountId ( ) ) INIT = user . getAccountId ( ) ) VAR VAR (  return VAR_1 . METHOD_2 ( VAR_3 , null , null , me ) ; )  return VAR_1 . METHOD_2 ( VAR_3 , null , null , me ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_2 . projects ( ) . create ( ( VAR_1 + STRING_2 ) ) . get ( ) ) INIT = VAR_2 . projects ( ) . create ( ( VAR_1 + STRING_2 ) ) . get ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) (  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) )  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) (  METHOD_4 ( VAR_1 , STRING_3 ) )  METHOD_4 ( VAR_1 , STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME base ) NAME base ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_5 ( path ) ) )  VAR_2 . add ( new TYPE_5 ( path ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) )  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) )  VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ) SWITCH SWITCH (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) (  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_3 , VAR_11 ) . METHOD_6 ( VAR_2 ) )  assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_3 , VAR_11 ) . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ) INIT = VAR_2 . create ( cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 . status ) != ( VAR_3 ) ) COND ( VAR_1 . status ) != ( VAR_3 ) ( THEN THEN (  throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; )  throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; ) THEN THEN ) IF IF (  return VAR_1 . type ; )  return VAR_1 . type ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) + STRING_2 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) ) )  assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) + STRING_2 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.junit.Assert . METHOD_3 ( STRING_1 ) )  org.junit.Assert . METHOD_3 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ) INIT = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . toString ( VAR_1 ) ) INIT = TYPE_5 . toString ( VAR_1 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME me ) NAME me ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND me == null ) COND me == null ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( me ) ) INIT = new TYPE_2 ( me ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . getValue ( VAR_5 ) ) INIT = VAR_3 . getValue ( VAR_5 ) ) VAR VAR (  return VAR_4 != null ? VAR_4 : STRING_1 ; )  return VAR_4 != null ? VAR_4 : STRING_1 ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND info . METHOD_1 ( ) ) COND info . METHOD_1 ( ) ( THEN THEN (  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) ) )  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND info . METHOD_3 ( ) ) COND info . METHOD_3 ( ) ( THEN THEN (  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) ) )  TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND info . METHOD_4 ( ) ) COND info . METHOD_4 ( ) ( THEN THEN (  TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) ) )  TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( res , VAR_3 ) )  METHOD_2 ( res , VAR_3 ) (  res . METHOD_3 ( VAR_4 ) )  res . METHOD_3 ( VAR_4 ) ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_6 . METHOD_4 ( req , res ) ) INIT = TYPE_6 . METHOD_4 ( req , res ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  METHOD_5 ( req ) . create ( ) . METHOD_6 ( VAR_1 , VAR_2 , VAR_5 ) )  METHOD_5 ( req ) . create ( ) . METHOD_6 ( VAR_1 , VAR_2 , VAR_5 ) (  VAR_5 . METHOD_7 ( CHAR_1 ) )  VAR_5 . METHOD_7 ( CHAR_1 ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) )  METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) (  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) )  METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) )  METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ) COND ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 . get ( ) ) COND VAR_3 . get ( ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_6 ) ) INIT = METHOD_5 ( VAR_6 ) ) VAR VAR ( IF IF ( COND VAR_5 <= 0 ) COND VAR_5 <= 0 ( THEN THEN (  return VAR_7 ; )  return VAR_7 ; ) THEN THEN ( ELSE ELSE (  return VAR_8 ; )  return VAR_8 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ( INIT = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  return new TYPE_3 ( key , VAR_4 , project , repo ) . METHOD_2 ( ) ; )  return new TYPE_3 ( key , VAR_4 , project , repo ) . METHOD_2 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) )  VAR_5 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME VAR_1 ) NAME VAR_1 ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 . get ( ) ) )  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 . get ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = METHOD_3 ( STRING_2 ) ) INIT = METHOD_3 ( STRING_2 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_3> ) TYPE java.util.Map<java.lang.String,TYPE_3> ( NAME result ) NAME result ( INIT = TYPE_4 . METHOD_5 ( r ) ) INIT = TYPE_4 . METHOD_5 ( r ) ) VAR VAR (  TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_4 , VAR_1 , project ) , result . values ( ) ) )  TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_4 , VAR_1 , project ) , result . values ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ! ( METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( METHOD_4 ( db ) ) ) || ( ! ( METHOD_5 ( VAR_1 . METHOD_6 ( db , notes ) , db ) ) ) ) COND ( ( ! ( METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( METHOD_4 ( db ) ) ) || ( ! ( METHOD_5 ( VAR_1 . METHOD_6 ( db , notes ) , db ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_7 ( ) ) COND METHOD_7 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return METHOD_2 ( ) . METHOD_1 ( ) ; )  return METHOD_2 ( ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 . Collections < java.lang.String , java.util.ArrayList < TYPE_2 > > METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 . Collections < java.lang.String , java.util.ArrayList < TYPE_2 > > METHOD_3 ( ) ) (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , TYPE_3 . of ( STRING_1 , TYPE_4 . METHOD_4 ( VAR_5 , VAR_6 ) ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , TYPE_3 . of ( STRING_1 , TYPE_4 . METHOD_4 ( VAR_5 , VAR_6 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME id ) NAME id ( INIT = res . getAccountId ( ) ) INIT = res . getAccountId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Key ) TYPE TYPE_3.Key ( NAME VAR_2 ) NAME VAR_2 ( INIT = res . METHOD_2 ( ) ) INIT = res . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_4 . METHOD_3 ( key ) )  VAR_4 . METHOD_3 ( key ) (  key = null )  key = null (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF (  key = VAR_4 . METHOD_4 ( id ) )  key = VAR_4 . METHOD_4 ( id ) (  VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) )  VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . get ( ) )  VAR_1 . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_1 ( project , e ) )  METHOD_1 ( project , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . set ( false ) )  VAR_2 . set ( false ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_2 ( project , e ) )  METHOD_2 ( project , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_2 ( project , e ) )  METHOD_2 ( project , e ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_3 . update ( 1 ) )  VAR_3 . update ( 1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  event . METHOD_2 ( ) )  event . METHOD_2 ( ) (  event . METHOD_3 ( ) )  event . METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND TYPE_2 . METHOD_5 ( ) ) COND TYPE_2 . METHOD_5 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) INIT = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) VAR VAR (  VAR_1 . METHOD_8 ( VAR_2 ) )  VAR_1 . METHOD_8 ( VAR_2 ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_10 ) NAME METHOD_10 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  TYPE_4 . METHOD_9 ( VAR_1 , new TYPE_5 < TYPE_6 > ( ) { public void METHOD_10 ( TYPE_7 VAR_3 ) { } public void onSuccess ( TYPE_6 result ) { } } ) )  TYPE_4 . METHOD_9 ( VAR_1 , new TYPE_5 < TYPE_6 > ( ) { public void METHOD_10 ( TYPE_7 VAR_3 ) { } public void onSuccess ( TYPE_6 result ) { } } ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<TYPE_1> ) RETURN java.util.Set<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME result ) NAME result ( INIT = new TYPE_3 < TYPE_1 > ( change . METHOD_2 ( ) . length ( ) ) ) INIT = new TYPE_3 < TYPE_1 > ( change . METHOD_2 ( ) . length ( ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( change . METHOD_2 ( ) . length ( ) ) ) COND i < ( change . METHOD_2 ( ) . length ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  result . add ( change . METHOD_2 ( ) . get ( i ) . METHOD_3 ( ) ) )  result . add ( change . METHOD_2 ( ) . get ( i ) . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR FOR (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , STRING_1 , 1 ) ) INIT = METHOD_2 ( VAR_2 , STRING_1 , 1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_2 , STRING_2 , 1 ) ) INIT = METHOD_2 ( VAR_2 , STRING_2 , 1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( TYPE_1 . create ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) , VAR_4 . METHOD_4 ( change , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) ) )  org.junit.Assert.assertEquals ( TYPE_1 . create ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) , VAR_4 . METHOD_4 ( change , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( r . METHOD_2 ( ) . METHOD_3 ( ) ) == 0 ) COND ( r . METHOD_2 ( ) . METHOD_3 ( ) ) == 0 ( THEN THEN (  return TYPE_4 . METHOD_4 ( r . METHOD_5 ( ) . getName ( ) , TYPE_5 . METHOD_6 ( r . METHOD_7 ( ) ) , VAR_1 , true , true ) ; )  return TYPE_4 . METHOD_4 ( r . METHOD_5 ( ) . getName ( ) , TYPE_5 . METHOD_6 ( r . METHOD_7 ( ) ) , VAR_1 , true , true ) ; ) THEN THEN ) IF IF (  throw new TYPE_3 ( ( STRING_1 + r ) ) ; )  throw new TYPE_3 ( ( STRING_1 + r ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = TYPE_1 . METHOD_2 ( name ) ) INIT = TYPE_1 . METHOD_2 ( name ) ) VAR VAR (  METHOD_3 ( e . METHOD_4 ( ) ) )  METHOD_3 ( e . METHOD_4 ( ) ) (  assertEquals ( name , e . METHOD_5 ( ) ) )  assertEquals ( name , e . METHOD_5 ( ) ) (  METHOD_6 ( VAR_1 , e . METHOD_7 ( ) ) )  METHOD_6 ( VAR_1 , e . METHOD_7 ( ) ) (  METHOD_6 ( VAR_2 , e . METHOD_8 ( ) ) )  METHOD_6 ( VAR_2 , e . METHOD_8 ( ) ) (  METHOD_9 ( e . METHOD_10 ( ) . isEmpty ( ) ) )  METHOD_9 ( e . METHOD_10 ( ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<com.google.gerrit.server.query.change.ChangeData> ) RETURN java.util.List<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = ( VAR_2 . METHOD_2 ( ) ) - 1 ) INIT = ( VAR_2 . METHOD_2 ( ) ) - 1 ) VAR VAR (  TYPE_1 . METHOD_3 ( ( ( VAR_1 . size ( ) ) <= n ) , STRING_1 , n ) )  TYPE_1 . METHOD_3 ( ( ( VAR_1 . size ( ) ) <= n ) , STRING_1 , n ) (  return query ( TYPE_2 . METHOD_4 ( TYPE_3 . project ( project ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_3 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; )  return query ( TYPE_2 . METHOD_4 ( TYPE_3 . project ( project ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_3 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME r ) NAME r ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME w ) NAME w ( IN db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , psId ) ) IN db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , psId ) ( BLOCK BLOCK (  r . add ( w . getKey ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  r . add ( w . getKey ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> ) TYPE java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME r ) NAME r ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  r . add ( new TYPE_4 ( args , id ) ) )  r . add ( new TYPE_4 ( args , id ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_3 ( new java.lang.String [ ] { STRING_1 , STRING_2 } ) ) INIT = TYPE_1 . METHOD_3 ( new java.lang.String [ ] { STRING_1 , STRING_2 } ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME m ) NAME m ( INIT = TYPE_3 . METHOD_4 ( repo , c , VAR_1 ) ) INIT = TYPE_3 . METHOD_4 ( repo , c , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( 0 , m . size ( ) ) )  org.junit.Assert.assertEquals ( 0 , m . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; )  return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . to ( VAR_2 class ) )  bind ( VAR_1 class ) . to ( VAR_2 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  bind ( VAR_3 class ) . to ( VAR_4 class ) )  bind ( VAR_3 class ) . to ( VAR_4 class ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = VAR_2 . METHOD_1 ( VAR_3 , id ) ) INIT = VAR_2 . METHOD_1 ( VAR_3 , id ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ( IN p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) IN p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) COND VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ( THEN THEN (  return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; )  return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_4 ( id ) ; )  throw new TYPE_4 ( id ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME m ) NAME m ( INIT = TYPE_2 . METHOD_3 ( repo , c ) ) INIT = TYPE_2 . METHOD_3 ( repo , c ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . of ( STRING_1 , STRING_2 ) ) INIT = TYPE_3 . of ( STRING_1 , STRING_2 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME message ) NAME message ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctx ) NAME ctx ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_1 ( psId ) )  TYPE_3 . METHOD_1 ( psId ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_4 . METHOD_2 ( ctx . METHOD_3 ( ) ) )  VAR_2 = TYPE_4 . METHOD_2 ( ctx . METHOD_3 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( INIT = new TYPE_1 ( new TYPE_1 . Key ( psId . getParentKey ( ) , VAR_2 ) , ctx . METHOD_4 ( ) . getAccountId ( ) , ctx . METHOD_5 ( ) , psId ) ) INIT = new TYPE_1 ( new TYPE_1 . Key ( psId . getParentKey ( ) , VAR_2 ) , ctx . METHOD_4 ( ) . getAccountId ( ) , ctx . METHOD_5 ( ) , psId ) ) VAR VAR (  m . METHOD_6 ( VAR_1 ) )  m . METHOD_6 ( VAR_1 ) (  return m ; )  return m ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected synchronized ) MODIFIER protected synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) || ( ( METHOD_3 ( ) ) && ( VAR_3 . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) COND ( METHOD_2 ( ) ) || ( ( METHOD_3 ( ) ) && ( VAR_3 . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ( THEN THEN (  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_6 ( ) )  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  VAR_4 = VAR_5 . submit ( VAR_2 ) )  VAR_4 = VAR_5 . submit ( VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( commit . getMessage ( ) ) == null ) || ( STRING_1 . equals ( commit . getMessage ( ) ) ) ) COND ( ( commit . getMessage ( ) ) == null ) || ( STRING_1 . equals ( commit . getMessage ( ) ) ) ( THEN THEN (  commit . METHOD_2 ( STRING_2 ) )  commit . METHOD_2 ( STRING_2 ) ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 , cfg ) )  METHOD_3 ( VAR_1 , cfg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_3 ( psId ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_3 ( psId ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . topic ( psId . getParentKey ( ) . get ( ) , input . getValue ( ) . METHOD_2 ( ) , new TYPE_3 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( psId ) ) ; } } ) )  TYPE_2 . topic ( psId . getParentKey ( ) . get ( ) , input . getValue ( ) . METHOD_2 ( ) , new TYPE_3 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( psId ) ) ; } } ) (  METHOD_4 ( null ) )  METHOD_4 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ( ) ) <= ( VAR_2 ) ) COND ( VAR_1 . length ( ) ) <= ( VAR_2 ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( CHAR_1 ) ) INIT = VAR_1 . METHOD_2 ( CHAR_1 ) ) VAR VAR (  return VAR_3 >= 0 ? STRING_1 + ( VAR_1 . METHOD_3 ( VAR_3 ) ) : VAR_1 ; )  return VAR_3 >= 0 ? STRING_1 + ( VAR_1 . METHOD_3 ( VAR_3 ) ) : VAR_1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( rw , VAR_1 , VAR_2 ) ) INIT = METHOD_3 ( rw , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) )  VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ( INIT = TYPE_2 . METHOD_1 ( cd ) ) INIT = TYPE_2 . METHOD_1 ( cd ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_1 . delete ( id ) , VAR_2 . delete ( id ) ) . get ( ) )  TYPE_3 . METHOD_2 ( VAR_1 . delete ( id ) , VAR_2 . delete ( id ) ) . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME close ) NAME close ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( log ) != null ) COND ( log ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  log . close ( ) )  log . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME err ) NAME err ( BLOCK BLOCK (  throw new TYPE_1 . OrmException ( STRING_1 , err ) ; )  throw new TYPE_1 . OrmException ( STRING_1 , err ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  log = null )  log = null ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_1 ( ) ) COND VAR_1 . METHOD_1 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_10 ) TYPE TYPE_10 ( NAME in ) NAME in ( INIT = new TYPE_10 ( ) ) INIT = new TYPE_10 ( ) ) VAR VAR (  VAR_2 = ( input != null ) ? VAR_3 : null )  VAR_2 = ( input != null ) ? VAR_3 : null (  return VAR_4 . get ( ) . apply ( VAR_1 , in ) ; )  return VAR_4 . get ( ) . apply ( VAR_1 , in ) ; ) THEN THEN ) IF IF (  throw new TYPE_7 ( ) ; )  throw new TYPE_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_2 . METHOD_1 ( ) ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) COND ( ! ( VAR_2 . METHOD_1 ( ) ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN (  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_3 ( ) , getName ( ) ) ) ; )  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_3 ( ) , getName ( ) ) ) ; ) THEN THEN ) IF IF (  VAR_1 = true )  VAR_1 = true ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) && ( user . get ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( METHOD_2 ( ) ) && ( user . get ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) )  new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) )  VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_3 . METHOD_3 ( new TYPE_4 ( STRING_2 , STRING_3 ) ) )  VAR_3 . METHOD_3 ( new TYPE_4 ( STRING_2 , STRING_3 ) ) (  VAR_3 . METHOD_4 ( new TYPE_5 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) , TYPE_7 . name ( ) ) ) )  VAR_3 . METHOD_4 ( new TYPE_5 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) , TYPE_7 . name ( ) ) ) ) THEN THEN ) IF IF (  return METHOD_7 ( VAR_3 ) ; )  return METHOD_7 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ) TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( INT_1 ) ) INIT = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( INT_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Change.Status ) TYPE com.google.gerrit.reviewdb.client.Change.Status ( NAME e ) NAME e ( IN TYPE_3 . values ( ) ) IN TYPE_3 . values ( ) ( BLOCK BLOCK ( IF IF ( COND e . METHOD_2 ( ) ) COND e . METHOD_2 ( ) ( THEN THEN (  r . add ( new TYPE_4 ( VAR_1 , e ) ) )  r . add ( new TYPE_4 ( VAR_1 , e ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; )  return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( admin ) )  METHOD_3 ( admin ) (  VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . submit ( ) )  VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . submit ( ) (  VAR_4 . METHOD_6 ( ) )  VAR_4 . METHOD_6 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( TRY TRY ( BLOCK BLOCK (  project ( ) . METHOD_4 ( input ) )  project ( ) . METHOD_4 ( input ) (  METHOD_5 ( STRING_2 ) )  METHOD_5 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) )  com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME id ) NAME id ( INIT = ( VAR_1 . METHOD_2 ( ) ) ? VAR_2 . METHOD_3 ( ) : VAR_1 . METHOD_3 ( ) ) INIT = ( VAR_1 . METHOD_2 ( ) ) ? VAR_2 . METHOD_3 ( ) : VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( new TYPE_3 ( ) . METHOD_4 ( TYPE_4 . edit ( ) ) , ( STRING_1 + ( TYPE_5 . METHOD_5 ( id , path ) ) ) ) ) INIT = new TYPE_2 ( new TYPE_3 ( ) . METHOD_4 ( TYPE_4 . edit ( ) ) , ( STRING_1 + ( TYPE_5 . METHOD_5 ( id , path ) ) ) ) ) VAR VAR (  VAR_3 . METHOD_6 ( TYPE_6 . edit ( ) ) )  VAR_3 . METHOD_6 ( TYPE_6 . edit ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME p ) NAME p ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( ( p . getRevision ( ) ) != null ) && ( ( p . getRevision ( ) . get ( ) ) != null ) ) COND ( ( p . getRevision ( ) ) != null ) && ( ( p . getRevision ( ) . get ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ( INIT = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( p . getRevision ( ) . get ( ) ) ) INIT = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( p . getRevision ( ) . get ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_4 ( id ) ) == 0 ) COND ( VAR_2 . METHOD_4 ( id ) ) == 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2<?,?>> ) TYPE TYPE_1<TYPE_2<?,?>> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( e . METHOD_2 ( ) ) ) COND STRING_1 . equals ( e . METHOD_2 ( ) ) ( THEN THEN (  return e . METHOD_3 ( ) ; )  return e . METHOD_3 ( ) ; ) THEN THEN ( ELSE ELSE (  return java.lang.String.format ( STRING_2 , e . METHOD_2 ( ) , e . METHOD_3 ( ) ) ; )  return java.lang.String.format ( STRING_2 , e . METHOD_2 ( ) , e . METHOD_3 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME change ) NAME change ( INIT = METHOD_3 ( git ) ) INIT = METHOD_3 ( git ) ) VAR VAR (  submit ( change . getChangeId ( ) ) )  submit ( change . getChangeId ( ) ) ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_4 ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_4 ( ) ) (  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_5 ( 0 ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_5 ( 0 ) ) . isEqualTo ( VAR_1 ) (  METHOD_6 ( change . getChangeId ( ) , 1 ) )  METHOD_6 ( change . getChangeId ( ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN com.google.gerrit.reviewdb.client.Change ) RETURN com.google.gerrit.reviewdb.client.Change ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME changeId ) NAME changeId ( INIT = new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ) INIT = new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , changeId , user . METHOD_2 ( ) . getId ( ) , new TYPE_2 . NameKey ( project , STRING_2 ) , TYPE_3 . METHOD_3 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , changeId , user . METHOD_2 ( ) . getId ( ) , new TYPE_2 . NameKey ( project , STRING_2 ) , TYPE_3 . METHOD_3 ( ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( c ) )  TYPE_4 . METHOD_4 ( c ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND user . METHOD_2 ( ) ) COND user . METHOD_2 ( ) ( THEN THEN (  return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; )  return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND user instanceof TYPE_3 ) COND user instanceof TYPE_3 ( THEN THEN (  return STRING_1 + ( ( ( TYPE_3 ) ( user ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; )  return STRING_1 + ( ( ( TYPE_3 ) ( user ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; ) THEN THEN ) IF IF (  return user . toString ( ) ; )  return user . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME index ) NAME index ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ( INIT = METHOD_3 ( in , index , VAR_1 , VAR_3 ) ) INIT = METHOD_3 ( in , index , VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND ( in == out ) || ( out instanceof TYPE_6 ) ) COND ( in == out ) || ( out instanceof TYPE_6 ) ( THEN THEN (  return new TYPE_7 ( index , out , VAR_1 ) ; )  return new TYPE_7 ( index , out , VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND out == null ) COND out == null ( THEN THEN (  return in ; )  return in ; ) THEN THEN ( ELSE ELSE (  return out ; )  return out ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; )  return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN PatchSet.Id ) RETURN PatchSet.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( commit , VAR_2 ) ) INIT = METHOD_2 ( commit , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = VAR_1 . METHOD_3 ( CHAR_1 ) ) INIT = VAR_1 . METHOD_3 ( CHAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( s < 0 ) ? VAR_1 : VAR_1 . METHOD_4 ( 0 , s ) ) INIT = ( s < 0 ) ? VAR_1 : VAR_1 . METHOD_4 ( 0 , s ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME psId ) NAME psId ( INIT = TYPE_3 . METHOD_5 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_3 ) ) VAR VAR ( IF IF ( COND psId == null ) COND psId == null ( THEN THEN (  throw METHOD_6 ( VAR_2 , VAR_3 ) ; )  throw METHOD_6 ( VAR_2 , VAR_3 ) ; ) THEN THEN ) IF IF (  return new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , psId ) ; )  return new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , psId ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_2 , STRING_2 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_3 , STRING_3 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_4 , STRING_4 , VAR_6 ) ) ; )  return new TYPE_2 ( TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_2 , STRING_2 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_3 , STRING_3 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_4 , STRING_4 , VAR_6 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.AccountGroup ) TYPE TYPE_4.AccountGroup ( NAME group ) NAME group ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_3 ( VAR_1 ) ; )  throw new TYPE_3 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( user . get ( ) , group ) ; )  return new TYPE_1 ( user . get ( ) , group ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_3> ) TYPE java.util.Map<java.lang.String,TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 < > ( ) ) INIT = new TYPE_4 < > ( ) ) VAR VAR (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  VAR_2 . put ( STRING_1 , VAR_1 ) )  VAR_2 . put ( STRING_1 , VAR_1 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ) INIT = VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_5 . METHOD_4 ( VAR_3 , VAR_6 class ) ) INIT = VAR_5 . METHOD_4 ( VAR_3 , VAR_6 class ) ) VAR VAR (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_1 ( VAR_1 . METHOD_2 ( change , user . get ( ) ) ) ; )  return METHOD_1 ( VAR_1 . METHOD_2 ( change , user . get ( ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME n ) NAME n ( INIT = TYPE_3 . METHOD_3 ( a , b ) ) INIT = TYPE_3 . METHOD_3 ( a , b ) ) VAR VAR (  assertEquals ( 2 , n . METHOD_4 ( ) ) )  assertEquals ( 2 , n . METHOD_4 ( ) ) (  METHOD_5 ( a , n . METHOD_6 ( 0 ) ) )  METHOD_5 ( a , n . METHOD_6 ( 0 ) ) (  METHOD_5 ( b , n . METHOD_6 ( 1 ) ) )  METHOD_5 ( b , n . METHOD_6 ( 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( STRING_2 , STRING_3 ) ) INIT = new TYPE_3 ( STRING_2 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( STRING_4 , STRING_5 ) ) INIT = new TYPE_3 ( STRING_4 , STRING_5 ) ) VAR VAR (  org.junit.Assert.assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) (  org.junit.Assert.assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) )  METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) (  METHOD_2 ( b , b . append ( new TYPE_3 ( STRING_2 ) ) ) )  METHOD_2 ( b , b . append ( new TYPE_3 ( STRING_2 ) ) ) (  METHOD_2 ( b , b . append ( new TYPE_1 ( ) . append ( STRING_3 ) ) ) )  METHOD_2 ( b , b . append ( new TYPE_1 ( ) . append ( STRING_3 ) ) ) (  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Change ) TYPE TYPE_1.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( change != null ) && ( ( VAR_1 . get ( ) ) != null ) ) COND ( change != null ) && ( ( VAR_1 . get ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( VAR_1 . get ( ) ) )  r . append ( VAR_1 . get ( ) ) (  r . append ( change . getChangeId ( ) ) )  r . append ( change . getChangeId ( ) ) (  return r . toString ( ) ; )  return r . toString ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  return new TYPE_1 ( VAR_2 . group ( 1 ) , STRING_2 , VAR_1 ) ; )  return new TYPE_1 ( VAR_2 . group ( 1 ) , STRING_2 , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_4 ( ( STRING_3 + VAR_1 ) ) ; )  throw new TYPE_4 ( ( STRING_3 + VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  res . METHOD_2 ( VAR_1 ) )  res . METHOD_2 ( VAR_1 ) (  METHOD_3 ( req , res , VAR_2 ) )  METHOD_3 ( req , res , VAR_2 ) (  METHOD_4 ( res ) )  METHOD_4 ( res ) ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME out ) NAME out ( INIT = TYPE_4 . METHOD_5 ( req , res ) ) INIT = TYPE_4 . METHOD_5 ( req , res ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  out . METHOD_6 ( message ) )  out . METHOD_6 ( message ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ) RETURN java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( db . get ( ) , n . notes , VAR_2 ) ; )  return VAR_1 . METHOD_2 ( db . get ( ) , n . notes , VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) )  VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) (  return java.util.Collections . METHOD_3 ( ) ; )  return java.util.Collections . METHOD_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME n ) NAME n ( INIT = TYPE_3 . METHOD_3 ( a , b ) ) INIT = TYPE_3 . METHOD_3 ( a , b ) ) VAR VAR (  assertEquals ( 2 , n . METHOD_4 ( ) ) )  assertEquals ( 2 , n . METHOD_4 ( ) ) (  METHOD_5 ( a , n . METHOD_6 ( 0 ) ) )  METHOD_5 ( a , n . METHOD_6 ( 0 ) ) (  METHOD_5 ( b , n . METHOD_6 ( 1 ) ) )  METHOD_5 ( b , n . METHOD_6 ( 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ) INIT = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . get ( ) ) INIT = VAR_6 . get ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) (  VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) )  VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_4 ( null , account . getId ( ) ) ) INIT = new TYPE_4 ( null , account . getId ( ) ) ) VAR VAR (  VAR_7 . METHOD_5 ( VAR_1 ) )  VAR_7 . METHOD_5 ( VAR_1 ) (  VAR_7 . METHOD_6 ( account ) )  VAR_7 . METHOD_6 ( account ) (  VAR_7 . commit ( VAR_2 ) )  VAR_7 . commit ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME in ) NAME in ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR (  VAR_2 = TYPE_8 . of ( id ) )  VAR_2 = TYPE_8 . of ( id ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = put . get ( ) . apply ( VAR_1 , in ) ) INIT = put . get ( ) . apply ( VAR_1 , in ) ) VAR VAR ( IF IF ( COND ( VAR_3 . size ( ) ) == 1 ) COND ( VAR_3 . size ( ) ) == 1 ( THEN THEN (  return VAR_3 . get ( 0 ) ; )  return VAR_3 . get ( 0 ) ; ) THEN THEN ) IF IF (  throw new TYPE_9 ( ) ; )  throw new TYPE_9 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME factory ) NAME factory ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  factory . METHOD_2 ( new TYPE_3 ( url ) . METHOD_3 ( true ) . METHOD_4 ( ( ! ( VAR_1 ) ) ) . METHOD_5 ( INT_1 , VAR_2 ) . METHOD_1 ( ) ) )  factory . METHOD_2 ( new TYPE_3 ( url ) . METHOD_3 ( true ) . METHOD_4 ( ( ! ( VAR_1 ) ) ) . METHOD_5 ( INT_1 , VAR_2 ) . METHOD_1 ( ) ) (  return ( ( TYPE_1 ) ( factory . METHOD_6 ( ) ) ) ; )  return ( ( TYPE_1 ) ( factory . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) )  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  assertEquals ( STRING_5 , STRING_4 , VAR_1 . METHOD_8 ( ) . METHOD_9 ( ) ) )  assertEquals ( STRING_5 , STRING_4 , VAR_1 . METHOD_8 ( ) . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR (  modules.add ( new TYPE_3 ( ) ) )  modules.add ( new TYPE_3 ( ) ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  modules.add ( new TYPE_4 ( ) ) )  modules.add ( new TYPE_4 ( ) ) ) THEN THEN ( ELSE ELSE (  modules.add ( new TYPE_5 ( ) ) )  modules.add ( new TYPE_5 ( ) ) (  modules.add ( new TYPE_6 ( ) ) )  modules.add ( new TYPE_6 ( ) ) ) ELSE ELSE ) IF IF (  return VAR_1 . METHOD_2 ( modules ) ; )  return VAR_1 . METHOD_2 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return METHOD_2 ( repo , db , rw , commit , repo . METHOD_3 ( ) . values ( ) ) ; )  return METHOD_2 ( repo , db , rw , commit , repo . METHOD_3 ( ) . values ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_4 ( ) ) ) INIT = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_4 ( ) ) ) VAR VAR (  VAR_1 . error ( msg , e ) )  VAR_1 . error ( msg , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 < TYPE_4 > ( ) ) INIT = new TYPE_3 < TYPE_4 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME b ) NAME b ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( b . ref ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) >= 0 ) COND ( b . ref ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) >= 0 ( THEN THEN (  VAR_3 . add ( new TYPE_4 ( b ) ) )  VAR_3 . add ( new TYPE_4 ( b ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_4 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) )  VAR_2 . METHOD_4 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( INT_1 ) ) )  METHOD_2 ( b , b . append ( INT_1 ) ) (  METHOD_2 ( b , b . append ( 2 ) ) )  METHOD_2 ( b , b . append ( 2 ) ) (  METHOD_2 ( b , b . append ( ( - INT_2 ) ) ) )  METHOD_2 ( b , b . append ( ( - INT_2 ) ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( IF IF ( COND ! ( cfg . METHOD_1 ( VAR_3 , false ) ) ) COND ! ( cfg . METHOD_1 ( VAR_3 , false ) ) ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( METHOD_4 ( projectName ) ) )  VAR_2 . METHOD_3 ( METHOD_4 ( projectName ) ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME b ) NAME b ( INIT = VAR_2 . METHOD_5 ( VAR_1 , TYPE_4 . name ( ) ) ) INIT = VAR_2 . METHOD_5 ( VAR_1 , TYPE_4 . name ( ) ) ) VAR VAR (  return new java.lang.String ( b , TYPE_4 ) ; )  return new java.lang.String ( b , TYPE_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) COND VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  return new TYPE_1 ( db , repo , rp . METHOD_3 ( ) ) ; )  return new TYPE_1 ( db , repo , rp . METHOD_3 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_1 ( project . METHOD_4 ( ) ) ; )  return new TYPE_1 ( project . METHOD_4 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME update ) NAME update ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ps . getId ( ) , update ) )  METHOD_1 ( ps . getId ( ) , update ) (  TYPE_2 . METHOD_2 ( ps . METHOD_3 ( ) , STRING_1 , ps . getId ( ) ) )  TYPE_2 . METHOD_2 ( ps . METHOD_3 ( ) , STRING_1 , ps . getId ( ) ) (  update . METHOD_4 ( VAR_1 ) )  update . METHOD_4 ( VAR_1 ) ( IF IF ( COND ( TYPE_3 . of ( update . getChange ( ) ) ) == ( VAR_2 ) ) COND ( TYPE_3 . of ( update . getChange ( ) ) ) == ( VAR_2 ) ( THEN THEN (  db . patchSets ( ) . delete ( java.util.Collections.singleton ( ps ) ) )  db . patchSets ( ) . delete ( java.util.Collections.singleton ( ps ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . set ( base , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) )  VAR_1 . set ( base , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) (  VAR_1 . METHOD_2 ( m , VAR_6 , ( VAR_7 != null ? VAR_7 . get ( 0 ) : null ) , ( VAR_8 != null ? VAR_8 . get ( 0 ) : null ) ) )  VAR_1 . METHOD_2 ( m , VAR_6 , ( VAR_7 != null ? VAR_7 . get ( 0 ) : null ) , ( VAR_8 != null ? VAR_8 . get ( 0 ) : null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.ProjectConfig ) TYPE TYPE_3.ProjectConfig ( NAME cfg ) NAME cfg ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) )  TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) (  TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) )  TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_5 ( VAR_3 , cfg ) )  METHOD_5 ( VAR_3 , cfg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) )  METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  input . ref = STRING_2 )  input . ref = STRING_2 (  input . message = STRING_3 )  input . message = STRING_3 (  VAR_4 . METHOD_3 ( VAR_5 class ) )  VAR_4 . METHOD_3 ( VAR_5 class ) (  VAR_4 . METHOD_4 ( ( ( STRING_4 + ( VAR_3 ) ) + STRING_5 ) ) )  VAR_4 . METHOD_4 ( ( ( STRING_4 + ( VAR_3 ) ) + STRING_5 ) ) (  METHOD_5 ( input . ref ) . create ( input ) )  METHOD_5 ( input . ref ) . create ( input ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) )  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) (  rpc ( VAR_2 class ) )  rpc ( VAR_2 class ) (  rpc ( VAR_3 class ) )  rpc ( VAR_3 class ) (  rpc ( VAR_4 class ) )  rpc ( VAR_4 class ) (  rpc ( VAR_5 class ) )  rpc ( VAR_5 class ) (  rpc ( VAR_6 class ) )  rpc ( VAR_6 class ) (  rpc ( VAR_7 class ) )  rpc ( VAR_7 class ) (  rpc ( VAR_8 class ) )  rpc ( VAR_8 class ) (  rpc ( VAR_9 class ) )  rpc ( VAR_9 class ) (  rpc ( VAR_10 class ) )  rpc ( VAR_10 class ) (  rpc ( VAR_11 class ) )  rpc ( VAR_11 class ) (  rpc ( VAR_12 class ) )  rpc ( VAR_12 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , VAR_1 ) . METHOD_2 ( STRING_3 , VAR_2 ) . METHOD_3 ( STRING_4 , STRING_5 ) . METHOD_4 ( STRING_6 ) . METHOD_5 ( ) . get ( TYPE_4 . METHOD_6 ( VAR_3 ) ) )  new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , VAR_1 ) . METHOD_2 ( STRING_3 , VAR_2 ) . METHOD_3 ( STRING_4 , STRING_5 ) . METHOD_4 ( STRING_6 ) . METHOD_5 ( ) . get ( TYPE_4 . METHOD_6 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_4 ) ) INIT = util . user ( VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) )  METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( b . length ) ) COND i < ( b . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME u ) NAME u ( INIT = ( ( b [ i ] ) > > INT_1 ) & INT_2 ) INIT = ( ( b [ i ] ) > > INT_1 ) & INT_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( b [ i ] ) & INT_2 ) INIT = ( b [ i ] ) & INT_2 ) VAR VAR (  VAR_1 . append ( VAR_3 [ u ] ) )  VAR_1 . append ( VAR_3 [ u ] ) (  VAR_1 . append ( VAR_3 [ VAR_2 ] ) )  VAR_1 . append ( VAR_3 [ VAR_2 ] ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME values ) NAME values ( INIT = TYPE_1 . METHOD_2 ( ) . get ( name ) ) INIT = TYPE_1 . METHOD_2 ( ) . get ( name ) ) VAR VAR ( IF IF ( COND values == null ) COND values == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE (  return values . get ( ( ( values . size ( ) ) - 1 ) ) ; )  return values . get ( ( ( values . size ( ) ) - 1 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ( INIT = METHOD_2 ( ) . getChangeId ( ) ) INIT = METHOD_2 ( ) . getChangeId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME c ) NAME c ( INIT = get ( changeId ) ) INIT = get ( changeId ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_3 ( ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_4 ( 1 ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_4 ( 1 ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) . isEqualTo ( STRING_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) . isEqualTo ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . get ( STRING_1 ) ) INIT = TYPE_1 . get ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ) INIT = new TYPE_3 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ) VAR VAR (  VAR_3 . METHOD_4 ( STRING_2 ) )  VAR_3 . METHOD_4 ( STRING_2 ) (  VAR_1 . add ( VAR_3 ) )  VAR_1 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( TYPE_6 . METHOD_5 ( ) ) ) INIT = new TYPE_5 ( TYPE_6 . METHOD_5 ( ) ) ) VAR VAR (  VAR_4 . METHOD_4 ( STRING_3 ) )  VAR_4 . METHOD_4 ( STRING_3 ) (  VAR_1 . add ( VAR_4 ) )  VAR_1 . add ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ) INIT = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ) VAR VAR (  repo = new TYPE_4 < TYPE_1 > ( r ) )  repo = new TYPE_4 < TYPE_1 > ( r ) (  servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , VAR_1 , VAR_2 ) )  servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( index , VAR_3 ) ) INIT = METHOD_2 ( index , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_2 , VAR_1 , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) , null ) ) INIT = METHOD_3 ( VAR_2 , VAR_1 , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) , null ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ( INIT = getRevision ( ) ) INIT = getRevision ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( getChangeId ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = new TYPE_2 ( getChangeId ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) (  METHOD_3 ( VAR_7 , VAR_8 ) )  METHOD_3 ( VAR_7 , VAR_8 ) (  METHOD_3 ( VAR_9 , VAR_10 ) )  METHOD_3 ( VAR_9 , VAR_10 ) (  VAR_11 = VAR_12 )  VAR_11 = VAR_12 ) BLOCK BLOCK ( FINALLY FINALLY (  walk . METHOD_4 ( ) )  walk . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( user , cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ) INIT = VAR_2 . create ( user , cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 . status ) != ( VAR_3 ) ) COND ( VAR_1 . status ) != ( VAR_3 ) ( THEN THEN (  throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; )  throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; ) THEN THEN ) IF IF (  return VAR_1 . type ; )  return VAR_1 . type ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<TYPE_1,TYPE_2> ) RETURN java.util.Map<TYPE_1,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3.Id ) TYPE TYPE_3.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1,TYPE_2> ) TYPE java.util.Map<TYPE_1,TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) IN db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 . METHOD_5 ( ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . METHOD_5 ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; )  return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<com.google.gerrit.reviewdb.client.Change.Key,com.google.gerrit.reviewdb.client.Change.Id> ) RETURN java.util.Map<com.google.gerrit.reviewdb.client.Change.Key,com.google.gerrit.reviewdb.client.Change.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME branch ) NAME branch ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<com.google.gerrit.reviewdb.client.Change.Key,com.google.gerrit.reviewdb.client.Change.Id> ) TYPE java.util.Map<com.google.gerrit.reviewdb.client.Change.Key,com.google.gerrit.reviewdb.client.Change.Id> ( NAME r ) NAME r ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( IN db . changes ( ) . METHOD_2 ( branch ) ) IN db . changes ( ) . METHOD_2 ( branch ) ( BLOCK BLOCK (  r . put ( c . getKey ( ) , c . getId ( ) ) )  r . put ( c . getKey ( ) , c . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<TYPE_1,java.util.Set<TYPE_2>> ) RETURN java.util.Map<TYPE_1,java.util.Set<TYPE_2>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME git ) NAME git ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( git ) )  VAR_4 . METHOD_3 ( git ) (  return VAR_4 . METHOD_1 ( ) ; )  return VAR_4 . METHOD_1 ( ) ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) )  bind ( VAR_1 class ) (  bind ( VAR_2 class ) . to ( VAR_1 class ) )  bind ( VAR_2 class ) . to ( VAR_1 class ) (  bind ( VAR_3 class ) . to ( VAR_1 class ) )  bind ( VAR_3 class ) . to ( VAR_1 class ) (  bind ( VAR_4 class ) . to ( VAR_1 class ) )  bind ( VAR_4 class ) . to ( VAR_1 class ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_1 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_1 class ) (  METHOD_2 ( ) . to ( VAR_1 class ) )  METHOD_2 ( ) . to ( VAR_1 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( revision ) == null ) COND ( revision ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 . METHOD_1 ( 0 ) ; )  return VAR_2 . METHOD_1 ( 0 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.PatchSet ) RETURN TYPE_1.PatchSet ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( currentPatchSetId ) != null ) COND ( currentPatchSetId ) != null ( THEN THEN ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = ( patchSets . size ( ) ) - 1 ) INIT = ( patchSets . size ( ) ) - 1 ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.PatchSet ) TYPE TYPE_1.PatchSet ( NAME ps ) NAME ps ( INIT = patchSets . get ( i ) ) INIT = patchSets . get ( i ) ) VAR VAR ( IF IF ( COND ps . getKey ( ) . equals ( currentPatchSetId ) ) COND ps . getKey ( ) . equals ( currentPatchSetId ) ( THEN THEN (  return ps ; )  return ps ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( new TYPE_2 ( INT_1 ) ) ) )  assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( new TYPE_2 ( INT_1 ) ) ) (  assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_2 , INT_1 ) ) ) )  assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_2 , INT_1 ) ) ) (  assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_3 , INT_1 ) ) ) )  assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_3 , INT_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2>[] ) RETURN TYPE_1<TYPE_2>[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2>[] ) TYPE TYPE_1<TYPE_2>[] ( NAME p ) NAME p ( INIT = new TYPE_1 [ r . METHOD_2 ( ) ] ) INIT = new TYPE_1 [ r . METHOD_2 ( ) ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( p . length ) ) COND i < ( p . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  p [ i ] = METHOD_3 ( r . METHOD_4 ( i ) ) )  p [ i ] = METHOD_3 ( r . METHOD_4 ( i ) ) ) BLOCK BLOCK ) FOR FOR (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( change . getProject ( ) , patchSet ) , util . METHOD_6 ( VAR_1 ) , VAR_2 , VAR_3 ) )  METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( change . getProject ( ) , patchSet ) , util . METHOD_6 ( VAR_1 ) , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3|TYPE_4|java.io.IOException|com.google.gwtorm.server.OrmException ) TYPE TYPE_3|TYPE_4|java.io.IOException|com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( STRING_1 , e ) )  VAR_5 . error ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME i ) NAME i ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ) INIT INIT ( COND i . METHOD_2 ( ) ) COND i . METHOD_2 ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  i . METHOD_3 ( ) . run ( ) )  i . METHOD_3 ( ) . run ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_2 . error ( STRING_1 , err ) )  VAR_2 . error ( STRING_1 , err ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  i . METHOD_4 ( ) )  i . METHOD_4 ( ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = METHOD_2 ( branch , null ) ) INIT = METHOD_2 ( branch , null ) ) VAR VAR (  ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) )  ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) (  METHOD_5 ( branch , c ) )  METHOD_5 ( branch , c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( TRY TRY ( BLOCK BLOCK (  project ( ) . METHOD_4 ( input ) )  project ( ) . METHOD_4 ( input ) (  org.junit.Assert . METHOD_5 ( STRING_2 ) )  org.junit.Assert . METHOD_5 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) )  com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) )  < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) (  return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . VAR_5 ) ; )  return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.NameKey ) TYPE TYPE_2.NameKey ( NAME projectName ) NAME projectName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME r ) NAME r ( INIT = VAR_1 . METHOD_2 ( projectName . get ( ) ) ) INIT = VAR_1 . METHOD_2 ( projectName . get ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return r . METHOD_3 ( VAR_2 ) ; )  return r . METHOD_3 ( VAR_2 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  r . close ( ) )  r . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( key . repo , key . path ) ) INIT = new TYPE_3 ( key . repo , key . path ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( null , VAR_2 ) )  VAR_1 . METHOD_2 ( null , VAR_2 ) (  return TYPE_2 . METHOD_3 ( VAR_1 ) ; )  return TYPE_2 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  key . repo = null )  key . repo = null ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME p ) NAME p ( INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) VAR VAR (  return ( METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( getValue ( ) . equals ( p . getValue ( ) ) ) ; )  return ( METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( getValue ( ) . equals ( p . getValue ( ) ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 < ( ( VAR_2 ) - 1 ) ) COND VAR_1 < ( ( VAR_2 ) - 1 ) ( THEN THEN (  VAR_3 . info ( STRING_1 ) )  VAR_3 . info ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_4 ) )  TYPE_1 . METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  VAR_3 . error ( ( ( STRING_2 + ( VAR_2 ) ) + STRING_3 ) ) )  VAR_3 . error ( ( ( STRING_2 + ( VAR_2 ) ) + STRING_3 ) ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( ctx . getProject ( ) , change.getId ( ) ) ) INIT = VAR_1 . create ( ctx . getProject ( ) , change.getId ( ) ) ) VAR VAR (  cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) )  cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) (  cm . METHOD_4 ( patchSet , VAR_2 ) )  cm . METHOD_4 ( patchSet , VAR_2 ) (  cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) )  cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) (  cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) )  cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) (  cm . METHOD_9 ( ) )  cm . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) )  revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) (  r = METHOD_6 ( r . getChangeId ( ) ) )  r = METHOD_6 ( r . getChangeId ( ) ) (  METHOD_7 ( r , ( - 2 ) ) )  METHOD_7 ( r , ( - 2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME create ) NAME create ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND p . getName ( ) . METHOD_3 ( name ) ) COND p . getName ( ) . METHOD_3 ( name ) ( THEN THEN (  return p ; )  return p ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND create ) COND create ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( name ) ) INIT = new TYPE_1 ( name ) ) VAR VAR (  VAR_1 . add ( p ) )  VAR_1 . add ( p ) (  return p ; )  return p ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . equals ( VAR_1 ) ) COND TYPE_2 . equals ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME user ) NAME user ( INIT = TYPE_3 . METHOD_2 ( req . METHOD_1 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( req . METHOD_1 ( ) ) ) VAR VAR ( IF IF ( COND user != null ) COND user != null ( THEN THEN (  return user ; )  return user ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME auth ) NAME auth ( INIT = req . METHOD_3 ( TYPE_2 ) ) INIT = req . METHOD_3 ( TYPE_2 ) ) VAR VAR (  return TYPE_4 . METHOD_4 ( auth ) ; )  return TYPE_4 . METHOD_4 ( auth ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_2 ( req . METHOD_3 ( VAR_1 ) ) ; )  return TYPE_3 . METHOD_2 ( req . METHOD_3 ( VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cd . METHOD_2 ( user ) ) COND cd . METHOD_2 ( user ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME c ) NAME c ( INIT = cd . change ( db ) ) INIT = cd . change ( db ) ) VAR VAR ( IF IF ( COND ( c != null ) && ( VAR_1 . METHOD_3 ( c ) . METHOD_4 ( user ) . METHOD_5 ( ) ) ) COND ( c != null ) && ( VAR_1 . METHOD_3 ( c ) . METHOD_4 ( user ) . METHOD_5 ( ) ) ( THEN THEN (  cd . METHOD_6 ( user ) )  cd . METHOD_6 ( user ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,TYPE_2.NameKey> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,TYPE_2.NameKey> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,TYPE_2.NameKey> ) TYPE TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,TYPE_2.NameKey> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . change ( ) . METHOD_2 ( ) ) )  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . change ( ) . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME w ) NAME w ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_4 class ) ) INIT = VAR_3 . METHOD_2 ( VAR_4 class ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  w . METHOD_3 ( ) )  w . METHOD_3 ( ) (  w . METHOD_3 ( ( ( STRING_1 + ( METHOD_4 ( ) ) ) + STRING_2 ) ) )  w . METHOD_3 ( ( ( STRING_1 + ( METHOD_4 ( ) ) ) + STRING_2 ) ) (  w . METHOD_5 ( ) )  w . METHOD_5 ( ) (  w . METHOD_3 ( ( ( STRING_3 + ( VAR_2 . value ( ) ) ) + STRING_4 ) ) )  w . METHOD_3 ( ( ( STRING_3 + ( VAR_2 . value ( ) ) ) + STRING_4 ) ) (  w . METHOD_6 ( ) )  w . METHOD_6 ( ) (  w . METHOD_3 ( STRING_5 ) )  w . METHOD_3 ( STRING_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 . line , VAR_2 . line ) )  org.junit.Assert.assertEquals ( VAR_1 . line , VAR_2 . line ) (  org.junit.Assert.assertEquals ( VAR_1 . message , VAR_2 . message ) )  org.junit.Assert.assertEquals ( VAR_1 . message , VAR_2 . message ) (  org.junit.Assert.assertEquals ( VAR_3 , VAR_4 ) )  org.junit.Assert.assertEquals ( VAR_3 , VAR_4 ) ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  org.junit.Assert.assertEquals ( VAR_6 , VAR_7 ) )  org.junit.Assert.assertEquals ( VAR_6 , VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( revision ) == null ) COND ( revision ) == null ( THEN THEN (  return new byte [ ] { } ; )  return new byte [ ] { } ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ) INIT = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ) VAR VAR (  return VAR_4 . METHOD_6 ( VAR_6 ) ; )  return VAR_4 . METHOD_6 ( VAR_6 ) ; ) THEN THEN ( ELSE ELSE (  return new byte [ ] { } ; )  return new byte [ ] { } ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . size ( ) ) ) COND i < ( VAR_3 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . get ( i ) . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) COND ( VAR_3 . get ( i ) . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ( THEN THEN (  VAR_2 = i )  VAR_2 = i (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ( IF IF ( COND VAR_2 >= 0 ) COND VAR_2 >= 0 ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( ) ) COND METHOD_1 ( ) ( THEN THEN (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) ) THEN THEN ) IF IF (  VAR_1 = result )  VAR_1 = result (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) (  VAR_3 . METHOD_4 ( true ) )  VAR_3 . METHOD_4 ( true ) (  VAR_4 . METHOD_4 ( true ) )  VAR_4 . METHOD_4 ( true ) (  VAR_5 . METHOD_4 ( true ) )  VAR_5 . METHOD_4 ( true ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_6 . onSuccess ( VAR_7 ) )  VAR_6 . onSuccess ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME notes ) NAME notes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; )  return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_3 ( notes . METHOD_5 ( ) . METHOD_6 ( ) . values ( ) ) ; )  return TYPE_3 . METHOD_3 ( notes . METHOD_5 ( ) . METHOD_6 ( ) . values ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME revision ) NAME revision ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = id . getParentKey ( ) . get ( ) ) INIT = id . getParentKey ( ) . get ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME revision ) NAME revision ( INIT = TYPE_2 . get ( id ) ) INIT = TYPE_2 . get ( id ) ) VAR VAR ( IF IF ( COND revision != null ) COND revision != null ( THEN THEN (  return TYPE_3 . revision ( VAR_1 , revision ) ; )  return TYPE_3 . revision ( VAR_1 , revision ) ; ) THEN THEN ) IF IF (  return TYPE_3 . change ( VAR_1 ) . view ( STRING_1 ) . id ( id . get ( ) ) ; )  return TYPE_3 . change ( VAR_1 ) . view ( STRING_1 ) . id ( id . get ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) ) )  TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) ) (  TYPE_2 . METHOD_2 ( ( ( c . getStatus ( ) ) == ( VAR_1 ) ) , ( STRING_1 + STRING_2 ) ) )  TYPE_2 . METHOD_2 ( ( ( c . getStatus ( ) ) == ( VAR_1 ) ) , ( STRING_1 + STRING_2 ) ) (  TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_3 + STRING_4 ) , METHOD_5 ( ) . getAccountId ( ) , c ) )  TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_3 + STRING_4 ) , METHOD_5 ( ) . getAccountId ( ) , c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( revision ) == null ) COND ( revision ) == null ( THEN THEN (  return new byte [ ] { } ; )  return new byte [ ] { } ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ) INIT = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ) VAR VAR (  return VAR_4 . METHOD_6 ( VAR_6 ) ; )  return VAR_4 . METHOD_6 ( VAR_6 ) ; ) THEN THEN ) IF IF (  return new byte [ ] { } ; )  return new byte [ ] { } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( name ) )  TYPE_1 . METHOD_2 ( name ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME values ) NAME values ( INIT = new java.util.ArrayList < TYPE_2 > ( 2 ) ) INIT = new java.util.ArrayList < TYPE_2 > ( 2 ) ) VAR VAR (  values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) )  values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) (  values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) )  values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = new TYPE_1 ( name , values ) ) INIT = new TYPE_1 ( name , values ) ) VAR VAR (  return type ; )  return type ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) INIT = VAR_3 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return METHOD_2 ( projectName , VAR_1 , VAR_4 . create ( VAR_2 ) . METHOD_3 ( ) ) ; )  return METHOD_2 ( projectName , VAR_1 , VAR_4 . create ( VAR_2 ) . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_1 ( VAR_1 ) )  METHOD_1 ( VAR_1 ) ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_1 . METHOD_3 ( ) . isEmpty ( ) ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_1 . METHOD_3 ( ) . isEmpty ( ) ) ) ( THEN THEN (  throw new TYPE_1 ( 1 , STRING_1 ) ; )  throw new TYPE_1 ( 1 , STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( out ) ) INIT = METHOD_4 ( out ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . display ( VAR_2 ) )  VAR_1 . display ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME err ) NAME err ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND err == null ) COND err == null ( THEN THEN (  VAR_2 . error ( err ) )  VAR_2 . error ( err ) ) THEN THEN ( ELSE ELSE (  VAR_2 . error ( err , e ) )  VAR_2 . error ( err , e ) ) ELSE ELSE ) IF IF (  return TYPE_2 . METHOD_2 ( ) ; )  return TYPE_2 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_3 ( err ) ; )  return TYPE_2 . METHOD_3 ( err ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( TYPE_3 . METHOD_2 ( ) ) ) COND VAR_1 == ( TYPE_3 . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( db ) )  METHOD_3 ( db ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( db ) )  METHOD_3 ( db ) ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) ELSE ELSE ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_3 . update ( 1 ) )  VAR_3 . update ( 1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; )  return new TYPE_2 ( change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME rsp ) NAME rsp ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.Key ) TYPE TYPE_3.Key ( NAME key ) NAME key ( INIT = new TYPE_3 . Key ( VAR_2 , VAR_1 ) ) INIT = new TYPE_3 . Key ( VAR_2 , VAR_1 ) ) VAR VAR (  return auth ( db . METHOD_3 ( ) . get ( key ) ) ; )  return auth ( db . METHOD_3 ( ) . get ( key ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_4 ( ) . log ( STRING_1 , e ) )  METHOD_4 ( ) . log ( STRING_1 , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  approvals = TYPE_1 . of ( ) )  approvals = TYPE_1 . of ( ) (  reviewers = TYPE_2 . of ( ) )  reviewers = TYPE_2 . of ( ) (  VAR_1 = TYPE_3 . of ( ) )  VAR_1 = TYPE_3 . of ( ) (  VAR_2 = TYPE_1 . of ( ) )  VAR_2 = TYPE_1 . of ( ) (  VAR_3 = TYPE_1 . of ( ) )  VAR_3 = TYPE_1 . of ( ) (  VAR_4 = TYPE_1 . of ( ) )  VAR_4 = TYPE_1 . of ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_1.Id> ) TYPE java.util.Set<TYPE_1.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = user . METHOD_2 ( ) ) INIT = user . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( change . METHOD_3 ( ) . getParentKey ( ) ) ) INIT = VAR_3 . get ( change . METHOD_3 ( ) . getParentKey ( ) ) ) VAR VAR (  METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) ) )  METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) ) (  METHOD_1 ( VAR_1 , VAR_3 . METHOD_5 ( ) ) )  METHOD_1 ( VAR_1 , VAR_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( 0 , 0 , new TYPE_2 ( VAR_1 , INT_1 ) ) )  VAR_3 . METHOD_2 ( 0 , 0 , new TYPE_2 ( VAR_1 , INT_1 ) ) (  VAR_3 . METHOD_3 ( 0 , 1 , VAR_2 ) )  VAR_3 . METHOD_3 ( 0 , 1 , VAR_2 ) (  VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 . email ( ) ) )  VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 . email ( ) ) (  VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_1 . name ( ) ) )  VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_1 . name ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) )  METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) (  METHOD_4 ( STRING_1 ) )  METHOD_4 ( STRING_1 ) (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME s ) NAME s ( INIT = VAR_1 . METHOD_3 ( db ) ) INIT = VAR_1 . METHOD_3 ( db ) ) VAR VAR (  assertEquals ( 1 , s . size ( ) ) )  assertEquals ( 1 , s . size ( ) ) (  METHOD_5 ( s . contains ( STRING_3 ) ) )  METHOD_5 ( s . contains ( STRING_3 ) ) (  METHOD_2 ( s . contains ( STRING_4 ) ) )  METHOD_2 ( s . contains ( STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME row ) NAME row ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == ( VAR_3 ) ) COND VAR_2 == ( VAR_3 ) ( THEN THEN (  METHOD_2 ( row ) )  METHOD_2 ( row ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 == ( VAR_4 ) ) || ( VAR_2 == ( VAR_5 ) ) ) COND ( VAR_2 == ( VAR_4 ) ) || ( VAR_2 == ( VAR_5 ) ) ( THEN THEN ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_3 ( row ) ) != null ) COND ( METHOD_3 ( row ) ) != null ( THEN THEN (  METHOD_4 ( row ) )  METHOD_4 ( row ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . changeId = info . METHOD_1 ( ) )  this . changeId = info . METHOD_1 ( ) (  this . VAR_1 = ( info . METHOD_2 ( ) ) && ( info . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ) )  this . VAR_1 = ( info . METHOD_2 ( ) ) && ( info . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ) (  METHOD_5 ( info . METHOD_6 ( ) ) )  METHOD_5 ( info . METHOD_6 ( ) ) (  VAR_2 . METHOD_7 ( changeId ) )  VAR_2 . METHOD_7 ( changeId ) (  VAR_3 . METHOD_8 ( VAR_1 ) )  VAR_3 . METHOD_8 ( VAR_1 ) ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  VAR_4 . METHOD_9 ( null ) )  VAR_4 . METHOD_9 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ( THEN THEN (  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; )  return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( revision . get ( ) ) > 0 ) COND ( revision . get ( ) ) > 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) (  VAR_1 . METHOD_5 ( METHOD_6 ( ) ) )  VAR_1 . METHOD_5 ( METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( TYPE_4 . METHOD_4 ( ) ) )  VAR_1 . METHOD_7 ( TYPE_4 . METHOD_4 ( ) ) (  return java.util.Collections . METHOD_8 ( VAR_1 ) ; )  return java.util.Collections . METHOD_8 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return java.util.Collections . METHOD_9 ( ) ; )  return java.util.Collections . METHOD_9 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ) INIT = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_4<com.google.gerrit.reviewdb.server.ReviewDb> ) RETURN TYPE_4<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return TYPE_3 . of ( db ) ; )  return TYPE_3 . of ( db ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; )  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; )  return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e ) ; )  throw new TYPE_1 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME query ) NAME query ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2<TYPE_3>> ) TYPE TYPE_1<TYPE_2<TYPE_3>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_4 ) ) INIT = new TYPE_4 ( VAR_4 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( STRING_1 , TYPE_5 . METHOD_2 ( VAR_5 ) ) )  VAR_3 . METHOD_1 ( STRING_1 , TYPE_5 . METHOD_2 ( VAR_5 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_3 . METHOD_3 ( VAR_3 , VAR_6 ) )  TYPE_3 . METHOD_3 ( VAR_3 , VAR_6 ) (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( IN in ) IN in ( BLOCK BLOCK ( IF IF ( COND m . METHOD_2 ( ) ) COND m . METHOD_2 ( ) ( THEN THEN (  r . METHOD_3 ( m . METHOD_4 ( ) ) )  r . METHOD_3 ( m . METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE (  r . add ( m ) )  r . add ( m ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = cm . METHOD_1 ( ) . METHOD_2 ( ) ) INIT = cm . METHOD_1 ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ( INIT = ( cm . METHOD_3 ( VAR_1 ) ) + 1 ) INIT = ( cm . METHOD_3 ( VAR_1 ) ) + 1 ) VAR VAR (  TYPE_2 . METHOD_4 ( line ) )  TYPE_2 . METHOD_4 ( line ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ( INIT = TYPE_3 . METHOD_5 ( revision , path ) ) INIT = TYPE_3 . METHOD_5 ( revision , path ) ) VAR VAR ( IF IF ( COND ! ( TYPE_4 . METHOD_6 ( ) ) ) COND ! ( TYPE_4 . METHOD_6 ( ) ) ( THEN THEN (  TYPE_4 . METHOD_7 ( token ) )  TYPE_4 . METHOD_7 ( token ) ) THEN THEN ( ELSE ELSE (  TYPE_4 . display ( token ) )  TYPE_4 . display ( token ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_3 , null , VAR_4 , VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_3 , null , VAR_4 , VAR_5 ) (  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_5 ) )  com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( s == null ) || ( ( s . length ( ) ) < INT_1 ) ) COND ( s == null ) || ( ( s . length ( ) ) < INT_1 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return ( ( s . METHOD_2 ( 0 , INT_2 ) ) + STRING_1 ) + ( s . METHOD_2 ( ( ( s . length ( ) ) - INT_3 ) ) ) ; )  return ( ( s . METHOD_2 ( 0 , INT_2 ) ) + STRING_1 ) + ( s . METHOD_2 ( ( ( s . length ( ) ) - INT_3 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) )  VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  display ( result ) )  display ( result ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_5 ( VAR_4 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_6 ( final TYPE_3 result ) { display ( result ) ; } } ) )  TYPE_1 . METHOD_5 ( VAR_4 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_6 ( final TYPE_3 result ) { display ( result ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = new TYPE_1 ( VAR_1 , STRING_2 ) ) INIT = new TYPE_1 ( VAR_1 , STRING_2 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) (  org.junit.Assert.assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) )  org.junit.Assert.assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . create ( ) ) INIT = TYPE_3 . create ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK (  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) )  VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  METHOD_2 ( changeId ) )  METHOD_2 ( changeId ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_3 ( changeId ) )  METHOD_3 ( changeId ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_4 ( changeId ) )  METHOD_4 ( changeId ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  METHOD_5 ( changeId ) )  METHOD_5 ( changeId ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  METHOD_6 ( changeId ) )  METHOD_6 ( changeId ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  org.junit.Assert . METHOD_7 ( ( STRING_1 + VAR_1 ) ) )  org.junit.Assert . METHOD_7 ( ( STRING_1 + VAR_1 ) ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( VAR_1 ) ) ) COND ! ( METHOD_2 ( VAR_1 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME change ) NAME change ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_4 ( change ) )  METHOD_4 ( change ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3|com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException ) TYPE TYPE_3|com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , e ) )  VAR_4 . error ( STRING_1 , e ) (  throw new TYPE_5 ( e ) ; )  throw new TYPE_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) )  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_3 class ) )  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_3 class ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_4 class ) )  METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_4 class ) ) ELSE ELSE ) IF IF (  METHOD_5 ( STRING_1 ) . METHOD_6 ( VAR_5 class ) )  METHOD_5 ( STRING_1 ) . METHOD_6 ( VAR_5 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME close ) NAME close ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( STRING_1 , e ) )  VAR_2 . METHOD_1 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_3 . close ( true ) )  VAR_3 . close ( true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( STRING_2 , e ) )  VAR_2 . METHOD_1 ( STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_4 . close ( ) )  VAR_4 . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( STRING_3 , e ) )  VAR_2 . METHOD_1 ( STRING_3 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = VAR_1 . get ( i ) ) INIT = VAR_1 . get ( i ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = VAR_1 . get ( ( i - 1 ) ) ) INIT = VAR_1 . get ( ( i - 1 ) ) ) VAR VAR (  return ( ( s . METHOD_2 ( ) ) - ( e . METHOD_3 ( ) ) ) <= ( 2 * ( VAR_2 ) ) ; )  return ( ( s . METHOD_2 ( ) ) - ( e . METHOD_3 ( ) ) ) <= ( 2 * ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ) COND ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( IN TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) IN TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( t ) ) ) COND ! ( VAR_2 . METHOD_4 ( t ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . append ( INT_1 ) ) )  METHOD_2 ( b , b . append ( INT_1 ) ) (  METHOD_2 ( b , b . append ( INT_2 ) ) )  METHOD_2 ( b , b . append ( INT_2 ) ) (  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME err ) NAME err ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( true , VAR_1 ) )  TYPE_2 . METHOD_2 ( true , VAR_1 ) ( IF IF ( COND TYPE_3 . METHOD_3 ( err ) ) COND TYPE_3 . METHOD_3 ( err ) ( THEN THEN (  new TYPE_3 ( err . getMessage ( ) ) . METHOD_4 ( ) )  new TYPE_3 ( err . getMessage ( ) ) . METHOD_4 ( ) (  TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( err ) )  super . METHOD_1 ( err ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( IN result ) IN result ( BLOCK BLOCK (  r . add ( new TYPE_2 ( p ) ) )  r . add ( new TYPE_2 ( p ) ) (  VAR_1 . put ( p . getName ( ) , p . METHOD_2 ( ) ) )  VAR_1 . put ( p . getName ( ) , p . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_3 ( req , new TYPE_3 ( r ) ) )  VAR_2 . METHOD_3 ( req , new TYPE_3 ( r ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN ( ( java.util.List < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_2 ( VAR_2 ) . apply ( new TYPE_1 ( ) ) ) ) ) IN ( ( java.util.List < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_2 ( VAR_2 ) . apply ( new TYPE_1 ( ) ) ) ) ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( name ) )  VAR_3 . METHOD_3 ( name ) (  VAR_3 . METHOD_3 ( CHAR_1 ) )  VAR_3 . METHOD_3 ( CHAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_1 , r . METHOD_2 ( ) ) )  assertEquals ( VAR_1 , r . METHOD_2 ( ) ) (  assertEquals ( name , r . METHOD_3 ( ) ) )  assertEquals ( name , r . METHOD_3 ( ) ) (  assertEquals ( 1 , r . METHOD_4 ( ) ) )  assertEquals ( 1 , r . METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = r . METHOD_5 ( 0 ) ) INIT = r . METHOD_5 ( 0 ) ) VAR VAR (  assertEquals ( VAR_2 , c . METHOD_2 ( ) ) )  assertEquals ( VAR_2 , c . METHOD_2 ( ) ) (  assertEquals ( value , c . METHOD_3 ( ) ) )  assertEquals ( value , c . METHOD_3 ( ) ) (  assertEquals ( 0 , c . METHOD_4 ( ) ) )  assertEquals ( 0 , c . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = TYPE_1 . METHOD_2 ( STRING_4 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_4 ) ) VAR VAR (  return ( value != null ) && ( TYPE_2 . METHOD_3 ( VAR_1 ) . contains ( value . METHOD_4 ( ) ) ) ; )  return ( value != null ) && ( TYPE_2 . METHOD_3 ( VAR_1 ) . contains ( value . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( req . METHOD_2 ( ) . length ( ) ) >= ( TYPE_3 . info ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( req . METHOD_2 ( ) . length ( ) ) >= ( TYPE_3 . info ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( req , VAR_1 ) )  METHOD_5 ( req , VAR_1 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.util.Collections . METHOD_6 ( ) ) INIT = java.util.Collections . METHOD_6 ( ) ) VAR VAR (  VAR_1 . METHOD_7 ( req , new TYPE_5 ( VAR_2 ) ) )  VAR_1 . METHOD_7 ( req , new TYPE_5 ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = METHOD_5 ( STRING_1 ) ) INIT = METHOD_5 ( STRING_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( ( name + STRING_2 ) , new java.lang.String ( res . METHOD_6 ( ) , VAR_1 ) ) )  org.junit.Assert.assertEquals ( ( name + STRING_2 ) , new java.lang.String ( res . METHOD_6 ( ) , VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) COND VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( db ) )  METHOD_3 ( db ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( db ) )  METHOD_3 ( db ) ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME m ) NAME m ( INIT = new java.lang.StringBuilder ( VAR_1 ) ) INIT = new java.lang.StringBuilder ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  m . append ( TYPE_1 . on ( STRING_1 ) . METHOD_3 ( VAR_2 ) ) )  m . append ( TYPE_1 . on ( STRING_1 ) . METHOD_3 ( VAR_2 ) ) ) THEN THEN ) IF IF (  return m . toString ( ) ; )  return m . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_2 . METHOD_2 ( ) ) ) INIT = new TYPE_3 ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_4 ( VAR_1 ) ) INIT = VAR_4 . METHOD_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND org.eclipse.jgit.lib.ObjectId . equals ( VAR_5 , VAR_2 . METHOD_2 ( ) ) ) COND org.eclipse.jgit.lib.ObjectId . equals ( VAR_5 , VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( b , b . METHOD_3 ( ) ) )  METHOD_2 ( b , b . METHOD_3 ( ) ) (  METHOD_2 ( b , b . METHOD_4 ( STRING_1 ) ) )  METHOD_2 ( b , b . METHOD_4 ( STRING_1 ) ) (  METHOD_2 ( b , b . METHOD_5 ( STRING_2 ) ) )  METHOD_2 ( b , b . METHOD_5 ( STRING_2 ) ) (  METHOD_2 ( b , b . append ( STRING_3 ) ) )  METHOD_2 ( b , b . append ( STRING_3 ) ) (  METHOD_2 ( b , b . METHOD_6 ( ) ) )  METHOD_2 ( b , b . METHOD_6 ( ) ) (  assertEquals ( STRING_4 , b . METHOD_7 ( ) ) )  assertEquals ( STRING_4 , b . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) COND ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  VAR_2 . METHOD_1 ( true ) )  VAR_2 . METHOD_1 ( true ) ) THEN THEN ( ELSE ELSE ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_3 ( e . getMessage ( ) ) ; )  throw METHOD_3 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_3 ( e . getMessage ( ) ) ; )  throw METHOD_3 ( e . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) , VAR_2 ) ) && ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_4 ( i ) , VAR_3 ) ) ) COND ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) , VAR_2 ) ) && ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_4 ( i ) , VAR_3 ) ) ( THEN THEN (  ( VAR_4 ) ++ )  ( VAR_4 ) ++ (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_6 . METHOD_2 ( cfg ) ) COND TYPE_6 . METHOD_2 ( cfg ) ( THEN THEN (  return new TYPE_7 ( ) ; )  return new TYPE_7 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_9 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ) INIT = TYPE_9 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ) VAR VAR (  return TYPE_10 . METHOD_4 ( VAR_2 ) ; )  return TYPE_10 . METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) , new TYPE_3 ( STRING_4 , STRING_5 ) ) ) ) INIT = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) , new TYPE_3 ( STRING_4 , STRING_5 ) ) ) ) VAR VAR (  METHOD_5 ( VAR_1 , n ) )  METHOD_5 ( VAR_1 , n ) (  assertEquals ( ( STRING_6 + ( ( STRING_7 + STRING_8 ) + STRING_9 ) ) , n . METHOD_6 ( ) ) )  assertEquals ( ( STRING_6 + ( ( STRING_7 + STRING_8 ) + STRING_9 ) ) , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReviewDb ) TYPE TYPE_1.ReviewDb ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Project ) TYPE TYPE_1.Project ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR (  VAR_1 = new TYPE_1 . Project ( new TYPE_3 . NameKey ( STRING_1 ) , VAR_2 ) )  VAR_1 = new TYPE_1 . Project ( new TYPE_3 . NameKey ( STRING_1 ) , VAR_2 ) (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( false ) )  VAR_1 . METHOD_4 ( false ) (  c . projects ( ) . insert ( java.util.Collections.singleton ( VAR_1 ) ) )  c . projects ( ) . insert ( java.util.Collections.singleton ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME token ) NAME token ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND token == null ) COND token == null ( THEN THEN (  token = STRING_1 )  token = STRING_1 ) THEN THEN ( ELSE ELSE ( IF IF ( COND token . METHOD_2 ( STRING_2 ) ) COND token . METHOD_2 ( STRING_2 ) ( THEN THEN (  token = token . METHOD_3 ( 1 ) )  token = token . METHOD_3 ( 1 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return TYPE_1 . METHOD_4 ( ( STRING_3 + token ) ) ; )  return TYPE_1 . METHOD_4 ( ( STRING_3 + token ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = VAR_2 . get ( ) )  VAR_1 = VAR_2 . get ( ) (  VAR_3 = true )  VAR_3 = true ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( project ) ) INIT = VAR_1 . METHOD_2 ( project ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) )  TYPE_2 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; )  return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND VAR_3 != VAR_1 ) COND VAR_3 != VAR_1 ( THEN THEN (  VAR_3 . close ( ) )  VAR_3 . close ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . toString ( ) ) INIT = VAR_1 . METHOD_2 ( ) . toString ( ) ) VAR VAR ( IF IF ( COND TYPE_5 . METHOD_3 ( VAR_3 ) ) COND TYPE_5 . METHOD_3 ( VAR_3 ) ( THEN THEN (  return METHOD_4 ( name , VAR_1 , VAR_2 ) ; )  return METHOD_4 ( name , VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_4 . METHOD_5 ( VAR_1 ) ) COND VAR_4 . METHOD_5 ( VAR_1 ) ( THEN THEN (  return METHOD_6 ( VAR_1 , VAR_2 ) ; )  return METHOD_6 ( VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_2 . METHOD_2 ( ) )  VAR_1 = TYPE_2 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND ( e instanceof TYPE_3 ) && ( TYPE_4 . equals ( e . getMessage ( ) ) ) ) COND ( e instanceof TYPE_3 ) && ( TYPE_4 . equals ( e . getMessage ( ) ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( STRING_1 ) ) INIT = new TYPE_5 ( STRING_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( e ) )  VAR_2 . METHOD_3 ( e ) (  throw VAR_2 ; )  throw VAR_2 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_2> ) TYPE TYPE_3<TYPE_2> ( NAME m ) NAME m ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4<TYPE_2>> ) TYPE java.util.List<TYPE_4<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( type ) ) INIT = VAR_2 . METHOD_1 ( type ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4<TYPE_2> ) TYPE TYPE_4<TYPE_2> ( NAME b ) NAME b ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( b . getKey ( ) . METHOD_2 ( ) ) != null ) COND ( b . getKey ( ) . METHOD_2 ( ) ) != null ( THEN THEN (  m . put ( STRING_1 , b . getKey ( ) , b . METHOD_3 ( ) ) )  m . put ( STRING_1 , b . getKey ( ) , b . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return m ; )  return m ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_2.HttpServletResponse ) TYPE TYPE_2.HttpServletResponse ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  TYPE_4 . METHOD_2 ( res ) )  TYPE_4 . METHOD_2 ( res ) (  res . METHOD_3 ( VAR_2 ) )  res . METHOD_3 ( VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( req , res , VAR_3 ) )  VAR_1 . METHOD_4 ( req , res , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) )  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_2 ( ) ) COND VAR_4 . METHOD_2 ( ) ( THEN THEN (  return VAR_2 . METHOD_3 ( getRefName ( ) ) ; )  return VAR_2 . METHOD_3 ( getRefName ( ) ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_1 ( VAR_2 , getRefName ( ) , VAR_4 ) ; )  return new TYPE_1 ( VAR_2 , getRefName ( ) , VAR_4 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME b ) NAME b ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  b . append ( ( ( STRING_1 + ( config . size ( ) ) ) + STRING_2 ) ) )  b . append ( ( ( STRING_1 + ( config . size ( ) ) ) + STRING_2 ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( IN config ) IN config ( BLOCK BLOCK (  b . append ( STRING_3 ) )  b . append ( STRING_3 ) (  b . append ( c . toString ( ) ) )  b . append ( c . toString ( ) ) (  b . append ( STRING_4 ) )  b . append ( STRING_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  b . append ( STRING_5 ) )  b . append ( STRING_5 ) (  return b . toString ( ) ; )  return b . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN ( IF IF ( COND ( VAR_2 . contains ( VAR_3 ) ) || ( VAR_2 . contains ( VAR_4 ) ) ) COND ( VAR_2 . contains ( VAR_3 ) ) || ( VAR_2 . contains ( VAR_4 ) ) ( THEN THEN (  commands . add ( VAR_5 )  commands . add ( VAR_5 (  new TYPE_1 ( ) ) )  new TYPE_1 ( ) ) ( IF IF ( COND ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( TYPE_3 . METHOD_4 ( ) ) ) COND ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( TYPE_3 . METHOD_4 ( ) ) ( THEN THEN (  commands . add ( VAR_5 )  commands . add ( VAR_5 (  new TYPE_4 ( METHOD_5 ( ) ) ) )  new TYPE_4 ( METHOD_5 ( ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) )  TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_2 ) )  TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_2 ) (  TYPE_1 . METHOD_2 ( VAR_3 , VAR_5 , VAR_4 , STRING_3 ) )  TYPE_1 . METHOD_2 ( VAR_3 , VAR_5 , VAR_4 , STRING_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_3 ) ) INIT = util . user ( VAR_3 ) ) VAR VAR (  METHOD_4 ( STRING_4 , ( ( u . METHOD_5 ( ) ) == ( VAR_6 ) ) ) )  METHOD_4 ( STRING_4 , ( ( u . METHOD_5 ( ) ) == ( VAR_6 ) ) ) (  METHOD_4 ( STRING_5 , u . METHOD_6 ( STRING_6 ) . METHOD_7 ( ) ) )  METHOD_4 ( STRING_5 , u . METHOD_6 ( STRING_6 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . set ( VAR_4 ) ) INIT = VAR_3 . set ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  message = VAR_5 . get ( ) . getMessage ( ) )  message = VAR_5 . get ( ) . getMessage ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . set ( VAR_2 ) )  VAR_3 . set ( VAR_2 ) ) FINALLY FINALLY ) TRY TRY (  err . METHOD_2 ( TYPE_3 . METHOD_3 ( message . toString ( ) ) ) )  err . METHOD_2 ( TYPE_3 . METHOD_3 ( message . toString ( ) ) ) (  err . METHOD_4 ( ) )  err . METHOD_4 ( ) (  in . close ( ) )  in . close ( ) (  out . close ( ) )  out . close ( ) (  err . close ( ) )  err . close ( ) (  VAR_6 . METHOD_5 ( INT_1 ) )  VAR_6 . METHOD_5 ( INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) RETURN TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME label ) NAME label ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME r ) NAME r ( INIT = TYPE_3 . METHOD_2 ( ( 2 * ( VAR_1 ) ) ) ) INIT = TYPE_3 . METHOD_2 ( ( 2 * ( VAR_1 ) ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i <= ( VAR_1 ) ) COND i <= ( VAR_1 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  r . add ( TYPE_4 . METHOD_3 ( args , label , i ) ) )  r . add ( TYPE_4 . METHOD_3 ( args , label , i ) ) (  r . add ( TYPE_4 . METHOD_3 ( args , label , ( - i ) ) ) )  r . add ( TYPE_4 . METHOD_3 ( args , label , ( - i ) ) ) ) BLOCK BLOCK ) FOR FOR (  return not ( METHOD_4 ( r ) ) ; )  return not ( METHOD_4 ( r ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = METHOD_2 ( ) )  VAR_1 = METHOD_2 ( ) (  VAR_2 = METHOD_3 ( ) )  VAR_2 = METHOD_3 ( ) (  VAR_3 = METHOD_4 ( ) )  VAR_3 = METHOD_4 ( ) (  VAR_4 = METHOD_5 ( ) )  VAR_4 = METHOD_5 ( ) (  VAR_5 = METHOD_6 ( ) )  VAR_5 = METHOD_6 ( ) (  VAR_6 = METHOD_7 ( ) )  VAR_6 = METHOD_7 ( ) (  VAR_7 = METHOD_8 ( ) )  VAR_7 = METHOD_8 ( ) (  VAR_8 = METHOD_9 ( ) )  VAR_8 = METHOD_9 ( ) (  VAR_9 = METHOD_10 ( ) )  VAR_9 = METHOD_10 ( ) (  VAR_10 = METHOD_11 ( ) )  VAR_10 = METHOD_11 ( ) (  VAR_11 = METHOD_12 ( ) )  VAR_11 = METHOD_12 ( ) (  VAR_12 = METHOD_13 ( ) )  VAR_12 = METHOD_13 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_3 ( query ( STRING_1 ) ) . changeId ) . isEqualTo ( r . getChangeId ( ) ) )  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_3 ( query ( STRING_1 ) ) . changeId ) . isEqualTo ( r . getChangeId ( ) ) (  METHOD_4 ( user ) )  METHOD_4 ( user ) (  com.google.common.truth.Truth.assertThat ( query ( STRING_1 ) . isEmpty ( ) ) . METHOD_5 ( ) )  com.google.common.truth.Truth.assertThat ( query ( STRING_1 ) . isEmpty ( ) ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.Repository ) RETURN org.eclipse.jgit.lib.Repository ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_1 ( name ) ; )  return VAR_1 . METHOD_1 ( name ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) )  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
