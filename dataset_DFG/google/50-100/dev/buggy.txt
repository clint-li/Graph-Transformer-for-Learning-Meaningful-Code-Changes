( final TYPE_1.NameKey ) ( METHOD_1_return private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1.NameKey ) { try { return VAR_1.METHOD_1 ( name.get ( ) ) ; } catch ( TYPE_2 err ) { VAR_2.METHOD_2 ( ( STRING_1 + ( name.get ( ) ) ) err ) ; return null ; } } ) 
( VAR_7 VAR_7 ) ( VAR_2 VAR_2   VAR_3.METHOD_3 ( ) ) ( VAR_3 VAR_3 ) (   change.getProject ( ) ) ( METHOD_1_return_line1_col390 return VAR_7 ; ) ( change change ) ( VAR_4 VAR_4   ( ( TYPE_5 ) ( VAR_5 ) ) ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1.METHOD_2 ( ) ; TYPE_4 VAR_2   VAR_3.METHOD_3 ( ) ; TYPE_5 VAR_4   ( ( TYPE_5 ) ( VAR_5 ) ) ; TYPE_6.Change change   TYPE_7.get ( VAR_1 ) ; TYPE_8.NameKey   change.getProject ( ) ; if ( ! ( VAR_2.METHOD_4 ( TYPE_9.create ( name.get ( ) ) VAR_6 ) ) ) { return VAR_1.METHOD_5 ( ) ; } return VAR_7 ; } ) ( VAR_1 VAR_1 ) ( TYPE_7 TYPE_7 ) ( change change   TYPE_7.get ( VAR_1 ) ) 
( p com.google.gerrit.reviewdb.client.Project.NameKey p ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( p ) ; TYPE_2 VAR_2   repo.METHOD_3 ( ) ; return new TYPE_1 ( repo new org.eclipse.jgit.revwalk.RevWalk ( VAR_2.METHOD_4 ( ) ) VAR_2 new TYPE_3 ( ) true ) ; } ) ( VAR_2 VAR_2   repo.METHOD_3 ( ) ) ( repo repo   VAR_1.METHOD_2 ( p ) ) ( VAR_1 VAR_1 ) ( repo repo ) 
( VAR_2 VAR_2   new TYPE_4 < > ( ) ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2   new TYPE_4 < > ( ) ; try { for ( TYPE_5 VAR_3 : VAR_4 ) { VAR_2.METHOD_2 ( VAR_3.METHOD_3 ( VAR_1 ) ) ; } } catch ( TYPE_3 e ) { VAR_2.METHOD_2 ( e.METHOD_4 ( ) ) ; throw new TYPE_3 ( e.getMessage ( ) VAR_2 ) ; } return VAR_2 ; } ) ( METHOD_1_return_line1_col354 return VAR_2 ; ) 
( p p   new TYPE_2 < java.lang.String java.lang.String > ( ) ) ( p p ) ( p p ) ( ps final com.google.gerrit.reviewdb.client.PatchSet ps ) ( VAR_1 VAR_1   new TYPE_1 ( type.getRevision ( ) ) ) ( project final com.google.gerrit.reviewdb.client.Project.NameKey project ) ( METHOD_1_return public java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey project final com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 VAR_1   new TYPE_1 ( type.getRevision ( ) ) ; final java.util.Map < java.lang.String java.lang.String > p   new TYPE_2 < java.lang.String java.lang.String > ( ) ; p.put ( STRING_1 METHOD_2 ( project.get ( ) ) ) ; p.put ( STRING_2 METHOD_2 ( ps.getRevision ( ) .get ( ) ) ) ; return ( VAR_2 ) + ( VAR_1.METHOD_3 ( p ) ) ; } ) 
( VAR_2 VAR_2 ) ( p p   VAR_2.get ( ) .METHOD_1 ( VAR_3 id ) ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 id ) throws TYPE_4 java.io.IOException { TYPE_2 p   VAR_2.get ( ) .METHOD_1 ( VAR_3 id ) ; for ( TYPE_5 VAR_4 : p.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_4 ( ) ) { if ( VAR_1.METHOD_5 ( ) .equals ( VAR_4.getProject ( ) .METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 p.METHOD_2 ( ) ) ; } } throw new TYPE_4 ( id ) ; } ) ( VAR_1 TYPE_2 VAR_1 ) ( id TYPE_3 id ) 
( p p   METHOD_1 ( ( value !   null ) ) ) ( value TYPE_1 value ) ( key TYPE_2 < TYPE_1 > key ) 
( VAR_3 VAR_3 ) ( VAR_1 TYPE_1 VAR_1 ) 
( TYPE_3 TYPE_3 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2.PatchSet patchSet ) { TYPE_1 p   new TYPE_1 ( ) ; p.revision   patchSet.getRevision ( ) .get ( ) ; VAR_1   TYPE_3.toString ( patchSet.METHOD_2 ( ) ) ; p.ref   patchSet.getRefName ( ) ; final TYPE_4 VAR_2   VAR_3.get ( patchSet.METHOD_3 ( ) ) ; VAR_4   METHOD_4 ( VAR_2.METHOD_5 ( ) ) ; return p ; } ) ( METHOD_1_return_line1_col365 return p ; ) ( VAR_2 VAR_2   VAR_3.get ( patchSet.METHOD_3 ( ) ) ) ( patchSet final TYPE_2.PatchSet patchSet ) ( p p   new TYPE_1 ( ) ) ( patchSet patchSet ) ( patchSet patchSet ) ( VAR_3 VAR_3 ) ( p p ) 
( Truth com.google.common.truth.Truth ) ( TYPE_1 TYPE_1 ) ( Truth com.google.common.truth.Truth ) 
( VAR_4 VAR_4   new TYPE_5 < TYPE_1 > ( VAR_1 ) ) ( VAR_1 TYPE_3 < TYPE_1 > VAR_1 ) ( METHOD_1_return private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { if ( VAR_2 ) { VAR_1.METHOD_2 ( VAR_3 ) ; return TYPE_4.METHOD_3 ( ) ; } TYPE_5 < TYPE_1 > VAR_4   new TYPE_5 < TYPE_1 > ( VAR_1 ) ; VAR_5.add ( VAR_4 ) ; VAR_6.add ( VAR_4 ) ; return VAR_4 ; } ) ( VAR_4 VAR_4 ) ( VAR_6 VAR_6 ) ( METHOD_1_return_line1_col281 return VAR_4 ; ) ( VAR_5 VAR_5 ) 
( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( in in   METHOD_2 ( STRING_1 ) ) ( out out   METHOD_3 ( in ) ) ( VAR_1 VAR_1 ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( n n   VAR_1.METHOD_3 ( ) ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1   commit.METHOD_2 ( VAR_2 ) ) ( METHOD_1_return private java.util.Set < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) { java.util.List < java.lang.String > VAR_1   commit.METHOD_2 ( VAR_2 ) ; if ( ( VAR_1.isEmpty ( ) ) || ( ( VAR_1.size ( ) ) > 1 ) ) { return null ; } if ( VAR_1.get ( 0 ) .isEmpty ( ) ) { return TYPE_1.of ( ) ; } else { return TYPE_2.METHOD_3 ( TYPE_3.on ( CHAR_1 ) .METHOD_4 ( VAR_1.get ( 0 ) ) ) ; } } ) ( commit commit ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2.METHOD_2 ( change.getProject ( ) .equals ( project ) ( STRING_1 + STRING_2 ) project changeId change.getProject ( ) ) ; return new TYPE_1 ( args change ) .METHOD_3 ( ) ; } ) ( TYPE_2 TYPE_2 ) 
( factory factory ) ( VAR_1 VAR_1   factory.create ( in out ) ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) ( n n   VAR_1.METHOD_3 ( TYPE_2.METHOD_4 ( new TYPE_3 ( STRING_2 STRING_3 ) ) ) ) 
( Collections java.util.Collections ) ( line line   ( cm.METHOD_1 ( ) .METHOD_2 ( ) ) ? cm.METHOD_3 ( cm.METHOD_1 ( ) .METHOD_4 ( ) ) : 0 ) ( res res   java.util.Collections.METHOD_5 ( VAR_1 new TYPE_1 ( cm.METHOD_6 ( ) 0 0 0 line false ) METHOD_7 ( ) ) ) 
( VAR_1 VAR_1   INT_1 ) ( c c   new TYPE_2 ( p VAR_2 ) ) ( p p   new TYPE_1 ( VAR_1 ) ) ( INT_1 INT_1 ) ( VAR_2 VAR_2   INT_2 ) ( INT_2 INT_2 ) 
( TYPE_3 TYPE_3 ) ( n n   TYPE_3.not ( p ) ) ( TYPE_2 TYPE_2 ) ( p p   TYPE_2.METHOD_2 ( STRING_1 STRING_2 ) ) 
( VAR_1 final org.eclipse.jgit.revwalk.RevCommit [ ] VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col533 return VAR_2 ; ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( final org.eclipse.jgit.revwalk.RevCommit [ ] VAR_1 final org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException TYPE_2 { java.util.List < TYPE_1 > VAR_2   new java.util.ArrayList < TYPE_1 > ( VAR_1.length ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_3 : VAR_1 ) { walk.METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4   new TYPE_3 ( VAR_3.getId ( ) .name ( ) ) ; java.lang.String msg   VAR_3.METHOD_3 ( ) ; VAR_2.add ( new TYPE_1 ( VAR_4 msg ) ) ; } return VAR_2 ; } ) ( walk final org.eclipse.jgit.revwalk.RevWalk walk ) ( VAR_2 VAR_2   new java.util.ArrayList < TYPE_1 > ( VAR_1.length ) ) 
( result TYPE_1 result ) 
( TYPE_1 TYPE_1 ) ( u u   user ( VAR_4 ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( e e ) ( VAR_1 VAR_1   e.getValue ( ) ) ( e TYPE_1 < java.lang.String > e ) 
( VAR_1 VAR_1 ) ( plugins plugins   VAR_1 ) ( plugins plugins ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   plugins.METHOD_3 ( STRING_1 ) ) ( i i   VAR_5.config ( ) .server ( ) .METHOD_7 ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_5 VAR_5 ) ( Truth com.google.common.truth.Truth ) ( VAR_4 VAR_4 ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( repo repo ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   repo.METHOD_3 ( ) ) ( repo repo   VAR_1.METHOD_2 ( project ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( project ) ; TYPE_2 VAR_2   repo.METHOD_3 ( ) ; return new TYPE_1 ( repo new org.eclipse.jgit.revwalk.RevWalk ( VAR_2.METHOD_4 ( ) ) VAR_2 new TYPE_3 ( ) true ) ; } ) 
( c c   get ( changeId VAR_1 VAR_2 ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.create ( VAR_4 ) ) ( VAR_1 TYPE_1 < TYPE_2.NameKey > VAR_1 ) 
( VAR_1 VAR_1   STRING_1 ) ( Truth com.google.common.truth.Truth ) ( r r ) ( STRING_1 STRING_1 ) ( VAR_2 VAR_2 ) ( r r   VAR_2.put ( ( ( STRING_2 + ( project.get ( ) ) ) + STRING_3 ) METHOD_3 ( VAR_1 ) ) ) 
( VAR_1 TYPE_2 VAR_1 ) ( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ( format )    ( VAR_2 ) ) { TYPE_4 VAR_3   new TYPE_4 ( ) ; display ( VAR_3 ) ; return TYPE_5.create ( VAR_3.METHOD_1 ( ) ) .METHOD_2 ( STRING_1 ) .METHOD_3 ( TYPE_6.name ( ) ) ; } return apply ( ) ; } ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) ( path java.lang.String path ) ( rw rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( METHOD_1_return public org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.lib.ObjectId VAR_1 java.lang.String path ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw.METHOD_2 ( rw.parseCommit ( VAR_1 ) ) ; rw.METHOD_3 ( false ) ; rw.METHOD_4 ( TYPE_1.create ( TYPE_2.METHOD_5 ( path ) VAR_2 ) ) ; return rw.METHOD_6 ( ) ; } finally { rw.METHOD_7 ( ) ; } } ) 
( VAR_2 VAR_2 ) ( METHOD_1_return private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) !   null ) { if ( ( VAR_1.METHOD_2 ( ) ) !   null ) { return VAR_1.METHOD_2 ( ) ; } return VAR_1.METHOD_3 ( ) .toString ( ) ; } return VAR_2.getName ( ) ; } ) 
( m final TYPE_1 m ) ( m m ) ( m m ) ( m m ) ( m m ) ( VAR_1 boolean VAR_1 ) 
( result TYPE_1 result ) ( b b   ( ( base ) !   null ) ? java.lang.String.METHOD_1 ( base.get ( ) ) : null ) ( VAR_1 VAR_1   java.lang.String.METHOD_1 ( revision.get ( ) ) ) ( String java.lang.String ) ( TYPE_2 TYPE_2 ) 
( VAR_1 VAR_1 ) ( VAR_2 VAR_2   notes.METHOD_4 ( ) ) ( TYPE_1 TYPE_1 ) ( req TYPE_2 req ) ( req req ) ( notes notes ) ( apply_return public TYPE_1 < ? extends java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException { TYPE_5 VAR_1   req.METHOD_1 ( ) ; TYPE_6 notes   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2   notes.METHOD_4 ( ) ; if ( VAR_2    null ) { VAR_2   java.util.Collections.METHOD_5 ( ) ; } return TYPE_1.METHOD_6 ( new TYPE_7 < java.lang.String > ( VAR_2 ) ) ; } ) ( VAR_1 VAR_1   req.METHOD_1 ( ) ) ( notes notes   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) 
( METHOD_1_return static java.lang.String METHOD_1 ( int change int patch java.lang.String branch ) { if ( ( branch.METHOD_2 ( TYPE_1 ) )    0 ) { branch   branch.METHOD_3 ( TYPE_1.length ( ) ) ; } return ( ( ( change + STRING_1 ) + patch ) + STRING_1 ) + branch ; } ) ( branch java.lang.String branch ) ( change int change ) ( patch int patch ) 
( msg TYPE_1 msg ) ( VAR_1 com.google.gerrit.reviewdb.client.PatchSetApproval VAR_1 ) 
( walk org.eclipse.jgit.revwalk.RevWalk walk ) ( out TYPE_1 out ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( path java.lang.String path ) ( repo org.eclipse.jgit.lib.Repository repo ) ( diff diff   new TYPE_4 ( VAR_3 out ) ) 
( VAR_2 VAR_2   false ) ( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) ) ( METHOD_1_return_line1_col398 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1   TYPE_3.METHOD_2 ( ) ; boolean VAR_2   false ; try { for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_1.METHOD_3 ( VAR_3.METHOD_4 ( event ) ) ; } } catch ( TYPE_5 e ) { VAR_1.add ( new TYPE_1 ( e.getMessage ( ) true ) ) ; VAR_2   true ; } if ( VAR_2 ) { METHOD_5 ( VAR_1 event ) ; } return VAR_1 ; } ) ( TYPE_3 TYPE_3 ) 
( equals_return public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { final TYPE_2 p   ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( METHOD_1 ( ) .equals ( p.METHOD_1 ( ) ) ) & & ( id.equals ( p.id ) ) ; } return false ; } ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_2 final java.util.Set < TYPE_2.Id > VAR_2 ) ( VAR_1 final TYPE_1.Id VAR_1 ) ( VAR_3 final TYPE_3 < TYPE_4 > VAR_3 ) ( TYPE_5 TYPE_5 ) ( msg final java.lang.String msg ) 
( TYPE_4 TYPE_4 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( account account ) ( VAR_2 VAR_2   TYPE_4.of ( ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ; account.METHOD_3 ( false ) ; java.util.Set < TYPE_3 > VAR_2   TYPE_4.of ( ) ; return new TYPE_1 ( VAR_3 account VAR_2 java.util.Collections.METHOD_4 ( ) new TYPE_5 < TYPE_6 java.util.Set < TYPE_7 > > ( ) ) ; } ) ( account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ) 
( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( final java.lang.String VAR_1 final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + key ) + STRING_3 ) ) { TYPE_3 METHOD_2 ( ) throws java.io.IOException { java.lang.String VAR_2   TYPE_4.METHOD_3 ( VAR_1 key ) ; return VAR_3.METHOD_4 ( TYPE_5.on ( STRING_4 ) .METHOD_5 ( VAR_4 STRING_5 VAR_1 ) VAR_2 ) ; } } .METHOD_6 ( ) ; } ) ( key final TYPE_1 key ) 
( VAR_1 VAR_1   TYPE_4.METHOD_2 ( VAR_2.get ( ) ) ) ( TYPE_4 TYPE_4 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1   TYPE_4.METHOD_2 ( VAR_2.get ( ) ) ; TYPE_1 VAR_3   new TYPE_1 ( VAR_1 ) ; try { if ( VAR_3.METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_4 ) { throw new TYPE_2 ( STRING_2 ) ; } } ) ( VAR_3 VAR_3   new TYPE_1 ( VAR_1 ) ) 
( METHOD_1_return private com.google.gerrit.reviewdb.client.Change.Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db java.lang.String VAR_1 java.lang.String java.lang.String email ) throws TYPE_1 TYPE_2 TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { TYPE_4.Key VAR_2   new TYPE_4.Key ( VAR_3 VAR_1 ) ; TYPE_5 VAR_4   db.METHOD_2 ( ) ; TYPE_4 VAR_5   VAR_4.get ( VAR_2 ) ; if ( VAR_5    null ) { return VAR_6.METHOD_3 ( VAR_1 email ) ; } return VAR_5.getAccountId ( ) ; } ) ( VAR_4 VAR_4 ) ( VAR_1 java.lang.String VAR_1 ) ( db db ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_2 VAR_2   new TYPE_4.Key ( VAR_3 VAR_1 ) ) ( VAR_4 VAR_4   db.METHOD_2 ( ) ) ( VAR_5 VAR_5 ) ( java.lang.String ) ( email java.lang.String email ) ( VAR_5 VAR_5   VAR_4.get ( VAR_2 ) ) 
( changes changes   METHOD_3 ( change ) ) ( change change   METHOD_2 ( git true ) ) ( Truth com.google.common.truth.Truth ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( commit_return public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException java.io.IOException { TYPE_1 VAR_1   VAR_2.create ( METHOD_1 ( ) ) ; VAR_1.add ( this ) ; TYPE_2.METHOD_2 ( getChange ( ) VAR_1.METHOD_3 ( ) .get ( getId ( ) ) ) ; VAR_1.METHOD_4 ( ) ; return METHOD_5 ( ) ; } ) ( VAR_1 VAR_1   VAR_2.create ( METHOD_1 ( ) ) ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) 
( res res ) ( VAR_5 VAR_5   STRING_3 ) ( VAR_4 VAR_4   res.METHOD_4 ( ) ) ( Truth com.google.common.truth.Truth ) ( result result ) ( STRING_3 STRING_3 ) ( VAR_4 VAR_4 ) ( res res   METHOD_2 ( path ( STRING_1 + VAR_1 ) VAR_2 ) ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return_line1_col549 return result ; ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String path java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res   METHOD_2 ( path ( STRING_1 + VAR_1 ) VAR_2 ) ; com.google.common.truth.Truth.assertThat ( res.METHOD_3 ( VAR_3 ) ) .isEqualTo ( STRING_2 ) ; java.lang.String VAR_4   res.METHOD_4 ( ) ; java.lang.String VAR_5   STRING_3 ; com.google.common.truth.Truth.assertThat ( VAR_4 ) .METHOD_5 ( VAR_5 ) ; java.lang.String result   VAR_4.METHOD_6 ( VAR_5.length ( ) ) ; VAR_6.METHOD_7 ( result ) ; return result ; } ) ( path java.lang.String path ) ( result result   VAR_4.METHOD_6 ( VAR_5.length ( ) ) ) ( VAR_6 VAR_6 ) ( Truth com.google.common.truth.Truth ) 
( topic java.lang.String topic ) ( TYPE_3 TYPE_3 ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2   TYPE_3.METHOD_1 ( id STRING_1 ) ) ( VAR_1 TYPE_1 < java.lang.String > VAR_1 ) ( id int id ) 
( METHOD_1_return_line1_col329 return VAR_5 ; ) ( VAR_5 VAR_5 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) & & ( ! ( METHOD_2 ( VAR_2 ) ) ) ) & & ( ! ( METHOD_3 ( ) ) ) ) { java.lang.String VAR_3   VAR_4.getProject ( ) .getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } if ( VAR_4.METHOD_4 ( ) ) { return METHOD_5 ( ) ; } return VAR_5 ; } ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( projectName projectName   result.getChange ( ) .change ( ) .getProject ( ) .get ( ) ) ( result result ) ( result result   METHOD_2 ( STRING_1 STRING_2 STRING_3 STRING_4 ) ) ( result result ) 
( TYPE_1 TYPE_1 ) 
( VAR_1 java.util.List < java.lang.String > VAR_1 ) ( METHOD_1_return private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema java.util.List < java.lang.String > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_2   new java.util.ArrayList < > ( VAR_1.size ( ) ) ; for ( java.lang.String s : VAR_1 ) { VAR_2.add ( TYPE_3.commit ( schema s ) ) ; } return VAR_2 ; } ) ( VAR_2 VAR_2   new java.util.ArrayList < > ( VAR_1.size ( ) ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col466 return VAR_2 ; ) ( schema TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema ) 
( rw rw ) ( METHOD_1_return private boolean METHOD_1 ( final TYPE_1 < TYPE_2 > refs ) throws java.io.IOException { METHOD_2 ( refs ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_1   new TYPE_3 < > ( ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_2   new TYPE_3 < > ( ) ; METHOD_3 ( VAR_1 VAR_2 ) ; rw.METHOD_4 ( ) ; return ( ! ( METHOD_5 ( VAR_2 1 ) .isEmpty ( ) ) ) || ( ! ( METHOD_5 ( VAR_1 1 ) .isEmpty ( ) ) ) ; } ) ( refs final TYPE_1 < TYPE_2 > refs ) ( VAR_2 VAR_2   new TYPE_3 < > ( ) ) ( VAR_1 VAR_1   new TYPE_3 < > ( ) ) 
( VAR_6 VAR_6 ) ( VAR_8 VAR_8 ) ( VAR_1 final boolean VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_2 final boolean VAR_2 ) ( VAR_7 VAR_7 ) ( VAR_9 VAR_9 ) ( VAR_3 final boolean VAR_3 ) ( VAR_5 VAR_5 ) 
( VAR_1 final int VAR_1 ) ( VAR_1 VAR_1 ) 
( VAR_3 VAR_3 ) ( STRING_1 STRING_1 ) ( VAR_3 VAR_3   new TYPE_1 ( STRING_3 ) ) ( VAR_2 VAR_2   new TYPE_1 ( VAR_1 ) ) ( VAR_1 VAR_1   STRING_1 ) 
( VAR_1 VAR_1   new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ) ( index final TYPE_2 index ) ( VAR_1 VAR_1 ) ( TYPE_6 TYPE_6 ) ( VAR_3 VAR_3   TYPE_6.METHOD_3 ( ) ) ( METHOD_1_return public TYPE_1.Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1   new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1.METHOD_2 ( 2 ) ; TYPE_6 VAR_3   TYPE_6.METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_4 ; try { VAR_4   METHOD_4 ( VAR_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5.error ( STRING_1 e ) ; return new TYPE_7.Result ( VAR_3 false 0 0 ) ; } return METHOD_5 ( index VAR_4 VAR_1 ) ; } ) ( VAR_4 VAR_4 ) 
( result TYPE_1 result ) 
( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_4 VAR_4   VAR_1.METHOD_1 ( ) .METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( VAR_3 TYPE_2 VAR_3 ) 
( VAR_2 VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2 ) ( METHOD_1_return private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String > VAR_2   TYPE_3.METHOD_2 ( ) ; while ( VAR_1 !   null ) { VAR_2.METHOD_3 ( VAR_1.value ( ) ) ; VAR_1   TYPE_4.METHOD_4 ( VAR_1 ) ; } VAR_2.METHOD_5 ( ) ; return VAR_2 ; } ) ( VAR_2 VAR_2   TYPE_3.METHOD_2 ( ) ) ( METHOD_1_return_line1_col281 return VAR_2 ; ) 
( msg java.lang.String msg ) ( info info ) 
( METHOD_1_return public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) !   null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status.getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } ) 
( java.lang.String ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( VAR_1 ) ) ( VAR_1 VAR_1   + STRING_1 ) ( METHOD_1_return protected java.lang.String METHOD_1 ( java.lang.String ) throws TYPE_1 { java.lang.String VAR_1   + STRING_1 ; TYPE_2 VAR_2   VAR_3.METHOD_2 ( VAR_1 ) ; if ( TYPE_3.METHOD_3 ( VAR_2 ) ) { return METHOD_4 ( VAR_1 ) ; } else { return METHOD_5 ( ) ; } } ) 
( java.lang.String ) ( VAR_3 TYPE_6 < TYPE_2 > VAR_3 ) ( VAR_2 TYPE_6 < TYPE_1 > VAR_2 ) ( VAR_5 VAR_5 ) ( VAR_4 TYPE_6 < TYPE_3 > VAR_4 ) ( VAR_1 TYPE_5 VAR_1 ) ( m m   new TYPE_8 ( this VAR_1 VAR_2 VAR_3 VAR_4 ) ) ( METHOD_1_return public synchronized < TYPE_1 TYPE_2 TYPE_3 > TYPE_4 < TYPE_1 TYPE_2 TYPE_3 > METHOD_1 ( java.lang.String TYPE_5 VAR_1 TYPE_6 < TYPE_1 > VAR_2 TYPE_6 < TYPE_2 > VAR_3 TYPE_6 < TYPE_3 > VAR_4 ) { TYPE_7.METHOD_2 ( VAR_1 ) ; TYPE_8 m   new TYPE_8 ( this VAR_1 VAR_2 VAR_3 VAR_4 ) ; METHOD_3 ( VAR_1 ) ; VAR_5.put ( m ) ; return m.METHOD_4 ( ) ; } ) ( TYPE_7 TYPE_7 ) ( m m ) 
( VAR_1 final TYPE_2 VAR_1 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2   new TYPE_4 ( VAR_1 ) ; TYPE_3 in   TYPE_5.METHOD_2 ( VAR_2 ) ) { return new TYPE_6 ( in ) ; } catch ( java.io.IOException e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) e ) ; } catch ( TYPE_8 e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) e ) ; } } ) 
( ctx ctx ) ( update update   ctx.METHOD_2 ( psId ) ) ( ctx TYPE_1 ctx ) ( ctx ctx ) 
( in TYPE_2 in ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes.id ( VAR_1.get ( ) .apply ( revision in ) .VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) 
( update TYPE_2 update ) ( event TYPE_1 event ) ( METHOD_1_return private static boolean METHOD_1 ( TYPE_1 event TYPE_2 update ) { return ( ( ( update !   null ) & & ( ( TYPE_3.METHOD_2 ( VAR_1 ) )    ( TYPE_3.METHOD_2 ( update.METHOD_3 ( ) ) ) ) ) & & ( VAR_2.equals ( update.METHOD_4 ( ) ) ) ) & & ( VAR_3.equals ( update.METHOD_5 ( ) ) ) ; } ) 
( VAR_4 final TYPE_2 < TYPE_1 > VAR_4 ) ( VAR_2 final boolean VAR_2 ) ( VAR_5 final TYPE_3 < TYPE_1 > VAR_5 ) ( VAR_3 final java.lang.String VAR_3 ) ( VAR_1 final java.lang.String VAR_1 ) 
( c c   getChange ( ) .change ( ) ) ( VAR_2 java.lang.String VAR_2 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_3 TYPE_1 ... VAR_3 ) ( VAR_1 com.google.gerrit.reviewdb.client.Change.Status VAR_1 ) 
( TYPE_3 TYPE_3 ) ( VAR_1 final TYPE_1 VAR_1 ) ( group TYPE_2 group ) 
( VAR_3 VAR_3   new TYPE_1 ( new TYPE_2 ( VAR_1 ) VAR_2 ) ) ( INT_2 INT_2 ) ( VAR_4 VAR_4   new TYPE_1 ( new TYPE_2 ( 0 ) 0 ) ) ( INT_1 INT_1 ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2   INT_2 ) ( VAR_1 VAR_1   INT_1 ) 
( java.lang.String ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException { try { org.eclipse.jgit.lib.ObjectId id   repo.METHOD_1 ( ) ; return id !   null ? walk.METHOD_2 ( id ) : null ; } catch ( TYPE_2 e ) { return null ; } catch ( TYPE_3 e ) { return null ; } catch ( TYPE_4 e ) { return null ; } } ) ( walk org.eclipse.jgit.revwalk.RevWalk walk ) 
( VAR_3 com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) ( db db ) ( VAR_5 VAR_5   db.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ) ( VAR_1 TYPE_1 VAR_1 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_4 TYPE_2 VAR_4 ) ( VAR_2 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 ) ( TYPE_4 TYPE_4 ) 
( VAR_1 VAR_1   new TYPE_1 ( server admin ) ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) 
( change TYPE_1.ChangeInfo change ) ( revision TYPE_2 revision ) ( VAR_2 TYPE_4 VAR_2 ) ( event event   new TYPE_5 ( change revision VAR_1 VAR_2 ) ) ( VAR_1 TYPE_3 VAR_1 ) 
( Assert org.junit.Assert ) ( changeId java.lang.String changeId ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( VAR_1 int VAR_1 ) ( c c   getChange ( changeId VAR_3 ) ) ( Assert org.junit.Assert ) 
( cmd final TYPE_1.ReceiveCommand cmd ) ( ctl ctl   VAR_1.METHOD_2 ( cmd.getRefName ( ) ) ) ( VAR_1 VAR_1 ) 
( VAR_1 boolean VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_5 VAR_5 ) ( VAR_6 VAR_6 ) ( commit commit ) ( VAR_4 VAR_4 ) 
( cm cm ) ( cm cm ) ( VAR_1 VAR_1 ) ( cm cm   VAR_1.create ( change.getId ( ) ) ) ( cm cm ) ( cm cm ) ( ctx TYPE_1 ctx ) ( cm cm ) 
( rw final org.eclipse.jgit.revwalk.RevWalk rw ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_3 final TYPE_2 VAR_3 ) ( VAR_2 final TYPE_2 VAR_2 ) ( METHOD_1_return public static boolean METHOD_1 ( final TYPE_1 VAR_1 final TYPE_2 VAR_2 final org.eclipse.jgit.revwalk.RevWalk rw final TYPE_2 VAR_3 ) throws TYPE_3 { if ( TYPE_4.METHOD_2 ( VAR_1 VAR_3 ) ) { return false ; } try { return ( VAR_2    null ) || ( rw.METHOD_3 ( VAR_2 VAR_3 ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) 
( to java.lang.String to ) ( VAR_1 java.lang.String VAR_1 ) ( table java.lang.String table ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( s s   ( ( TYPE_1 ) ( db ) ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String projectName ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey key   new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; org.eclipse.jgit.lib.Repository git   VAR_1.METHOD_2 ( key ) ; try { TYPE_2.ProjectConfig cfg   new TYPE_2.ProjectConfig ( key ) ; cfg.METHOD_1 ( git ) ; return VAR_2.create ( cfg ) ; } finally { git.close ( ) ; } } ) ( key key   new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ( git git   VAR_1.METHOD_2 ( key ) ) ( VAR_1 VAR_1 ) ( projectName java.lang.String projectName ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { switch ( type ) { case VAR_2 : this.VAR_3   ( VAR_1 !   null ) ? TYPE_2.METHOD_2 ( TYPE_3.METHOD_3 ( VAR_1 ) ) : null ; return this ; case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : default : throw new TYPE_4 ( java.lang.String.format ( STRING_1 type ) ) ; } } ) 
( n n   0 ) ( VAR_2 VAR_2   new char [ INT_1 ] ) ( VAR_1 VAR_1 ) ( is TYPE_1 is ) ( input input   new TYPE_3 ( is ) ) ( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 is ) throws java.io.IOException { VAR_1   new TYPE_2 ( ) ; TYPE_3 input   new TYPE_3 ( is ) ; char [ ] VAR_2   new char [ INT_1 ] ; int n   0 ; while ( ( n   input.METHOD_2 ( VAR_2 ) ) !   ( -1 ) ) { VAR_1.METHOD_3 ( VAR_2 0 n ) ; } return VAR_1.toString ( ) ; } ) 
( ctx TYPE_1 ctx ) ( ctx ctx ) ( patchSet patchSet ) 
( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1   STRING_1 + ( r.getChangeId ( ) ) ) ( Truth com.google.common.truth.Truth ) ( r r   METHOD_2 ( ) ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) 
( VAR_1 TYPE_1 [ ] VAR_1 ) ( d d   new TYPE_5 ( ) ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( VAR_2 VAR_2 ) ( commit_return public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException java.io.IOException { TYPE_1 VAR_1   VAR_2.create ( METHOD_1 ( ) ) ; VAR_1.add ( this ) ; TYPE_2.METHOD_2 ( getChange ( ) VAR_1.METHOD_3 ( ) .get ( ctl.getId ( ) ) ) ; VAR_1.METHOD_4 ( ) ; return METHOD_5 ( ) ; } ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   VAR_2.create ( METHOD_1 ( ) ) ) ( VAR_1 VAR_1 ) 
( index TYPE_1 index ) ( VAR_2 VAR_2 ) ( index index ) ( VAR_1 VAR_1   index.METHOD_2 ( ) .METHOD_3 ( ) ) 
( VAR_1 VAR_1   commit.METHOD_2 ( VAR_2 ) ) ( METHOD_1_return private PatchSet.Id METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1   commit.METHOD_2 ( VAR_2 ) ; if ( ( VAR_1.size ( ) ) !   1 ) { throw METHOD_3 ( STRING_1 VAR_2 VAR_1 ) ; } TYPE_2 psId   TYPE_3.METHOD_4 ( VAR_1.get ( 0 ) ) ; if ( psId    null ) { throw METHOD_3 ( STRING_2 VAR_2 VAR_1.get ( 0 ) ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) psId ) ; } ) ( commit commit ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( TYPE_3 TYPE_3 ) ( psId psId   TYPE_3.METHOD_4 ( VAR_1.get ( 0 ) ) ) 
( message message   VAR_4.get ( VAR_5 ) .commit.message ) ( info info   METHOD_5 ( METHOD_6 ( VAR_3 ) ) ) ( message VAR_4.get ( VAR_5 ) .commit.message ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1 ) 
( VAR_3 java.util.Map < java.lang.String TYPE_4 > VAR_3 ) ( create_return private static TYPE_1 create ( TYPE_2 VAR_1 TYPE_3 < TYPE_2 > VAR_2 java.util.Map < java.lang.String TYPE_4 > VAR_3 java.lang.String VAR_4 java.lang.String VAR_5 ) { return new TYPE_5 ( VAR_1 TYPE_6.METHOD_1 ( VAR_2 ) TYPE_7.METHOD_1 ( VAR_3 ) VAR_4 VAR_5 ) ; } ) ( VAR_2 TYPE_3 < TYPE_2 > VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_5 java.lang.String VAR_5 ) ( VAR_4 java.lang.String VAR_4 ) 
( r TYPE_1.Result r ) ( repo repo   VAR_1.METHOD_4 ( project ) ) ( VAR_1 VAR_1 ) 
( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 TYPE_3 input ) throws TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException { TYPE_7 in   new TYPE_7 ( ) ; VAR_2   TYPE_8.of ( id ) ; java.util.List < TYPE_1 > VAR_3   put.get ( ) .apply ( VAR_1 in ) ; if ( ( VAR_3.size ( ) )    1 ) { return VAR_3.get ( 0 ) ; } else { throw new TYPE_9 ( ) ; } } ) ( in in   new TYPE_7 ( ) ) ( VAR_3 VAR_3   put.get ( ) .apply ( VAR_1 in ) ) ( put put ) ( TYPE_8 TYPE_8 ) ( VAR_1 TYPE_2 VAR_1 ) ( input TYPE_3 input ) 
( METHOD_1_return public static boolean METHOD_1 ( ) { return ( ( ( TYPE_1.METHOD_2 ( ) .METHOD_3 ( ) ) !   null ) & & ( TYPE_1.METHOD_4 ( ) .auth ( ) .METHOD_5 ( ) ) ) & & ( ! ( TYPE_1.METHOD_2 ( ) .METHOD_6 ( ) ) ) ; } ) 
( Collections java.util.Collections ) ( TYPE_7 TYPE_7 ) ( VAR_2 VAR_2   java.util.Collections.METHOD_4 ( ) ) ( Collections java.util.Collections ) ( VAR_4 VAR_4   TYPE_7.of ( ) ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ; account.METHOD_3 ( false ) ; TYPE_3 < TYPE_4 > VAR_2   java.util.Collections.METHOD_4 ( ) ; TYPE_3 < TYPE_5 > VAR_3   java.util.Collections.METHOD_4 ( ) ; java.util.Set < TYPE_6 > VAR_4   TYPE_7.of ( ) ; return new TYPE_1 ( account VAR_4 VAR_2 VAR_3 ) ; } ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( VAR_3 VAR_3   java.util.Collections.METHOD_4 ( ) ) ( account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ) ( account account ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( final TYPE_2.PatchSetApproval VAR_1 ) { if ( VAR_1 !   null ) { return VAR_2.create ( VAR_1.getAccountId ( ) ) .METHOD_2 ( VAR_1.METHOD_3 ( ) VAR_3.METHOD_4 ( ) ) ; } return VAR_3 ; } ) ( VAR_1 final TYPE_2.PatchSetApproval VAR_1 ) ( METHOD_1_return_line1_col225 return VAR_3 ; ) ( VAR_3 VAR_3 ) 
( METHOD_1_return_line1_col486 return result ; ) ( VAR_1 java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_1 ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return private java.util.Set < TYPE_1 > METHOD_1 ( java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < TYPE_1 > result   TYPE_3.METHOD_2 ( VAR_1.size ( ) ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_1 ) { TYPE_1 commit   VAR_2.get ( cd.getId ( ) ) ; TYPE_4.METHOD_3 ( ( commit !   null ) STRING_1 cd.change ( ) .getId ( ) ) ; result.add ( commit ) ; } return result ; } ) ( result result   TYPE_3.METHOD_2 ( VAR_1.size ( ) ) ) ( result result ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( db TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) ( METHOD_1_return private TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id com.google.gerrit.reviewdb.client.PatchSetApproval > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { VAR_1   TYPE_3.create ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval VAR_2 : com.google.gerrit.server.query.change.ChangeData.METHOD_2 ( db.get ( ) .METHOD_3 ( ) .METHOD_4 ( VAR_3 ) ) ) { VAR_1.put ( VAR_2.METHOD_5 ( ) VAR_2 ) ; } } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col549 return VAR_1 ; ) 
( res res ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1   TYPE_1.METHOD_2 ( git VAR_2 ) ) 
( METHOD_1_return public java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String TYPE_1 > ) ( VAR_1.get ( ) .METHOD_2 ( base ) .apply ( revision ) .value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) ( base java.lang.String base ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > factory ) { java.util.List < TYPE_1 > VAR_1   TYPE_3.METHOD_2 ( ) ; for ( TYPE_4 VAR_2 : VAR_3 ) { for ( TYPE_5 < ? > VAR_4 : VAR_2.METHOD_3 ( ) ) { VAR_1.add ( factory.METHOD_4 ( VAR_4 ) ) ; } } return VAR_1 ; } ) ( TYPE_3 TYPE_3 ) ( factory TYPE_2 < TYPE_1 > factory ) ( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) ) ( METHOD_1_return_line1_col297 return VAR_1 ; ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return changes.id ( VAR_1.get ( ) .apply ( revision null ) .VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 e ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) 
( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.get ( ) ) 
( notes notes ) ( VAR_1 VAR_1   notes.getChange ( ) .METHOD_2 ( ) ) ( METHOD_1_return public boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1   notes.getChange ( ) .METHOD_2 ( ) ; if ( ( VAR_1 !   null ) & & ( METHOD_3 ( ) .METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id   METHOD_3 ( ) .getAccountId ( ) ; return id.equals ( VAR_1.get ( ) ) ; } return false ; } ) 
( TYPE_6 TYPE_6 ) ( VAR_6 byte [ ] VAR_6 ) ( VAR_7 VAR_7 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_3 org.eclipse.jgit.revwalk.RevCommit VAR_3 ) ( VAR_4 TYPE_3 VAR_4 ) ( VAR_5 java.lang.String VAR_5 ) ( METHOD_1_return private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 VAR_1 org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.revwalk.RevWalk rw TYPE_2 VAR_2 org.eclipse.jgit.revwalk.RevCommit VAR_3 TYPE_3 VAR_4 java.lang.String VAR_5 byte [ ] VAR_6 org.eclipse.jgit.revwalk.RevCommit base ) throws TYPE_4 java.io.IOException { TYPE_5 VAR_7   TYPE_6.METHOD_2 ( VAR_4 VAR_3 ) ; TYPE_6.METHOD_3 ( VAR_1 repo rw base VAR_7.METHOD_4 ( ) VAR_2 VAR_5 VAR_6 ) ; return VAR_7.METHOD_5 ( VAR_2 ) ; } ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( base org.eclipse.jgit.revwalk.RevCommit base ) ( TYPE_6 TYPE_6 ) ( VAR_7 VAR_7   TYPE_6.METHOD_2 ( VAR_4 VAR_3 ) ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) 
( VAR_1 VAR_1   factory.create ( in out ) ) ( VAR_1 VAR_1 ) ( factory factory ) 
( u u   util.user ( VAR_1 VAR_4 ) ) ( util util ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { final java.lang.String VAR_2   TYPE_1.get ( VAR_1 ) ; boolean VAR_3 ; try { VAR_3   METHOD_2 ( VAR_2 null ) ; } catch ( TYPE_2 e ) { VAR_3   false ; } return VAR_3 ? TYPE_1.METHOD_3 ( VAR_1 ) : null ; } ) ( VAR_2 VAR_2   TYPE_1.get ( VAR_1 ) ) ( TYPE_1 TYPE_1 ) ( VAR_3 VAR_3 ) 
( event final TYPE_1 < TYPE_2 > event ) 
( TYPE_1 TYPE_1 ) ( STRING_1 STRING_1 ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_3 VAR_3 ) ( r r   VAR_3.put ( ( ( STRING_2 + ( project.get ( ) ) ) + STRING_3 ) METHOD_3 ( VAR_1 ) ) ) ( Truth com.google.common.truth.Truth ) ( r r ) 
( VAR_1 TYPE_2 < TYPE_3 TYPE_4 > VAR_1 ) ( METHOD_1_return TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 TYPE_4 > VAR_1 ) throws java.io.IOException { TYPE_5 p   METHOD_2 ( ) ; if ( ( VAR_2 ) !   null ) { return new TYPE_6 ( VAR_1 VAR_2 ) ; } else { return new TYPE_7 ( VAR_1 VAR_3 p.METHOD_3 ( ) ) ; } } ) ( p p   METHOD_2 ( ) ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_1 VAR_1 ) ( change com.google.gerrit.reviewdb.client.Change change ) ( cd cd   VAR_1.create ( db change.getProject ( ) change.getId ( ) ) ) ( cd cd ) ( user TYPE_2 user ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change change TYPE_2 user ) throws com.google.gwtorm.server.OrmException java.io.IOException TYPE_3 TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd   VAR_1.create ( db change.getProject ( ) change.getId ( ) ) ; cd.METHOD_2 ( user ) ; if ( TYPE_5.METHOD_3 ( cfg ) ) { return METHOD_4 ( db new TYPE_1 ( cd db null ) user ) ; } return METHOD_5 ( db new TYPE_1 ( cd db null ) user ) ; } ) 
( VAR_2 VAR_2   false ) ( METHOD_1_return_line1_col347 return VAR_2 ; ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2   false ; for ( TYPE_2 ref : VAR_3.values ( ) ) { TYPE_3.AccountGroup VAR_4   VAR_1.get ( ref.METHOD_2 ( ) ) ; if ( ( VAR_4 !   null ) & & ( ! ( VAR_4.getName ( ) .equals ( ref.getName ( ) ) ) ) ) { VAR_2   true ; ref.METHOD_3 ( VAR_4.getName ( ) ) ; } } return VAR_2 ; } ) 
( VAR_2 VAR_2 ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( VAR_1 VAR_1   VAR_2.METHOD_3 ( TYPE_3.METHOD_4 ( STRING_2 ) ) .getAccountId ( ) .get ( ) ) 
( STRING_1 STRING_1 ) ( VAR_1 VAR_1   STRING_1 ) ( Truth com.google.common.truth.Truth ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) ( TYPE_3 TYPE_3 ) ( VAR_3 VAR_3   VAR_4.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) ( p p   VAR_2.projects ( ) .name ( ( VAR_1 + STRING_2 ) ) .create ( ) .get ( ) ) ( Truth com.google.common.truth.Truth ) 
( VAR_3 VAR_3   METHOD_4 ( ps ) ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) ) ) ( ps ps   VAR_1.to ( git STRING_1 ) .METHOD_3 ( ) ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1 ) 
( p p   VAR_2.projects ( ) .create ( VAR_1 ) .get ( ) ) ( VAR_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) ( TYPE_3 TYPE_3 ) ( Truth com.google.common.truth.Truth ) ( VAR_3 VAR_3   VAR_4.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) ( VAR_1 VAR_1   STRING_1 ) ( STRING_1 STRING_1 ) ( VAR_4 VAR_4 ) 
( Collections java.util.Collections ) ( group_return private com.google.gerrit.reviewdb.client.AccountGroup group ( java.lang.String ) throws java.lang.Exception { TYPE_1 args   new TYPE_1 ( ) ; args.METHOD_1 ( ) ; VAR_1   java.util.Collections.singleton ( admin.getId ( ) ) ; return VAR_2.create ( args ) .METHOD_2 ( ) ; } ) ( args args   new TYPE_1 ( ) ) ( args args ) ( VAR_2 VAR_2 ) ( java.lang.String ) 
( TYPE_1 TYPE_1 ) ( path java.lang.String path ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_2 VAR_2   new TYPE_4.Key ( VAR_3 VAR_1 ) ) ( VAR_4 VAR_4 ) ( VAR_5 VAR_5   VAR_4.get ( VAR_2 ) ) ( email java.lang.String email ) ( db db ) ( VAR_4 VAR_4   db.METHOD_2 ( ) ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.Change.Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db java.lang.String VAR_1 java.lang.String java.lang.String email ) throws TYPE_1 TYPE_2 TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { TYPE_4.Key VAR_2   new TYPE_4.Key ( VAR_3 VAR_1 ) ; TYPE_5 VAR_4   db.METHOD_2 ( ) ; TYPE_4 VAR_5   VAR_4.get ( VAR_2 ) ; if ( VAR_5    null ) { return VAR_6.METHOD_3 ( VAR_1 email ) ; } else { return VAR_5.getAccountId ( ) ; } } ) ( java.lang.String ) 
( METHOD_1_return_line1_col256 return VAR_1 ; ) ( METHOD_1_return protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1   new TYPE_2 < java.lang.String > ( ) ; VAR_1.add ( STRING_1 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1.add ( c.getName ( ) ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1   new TYPE_2 < java.lang.String > ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( VAR_2 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ( n n ) ( r r ) ( n n   ( VAR_2.get ( ) ) % INT_1 ) ( nodeCall_append_return r.append ( VAR_1 ) ) ( METHOD_1_return private static java.lang.StringBuilder METHOD_1 ( java.lang.String VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( VAR_1 ) ; int n   ( VAR_2.get ( ) ) % INT_1 ; if ( n < INT_2 ) { r.append ( CHAR_1 ) ; } r.append ( n ) ; r.append ( CHAR_2 ) ; r.append ( VAR_2.get ( ) ) ; r.append ( CHAR_2 ) ; return r ; } ) ( VAR_1 java.lang.String VAR_1 ) ( r r ) ( nodeCall_append_return r.append ( n ) ) ( METHOD_1_return_line1_col418 return r ; ) ( r r ) ( r r ) ( VAR_1 VAR_1 ) ( r r ) ( r r   new java.lang.StringBuilder ( ) ) ( r r ) 
( token final java.lang.String token ) ( id final TYPE_1.Key id ) ( line final int line ) ( TYPE_2 TYPE_2 ) 
( VAR_2 VAR_2   VAR_1.getAccountId ( ) ) ( METHOD_1_return TYPE_1 METHOD_1 ( final TYPE_2.Key key final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2   VAR_1.getAccountId ( ) ; final boolean VAR_3   VAR_1.METHOD_2 ( ) ; final TYPE_3.Key VAR_4   VAR_1.METHOD_3 ( ) ; return METHOD_1 ( key VAR_2 VAR_3 VAR_4 VAR_5 ) ; } ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( key final TYPE_2.Key key ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( ) ) ( VAR_4 VAR_4   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( m m ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 long VAR_2 ) ( d d   TYPE_1.METHOD_2 ( VAR_2 TYPE_2 ) ) ( TYPE_3 TYPE_3 ) ( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) ( n java.lang.String n ) ( METHOD_1_return private long METHOD_1 ( java.lang.String n java.lang.String VAR_1 long VAR_2 ) { final long d   TYPE_1.METHOD_2 ( VAR_2 TYPE_2 ) ; final long m ; m   TYPE_3.METHOD_3 ( config STRING_1 n VAR_1 d TYPE_1 ) ; return TYPE_2.METHOD_2 ( m TYPE_1 ) ; } ) 
( VAR_1 java.util.List < TYPE_1 > VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( p p ) ( get_return private TYPE_1 get ( ) { TYPE_1 p   VAR_1 ; if ( ( VAR_2 ) & & ( p.METHOD_1 ( ) ) ) { final TYPE_1 VAR_3 ; try { VAR_3   new TYPE_1 ( ) ; } catch ( java.io.IOException e ) { VAR_4.error ( STRING_1 e ) ; return p ; } p   VAR_3 ; VAR_1   p ; } return p ; } ) ( p p   VAR_1 ) ( get_return_line1_col267 return p ; ) ( VAR_1 VAR_1 ) 
( changes changes   METHOD_4 ( change ) ) ( git git   METHOD_2 ( ) ) ( change change   METHOD_3 ( git true ) ) ( Assert org.junit.Assert ) 
( result result   new TYPE_2 < > ( ) ) ( result result ) ( METHOD_1_return private java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 notes ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > result   new TYPE_2 < > ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : VAR_1.METHOD_2 ( db.get ( ) notes ) ) { java.util.List < java.lang.String > VAR_2   ps.METHOD_3 ( ) ; if ( VAR_2 !   null ) { result.METHOD_4 ( VAR_2 ) ; } } return result ; } ) ( notes TYPE_1 notes ) ( METHOD_1_return_line1_col422 return result ; ) 
( VAR_1 TYPE_1 VAR_1 ) 
( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 TYPE_3 TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException java.io.IOException TYPE_7 { final TYPE_8 result   VAR_1.create ( VAR_2 message ) .METHOD_1 ( ) ; if ( ( result.METHOD_2 ( ) .size ( ) ) > 0 ) { throw new TYPE_6 ( result.getChangeId ( ) ) ; } return VAR_3.create ( result.getChangeId ( ) ) .METHOD_1 ( ) ; } ) ( result result   VAR_1.create ( VAR_2 message ) .METHOD_1 ( ) ) 
( TYPE_2 TYPE_2 ) ( u u   util.user ( VAR_1 VAR_4 ) ) ( r r ) ( r r ) ( util util ) ( TYPE_2 TYPE_2 ) ( r r   TYPE_2.METHOD_2 ( VAR_1 VAR_2 VAR_3 STRING_1 ) ) 
( config config ) ( VAR_1 VAR_1   VAR_2.create ( project ) ) ( config config ) ( config config   TYPE_4.METHOD_2 ( VAR_1 ) ) ( VAR_2 VAR_2 ) ( VAR_3 VAR_3 ) ( value TYPE_1 value ) ( TYPE_4 TYPE_4 ) 
( VAR_2 final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 ) ( TYPE_6 TYPE_6 ) ( VAR_1 final TYPE_1.Key VAR_1 ) ( VAR_4 final TYPE_2 VAR_4 ) ( VAR_3 final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 ) ( VAR_5 final TYPE_3 < TYPE_4 > VAR_5 ) 
( project final TYPE_1.NameKey project ) ( ref final java.lang.String ref ) 
( VAR_1 TYPE_1 VAR_1 ) 
( create_return public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r   new java.util.ArrayList < TYPE_2 > ( out.size ( ) ) ; for ( final com.google.gerrit.reviewdb.client.Account a : out.values ( ) ) { r.add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } ) ( r r   new java.util.ArrayList < TYPE_2 > ( out.size ( ) ) ) 
( METHOD_1_return public boolean METHOD_1 ( ) { if ( ( TYPE_1.equals ( VAR_1 ) ) & & ( ! ( VAR_2.METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2.METHOD_3 ( ) .METHOD_4 ( ) ) & & ( METHOD_5 ( ) .METHOD_6 ( ) .METHOD_7 ( ) ) ) ) { return false ; } } return ( METHOD_8 ( VAR_3 ) ) & & ( METHOD_9 ( ) ) ; } ) 
( id com.google.gerrit.reviewdb.client.PatchSet.Id id ) ( VAR_1 boolean VAR_1 ) ( VAR_3 TYPE_1 < java.lang.String > VAR_3 ) ( VAR_2 java.lang.String VAR_2 ) ( TYPE_2 TYPE_2 ) 
( METHOD_1_return private int METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > s ) { int n   ( VAR_1.METHOD_2 ( s ) ) ? VAR_1.METHOD_3 ( s ) : VAR_2 ; return ( VAR_3 ) > 0 ? ( TYPE_2.METHOD_4 ( n VAR_3 ) ) + 1 : n ; } ) ( n n   ( VAR_1.METHOD_2 ( s ) ) ? VAR_1.METHOD_3 ( s ) : VAR_2 ) ( s TYPE_1 < com.google.gerrit.server.query.change.ChangeData > s ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( VAR_1.METHOD_3 ( METHOD_2 ( ) ) ) ) || ( VAR_1.METHOD_1 ( ) ) ) & & ( VAR_1.METHOD_4 ( ) .METHOD_5 ( VAR_2 ) ) ) & & ( METHOD_6 ( ) .METHOD_7 ( ) .METHOD_8 ( ) ) ) & & ( ! ( METHOD_9 ( db ) ) ) ; } ) 
( VAR_1 final TYPE_2.Id VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2.Id VAR_1 ) throws TYPE_3 { final TYPE_4.AccountGroup group   VAR_2.get ( VAR_1 ) ; if ( group    null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user.get ( ) group ) ; } ) ( VAR_2 VAR_2 ) ( group group   VAR_2.get ( VAR_1 ) ) 
( VAR_1 VAR_1 ) ( METHOD_1_return protected TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String ) throws java.lang.Exception { TYPE_3 create   VAR_1.create ( ) ; create.apply ( VAR_2 new TYPE_4 ( ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_3.METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( ) ) ) ; } ) ( create create ) ( create create   VAR_1.create ( ) ) ( java.lang.String ) 
( VAR_2 VAR_2 ) ( r r   new java.util.ArrayList < TYPE_2 > ( result.size ( ) ) ) ( result final java.util.List < TYPE_1 > result ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.client.AccountGroup > schema TYPE_3 cfg TYPE_4 VAR_1 ) throws java.io.IOException { if ( TYPE_5.METHOD_2 ( cfg ) ) { return new TYPE_6 ( ) ; } TYPE_7 VAR_2   TYPE_8.METHOD_3 ( VAR_1 ( ( VAR_3 ) + STRING_1 ) schema ) ; return TYPE_9.METHOD_4 ( VAR_2 ) ; } ) ( cfg TYPE_3 cfg ) ( TYPE_8 TYPE_8 ) ( VAR_1 TYPE_4 VAR_1 ) ( VAR_2 VAR_2   TYPE_8.METHOD_3 ( VAR_1 ( ( VAR_3 ) + STRING_1 ) schema ) ) ( TYPE_9 TYPE_9 ) ( schema TYPE_2 < com.google.gerrit.reviewdb.client.AccountGroup > schema ) 
( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( final java.lang.String VAR_1 final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( METHOD_2 ( key ) ) ) + STRING_3 ) ) { TYPE_3 METHOD_3 ( ) throws java.io.IOException { java.lang.String VAR_2   TYPE_4.METHOD_4 ( VAR_1 key ) ; return VAR_3.METHOD_5 ( TYPE_5.on ( STRING_4 ) .METHOD_6 ( VAR_4 STRING_5 VAR_1 ) VAR_2 ) ; } } .METHOD_7 ( ) ; } ) ( key final TYPE_1 key ) 
( VAR_1 VAR_1   insert ( METHOD_3 ( repo ) ) ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( VAR_2 VAR_2   insert ( METHOD_3 ( repo ) ) ) 
( change change   METHOD_5 ( VAR_1 input.message VAR_2.METHOD_6 ( ) ) ) ( input final TYPE_3 input ) ( req TYPE_2 req ) ( apply_return public TYPE_1.ChangeInfo apply ( TYPE_2 req final TYPE_3 input ) throws TYPE_4 TYPE_5 com.google.gwtorm.server.OrmException { TYPE_6 VAR_1   req.METHOD_1 ( ) ; TYPE_7 VAR_2   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ; if ( ! ( VAR_1.METHOD_4 ( VAR_3.get ( ) ) ) ) { throw new TYPE_8 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change   METHOD_5 ( VAR_1 input.message VAR_2.METHOD_6 ( ) ) ; return VAR_4.create ( VAR_5 ) .format ( change ) ; } ) ( VAR_1 VAR_1   req.METHOD_1 ( ) ) ( VAR_1 VAR_1 ) ( VAR_4 VAR_4 ) ( req req ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) 
( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { TYPE_2.Key key   new TYPE_2.Key ( VAR_2 VAR_1 ) ; return auth ( db.METHOD_3 ( ) .get ( key ) ) ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ) .log ( STRING_1 e ) ; return null ; } } ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) { final TYPE_1 user   VAR_1.METHOD_1 ( ) ; if ( ( user !   null ) & & ( user.METHOD_2 ( ) ) ) { TYPE_2 VAR_2   VAR_3.create ( ( ( TYPE_2 ) ( user ) ) .getAccountId ( ) ) ; VAR_2.METHOD_3 ( user.METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } ) ( VAR_1 VAR_1 ) ( user user ) ( METHOD_1_return_line1_col284 return user ; ) ( user user   VAR_1.METHOD_1 ( ) ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) ( TYPE_2 TYPE_2 ) 
( me me   getAccountId ( ) ) ( VAR_3 VAR_3 ) ( run_return public TYPE_1 run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws TYPE_2 com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me   getAccountId ( ) ; for ( final TYPE_3.Key VAR_1 : VAR_2 ) { if ( ! ( me.equals ( VAR_1.getParentKey ( ) ) ) ) throw new TYPE_2 ( new TYPE_4 ( ) ) ; } db.METHOD_1 ( ) .METHOD_2 ( VAR_2 ) ; return VAR_3 ; } ) ( run_return_line1_col403 return VAR_3 ; ) ( db final com.google.gerrit.reviewdb.server.ReviewDb db ) ( db db ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   new TYPE_2 ( admin ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( result result   VAR_1.METHOD_2 ( STRING_1 ) ) ( Assert org.junit.Assert ) 
( r r   VAR_1.delete ( ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) + ( branch.METHOD_2 ( ) ) ) ) ) ( Assert org.junit.Assert ) ( r r ) ( VAR_1 VAR_1 ) 
( psId psId ) ( psId psId ) ( VAR_1 VAR_1 ) ( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId org.eclipse.jgit.lib.ObjectId VAR_1 int VAR_2 ) { TYPE_1 result   new TYPE_1 ( ) ; VAR_3   psId.getParentKey ( ) .get ( ) ; result.commit   new TYPE_2 ( ) ; VAR_4.commit   VAR_1.name ( ) ; VAR_5   psId.get ( ) ; VAR_6   VAR_2 ; result.status   STRING_1 ; return result ; } ) ( METHOD_1_return_line1_col376 return result ; ) ( result result ) ( VAR_2 VAR_2 ) ( result result   new TYPE_1 ( ) ) ( STRING_1 STRING_1 ) ( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( VAR_2 int VAR_2 ) 
( repo repo   METHOD_2 ( STRING_1 ) ) ( VAR_1 VAR_1   insert ( METHOD_3 ( repo null null null null ) ) ) ( VAR_2 VAR_2   insert ( METHOD_3 ( repo null null null null ) ) ) 
( repo repo   VAR_1.METHOD_1 ( change.getProject ( ) ) ) ( change change   edit.getChange ( ) ) ( VAR_1 VAR_1 ) ( edit edit ) ( edit TYPE_1 edit ) ( VAR_2 VAR_2 ) 
( VAR_1 final java.lang.String VAR_1 ) ( err final TYPE_2 err ) ( schema schema ) ( METHOD_1_return private TYPE_1.OrmException METHOD_1 ( final java.lang.String VAR_1 final TYPE_2 err ) { if ( ( ( err.METHOD_2 ( ) )    null ) & & ( ( err.METHOD_3 ( ) ) !   null ) ) { err.METHOD_4 ( err.METHOD_3 ( ) ) ; } return schema.METHOD_5 ( ) .METHOD_1 ( VAR_1 TYPE_3.METHOD_6 ( ) err ) ; } ) 
( in final java.lang.String in ) 
( VAR_1 byte [ ] VAR_1 ) ( p TYPE_1 p ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) .equals ( VAR_2 ) ) { return VAR_1.METHOD_2 ( ) .METHOD_4 ( VAR_3 ) ; } return VAR_1.METHOD_5 ( ) .METHOD_6 ( VAR_2 ) .METHOD_4 ( VAR_3 ) ; } ) 
( db db ) ( group group ) ( group group   db.METHOD_2 ( ) .get ( VAR_1 ) ) ( run_return_line1_col374 return VAR_3 ; ) ( db final TYPE_2.ReviewDb db ) ( db db ) ( run_return public TYPE_1 run ( final TYPE_2.ReviewDb db ) throws TYPE_3 TYPE_4.OrmException { METHOD_1 ( db VAR_1 ) ; final TYPE_2.AccountGroup group   db.METHOD_2 ( ) .get ( VAR_1 ) ; if ( group    null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } group.METHOD_3 ( VAR_2 ) ; db.METHOD_2 ( ) .update ( java.util.Collections.singleton ( group ) ) ; return VAR_3 ; } ) ( VAR_3 VAR_3 ) 
( run_return public TYPE_1 run ( final TYPE_2.ReviewDb db ) throws TYPE_3 TYPE_4.OrmException { final TYPE_2.Change change   db.changes ( ) .get ( id ) ; if ( change    null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1   new TYPE_6 ( ) ; final TYPE_1 d   new TYPE_1 ( ) ; d.METHOD_1 ( db new TYPE_7 ( db ) VAR_1 change ) ; return d ; } ) ( d d ) ( change change   db.changes ( ) .get ( id ) ) ( VAR_1 VAR_1   new TYPE_6 ( ) ) ( d d ) ( db db ) ( db final TYPE_2.ReviewDb db ) ( run_return_line1_col367 return d ; ) ( d d   new TYPE_1 ( ) ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( commit_return public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException java.io.IOException { TYPE_1 VAR_1   VAR_2.create ( METHOD_1 ( ) ) ; VAR_1.add ( this ) ; VAR_1.METHOD_2 ( getChange ( ) ) ; VAR_1.METHOD_3 ( ) ; return METHOD_4 ( ) ; } ) ( VAR_1 VAR_1   VAR_2.create ( METHOD_1 ( ) ) ) ( VAR_2 VAR_2 ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2.equals ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ) { return VAR_1.METHOD_2 ( ) .METHOD_4 ( VAR_3 VAR_4 ) ; } else { TYPE_4 VAR_5   VAR_1.METHOD_2 ( ) .METHOD_5 ( ) .METHOD_6 ( VAR_2 ) ; return VAR_5.METHOD_4 ( VAR_3 ) ; } } ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_1 TYPE_3 VAR_1 ) 
( METHOD_1_return private Project.NameKey METHOD_1 ( TYPE_1 p ) { java.lang.String projectName   VAR_1.METHOD_2 ( p ) .toString ( ) ; if ( ( VAR_2 ) !   CHAR_1 ) { projectName   projectName.METHOD_3 ( VAR_2 CHAR_1 ) ; } if ( projectName.METHOD_4 ( TYPE_2 ) ) { int VAR_3   ( projectName.length ( ) ) - ( TYPE_2.length ( ) ) ; projectName   projectName.METHOD_5 ( 0 VAR_3 ) ; } return new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; } ) ( VAR_1 VAR_1 ) ( p TYPE_1 p ) ( projectName projectName   VAR_1.METHOD_2 ( p ) .toString ( ) ) 
( TYPE_1 TYPE_1 ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return private static TYPE_1.Test METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1.equals ( VAR_1 ) ) { return VAR_2 ; } else if ( STRING_2.equals ( VAR_1 ) ) { return VAR_3 ; } else if ( STRING_3.equals ( VAR_1 ) ) { return VAR_4 ; } else { throw new TYPE_2 ( ( STRING_4 + VAR_1 ) ) ; } } ) 
( change change   VAR_1.get ( ) ) ( VAR_1 VAR_1 ) ( event final TYPE_1 event ) 
( METHOD_1_return protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1   new TYPE_2 < java.lang.String > ( ) ; VAR_1.add ( STRING_1 ) ; VAR_1.add ( STRING_2 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1.add ( c.getName ( ) ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col283 return VAR_1 ; ) ( VAR_1 VAR_1   new TYPE_2 < java.lang.String > ( ) ) 
( s s   METHOD_2 ( ) ) ( METHOD_1_return public java.lang.String METHOD_1 ( ) { final java.lang.String s   METHOD_2 ( ) ; if ( ( s    null ) || ( ( s.length ( ) )    0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1   s.METHOD_3 ( STRING_2 ) ; if ( ( VAR_1.length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ INT_1 ] ; } ) ( s s ) ( VAR_1 VAR_1   s.METHOD_3 ( STRING_2 ) ) 
( config config   STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ( VAR_1 VAR_1   new TYPE_1 ( new TYPE_2 ( projectName config ) new TYPE_3 ( STRING_5 STRING_6 ) new TYPE_4 ( ) ) ) ( Truth com.google.common.truth.Truth ) 
( VAR_3 java.util.Set < java.lang.String > VAR_3 ) ( VAR_4 java.util.Set < java.lang.String > VAR_4 ) ( VAR_5 TYPE_2 VAR_5 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( change com.google.gerrit.reviewdb.client.Change change ) ( VAR_2 TYPE_1 < java.lang.String > VAR_2 ) 
( VAR_1 VAR_1   STRING_1 ) ( Assert org.junit.Assert ) ( VAR_2 VAR_2   METHOD_2 ( STRING_4 ) ) ( repo repo ) ( STRING_1 STRING_1 ) 
( VAR_2 TYPE_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) ( VAR_1 java.util.Set < TYPE_1 > VAR_1 ) 
( VAR_1 VAR_1 ) ( info TYPE_2 info ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( revision revision ) ( revision TYPE_2 revision ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : break ; case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : default : revision   TYPE_3.METHOD_2 ( revision VAR_14 ) ; TYPE_4.METHOD_3 ( ( revision    ( VAR_14 ) ) STRING_1 type ) ; break ; } this.VAR_15   revision ; return this ; } ) 
( METHOD_1_return public final java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1   new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : TYPE_2.METHOD_2 ( METHOD_3 ( ) ) ) { VAR_1.add ( VAR_2.get ( ) ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new java.util.ArrayList < > ( ) ) ( METHOD_1_return_line1_col258 return VAR_1 ; ) 
( METHOD_1_return public static com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id org.eclipse.jgit.lib.ObjectId revision com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.PatchSet ps   new com.google.gerrit.reviewdb.client.PatchSet ( id ) ; ps.METHOD_2 ( new TYPE_1 ( revision.name ( ) ) ) ; ps.METHOD_3 ( VAR_1 ) ; ps.METHOD_4 ( TYPE_2.METHOD_5 ( ) ) ; return ps ; } ) ( id com.google.gerrit.reviewdb.client.PatchSet.Id id ) ( ps ps   new com.google.gerrit.reviewdb.client.PatchSet ( id ) ) ( ps ps ) ( revision org.eclipse.jgit.lib.ObjectId revision ) ( ps ps ) ( METHOD_1_return_line1_col462 return ps ; ) ( ps ps ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( ps ps ) 
( METHOD_1_return private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo   VAR_2.METHOD_2 ( VAR_3 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { TYPE_1 VAR_4   repo.METHOD_3 ( ) ; return VAR_4.METHOD_4 ( VAR_1 ) .METHOD_5 ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo.close ( ) ; } } ) ( VAR_1 java.lang.String VAR_1 ) ( repo repo ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( factory factory ) ( cfg TYPE_1 cfg ) 
( VAR_2 java.lang.String VAR_2 ) ( VAR_1 TYPE_3 VAR_1 ) ( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2.equals ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ) { return VAR_1.METHOD_2 ( ) .METHOD_4 ( VAR_3 VAR_4 ) ; } TYPE_4 VAR_5   VAR_1.METHOD_2 ( ) .METHOD_5 ( ) .METHOD_6 ( VAR_2 ) ; return VAR_5.METHOD_4 ( VAR_3 ) ; } ) ( VAR_1 VAR_1 ) ( VAR_5 VAR_5 ) ( VAR_5 VAR_5   VAR_1.METHOD_2 ( ) .METHOD_5 ( ) .METHOD_6 ( VAR_2 ) ) 
( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) ( VAR_5 TYPE_6 VAR_5 ) ( VAR_6 VAR_6   VAR_1.values ( ) ) ( VAR_4 TYPE_1 < TYPE_4 < TYPE_5 > > VAR_4 ) ( TYPE_2 TYPE_2 ) ( VAR_2 TYPE_3 VAR_2 ) ( cmd cmd   new TYPE_7 ( VAR_1 VAR_6 VAR_2 VAR_3 VAR_4 VAR_5 ) ) ( VAR_3 TYPE_1 < TYPE_4 < TYPE_5 > > VAR_3 ) ( VAR_1 VAR_1 ) 
( walk walk ) ( VAR_1 VAR_1   walk.METHOD_2 ( id ) ) ( id org.eclipse.jgit.lib.ObjectId id ) ( walk walk ) ( java.lang.String ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( java.lang.String org.eclipse.jgit.lib.ObjectId id org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException TYPE_2 { TYPE_3 VAR_1   walk.METHOD_2 ( id ) ; TYPE_3 VAR_2   walk.METHOD_1 ( VAR_1 ) ; return new TYPE_1 ( VAR_1 VAR_1.METHOD_3 ( ) VAR_2 VAR_2.METHOD_3 ( ) ) ; } ) ( VAR_2 VAR_2   walk.METHOD_1 ( VAR_1 ) ) ( walk org.eclipse.jgit.revwalk.RevWalk walk ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { final TYPE_2.Key key   new TYPE_2.Key ( VAR_2 VAR_1 ) ; final TYPE_2 id   db.METHOD_3 ( ) .get ( key ) ; if ( id !   null ) { return TYPE_1.of ( id.getAccountId ( ) ) ; } return TYPE_1.METHOD_4 ( ) ; } finally { db.close ( ) ; } } ) ( schema schema ) ( db db   schema.METHOD_2 ( ) ) 
