( METHOD_1_return private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { db.create ( ) ; TYPE_2.ProjectConfig c   new TYPE_2.ProjectConfig ( VAR_1 ) ; org.eclipse.jgit.lib.Repository repo   VAR_2.METHOD_2 ( VAR_1 ) ; try { c.METHOD_3 ( repo ) ; return new TYPE_1 ( TYPE_3.METHOD_4 ( c.METHOD_5 ( ) .values ( ) ) ) ; } finally { repo.close ( ) ; } } ) ( repo repo   VAR_2.METHOD_2 ( VAR_1 ) ) ( db db ) ( c c   new TYPE_2.ProjectConfig ( VAR_1 ) ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 id ) throws TYPE_4 com.google.gwtorm.server.OrmException { TYPE_5 user   VAR_1.METHOD_2 ( ) ; try { user.METHOD_3 ( ) ; TYPE_6 change   changes.METHOD_1 ( VAR_2 id ) ; if ( user.METHOD_4 ( ) .contains ( change.getChange ( ) .getId ( ) ) ) { return new TYPE_7 ( user change ) ; } throw new TYPE_4 ( id ) ; } finally { user.METHOD_5 ( ) ; } } ) ( user user   VAR_1.METHOD_2 ( ) ) ( id TYPE_3 id ) ( VAR_1 TYPE_2 VAR_1 ) 
( METHOD_1_return private java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) !   null ) { final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( METHOD_2 ( ) ) ; r.append ( STRING_1 ) ; return r.toString ( ) ; } return null ; } ) 
( path path   config.METHOD_2 ( ) .METHOD_3 ( ) ) ( config config ) ( config TYPE_1 config ) 
( change change ) ( change com.google.gerrit.reviewdb.client.Change change ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change TYPE_2 user ) throws TYPE_3 com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1   change.getProject ( ) ; try { return VAR_2.METHOD_1 ( VAR_1 user ) .METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) e ) ; } } ) ( user TYPE_2 user ) ( VAR_1 VAR_1   change.getProject ( ) ) 
( toString_return public java.lang.String toString ( ) { final java.lang.String VAR_1   getValue ( ) ; if ( TYPE_1.METHOD_1 ( VAR_1 ) ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + VAR_1 ; } else { return ( ( ( METHOD_2 ( ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ; } } ) ( VAR_1 VAR_1   getValue ( ) ) 
( VAR_2 VAR_2   new TYPE_4 ( r.METHOD_3 ( ) ) ) ( VAR_2 VAR_2 ) ( r TYPE_2 r ) ( METHOD_1_return private < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 r TYPE_3 < TYPE_1 > VAR_1 ) throws java.lang.Exception { r.METHOD_2 ( ) ; TYPE_4 VAR_2   new TYPE_4 ( r.METHOD_3 ( ) ) ; VAR_2.METHOD_4 ( true ) ; return METHOD_5 ( ) .METHOD_6 ( VAR_2 VAR_1 ) ; } ) ( VAR_1 TYPE_3 < TYPE_1 > VAR_1 ) ( r r ) 
( VAR_2 VAR_2 ) ( METHOD_1_return java.util.List < TYPE_1 > METHOD_1 ( ) { if ( VAR_1 ) { return METHOD_2 ( ) ; } java.util.List < TYPE_1 > VAR_2   TYPE_2.METHOD_3 ( ) ; for ( TYPE_3 s : METHOD_4 ( ) ) { VAR_2.METHOD_5 ( s.METHOD_2 ( ) ) ; } return VAR_2 ; } ) ( METHOD_1_return_line1_col234 return VAR_2 ; ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   TYPE_2.METHOD_3 ( ) ) 
( ctl ctl   VAR_1.get ( ) .METHOD_2 ( ) ) ( VAR_1 VAR_1 ) 
( d d ) ( db TYPE_2.ReviewDb db ) ( db db ) ( run_return public TYPE_1 run ( TYPE_2.ReviewDb db ) throws TYPE_3 TYPE_4.OrmException { final TYPE_2.AccountGroup group   db.METHOD_1 ( ) .get ( VAR_1 ) ; METHOD_2 ( db group ) ; final TYPE_1 d   new TYPE_1 ( ) ; final boolean VAR_2   TYPE_5.METHOD_3 ( ) .METHOD_4 ( group.getId ( ) ) ; d.METHOD_5 ( db new TYPE_6 ( db ) group VAR_2 ) ; return d ; } ) ( d d   new TYPE_1 ( ) ) ( VAR_2 VAR_2   TYPE_5.METHOD_3 ( ) .METHOD_4 ( group.getId ( ) ) ) ( d d ) ( group group   db.METHOD_1 ( ) .get ( VAR_1 ) ) ( TYPE_5 TYPE_5 ) ( run_return_line1_col372 return d ; ) 
( ref java.lang.String ref ) ( Collections java.util.Collections ) ( changeId java.lang.String changeId ) ( VAR_2 VAR_2 ) ( METHOD_1_return protected TYPE_1.Result METHOD_1 ( java.lang.String changeId java.lang.String ref ) throws java.io.IOException TYPE_2 { java.util.Collections.METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_2   VAR_3.create ( db admin.METHOD_3 ( ) VAR_4 VAR_5 new java.lang.String ( TYPE_4.METHOD_4 ( VAR_1 ) ) changeId ) ; return VAR_2.to ( git ref ) ; } ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.create ( db admin.METHOD_3 ( ) VAR_4 VAR_5 new java.lang.String ( TYPE_4.METHOD_4 ( VAR_1 ) ) changeId ) ) 
( change change   insert ( METHOD_3 ( repo null null null null ) ) ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( key key   change.getKey ( ) .get ( ) ) ( change change ) 
( group group   VAR_2.get ( new TYPE_4.NameKey ( n ) ) ) ( METHOD_1_return public final int METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { final java.lang.String n   VAR_1.METHOD_2 ( 0 ) ; final TYPE_3.AccountGroup group   VAR_2.get ( new TYPE_4.NameKey ( n ) ) ; if ( group    null ) { throw new TYPE_2 ( VAR_3 ( ( STRING_1 + n ) + STRING_2 ) ) ; } VAR_4.METHOD_3 ( group.getId ( ) ) ; return 1 ; } ) ( n n   VAR_1.METHOD_2 ( 0 ) ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( VAR_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( result final java.util.List < TYPE_1.Branch > result ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String VAR_1 TYPE_2 project ) { for ( TYPE_2 p : project.METHOD_2 ( ) ) { TYPE_3 cfg   VAR_2.METHOD_3 ( p VAR_3 ) ; if ( cfg.METHOD_4 ( VAR_4 ) .contains ( VAR_1 ) ) { return new TYPE_4 ( cfg ) .METHOD_1 ( VAR_1 ) ; } } return new TYPE_4 ( VAR_2.METHOD_5 ( VAR_3 ) ) .METHOD_1 ( VAR_1 ) ; } ) ( project TYPE_2 project ) 
( TYPE_1 TYPE_1 ) ( message java.lang.String message ) 
( METHOD_1_return TYPE_1 METHOD_1 ( java.lang.String ) { try { TYPE_2 p   METHOD_2 ( ) ; return VAR_1.get ( p METHOD_3 ( p ) ) ; } catch ( TYPE_3 e ) { VAR_2.METHOD_4 ( java.lang.String.format ( STRING_1 ) e ) ; return null ; } } ) ( java.lang.String ) 
( VAR_3 VAR_3   new java.util.ArrayList < > ( ) ) ( Assert org.junit.Assert ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_4 VAR_4   VAR_5.get ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) .METHOD_4 ( ) .METHOD_5 ( ) .METHOD_2 ( ) .METHOD_6 ( ) ) ( VAR_2 java.lang.String ... VAR_2 ) ( VAR_5 VAR_5 ) 
( TYPE_1 TYPE_1 ) ( factory factory ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   factory.create ( user.id ) ) 
( id TYPE_3 id ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 id ) throws TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException { if ( ! ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } return new TYPE_1 ( VAR_1 id.get ( ) ) ; } ) 
( METHOD_1_return static boolean METHOD_1 ( final int VAR_1 ) { switch ( VAR_1 ) { case CHAR_1 : case CHAR_2 : case CHAR_3 : case CHAR_4 : case CHAR_5 : case CHAR_6 : case CHAR_7 : return false ; default : if ( ( ( ( CHAR_8 <   VAR_1 ) & & ( VAR_1 <   CHAR_9 ) ) || ( ( CHAR_10 <   VAR_1 ) & & ( VAR_1 <   CHAR_11 ) ) ) || ( ( CHAR_12 <   VAR_1 ) & & ( VAR_1 <   CHAR_13 ) ) ) { return false ; } else { return true ; } } } ) ( VAR_1 final int VAR_1 ) 
( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( changeId java.lang.String changeId ) ( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2   VAR_3.get ( STRING_1 ) ) ( c c   getChange ( changeId VAR_1 ) ) ( VAR_3 VAR_3 ) 
( VAR_1 VAR_1   VAR_2.create ( ) ) ( VAR_2 VAR_2 ) ( me me   user.getAccountId ( ) ) ( user user ) ( METHOD_1_return public AccountGroup.Id METHOD_1 ( ) throws TYPE_1 TYPE_2.OrmException { final TYPE_3 VAR_1   VAR_2.create ( ) ; final TYPE_4.Id me   user.getAccountId ( ) ; return VAR_1.METHOD_2 ( VAR_3 null null me ) ; } ) ( VAR_1 VAR_1 ) 
( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_4 VAR_4 ) ( Truth com.google.common.truth.Truth ) ( p p   VAR_2.projects ( ) .create ( ( VAR_1 + STRING_2 ) ) .get ( ) ) ( STRING_1 STRING_1 ) ( VAR_3 VAR_3   VAR_4.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) ( VAR_2 VAR_2 ) ( TYPE_3 TYPE_3 ) 
( VAR_4 byte [ ] VAR_4 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 TYPE_3 VAR_3 ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( base org.eclipse.jgit.revwalk.RevCommit base ) ( path java.lang.String path ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1   VAR_2.create ( cd ) .METHOD_2 ( patchSet ) .METHOD_1 ( ) ; if ( ( VAR_1.status ) !   ( VAR_3 ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; } return VAR_1.type ; } ) ( METHOD_1_return_line1_col397 return VAR_1.type ; ) ( VAR_1 VAR_1   VAR_2.create ( cd ) .METHOD_2 ( patchSet ) .METHOD_1 ( ) ) ( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( VAR_2 VAR_2 ) ( type VAR_1.type ) 
( me final TYPE_1 me ) ( METHOD_1_return private static java.lang.String METHOD_1 ( final TYPE_1 me ) { if ( me    null ) { return STRING_1 ; } try { final TYPE_2 VAR_1   new TYPE_2 ( me ) ; try { TYPE_3 VAR_2   VAR_1.METHOD_2 ( ) ; TYPE_4 VAR_3   VAR_2.METHOD_3 ( ) ; java.lang.String VAR_4   VAR_3.getValue ( VAR_5 ) ; return VAR_4 !   null ? VAR_4 : STRING_1 ; } finally { VAR_1.close ( ) ; } } catch ( java.io.IOException e ) { return STRING_1 ; } } ) 
( Assert org.junit.Assert ) ( VAR_1 VAR_1   repo.METHOD_2 ( STRING_1 ) ) ( repo repo ) ( repo repo ) ( VAR_4 VAR_4   METHOD_5 ( STRING_4 STRING_5 ) ) 
( TYPE_1 TYPE_1 ) 
( VAR_2 VAR_2   new TYPE_3 < > ( VAR_1 ) ) ( VAR_5 VAR_5 ) ( key final TYPE_1 key ) ( TYPE_4 TYPE_4 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_4 VAR_4 ) 
( info TYPE_1 info ) 
( req TYPE_1 req ) ( res res ) ( res TYPE_2.HttpServletResponse res ) ( VAR_1 TYPE_3 VAR_1 ) ( VAR_2 TYPE_4 VAR_2 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) ) & & ( ! ( METHOD_4 ( ) ) ) ) { return VAR_2 ; } else if ( VAR_3.get ( ) ) { return VAR_4 ; } final long VAR_5   METHOD_5 ( VAR_6 ) ; if ( VAR_5 <   0 ) { return VAR_7 ; } else { return VAR_8 ; } } ) ( VAR_5 VAR_5   METHOD_5 ( VAR_6 ) ) 
( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( repo org.eclipse.jgit.lib.Repository repo ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.lib.ObjectId VAR_1 org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { TYPE_2.Key key   new TYPE_2.Key ( VAR_1 VAR_2 VAR_3 ) ; return new TYPE_3 ( key VAR_4 project repo ) .METHOD_2 ( ) ; } catch ( java.io.IOException e ) { VAR_5.METHOD_3 ( ( ( ( STRING_1 + ( VAR_2.name ( ) ) ) + STRING_2 ) + project ) e ) ; return VAR_6 ; } } ) 
( VAR_1 VAR_1   new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( r r   METHOD_3 ( STRING_2 ) ) ( TYPE_5 TYPE_5 ) ( Assert org.junit.Assert ) ( TYPE_1 TYPE_1 ) ( TYPE_4 TYPE_4 ) ( result result   TYPE_4.METHOD_5 ( r ) ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( ! ( METHOD_2 ( ) .METHOD_3 ( ) ) ) || ( METHOD_4 ( db ) ) ) || ( ! ( METHOD_5 ( VAR_1.METHOD_6 ( db notes ) db ) ) ) ) { return false ; } if ( METHOD_7 ( ) ) { return true ; } return METHOD_2 ( ) .METHOD_1 ( ) ; } ) 
( id id   res.getAccountId ( ) ) ( VAR_4 VAR_4 ) ( VAR_1 final boolean VAR_1 ) ( res final TYPE_1 res ) ( res res ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2   res.METHOD_2 ( ) ) ( res res ) 
( event TYPE_1 event ) ( event event ) ( event event ) 
( METHOD_1_return private java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2.ChangeInfo change ) { java.util.Set < TYPE_1 > result   new TYPE_3 < TYPE_1 > ( change.METHOD_2 ( ) .length ( ) ) ; for ( int i   0 ; i < ( change.METHOD_2 ( ) .length ( ) ) ; i++ ) { result.add ( change.METHOD_2 ( ) .get ( i ) .METHOD_3 ( ) ) ; } return result ; } ) ( result result   new TYPE_3 < TYPE_1 > ( change.METHOD_2 ( ) .length ( ) ) ) ( change TYPE_2.ChangeInfo change ) ( result result ) ( METHOD_1_return_line1_col334 return result ; ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 STRING_1 1 ) ) ( VAR_3 VAR_3   METHOD_2 ( VAR_2 STRING_2 1 ) ) ( Assert org.junit.Assert ) 
( r TYPE_2 < com.google.gerrit.server.query.change.ChangeData > r ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > r ) throws TYPE_3 { if ( ( r.METHOD_2 ( ) .METHOD_3 ( ) )    0 ) { return TYPE_4.METHOD_4 ( r.METHOD_5 ( ) .getName ( ) TYPE_5.METHOD_6 ( r.METHOD_7 ( ) ) VAR_1 true true ) ; } throw new TYPE_3 ( ( STRING_1 + r ) ) ; } ) 
( STRING_1 STRING_1 ) ( TYPE_1 TYPE_1 ) ( e e   TYPE_1.METHOD_2 ( ) ) (   STRING_1 ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( METHOD_1_return public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { int n   ( VAR_2.METHOD_2 ( ) ) - 1 ; TYPE_1.METHOD_3 ( ( ( VAR_1.size ( ) ) <   n ) STRING_1 n ) ; return query ( TYPE_2.METHOD_4 ( TYPE_3.project ( project ) TYPE_2.METHOD_5 ( TYPE_3.METHOD_6 ( TYPE_3.schema ( VAR_3 ) VAR_1 ) ) ) ) ; } ) ( VAR_1 java.util.List < java.lang.String > VAR_1 ) ( n n   ( VAR_2.METHOD_2 ( ) ) - 1 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( METHOD_1_return private java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { java.util.List < java.lang.String > r   TYPE_1.METHOD_2 ( ) ; for ( TYPE_2 w : db.get ( ) .METHOD_3 ( ) .METHOD_4 ( VAR_1 psId ) ) { r.add ( w.getKey ( ) .METHOD_5 ( ) .METHOD_6 ( ) ) ; } return r ; } ) ( METHOD_1_return_line1_col430 return r ; ) ( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( r r   TYPE_1.METHOD_2 ( ) ) ( TYPE_1 TYPE_1 ) ( r r ) 
( VAR_1 java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > VAR_1 ) ( args TYPE_2 args ) ( METHOD_1_return_line1_col445 return r ; ) ( r r ) ( METHOD_1_return private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 args java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r   TYPE_3.METHOD_2 ( VAR_1.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change.Id id : VAR_1 ) { r.add ( new TYPE_4 ( args id ) ) ; } return r ; } ) ( TYPE_3 TYPE_3 ) ( r r   TYPE_3.METHOD_2 ( VAR_1.size ( ) ) ) 
( TYPE_3 TYPE_3 ) ( TYPE_1 TYPE_1 ) ( c c   METHOD_2 ( ) ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   TYPE_1.METHOD_3 ( new java.lang.String [ ] { STRING_1 STRING_2 } ) ) ( m m   TYPE_3.METHOD_4 ( repo c VAR_1 ) ) 
( METHOD_1_return public boolean METHOD_1 ( ) { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_2 ( ) ) ) || ( METHOD_4 ( ) .METHOD_2 ( ) ) ) || ( METHOD_5 ( ) .METHOD_6 ( ) .METHOD_7 ( ) ) ; } ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 id ) throws TYPE_4 TYPE_5 java.io.IOException { TYPE_2 p   VAR_2.METHOD_1 ( VAR_3 id ) ; for ( TYPE_6 VAR_4 : p.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_4 ( ) ) { if ( VAR_1.METHOD_5 ( ) .equals ( VAR_4.getProject ( ) .METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 p.METHOD_2 ( ) ) ; } } throw new TYPE_4 ( id ) ; } ) ( id TYPE_3 id ) ( VAR_1 TYPE_2 VAR_1 ) ( p p   VAR_2.METHOD_1 ( VAR_3 id ) ) ( VAR_2 VAR_2 ) 
( TYPE_2 TYPE_2 ) ( TYPE_3 TYPE_3 ) ( m m   TYPE_2.METHOD_3 ( repo c ) ) ( VAR_1 VAR_1   TYPE_3.of ( STRING_1 STRING_2 ) ) ( Truth com.google.common.truth.Truth ) ( c c   METHOD_2 ( ) ) 
( m m ) ( VAR_2 VAR_2 ) ( message_return private TYPE_1 message ( TYPE_2 ctx com.google.gerrit.reviewdb.client.PatchSet.Id psId java.lang.String VAR_1 ) { TYPE_3.METHOD_1 ( psId ) ; java.lang.String VAR_2 ; try { VAR_2   TYPE_4.METHOD_2 ( ctx.METHOD_3 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return null ; } TYPE_1 m   new TYPE_1 ( new TYPE_1.Key ( psId.getParentKey ( ) VAR_2 ) ctx.METHOD_4 ( ) .getAccountId ( ) ctx.METHOD_5 ( ) psId ) ; m.METHOD_6 ( VAR_1 ) ; return m ; } ) ( message_return_line1_col493 return m ; ) ( ctx TYPE_2 ctx ) ( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( m m ) ( VAR_1 java.lang.String VAR_1 ) ( TYPE_3 TYPE_3 ) ( m m   new TYPE_1 ( new TYPE_1.Key ( psId.getParentKey ( ) VAR_2 ) ctx.METHOD_4 ( ) .getAccountId ( ) ctx.METHOD_5 ( ) psId ) ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_1 ) ) 
( commit TYPE_1 commit ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 )    null ) || ( ( VAR_1.get ( STRING_1 ) )    null ) ) { return new TYPE_1 [ 0 ] ; } return VAR_1.get ( STRING_1 ) .METHOD_2 ( new TYPE_1 [ 0 ] ) ; } ) 
( e TYPE_1 e ) ( TYPE_2 TYPE_2 ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1.length ( ) ) <   ( VAR_2 ) ) { return VAR_1 ; } else { int VAR_3   VAR_1.METHOD_2 ( CHAR_1 ) ; return VAR_3 >   0 ? STRING_1 + ( VAR_1.METHOD_3 ( VAR_3 ) ) : VAR_1 ; } } ) 
( VAR_3 VAR_3   new TYPE_1 ( ) ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw TYPE_2 VAR_1 org.eclipse.jgit.lib.ObjectId VAR_2 ) throws com.google.gwtorm.server.OrmException java.io.IOException { TYPE_1 VAR_3   new TYPE_1 ( ) ; VAR_3.METHOD_2 ( STRING_1 ) ; try { org.eclipse.jgit.lib.ObjectId VAR_4   METHOD_3 ( rw VAR_1 VAR_2 ) ; if ( VAR_4    null ) { return null ; } VAR_3.METHOD_4 ( TYPE_3.METHOD_5 ( VAR_4 ) ) ; } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_3 ; } ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( METHOD_1_return_line1_col521 return VAR_3 ; ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3 ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) 
( cd com.google.gerrit.server.query.change.ChangeData cd ) ( id id   TYPE_2.METHOD_1 ( cd ) ) ( TYPE_2 TYPE_2 ) 
( VAR_1 VAR_1 ) 
( apply_return public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 TYPE_4 input ) throws TYPE_5 TYPE_6 TYPE_7 TYPE_8 TYPE_9 java.io.IOException { if ( VAR_1.METHOD_1 ( ) ) { TYPE_10 in   new TYPE_10 ( ) ; VAR_2   ( input !   null ) ? VAR_3 : null ; return VAR_4.get ( ) .apply ( VAR_1 in ) ; } throw new TYPE_7 ( ) ; } ) ( VAR_1 TYPE_3 VAR_1 ) ( input TYPE_4 input ) 
( get_return_line1_col282 return VAR_2 ; ) ( VAR_2 VAR_2 ) ( get_return public TYPE_1 get ( ) { if ( ! ( VAR_1 ) ) { synchronized ( VAR_2 ) { if ( ( ! ( VAR_2.METHOD_1 ( ) ) ) & & ( ! ( VAR_2.METHOD_2 ( ) ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 VAR_2.METHOD_3 ( ) getName ( ) ) ) ; } VAR_1   true ; } } return VAR_2 ; } ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_1 ) ) 
( VAR_2 TYPE_2 VAR_2 ) ( VAR_3 VAR_3   TYPE_3.METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ) ( TYPE_3 TYPE_3 ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String VAR_1 TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 VAR_3   TYPE_3.METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ; if ( VAR_2 !   null ) { VAR_3.METHOD_3 ( new TYPE_4 ( STRING_2 STRING_3 ) ) ; VAR_3.METHOD_4 ( new TYPE_5 ( TYPE_6.METHOD_5 ( ) .METHOD_6 ( VAR_2 ) TYPE_7.name ( ) ) ) ; } return METHOD_7 ( VAR_3 ) ; } ) 
( METHOD_1_return public static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r   new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( INT_1 ) ; for ( final com.google.gerrit.reviewdb.client.Change.Status e : TYPE_3.values ( ) ) { if ( e.METHOD_2 ( ) ) { r.add ( new TYPE_4 ( VAR_1 e ) ) ; } } return ( r.size ( ) )    1 ? r.get ( 0 ) : METHOD_3 ( r ) ; } ) ( VAR_1 TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) ( r r   new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( INT_1 ) ) 
( VAR_1 VAR_1 ) ( VAR_4 VAR_4 ) ( METHOD_1_return_line1_col351 return VAR_1 ; ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) ( VAR_3 VAR_3 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1   METHOD_2 ( VAR_2 ) ; METHOD_3 ( admin ) ; VAR_3.changes ( ) .id ( VAR_1.changeId ) .revision ( STRING_1 ) .METHOD_4 ( TYPE_2.METHOD_5 ( ) ) ; VAR_3.changes ( ) .id ( VAR_1.changeId ) .revision ( STRING_1 ) .submit ( ) ; VAR_4.METHOD_6 ( ) ; return VAR_1 ; } ) 
( input input   new TYPE_1 ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) 
( METHOD_1_return_line1_col348 return VAR_3 ; ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) { com.google.gerrit.reviewdb.client.PatchSet.Id id   ( VAR_1.METHOD_2 ( ) ) ? VAR_2.METHOD_3 ( ) : VAR_1.METHOD_3 ( ) ; TYPE_2 VAR_3   new TYPE_2 ( new TYPE_3 ( ) .METHOD_4 ( TYPE_4.edit ( ) ) ( STRING_1 + ( TYPE_5.METHOD_5 ( id path ) ) ) ) ; VAR_3.METHOD_6 ( TYPE_6.edit ( ) ) ; return VAR_3 ; } ) ( VAR_3 VAR_3 ) ( id id   ( VAR_1.METHOD_2 ( ) ) ? VAR_2.METHOD_3 ( ) : VAR_1.METHOD_3 ( ) ) ( VAR_3 VAR_3   new TYPE_2 ( new TYPE_3 ( ) .METHOD_4 ( TYPE_4.edit ( ) ) ( STRING_1 + ( TYPE_5.METHOD_5 ( id path ) ) ) ) ) ( VAR_3 VAR_3 ) 
( VAR_1 final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet p : VAR_1.METHOD_2 ( ) ) { if ( ( ( p.getRevision ( ) ) !   null ) & & ( ( p.getRevision ( ) .get ( ) ) !   null ) ) { final org.eclipse.jgit.lib.ObjectId id   org.eclipse.jgit.lib.ObjectId.METHOD_3 ( p.getRevision ( ) .get ( ) ) ; if ( ( VAR_2.METHOD_4 ( id ) )    0 ) { return true ; } } } return false ; } ) 
( e TYPE_1 < TYPE_2 < ? ? > > e ) ( METHOD_1_return private static java.lang.String METHOD_1 ( TYPE_1 < TYPE_2 < ? ? > > e ) { if ( STRING_1.equals ( e.METHOD_2 ( ) ) ) { return e.METHOD_3 ( ) ; } else { return java.lang.String.format ( STRING_2 e.METHOD_2 ( ) e.METHOD_3 ( ) ) ; } } ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2   METHOD_2 ( ) ) ( change change   METHOD_3 ( git ) ) 
( METHOD_1_return public static com.google.gerrit.reviewdb.client.Change METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project TYPE_1 user ) { com.google.gerrit.reviewdb.client.Change.Id changeId   new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) ; com.google.gerrit.reviewdb.client.Change c   new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change.Key ( STRING_1 ) changeId user.METHOD_2 ( ) .getId ( ) new TYPE_2.NameKey ( project STRING_2 ) TYPE_3.METHOD_3 ( ) ) ; TYPE_4.METHOD_4 ( c ) ; return c ; } ) ( c c ) ( c c   new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change.Key ( STRING_1 ) changeId user.METHOD_2 ( ) .getId ( ) new TYPE_2.NameKey ( project STRING_2 ) TYPE_3.METHOD_3 ( ) ) ) ( TYPE_4 TYPE_4 ) ( user TYPE_1 user ) ( METHOD_1_return_line1_col578 return c ; ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( changeId changeId   new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) ) 
( METHOD_1_return private static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user.METHOD_2 ( ) ) { return ( ( TYPE_2 ) ( user ) ) .getAccountId ( ) .toString ( ) ; } if ( user instanceof TYPE_3 ) { return STRING_1 + ( ( ( TYPE_3 ) ( user ) ) .METHOD_3 ( ) .METHOD_4 ( ) .METHOD_5 ( ) .METHOD_6 ( ) .toString ( ) ) ; } return user.toString ( ) ; } ) ( user TYPE_1 user ) ( user user ) 
( VAR_3 VAR_3   new TYPE_5 ( ) ) ( index index   VAR_2.METHOD_2 ( ) ) ( out out   METHOD_3 ( in index VAR_1 VAR_3 ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 index   VAR_2.METHOD_2 ( ) ; TYPE_5 VAR_3   new TYPE_5 ( ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out   METHOD_3 ( in index VAR_1 VAR_3 ) ; if ( ( in    out ) || ( out instanceof TYPE_6 ) ) { return new TYPE_7 ( index out VAR_1 ) ; } else if ( out    null ) { return in ; } else { return out ; } } ) ( in TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in ) ( VAR_1 TYPE_2 VAR_1 ) 
( in TYPE_2 in ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1.id ( VAR_2.get ( ) .apply ( change in ) .VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) 
( s s   VAR_1.METHOD_3 ( CHAR_1 ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return private PatchSet.Id METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws TYPE_1 { java.lang.String VAR_1   METHOD_2 ( commit VAR_2 ) ; int s   VAR_1.METHOD_3 ( CHAR_1 ) ; java.lang.String VAR_3   ( s < 0 ) ? VAR_1 : VAR_1.METHOD_4 ( 0 s ) ; TYPE_2 psId   TYPE_3.METHOD_5 ( VAR_3 ) ; if ( psId    null ) { throw METHOD_6 ( VAR_2 VAR_3 ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId psId ) ; } ) ( TYPE_3 TYPE_3 ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( VAR_1 VAR_1   METHOD_2 ( commit VAR_2 ) ) ( psId psId   TYPE_3.METHOD_5 ( VAR_3 ) ) ( VAR_3 VAR_3   ( s < 0 ) ? VAR_1 : VAR_1.METHOD_4 ( 0 s ) ) 
( VAR_1 int VAR_1 ) ( VAR_3 int VAR_3 ) ( VAR_2 int VAR_2 ) ( create_return public static TYPE_1 create ( int VAR_1 int VAR_2 int VAR_3 int VAR_4 ) { return new TYPE_2 ( TYPE_1.METHOD_1 ( VAR_1 STRING_1 VAR_5 ) TYPE_1.METHOD_1 ( VAR_2 STRING_2 VAR_5 ) TYPE_1.METHOD_1 ( VAR_3 STRING_3 VAR_5 ) TYPE_1.METHOD_1 ( VAR_4 STRING_4 VAR_6 ) ) ; } ) ( VAR_4 int VAR_4 ) 
( VAR_2 VAR_2 ) ( VAR_1 final TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4.AccountGroup group   VAR_2.get ( VAR_1 ) ; if ( group    null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user.get ( ) group ) ; } ) ( group group   VAR_2.get ( VAR_1 ) ) 
( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { try { return METHOD_1 ( VAR_1.METHOD_2 ( change user.get ( ) ) ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } } ) ( change com.google.gerrit.reviewdb.client.Change change ) 
( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( a a   TYPE_2.METHOD_2 ( STRING_1 STRING_2 ) ) ( TYPE_3 TYPE_3 ) ( n n   TYPE_3.METHOD_3 ( a b ) ) ( b b   TYPE_2.METHOD_2 ( STRING_1 STRING_3 ) ) 
( Assert org.junit.Assert ) ( VAR_3 VAR_3   new TYPE_3 ( STRING_4 STRING_5 ) ) ( VAR_2 VAR_2   new TYPE_3 ( STRING_2 STRING_3 ) ) ( TYPE_2 TYPE_2 ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) 
( b b   new TYPE_1 ( ) ) 
( METHOD_1_return private java.lang.String METHOD_1 ( final TYPE_1.Change change ) { if ( ( change !   null ) & & ( ( VAR_1.get ( ) ) !   null ) ) { final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( VAR_1.get ( ) ) ; r.append ( change.getChangeId ( ) ) ; return r.toString ( ) ; } return null ; } ) ( change final TYPE_1.Change change ) 
( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   VAR_3.METHOD_3 ( VAR_1 ) ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2.METHOD_2 ( VAR_1 STRING_1 ) ; TYPE_3 VAR_2   VAR_3.METHOD_3 ( VAR_1 ) ; if ( VAR_2.METHOD_4 ( ) ) { return new TYPE_1 ( VAR_2.group ( 1 ) STRING_2 VAR_1 ) ; } else { throw new TYPE_4 ( ( STRING_3 + VAR_1 ) ) ; } } ) ( VAR_3 VAR_3 ) 
( VAR_1 int VAR_1 ) ( req TYPE_1 req ) ( message java.lang.String message ) ( res TYPE_2.HttpServletResponse res ) ( res res ) 
( METHOD_1_return private java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > METHOD_1 ( TYPE_1 n ) { try { return VAR_1.METHOD_2 ( db.get ( ) n.notes VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3.error ( ( STRING_1 + ( VAR_2 ) ) e ) ; return java.util.Collections.METHOD_3 ( ) ; } } ) ( n TYPE_1 n ) 
( n n   TYPE_3.METHOD_3 ( a b ) ) ( a a   TYPE_2.METHOD_2 ( STRING_1 STRING_2 ) ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( b b   TYPE_2.METHOD_2 ( STRING_1 STRING_3 ) ) ( TYPE_3 TYPE_3 ) 
( VAR_7 VAR_7 ) ( VAR_5 VAR_5   VAR_6.get ( ) ) ( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_7 VAR_7 ) ( account com.google.gerrit.reviewdb.client.Account account ) ( VAR_2 VAR_2 ) ( VAR_7 VAR_7 ) ( VAR_6 VAR_6 ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_3 VAR_4 VAR_1 ) ) ( VAR_7 VAR_7   new TYPE_4 ( null account.getId ( ) ) ) 
( VAR_1 TYPE_2 VAR_1 ) ( in in   new TYPE_7 ( ) ) ( VAR_3 VAR_3   put.get ( ) .apply ( VAR_1 in ) ) ( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 TYPE_3 input ) throws TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException { TYPE_7 in   new TYPE_7 ( ) ; VAR_2   TYPE_8.of ( id ) ; java.util.List < TYPE_1 > VAR_3   put.get ( ) .apply ( VAR_1 in ) ; if ( ( VAR_3.size ( ) )    1 ) { return VAR_3.get ( 0 ) ; } throw new TYPE_9 ( ) ; } ) ( put put ) ( input TYPE_3 input ) ( TYPE_8 TYPE_8 ) 
( factory factory   new TYPE_2 ( ) ) ( METHOD_1_return TYPE_1 METHOD_1 ( ) { TYPE_2 factory   new TYPE_2 ( ) ; factory.METHOD_2 ( new TYPE_3 ( url ) .METHOD_3 ( true ) .METHOD_4 ( ( ! ( VAR_1 ) ) ) .METHOD_5 ( INT_1 VAR_2 ) .METHOD_1 ( ) ) ; return ( ( TYPE_1 ) ( factory.METHOD_6 ( ) ) ) ; } ) ( factory factory ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) ( TYPE_2 TYPE_2 ) 
( VAR_1 VAR_1 ) ( modules modules   new java.util.ArrayList < TYPE_2 > ( ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > modules   new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( new TYPE_3 ( ) ) ; if ( VAR_2 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; modules.add ( new TYPE_6 ( ) ) ; } return VAR_1.METHOD_2 ( modules ) ; } ) ( modules modules ) ( VAR_1 final TYPE_1 VAR_1 ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return METHOD_2 ( repo db rw commit repo.METHOD_3 ( ) .values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg   java.lang.String.format ( STRING_1 commit.name ( ) getProject ( ) .METHOD_4 ( ) ) ; VAR_1.error ( msg e ) ; return false ; } } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_3 VAR_3   new TYPE_3 < TYPE_4 > ( ) ) 
( b b   new TYPE_1 ( ) ) 
( projectName java.lang.String projectName ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2 ) ( cfg TYPE_1 cfg ) ( VAR_2 VAR_2   new TYPE_3 ( ) ) ( b b   VAR_2.METHOD_5 ( VAR_1 TYPE_4.name ( ) ) ) ( format_return public java.lang.String format ( java.lang.String projectName TYPE_1 cfg java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2   new TYPE_3 ( ) ; if ( ! ( cfg.METHOD_1 ( VAR_3 false ) ) ) { VAR_2.METHOD_2 ( ) ; } VAR_2.METHOD_3 ( METHOD_4 ( projectName ) ) ; byte [ ] b   VAR_2.METHOD_5 ( VAR_1 TYPE_4.name ( ) ) ; return new java.lang.String ( b TYPE_4 ) ; } ) ( VAR_2 VAR_2 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException java.io.IOException { if ( VAR_1    ( TYPE_2.METHOD_2 ( ) ) ) { return new TYPE_1 ( db repo rp.METHOD_3 ( ) ) ; } else { return new TYPE_1 ( project.METHOD_4 ( ) ) ; } } ) ( VAR_1 TYPE_2 VAR_1 ) 
( update TYPE_1 update ) ( ps com.google.gerrit.reviewdb.client.PatchSet ps ) ( update update ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( TYPE_2 TYPE_2 ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( m TYPE_1 < TYPE_2 > m ) 
( VAR_1 TYPE_2 < java.lang.String > VAR_1 ) ( cfg cfg   VAR_2.METHOD_2 ( VAR_3 ) .METHOD_3 ( ) ) ( VAR_2 VAR_2 ) ( id TYPE_1 id ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_2 int VAR_2 ) ( VAR_3 TYPE_1 < TYPE_2 > VAR_3 ) 
( util util ) ( u u   util.user ( VAR_1 VAR_4 ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( TYPE_1 TYPE_1 ) ( values values   TYPE_1.METHOD_2 ( ) .get ( ) ) ( java.lang.String ) ( METHOD_1_return private static java.lang.String METHOD_1 ( java.lang.String ) { java.util.List < java.lang.String > values   TYPE_1.METHOD_2 ( ) .get ( ) ; if ( values    null ) { return null ; } else { return values.get ( ( ( values.size ( ) ) - 1 ) ) ; } } ) 
( changeId changeId   METHOD_2 ( ) .getChangeId ( ) ) ( c c   get ( changeId ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( VAR_4 VAR_4   new TYPE_5 ( TYPE_6.METHOD_5 ( ) ) ) ( VAR_3 VAR_3 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_1.get ( STRING_1 ) ) ( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( ) ) ( VAR_4 VAR_4 ) ( VAR_3 VAR_3   new TYPE_3 ( TYPE_4.METHOD_3 ( VAR_2 ) ) ) ( VAR_1 VAR_1 ) 
( r r   new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ) 
( VAR_2 VAR_2   METHOD_2 ( index VAR_3 ) ) ( METHOD_1_return_line1_col247 return VAR_4 ; ) ( METHOD_1_return public TYPE_1 METHOD_1 ( int index TYPE_2 VAR_1 ) { int VAR_2   METHOD_2 ( index VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } TYPE_1 VAR_4   METHOD_3 ( VAR_2 VAR_1 TYPE_3.METHOD_4 ( TYPE_4.METHOD_5 ( ) ) null ) ; return VAR_4 ; } ) ( index int index ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_4 VAR_4   METHOD_3 ( VAR_2 VAR_1 TYPE_3.METHOD_4 ( TYPE_4.METHOD_5 ( ) ) null ) ) ( VAR_4 VAR_4 ) 
( walk walk   new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) ( VAR_1 VAR_1   getRevision ( ) ) 
( type VAR_1.type ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 user com.google.gerrit.server.query.change.ChangeData cd com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1   VAR_2.create ( user cd ) .METHOD_2 ( patchSet ) .METHOD_1 ( ) ; if ( ( VAR_1.status ) !   ( VAR_3 ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; } return VAR_1.type ; } ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( user TYPE_2 user ) ( VAR_1 VAR_1   VAR_2.create ( user cd ) .METHOD_2 ( patchSet ) .METHOD_1 ( ) ) ( METHOD_1_return_line1_col418 return VAR_1.type ; ) ( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) ( VAR_2 VAR_2 ) 
( VAR_1 final TYPE_3.Id VAR_1 ) ( TYPE_4 TYPE_4 ) ( VAR_2 VAR_2   TYPE_4.METHOD_2 ( ) ) ( METHOD_1_return private java.util.Map < TYPE_1 TYPE_2 > METHOD_1 ( final TYPE_3.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.Map < TYPE_1 TYPE_2 > VAR_2   TYPE_4.METHOD_2 ( ) ; for ( final TYPE_2 VAR_3 : db.METHOD_3 ( ) .METHOD_4 ( VAR_1 ) ) { VAR_2.put ( VAR_3.METHOD_5 ( ) VAR_3 ) ; } return VAR_2 ; } ) ( METHOD_1_return_line1_col337 return VAR_2 ; ) ( VAR_2 VAR_2 ) 
( METHOD_1_return static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( null change.getId ( ) null TYPE_3.of ( ) TYPE_3.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_5.METHOD_1 ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_6.of ( ) TYPE_6.of ( ) ) ; } ) ( change com.google.gerrit.reviewdb.client.Change change ) 
( r r ) ( METHOD_1_return_line1_col510 return r ; ) ( branch TYPE_1.NameKey branch ) ( METHOD_1_return private java.util.Map < com.google.gerrit.reviewdb.client.Change.Key com.google.gerrit.reviewdb.client.Change.Id > METHOD_1 ( TYPE_1.NameKey branch ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Change.Key com.google.gerrit.reviewdb.client.Change.Id > r   new TYPE_2 < > ( ) ; for ( com.google.gerrit.reviewdb.client.Change c : db.changes ( ) .METHOD_2 ( branch ) ) { r.put ( c.getKey ( ) c.getId ( ) ) ; } return r ; } ) ( r r   new TYPE_2 < > ( ) ) 
( METHOD_1_return public java.util.Map < TYPE_1 java.util.Set < TYPE_2 > > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws java.io.IOException TYPE_3 { try ( org.eclipse.jgit.lib.Repository git   VAR_2.METHOD_2 ( VAR_3 ) ; TYPE_4 VAR_4   new TYPE_4 ( VAR_1 ) ) { VAR_4.METHOD_3 ( git ) ; return VAR_4.METHOD_1 ( ) ; } } ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) 
( METHOD_1_return protected org.eclipse.jgit.lib.ObjectId METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision )    null ) { return null ; } TYPE_1 VAR_2   TYPE_1.METHOD_2 ( VAR_3 VAR_1 revision.METHOD_3 ( ) ) ; if ( VAR_2 !   null ) { return VAR_2.METHOD_1 ( 0 ) ; } return null ; } ) ( VAR_1 java.lang.String VAR_1 ) ( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   TYPE_1.METHOD_2 ( VAR_3 VAR_1 revision.METHOD_3 ( ) ) ) 
( METHOD_1_return public TYPE_1.PatchSet METHOD_1 ( ) { if ( ( currentPatchSetId ) !   null ) { for ( int i   ( patchSets.size ( ) ) - 1 ; i >   0 ; i -- ) { final TYPE_1.PatchSet ps   patchSets.get ( i ) ; if ( ps.getKey ( ) .equals ( currentPatchSetId ) ) { return ps ; } } } return null ; } ) 
( METHOD_1_return_line1_col263 return p ; ) ( METHOD_1_return private TYPE_1 < TYPE_2 > [ ] METHOD_1 ( final TYPE_3 r ) throws TYPE_4 TYPE_5 { final TYPE_1 < TYPE_2 > [ ] p   new TYPE_1 [ r.METHOD_2 ( ) ] ; for ( int i   0 ; i < ( p.length ) ; i++ ) { p [ i ]   METHOD_3 ( r.METHOD_4 ( i ) ) ; } return p ; } ) ( p p ) ( r final TYPE_3 r ) ( p p   new TYPE_1 [ r.METHOD_2 ( ) ] ) 
( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( VAR_3 TYPE_2 VAR_3 ) ( VAR_2 TYPE_1 VAR_2 ) ( change com.google.gerrit.reviewdb.client.Change change ) ( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) 
( ctx TYPE_1 ctx ) ( c c   METHOD_2 ( branch null ) ) ( ctx ctx ) 
( input input   new TYPE_1 ( ) ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2.NameKey projectName ) { try { final org.eclipse.jgit.lib.Repository r   VAR_1.METHOD_2 ( projectName.get ( ) ) ; try { return r.METHOD_3 ( VAR_2 ) ; } finally { r.close ( ) ; } } catch ( java.io.IOException VAR_3 ) { return null ; } } ) ( projectName TYPE_2.NameKey projectName ) 
( key TYPE_2.Key key ) ( METHOD_1_return public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2.Key key ) throws java.io.IOException { try ( TYPE_3 VAR_1   new TYPE_3 ( key.repo key.path ) ) { VAR_1.METHOD_2 ( null VAR_2 ) ; return TYPE_2.METHOD_3 ( VAR_1 ) ; } finally { key.repo   null ; } } ) 
( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) )    ( VAR_1.METHOD_1 ( ) ) ) { final TYPE_2 < ? > p   ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( METHOD_2 ( ) .equals ( p.METHOD_2 ( ) ) ) & & ( getValue ( ) .equals ( p.getValue ( ) ) ) ; } return false ; } ) ( VAR_1 final TYPE_1 VAR_1 ) 
( VAR_1 int VAR_1 ) 
( cm cm ) ( cm cm ) ( cm cm ) ( cm cm ) ( VAR_1 VAR_1 ) ( cm cm   VAR_1.create ( ctx.getProject ( ) change.getId ( ) ) ) ( ctx TYPE_1 ctx ) ( cm cm ) 
( VAR_1 VAR_1 ) ( change final TYPE_1.Change change ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   ( ( TYPE_2 ) ( METHOD_2 ( VAR_2 ) ) ) ) 
( r r   METHOD_4 ( ) ) ( VAR_1 VAR_1 ) 
( java.lang.String ) ( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String boolean create ) { for ( TYPE_1 p : METHOD_2 ( ) ) { if ( p.getName ( ) .METHOD_3 ( ) ) { return p ; } } if ( create ) { TYPE_1 p   new TYPE_1 ( ) ; VAR_1.add ( p ) ; return p ; } else { return null ; } } ) ( create boolean create ) 
( req TYPE_1 req ) ( METHOD_1_return public static java.lang.String METHOD_1 ( TYPE_1 req java.lang.String VAR_1 ) { if ( TYPE_2.equals ( VAR_1 ) ) { java.lang.String user   TYPE_3.METHOD_2 ( req.METHOD_1 ( ) ) ; if ( user !   null ) { return user ; } java.lang.String auth   req.METHOD_3 ( TYPE_2 ) ; return TYPE_4.METHOD_4 ( auth ) ; } else { return TYPE_3.METHOD_2 ( req.METHOD_3 ( VAR_1 ) ) ; } } ) ( VAR_1 java.lang.String VAR_1 ) 
( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_1.OrmException { if ( cd.METHOD_2 ( user ) ) { return true ; } try { TYPE_2.Change c   cd.change ( db ) ; if ( ( c !   null ) & & ( VAR_1.METHOD_3 ( c ) .METHOD_4 ( user ) .METHOD_5 ( ) ) ) { cd.METHOD_6 ( user ) ; return true ; } else { return false ; } } catch ( TYPE_3 e ) { return false ; } } ) ( cd final com.google.gerrit.server.query.change.ChangeData cd ) 
( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey TYPE_2.NameKey > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey TYPE_2.NameKey > VAR_1   TYPE_3.create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1.put ( cd.change ( ) .getProject ( ) cd.change ( ) .METHOD_2 ( ) ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1   TYPE_3.create ( ) ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col433 return VAR_1 ; ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_2 VAR_2   TYPE_1.METHOD_2 ( VAR_3 VAR_1 revision.METHOD_3 ( ) ) ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return protected byte [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision )    null ) { return new byte [ ] { } ; } TYPE_1 VAR_2   TYPE_1.METHOD_2 ( VAR_3 VAR_1 revision.METHOD_3 ( ) ) ; if ( VAR_2 !   null ) { TYPE_2 VAR_4   VAR_3.METHOD_4 ( VAR_2.METHOD_5 ( 0 ) VAR_5 ) ; return VAR_4.METHOD_6 ( VAR_6 ) ; } else { return new byte [ ] { } ; } } ) ( TYPE_1 TYPE_1 ) 
( VAR_1 int VAR_1 ) ( VAR_2 VAR_2   -1 ) 
( VAR_6 VAR_6 ) ( VAR_2 VAR_2 ) ( VAR_5 VAR_5 ) ( VAR_4 VAR_4 ) ( result result ) ( result final TYPE_1 result ) ( VAR_3 VAR_3 ) 
( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1.METHOD_2 ( ) ) ) { return TYPE_3.METHOD_3 ( db.METHOD_4 ( ) .METHOD_1 ( notes.getChangeId ( ) ) ) ; } else { return TYPE_3.METHOD_3 ( notes.METHOD_5 ( ) .METHOD_6 ( ) .values ( ) ) ; } } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( notes TYPE_2 notes ) 
( revision_return public static TYPE_1 revision ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { int VAR_1   id.getParentKey ( ) .get ( ) ; java.lang.String revision   TYPE_2.get ( id ) ; if ( revision !   null ) { return TYPE_3.revision ( VAR_1 revision ) ; } return TYPE_3.change ( VAR_1 ) .view ( STRING_1 ) .id ( id.get ( ) ) ; } ) ( id id ) ( VAR_1 VAR_1   id.getParentKey ( ) .get ( ) ) ( revision revision   TYPE_2.get ( id ) ) ( TYPE_2 TYPE_2 ) ( TYPE_3 TYPE_3 ) ( id com.google.gerrit.reviewdb.client.PatchSet.Id id ) 
( TYPE_2 TYPE_2 ) ( c TYPE_1 c ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2   TYPE_1.METHOD_2 ( VAR_3 VAR_1 revision.METHOD_3 ( ) ) ) ( METHOD_1_return protected byte [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision )    null ) { return new byte [ ] { } ; } TYPE_1 VAR_2   TYPE_1.METHOD_2 ( VAR_3 VAR_1 revision.METHOD_3 ( ) ) ; if ( VAR_2 !   null ) { TYPE_2 VAR_4   VAR_3.METHOD_4 ( VAR_2.METHOD_5 ( 0 ) VAR_5 ) ; return VAR_4.METHOD_6 ( VAR_6 ) ; } return new byte [ ] { } ; } ) ( TYPE_1 TYPE_1 ) 
( java.lang.String ) ( values values   new java.util.ArrayList < TYPE_2 > ( 2 ) ) ( TYPE_1 TYPE_1 ) ( type type ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( java.lang.String ) { TYPE_1.METHOD_2 ( ) ; java.util.List < TYPE_2 > values   new java.util.ArrayList < TYPE_2 > ( 2 ) ; values.add ( new TYPE_2 ( ( ( short ) ( 0 ) ) STRING_1 ) ) ; values.add ( new TYPE_2 ( ( ( short ) ( 1 ) ) STRING_2 ) ) ; TYPE_1 type   new TYPE_1 ( values ) ; return type ; } ) ( values values ) ( type type   new TYPE_1 ( values ) ) ( values values ) ( METHOD_1_return_line1_col360 return type ; ) 
( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String projectName java.lang.String VAR_1 ) { TYPE_1 VAR_2   VAR_3.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; if ( VAR_2    null ) { return null ; } return METHOD_2 ( projectName VAR_1 VAR_4.create ( VAR_2 ) .METHOD_3 ( ) ) ; } ) ( VAR_1 java.lang.String VAR_1 ) ( projectName java.lang.String projectName ) 
( VAR_2 VAR_2   METHOD_4 ( out ) ) 
( err java.lang.String err ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String err java.lang.Exception e ) { if ( VAR_1 ) { if ( err    null ) { VAR_2.error ( err ) ; } else { VAR_2.error ( err e ) ; } return TYPE_2.METHOD_2 ( ) ; } else { return TYPE_2.METHOD_3 ( err ) ; } } ) ( e java.lang.Exception e ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 com.google.gwtorm.server.OrmException java.io.IOException { if ( VAR_1    ( TYPE_3.METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db   VAR_2.METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db.close ( ) ; } } synchronized ( VAR_3 ) { VAR_3.update ( 1 ) ; } return null ; } ) 
( change com.google.gerrit.reviewdb.client.Change change ) ( METHOD_1_return static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( change.getId ( ) null TYPE_3.of ( ) TYPE_3.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_5.METHOD_1 ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_6.of ( ) TYPE_6.of ( ) ) ; } ) 
( rsp final TYPE_2.HttpServletResponse rsp ) ( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final TYPE_2.HttpServletResponse rsp final java.lang.String VAR_1 ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { TYPE_3.Key key   new TYPE_3.Key ( VAR_2 VAR_1 ) ; return auth ( db.METHOD_3 ( ) .get ( key ) ) ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ) .log ( STRING_1 e ) ; return null ; } } ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) ( TYPE_3 TYPE_3 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.get ( change.METHOD_3 ( ) .getParentKey ( ) ) ) ( user user ) ( VAR_1 VAR_1   user.METHOD_2 ( ) ) 
( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) ( VAR_2 final java.lang.String VAR_2 ) ( VAR_3 VAR_3 ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_3 VAR_3 ) 
( VAR_1 VAR_1 ) ( s s   VAR_1.METHOD_3 ( db ) ) 
( VAR_2 int VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( row int row ) 
( VAR_2 VAR_2 ) ( VAR_3 VAR_3 ) ( info info ) ( info TYPE_1.ChangeInfo info ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) .equals ( VAR_2 ) ) { return VAR_1.METHOD_2 ( ) .METHOD_4 ( VAR_3 ) ; } else { return VAR_1.METHOD_5 ( ) .METHOD_6 ( VAR_2 ) .METHOD_4 ( VAR_3 ) ; } } ) 
( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( revision.get ( ) ) > 0 ) { TYPE_1 VAR_1   new TYPE_1 ( ) ; VAR_1.METHOD_2 ( new TYPE_2 ( ) .METHOD_3 ( TYPE_3.METHOD_4 ( ) ) ) ; VAR_1.METHOD_5 ( METHOD_6 ( ) ) ; VAR_1.METHOD_7 ( TYPE_4.METHOD_4 ( ) ) ; return java.util.Collections.METHOD_8 ( VAR_1 ) ; } else { return java.util.Collections.METHOD_9 ( ) ; } } ) 
( VAR_1 final TYPE_3 < ? extends TYPE_2 < TYPE_1 > > VAR_1 ) ( METHOD_1_return public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_3 < ? extends TYPE_2 < TYPE_1 > > VAR_1 ) { if ( ( VAR_1.size ( ) )    1 ) { return TYPE_4.METHOD_2 ( VAR_1 ) ; } return new TYPE_5 < TYPE_1 > ( VAR_1 ) ; } ) 
( VAR_3 VAR_3 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2   VAR_3.create ( TYPE_3.of ( db ) VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3.of ( db ) ; } } ; } ) ( VAR_2 VAR_2   VAR_3.create ( TYPE_3.of ( db ) VAR_1 ) ) 
( METHOD_1_return public java.util.Set < java.lang.String > METHOD_1 ( ) throws TYPE_1 { try { return TYPE_2.METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1.get ( ) .METHOD_3 ( true ) .apply ( revision ) .value ( ) ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 e ) ; } } ) 
( VAR_3 VAR_3 ) ( VAR_1 TYPE_1 < TYPE_2 < TYPE_3 > > VAR_1 ) ( VAR_3 VAR_3   new TYPE_4 ( VAR_4 ) ) ( VAR_2 java.lang.String ... VAR_2 ) ( TYPE_3 TYPE_3 ) 
( METHOD_1_return_line1_col310 return r ; ) ( in java.util.List < TYPE_1 > in ) ( r r   new java.util.ArrayList < TYPE_1 > ( in.size ( ) ) ) ( METHOD_1_return private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > in ) { java.util.ArrayList < TYPE_1 > r   new java.util.ArrayList < TYPE_1 > ( in.size ( ) ) ; for ( TYPE_1 m : in ) { if ( m.METHOD_2 ( ) ) { r.METHOD_3 ( m.METHOD_4 ( ) ) ; } else { r.add ( m ) ; } } return r ; } ) ( r r ) 
( token token   TYPE_3.METHOD_5 ( revision path ) ) ( line line   ( cm.METHOD_3 ( VAR_1 ) ) + 1 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   cm.METHOD_1 ( ) .METHOD_2 ( ) ) ( cm cm ) ( TYPE_3 TYPE_3 ) 
( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2 ) 
( METHOD_1_return java.lang.String METHOD_1 ( final java.lang.String s ) { if ( ( s    null ) || ( ( s.length ( ) ) < INT_1 ) ) { return null ; } return ( ( s.METHOD_2 ( 0 INT_2 ) ) + STRING_1 ) + ( s.METHOD_2 ( ( ( s.length ( ) ) - INT_3 ) ) ) ; } ) ( s final java.lang.String s ) 
( VAR_1 VAR_1 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1   STRING_1 ) ( a a   new TYPE_1 ( VAR_1 STRING_2 ) ) ( STRING_1 STRING_1 ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) 
( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey com.google.gerrit.reviewdb.client.Change.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey com.google.gerrit.reviewdb.client.Change.Id > VAR_1   TYPE_3.create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2.values ( ) ) { VAR_1.put ( cd.change ( ) .getProject ( ) cd.getId ( ) ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1   TYPE_3.create ( ) ) ( METHOD_1_return_line1_col488 return VAR_1 ; ) 
( changeId java.lang.String changeId ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 VAR_2 ) ( change change   VAR_2.get ( ) ) 
( METHOD_1_return private boolean METHOD_1 ( final int i ) { final TYPE_1 s   VAR_1.get ( i ) ; final TYPE_1 e   VAR_1.get ( ( i - 1 ) ) ; return ( ( s.METHOD_2 ( ) ) - ( e.METHOD_3 ( ) ) ) <   ( 2 * ( VAR_2 ) ) ; } ) ( s s   VAR_1.get ( i ) ) ( VAR_1 VAR_1 ) ( i final int i ) ( VAR_1 VAR_1 ) ( e e   VAR_1.get ( ( i - 1 ) ) ) 
( METHOD_1_return private static boolean METHOD_1 ( final TYPE_1 VAR_1 final TYPE_2 VAR_2 ) { if ( ( VAR_2.getChange ( ) .getStatus ( ) ) !   ( VAR_3 ) ) { return false ; } for ( final TYPE_1 t : TYPE_3.METHOD_2 ( ) .METHOD_3 ( ) ) { if ( ! ( VAR_2.METHOD_4 ( t ) ) ) { return false ; } } return true ; } ) ( VAR_2 final TYPE_2 VAR_2 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( b b   new TYPE_1 ( ) ) 
( TYPE_2 TYPE_2 ) ( err TYPE_1 err ) 
( result final java.util.List < TYPE_1 > result ) ( r r   new java.util.ArrayList < TYPE_2 > ( result.size ( ) ) ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) 
( VAR_3 VAR_3 ) 
( r final TYPE_1 r ) ( final java.lang.String ) ( value final java.lang.String value ) ( c c   r.METHOD_5 ( 0 ) ) ( r r ) 
( value value   TYPE_1.METHOD_2 ( STRING_4 ) ) ( METHOD_1_return private static boolean METHOD_1 ( ) { final java.lang.String [ ] VAR_1   new java.lang.String [ ] { STRING_1 STRING_2 STRING_3 } ; java.lang.String value   TYPE_1.METHOD_2 ( STRING_4 ) ; return ( value !   null ) & & ( TYPE_2.METHOD_3 ( VAR_1 ) .contains ( value.METHOD_4 ( ) ) ) ; } ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1   new java.lang.String [ ] { STRING_1 STRING_2 STRING_3 } ) 
( VAR_1 TYPE_2 VAR_1 ) ( req TYPE_1 req ) 
( Assert org.junit.Assert ) ( repo repo ) (   repo.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_4 ( ) ) ( res res   METHOD_5 ( STRING_1 ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException java.io.IOException { if ( VAR_1    ( TYPE_2.METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db   VAR_2.METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db.close ( ) ; } } return null ; } ) 
( m m   new java.lang.StringBuilder ( VAR_1 ) ) ( VAR_2 VAR_2   METHOD_2 ( ) ) ( m m ) ( METHOD_1_return_line1_col262 return m.toString ( ) ; ) ( nodeCall_toString_return m.toString ( ) ) ( METHOD_1_return protected java.lang.String METHOD_1 ( ) { java.lang.StringBuilder m   new java.lang.StringBuilder ( VAR_1 ) ; java.lang.String [ ] VAR_2   METHOD_2 ( ) ; if ( VAR_2 !   null ) { m.append ( TYPE_1.on ( STRING_1 ) .METHOD_3 ( VAR_2 ) ) ; } return m.toString ( ) ; } ) 
( VAR_2 org.eclipse.jgit.revwalk.RevCommit VAR_2 ) ( VAR_4 VAR_4 ) ( METHOD_1_return_line1_col476 return VAR_5 ; ) ( METHOD_1_return private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 org.eclipse.jgit.revwalk.RevCommit VAR_2 TYPE_1 VAR_3 ) throws TYPE_2 java.io.IOException { TYPE_3 VAR_4   new TYPE_3 ( VAR_2.METHOD_2 ( ) ) ; VAR_4.METHOD_3 ( VAR_3 ) ; org.eclipse.jgit.lib.ObjectId VAR_5   VAR_4.METHOD_4 ( VAR_1 ) ; if ( org.eclipse.jgit.lib.ObjectId.equals ( VAR_5 VAR_2.METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_5 ; } ) ( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_4 VAR_4   new TYPE_3 ( VAR_2.METHOD_2 ( ) ) ) ( VAR_5 VAR_5   VAR_4.METHOD_4 ( VAR_1 ) ) ( VAR_3 TYPE_1 VAR_3 ) ( VAR_4 VAR_4 ) ( VAR_5 VAR_5 ) 
( b b   new TYPE_1 ( ) ) 
( i int i ) ( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return private boolean METHOD_1 ( TYPE_1 VAR_1 int i ) { if ( ( TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( i ) VAR_2 ) ) & & ( TYPE_2.METHOD_2 ( VAR_1.METHOD_4 ( i ) VAR_3 ) ) ) { ( VAR_4 ) ++ ; return true ; } else { return false ; } } ) 
( VAR_2 VAR_2   TYPE_9.METHOD_3 ( VAR_1 ( ( VAR_3 ) + STRING_1 ) schema ) ) ( cfg TYPE_4 cfg ) ( schema TYPE_2 < TYPE_3 > schema ) ( TYPE_10 TYPE_10 ) ( TYPE_9 TYPE_9 ) ( VAR_1 TYPE_5 VAR_1 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > schema TYPE_4 cfg TYPE_5 VAR_1 ) throws java.io.IOException { if ( TYPE_6.METHOD_2 ( cfg ) ) { return new TYPE_7 ( ) ; } TYPE_8 VAR_2   TYPE_9.METHOD_3 ( VAR_1 ( ( VAR_3 ) + STRING_1 ) schema ) ; return TYPE_10.METHOD_4 ( VAR_2 ) ; } ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( VAR_1 VAR_1 ) ( n n   VAR_1.METHOD_3 ( TYPE_2.METHOD_4 ( new TYPE_3 ( STRING_2 STRING_3 ) new TYPE_3 ( STRING_4 STRING_5 ) ) ) ) 
( c final TYPE_1.ReviewDb c ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( c c ) ( VAR_1 VAR_1 ) 
( token java.lang.String token ) ( METHOD_1_return private static java.lang.String METHOD_1 ( java.lang.String token ) { if ( token    null ) { token   STRING_1 ; } else if ( token.METHOD_2 ( STRING_2 ) ) { token   token.METHOD_3 ( 1 ) ; } return TYPE_1.METHOD_4 ( ( STRING_3 + token ) ) ; } ) ( TYPE_1 TYPE_1 ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { if ( ( VAR_1 )    null ) { VAR_1   VAR_2.get ( ) ; VAR_3   true ; } try { TYPE_1 VAR_4   VAR_1.METHOD_2 ( project ) ; TYPE_2.METHOD_3 ( VAR_5.METHOD_4 ( VAR_6 ) ) ; return VAR_4 ; } catch ( TYPE_3 e ) { throw new java.io.IOException ( e ) ; } } ) 
( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_2 ( ) ) ) || ( METHOD_4 ( ) .METHOD_2 ( ) ) ) || ( METHOD_5 ( ) .METHOD_6 ( ) .METHOD_7 ( ) ) ) || ( METHOD_3 ( ) .METHOD_1 ( ) ) ) & & ( ! ( METHOD_8 ( db ) ) ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( VAR_1 VAR_1   VAR_2.get ( ) ) ( VAR_2 VAR_2 ) 
( VAR_2 TYPE_3 VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String TYPE_2 VAR_1 TYPE_3 VAR_2 ) throws TYPE_4 { java.lang.String VAR_3   VAR_1.METHOD_2 ( ) .toString ( ) ; if ( TYPE_5.METHOD_3 ( VAR_3 ) ) { return METHOD_4 ( VAR_1 VAR_2 ) ; } else if ( VAR_4.METHOD_5 ( VAR_1 ) ) { return METHOD_6 ( VAR_1 VAR_2 ) ; } else { throw new TYPE_4 ( java.lang.String.format ( STRING_1 VAR_1.METHOD_2 ( ) ) ) ; } } ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( ) .toString ( ) ) ( VAR_1 VAR_1 ) ( java.lang.String ) 
( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col325 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 ; try { VAR_1   TYPE_2.METHOD_2 ( ) ; } catch ( java.io.IOException e ) { if ( ( e instanceof TYPE_3 ) & & ( TYPE_4.equals ( e.getMessage ( ) ) ) ) { return null ; } else { TYPE_5 VAR_2   new TYPE_5 ( STRING_1 ) ; VAR_2.METHOD_3 ( e ) ; throw VAR_2 ; } } return VAR_1 ; } ) 
( get_return public TYPE_1 < TYPE_2 > get ( ) { TYPE_3 < TYPE_2 > m   new TYPE_3 < TYPE_2 > ( ) ; java.util.List < TYPE_4 < TYPE_2 > > VAR_1   VAR_2.METHOD_1 ( type ) ; if ( VAR_1 !   null ) { for ( TYPE_4 < TYPE_2 > b : VAR_1 ) { if ( ( b.getKey ( ) .METHOD_2 ( ) ) !   null ) { m.put ( STRING_1 b.getKey ( ) b.METHOD_3 ( ) ) ; } } } return m ; } ) ( m m   new TYPE_3 < TYPE_2 > ( ) ) ( VAR_2 VAR_2 ) ( m m ) ( get_return_line1_col355 return m ; ) ( VAR_1 VAR_1   VAR_2.METHOD_1 ( type ) ) 
( res TYPE_2.HttpServletResponse res ) ( req TYPE_1 req ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2   VAR_3.METHOD_1 ( VAR_1 ) ; if ( VAR_4.METHOD_2 ( ) ) { return VAR_2.METHOD_3 ( getRefName ( ) ) ; } else { return new TYPE_1 ( VAR_2 getRefName ( ) VAR_4 ) ; } } ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2   VAR_3.METHOD_1 ( VAR_1 ) ) ( VAR_3 VAR_3 ) 
( b b   new java.lang.StringBuilder ( ) ) ( b b ) ( b b ) ( METHOD_1_return private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder b   new java.lang.StringBuilder ( ) ; b.append ( ( ( STRING_1 + ( config.size ( ) ) ) + STRING_2 ) ) ; for ( TYPE_1 c : config ) { b.append ( STRING_3 ) ; b.append ( c.toString ( ) ) ; b.append ( STRING_4 ) ; } b.append ( STRING_5 ) ; return b.toString ( ) ; } ) ( nodeCall_toString_return b.toString ( ) ) ( METHOD_1_return_line1_col333 return b.toString ( ) ; ) ( b b ) 
( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_3 VAR_3   VAR_4.METHOD_2 ( VAR_2 VAR_1.METHOD_3 ( ) ) ) ( METHOD_1_return private < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3   VAR_4.METHOD_2 ( VAR_2 VAR_1.METHOD_3 ( ) ) ; if ( VAR_3 !   null ) { return VAR_1.METHOD_4 ( VAR_3 ) ; } else { VAR_5.error ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_1.METHOD_3 ( ) .getName ( ) ) ) ) ; return false ; } } ) 
( util util ) ( TYPE_1 TYPE_1 ) ( u u   util.user ( VAR_3 ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( in in ) ( VAR_2 VAR_2   VAR_3.set ( VAR_4 ) ) ( out out ) ( err err ) ( VAR_6 VAR_6 ) ( VAR_1 final TYPE_1 VAR_1 ) ( err err ) ( message message ) ( VAR_3 VAR_3 ) ( err err ) 
( label java.lang.String label ) ( TYPE_3 TYPE_3 ) ( args TYPE_2 args ) ( METHOD_1_return private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args java.lang.String label ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r   TYPE_3.METHOD_2 ( ( 2 * ( VAR_1 ) ) ) ; for ( int i   1 ; i <   ( VAR_1 ) ; i++ ) { r.add ( TYPE_4.METHOD_3 ( args label i ) ) ; r.add ( TYPE_4.METHOD_3 ( args label ( -i ) ) ) ; } return not ( METHOD_4 ( r ) ) ; } ) ( r r   TYPE_3.METHOD_2 ( ( 2 * ( VAR_1 ) ) ) ) 
( p TYPE_1 p ) 
( r r   METHOD_2 ( ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( METHOD_1_return private org.eclipse.jgit.lib.Repository METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey ) { try { return VAR_1.METHOD_1 ( ) ; } catch ( TYPE_1 err ) { VAR_2.METHOD_2 ( ( STRING_1 + ( name.get ( ) ) ) err ) ; return null ; } } ) ( final com.google.gerrit.reviewdb.client.Project.NameKey ) 
