( TYPE_2 TYPE_2 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( token java.lang.String token ) 
( METHOD_1_return_line1_col274 return VAR_4 ; ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1.VAR_2 VAR_2   VAR_3 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; VAR_2   VAR_3 ; VAR_2   VAR_2.METHOD_2 ( ) ; if ( ! ( VAR_2.METHOD_3 ( ) ) ) { throw new TYPE_4 ( STRING_1 VAR_2 ) ; } else { VAR_1.METHOD_4 ( ( ( TYPE_5 ) ( VAR_2 ) ) .METHOD_5 ( ) ) ; } return VAR_4 ; } ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) 
( repo repo ) ( repo repo ) ( ref ref   repo.METHOD_3 ( ) .METHOD_4 ( VAR_2 ) ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 p ) { return new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( ) throws java.io.IOException { try { return new TYPE_2 ( METHOD_3 ( p ) TYPE_4.METHOD_4 ( p.toString ( ) ) TYPE_5.METHOD_5 ( p ) ) ; } catch ( TYPE_6 e ) { return VAR_1 ; } } } ; } ) ( p final TYPE_3 p ) 
( VAR_3 VAR_3   result.METHOD_2 ( ref ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( result result ) ( VAR_1 TYPE_1.Status VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) 
( req final TYPE_1 req ) ( rsp final TYPE_2.HttpServletResponse rsp ) ( in in   METHOD_3 ( ) ) ( rsp rsp ) 
( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) )    ( VAR_1.METHOD_1 ( ) ) ) { final TYPE_2 < ? > p   ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return TYPE_2.METHOD_2 ( ) .equals ( p.METHOD_2 ( ) ) ; } return false ; } ) ( VAR_1 final TYPE_1 VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) 
( config config ) ( config config ) ( config TYPE_1 config ) ( config config ) ( VAR_1 java.lang.String VAR_1 ) ( config config ) ( config config ) 
( user user   user ( STRING_2 null ) ) ( r r   create ( ) .METHOD_4 ( user ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return java.util.Collections.METHOD_2 ( TYPE_3.METHOD_3 ( java.util.Collections.METHOD_4 ( VAR_1.METHOD_1 ( ) ) new TYPE_4 < TYPE_5 TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_5 VAR_2 ) { try { return METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) e ) ; } } } ) ) ; } ) ( Collections java.util.Collections ) 
( VAR_4 VAR_4 ) ( key final TYPE_1 key ) 
( projectName java.lang.String projectName ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public java.lang.String METHOD_1 ( java.lang.String projectName java.lang.String VAR_1 ) throws java.io.IOException { final org.eclipse.jgit.lib.Repository repo   VAR_2.METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { org.eclipse.jgit.revwalk.RevWalk VAR_3   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; org.eclipse.jgit.revwalk.RevCommit commit   VAR_3.parseCommit ( org.eclipse.jgit.lib.ObjectId.METHOD_3 ( VAR_1 ) ) ; return commit.METHOD_4 ( ) ; } finally { repo.close ( ) ; } } ) ( VAR_2 VAR_2 ) ( repo repo   VAR_2.METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   null ) 
( TYPE_1 TYPE_1 ) 
( apply_return public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 ) throws TYPE_4 com.google.gwtorm.server.OrmException { try { TYPE_1 < TYPE_2 > r   TYPE_1.METHOD_1 ( VAR_2.METHOD_2 ( VAR_1.METHOD_3 ( ) VAR_1.getChange ( ) .getProject ( ) VAR_3 ) ) ; if ( VAR_1.METHOD_4 ( ) ) { r.METHOD_5 ( TYPE_5.METHOD_6 ( INT_1 VAR_4 ) ) ; } return r ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( e.getMessage ( ) ) ; } } ) ( VAR_1 TYPE_3 VAR_1 ) 
( VAR_2 VAR_2   METHOD_4 ( type VAR_1 ) ) ( java.lang.String ) ( VAR_1 VAR_1 ) ( value final TYPE_1 value ) ( VAR_1 TYPE_2 VAR_1 ) ( type type   ( ( TYPE_3 < TYPE_1 > ) ( value.METHOD_3 ( ) ) ) ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( p p   TYPE_3.get ( VAR_1 ) ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2   new java.lang.String ( TYPE_4.METHOD_3 ( p ) VAR_3 ) ) ( id com.google.gerrit.reviewdb.client.Account.Id id ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 p   TYPE_3.get ( VAR_1 ) ; if ( ! ( TYPE_4.METHOD_2 ( p ) ) ) { throw new java.io.IOException ( java.lang.String.format ( STRING_1 VAR_1 ) ) ; } java.lang.String VAR_2   new java.lang.String ( TYPE_4.METHOD_3 ( p ) VAR_3 ) ; return new TYPE_1 ( new TYPE_1.Id ( id 0 ) VAR_2 ) ; } ) ( VAR_1 java.lang.String VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_4 java.lang.String VAR_4 ) ( VAR_3 java.lang.String VAR_3 ) ( VAR_2 TYPE_2 VAR_2 ) 
( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( result final TYPE_1.Account result ) ( me me ) ( TYPE_2 TYPE_2 ) ( me me   TYPE_2.METHOD_3 ( ) ) ( me me ) 
( METHOD_1_return protected boolean METHOD_1 ( ) { if ( ( VAR_1.length ( ) )    0 ) { VAR_2.METHOD_2 ( STRING_1 ) ; return false ; } if ( VAR_3.isEmpty ( ) ) { VAR_2.info ( STRING_2 ) ; return false ; } if ( ( ( ( VAR_3.size ( ) )    1 ) & & ( ( VAR_4.size ( ) )    1 ) ) & & ( VAR_4.contains ( VAR_5 ) ) ) { return false ; } return true ; } ) 
( ref ref   event.getRefName ( ) ) ( project project   new com.google.gerrit.reviewdb.client.Project.NameKey ( event.METHOD_2 ( ) ) ) ( ctx TYPE_1 ctx ) ( METHOD_1_return protected java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { java.lang.String ref   event.getRefName ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project   new com.google.gerrit.reviewdb.client.Project.NameKey ( event.METHOD_2 ( ) ) ; if ( ref.equals ( VAR_1 ) ) { return com.google.gerrit.server.query.change.ChangeData.METHOD_3 ( VAR_2.get ( ) .METHOD_4 ( project ) ) ; } else { return com.google.gerrit.server.query.change.ChangeData.METHOD_3 ( VAR_2.get ( ) .METHOD_5 ( new TYPE_2.NameKey ( project ref ) ) ) ; } } ) ( event event ) 
( a TYPE_1 a ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( a.name ) .METHOD_3 ( TYPE_2.METHOD_2 ( b.name ) ) ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 a TYPE_1 b ) { int VAR_1   TYPE_2.METHOD_2 ( a.name ) .METHOD_3 ( TYPE_2.METHOD_2 ( b.name ) ) ; if ( VAR_1 !   0 ) { return VAR_1 ; } return TYPE_2.METHOD_2 ( a.id ) .METHOD_3 ( TYPE_2.METHOD_2 ( b.name ) ) ; } ) ( b TYPE_1 b ) 
( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col303 return VAR_3 ; ) ( VAR_1 java.lang.String VAR_1 ) ( id TYPE_2 id ) ( VAR_3 VAR_3   TYPE_4.METHOD_1 ( cfg VAR_1 id ref ) ) ( ref java.lang.String ref ) ( TYPE_4 TYPE_4 ) ( VAR_3 VAR_3 ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 TYPE_2 id java.lang.String ref ) throws java.lang.Exception { TYPE_3.ProjectConfig cfg   VAR_2.METHOD_2 ( project ) .METHOD_3 ( ) ; TYPE_1 VAR_3   TYPE_4.METHOD_1 ( cfg VAR_1 id ref ) ; METHOD_4 ( project cfg ) ; return VAR_3 ; } ) ( cfg cfg   VAR_2.METHOD_2 ( project ) .METHOD_3 ( ) ) 
( TYPE_2 TYPE_2 ) ( b b   TYPE_2.METHOD_2 ( STRING_1 STRING_3 ) ) ( a a   TYPE_2.METHOD_2 ( STRING_1 STRING_2 ) ) ( c c   TYPE_2.METHOD_2 ( STRING_1 STRING_4 ) ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) 
( METHOD_1_return_line1_col314 return data ; ) ( in in   VAR_1.METHOD_3 ( VAR_2 ) ) ( data data   new byte [ ( ( int ) ( VAR_2.METHOD_2 ( ) ) ) ] ) ( data data ) ( METHOD_1_return private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data   new byte [ ( ( int ) ( VAR_2.METHOD_2 ( ) ) ) ] ; TYPE_3 in   VAR_1.METHOD_3 ( VAR_2 ) ; try { TYPE_4.METHOD_4 ( in data 0 data.length ) ; } finally { in.close ( ) ; } return data ; } ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( VAR_1 java.lang.String VAR_1 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_4 org.eclipse.jgit.lib.ObjectId VAR_4 ) ( VAR_2 TYPE_1 VAR_2 ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String VAR_1 TYPE_1 VAR_2 org.eclipse.jgit.lib.Repository repo TYPE_2 VAR_3 com.google.gerrit.reviewdb.client.Project.NameKey project org.eclipse.jgit.lib.ObjectId VAR_4 ) throws java.io.IOException { try ( TYPE_3 VAR_5   VAR_3.METHOD_2 ( ) ) { return ( ( TYPE_1 ) ( VAR_2 ) ) .format ( project.get ( ) TYPE_4.METHOD_3 ( repo VAR_4 ) METHOD_4 ( VAR_1 ) VAR_5 ) ; } } ) ( VAR_3 TYPE_2 VAR_3 ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) 
( result final TYPE_1 result ) 
( TYPE_4 TYPE_4 ) ( notes notes ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_3 VAR_3 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1.METHOD_2 ( ) ) ) { return TYPE_3.METHOD_3 ( TYPE_3.METHOD_4 ( db.METHOD_5 ( ) .METHOD_6 ( notes.getChangeId ( ) ) VAR_2 ) ) ; } notes.METHOD_7 ( ) ; java.util.List < TYPE_1 > VAR_3   TYPE_4.METHOD_8 ( ) ; VAR_3.METHOD_9 ( notes.METHOD_10 ( ) .values ( ) ) ; return TYPE_3.METHOD_3 ( VAR_3 ) ; } ) ( VAR_3 VAR_3   TYPE_4.METHOD_8 ( ) ) ( TYPE_3 TYPE_3 ) ( notes TYPE_2 notes ) 
( METHOD_1_return private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { java.util.List < TYPE_1 > result   new java.util.ArrayList ( VAR_1.size ( ) ) ; for ( TYPE_1 c : VAR_1 ) { if ( TYPE_3.METHOD_2 ( c ) .equals ( psId ) ) { result.add ( c ) ; } } return TYPE_4.METHOD_3 ( result ) ; } ) ( result result   new java.util.ArrayList ( VAR_1.size ( ) ) ) ( TYPE_4 TYPE_4 ) ( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) 
( VAR_2 VAR_2 ) ( METHOD_1_return public java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2   TYPE_3.METHOD_2 ( ) ; VAR_2.add ( VAR_3.create ( STRING_1 VAR_4 ) ) ; VAR_2.add ( VAR_3.create ( STRING_2 VAR_5 ) ) ; VAR_2.add ( VAR_3.create ( STRING_3 VAR_5 ) ) ; VAR_2.add ( VAR_3.create ( STRING_4 VAR_1.project ) ) ; VAR_2.add ( VAR_3.create ( STRING_5 VAR_6 ) ) ; return VAR_2 ; } ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2   TYPE_3.METHOD_2 ( ) ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col417 return VAR_2 ; ) 
( VAR_1 VAR_1   new TYPE_1 ( null new TYPE_2 ( VAR_2 ) null null ) ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1 ) ( m m   VAR_1.METHOD_3 ( repo c VAR_3 ) ) ( c c   METHOD_2 ( ) ) 
( VAR_2 VAR_2   new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( ps com.google.gerrit.reviewdb.client.PatchSet ps ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_2.METHOD_2 ( ps.getId ( ) .getParentKey ( ) .equals ( cd.getId ( ) ) STRING_1 ps.getId ( ) cd.getId ( ) ) ; return this ; } ) ( TYPE_2 TYPE_2 ) 
( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( n n   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) 
( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( METHOD_1_return_line1_col280 return VAR_2 ; ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 ) throws java.io.IOException { java.util.List < TYPE_1 > VAR_2   new TYPE_2 < > ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { VAR_2.METHOD_2 ( VAR_3.METHOD_1 ( VAR_1 VAR_5 ) ) ; } return VAR_2 ; } ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   new TYPE_2 < > ( ) ) 
( VAR_1 java.lang.String VAR_1 ) ( TYPE_4 TYPE_4 ) ( group TYPE_3 group ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( TYPE_2.ProjectConfig project java.lang.String VAR_1 int VAR_2 int VAR_3 TYPE_3 group java.lang.String ref ) { TYPE_1 VAR_4   TYPE_4.METHOD_2 ( project group ) ; VAR_4.METHOD_3 ( VAR_2 ) ; VAR_4.METHOD_4 ( VAR_3 ) ; return TYPE_4.METHOD_5 ( project VAR_1 VAR_4 ref ) ; } ) ( VAR_4 VAR_4   TYPE_4.METHOD_2 ( project group ) ) ( VAR_4 VAR_4 ) ( VAR_2 int VAR_2 ) ( VAR_3 int VAR_3 ) ( VAR_4 VAR_4 ) ( project TYPE_2.ProjectConfig project ) ( ref java.lang.String ref ) ( TYPE_4 TYPE_4 ) 
( METHOD_1_return public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2.NameKey branch java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema   TYPE_4.schema ( VAR_2 ) ; int VAR_3 ; if ( ( schema !   null ) & & ( schema.METHOD_2 ( VAR_4 ) ) ) { VAR_3   ( VAR_5.METHOD_3 ( ) ) - INT_1 ; } else { VAR_3   VAR_5.METHOD_4 ( ) ; } return METHOD_1 ( schema branch VAR_1 VAR_3 ) ; } ) ( VAR_1 java.util.List < java.lang.String > VAR_1 ) ( TYPE_4 TYPE_4 ) ( branch TYPE_2.NameKey branch ) ( schema schema   TYPE_4.schema ( VAR_2 ) ) ( VAR_3 VAR_3 ) 
( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( out TYPE_1 out ) ( out out ) ( VAR_2 VAR_2   new TYPE_3 ( out ) ) ( VAR_2 VAR_2 ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) 
( VAR_1 VAR_1   new TYPE_1 ( repo ) ) ( VAR_1 VAR_1 ) 
( b TYPE_1 b ) ( a TYPE_1 a ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 a TYPE_1 b ) { return new TYPE_2 ( ) .append ( a.METHOD_2 ( ) b.METHOD_2 ( ) ) .append ( b.METHOD_3 ( ) a.METHOD_3 ( ) ) .METHOD_4 ( ) ; } ) 
( p p ) 
( ctx TYPE_1 ctx ) 
( create_return public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Project.NameKey project com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change   TYPE_1.METHOD_1 ( db ) .changes ( ) .get ( changeId ) ; TYPE_2.METHOD_2 ( change STRING_1 changeId ) ; TYPE_2.METHOD_3 ( change.getProject ( ) .equals ( project ) ( STRING_2 + STRING_3 ) project changeId change.getProject ( ) ) ; return new TYPE_1 ( args project change ) .METHOD_4 ( ) ; } ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) ( TYPE_2 TYPE_2 ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) ( change change   TYPE_1.METHOD_1 ( db ) .changes ( ) .get ( changeId ) ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 final TYPE_2 < TYPE_3 > VAR_2 ) 
( t t   TYPE_2.METHOD_3 ( psId VAR_1.path ( ) VAR_1.line ( ) ) ) ( e e ) ( TYPE_2 TYPE_2 ) ( e TYPE_1 e ) 
( VAR_1 VAR_1   VAR_2.get ( ) .patchSets ( ) .METHOD_2 ( rsrc.METHOD_3 ( ) .getId ( ) new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3.METHOD_4 ( false ) ; return VAR_3 ; } } ) ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col507 return VAR_1 ; ) ( rsrc TYPE_1 rsrc ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet VAR_1   VAR_2.get ( ) .patchSets ( ) .METHOD_2 ( rsrc.METHOD_3 ( ) .getId ( ) new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3.METHOD_4 ( false ) ; return VAR_3 ; } } ) ; return VAR_1 ; } ) 
( VAR_1 VAR_1   new TYPE_3 < TYPE_1.Id TYPE_2.Id > ( ) ) ( VAR_3 VAR_3 ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_4 ( ) ) ) || ( METHOD_3 ( ) .METHOD_1 ( ) ) ) & & ( ! ( METHOD_5 ( db ) ) ) ; } ) 
( TYPE_2 TYPE_2 ) ( e e   new TYPE_1 ( VAR_1 VAR_2 ) ) ( VAR_1 VAR_1   STRING_1 ) ( STRING_1 STRING_1 ) ( VAR_2 VAR_2   STRING_2 ) ( TYPE_2 TYPE_2 ) ( servlet servlet ) ( STRING_2 STRING_2 ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 b ) { if ( ( ( ( b.config ) !   null ) & & ( ( VAR_1 ) !   null ) ) & & ( ( VAR_2 ) !   null ) ) { return new TYPE_1 ( b.view b.config VAR_1 VAR_2 ) ; } return null ; } ) ( b TYPE_2 b ) 
( r TYPE_2.Result r ) ( VAR_2 VAR_2   VAR_3.create ( db admin.METHOD_2 ( ) STRING_1 STRING_2 VAR_1 r.getChangeId ( ) ) ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2 ) ( METHOD_1_return private TYPE_1.Result METHOD_1 ( TYPE_2.Result r java.lang.String VAR_1 ) throws java.io.IOException TYPE_3 { TYPE_2 VAR_2   VAR_3.create ( db admin.METHOD_2 ( ) STRING_1 STRING_2 VAR_1 r.getChangeId ( ) ) ; return VAR_2.to ( git STRING_3 ) ; } ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db cd ) ) ) || ( METHOD_4 ( ) .METHOD_5 ( ) ) ) || ( METHOD_6 ( ) .METHOD_7 ( ) ) ; } ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return private static java.lang.String METHOD_1 ( final java.lang.String VAR_1 final java.lang.String key final java.lang.String VAR_2 ) { final int n   VAR_1.METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; return ( ( VAR_1.METHOD_3 ( 0 n ) ) + VAR_2 ) + ( VAR_1.METHOD_3 ( ( ( n + INT_1 ) + ( key.length ( ) ) ) ) ) ; } ) ( key final java.lang.String key ) ( VAR_2 final java.lang.String VAR_2 ) ( n n   VAR_1.METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ) ( VAR_1 VAR_1 ) 
( VAR_3 VAR_3 ) ( VAR_4 VAR_4   VAR_2.METHOD_6 ( ) ) ( cm TYPE_1 cm ) ( cm cm ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   VAR_3.METHOD_5 ( VAR_1 ) ) ( VAR_1 VAR_1   cm.METHOD_2 ( cm.METHOD_3 ( ) .METHOD_4 ( ) ) ) 
( ctx ctx ) ( update update   ctx.METHOD_2 ( psId ) ) ( ctx ctx ) ( ctx TYPE_1 ctx ) 
( VAR_2 VAR_2   new TYPE_1 ( STRING_1 ) ) ( VAR_2 VAR_2 ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( STRING_2 ) ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2   new TYPE_1 ( STRING_1 ) ; java.lang.String [ ] VAR_3   VAR_1.METHOD_2 ( STRING_2 ) ; for ( java.lang.String s : VAR_3 ) { if ( ! ( s.METHOD_3 ( ) .isEmpty ( ) ) ) { VAR_2.append ( ( ( STRING_3 + s ) + STRING_4 ) ) ; } } return VAR_2.toString ( ) ; } ) ( VAR_1 VAR_1 ) 
( METHOD_1_return public TYPE_1.PatchSet METHOD_1 ( ) { if ( ( currentPatchSetId ) !   null ) { for ( int i   ( patchSets.size ( ) ) - 1 ; i >   0 ; i -- ) { final TYPE_1.PatchSet ps   patchSets.get ( i ) ; if ( ps.getId ( ) .equals ( currentPatchSetId ) ) { return ps ; } } } return null ; } ) 
( result result   ( VAR_1 ) ? VAR_3.METHOD_1 ( db changeId ) : VAR_3.METHOD_3 ( db changeId ) ) ( METHOD_1_return_line1_col531 return result ; ) ( result result ) ( METHOD_1_return private TYPE_1.Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change.Id changeId boolean VAR_1 ) throws TYPE_2 com.google.gwtorm.server.OrmException java.io.IOException { if ( VAR_2.METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1.Result result   ( VAR_1 ) ? VAR_3.METHOD_1 ( db changeId ) : VAR_3.METHOD_3 ( db changeId ) ; if ( VAR_4.METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } ) ( VAR_1 boolean VAR_1 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) 
( VAR_1 TYPE_1 VAR_1 ) ( type TYPE_3 type ) ( VAR_2 VAR_2 ) ( add_return private boolean add ( TYPE_1 VAR_1 TYPE_2 w TYPE_3 type ) throws com.google.gwtorm.server.OrmException { TYPE_4 user   VAR_2.create ( args.db w.getAccountId ( ) ) ; try { if ( METHOD_1 ( user w.METHOD_2 ( ) ) ) { if ( w.METHOD_3 ( type ) ) { VAR_3.add ( w.getAccountId ( ) ) ; } return true ; } } catch ( TYPE_5 e ) { } return false ; } ) ( user user   VAR_2.create ( args.db w.getAccountId ( ) ) ) ( w TYPE_2 w ) 
( Truth com.google.common.truth.Truth ) ( c c   get ( changeId VAR_1 ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( VAR_1 VAR_1 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( info TYPE_2 info ) 
( update update ) ( ctx TYPE_1 ctx ) ( change change   ctx.getChange ( ) ) ( ctx ctx ) ( update update   ctx.METHOD_2 ( change.currentPatchSetId ( ) ) ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change   ctx.getChange ( ) ; TYPE_3 update   ctx.METHOD_2 ( change.currentPatchSetId ( ) ) ; change.METHOD_3 ( VAR_1 ) ; change.METHOD_4 ( ctx.METHOD_5 ( ) ) ; update.METHOD_3 ( VAR_1 ) ; METHOD_6 ( ctx update ) ; return true ; } ) ( ctx ctx ) ( change change ) ( change change ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1.METHOD_2 ( ) ) ) { return TYPE_3.METHOD_3 ( db.METHOD_4 ( ) .METHOD_1 ( notes.getChangeId ( ) ) ) ; } else { return notes.METHOD_5 ( ) .METHOD_6 ( ) ; } } ) ( notes TYPE_2 notes ) 
( b b   new TYPE_1 ( ) ) 
( notes notes   METHOD_3 ( ) ) ( Truth com.google.common.truth.Truth ) ( notes notes ) ( ctl ctl   METHOD_5 ( notes ) ) (   notes.METHOD_4 ( ) ) 
( branch final TYPE_1.NameKey branch ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 TYPE_3 VAR_3 ) ( VAR_4 byte [ ] VAR_4 ) ( path java.lang.String path ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_2 VAR_2 ) ( base org.eclipse.jgit.revwalk.RevCommit base ) ( repo org.eclipse.jgit.lib.Repository repo ) 
( apply_return public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc.METHOD_1 ( ) ) ) { return VAR_2.format ( rsrc.METHOD_2 ( ) .getProject ( ) ) ; } throw new TYPE_3 ( rsrc.METHOD_2 ( ) .getProject ( ) .getName ( ) ) ; } ) ( rsrc TYPE_2 rsrc ) 
( TYPE_2 TYPE_2 ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2.METHOD_2 ( ) .METHOD_3 ( this.METHOD_4 ( ) VAR_1.METHOD_4 ( ) ) .METHOD_5 ( this.VAR_2 VAR_3 ) .METHOD_6 ( METHOD_7 ( ) METHOD_7 ( ) ) .METHOD_6 ( this.VAR_4 VAR_5 ) .METHOD_5 ( this.VAR_6 VAR_7 TYPE_3.METHOD_8 ( ) ) .METHOD_5 ( this.psId VAR_1.psId TYPE_3.METHOD_8 ( ) .METHOD_9 ( ) ) .result ( ) ; } ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   new TYPE_2 ( ) ) ( VAR_1 VAR_1 ) 
( r r ) ( nodeCall_toString_return r.toString ( ) ) ( r r ) ( VAR_1 VAR_1 ) ( r r ) ( METHOD_1_return_line1_col276 return r.toString ( ) ; ) ( s s   VAR_1.METHOD_2 ( ) ) ( r r ) ( VAR_1 final TYPE_1 VAR_1 ) ( METHOD_1_return public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 s   VAR_1.METHOD_2 ( ) ; final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( STRING_1 ) ; r.append ( VAR_1.METHOD_3 ( ) ) ; r.append ( STRING_2 ) ; return r.toString ( ) ; } ) ( r r   new java.lang.StringBuilder ( ) ) 
( p p   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) 
( VAR_2 java.lang.String VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) 
( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( patchSet patchSet   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( 2 ) ) ) ( path path   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( INT_1 ) ) ) ( change change   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( 1 ) ) ) ( VAR_1 TYPE_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   METHOD_6 ( VAR_3 ) ) 
( VAR_1 VAR_1 ) ( VAR_4 VAR_4 ) 
( r r ) ( topic topic   STRING_1 ) ( STRING_1 STRING_1 ) ( p TYPE_1 p ) ( r r ) ( r r ) ( r r   METHOD_3 ( ( STRING_2 + topic ) ) ) ( r r ) 
( VAR_4 VAR_4 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( token ) ) ( token final java.lang.String token ) ( TYPE_2 TYPE_2 ) 
( VAR_1 TYPE_1 VAR_1 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_2 TYPE_2 VAR_2 ) ( TYPE_3 TYPE_3 ) 
( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( refs refs ) ( ref ref   refs.get ( VAR_1 ) ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 org.eclipse.jgit.lib.ObjectId VAR_3 ) 
( VAR_4 VAR_4 ) ( METHOD_1_return private TYPE_1.Result METHOD_1 ( TYPE_2 git boolean VAR_1 ) throws java.io.IOException TYPE_3 { TYPE_4.METHOD_2 ( git STRING_1 ) ; java.lang.String file   ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ; TYPE_5 VAR_3   VAR_4.create ( db admin.METHOD_3 ( ) ( STRING_5 + ( VAR_2 ) ) file ( STRING_6 + ( VAR_2 ) ) ) ; ( VAR_2 ) ++ ; return VAR_3.to ( git STRING_7 ) ; } ) ( file file   ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ) ( TYPE_4 TYPE_4 ) ( VAR_3 VAR_3   VAR_4.create ( db admin.METHOD_3 ( ) ( STRING_5 + ( VAR_2 ) ) file ( STRING_6 + ( VAR_2 ) ) ) ) ( VAR_3 VAR_3 ) ( VAR_1 boolean VAR_1 ) ( git TYPE_2 git ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( ) { java.lang.String type   METHOD_2 ( ) .METHOD_3 ( STRING_1 null STRING_2 ) ; if ( type    null ) { return VAR_1 ; } for ( TYPE_1 t : TYPE_2.values ( ) ) { if ( type.METHOD_4 ( t.name ( ) ) ) { return t ; } } throw new TYPE_3 ( ( STRING_3 + type ) ) ; } ) ( type type   METHOD_2 ( ) .METHOD_3 ( STRING_1 null STRING_2 ) ) 
( a a   new TYPE_1 ( ) ) ( a a ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3.Id TYPE_4.Id > VAR_1 ) { TYPE_1 a   new TYPE_1 ( ) ; a.type   VAR_1.getKey ( ) .get ( ) ; final TYPE_5 VAR_2   VAR_3.METHOD_2 ( VAR_1.getKey ( ) ) ; VAR_4   VAR_2.METHOD_3 ( ) .getName ( ) ; a.value   TYPE_6.toString ( VAR_1.getValue ( ) .get ( ) ) ; return a ; } ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_2 < TYPE_3.Id TYPE_4.Id > VAR_1 ) ( VAR_3 VAR_3 ) ( METHOD_1_return_line1_col338 return a ; ) ( TYPE_6 TYPE_6 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( VAR_1.getKey ( ) ) ) 
( METHOD_1_return public java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String TYPE_1 > ) ( VAR_1.get ( ) .apply ( revision ) .value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( ) ) ) { return VAR_2.METHOD_4 ( db VAR_3 project VAR_4 ) ; } catch ( java.lang.Exception e ) { VAR_5.error ( ( STRING_1 + project ) e ) ; return false ; } } ) 
( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 int VAR_1 ) ( id TYPE_1.Key id ) ( base com.google.gerrit.reviewdb.client.PatchSet.Id base ) ( VAR_3 TYPE_3 VAR_3 ) ( token java.lang.String token ) ( VAR_4 TYPE_4 VAR_4 ) ( TYPE_5 TYPE_5 ) 
( VAR_1 VAR_1 ) ( commit_return private org.eclipse.jgit.revwalk.RevCommit commit ( TYPE_1.ProjectConfig cfg ) throws java.io.IOException TYPE_2 TYPE_3 { TYPE_4 VAR_1   new TYPE_4 ( VAR_2 cfg.getProject ( ) .METHOD_1 ( ) db ) ; util.METHOD_2 ( INT_1 ) ; util.METHOD_3 ( VAR_1.METHOD_4 ( ) ) ; VAR_1.METHOD_5 ( STRING_1 ) ; cfg.commit ( VAR_1 ) ; TYPE_5 ref   db.METHOD_6 ( VAR_3 ) ; return util.METHOD_7 ( ) .parseCommit ( ref.METHOD_8 ( ) ) ; } ) ( ref ref   db.METHOD_6 ( VAR_3 ) ) ( util util ) ( cfg TYPE_1.ProjectConfig cfg ) ( VAR_1 VAR_1   new TYPE_4 ( VAR_2 cfg.getProject ( ) .METHOD_1 ( ) db ) ) ( util util ) ( util util ) ( cfg cfg ) ( db db ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( ) { if ( TYPE_2.METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2.METHOD_3 ( ) .getId ( ) ) ; } else { TYPE_1 r   new TYPE_3 ( null ) ; r.METHOD_4 ( true ) ; return r ; } } ) 
( message java.lang.String message ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2   TYPE_1.METHOD_2 ( VAR_1.METHOD_3 ( ) TYPE_2.METHOD_4 ( VAR_1.METHOD_5 ( ) ) ) ; if ( VAR_2.METHOD_6 ( TYPE_3 ) ) { return VAR_2.METHOD_7 ( TYPE_3.length ( ) ) ; } else { return VAR_2 ; } } ) ( VAR_2 VAR_2   TYPE_1.METHOD_2 ( VAR_1.METHOD_3 ( ) TYPE_2.METHOD_4 ( VAR_1.METHOD_5 ( ) ) ) ) ( VAR_1 com.google.gerrit.reviewdb.client.Project VAR_1 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2   new java.util.ArrayList < TYPE_1 > ( VAR_1.size ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( TYPE_3.METHOD_2 ( getRefName ( ) VAR_3.METHOD_3 ( ) ) ) { VAR_2.add ( VAR_3 ) ; } } return VAR_2 ; } ) ( VAR_2 VAR_2   new java.util.ArrayList < TYPE_1 > ( VAR_1.size ( ) ) ) ( VAR_2 VAR_2 ) ( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) ( METHOD_1_return_line1_col313 return VAR_2 ; ) 
( TYPE_4 TYPE_4 ) ( msg java.lang.String msg ) ( id int id ) ( input input   TYPE_3.create ( ) ) ( VAR_1 TYPE_1 < TYPE_2.ChangeInfo > VAR_1 ) ( TYPE_3 TYPE_3 ) ( input input ) 
( view view ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( e TYPE_1 < TYPE_2 > e ) 
( rsp final TYPE_2.HttpServletResponse rsp ) ( req final TYPE_1 req ) 
( VAR_4 VAR_4 ) ( METHOD_1_return_line1_col355 return VAR_4 ; ) ( VAR_4 VAR_4   TYPE_3.METHOD_5 ( ) ) ( VAR_2 VAR_2 ) ( VAR_1 boolean VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2   new TYPE_2 ( VAR_3 ) ; VAR_2.METHOD_2 ( revision.METHOD_3 ( ) ) ; VAR_2.METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4   TYPE_3.METHOD_5 ( ) ; while ( VAR_2.METHOD_6 ( ) ) { VAR_4.add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_3 ) ) ( TYPE_3 TYPE_3 ) 
( create_return public TYPE_1 create ( java.lang.String VAR_1 ) { if ( METHOD_1 ( ) ) { try { VAR_2.METHOD_2 ( VAR_2.get ( ) new TYPE_2 ( VAR_3 ) ) ; VAR_4   METHOD_3 ( ) ; VAR_5.info ( STRING_1 ) ; } catch ( java.lang.Exception e ) { VAR_5.error ( ( STRING_2 + STRING_3 ) e ) ; } } return VAR_2.get ( ) .create ( VAR_1 ) ; } ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { com.google.gerrit.reviewdb.client.Change c   change ( ) ; if ( c    null ) { VAR_1   java.util.Collections.METHOD_2 ( ) ; } else if ( ( VAR_2 ) !   null ) { return VAR_2.get ( c.currentPatchSetId ( ) ) ; } else { VAR_1   TYPE_1.METHOD_3 ( VAR_3.METHOD_4 ( db METHOD_5 ( ) c.currentPatchSetId ( ) ) ) ; } } return VAR_1 ; } ) ( METHOD_1_return_line1_col507 return VAR_1 ; ) 
( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return public com.google.gerrit.reviewdb.client.Account METHOD_1 ( final java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > r   METHOD_2 ( VAR_1 ) ; return ( r.size ( ) )    1 ? VAR_2.get ( r.METHOD_3 ( ) .METHOD_4 ( ) ) .METHOD_5 ( ) : null ; } ) ( r r   METHOD_2 ( VAR_1 ) ) 
( Assert org.junit.Assert ) ( r r   METHOD_2 ( ( ( STRING_1 + ( VAR_1.get ( ) ) ) + STRING_2 ) ) ) ( VAR_3 VAR_3   TYPE_3.METHOD_4 ( r ) ) ( Assert org.junit.Assert ) ( TYPE_3 TYPE_3 ) 
( cfg cfg ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) { switch ( TYPE_2.get ( ) ) { case VAR_1 : METHOD_2 ( true ) ; METHOD_3 ( true ) ; break ; case VAR_2 : METHOD_2 ( true ) ; METHOD_3 ( false ) ; break ; case VAR_3 : case VAR_4 : default : break ; } return this ; } ) 
( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( VAR_3 VAR_3 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2   VAR_3.create ( VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_3 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_4.of ( db ) ; } } ; } ) ( VAR_2 VAR_2   VAR_3.create ( VAR_1 ) ) 
( cd final com.google.gerrit.server.query.change.ChangeData cd ) ( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_1.OrmException { if ( cd.METHOD_2 ( user ) ) { return true ; } try { TYPE_2.Change c   cd.change ( db ) ; if ( ( c !   null ) & & ( VAR_1.METHOD_3 ( c user ) .METHOD_4 ( ) ) ) { cd.METHOD_5 ( user ) ; return true ; } else { return false ; } } catch ( TYPE_3 e ) { return false ; } } ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 rsrc ) throws TYPE_4 { java.util.Map < com.google.gerrit.reviewdb.client.Project.NameKey TYPE_2 > VAR_1   new TYPE_5 < > ( ) ; for ( TYPE_2 ps : rsrc.METHOD_2 ( ) .METHOD_1 ( ) ) { VAR_1.put ( ps.getProject ( ) .METHOD_3 ( ) ps ) ; } VAR_1.METHOD_4 ( ) .METHOD_5 ( VAR_2.user ( user ) .METHOD_6 ( VAR_3 VAR_1.METHOD_4 ( ) ) ) ; return VAR_1.values ( ) ; } ) ( VAR_1 VAR_1 ) ( rsrc TYPE_3 rsrc ) ( VAR_1 VAR_1   new TYPE_5 < > ( ) ) ( VAR_1 VAR_1 ) 
( u u   util.user ( VAR_1 VAR_3 ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( util util ) 
( VAR_1 TYPE_1 VAR_1 ) 
( INT_1 INT_1 ) ( VAR_1 VAR_1   INT_1 ) ( VAR_2 VAR_2   new TYPE_1 ( VAR_1 ) ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3   new TYPE_1 ( 0 ) ) 
( VAR_3 VAR_3 ) ( VAR_1 VAR_1   METHOD_2 ( ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_2 VAR_2   VAR_3.changes ( ) .query ( ) .METHOD_3 ( 1 ) .get ( ) ) 
( TYPE_4 TYPE_4 ) ( VAR_1 VAR_1   TYPE_4.METHOD_2 ( project.get ( ) ) ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1   TYPE_4.METHOD_2 ( project.get ( ) ) ; TYPE_1 VAR_2   new TYPE_1 ( VAR_1 VAR_3 ) ; try { if ( VAR_2.METHOD_3 ( ) ) { return VAR_2 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } ) ( VAR_2 VAR_2   new TYPE_1 ( VAR_1 VAR_3 ) ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( info TYPE_1.ChangeInfo info ) 
( VAR_2 VAR_2   METHOD_6 ( VAR_3 ) ) ( TYPE_1 TYPE_1 ) 
( line final int line ) ( TYPE_4 TYPE_4 ) ( token final java.lang.String token ) ( id final TYPE_2.Key id ) ( base final TYPE_1 base ) ( VAR_1 final TYPE_3 VAR_1 ) 
( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) 
( toString_return public java.lang.String toString ( ) { if ( METHOD_1 ( ) ) { return ( ( ( ( ( STRING_1 + ( error ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; } else { return ( ( ( STRING_5 + ( VAR_3 ) ) + STRING_6 ) + ( VAR_4 ) ) + STRING_4 ; } } ) 
( repo repo   METHOD_2 ( STRING_1 ) ) ( key key   change.getKey ( ) .get ( ) ) ( change change ) ( change change   insert ( METHOD_3 ( repo ) ) ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) ( n n   VAR_1.METHOD_3 ( TYPE_2.METHOD_4 ( new TYPE_3 ( STRING_2 STRING_3 ) ) ) ) 
( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1   new TYPE_1 ( ) ; VAR_1.METHOD_2 ( new TYPE_2 ( ) .METHOD_3 ( TYPE_3.METHOD_4 ( ) ) ) ; VAR_1.METHOD_5 ( TYPE_4.METHOD_6 ( METHOD_7 ( ) getRevision ( ) METHOD_8 ( ) ) ) ; VAR_1.METHOD_9 ( TYPE_5.METHOD_4 ( ) ) ; return java.util.Collections.METHOD_10 ( VAR_1 ) ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new TYPE_1 ( ) ) ( Collections java.util.Collections ) 
( VAR_5 VAR_5   user ( VAR_4 admin ) ) ( VAR_3 VAR_3   user ( VAR_4 ) ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1   TYPE_1.METHOD_2 ( ) ) ( TYPE_1 TYPE_1 ) ( Assert org.junit.Assert ) 
( VAR_1 TYPE_2 VAR_1 ) ( c com.google.gerrit.reviewdb.client.Change c ) ( VAR_1 VAR_1 ) ( c c ) ( METHOD_1_return public TYPE_1.Result METHOD_1 ( com.google.gerrit.reviewdb.client.Change c TYPE_2 VAR_1 ) { METHOD_2 ( ) ; VAR_2   VAR_1 ; change   c ; try { METHOD_3 ( ) ; return TYPE_3.create ( c VAR_3 ) ; } finally { if ( ( rw ) !   null ) { rw.METHOD_4 ( ) ; } if ( ( repo ) !   null ) { repo.close ( ) ; } } } ) 
( TYPE_1 TYPE_1 ) ( rsrc TYPE_2 rsrc ) ( apply_return public TYPE_1 < ? > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 TYPE_5 com.google.gwtorm.server.OrmException java.io.IOException { TYPE_6 ctl   rsrc.METHOD_1 ( ) ; if ( ! ( ctl.METHOD_2 ( ) ) ) { VAR_1.user ( user ) .METHOD_3 ( VAR_2 ) ; } VAR_3.index ( db.get ( ) rsrc.getChange ( ) ) ; return TYPE_1.METHOD_4 ( ) ; } ) ( VAR_3 VAR_3 ) ( input TYPE_3 input ) ( rsrc rsrc ) ( ctl ctl   rsrc.METHOD_1 ( ) ) 
( result final java.util.List < TYPE_1 > result ) ( VAR_1 VAR_1 ) ( r r   new java.util.ArrayList < TYPE_2 > ( result.size ( ) ) ) 
( VAR_1 java.lang.String VAR_1 ) ( get_return public TYPE_1 get ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2   METHOD_1 ( VAR_1 ) ; if ( VAR_2 !   null ) { TYPE_1 VAR_3   new TYPE_1 ( config ) ; VAR_3.METHOD_2 ( VAR_2 ) ; return VAR_3 ; } else { return null ; } } catch ( java.io.IOException e ) { VAR_4.error ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) e ) ; return null ; } } ) 
( VAR_1 VAR_1   new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return METHOD_2 ( ) .METHOD_3 ( input db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > VAR_1   new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return METHOD_2 ( ) .METHOD_3 ( input db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ; return TYPE_3.METHOD_4 ( patchSets ( ) ) .METHOD_5 ( VAR_1 ) .METHOD_6 ( ) ; } ) 
( METHOD_1_return private boolean METHOD_1 ( final TYPE_1 id ) { if ( id.METHOD_2 ( ) .METHOD_3 ( STRING_1 ) ) { return METHOD_4 ( ) ; } if ( id.METHOD_2 ( ) .METHOD_3 ( STRING_2 ) ) { return true ; } for ( final TYPE_2 t : VAR_1 ) { if ( t.METHOD_5 ( id ) ) { return true ; } } return false ; } ) ( id final TYPE_1 id ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( m m ) ( get_return private TYPE_1 < TYPE_2 > get ( java.lang.String p TYPE_3 < TYPE_1 < TYPE_2 > > m ) { TYPE_1 < TYPE_2 > r   m.get ( p ) ; if ( r    null ) { r   TYPE_1.METHOD_1 ( ) .METHOD_2 ( ) ; } return r ; } ) ( r r   m.get ( p ) ) ( p java.lang.String p ) ( r r ) ( get_return_line1_col210 return r ; ) ( m TYPE_3 < TYPE_1 < TYPE_2 > > m ) 
( METHOD_1_return private static java.lang.String METHOD_1 ( ) { if ( TYPE_1.METHOD_2 ( ) ) { TYPE_2 VAR_1   TYPE_1.METHOD_3 ( ) .METHOD_4 ( ) .METHOD_5 ( ) ; if ( VAR_1 !   null ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : case VAR_4 : return STRING_2 ; case VAR_5 : case VAR_6 : return STRING_3 ; default : return null ; } } } return null ; } ) 
( id final TYPE_1 id ) ( VAR_2 final java.lang.String VAR_2 ) ( VAR_1 java.util.List < TYPE_2 > VAR_1 ) ( message message   ( ( id.name ( ) ) + STRING_1 ) + VAR_2 ) 
( VAR_4 VAR_4   new java.util.ArrayList < > ( ) ) ( VAR_4 VAR_4 ) ( VAR_1 boolean VAR_1 ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_3 ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2   new TYPE_2 ( VAR_3 ) ; VAR_2.METHOD_2 ( revision.METHOD_3 ( ) ) ; VAR_2.METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4   new java.util.ArrayList < > ( ) ; while ( VAR_2.METHOD_5 ( ) ) { VAR_4.add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col365 return VAR_4 ; ) 
( repo repo ) ( Assert org.junit.Assert ) ( repo repo ) ( VAR_1 VAR_1   repo.commit ( ) .create ( ) ) ( master master   repo.commit ( ) .METHOD_2 ( VAR_1 ) .create ( ) ) ( Assert org.junit.Assert ) 
( event TYPE_1 event ) ( VAR_1 VAR_1   new TYPE_2 ( VAR_2.getValue ( ) ) ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 VAR_2 org.eclipse.jgit.lib.Repository repo ) { return new TYPE_1 ( TYPE_4.of ( new TYPE_5 ( VAR_1 ) new TYPE_6 ( VAR_1 VAR_3 ) new TYPE_7 ( VAR_1 VAR_4 ) new TYPE_8 ( VAR_1 ) new TYPE_9 ( VAR_1 VAR_4 VAR_5 VAR_2 ) new TYPE_10 ( VAR_1 repo VAR_6 ) new TYPE_11 ( VAR_7 ) new TYPE_12 ( VAR_6 ) ) ) ; } ) ( VAR_2 TYPE_3 VAR_2 ) 
( VAR_5 VAR_5   METHOD_4 ( VAR_1 args ) ) ( VAR_4 VAR_4   METHOD_3 ( ctx ) ) ( VAR_2 VAR_2 ) ( args java.lang.String [ ] args ) ( VAR_3 VAR_3   METHOD_2 ( ctx ) ) ( ctx ctx   VAR_2.get ( ) ) ( result TYPE_1 result ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_6 VAR_6 ) 
( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1.size ( ) ) !   1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 < TYPE_2 > ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ; } ) ( VAR_1 final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) 
( Assert org.junit.Assert ) ( repo repo ) ( repo repo ) ( VAR_1 VAR_1   repo.METHOD_2 ( STRING_1 ) ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_2 java.lang.String ... VAR_2 ) ( result result   VAR_3.METHOD_2 ( VAR_1.METHOD_3 ( ) VAR_1.METHOD_4 ( ) VAR_1.METHOD_5 ( ) ) ) ( Assert org.junit.Assert ) 
( VAR_1 TYPE_3 VAR_1 ) ( VAR_1 VAR_1 ) ( id final com.google.gerrit.reviewdb.client.Change.Id id ) ( METHOD_1_return public final TYPE_1 < TYPE_2.Result > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change.Id id TYPE_3 VAR_1 ) { return VAR_1.submit ( new TYPE_4 < TYPE_2.Result > ( ) { public TYPE_2.Result METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db   VAR_2.METHOD_3 ( ) ) { return METHOD_4 ( db id ) ; } } } ) ; } ) 
( c c   METHOD_2 ( ) ) ( m m   VAR_1.METHOD_3 ( repo c VAR_3 ) ) ( VAR_1 VAR_1   new TYPE_1 ( null new TYPE_2 ( VAR_2 ) null null null ) ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( changeId.get ( ) revision ) ) 
( cd com.google.gerrit.server.query.change.ChangeData cd ) ( delete_return public TYPE_1 < TYPE_2 > delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id   cd.getId ( ) .toString ( ) ; try { if ( cd.getChange ( ) .getStatus ( ) .METHOD_1 ( ) ) { VAR_1.METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2.METHOD_2 ( id ) ; commit ( VAR_2 ) ; } return TYPE_3.METHOD_3 ( null ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } } ) ( id id   cd.getId ( ) .toString ( ) ) ( cd cd ) 
( VAR_3 VAR_3   METHOD_2 ( ) .add ( STRING_4 STRING_5 ) .message ( STRING_6 ) .create ( ) ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1   METHOD_2 ( ) .add ( STRING_1 STRING_2 ) .message ( STRING_3 ) .create ( ) ) ( VAR_2 VAR_2   getChangeId ( VAR_1 ) ) ( VAR_4 VAR_4   getChangeId ( VAR_3 ) ) 
( VAR_2 VAR_2   new TYPE_1 ( new TYPE_2 ( 0 ) 0 ) ) ( VAR_1 VAR_1   new TYPE_1 ( new TYPE_2 ( 1 ) 2 ) ) ( VAR_2 VAR_2 ) 
( METHOD_1_return_line1_col377 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) (   new TYPE_1.NameKey ( ( STRING_1 + ( key.toString ( ) ) ) ) ) ( key final TYPE_1.Id key ) ( METHOD_1_return public com.google.gerrit.reviewdb.client.AccountGroup METHOD_1 ( final TYPE_1.Id key ) { final TYPE_1.NameKey   new TYPE_1.NameKey ( ( STRING_1 + ( key.toString ( ) ) ) ) ; final com.google.gerrit.reviewdb.client.AccountGroup VAR_1   new com.google.gerrit.reviewdb.client.AccountGroup ( key null ) ; VAR_1.METHOD_2 ( VAR_2 ) ; return VAR_1 ; } ) ( VAR_1 VAR_1   new com.google.gerrit.reviewdb.client.AccountGroup ( key null ) ) 
( b org.eclipse.jgit.revwalk.RevCommit b ) ( METHOD_1_return static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit a org.eclipse.jgit.revwalk.RevCommit b ) { if ( ( a.METHOD_2 ( ) ) !   ( b.METHOD_2 ( ) ) ) { return false ; } for ( int i   0 ; i < ( a.METHOD_2 ( ) ) ; i++ ) { if ( ( a.METHOD_3 ( i ) ) !   ( b.METHOD_3 ( i ) ) ) { return false ; } } return true ; } ) ( a org.eclipse.jgit.revwalk.RevCommit a ) 
( VAR_2 VAR_2   STRING_1 + ( VAR_1.METHOD_2 ( ) ) ) ( VAR_3 VAR_3 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 VAR_3 ) 
( VAR_1 VAR_1   table.METHOD_2 ( ) ) ( table table ) ( table table ) ( VAR_2 VAR_2   table.METHOD_3 ( ) ) 
( VAR_2 VAR_2   new TYPE_2 ( ) ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) 
( project com.google.gerrit.reviewdb.client.Project project ) ( changes changes   null ) ( db db ) 
( VAR_2 VAR_2 ) 
( VAR_2 VAR_2 ) 
( VAR_3 VAR_3   new TYPE_3 ( STRING_4 STRING_5 ) ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( VAR_2 VAR_2   new TYPE_3 ( STRING_2 STRING_3 ) ) 
( VAR_4 VAR_4 ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_2 com.google.gerrit.reviewdb.client.PatchSet VAR_2 ) ( TYPE_3 TYPE_3 ) ( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.revwalk.RevWalk rw TYPE_1 VAR_1 org.eclipse.jgit.revwalk.RevCommit edit com.google.gerrit.reviewdb.client.PatchSet VAR_2 ) throws TYPE_2 java.io.IOException { org.eclipse.jgit.revwalk.RevCommit VAR_3   rw.parseCommit ( org.eclipse.jgit.lib.ObjectId.METHOD_2 ( VAR_2.getRevision ( ) .get ( ) ) ) ; if ( VAR_3.METHOD_3 ( ) .equals ( edit.METHOD_3 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3.METHOD_4 ( rw VAR_1 VAR_3 edit ) ; } ) ( VAR_3 VAR_3   rw.parseCommit ( org.eclipse.jgit.lib.ObjectId.METHOD_2 ( VAR_2.getRevision ( ) .get ( ) ) ) ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( rw rw ) ( edit org.eclipse.jgit.revwalk.RevCommit edit ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1.METHOD_2 ( ) ; TYPE_4 VAR_2   VAR_3.METHOD_3 ( ) ; TYPE_5 VAR_4   TYPE_6.get ( VAR_1 ) ; TYPE_7 VAR_5   VAR_4.getProject ( ) .METHOD_4 ( ) ; if ( ! ( VAR_2.METHOD_5 ( VAR_6 [ VAR_5.METHOD_6 ( ) ] VAR_7 ) ) ) { return VAR_1.METHOD_7 ( ) ; } return VAR_8 ; } ) ( VAR_4 VAR_4   TYPE_6.get ( VAR_1 ) ) ( VAR_5 VAR_5   VAR_4.getProject ( ) .METHOD_4 ( ) ) ( METHOD_1_return_line1_col339 return VAR_8 ; ) ( VAR_2 VAR_2   VAR_3.METHOD_3 ( ) ) ( TYPE_6 TYPE_6 ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_8 VAR_8 ) ( VAR_3 VAR_3 ) 
( rsp final TYPE_2.HttpServletResponse rsp ) ( req final TYPE_1 req ) 
( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2.values ( ) ; } else { java.util.ArrayList < TYPE_2 > plugins   new java.util.ArrayList < TYPE_2 > ( VAR_2.values ( ) ) ; plugins.METHOD_2 ( VAR_3.values ( ) ) ; return plugins ; } } ) ( VAR_1 boolean VAR_1 ) 
( VAR_4 VAR_4   insert ( METHOD_3 ( VAR_2 null null null null ) ) ) ( VAR_1 VAR_1   METHOD_2 ( STRING_1 ) ) ( VAR_2 VAR_2   METHOD_2 ( STRING_2 ) ) ( VAR_3 VAR_3   insert ( METHOD_3 ( VAR_1 null null null null ) ) ) 
( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) ( METHOD_1_return private org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 me TYPE_2 VAR_1 org.eclipse.jgit.revwalk.RevCommit VAR_2 org.eclipse.jgit.revwalk.RevCommit base org.eclipse.jgit.lib.ObjectId VAR_3 ) throws java.io.IOException { TYPE_3 VAR_4   new TYPE_3 ( ) ; VAR_4.METHOD_2 ( VAR_3 ) ; VAR_4.METHOD_3 ( base ) ; VAR_4.METHOD_4 ( VAR_2.METHOD_5 ( ) ) ; VAR_4.METHOD_6 ( METHOD_7 ( me ) ) ; VAR_4.METHOD_8 ( VAR_2.METHOD_9 ( ) ) ; return VAR_1.insert ( VAR_4 ) ; } ) ( VAR_4 VAR_4   new TYPE_3 ( ) ) ( VAR_1 VAR_1 ) ( VAR_2 org.eclipse.jgit.revwalk.RevCommit VAR_2 ) ( base org.eclipse.jgit.revwalk.RevCommit base ) ( VAR_4 VAR_4 ) ( VAR_3 org.eclipse.jgit.lib.ObjectId VAR_3 ) ( VAR_1 TYPE_2 VAR_1 ) ( me TYPE_1 me ) ( VAR_4 VAR_4 ) 
( VAR_1 boolean VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( db change.change ( ) ) ) ( change com.google.gerrit.server.query.change.ChangeData change ) 
( id id   TYPE_3.METHOD_3 ( user.METHOD_4 ( ) .METHOD_5 ( ) ) ) ( user TYPE_2 user ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 user ) { if ( ! ( VAR_1.METHOD_2 ( ) ) ) { return VAR_2 ; } java.lang.String id   TYPE_3.METHOD_3 ( user.METHOD_4 ( ) .METHOD_5 ( ) ) ; if ( id    null ) { return VAR_2 ; } try { return new TYPE_4 ( VAR_3.get ( id ) ) ; } catch ( TYPE_5 e ) { VAR_4.METHOD_6 ( java.lang.String.format ( STRING_1 id ) e ) ; return VAR_2 ; } } ) 
( VAR_1 VAR_1 ) ( TYPE_1 TYPE_1 ) ( topic topic   VAR_1.METHOD_2 ( ) ) 
( VAR_3 VAR_3   TYPE_3.METHOD_4 ( TYPE_2.METHOD_2 ( VAR_4 ) VAR_2 ) ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( ) ) ) ( VAR_1 TYPE_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( VAR_6 VAR_6 ) ( VAR_5 VAR_5   TYPE_2.METHOD_5 ( VAR_3 VAR_2 ) ) ( VAR_1 VAR_1 ) ( TYPE_3 TYPE_3 ) ( TYPE_2 TYPE_2 ) ( TYPE_6 TYPE_6 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int VAR_2   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( ) ) ; int VAR_3   TYPE_3.METHOD_4 ( TYPE_2.METHOD_2 ( VAR_4 ) VAR_2 ) ; TYPE_4 VAR_5   TYPE_2.METHOD_5 ( VAR_3 VAR_2 ) ; TYPE_5 VAR_6   TYPE_6.METHOD_1 ( ) .METHOD_6 ( new TYPE_7 ( VAR_5 VAR_7 ) ) ; VAR_1.METHOD_7 ( VAR_6 ) ; VAR_6.close ( ) ; return TYPE_2.METHOD_8 ( VAR_5 ) ; } ) ( VAR_6 VAR_6   TYPE_6.METHOD_1 ( ) .METHOD_6 ( new TYPE_7 ( VAR_5 VAR_7 ) ) ) 
( cm TYPE_1 cm ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2.METHOD_2 ( ( ! ( VAR_1.METHOD_3 ( ) ) ) ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change   TYPE_3.METHOD_4 ( db ) .changes ( ) .get ( changeId ) ; TYPE_2.METHOD_5 ( change STRING_3 changeId ) ; return new TYPE_1 ( args change.getProject ( ) change ) .METHOD_6 ( ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( TYPE_2 TYPE_2 ) ( TYPE_3 TYPE_3 ) ( TYPE_2 TYPE_2 ) ( change change   TYPE_3.METHOD_4 ( db ) .changes ( ) .get ( changeId ) ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( rsrc TYPE_2 rsrc ) ( VAR_2 VAR_2 ) ( input TYPE_3 input ) ( apply_return public TYPE_1 < ? > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException TYPE_5 { if ( ( VAR_1.get ( ) )    ( rsrc.METHOD_1 ( ) ) ) { throw new TYPE_6 ( STRING_1 ) ; } return VAR_2.METHOD_2 ( rsrc.METHOD_1 ( ) ) ; } ) 
( METHOD_1_return private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1.NameKey ) { try { return VAR_1.METHOD_1 ( ) ; } catch ( TYPE_2 err ) { VAR_2.METHOD_2 ( ( STRING_1 + ( name.get ( ) ) ) err ) ; return null ; } } ) ( final TYPE_1.NameKey ) 
( url url ) ( TYPE_4 TYPE_4 ) ( p TYPE_1 p ) 
( project com.google.gerrit.reviewdb.client.Project project ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 VAR_3 ) ( file java.lang.String file ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( project.getName ( ) VAR_1 file ) ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project java.lang.String VAR_1 java.lang.String file ) { TYPE_2 < TYPE_1 > VAR_2   VAR_3.METHOD_2 ( project.getName ( ) VAR_1 file ) ; return VAR_2.isEmpty ( ) ? null : VAR_2.METHOD_3 ( ) ; } ) 
( METHOD_1_return public final TYPE_1 METHOD_1 ( TYPE_2 key ) { if ( ( ( VAR_1 )    null ) & & ( ( VAR_2 ) !   null ) ) { throw new TYPE_3 ( STRING_1 ) ; } else if ( ( ( VAR_1 ) !   null ) & & ( ( VAR_2 )    null ) ) { throw new TYPE_3 ( STRING_2 ) ; } return METHOD_1 ( key 0 true ( ( VAR_1 ) !   null ? new TYPE_4 < TYPE_5 > ( ) : null ) ) ; } ) ( key TYPE_2 key ) 
( VAR_3 short VAR_3 ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_4 VAR_4   METHOD_2 ( VAR_2 VAR_3 line ) ) ( VAR_1 VAR_1 ) ( line int line ) ( VAR_1 java.lang.StringBuilder VAR_1 ) 
( METHOD_1_return private boolean METHOD_1 ( TYPE_1 commit ) throws java.io.IOException { try ( TYPE_2 VAR_1   TYPE_1.METHOD_2 ( rw.METHOD_3 ( ) ) ) { VAR_1.METHOD_4 ( ) ; VAR_1.METHOD_5 ( commit ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_2 : VAR_3 ) { if ( VAR_1.METHOD_6 ( VAR_1.parseCommit ( VAR_2 ) VAR_1.parseCommit ( commit ) ) ) { return true ; } } } return false ; } ) ( commit TYPE_1 commit ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( VAR_1 VAR_1   TYPE_4.METHOD_2 ( project.get ( ) ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1   TYPE_4.METHOD_2 ( project.get ( ) ) ; TYPE_1 VAR_2   new TYPE_1 ( VAR_1 ) ; try { if ( VAR_2.METHOD_3 ( ) ) { return VAR_2 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } ) ( VAR_2 VAR_2   new TYPE_1 ( VAR_1 ) ) ( TYPE_4 TYPE_4 ) 
( id com.google.gerrit.reviewdb.client.Account.Id id ) ( TYPE_4 TYPE_4 ) 
( VAR_1 VAR_1   METHOD_3 ( git true ) ) ( VAR_2 VAR_2   METHOD_3 ( git true ) ) ( git git   METHOD_2 ( ) ) ( change change   METHOD_3 ( git true ) ) ( changes changes   METHOD_4 ( change ) ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( ) { return TYPE_1.create ( ) .set ( STRING_1 false ) .set ( STRING_2 0 ) .set ( STRING_3 FLOAT_1 ) .set ( STRING_4 true ) .set ( STRING_5 INT_1 ) .set ( STRING_6 false ) .set ( STRING_7 true ) .set ( STRING_8 true ) .set ( STRING_9 STRING_10 ) .set ( STRING_11 TYPE_2.METHOD_2 ( type ) ) ; } ) ( TYPE_1 TYPE_1 ) 
( VAR_3 VAR_3   new TYPE_2 ( getChange ( ) walk VAR_1 VAR_4 VAR_5 VAR_6 ) ) ( VAR_1 VAR_1   getRevision ( ) ) ( VAR_12 VAR_12 ) ( walk walk   new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) ( VAR_3 VAR_3 ) 
( change change ) ( VAR_4 VAR_4   ( ( TYPE_5 ) ( VAR_5 ) ) ) ( VAR_3 VAR_3 ) ( METHOD_1_return_line1_col388 return VAR_7 ; ) ( VAR_2 VAR_2   VAR_3.METHOD_3 ( ) ) (   change.METHOD_4 ( ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1.METHOD_2 ( ) ; TYPE_4 VAR_2   VAR_3.METHOD_3 ( ) ; TYPE_5 VAR_4   ( ( TYPE_5 ) ( VAR_5 ) ) ; TYPE_6.Change change   TYPE_7.get ( VAR_1 ) ; TYPE_8.NameKey   change.METHOD_4 ( ) ; if ( ! ( VAR_2.METHOD_5 ( TYPE_9.create ( name.get ( ) ) VAR_6 ) ) ) { return VAR_1.METHOD_6 ( ) ; } return VAR_7 ; } ) ( TYPE_7 TYPE_7 ) ( VAR_1 TYPE_2 VAR_1 ) ( change change   TYPE_7.get ( VAR_1 ) ) ( VAR_7 VAR_7 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1.id ( VAR_2.get ( ) .apply ( change in ) .VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) ( in TYPE_2 in ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( s s   ( ( TYPE_2 ) ( db ) ) ) ( e e   new TYPE_3 ( s ) ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2   new TYPE_4 ( VAR_1 ) ; TYPE_3 in   TYPE_5.METHOD_2 ( VAR_2 ) ) { return new TYPE_1 ( in ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) e ) ; } catch ( TYPE_7 e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) e ) ; } } ) ( VAR_1 final TYPE_2 VAR_1 ) 
(   STRING_1 ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( value ) ) ( Assert org.junit.Assert ) ( STRING_2 STRING_2 ) ( TYPE_2 TYPE_2 ) ( Assert org.junit.Assert ) ( value value   STRING_2 ) ( STRING_1 STRING_1 ) 
( Assert org.junit.Assert ) ( in in   new TYPE_4 ( ) ) ( email user.email ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.changes ( ) .id ( r.getChangeId ( ) ) ) ( r r   METHOD_2 ( ) ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 VAR_3 ) ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( m TYPE_1 < TYPE_2 > m ) 
( VAR_1 VAR_1 ) 
( input input   TYPE_3.create ( ) ) ( TYPE_3 TYPE_3 ) ( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) ( user java.lang.String user ) ( TYPE_4 TYPE_4 ) ( id int id ) ( input input ) 
( info TYPE_1 info ) ( url_return private java.lang.String url ( TYPE_1 info ) { return info.METHOD_1 ( ) ? TYPE_2.METHOD_2 ( base VAR_1 info.path ( ) ) : ( VAR_2 )    ( VAR_3 ) ? TYPE_2.METHOD_3 ( base VAR_1 info.path ( ) ) : TYPE_2.METHOD_4 ( VAR_1 info.path ( ) ) ; } ) 
( METHOD_1_return_line1_col350 return r ; ) ( r r   new TYPE_3 < TYPE_1.Key TYPE_1.Id > ( ) ) ( r r ) ( METHOD_1_return private java.util.Map < TYPE_1.Key TYPE_1.Id > METHOD_1 ( ) throws TYPE_2.OrmException { final java.util.Map < TYPE_1.Key TYPE_1.Id > r   new TYPE_3 < TYPE_1.Key TYPE_1.Id > ( ) ; for ( TYPE_4.Change c : db.changes ( ) .METHOD_2 ( VAR_1.METHOD_3 ( ) ) ) { r.put ( c.getKey ( ) c.getId ( ) ) ; } return r ; } ) 
( in TYPE_1 < TYPE_2 > in ) ( METHOD_1_return_line1_col313 return in ; ) ( METHOD_1_return private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > in ) { if ( in !   null ) { java.util.Collections.METHOD_1 ( TYPE_3.METHOD_2 ( in ) new TYPE_4 < TYPE_2 > ( ) { public int METHOD_3 ( TYPE_2 a TYPE_2 b ) { return a.METHOD_4 ( ) .METHOD_5 ( b.METHOD_4 ( ) ) ; } } ) ; } return in ; } ) ( in in ) 
( VAR_1 final TYPE_1 VAR_1 ) ( METHOD_1_return private static boolean METHOD_1 ( final TYPE_1 VAR_1 final TYPE_2 VAR_2 ) { if ( ( VAR_2.getChange ( ) .getStatus ( ) ) !   ( VAR_3 ) ) { return false ; } for ( final TYPE_1 t : TYPE_3.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_3 ( ) ) { if ( ! ( VAR_2.METHOD_4 ( t ) ) ) { return false ; } } return true ; } ) ( VAR_2 final TYPE_2 VAR_2 ) 
( VAR_1 final TYPE_1 VAR_1 ) ( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) )    ( VAR_1.METHOD_1 ( ) ) ) { final TYPE_2 < ? > VAR_2   ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( getName ( ) .equals ( VAR_2.getName ( ) ) ) & & ( METHOD_2 ( ) .equals ( VAR_2.METHOD_2 ( ) ) ) ; } return false ; } ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( b b   new TYPE_1 ( ) ) 
( TYPE_3 TYPE_3 ) ( project TYPE_2.Project project ) ( METHOD_1_return_line1_col436 return VAR_2 ; ) ( VAR_2 VAR_2 ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo TYPE_2.Project project ) { TYPE_1 result   TYPE_3.METHOD_2 ( VAR_1 repo project ) ; if ( result !   ( VAR_2 ) ) { return result ; } result   TYPE_3.METHOD_2 ( VAR_3 repo project ) ; if ( result !   ( VAR_2 ) ) { return result ; } result   TYPE_3.METHOD_2 ( VAR_4 repo project ) ; if ( result !   ( VAR_2 ) ) { return result ; } return VAR_2 ; } ) ( TYPE_3 TYPE_3 ) ( result result   TYPE_3.METHOD_2 ( VAR_1 repo project ) ) ( repo org.eclipse.jgit.lib.Repository repo ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2   VAR_1.METHOD_2 ( ) ; try { TYPE_4 VAR_3   VAR_2.METHOD_3 ( STRING_1 ) ; if ( VAR_3.METHOD_4 ( ) ) { return new TYPE_1 ( VAR_3.METHOD_5 ( 1 ) ) ; } } finally { VAR_2.close ( ) ; } return null ; } catch ( TYPE_5 e ) { return null ; } } ) 
( TYPE_1 TYPE_1 ) ( message java.lang.String message ) 
( VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 ) ( VAR_3 boolean VAR_3 ) ( VAR_4 VAR_4 ) ( VAR_4 TYPE_1 VAR_4 ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return protected Project.NameKey METHOD_1 ( java.lang.String VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 boolean VAR_3 TYPE_1 VAR_4 ) throws TYPE_2 { TYPE_3 in   new TYPE_3 ( ) ; in.name   ( VAR_1 ) ; VAR_5   ( VAR_2 !   null ) ? VAR_2.get ( ) : null ; VAR_6   VAR_4 ; VAR_7   VAR_3 ; VAR_6   VAR_4 ; return METHOD_1 ( in ) ; } ) ( in in   new TYPE_3 ( ) ) ( VAR_4 VAR_4 ) ( VAR_3 VAR_3 ) 
( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( result result ) ( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return public TYPE_1.Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change.Id changeId TYPE_1 VAR_1 ) throws TYPE_2 com.google.gwtorm.server.OrmException java.io.IOException { if ( VAR_2.METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1.Result result   VAR_3.METHOD_1 ( db changeId VAR_1 ) ; if ( VAR_4.METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } ) ( VAR_3 VAR_3 ) ( result result   VAR_3.METHOD_1 ( db changeId VAR_1 ) ) ( METHOD_1_return_line1_col488 return result ; ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 int VAR_2 ) ( VAR_3 int VAR_3 ) ( VAR_9 VAR_9 ) ( VAR_4 int VAR_4 ) ( VAR_6 VAR_6 ) ( VAR_5 VAR_5   METHOD_2 ( VAR_1 ) ) ( edit boolean edit ) 
( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > VAR_1   TYPE_2.of ( TYPE_3.getName ( ) TYPE_4.getName ( ) ) ; java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_2   VAR_3.get ( ) .METHOD_2 ( VAR_1 ) .METHOD_3 ( changeId ) ; if ( ( VAR_2.size ( ) ) !   1 ) { throw new TYPE_5 ( changeId ) ; } return VAR_2.get ( 0 ) .METHOD_4 ( ) ; } ) ( VAR_2 VAR_2   VAR_3.get ( ) .METHOD_2 ( VAR_1 ) .METHOD_3 ( changeId ) ) ( VAR_3 VAR_3 ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.of ( TYPE_3.getName ( ) TYPE_4.getName ( ) ) ) ( VAR_2 VAR_2 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return METHOD_2 ( ) ; } if ( ! ( VAR_2.METHOD_3 ( ) ) ) { METHOD_4 ( ) ; return METHOD_2 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo   VAR_3.METHOD_5 ( METHOD_6 ( ) ) ) { METHOD_1 ( repo ) ; VAR_1   true ; } catch ( TYPE_2 | java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_2 ( ) ; } ) 
( METHOD_1_return protected TYPE_1 < ? > METHOD_1 ( TYPE_2.Factory VAR_1 TYPE_3 rsrc TYPE_4 input ) throws TYPE_5 TYPE_6 { return VAR_2.apply ( rsrc.METHOD_2 ( ) .METHOD_3 ( ) rsrc.getChange ( ) rsrc.getChange ( ) .currentPatchSetId ( ) null ) ; } ) ( input TYPE_4 input ) ( VAR_1 TYPE_2.Factory VAR_1 ) ( rsrc TYPE_3 rsrc ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1 ) ( cfg cfg ) ( cfg cfg   VAR_1.METHOD_2 ( VAR_2 ) .METHOD_3 ( ) ) ( cfg cfg ) 
( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col474 return VAR_1 ; ) ( METHOD_1_return public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { com.google.gerrit.reviewdb.client.Change c   change ( db ) ; if ( c    null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( db ) ) { if ( p.getId ( ) .equals ( c.currentPatchSetId ( ) ) ) { VAR_1   p ; return p ; } } } return VAR_1 ; } ) ( db TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > db ) 
( s TYPE_2 < TYPE_3 > s ) ( get_return public TYPE_1.ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return TYPE_5.apply ( VAR_1.METHOD_1 ( s ) .format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 e ) ; } } ) 
( METHOD_1_return public java.lang.String METHOD_1 ( ) { if ( ( ( change ) !   null ) & & ( ( METHOD_2 ( ) ) !   null ) ) { final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( METHOD_2 ( ) ) ; r.append ( change.getChangeId ( ) ) ; return r.toString ( ) ; } return null ; } ) 
( METHOD_1_return protected java.lang.String METHOD_1 ( ) { if ( ( ( change ) !   null ) & & ( ( METHOD_2 ( ) ) !   null ) ) { final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( METHOD_2 ( ) ) ; r.append ( change.getChangeId ( ) ) ; return r.toString ( ) ; } return null ; } ) 
( db db ) ( db db ) ( db final com.google.gerrit.reviewdb.server.ReviewDb db ) ( change final com.google.gerrit.reviewdb.client.Change change ) ( approvals approvals   db.METHOD_2 ( ) .METHOD_3 ( change.getId ( ) ) .METHOD_4 ( ) ) 
( change change ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change TYPE_2 user ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1   change.getProject ( ) ; try { return VAR_2.METHOD_1 ( VAR_1 user ) .METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) e ) ; } } ) ( change com.google.gerrit.reviewdb.client.Change change ) ( user TYPE_2 user ) ( VAR_1 VAR_1   change.getProject ( ) ) 
( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 r ) throws TYPE_3 { try { TYPE_4 VAR_1   VAR_2.get ( ) ; VAR_1.METHOD_2 ( r.METHOD_3 ( ) ) ; VAR_1.METHOD_4 ( r.METHOD_5 ( ) ) ; return VAR_1.apply ( change ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) ( r TYPE_2 r ) 
( VAR_1 VAR_1   METHOD_2 ( STRING_1 ) ) ( VAR_4 VAR_4   insert ( METHOD_3 ( VAR_2 ) ) ) ( VAR_3 VAR_3   insert ( METHOD_3 ( VAR_1 ) ) ) ( VAR_2 VAR_2   METHOD_2 ( STRING_2 ) ) 
( VAR_1 boolean VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( boolean VAR_1 ) { if ( VAR_2.METHOD_1 ( VAR_1 ) ) { if ( ( ( VAR_3 ) instanceof TYPE_1 ) & & ( VAR_4.METHOD_2 ( false true ) ) ) { ( ( TYPE_1 ) ( VAR_3 ) ) .METHOD_1 ( ) ; } VAR_5.METHOD_3 ( this ) ; VAR_5.METHOD_4 ( ) ; return true ; } else { return false ; } } ) 
( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) ( TYPE_1 TYPE_1 ) 
( VAR_3 VAR_3   new TYPE_2 ( ) .METHOD_2 ( ) .METHOD_3 ( METHOD_4 ( VAR_1 ) TYPE_3.name ( ) ) ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String VAR_1 int VAR_2 ) throws java.io.IOException { byte [ ] VAR_3   new TYPE_2 ( ) .METHOD_2 ( ) .METHOD_3 ( METHOD_4 ( VAR_1 ) TYPE_3.name ( ) ) ; return new TYPE_4 ( VAR_3 ) .METHOD_5 ( STRING_1 ) .METHOD_6 ( TYPE_3.name ( ) ) .METHOD_7 ( VAR_2 ) ; } ) ( VAR_2 int VAR_2 ) 
( in TYPE_2 in ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes.id ( VAR_1.get ( ) .apply ( revision in ) .VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) 
( notes notes   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ( notes notes ) ( VAR_2 VAR_2   notes.METHOD_4 ( ) ) ( VAR_1 VAR_1   req.METHOD_1 ( ) ) ( req req ) ( TYPE_1 TYPE_1 ) ( apply_return public TYPE_1 < java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException { TYPE_5 VAR_1   req.METHOD_1 ( ) ; TYPE_6 notes   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2   notes.METHOD_4 ( ) ; if ( VAR_2    null ) { VAR_2   java.util.Collections.METHOD_5 ( ) ; } return TYPE_1.METHOD_6 ( VAR_2 ) ; } ) ( VAR_1 VAR_1 ) ( req TYPE_2 req ) 
( r r   new TYPE_2 ( ) ) ( TYPE_3 TYPE_3 ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return public java.lang.String METHOD_1 ( final TYPE_1.NameKey branch ) { final TYPE_2 r   new TYPE_2 ( ) ; TYPE_3.p ( r branch.getParentKey ( ) ) ; TYPE_3.METHOD_2 ( r branch ) ; TYPE_3.a ( r STRING_1 ) ; return ( VAR_1 ) + r ; } ) ( TYPE_3 TYPE_3 ) ( branch final TYPE_1.NameKey branch ) 
( a a ) ( VAR_1 VAR_1 ) ( METHOD_1_return private static Account.Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db TYPE_1 VAR_1 java.lang.String VAR_2 ) throws TYPE_2 com.google.gwtorm.server.OrmException java.io.IOException { com.google.gerrit.reviewdb.client.Account a   VAR_1.METHOD_2 ( db VAR_2 ) ; if ( a    null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a.getId ( ) ; } ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( a a   VAR_1.METHOD_2 ( db VAR_2 ) ) 
( VAR_1 final java.util.Map < java.lang.String TYPE_1 > VAR_1 ) ( final java.lang.String ) ( value final java.lang.String value ) 
( VAR_2 VAR_2 ) ( VAR_1 VAR_1   info.METHOD_1 ( ) .values ( ) ) ( info info ) ( info TYPE_1.ChangeInfo info ) ( info info ) ( TYPE_3 TYPE_3 ) 
( insert insert   METHOD_2 ( VAR_2 VAR_1 ) ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( TYPE_1 TYPE_1 ) ( u u ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c   TYPE_1.METHOD_1 ( project VAR_1.getAccountId ( ) ) ; TYPE_2 u   METHOD_2 ( c VAR_1 ) ; u.METHOD_3 ( c.METHOD_4 ( ) ) ; u.METHOD_5 ( c.METHOD_6 ( ) .get ( ) ) ; u.commit ( ) ; return c ; } ) ( u u   METHOD_2 ( c VAR_1 ) ) ( u u ) ( u u ) ( c c   TYPE_1.METHOD_1 ( project VAR_1.getAccountId ( ) ) ) ( c c ) ( METHOD_1_return_line1_col350 return c ; ) 
( final java.lang.String ) ( file_return private TYPE_1 file ( final java.lang.String ) throws java.io.IOException { final TYPE_2 VAR_1   VAR_2.METHOD_1 ( ) ; try { final TYPE_1 e   new TYPE_1 ( ) ; e.METHOD_2 ( VAR_3 ) ; e.METHOD_3 ( VAR_1.insert ( VAR_4 TYPE_3.METHOD_4 ( ) ) ) ; VAR_1.METHOD_5 ( ) ; return e ; } finally { VAR_1.METHOD_6 ( ) ; } } ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.METHOD_1 ( ) ) 
( repo repo   VAR_1.METHOD_2 ( project ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return protected java.util.List < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw.METHOD_3 ( rw.parseCommit ( repo.METHOD_4 ( STRING_1 ) .METHOD_5 ( ) ) ) ; return TYPE_1.METHOD_6 ( rw ) ; } finally { rw.METHOD_7 ( ) ; } } finally { repo.close ( ) ; } } ) 
( db org.eclipse.jgit.lib.Repository db ) ( id org.eclipse.jgit.lib.ObjectId id ) 
( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { final TYPE_2 VAR_2   db.METHOD_3 ( ) .get ( new TYPE_2.Key ( VAR_3 VAR_1 ) ) ; if ( VAR_2 !   null ) { return TYPE_1.of ( VAR_2.getAccountId ( ) ) ; } return TYPE_1.METHOD_4 ( ) ; } finally { db.close ( ) ; } } ) ( VAR_1 java.lang.String VAR_1 ) ( schema schema ) ( db db   schema.METHOD_2 ( ) ) 
( apply_return public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { TYPE_4 VAR_1   VAR_2.get ( ) ; if ( VAR_1    null ) { throw new TYPE_3 ( ) ; } java.lang.String url   VAR_1.METHOD_1 ( rsrc.METHOD_2 ( ) .METHOD_3 ( ) size ) ; if ( TYPE_5.METHOD_4 ( url ) ) { throw new TYPE_3 ( ) ; } else { return TYPE_6.METHOD_5 ( url ) ; } } ) ( VAR_1 VAR_1 ) ( url url   VAR_1.METHOD_1 ( rsrc.METHOD_2 ( ) .METHOD_3 ( ) size ) ) ( rsrc TYPE_2 rsrc ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.get ( ) ) 
( VAR_1 VAR_1 ) ( t t   this ) ( VAR_2 VAR_2   VAR_1 ) ( VAR_1 int VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 t   this ; int VAR_2   VAR_1 ; while ( ( t.METHOD_2 ( ) ) & & ( 0 < VAR_1 ) ) { VAR_1 -- ; t   ( ( TYPE_2 ) ( t ) ) .VAR_3.METHOD_3 ( ) ; } if ( t.METHOD_2 ( ) ) return ( ( TYPE_2 ) ( t ) ) .VAR_4 ; throw new TYPE_3 ( VAR_2 ) ; } ) 
( VAR_1 TYPE_1 VAR_1 ) ( TYPE_5 TYPE_5 ) 
( TYPE_4 TYPE_4 ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1    null ) || ( ( VAR_1.getValue ( ) )    null ) ) { throw new TYPE_3 ( STRING_1 ) ; } return TYPE_4.METHOD_2 ( VAR_2.METHOD_1 ( VAR_1.getValue ( ) ) ) ; } ) 
( VAR_1 TYPE_2 VAR_1 ) ( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 TYPE_3 input ) throws TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException { TYPE_7 in   new TYPE_7 ( ) ; VAR_2   id ; java.util.List < TYPE_8 > VAR_3   put.get ( ) .apply ( VAR_1 in ) ; if ( VAR_3.isEmpty ( ) ) { return TYPE_9.METHOD_1 ( ) ; } else if ( ( VAR_3.size ( ) )    1 ) { return VAR_3.get ( 0 ) ; } else { throw new TYPE_10 ( ) ; } } ) ( VAR_3 VAR_3   put.get ( ) .apply ( VAR_1 in ) ) ( in in   new TYPE_7 ( ) ) ( id id ) ( input TYPE_3 input ) ( put put ) 
( VAR_2 VAR_2   TYPE_3.METHOD_2 ( ) ) ( VAR_2 VAR_2 ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return private java.util.Map < com.google.gerrit.reviewdb.client.Account.Id TYPE_1 > METHOD_1 ( final TYPE_2.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Account.Id TYPE_1 > VAR_2   TYPE_3.METHOD_2 ( ) ; for ( final TYPE_1 m : db.METHOD_3 ( ) .METHOD_4 ( VAR_1 ) ) { VAR_2.put ( m.getAccountId ( ) m ) ; } return VAR_2 ; } ) ( METHOD_1_return_line1_col405 return VAR_2 ; ) ( VAR_1 final TYPE_2.Id VAR_1 ) 
( METHOD_1_return public static java.lang.String METHOD_1 ( final TYPE_1 req ) { java.lang.String VAR_1   req.METHOD_2 ( ) ; if ( TYPE_2.METHOD_3 ( VAR_1 ) ) { return VAR_2 ; } else { return TYPE_3.is ( CHAR_1 ) .METHOD_4 ( TYPE_4.METHOD_5 ( VAR_1 ) ) ; } } ) ( req final TYPE_1 req ) ( req req ) ( VAR_1 VAR_1   req.METHOD_2 ( ) ) 
( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1   new TYPE_1 ( VAR_2.METHOD_2 ( ) VAR_3 ) ) ( ps ps   METHOD_3 ( c ) ) ( c org.eclipse.jgit.revwalk.RevCommit c ) ( METHOD_1_return private org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit c ) throws com.google.gwtorm.server.OrmException java.io.IOException { TYPE_1 VAR_1   new TYPE_1 ( VAR_2.METHOD_2 ( ) VAR_3 ) ; com.google.gerrit.reviewdb.client.PatchSet ps   METHOD_3 ( c ) ; if ( ps !   null ) { try { METHOD_4 ( ps VAR_1 ) ; return METHOD_5 ( ) .insert ( VAR_4 VAR_1.toString ( ) .METHOD_6 ( STRING_1 ) ) ; } catch ( TYPE_2 e ) { throw new java.io.IOException ( e ) ; } } return null ; } ) 
( VAR_2 VAR_2 ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 VAR_3   new TYPE_3 < > ( ) ) 
( status final TYPE_1.Status status ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 final TYPE_1.Status status ) throws com.google.gwtorm.server.OrmException { return TYPE_3.METHOD_2 ( TYPE_4.METHOD_3 ( VAR_1 new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input.getStatus ( ) )    status ; } } ) ) ; } ) ( TYPE_3 TYPE_3 ) ( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) 
( ps ps   new TYPE_1 ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) ( VAR_1 !   null ? ( VAR_1.get ( ) ) + 1 : 1 ) ) ) ) ( change com.google.gerrit.reviewdb.client.Change change ) ( change change ) ( ps ps ) ( VAR_1 VAR_1   change.currentPatchSetId ( ) ) ( change change ) ( TYPE_2 TYPE_2 ) 
( TYPE_1 TYPE_1 ) ( a java.lang.String a ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2   TYPE_1.METHOD_2 ( TYPE_2.create ( a ) TYPE_2.create ( b ) ) .toString ( ) ) ( b java.lang.String b ) 
( TYPE_1 TYPE_1 ) ( VAR_1 java.util.List < org.eclipse.jgit.lib.ObjectId > VAR_1 ) ( METHOD_1_return private static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.eclipse.jgit.lib.ObjectId > VAR_1 ) { if ( ( VAR_1    null ) || ( VAR_1.isEmpty ( ) ) ) { return null ; } return TYPE_1.METHOD_2 ( VAR_1 new TYPE_2 < org.eclipse.jgit.lib.ObjectId java.lang.String > ( ) { public java.lang.String apply ( org.eclipse.jgit.lib.ObjectId id ) { return id.getName ( ) ; } } ) ; } ) 
( VAR_5 VAR_5 ) ( VAR_2 VAR_2 ) ( VAR_1 int VAR_1 ) 
( VAR_1 java.lang.String VAR_1 ) ( db db ) ( branch branch   db.METHOD_2 ( VAR_1 ) ) 
( equals_return private boolean equals ( com.google.gerrit.reviewdb.client.PatchSet p java.lang.String id ) { boolean VAR_1   ( METHOD_1 ( ) )    ( VAR_2 ) ; java.lang.String VAR_3   ( ( p.getRevision ( ) ) !   null ) ? p.getRevision ( ) .get ( ) : null ; return ( VAR_1 & & ( id.equals ( VAR_3 ) ) ) || ( ( ( ! VAR_1 ) & & ( VAR_3 !   null ) ) & & ( VAR_3.METHOD_2 ( id ) ) ) ; } ) ( p com.google.gerrit.reviewdb.client.PatchSet p ) ( VAR_3 VAR_3   ( ( p.getRevision ( ) ) !   null ) ? p.getRevision ( ) .get ( ) : null ) ( id java.lang.String id ) ( VAR_1 VAR_1   ( METHOD_1 ( ) )    ( VAR_2 ) ) 
( VAR_1 java.lang.String ... VAR_1 ) 
( input input   new TYPE_1 ( ) ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( VAR_2 ) ) ( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) 
( java.lang.String ) ( METHOD_1_return private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo java.lang.String ) throws java.io.IOException { TYPE_2 p   new TYPE_2 ( ) ; try ( TYPE_3 VAR_1   repo.METHOD_2 ( ) ) { p.METHOD_3 ( VAR_1 new org.eclipse.jgit.revwalk.RevWalk ( repo ) .METHOD_4 ( repo.METHOD_5 ( ) ) ) ; return p ; METHOD_6 ( VAR_2 ) ; } finally { VAR_1.close ( ) ; METHOD_7 ( VAR_3 ) ; to   VAR_4 ; } } ) ( repo org.eclipse.jgit.lib.Repository repo ) ( p p   new TYPE_2 ( ) ) 
( r r ) ( STRING_1 STRING_1 ) ( r r   METHOD_5 ( STRING_7 STRING_8 STRING_9 STRING_10 ) ) ( r r ) ( master master   STRING_1 ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   git.METHOD_2 ( ) .METHOD_3 ( STRING_2 ) .METHOD_4 ( ) ) ( git git ) 
( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 TYPE_4 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 ) ( change com.google.gerrit.reviewdb.client.Change change ) ( info TYPE_3 info ) ( VAR_3 TYPE_5 < com.google.gerrit.reviewdb.client.Account.Id > VAR_3 ) ( METHOD_1_return public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db TYPE_1 update TYPE_2 VAR_1 com.google.gerrit.reviewdb.client.Change change com.google.gerrit.reviewdb.client.PatchSet ps TYPE_3 info TYPE_4 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 TYPE_5 < com.google.gerrit.reviewdb.client.Account.Id > VAR_3 ) throws com.google.gwtorm.server.OrmException { return METHOD_1 ( db update VAR_1 change ps.getId ( ) ps.METHOD_2 ( ) info.METHOD_3 ( ) .METHOD_4 ( ) info.METHOD_5 ( ) .METHOD_4 ( ) VAR_2 VAR_3 ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( ps com.google.gerrit.reviewdb.client.PatchSet ps ) ( update TYPE_1 update ) 
( METHOD_1_return TYPE_1 METHOD_1 ( TYPE_2 user TYPE_3 revision ) { return new TYPE_1 ( user.METHOD_2 ( ) .METHOD_3 ( null ) revision.METHOD_4 ( ) TYPE_4.of ( user.getAccountId ( ) ) null VAR_1 VAR_2 TYPE_5.of ( ) ) ; } ) ( revision TYPE_3 revision ) ( user TYPE_2 user ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.Account METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 TYPE_2 com.google.gwtorm.server.OrmException { try { return VAR_2.get ( ) .METHOD_2 ( VAR_1 ) .METHOD_3 ( ) ; } catch ( TYPE_2 e ) { switch ( VAR_3 ) { case VAR_4 : case VAR_5 : case VAR_6 : if ( ( VAR_7.METHOD_4 ( VAR_1 ) )    null ) { return METHOD_5 ( VAR_1 ) ; } break ; default : } throw e ; } } ) 
( VAR_1 VAR_1   2 ) ( VAR_2 VAR_2   INT_1 ) ( p p   new TYPE_1 ( VAR_1 ) ) ( INT_1 INT_1 ) ( c c   new TYPE_2 ( p VAR_2 ) ) 
( VAR_1 int VAR_1 ) ( c TYPE_3 c ) ( req TYPE_1 req ) ( TYPE_4 TYPE_4 ) ( msg java.lang.String msg ) ( res TYPE_2.HttpServletResponse res ) ( res res ) ( TYPE_4 TYPE_4 ) 
( VAR_1 TYPE_3 < byte [ ] > VAR_1 ) ( r r   new java.util.ArrayList < TYPE_2 > ( ) ) ( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < byte [ ] > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > r   new java.util.ArrayList < TYPE_2 > ( ) ; for ( byte [ ] key : VAR_1 ) { byte [ ] VAR_2   METHOD_2 ( key ) ; if ( VAR_2 !   null ) { r.add ( new TYPE_2 ( key VAR_2 ) ) ; } } return new TYPE_4 < TYPE_2 > ( r ) ; } ) 
( rsrc rsrc   METHOD_3 ( changeId ) ) ( Truth com.google.common.truth.Truth ) ( changeId java.lang.String changeId ) ( VAR_3 VAR_3   VAR_4.METHOD_4 ( rsrc ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_4 VAR_4 ) 
( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( change change ) ( change com.google.gerrit.reviewdb.client.Change change ) ( a TYPE_1 a ) ( change change ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1 ) 
( req TYPE_1 req ) ( message java.lang.String message ) ( VAR_1 int VAR_1 ) ( res TYPE_2.HttpServletResponse res ) ( res res ) 
( event final TYPE_1 event ) ( VAR_1 VAR_1   ( ( TYPE_2 ) ( event.METHOD_2 ( ) ) ) ) 
( user user   VAR_3.create ( a.getAccountId ( ) ) ) ( VAR_1 TYPE_2 VAR_1 ) ( a com.google.gerrit.reviewdb.client.PatchSetApproval a ) ( VAR_3 VAR_3 ) ( a a ) ( TYPE_3 TYPE_3 ) ( VAR_4 VAR_4   ctl.METHOD_3 ( user ) .METHOD_4 ( VAR_2 ) ) ( ctl TYPE_1 ctl ) ( VAR_2 VAR_2   TYPE_3.METHOD_2 ( VAR_1.getName ( ) ) ) ( ctl ctl ) 
( u u   user ( ) ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( m TYPE_1 < TYPE_2 > m ) 
( repo repo ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( commit commit   repo.METHOD_3 ( repo.commit ( ) .message ( STRING_2 ) .add ( STRING_3 STRING_4 ) .add ( STRING_5 STRING_6 ) .create ( ) ) ) ( change change   METHOD_4 ( repo commit null null null ) .insert ( ) ) 
( b b   new TYPE_1 ( ) ) ( b b ) ( b b ) ( VAR_1 VAR_1   b.METHOD_2 ( ) ) 
( VAR_1 int VAR_1 ) 
( VAR_2 VAR_2 ) ( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) ( input input   new TYPE_2 ( ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { com.google.gerrit.reviewdb.client.Change c   change ( ) ; try { VAR_1   VAR_2.METHOD_2 ( c VAR_3.create ( c.METHOD_3 ( ) ) ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } return VAR_1 ; } ) ( METHOD_1_return_line1_col339 return VAR_1 ; ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( r r ) ( METHOD_1_return protected java.util.Set < TYPE_1.Id > METHOD_1 ( ) { final TYPE_2 r ; r   VAR_1.get ( change.METHOD_2 ( ) .getParentKey ( ) ) ; return r !   null ? r.METHOD_3 ( ) : VAR_2.Collections < TYPE_1.Id > METHOD_4 ( ) ; } ) 
( TYPE_2 TYPE_2 ) ( id com.google.gerrit.reviewdb.client.Change.Id id ) ( VAR_1 VAR_1   TYPE_2.METHOD_1 ( id ) ) 
( TYPE_1 TYPE_1 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( commit final TYPE_1 commit ) ( METHOD_1_return private boolean METHOD_1 ( final TYPE_1 commit ) { if ( ( ( VAR_1 )    null ) || ( VAR_1.isEmpty ( ) ) ) { return false ; } for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 )    null ) { return false ; } if ( ! ( VAR_4.currentPatchSetId ( ) .equals ( VAR_3 ) ) ) { return false ; } } return true ; } ) 
( VAR_4 VAR_4 ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_4 TYPE_4 VAR_4 ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( base TYPE_1 base ) ( VAR_5 boolean VAR_5 ) ( VAR_3 TYPE_3 VAR_3 ) ( VAR_5 VAR_5 ) ( VAR_2 VAR_2 ) ( VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( base base ) 
( util util ) ( VAR_5 VAR_5   util.user ( VAR_3 VAR_4 ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 int VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 key int VAR_1 ) { try { if ( ( VAR_1    0 ) & & ( ( VAR_2 ) !   null ) ) { return METHOD_2 ( key ) ; } else { return METHOD_3 ( key ) ; } } catch ( TYPE_3 | com.google.gwtorm.server.OrmException e ) { java.lang.String msg   STRING_1 ; VAR_3.METHOD_4 ( ( ( msg + STRING_2 ) + ( TYPE_4.METHOD_5 ( key.METHOD_6 ( ) ) ) ) e ) ; return TYPE_1.METHOD_7 ( msg ) ; } } ) ( key TYPE_2 key ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_2 VAR_2   new TYPE_3 ( VAR_1 ) ) ( Assert org.junit.Assert ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) 
( VAR_1 VAR_1   e.getValue ( ) ) ( e TYPE_1 < java.lang.String > e ) ( e e ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) 
( METHOD_1_return public java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 java.lang.String VAR_2 ) { try { java.lang.String VAR_3   java.lang.String.format ( STRING_1 VAR_1 VAR_2 ) ; byte [ ] VAR_4   VAR_3.METHOD_2 ( STRING_2 ) ; java.lang.String VAR_5   TYPE_1.METHOD_3 ( VAR_4 ) ; return VAR_6.METHOD_4 ( VAR_5 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( e ) ; } } ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) 
( n n   c.getName ( ) ) ( METHOD_1_return private static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n   c.getName ( ) ; n   n.METHOD_2 ( ( ( n.METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n.METHOD_4 ( STRING_1 ) ) n   n.METHOD_2 ( 1 ) ; return TYPE_2.METHOD_5 ( n ) ; } ) ( c c ) ( n n ) ( TYPE_2 TYPE_2 ) ( c TYPE_1 < ? > c ) 
( p p ) ( c final TYPE_1.ReviewDb c ) ( c c ) ( p p ) ( p p ) 
( VAR_2 VAR_2   table.METHOD_4 ( ) ) ( table table ) 
( TYPE_4 TYPE_4 ) ( METHOD_1_return protected static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 ... VAR_1 ) { return TYPE_4.METHOD_2 ( TYPE_5.METHOD_3 ( VAR_1 ) ) .METHOD_4 ( new TYPE_6 < TYPE_3 TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_3 in ) { return VAR_2 ; } } ) ; } ) ( VAR_1 TYPE_3 ... VAR_1 ) 
( VAR_2 VAR_2   TYPE_3.METHOD_2 ( VAR_1 ) ) ( TYPE_3 TYPE_3 ) ( res TYPE_1.HttpServletResponse res ) ( VAR_1 TYPE_2 VAR_1 ) ( res res ) ( res res ) ( res res ) ( out out   res.METHOD_7 ( ) ) ( res res ) ( res res ) 
( p p ) ( p p   new TYPE_1 ( ) ) ( patchSet patchSet ) ( patchSet final TYPE_2.PatchSet patchSet ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return_line1_col221 return p ; ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final TYPE_2.PatchSet patchSet ) { TYPE_1 p   new TYPE_1 ( ) ; p.revision   patchSet.getRevision ( ) .get ( ) ; VAR_1   TYPE_3.toString ( patchSet.METHOD_2 ( ) ) ; return p ; } ) 
( schema schema   METHOD_2 ( ) ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_2 ctx   VAR_2.METHOD_2 ( ) ; try { TYPE_3 VAR_3   new TYPE_4 ( ) .add ( VAR_1 ) ; try { ctx.METHOD_3 ( VAR_3 ) ; return true ; } catch ( TYPE_5 e ) { return false ; } } finally { try { ctx.close ( ) ; } catch ( TYPE_5 e ) { VAR_4.METHOD_4 ( STRING_1 e ) ; } } } ) ( VAR_2 VAR_2 ) ( ctx ctx   VAR_2.METHOD_2 ( ) ) 
( base java.lang.String base ) ( METHOD_1_return public java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String TYPE_1 > ) ( VAR_1.get ( ) .METHOD_2 ( base ) .apply ( revision ) .value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) 
( TYPE_1 TYPE_1 ) 
( p TYPE_1 p ) ( url url ) 
( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1 ) 
( VAR_2 VAR_2 ) ( cfg cfg   VAR_2.METHOD_2 ( project ) .METHOD_3 ( ) ) ( TYPE_3 TYPE_3 ) ( VAR_1 java.lang.String VAR_1 ) ( ref java.lang.String ref ) ( id TYPE_1 id ) 
( c c ) ( db final TYPE_2.ReviewDb db ) ( METHOD_1_return_line1_col229 return c ; ) ( c final TYPE_1 c ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( final TYPE_1 c final TYPE_2.ReviewDb db ) throws TYPE_3 TYPE_4.OrmException { if ( ! ( c.METHOD_2 ( db ) ) ) { throw new TYPE_3 ( c.getChange ( ) .getId ( ) ) ; } return c ; } ) 
( TYPE_3 TYPE_3 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( r r   METHOD_2 ( ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( result result   TYPE_3.METHOD_3 ( query ( r.getChangeId ( ) ) ) ) 
( VAR_5 VAR_5   TYPE_5.METHOD_3 ( ) .METHOD_4 ( STRING_1 ) .METHOD_5 ( ) ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_3 TYPE_2 VAR_3 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 org.eclipse.jgit.lib.Repository VAR_2 ) ( TYPE_5 TYPE_5 ) ( VAR_4 VAR_4   METHOD_2 ( VAR_1 VAR_3 ) ) 
( r r   METHOD_2 ( STRING_1 ) ) ( VAR_2 VAR_2 ) ( r r ) ( VAR_1 VAR_1   VAR_2.create ( db admin.METHOD_4 ( ) VAR_3 STRING_2 STRING_3 r.getChangeId ( ) ) ) ( VAR_1 VAR_1 ) ( r r ) 
( METHOD_1_return private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String TYPE_1 > VAR_2 ; try { TYPE_2 VAR_3   VAR_4.METHOD_2 ( VAR_5 ) .METHOD_3 ( ) ; VAR_2   VAR_3.METHOD_4 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_2.METHOD_5 ( ) ; } ) ( VAR_2 VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2 ) 
( VAR_2 VAR_2 ) ( VAR_2 VAR_2   VAR_3.METHOD_1 ( VAR_1 ) ) ( get_return_line1_col254 return VAR_2 ; ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 VAR_3 ) ( get_return public TYPE_1 get ( java.lang.String VAR_1 ) { TYPE_1 VAR_2   VAR_3.METHOD_1 ( VAR_1 ) ; if ( VAR_2    null ) { return null ; } VAR_2   METHOD_2 ( VAR_2 ) ; if ( VAR_2.METHOD_3 ( ) ) { VAR_3.METHOD_4 ( VAR_1 ) ; return null ; } return VAR_2 ; } ) 
( cfg TYPE_1 cfg ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col266 return VAR_2 ; ) ( VAR_2 VAR_2   cfg.METHOD_2 ( VAR_3 null VAR_4 ) ) ( cfg cfg ) ( VAR_2 VAR_2 ) ( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 cfg java.lang.String VAR_1 ) { java.lang.String VAR_2   cfg.METHOD_2 ( VAR_3 null VAR_4 ) ; if ( TYPE_2.METHOD_3 ( VAR_2 ) ) { VAR_2   VAR_5 ; } VAR_2   VAR_2.METHOD_4 ( STRING_1 VAR_1 ) ; return VAR_2 ; } ) 
( VAR_7 VAR_7 ) ( account com.google.gerrit.reviewdb.client.Account account ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_3 VAR_4 VAR_1 ) ) ( VAR_5 VAR_5   VAR_6.get ( ) ) ( VAR_7 VAR_7   new TYPE_4 ( account.getId ( ) ) ) ( VAR_7 VAR_7 ) ( VAR_2 VAR_2 ) ( VAR_7 VAR_7 ) ( VAR_6 VAR_6 ) ( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_2 VAR_2 ) 
( r r ) ( VAR_2 VAR_2 ) ( r r ) ( r r ) ( VAR_1 VAR_1   repo ( ) .METHOD_2 ( STRING_1 ) .METHOD_3 ( ) ) ( r r   METHOD_4 ( STRING_7 STRING_8 STRING_4 STRING_9 ) ) 
( METHOD_1_return public static java.util.Map < java.lang.String java.lang.String > METHOD_1 ( java.lang.String VAR_1 java.lang.String url ) { if ( url !   null ) { return TYPE_1.of ( STRING_1 VAR_1 STRING_2 url ) ; } else { return TYPE_1.of ( STRING_1 VAR_1 ) ; } } ) ( VAR_1 java.lang.String VAR_1 ) ( url java.lang.String url ) 
( VAR_1 int VAR_1 ) ( VAR_2 TYPE_3 < TYPE_1 > VAR_2 ) ( r TYPE_2 r ) ( r r ) ( METHOD_1_return private static < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 r int VAR_1 TYPE_3 < TYPE_1 > VAR_2 ) throws java.lang.Exception { r.METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_3   new TYPE_4 ( r.METHOD_3 ( ) ) ; VAR_3.METHOD_4 ( true ) ; return METHOD_5 ( ) .METHOD_6 ( VAR_3 VAR_2 ) ; } ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3   new TYPE_4 ( r.METHOD_3 ( ) ) ) 
( id java.lang.String id ) 
( VAR_1 VAR_1 ) ( result result   METHOD_3 ( ) .METHOD_4 ( r.METHOD_5 ( ) new TYPE_3 < java.util.List < TYPE_2 > > ( ) { } .METHOD_6 ( ) ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( r r   VAR_1.get ( STRING_1 ) ) 
( METHOD_1_return_line1_col392 return VAR_1 ; ) ( METHOD_1_return private java.util.Map < org.eclipse.jgit.lib.ObjectId TYPE_1 > METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 )    null ) { VAR_1   new TYPE_2 < org.eclipse.jgit.lib.ObjectId TYPE_1 > ( ) ; for ( TYPE_1 r : repo.METHOD_2 ( ) .METHOD_3 ( STRING_1 ) .values ( ) ) { if ( TYPE_3.METHOD_4 ( r.getName ( ) ) ) { VAR_1.put ( r.METHOD_5 ( ) r ) ; } } } return VAR_1 ; } ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( Assert org.junit.Assert ) ( r r   VAR_1.put ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) TYPE_2.METHOD_2 ( STRING_3 ) ) ) 
( METHOD_1_return TYPE_1 METHOD_1 ( final TYPE_2 cm ) { if ( ! ( TYPE_3.METHOD_2 ( ) ) ) { return METHOD_3 ( cm ) ; } return new TYPE_1 ( ) { public void run ( ) { if ( cm.METHOD_4 ( ) .METHOD_5 ( ) ) { METHOD_6 ( cm ) ; } } } ; } ) ( cm final TYPE_2 cm ) 
( rsrc rsrc ) ( project project   ctl.getProject ( ) .METHOD_4 ( ) ) ( ctl ctl ) ( ctl ctl   rsrc.METHOD_1 ( ) ) ( rsrc TYPE_2 rsrc ) ( ps ps   VAR_1.METHOD_2 ( db.get ( ) rsrc.METHOD_3 ( ) ) ) ( VAR_1 VAR_1 ) ( apply_return public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { TYPE_4 ctl   rsrc.METHOD_1 ( ) ; com.google.gerrit.reviewdb.client.PatchSet ps   VAR_1.METHOD_2 ( db.get ( ) rsrc.METHOD_3 ( ) ) ; com.google.gerrit.reviewdb.client.Project.NameKey project   ctl.getProject ( ) .METHOD_4 ( ) ; return VAR_2.apply ( project ps.getRevision ( ) .get ( ) ) ; } ) ( VAR_2 VAR_2 ) 
( c TYPE_1 c ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) 
( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.get ( ) ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } TYPE_3 VAR_2   TYPE_4.METHOD_2 ( VAR_3 ) ; switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) !   null ? VAR_5 : new TYPE_5 ( ) ; default : throw new TYPE_6 ( ( STRING_1 + VAR_2 ) ) ; } } ) ( TYPE_4 TYPE_4 ) ( VAR_2 VAR_2   TYPE_4.METHOD_2 ( VAR_3 ) ) 
( METHOD_1_return_line1_col552 return VAR_3 ; ) ( VAR_3 VAR_3 ) ( ctl TYPE_1 ctl ) ( id id   TYPE_3.METHOD_2 ( ctl.METHOD_3 ( ) .METHOD_3 ( ) ) .METHOD_4 ( ) ) ( VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( VAR_2 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ( TYPE_3 TYPE_3 ) ( VAR_3 VAR_3 ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.PatchSetApproval METHOD_1 ( TYPE_1 ctl com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { TYPE_2 id   TYPE_3.METHOD_2 ( ctl.METHOD_3 ( ) .METHOD_3 ( ) ) .METHOD_4 ( ) ; com.google.gerrit.reviewdb.client.PatchSetApproval VAR_3   new com.google.gerrit.reviewdb.client.PatchSetApproval ( new TYPE_4.Key ( VAR_1 VAR_2 id ) ( ( short ) ( 0 ) ) TYPE_5.METHOD_5 ( ) ) ; VAR_3.METHOD_6 ( ctl.getChange ( ) ) ; return VAR_3 ; } ) ( VAR_3 VAR_3   new com.google.gerrit.reviewdb.client.PatchSetApproval ( new TYPE_4.Key ( VAR_1 VAR_2 id ) ( ( short ) ( 0 ) ) TYPE_5.METHOD_5 ( ) ) ) 
( u u ) ( u u   VAR_1.METHOD_1 ( ( ( VAR_2 ) + branch ) ) ) ( id org.eclipse.jgit.lib.ObjectId id ) ( u u ) ( branch java.lang.String branch ) ( VAR_1 VAR_1 ) 
( METHOD_1_return protected TYPE_1 METHOD_1 ( java.lang.String path java.lang.String VAR_1 int VAR_2 ) throws java.lang.Exception { TYPE_2 req   TYPE_2.METHOD_2 ( ) ; req.METHOD_3 ( path ) ; if ( VAR_1 !   null ) { req.METHOD_4 ( VAR_1 ) ; } TYPE_1 res   new TYPE_1 ( ) ; servlet.METHOD_5 ( req res ) ; org.junit.Assert.assertEquals ( VAR_2 res.getStatus ( ) ) ; return res ; } ) ( VAR_2 int VAR_2 ) ( res res   new TYPE_1 ( ) ) ( Assert org.junit.Assert ) ( req req ) ( servlet servlet ) ( path java.lang.String path ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return_line1_col382 return res ; ) ( req req   TYPE_2.METHOD_2 ( ) ) ( res res ) ( TYPE_2 TYPE_2 ) 
( VAR_1 int VAR_1 ) ( path path   VAR_2.get ( VAR_1 ) .path ( ) ) ( VAR_2 VAR_2 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( w TYPE_1 w ) ( id id ) ( nodeCall_append_return VAR_1.append ( id ) ) ( VAR_1 VAR_1   new java.lang.StringBuilder ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( id java.lang.String id ) ( VAR_1 VAR_1 ) ( w w ) ( VAR_1 VAR_1 ) 
( VAR_1 final TYPE_2 VAR_1 ) ( r final TYPE_1 r ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) { com.google.gerrit.reviewdb.client.Change change   rsrc.getChange ( ) ; return new TYPE_3 ( ) .METHOD_2 ( STRING_1 ) .METHOD_3 ( STRING_2 ) .METHOD_4 ( ( ( ( ! ( change.METHOD_5 ( ) ) ) & & ( ( change.getStatus ( ) ) !   ( VAR_1 ) ) ) & & ( METHOD_6 ( rsrc ) ) ) ) ; } ) ( rsrc rsrc ) ( change change   rsrc.getChange ( ) ) ( rsrc TYPE_2 rsrc ) 
( message message ) ( update TYPE_1 update ) ( msg msg   message.getMessage ( ) ) 
( TYPE_2 TYPE_2 ) ( VAR_1 int VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_4 VAR_4   TYPE_2.METHOD_2 ( query ) ) ( VAR_3 TYPE_1 < TYPE_2 > VAR_3 ) ( TYPE_2 TYPE_2 ) ( query java.lang.String query ) 
( n TYPE_1 n ) ( METHOD_1_return private java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > METHOD_1 ( TYPE_1 n ) { try { return VAR_1.METHOD_2 ( db.get ( ) VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3.error ( ( STRING_1 + ( VAR_2 ) ) e ) ; return java.util.Collections.METHOD_3 ( ) ; } } ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) ( url url ) ( url java.lang.String url ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String VAR_1 java.lang.String url java.lang.String VAR_2 ) { if ( ( url    null ) || ( ! ( url.contains ( VAR_1 ) ) ) ) { return url ; } return url.METHOD_2 ( VAR_1 TYPE_1.METHOD_3 ( VAR_2 ) ) ; } ) 
( rsrc TYPE_2 rsrc ) ( commit commit   rsrc.METHOD_1 ( ) ) ( rsrc rsrc ) ( apply_return public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit   rsrc.METHOD_1 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project   rsrc.METHOD_2 ( ) .getProject ( ) .METHOD_3 ( ) ; return VAR_1.apply ( project commit.getId ( ) .getName ( ) ) ; } ) ( VAR_1 VAR_1 ) ( project project   rsrc.METHOD_2 ( ) .getProject ( ) .METHOD_3 ( ) ) ( rsrc rsrc ) 
( u u   METHOD_2 ( ) ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( ) { TYPE_2 u   METHOD_2 ( ) ; if ( u instanceof TYPE_3 ) { return TYPE_4.METHOD_3 ( u.METHOD_4 ( ) .METHOD_5 ( ) VAR_1 VAR_2 VAR_3 ) ; } else if ( u instanceof TYPE_5 ) { return VAR_2 ; } throw new TYPE_6 ( ) ; } ) 
( a a ) ( VAR_1 VAR_1 ) ( to to ) ( view view ) ( view view ) ( config config ) ( e TYPE_1 < TYPE_2 > e ) ( VAR_5 VAR_5 ) 
( Assert org.junit.Assert ) ( commit commit   repo.commit ( ) .create ( ) ) ( repo repo ) ( VAR_1 VAR_1   repo.METHOD_3 ( STRING_1 commit ) ) ( repo repo ) ( repo repo ) ( Assert org.junit.Assert ) 
( VAR_1 TYPE_1 VAR_1 ) 
( VAR_2 VAR_2 ) 
( label java.lang.String label ) ( args TYPE_2 args ) ( r r   new java.util.ArrayList < > ( ) ) ( METHOD_1_return private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args java.lang.String label int VAR_1 ) { if ( ( ( VAR_2 )    null ) || ( VAR_2.isEmpty ( ) ) ) { return new TYPE_3 ( args label VAR_1 null ) ; } java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r   new java.util.ArrayList < > ( ) ; for ( com.google.gerrit.reviewdb.client.Account.Id a : VAR_2 ) { r.add ( new TYPE_3 ( args label VAR_1 a ) ) ; } return METHOD_2 ( r ) ; } ) ( VAR_1 int VAR_1 ) 
( VAR_1 java.lang.String VAR_1 ) ( TYPE_2 TYPE_2 ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1 ) ( e e   VAR_1.METHOD_4 ( CHAR_1 ) ) ( TYPE_2 TYPE_2 ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2.METHOD_2 ( ( ! ( TYPE_3.METHOD_3 ( VAR_1 ) ) ) STRING_1 ) ; int e   VAR_1.METHOD_4 ( CHAR_1 ) ; TYPE_2.METHOD_2 ( ( e >   0 ) STRING_2 VAR_1 ) ; return TYPE_1.create ( VAR_1.METHOD_5 ( 0 e ) TYPE_4.METHOD_6 ( VAR_1.METHOD_5 ( ( e + 1 ) ) VAR_1.length ( ) ) ) ; } ) 
( VAR_2 VAR_2 ) ( VAR_1 VAR_1   new TYPE_1 ( 1 ) ) ( VAR_2 VAR_2   new TYPE_1 ( 0 ) ) 
( VAR_3 VAR_3 ) ( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) ( VAR_3 VAR_3 ) ( out out ) ( VAR_3 VAR_3   new TYPE_2 ( out ) ) ( repo org.eclipse.jgit.lib.Repository repo ) ( METHOD_1_return private java.lang.String METHOD_1 ( org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.lib.ObjectId VAR_1 org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.io.IOException { TYPE_1 out   new TYPE_1 ( ) ; TYPE_2 VAR_3   new TYPE_2 ( out ) ; VAR_3.METHOD_2 ( repo ) ; VAR_3.format ( VAR_1 VAR_2 ) ; VAR_3.METHOD_3 ( ) ; return out.toString ( ) ; } ) ( out out   new TYPE_1 ( ) ) ( VAR_3 VAR_3 ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) 
( VAR_1 VAR_1 ) (   ( ( info.METHOD_2 ( ) .name ( ) ) !   null ) ? info.METHOD_2 ( ) .name ( ) : TYPE_2.METHOD_3 ( ) .METHOD_4 ( ) ) ( info TYPE_1.ChangeInfo info ) ( VAR_1 VAR_1 ) 
( VAR_1 java.util.Set < TYPE_1 > VAR_1 ) ( out out   new java.lang.StringBuilder ( ) ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { if ( ( VAR_1.size ( ) ) <   0 ) { return STRING_1 ; } java.lang.StringBuilder out   new java.lang.StringBuilder ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( out.length ( ) ) > 0 ) { out.append ( STRING_2 ) ; } out.append ( VAR_2.getValue ( ) ) ; } return ( STRING_3 + STRING_4 ) + ( out.toString ( ) ) ; } ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( change change   METHOD_2 ( git ) ) ( Truth com.google.common.truth.Truth ) 
( change change ) ( VAR_1 VAR_1   change.getProject ( ) ) ( change TYPE_2.Change change ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2.Change change TYPE_3 user ) throws TYPE_4 { final TYPE_5.NameKey VAR_1   change.getProject ( ) ; try { return VAR_2.METHOD_1 ( VAR_1 user ) .METHOD_1 ( change ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( change.getId ( ) e ) ; } } ) ( user TYPE_3 user ) 
( STRING_1 STRING_1 ) ( a a   new TYPE_1 ( VAR_1 VAR_2 ) ) ( STRING_2 STRING_2 ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_2 VAR_2   STRING_2 ) 
( in in ) ( id int id ) ( in in   TYPE_3.create ( ) ) ( TYPE_4 TYPE_4 ) ( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) ( commit java.lang.String commit ) ( TYPE_3 TYPE_3 ) 
( VAR_4 TYPE_2 VAR_4 ) ( base com.google.gerrit.reviewdb.client.PatchSet.Id base ) ( VAR_5 TYPE_3 VAR_5 ) ( VAR_3 VAR_3 ) ( VAR_5 VAR_5 ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1 ) ( VAR_6 VAR_6 ) ( base base ) ( VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( VAR_3 TYPE_2 VAR_3 ) ( VAR_6 boolean VAR_6 ) ( VAR_2 VAR_2 ) ( VAR_2 TYPE_1 VAR_2 ) 
( in in ) ( VAR_1 java.lang.String VAR_1 ) ( path java.lang.String path ) ( in in ) ( VAR_2 TYPE_1 < TYPE_2 > VAR_2 ) ( in in   TYPE_3.create ( ) ) ( id int id ) ( TYPE_3 TYPE_3 ) ( TYPE_4 TYPE_4 ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   METHOD_6 ( ) ) 
( args TYPE_3 args ) ( args args ) ( user user   args.METHOD_2 ( ) ) ( METHOD_1_return private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 args ) throws TYPE_4 { TYPE_5 user   args.METHOD_2 ( ) ; if ( user.METHOD_3 ( ) ) { return VAR_1.get ( args.METHOD_2 ( ) .getAccountId ( ) ) .METHOD_4 ( ) .METHOD_5 ( ) ; } return VAR_2.Collections < TYPE_2 > METHOD_6 ( ) ; } ) 
( a a   VAR_2.METHOD_2 ( VAR_1 ) ) ( VAR_1 final java.lang.String VAR_1 ) ( METHOD_1_return private Account.Id METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 TYPE_2.OrmException { final TYPE_3.Account a   VAR_2.METHOD_2 ( VAR_1 ) ; if ( a    null ) { throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return a.getId ( ) ; } ) ( a a ) ( VAR_2 VAR_2 ) 
( VAR_1 TYPE_1 VAR_1 ) ( Assert org.junit.Assert ) ( VAR_2 TYPE_1 VAR_2 ) ( Assert org.junit.Assert ) 
( r r   METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( git TYPE_1 git ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 git TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2   VAR_3.create ( db VAR_1 VAR_4 VAR_5 new java.lang.String ( VAR_6 ) ) ; return VAR_2.to ( git STRING_1 ) .getChangeId ( ) ; } ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.create ( db VAR_1 VAR_4 VAR_5 new java.lang.String ( VAR_6 ) ) ) ( VAR_2 VAR_2 ) 
( patchSets patchSets   cd.patchSets ( ) ) ( result result   TYPE_4.METHOD_2 ( ) ) ( METHOD_1_return_line1_col512 return result ; ) ( METHOD_1_return private static TYPE_1 < TYPE_2 com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets   cd.patchSets ( ) ; TYPE_1 < TYPE_2 com.google.gerrit.reviewdb.client.PatchSet > result   TYPE_4.METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result.put ( ps.getId ( ) .get ( ) ps ) ; } return result ; } ) ( cd cd ) ( result result ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( TYPE_4 TYPE_4 ) 
( p p   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   new TYPE_2 ( ) ) 
( r r ) ( VAR_1 final TYPE_1 VAR_1 ) ( METHOD_1_return_line1_col332 return r.toString ( ) ; ) ( r r   new java.lang.StringBuilder ( ) ) ( r r ) ( nodeCall_toString_return r.toString ( ) ) ( METHOD_1_return public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 final TYPE_2 VAR_2 ) { final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( VAR_2.METHOD_2 ( METHOD_3 ( ) ) ) ; if ( VAR_1.METHOD_4 ( ) ) { r.append ( STRING_1 ) ; r.append ( METHOD_5 ( ) ) ; r.append ( STRING_2 ) ; } return r.toString ( ) ; } ) ( VAR_2 final TYPE_2 VAR_2 ) 
( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( change change   TYPE_2.METHOD_1 ( db ) .changes ( ) .get ( changeId ) ) ( TYPE_3 TYPE_3 ) ( create_return public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Project.NameKey project com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change   TYPE_2.METHOD_1 ( db ) .changes ( ) .get ( changeId ) ; TYPE_3.METHOD_2 ( change STRING_1 changeId ) ; TYPE_3.METHOD_3 ( change.getProject ( ) .equals ( project ) ( STRING_2 + STRING_3 ) project changeId change.getProject ( ) ) ; return new TYPE_1 ( args project change ) .METHOD_4 ( ) ; } ) ( TYPE_3 TYPE_3 ) ( TYPE_2 TYPE_2 ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) 
( b b   new TYPE_1 ( ) ) 
( c c   null ) 
( VAR_2 VAR_2   TYPE_1.METHOD_2 ( ) ) ( VAR_4 VAR_4 ) ( TYPE_1 TYPE_1 ) ( VAR_1 final java.lang.String [ ] VAR_1 ) 
( TYPE_2 TYPE_2 ) ( c c   METHOD_2 ( ) ) ( m m   TYPE_2.METHOD_3 ( repo c TYPE_3.METHOD_4 ( ) ) ) ( TYPE_4 TYPE_4 ) ( VAR_1 VAR_1   TYPE_4.of ( ( STRING_1 + ( VAR_2 ) ) ) ) ( Truth com.google.common.truth.Truth ) 
( VAR_1 final TYPE_1 VAR_1 ) ( add_return boolean add ( final TYPE_1 VAR_1 ) { synchronized ( this ) { if ( ( ! ( VAR_2 ) ) & & ( ! ( VAR_3 ) ) ) { if ( VAR_4.isEmpty ( ) ) { TYPE_2.METHOD_1 ( ) .METHOD_2 ( this ) ; } VAR_4.add ( VAR_1 ) ; return true ; } else { return false ; } } } ) 
( on final boolean on ) ( on on ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ) ( TYPE_2 TYPE_2 ) ( n n   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 VAR_3 ) ) 
( req TYPE_1 req ) ( servlet servlet ) ( Assert org.junit.Assert ) ( VAR_1 java.lang.String VAR_1 ) ( res res   new TYPE_2 ( ) ) ( Assert org.junit.Assert ) 
( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2 ) 
( t TYPE_1 t ) 
( c c   VAR_1.get ( ) .changes ( ) .get ( id ) ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   VAR_1.get ( ) .changes ( ) .get ( id ) ; if ( c !   null ) { return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( java.util.Collections.METHOD_2 ( VAR_2.create ( VAR_1.get ( ) c ) ) ) ; } else { return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( VAR_3.Collections < com.google.gerrit.server.query.change.ChangeData > METHOD_3 ( ) ) ; } } ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) .get ( STRING_1 ) ) ( VAR_1 TYPE_3 VAR_1 ) ( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_3 VAR_2   VAR_1.METHOD_2 ( ) .get ( STRING_1 ) ; if ( VAR_2    null ) { VAR_2   VAR_1.METHOD_2 ( ) .get ( STRING_2 ) ; } TYPE_4 VAR_3   new TYPE_4 ( VAR_2.METHOD_2 ( ) .get ( TYPE_5.getName ( ) ) .METHOD_3 ( ) ) ; return VAR_4.get ( ) .METHOD_4 ( VAR_3 ) ; } ) ( VAR_3 VAR_3   new TYPE_4 ( VAR_2.METHOD_2 ( ) .get ( TYPE_5.getName ( ) ) .METHOD_3 ( ) ) ) 
( VAR_1 final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Change change   VAR_1.change ( VAR_2 ) ; if ( change    null ) { return false ; } final TYPE_1 VAR_3   VAR_4.create ( VAR_2 change.METHOD_2 ( ) ) ; return VAR_3.METHOD_3 ( ) .contains ( VAR_5 ) ; } ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3   VAR_4.create ( VAR_2 change.METHOD_2 ( ) ) ) ( change change   VAR_1.change ( VAR_2 ) ) 
( VAR_2 VAR_2 ) ( METHOD_1_return private TYPE_1.Result METHOD_1 ( java.lang.String topic ) throws java.io.IOException TYPE_2 { TYPE_3 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( topic ) .METHOD_3 ( ) ; return VAR_1.to ( git ( STRING_1 + topic ) ) ; } ) ( topic java.lang.String topic ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) ) ) ( Truth com.google.common.truth.Truth ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2   VAR_3.create ( project ) ) ( VAR_3 VAR_3 ) 
( id org.eclipse.jgit.lib.ObjectId id ) ( walk org.eclipse.jgit.revwalk.RevWalk walk ) ( walk walk ) ( walk walk ) 
( db db ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new TYPE_2 < java.lang.String > ( ) ) ( METHOD_1_return_line1_col284 return VAR_1 ; ) ( METHOD_1_return private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1.ProjectConfig config ) { java.util.Set < java.lang.String > VAR_1   new TYPE_2 < java.lang.String > ( ) ; for ( TYPE_3 VAR_2 : config.METHOD_2 ( ) ) { VAR_1.add ( VAR_2.METHOD_3 ( ) ) ; } return VAR_1 ; } ) ( config TYPE_1.ProjectConfig config ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4 VAR_2   new TYPE_4 ( VAR_1.METHOD_2 ( ) STRING_1 ) ; try { TYPE_5 in   new TYPE_6 ( VAR_2 ) ; try { in   TYPE_7.METHOD_3 ( in ) ; return new TYPE_1 ( in ) ; } finally { in.close ( ) ; } } catch ( java.io.IOException e ) { throw new TYPE_3 ( e ) ; } catch ( TYPE_8 e ) { throw new TYPE_3 ( e ) ; } } ) ( VAR_2 VAR_2   new TYPE_4 ( VAR_1.METHOD_2 ( ) STRING_1 ) ) ( VAR_1 final TYPE_2 VAR_1 ) 
( add add ) ( METHOD_1_return public java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( java.util.List < java.lang.String > add ) throws TYPE_2 { TYPE_3 in   new TYPE_3 ( ) ; in.add   add ; try { return VAR_1.apply ( account in ) ; } catch ( TYPE_4 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) ( add java.util.List < java.lang.String > add ) ( in in   new TYPE_3 ( ) ) 
( p p   new TYPE_2 ( ) ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2 ) ( TYPE_4 TYPE_4 ) 
( update_return_line1_col336 return c ; ) ( update_return public TYPE_1.Change update ( TYPE_1.Change c ) { c.METHOD_1 ( VAR_1 ) ; c.METHOD_2 ( true ) ; if ( ! ( VAR_2.equals ( c.currentPatchSetId ( ) ) ) ) { try { c.METHOD_3 ( VAR_3.get ( VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { VAR_5.error ( ( STRING_1 + VAR_2 ) VAR_4 ) ; } } TYPE_3.METHOD_4 ( c ) ; return c ; } ) ( c c ) ( c TYPE_1.Change c ) ( c c ) ( TYPE_3 TYPE_3 ) ( c c ) 
( METHOD_1_return public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) !   null ) { return METHOD_2 ( VAR_1 ) ; } switch ( status.getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } ) 
( METHOD_1_return_line1_col240 return VAR_2 ; ) ( VAR_1 TYPE_2 < TYPE_3 > VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   null ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 VAR_2   null ; for ( TYPE_3 u : VAR_1 ) { if ( VAR_2    null ) { VAR_2   VAR_3 ; } else if ( ( VAR_3 ) !   VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; } } return VAR_2 ; } ) 
( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( VAR_1.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ) ) || ( METHOD_4 ( db ) ) ) { return false ; } if ( METHOD_5 ( ) ) { return true ; } return METHOD_6 ( ) .METHOD_1 ( ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( METHOD_1_return public synchronized < TYPE_1 TYPE_2 > TYPE_3 < TYPE_1 TYPE_2 > METHOD_1 ( java.lang.String TYPE_4 VAR_1 TYPE_5 < TYPE_1 > VAR_2 TYPE_5 < TYPE_2 > VAR_3 ) { TYPE_6.METHOD_2 ( VAR_1 ) ; TYPE_7 m   new TYPE_7 ( this VAR_1 VAR_2 VAR_3 ) ; METHOD_3 ( VAR_1 ) ; VAR_4.put ( m ) ; return m.METHOD_4 ( ) ; } ) ( VAR_2 TYPE_5 < TYPE_1 > VAR_2 ) ( m m ) ( VAR_1 TYPE_4 VAR_1 ) ( VAR_3 TYPE_5 < TYPE_2 > VAR_3 ) ( TYPE_6 TYPE_6 ) ( m m   new TYPE_7 ( this VAR_1 VAR_2 VAR_3 ) ) ( java.lang.String ) ( VAR_4 VAR_4 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( ) { for ( final TYPE_2 VAR_1 : VAR_2 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { continue ; } TYPE_1 VAR_3   ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( VAR_3.METHOD_2 ( ) .METHOD_3 ( ) ) { continue ; } return VAR_3 ; } return null ; } ) 
( change final TYPE_2.Change change ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2.Change change ) throws TYPE_3 { try { final TYPE_4.NameKey VAR_1   change.METHOD_2 ( ) .getParentKey ( ) ; return VAR_2.METHOD_3 ( VAR_1 ) .METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) e ) ; } } ) 
( VAR_2 VAR_2   new TYPE_3 ( out ) ) ( VAR_2 VAR_2 ) ( out TYPE_1 out ) ( out out ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) 
( VAR_5 VAR_5   METHOD_5 ( VAR_6 ) ) ( VAR_9 VAR_9 ) ( METHOD_1_return_line1_col327 return VAR_9 ; ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) ) & & ( ! ( METHOD_4 ( ) ) ) ) { return VAR_2 ; } else if ( VAR_3.get ( ) ) { return VAR_4 ; } final long VAR_5   METHOD_5 ( VAR_6 ) ; if ( VAR_5 <   0 ) { return VAR_7 ; } else if ( 0 < VAR_5 ) { return VAR_8 ; } return VAR_9 ; } ) 
( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1 ) ( TYPE_3 TYPE_3 ) 
( change TYPE_2 change ) ( ps ps   VAR_1.get ( ) .patchSets ( ) .get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getChange ( ) .getId ( ) TYPE_3.METHOD_2 ( id ) ) ) ) ( id java.lang.String id ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 change java.lang.String id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps   VAR_1.get ( ) .patchSets ( ) .get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getChange ( ) .getId ( ) TYPE_3.METHOD_2 ( id ) ) ) ; if ( ps !   null ) { return java.util.Collections.METHOD_3 ( new TYPE_1 ( change ps ) ) ; } return java.util.Collections.METHOD_4 ( ) ; } ) ( Collections java.util.Collections ) ( VAR_1 VAR_1 ) 
( VAR_1 final TYPE_1 VAR_1 ) ( METHOD_1_return private java.util.Set < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( final TYPE_1 VAR_1 final com.google.gerrit.reviewdb.client.Project.NameKey project final java.util.Set < TYPE_1 > VAR_2 ) throws TYPE_2 TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { if ( TYPE_4.equals ( VAR_1 ) ) { return METHOD_2 ( project VAR_2 ) ; } else { com.google.gerrit.reviewdb.client.AccountGroup group   VAR_3.get ( VAR_1 ) ; if ( group !   null ) { return METHOD_3 ( group project VAR_2 ) ; } else { return java.util.Collections.METHOD_4 ( ) ; } } } ) ( project final com.google.gerrit.reviewdb.client.Project.NameKey project ) ( VAR_2 final java.util.Set < TYPE_1 > VAR_2 ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 notes final com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return TYPE_4.METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 get ( ) { try ( org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_3 ( notes.METHOD_4 ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3.METHOD_5 ( VAR_2 notes patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_5.METHOD_6 ( e ) ; } } } ) ; } ) ( notes final TYPE_3 notes ) ( TYPE_4 TYPE_4 ) ( patchSet final com.google.gerrit.reviewdb.client.PatchSet patchSet ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( projectName projectName   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( 1 ) ) ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( path path   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( INT_1 ) ) ) ( VAR_1 TYPE_1 VAR_1 ) ( revision revision   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( 2 ) ) ) ( VAR_1 VAR_1 ) 
( VAR_1 TYPE_4.Key < TYPE_2 > VAR_1 ) ( METHOD_1_return public TYPE_1 < TYPE_2 > .TYPE_3 METHOD_1 ( TYPE_4.Key < TYPE_2 > VAR_1 TYPE_5 < TYPE_2 > VAR_2 ) { TYPE_6 < TYPE_2 > n   new TYPE_6 < TYPE_2 > ( VAR_2 VAR_3 ) ; if ( ref.METHOD_2 ( VAR_4 n ) ) { return new TYPE_3 ( VAR_1 n VAR_5 ) ; } return null ; } ) ( n n   new TYPE_6 < TYPE_2 > ( VAR_2 VAR_3 ) ) ( VAR_2 TYPE_5 < TYPE_2 > VAR_2 ) 
( token java.lang.String token ) 
( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) ) ( rsrc TYPE_2 rsrc ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1 ) ( METHOD_1_return private java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String TYPE_1 > VAR_1   TYPE_3.METHOD_2 ( ) ; for ( TYPE_1 c : db.METHOD_3 ( ) .METHOD_4 ( rsrc.METHOD_5 ( ) .getId ( ) rsrc.getAccountId ( ) ) ) { VAR_1.put ( c.getKey ( ) .get ( ) c ) ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col381 return VAR_1 ; ) 
( final java.lang.String ) ( type final TYPE_4 < TYPE_5 < TYPE_1 TYPE_2 > > type ) ( core_return protected < TYPE_1 TYPE_2 > TYPE_3 < TYPE_1 TYPE_2 > core ( final TYPE_4 < TYPE_5 < TYPE_1 TYPE_2 > > type final java.lang.String ) { return core ( TYPE_6.get ( type TYPE_7.METHOD_1 ( ) ) ) .name ( ) ; } ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( c com.google.gerrit.reviewdb.server.ReviewDb c ) ( VAR_1 TYPE_1 VAR_1 ) ( java.lang.String ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.AccountGroup METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb c java.lang.String TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( VAR_1    null ) { VAR_1   TYPE_2.METHOD_2 ( VAR_2 ) ; } return new com.google.gerrit.reviewdb.client.AccountGroup ( new TYPE_3.NameKey ( ) new TYPE_3.Id ( c.METHOD_3 ( ) ) VAR_1 TYPE_4.METHOD_4 ( ) ) ; } ) 
( VAR_2 com.google.gerrit.reviewdb.client.PatchSetApproval VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( notes TYPE_1 notes ) ( VAR_3 VAR_3 ) 
( account final TYPE_1.Account account ) ( info info ) ( info info ) ( info info ) ( info info ) ( info info ) 
( get_return public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_1 ( notes.METHOD_2 ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3.METHOD_3 ( VAR_2 notes patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2.METHOD_4 ( e ) ; } } ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) .METHOD_1 ( ) ) ) & & ( ! ( METHOD_5 ( db ) ) ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( METHOD_1_return protected boolean METHOD_1 ( ) { if ( ( VAR_1.length ( ) )    0 ) { return false ; } if ( VAR_2.isEmpty ( ) ) { return false ; } if ( ( ( VAR_3.size ( ) )    1 ) & & ( VAR_3.contains ( VAR_4 ) ) ) { return false ; } return true ; } ) 
( METHOD_1_return protected TYPE_1 METHOD_1 ( TYPE_2 ctx ) throws com.google.gwtorm.server.OrmException java.io.IOException { com.google.gerrit.reviewdb.server.ReviewDb db   ctx.METHOD_2 ( ) .get ( ) ; com.google.gerrit.reviewdb.client.Change c   db.changes ( ) .get ( id ) ; VAR_1.create ( VAR_2 VAR_3 ) .index ( db c ) ; return null ; } ) ( ctx TYPE_2 ctx ) ( ctx ctx ) ( VAR_1 VAR_1 ) ( db db ) ( db db   ctx.METHOD_2 ( ) .get ( ) ) ( c c   db.changes ( ) .get ( id ) ) 
( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( res res ) ( res res   METHOD_2 ( STRING_1 VAR_1 ) ) ( d d   res.get ( STRING_2 ) ) 
( info TYPE_1.ChangeInfo info ) 
( VAR_1 VAR_1   TYPE_1.METHOD_2 ( ) ) ( TYPE_1 TYPE_1 ) 
( VAR_3 VAR_3 ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   METHOD_2 ( ) ) ( VAR_2 VAR_2   VAR_3.changes ( ) .query ( ( STRING_1 + ( VAR_1.getChangeId ( ) ) ) ) .get ( ) ) 
( TYPE_1 TYPE_1 ) ( VAR_1 java.lang.String VAR_1 ) ( path java.lang.String path ) 
( e e   VAR_1.get ( branch ) ) ( branch final TYPE_1.NameKey branch ) ( VAR_1 VAR_1 ) 
( TYPE_1 TYPE_1 ) 
( VAR_3 VAR_3   new java.util.ArrayList ( VAR_1.size ( ) ) ) ( create_return static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > create ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema TYPE_3 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) throws TYPE_4 { if ( ( TYPE_5.METHOD_1 ( schema ) )    ( VAR_2 ) ) { throw new TYPE_4 ( STRING_1 ) ; } java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_3   new java.util.ArrayList ( VAR_1.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Account.Id id : VAR_1 ) { VAR_3.add ( new TYPE_5 ( id ) ) ; } return TYPE_1.METHOD_2 ( VAR_3 ) ; } ) ( TYPE_1 TYPE_1 ) ( VAR_1 TYPE_3 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) ( schema TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema ) 
( VAR_2 VAR_2   new TYPE_3.Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 final java.lang.String ref ) { return new TYPE_3 ( VAR_4 VAR_3 ref ) ; } } ) ( VAR_1 TYPE_2.AccountGroup ... VAR_1 ) ( user_return private TYPE_1 user ( TYPE_2.AccountGroup ... VAR_1 ) { TYPE_3.Factory VAR_2   new TYPE_3.Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 final java.lang.String ref ) { return new TYPE_3 ( VAR_4 VAR_3 ref ) ; } } ; return new TYPE_1 ( VAR_5.Collections < TYPE_4.Id > METHOD_1 ( ) VAR_5.Collections < TYPE_4.Id > METHOD_1 ( ) VAR_2 new TYPE_5 ( VAR_1 ) METHOD_2 ( ) ) ; } ) 
( VAR_3 VAR_3 ) ( VAR_1 final java.lang.String VAR_1 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( ) ) 
( TYPE_2 TYPE_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2.METHOD_2 ( change.getProject ( ) .equals ( project ) ( STRING_1 + STRING_2 ) project changeId change.getProject ( ) ) ; return new TYPE_1 ( args project change ) .METHOD_3 ( ) ; } ) 
( refs java.util.Map < java.lang.String TYPE_1 > refs ) ( METHOD_1_return private java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String TYPE_1 > refs ) { if ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) { TYPE_1 r   refs.get ( TYPE_2.METHOD_4 ( VAR_1.METHOD_2 ( ) .getAccountId ( ) ) ) ; if ( r !   null ) { TYPE_3 s   new TYPE_3 ( VAR_2 r ) ; refs   new TYPE_4 ( refs ) ; refs.put ( s.getName ( ) s ) ; } } return refs ; } ) ( METHOD_1_return_line1_col398 return refs ; ) ( refs refs ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( res res   METHOD_2 ( path ) ) ( VAR_3 VAR_3   res.METHOD_4 ( ) ) ( res res ) ( path java.lang.String path ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String path java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res   METHOD_2 ( path ) ; org.junit.Assert.assertEquals ( VAR_1 res.METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_3   res.METHOD_4 ( ) ; return new java.lang.String ( TYPE_2.METHOD_5 ( ) .METHOD_6 ( VAR_3 ) VAR_4 ) ; } ) ( Assert org.junit.Assert ) ( VAR_1 java.lang.String VAR_1 ) 
( msg java.lang.String msg ) ( t TYPE_1 t ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( projects projects   config.METHOD_3 ( ) ) ( config config ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( METHOD_1_return boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ! ( METHOD_2 ( project ) ) ) { return false ; } java.lang.String [ ] projects   config.METHOD_3 ( ) ; if ( ( projects.length ) < 1 ) { return true ; } return new TYPE_1 ( TYPE_2.METHOD_4 ( projects ) ) .METHOD_5 ( project ) ; } ) 
( METHOD_1_return protected TYPE_1 < ? > METHOD_1 ( java.lang.String com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 boolean VAR_2 TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project   METHOD_2 ( VAR_1 VAR_2 VAR_3 ) ; METHOD_3 ( VAR_4 project STRING_1 ) ; METHOD_3 ( VAR_5 project STRING_2 ) ; return METHOD_4 ( project ) ; } ) ( VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) ( VAR_3 TYPE_2 VAR_3 ) ( VAR_2 boolean VAR_2 ) ( java.lang.String ) ( project project   METHOD_2 ( VAR_1 VAR_2 VAR_3 ) ) 
( TYPE_3 TYPE_3 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 req java.lang.String VAR_1 java.lang.String path ) throws java.io.IOException { if ( path.isEmpty ( ) ) { return null ; } path   TYPE_3.METHOD_2 ( path ) ; TYPE_4.Result result   METHOD_3 ( req path ) ; if ( result    null ) { return null ; } if ( ( result.METHOD_4 ( ) ) !   null ) { return METHOD_5 ( VAR_1 result path ) ; } else { return METHOD_6 ( VAR_1 result path ) ; } } ) ( path java.lang.String path ) ( req TYPE_2 req ) ( result result   METHOD_3 ( req path ) ) ( VAR_1 java.lang.String VAR_1 ) 
( VAR_1 VAR_1   STRING_1 ) ( STRING_1 STRING_1 ) 
( VAR_1 int VAR_1 ) ( msg java.lang.String msg ) ( err TYPE_4 err ) ( TYPE_6 TYPE_6 ) ( c TYPE_3 c ) ( req TYPE_1 req ) ( TYPE_6 TYPE_6 ) ( res TYPE_2.HttpServletResponse res ) ( res res ) 
( VAR_1 java.util.List < java.lang.String > VAR_1 ) ( message java.lang.String message ) 
( VAR_1 VAR_1   true ) 
( id com.google.gerrit.reviewdb.client.Change.Id id ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_1 ( schema id ) ) 
( Truth com.google.common.truth.Truth ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 java.util.Set < TYPE_1 > VAR_3 ) ( TYPE_4 TYPE_4 ) ( Truth com.google.common.truth.Truth ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_4 VAR_4   TYPE_4.METHOD_2 ( VAR_1 ) ) 
( VAR_2 java.lang.String VAR_2 ) ( changeId java.lang.String changeId ) ( c TYPE_1 c ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 VAR_3 ) ( r r   VAR_3.put ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) c ) ) ( Assert org.junit.Assert ) 
( VAR_3 VAR_3 ) ( TYPE_2 TYPE_2 ) ( VAR_7 VAR_7 ) ( VAR_5 VAR_5 ) ( VAR_6 VAR_6 ) ( VAR_4 VAR_4 ) ( result TYPE_1 result ) 
( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2 ) ( branch java.lang.String branch ) ( VAR_2 VAR_2 ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String branch TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_2   new TYPE_2 ( VAR_3.METHOD_2 ( ) VAR_4 ) ; VAR_2.METHOD_3 ( ) ; VAR_2.append ( STRING_1 project.get ( ) ) ; VAR_2.append ( STRING_2 branch ) ; VAR_2.append ( VAR_5 VAR_6 ) ; for ( TYPE_3 VAR_7 : METHOD_4 ( VAR_1 ) ) { VAR_2.METHOD_5 ( VAR_8 VAR_7 ) ; } return VAR_2.toString ( ) ; } ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_3.METHOD_2 ( ) VAR_4 ) ) 
( VAR_2 VAR_2   VAR_3.get ( STRING_1 ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( changeId java.lang.String changeId ) ( Truth com.google.common.truth.Truth ) ( VAR_3 VAR_3 ) ( c c   getChange ( changeId VAR_1 ) ) 
( VAR_5 TYPE_6 VAR_5 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3.NameKey VAR_2 TYPE_4 VAR_3 TYPE_5 VAR_4 TYPE_6 VAR_5 ) throws TYPE_7 TYPE_8 { return VAR_6.create ( VAR_3 db VAR_1.repo VAR_1.rw VAR_7 VAR_8 METHOD_2 ( VAR_1 VAR_4 ) VAR_2 VAR_5 VAR_9 ) ; } ) ( VAR_6 VAR_6 ) ( VAR_3 TYPE_4 VAR_3 ) ( VAR_4 TYPE_5 VAR_4 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 TYPE_3.NameKey VAR_2 ) 
( java.lang.String ) ( VAR_1 final java.util.Map < java.lang.String TYPE_1 > VAR_1 ) ( value java.lang.String value ) 
( util util ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( u u   util.user ( VAR_1 VAR_4 ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change TYPE_2 user ) throws TYPE_3 com.google.gwtorm.server.OrmException { TYPE_1 c   METHOD_2 ( change user ) ; if ( ! ( c.METHOD_3 ( db.get ( ) ) ) ) { throw new TYPE_3 ( c.getChange ( ) .getId ( ) ) ; } return c ; } ) ( c c   METHOD_2 ( change user ) ) ( METHOD_1_return_line1_col305 return c ; ) ( c c ) ( change com.google.gerrit.reviewdb.client.Change change ) ( user TYPE_2 user ) 
( VAR_1 java.lang.String VAR_1 ) ( event event   new TYPE_1 ( util.METHOD_4 ( account ) VAR_1 ) ) ( account com.google.gerrit.reviewdb.client.Account account ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_1 VAR_2 java.lang.String VAR_3 TYPE_3 u TYPE_4 VAR_4 ) { TYPE_5.METHOD_2 ( u ) ; if ( u instanceof TYPE_6 ) { return VAR_1.METHOD_3 ( u.METHOD_4 ( ) .METHOD_5 ( ) VAR_4 VAR_2 VAR_3 ) ; } else if ( u instanceof TYPE_7 ) { return VAR_2 ; } throw new TYPE_8 ( ) ; } ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_3 java.lang.String VAR_3 ) ( u TYPE_3 u ) ( VAR_4 TYPE_4 VAR_4 ) ( TYPE_5 TYPE_5 ) 
( VAR_3 VAR_3 ) ( Assert org.junit.Assert ) ( VAR_1 java.lang.String VAR_1 ) ( r r   VAR_3.delete ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ) ( changeId java.lang.String changeId ) ( VAR_2 java.lang.String VAR_2 ) 
( TYPE_2 TYPE_2 ) ( TYPE_3 TYPE_3 ) ( n n   TYPE_3.not ( p ) ) ( p p   TYPE_2.METHOD_2 ( STRING_1 STRING_2 ) ) 
( TYPE_1 TYPE_1 ) 
( VAR_2 VAR_2   TYPE_2.METHOD_2 ( VAR_3.METHOD_3 ( ) ) ) ( VAR_1 java.util.List < TYPE_1 > VAR_1 ) ( TYPE_2 TYPE_2 ) 
( change change   insert ( METHOD_4 ( repo commit ) ) ) ( repo repo ) ( commit commit   repo.METHOD_3 ( repo.commit ( ) .message ( STRING_2 ) .add ( STRING_3 STRING_4 ) .add ( STRING_5 STRING_6 ) .create ( ) ) ) ( repo repo   METHOD_2 ( STRING_1 ) ) 
( VAR_6 VAR_6 ) ( VAR_4 VAR_4   ( VAR_3 ) - ( VAR_5 ) ) ( VAR_2 VAR_2   VAR_3 ) ( VAR_1 int VAR_1 ) ( VAR_7 VAR_7 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) 
( TYPE_1 TYPE_1 ) ( VAR_3 VAR_3   new TYPE_2 ( ( ( TYPE_1.METHOD_2 ( VAR_4 VAR_5 ) ) + ( TYPE_1.METHOD_2 ( INT_1 VAR_6 ) ) ) ) ) ( TYPE_3 TYPE_3 ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( TYPE_3 TYPE_3 ) ( Assert org.junit.Assert ) ( r r   METHOD_2 ( ) ) ( result result   TYPE_3.METHOD_3 ( VAR_1.changes ( ) .query ( r.getChangeId ( ) ) .get ( ) ) ) ( Assert org.junit.Assert ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { TYPE_3 < TYPE_1 > r   VAR_1.apply ( change null ) ; return r.METHOD_2 ( ) ? null : r.value ( ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) 
( VAR_2 boolean VAR_2 ) ( project project   METHOD_2 ( VAR_1 VAR_2 VAR_3 ) ) ( VAR_9 VAR_9 ) ( VAR_3 TYPE_2 VAR_3 ) ( METHOD_1_return protected TYPE_1 < ? > METHOD_1 ( java.lang.String com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 boolean VAR_2 TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project   METHOD_2 ( VAR_1 VAR_2 VAR_3 ) ; METHOD_3 ( VAR_4 project STRING_1 ) ; METHOD_3 ( VAR_5 project STRING_2 ) ; return METHOD_4 ( project ) ; METHOD_5 ( VAR_6 ) ; VAR_7 : Test   VAR_8 ; TYPE_3.submit VAR_9 ; on ( projects ) ; } ) ( java.lang.String ) ( VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) 
( VAR_2 java.lang.String VAR_2 ) ( VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) 
( line line   ( cm.METHOD_1 ( ) .METHOD_2 ( ) ) ? cm.METHOD_3 ( cm.METHOD_1 ( ) .METHOD_4 ( ) ) : 0 ) ( Collections java.util.Collections ) ( res res   java.util.Collections.METHOD_5 ( VAR_1 new TYPE_1 ( cm.METHOD_6 ( ) line 0 false ) METHOD_7 ( ) ) ) 
( email final java.lang.String email ) ( s s   new TYPE_1 ( account VAR_2.Collections < TYPE_3 > METHOD_5 ( ) VAR_2.Collections < TYPE_4 > METHOD_5 ( ) ) ) ( account account ) ( final java.lang.String ) ( account account ) ( s s ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final java.lang.String final java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1   new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ; account.METHOD_3 ( ) ; account.METHOD_4 ( email ) ; final TYPE_1 s   new TYPE_1 ( account VAR_2.Collections < TYPE_3 > METHOD_5 ( ) VAR_2.Collections < TYPE_4 > METHOD_5 ( ) ) ; return s ; } ) ( account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ) ( VAR_1 VAR_1   new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) ( METHOD_1_return_line1_col564 return s ; ) 
( VAR_2 final TYPE_3 VAR_2 ) ( VAR_1 final TYPE_2 VAR_1 ) ( VAR_3 final java.util.List < TYPE_4 > VAR_3 ) ( db db ) ( METHOD_1_return TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 final TYPE_3 VAR_2 final java.util.List < TYPE_4 > VAR_3 ) throws java.io.IOException { VAR_4   db.METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 VAR_2 VAR_3 ) ; } finally { VAR_4.METHOD_4 ( ) ; } } ) 
( VAR_2 VAR_2   TYPE_3.METHOD_2 ( ) .VAR_3.METHOD_3 ( VAR_4 ) ) ( VAR_5 VAR_5   new TYPE_4 ( VAR_1 ) ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_3 TYPE_3.METHOD_2 ( ) .VAR_3 ) 
( METHOD_1_return private static boolean METHOD_1 ( ) { final java.lang.String VAR_1   TYPE_1.METHOD_2 ( STRING_1 ) ; if ( FLOAT_1 <   ( TYPE_2.METHOD_3 ( VAR_1 ) ) ) { return true ; } else { VAR_2.METHOD_4 ( STRING_2 ) ; VAR_2.METHOD_4 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; return false ; } } ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1   TYPE_1.METHOD_2 ( STRING_1 ) ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_1 ( id ) ) ( id int id ) 
( VAR_2 TYPE_3 VAR_2 ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 VAR_2 ) throws TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException TYPE_5 { com.google.gerrit.reviewdb.client.Change change   new com.google.gerrit.reviewdb.client.Change ( VAR_2.getChange ( ) ) ; METHOD_2 ( VAR_1 VAR_2 ) ; TYPE_1 VAR_3   TYPE_1.METHOD_3 ( change VAR_1.METHOD_4 ( ) .get ( change.getId ( ) ) ) ; VAR_1.METHOD_5 ( ) ; return VAR_3 ; } ) ( METHOD_1_return_line1_col433 return VAR_3 ; ) ( VAR_1 TYPE_2 VAR_1 ) ( change change   new com.google.gerrit.reviewdb.client.Change ( VAR_2.getChange ( ) ) ) ( VAR_3 VAR_3   TYPE_1.METHOD_3 ( change VAR_1.METHOD_4 ( ) .get ( change.getId ( ) ) ) ) 
( e java.lang.Exception e ) ( err java.lang.String err ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String err java.lang.Exception e ) { if ( VAR_1 ) { if ( e    null ) { VAR_2.error ( err ) ; } else { VAR_2.error ( err e ) ; } return TYPE_2.METHOD_2 ( ) ; } else { return TYPE_2.METHOD_3 ( err ) ; } } ) 
( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1   VAR_2 ; if ( VAR_1    null ) { VAR_1   VAR_3.METHOD_2 ( getProject ( ) .METHOD_3 ( ) config.METHOD_4 ( ) ) ; VAR_2   VAR_1 ; } return VAR_4.create ( VAR_1 ) ; } ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1   VAR_2 ) 
( id id ) ( getAccountId_return_line1_col273 return id ; ) ( getAccountId_return Account.Id getAccountId ( ) { com.google.gerrit.reviewdb.client.Account.Id id   get ( 0 ) .VAR_1 ; for ( int i   1 ; i < ( size ( ) ) ; i++ ) { TYPE_1.METHOD_1 ( TYPE_2.equals ( id get ( i ) .VAR_1 ) STRING_1 id get ( i ) .VAR_1 ) ; } return id ; } ) ( id id   get ( 0 ) .VAR_1 ) ( VAR_1 get ( 0 ) .VAR_1 ) 
( values values   new java.util.ArrayList < TYPE_2 > ( 2 ) ) ( type type ) ( type type   new TYPE_1 ( values ) ) ( id java.lang.String id ) ( TYPE_1 TYPE_1 ) ( METHOD_1_return_line1_col407 return type ; ) ( type type ) ( values values ) ( java.lang.String ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( java.lang.String id java.lang.String ) { TYPE_1.METHOD_2 ( ) ; java.util.List < TYPE_2 > values   new java.util.ArrayList < TYPE_2 > ( 2 ) ; values.add ( new TYPE_2 ( ( ( short ) ( 0 ) ) STRING_1 ) ) ; values.add ( new TYPE_2 ( ( ( short ) ( 1 ) ) STRING_2 ) ) ; TYPE_1 type   new TYPE_1 ( values ) ; type.METHOD_3 ( id ) ; return type ; } ) ( values values ) 
( INT_3 INT_3 ) ( METHOD_1_return_line1_col298 return i ; ) ( INT_1 INT_1 ) ( STRING_2 STRING_2 ) ( STRING_1 STRING_1 ) ( METHOD_1_return static TYPE_1 METHOD_1 ( ) { TYPE_1 i   new TYPE_1 ( ) ; i.i   1 ; VAR_1   2 ; i.id   INT_1 ; VAR_2   INT_2 ; VAR_3   INT_3 ; VAR_4   INT_4 ; i.b   true ; VAR_5   false ; VAR_6   true ; i.s   STRING_1 ; VAR_7   STRING_2 ; VAR_8   null ; i.t   VAR_9 ; VAR_10   VAR_9 ; return i ; } ) ( i i   new TYPE_1 ( ) ) ( INT_2 INT_2 ) ( INT_4 INT_4 ) ( VAR_9 VAR_9 ) ( i i ) ( VAR_9 VAR_9 ) 
( VAR_5 VAR_5   user ( VAR_1 VAR_4 ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_3 java.lang.String VAR_3 ) ( VAR_2 java.lang.String VAR_2 ) 
( id java.lang.String id ) 
( event final TYPE_1 event ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2   VAR_3 ; VAR_4   VAR_5 ; switch ( type ) { case VAR_6 : case VAR_7 : VAR_8   VAR_9 ; case VAR_10 : path   VAR_1.path ; case VAR_11 : revision   VAR_1.revision ; case VAR_12 : VAR_13   VAR_14 ; } return this ; } ) ( VAR_5 VAR_5 ) ( VAR_3 VAR_3 ) 
( VAR_2 final java.util.List < TYPE_2 > VAR_2 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) 
( METHOD_1_return_line1_col378 return VAR_5 ; ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) & & ( ! ( METHOD_2 ( VAR_2 ) ) ) ) { java.lang.String VAR_3   VAR_4.getProject ( ) .getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } com.google.gerrit.reviewdb.client.Project project   VAR_4.getProject ( ) ; if ( project.METHOD_3 ( ) ) { return METHOD_4 ( ) ; } return VAR_5 ; } ) ( VAR_5 VAR_5 ) ( project project   VAR_4.getProject ( ) ) ( VAR_4 VAR_4 ) 
( m final TYPE_1 m ) ( m m ) ( m m ) ( m m ) ( m m ) ( m m ) ( m m ) ( m m ) ( m m ) ( m m ) 
( not_return_line1_col550 return VAR_1 ; ) ( not_return private static TYPE_1 not ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > n   p.METHOD_1 ( 0 ) ; if ( n instanceof TYPE_5 ) { return TYPE_6.METHOD_2 ( ( ( TYPE_5 < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; } TYPE_7 VAR_1   new TYPE_7 ( ) ; VAR_1.add ( new TYPE_8 ( ) VAR_2 ) ; VAR_1.add ( TYPE_6.METHOD_3 ( schema n ) VAR_3 ) ; return VAR_1 ; } ) ( schema TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema ) ( p TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) ( n n   p.METHOD_1 ( 0 ) ) ( VAR_1 VAR_1 ) ( p p ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new TYPE_7 ( ) ) ( VAR_1 VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return private boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { switch ( VAR_1 ) { case VAR_2 : return ( ( ! ( METHOD_2 ( ) ) ) & & ( ( user.METHOD_3 ( ) ) || ( METHOD_4 ( VAR_3 ) ) ) ) || ( METHOD_5 ( ) ) ; case VAR_4 : return ( ( ! ( METHOD_2 ( ) ) ) & & ( METHOD_6 ( java.util.Collections.METHOD_7 ( ) ) ) ) || ( METHOD_5 ( ) ) ; } throw new TYPE_2 ( ( VAR_1 + STRING_1 ) ) ; } ) 
( VAR_1 TYPE_1 VAR_1 ) 
( msg java.lang.String msg ) ( err TYPE_4 err ) ( res TYPE_2.HttpServletResponse res ) ( TYPE_5 TYPE_5 ) ( req TYPE_1 req ) ( c TYPE_3 c ) ( TYPE_5 TYPE_5 ) ( VAR_1 int VAR_1 ) ( res res ) 
( VAR_6 VAR_6 ) ( STRING_2 STRING_2 ) ( STRING_1 STRING_1 ) ( VAR_2 java.lang.String VAR_2 ) ( r r ) ( r r ) ( r r   VAR_5.to ( git STRING_3 ) ) ( VAR_3 VAR_3   STRING_1 ) ( METHOD_1_return_line1_col371 return r ; ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_4 VAR_4   STRING_2 ) ( VAR_5 VAR_5   VAR_6.create ( db admin.METHOD_2 ( ) VAR_3 VAR_4 VAR_1 VAR_2 ) ) ( VAR_5 VAR_5 ) ( METHOD_1_return private TYPE_1.Result METHOD_1 ( java.lang.String VAR_1 java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3   STRING_1 ; java.lang.String VAR_4   STRING_2 ; TYPE_2 VAR_5   VAR_6.create ( db admin.METHOD_2 ( ) VAR_3 VAR_4 VAR_1 VAR_2 ) ; TYPE_2.Result r   VAR_5.to ( git STRING_3 ) ; r.METHOD_3 ( ) ; return r ; } ) 
( METHOD_1_return private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2   VAR_1.METHOD_2 ( ) ; java.lang.String VAR_3   TYPE_2.METHOD_3 ( VAR_2 STRING_1 ) ; if ( TYPE_2.isEmpty ( VAR_3 ) ) { return false ; } boolean VAR_4   TYPE_3.contains ( VAR_3.METHOD_4 ( ) ) ; VAR_5.METHOD_5 ( ( ( ( ( ( STRING_2 + VAR_2 ) + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_4 ) ) ; return VAR_4 ; } ) ( METHOD_1_return_line1_col397 return VAR_4 ; ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3   TYPE_2.METHOD_3 ( VAR_2 STRING_1 ) ) ( VAR_4 VAR_4 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_4 VAR_4   TYPE_3.contains ( VAR_3.METHOD_4 ( ) ) ) ( VAR_5 VAR_5 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( VAR_1 VAR_1   new TYPE_1 ( new TYPE_2 ( projectName config ) new TYPE_3 ( STRING_5 ) new TYPE_4 ( ) ) ) ( Truth com.google.common.truth.Truth ) ( config config   STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) 
( VAR_2 VAR_2 ) ( ctl ctl   METHOD_2 ( VAR_1 ) ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1   VAR_2.create ( STRING_1 ) ) 
( VAR_1 final java.lang.String VAR_1 ) ( db db   schema.METHOD_2 ( ) ) ( schema schema ) ( METHOD_1_return public TYPE_1.AccountGroup METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_2.OrmException { final TYPE_1.ReviewDb db   schema.METHOD_2 ( ) ; try { final TYPE_3.NameKey VAR_2   new TYPE_3.NameKey ( VAR_1 ) ; final TYPE_1.AccountGroup group   db.METHOD_3 ( ) .get ( VAR_2 ) ; if ( group !   null ) { return group ; } else { return null ; } } finally { db.close ( ) ; } } ) 
( VAR_1 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return private java.lang.String METHOD_1 ( ) throws java.io.IOException TYPE_1 { TYPE_2 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) ) ; TYPE_2.Result result   VAR_1.to ( git STRING_1 ) ; VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) VAR_3 STRING_2 STRING_3 result.getChangeId ( ) ) ; return VAR_1.to ( git STRING_1 ) .getChangeId ( ) ; } ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( result result   VAR_1.to ( git STRING_1 ) ) ( VAR_2 VAR_2 ) 
(   new TYPE_2.NameKey ( ( STRING_1 + ( key.toString ( ) ) ) ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new TYPE_1.AccountGroup ( key ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col318 return VAR_1 ; ) ( key final TYPE_2.Id key ) ( METHOD_1_return public TYPE_1.AccountGroup METHOD_1 ( final TYPE_2.Id key ) { final TYPE_2.NameKey   new TYPE_2.NameKey ( ( STRING_1 + ( key.toString ( ) ) ) ) ; final TYPE_1.AccountGroup VAR_1   new TYPE_1.AccountGroup ( key ) ; VAR_1.METHOD_2 ( VAR_2 ) ; VAR_1.METHOD_3 ( VAR_3 ) ; return VAR_1 ; } ) 
( VAR_1 VAR_1 ) ( me me ) ( me me ) ( me me ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( n n   VAR_1.METHOD_3 ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) 
( p p   new TYPE_2 ( ) ) ( java.lang.String ) ( METHOD_1_return private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo java.lang.String ) throws java.io.IOException { TYPE_2 p   new TYPE_2 ( ) ; try ( TYPE_3 VAR_1   repo.METHOD_2 ( ) ) { p.METHOD_3 ( VAR_1 new org.eclipse.jgit.revwalk.RevWalk ( repo ) .METHOD_4 ( repo.METHOD_5 ( ) ) ) ; return p ; } } ) ( repo org.eclipse.jgit.lib.Repository repo ) 
( VAR_1 VAR_1   info.METHOD_1 ( ) .values ( ) ) ( info TYPE_1.ChangeInfo info ) ( info info ) ( VAR_3 VAR_3 ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2 ) ( info info ) 
( user user ) ( METHOD_1_return private static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user.METHOD_2 ( ) ) { return ( ( TYPE_2 ) ( user ) ) .getAccountId ( ) .toString ( ) ; } if ( user instanceof TYPE_3 ) { return STRING_1 + ( user.METHOD_3 ( ) .METHOD_4 ( ) .METHOD_5 ( ) .METHOD_6 ( ) .toString ( ) ) ; } return user.toString ( ) ; } ) ( user TYPE_1 user ) 
( VAR_1 TYPE_1 VAR_1 ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) 
( TYPE_1 TYPE_1 ) ( VAR_3 VAR_3 ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2 ) 
( METHOD_1_return protected < TYPE_1 extends TYPE_2 TYPE_3 extends TYPE_2 > TYPE_4 < TYPE_1 TYPE_3 > METHOD_1 ( final TYPE_5 < TYPE_6 < TYPE_1 TYPE_3 > > type final java.lang.String ) { return METHOD_1 ( TYPE_7.get ( type TYPE_8.METHOD_2 ( ) ) ) .name ( ) ; } ) ( type final TYPE_5 < TYPE_6 < TYPE_1 TYPE_3 > > type ) ( final java.lang.String ) 
( projectName TYPE_1.NameKey projectName ) ( VAR_1 java.lang.String VAR_1 ) ( base base   org.eclipse.jgit.lib.ObjectId.METHOD_2 ( VAR_1 ) ) ( ObjectId org.eclipse.jgit.lib.ObjectId ) ( VAR_2 java.util.List < TYPE_2 > VAR_2 ) ( VAR_3 TYPE_3 < TYPE_4 > VAR_3 ) ( msg java.lang.String msg ) ( VAR_4 VAR_4 ) 
( VAR_1 int VAR_1 ) ( row int row ) 
( VAR_1 VAR_1   e.getValue ( ) ) ( e TYPE_1 < java.lang.String > e ) ( e e ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) ( METHOD_1_return TYPE_1 METHOD_1 ( java.lang.String VAR_1 java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3   new TYPE_2 ( ( ( VAR_4.METHOD_2 ( ) ) + VAR_1 ) ) ; if ( ! ( TYPE_3.METHOD_3 ( VAR_2 ) ) ) { VAR_3.METHOD_4 ( STRING_1 TYPE_4.toString ( ) ) ; VAR_3.METHOD_5 ( new TYPE_5 ( VAR_2 VAR_5 ) ) ; } return VAR_6.METHOD_6 ( VAR_3 new TYPE_6 ( ) ) ; } ) ( VAR_6 VAR_6 ) ( VAR_3 VAR_3   new TYPE_2 ( ( ( VAR_4.METHOD_2 ( ) ) + VAR_1 ) ) ) 
( VAR_3 VAR_3 ) ( in in   new TYPE_1 ( ) ) ( STRING_1 STRING_1 ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_1 VAR_1 ) 
( VAR_2 int VAR_2 ) ( VAR_5 VAR_5 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 int VAR_3 ) ( edit boolean edit ) ( VAR_4 int VAR_4 ) 
( req final TYPE_1 req ) ( TYPE_3 TYPE_3 ) ( VAR_1 final TYPE_2 VAR_1 ) 
( ctl ctl   VAR_1.METHOD_2 ( cmd.getRefName ( ) ) ) ( VAR_1 VAR_1 ) ( cmd final TYPE_1.ReceiveCommand cmd ) 
( schema TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema ) ( id java.lang.String id ) ( VAR_3 VAR_3 ) ( METHOD_1_return static TYPE_1 < com.google.gerrit.server.query.change.ChangeData ? > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema java.lang.String id ) { if ( ( ( id.length ( ) )    ( VAR_1 ) ) & & ( schema.METHOD_2 ( VAR_2 ) ) ) { return VAR_2 ; } return VAR_3 ; } ) ( METHOD_1_return_line1_col293 return VAR_3 ; ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > p ) { if ( p instanceof TYPE_4 < ? > ) { return METHOD_2 ( p ) ; } else { return new TYPE_5 ( new TYPE_6 ( p.METHOD_3 ( ) .getName ( ) p.getValue ( ) ) ) ; } } ) ( p TYPE_2 < TYPE_3 > p ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index.METHOD_2 ( TYPE_1.METHOD_3 ( new TYPE_2 ( args VAR_1.getId ( ) ) this ) 1 ) .METHOD_4 ( ) ) { if ( VAR_2.getId ( ) .equals ( VAR_1.getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } ) ( VAR_1 com.google.gerrit.server.query.change.ChangeData VAR_1 ) 
( m m ) ( c final TYPE_2.Change c ) ( VAR_2 VAR_2 ) ( m m ) ( VAR_1 final java.lang.String VAR_1 ) ( message_return private TYPE_1 message ( final TYPE_2.Change c final java.lang.String VAR_1 ) { final java.lang.String VAR_2 ; try { VAR_2   TYPE_3.METHOD_1 ( schema ) ; } catch ( TYPE_4.OrmException e ) { return null ; } final TYPE_1 m   new TYPE_1 ( new TYPE_1.Key ( c.getId ( ) VAR_2 ) null ) ; m.METHOD_2 ( VAR_1 ) ; return m ; } ) ( m m   new TYPE_1 ( new TYPE_1.Key ( c.getId ( ) VAR_2 ) null ) ) ( message_return_line1_col343 return m ; ) 
( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_2 org.eclipse.jgit.revwalk.RevWalk VAR_2 ) ( METHOD_1_return protected java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 org.eclipse.jgit.revwalk.RevWalk VAR_2 ) throws TYPE_2 { try { return METHOD_2 ( VAR_1.METHOD_3 ( ) .METHOD_4 ( VAR_3 ) ) ; } catch ( java.io.IOException e ) { TYPE_2 VAR_4   new TYPE_2 ( e.getMessage ( ) ) ; VAR_4.METHOD_5 ( e ) ; throw VAR_4 ; } } ) 
( VAR_2 VAR_2   repo.METHOD_3 ( STRING_2 VAR_1 ) ) ( Assert org.junit.Assert ) ( repo repo ) ( repo repo ) ( repo repo ) ( repo repo ) ( VAR_1 VAR_1   repo.METHOD_3 ( STRING_1 repo.commit ( ) .create ( ) ) ) ( Assert org.junit.Assert ) 
( METHOD_1_return private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1   repo.METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id   VAR_1.insert ( VAR_2 new byte [ ] { } ) ; VAR_1.METHOD_3 ( ) ; return id ; } finally { VAR_1.METHOD_4 ( ) ; } } ) ( VAR_1 VAR_1   repo.METHOD_2 ( ) ) ( repo repo ) 
( r r   new java.util.ArrayList < TYPE_2 > ( out.size ( ) ) ) ( create_return public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r   new java.util.ArrayList < TYPE_2 > ( out.size ( ) ) ; for ( final com.google.gerrit.reviewdb.client.AccountGroup a : out.values ( ) ) { r.add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } ) 
( VAR_1 java.util.List < TYPE_1 > VAR_1 ) ( METHOD_1_return private java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2   new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { for ( TYPE_2 VAR_4 : VAR_3.METHOD_2 ( ) .METHOD_3 ( ) ) { java.lang.String [ ] VAR_5   VAR_4.METHOD_4 ( ) .METHOD_5 ( STRING_1 ) ; VAR_2.add ( VAR_5 [ 0 ] ) ; } } return VAR_2 ; } ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   new java.util.ArrayList < > ( ) ) ( METHOD_1_return_line1_col396 return VAR_2 ; ) 
( VAR_2 VAR_2   table.METHOD_3 ( ) ) ( VAR_2 VAR_2 ) ( row final int row ) ( VAR_2 VAR_2 ) ( table table ) ( VAR_1 final TYPE_1 VAR_1 ) ( table table ) ( VAR_2 VAR_2 ) 
( cfg TYPE_2 cfg ) ( VAR_1 VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 cfg java.lang.String revision ) { TYPE_3 VAR_1   TYPE_3.METHOD_2 ( ) .METHOD_3 ( cfg.METHOD_4 ( VAR_2 true ) ) .METHOD_5 ( STRING_1 ) ; for ( java.lang.String : VAR_3.METHOD_6 ( ) ) { VAR_1.METHOD_7 ( VAR_3.METHOD_8 ( ) ) ; } VAR_1.METHOD_7 ( STRING_2 ) ; VAR_1.METHOD_7 ( STRING_3 revision ) ; return VAR_1.get ( ) ; } ) ( TYPE_3 TYPE_3 ) ( revision java.lang.String revision ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) .METHOD_3 ( cfg.METHOD_4 ( VAR_2 true ) ) .METHOD_5 ( STRING_1 ) ) ( VAR_1 VAR_1 ) 
( apply_return public TYPE_1 < ? > apply ( TYPE_2 rsrc TYPE_3 in ) throws TYPE_4 com.google.gwtorm.server.OrmException { if ( ( VAR_1.get ( ) ) !   ( rsrc.METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } VAR_2.METHOD_2 ( VAR_1.get ( ) .getAccountId ( ) rsrc.getChange ( ) .getId ( ) ) ; return TYPE_1.METHOD_3 ( ) ; } ) ( VAR_2 VAR_2 ) ( TYPE_1 TYPE_1 ) ( in TYPE_3 in ) ( rsrc TYPE_2 rsrc ) 
( VAR_3 java.util.Set < TYPE_2 > VAR_3 ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_5 VAR_5   TYPE_3.METHOD_3 ( VAR_4 STRING_1 ) ) ( VAR_4 VAR_4   VAR_2.METHOD_2 ( ) ) ( VAR_2 VAR_2 ) ( TYPE_3 TYPE_3 ) ( VAR_1 java.lang.String VAR_1 ) 
( topic topic ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String VAR_1 java.lang.String topic ) throws TYPE_1 { if ( ( topic    null ) || ( topic.isEmpty ( ) ) ) { topic   STRING_1 + ( TYPE_2.METHOD_2 ( ) .toString ( ) ) ; VAR_2.METHOD_3 ( STRING_2 VAR_1 topic ) ; VAR_3.changes ( ) .id ( VAR_1 ) .topic ( topic ) ; } return topic ; } ) ( topic java.lang.String topic ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return_line1_col343 return topic ; ) 
( METHOD_1_return java.util.Map < java.lang.String ? > METHOD_1 ( TYPE_1 req ) throws java.io.IOException { TYPE_2 VAR_1   VAR_2.METHOD_2 ( req ) .METHOD_3 ( ) ; return TYPE_3.of ( STRING_1 VAR_3 STRING_2 TYPE_4.METHOD_4 ( VAR_4 ) STRING_3 METHOD_5 ( req VAR_5 TYPE_5.METHOD_6 ( VAR_6 ) ) STRING_4 METHOD_5 ( req VAR_7 METHOD_7 ( req ) ) ) ; } ) ( req TYPE_1 req ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.METHOD_2 ( req ) .METHOD_3 ( ) ) 
( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col187 return VAR_1 ; ) ( VAR_1 VAR_1   ( TYPE_1.index ( this ) ) - ( TYPE_1.index ( b ) ) ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 b ) { int VAR_1   ( TYPE_1.index ( this ) ) - ( TYPE_1.index ( b ) ) ; if ( VAR_1    0 ) getName ( ) .METHOD_1 ( b.getName ( ) ) ; return VAR_1 ; } ) ( b TYPE_1 b ) 
( VAR_1 VAR_1   db.METHOD_2 ( ) ) ( db db ) ( db db ) ( db db ) ( VAR_2 VAR_2   db.METHOD_2 ( ) ) 
( in com.google.gerrit.reviewdb.client.PatchSet in ) ( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 ctl com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException { VAR_1   VAR_2.create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo   METHOD_3 ( ctl ) ) { TYPE_1 VAR_4   METHOD_4 ( ctl VAR_5.create ( db.get ( ) ctl ) in repo true ) ; VAR_1.METHOD_5 ( ) ; return VAR_4 ; } } ) ( ctl TYPE_2 ctl ) 
( cfg TYPE_1 cfg ) ( java.lang.String ) ( VAR_1 int VAR_1 ) ( METHOD_1_return private int METHOD_1 ( TYPE_1 cfg java.lang.String int VAR_1 ) { try { return cfg.METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2.error ( java.lang.String.format ( STRING_1 VAR_1 ) ) ; VAR_2.METHOD_2 ( ( STRING_2 + ( e.getMessage ( ) ) ) e ) ; return VAR_1 ; } } ) 
( VAR_2 VAR_2 ) ( ref ref   new TYPE_4 < TYPE_2 < TYPE_3 > > ( VAR_1 ) ) ( add_return public TYPE_1 add ( final TYPE_2 < TYPE_3 > VAR_1 ) { final TYPE_4 < TYPE_2 < TYPE_3 > > ref   new TYPE_4 < TYPE_2 < TYPE_3 > > ( VAR_1 ) ; VAR_2.add ( ref ) ; return new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ref.METHOD_2 ( VAR_1 null ) ) { VAR_2.METHOD_1 ( ref ) ; } } } ; } ) ( VAR_1 final TYPE_2 < TYPE_3 > VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) (   VAR_1.getName ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_6 VAR_6 ) ( VAR_2 VAR_2 ) ( VAR_5 VAR_5 ) ( VAR_7 VAR_7 ) ( VAR_4 VAR_4 ) 
( result result   new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1.METHOD_3 ( VAR_2 ) ; } } .METHOD_4 ( VAR_1.METHOD_5 ( ) ) ) ( result result ) ( METHOD_1_return_line1_col247 return result ; ) ( VAR_1 final TYPE_2 VAR_1 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_1 result   new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1.METHOD_3 ( VAR_2 ) ; } } .METHOD_4 ( VAR_1.METHOD_5 ( ) ) ; return result ; } ) 
( TYPE_1 TYPE_1 ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( STRING_2 ) ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) .METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1   ( cd !   null ) ? cd.reviewers ( TYPE_2.of ( db ) ) .values ( ) : VAR_2.METHOD_4 ( db change.getId ( ) ) .values ( ) ; TYPE_3 user   ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ; return VAR_1.contains ( user.getAccountId ( ) ) ; } return false ; } ) 
( VAR_4 TYPE_3 VAR_4 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 org.eclipse.jgit.lib.Repository VAR_2 ) ( TYPE_6 TYPE_6 ) ( VAR_3 TYPE_2 VAR_3 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_5 VAR_5   METHOD_2 ( VAR_1 VAR_3 ) ) ( VAR_6 VAR_6   TYPE_6.METHOD_3 ( ) .METHOD_4 ( STRING_1 ) .METHOD_5 ( VAR_4 ) .METHOD_6 ( ) ) 
( METHOD_1_return private java.lang.String METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.lib.ObjectId VAR_2   repo.METHOD_3 ( STRING_1 ) ; org.eclipse.jgit.lib.ObjectId VAR_3   repo.METHOD_3 ( STRING_2 ) ; return METHOD_4 ( repo VAR_2 VAR_3 ) ; } finally { rw.METHOD_5 ( ) ; } } finally { repo.close ( ) ; } } ) ( VAR_1 VAR_1 ) ( repo repo   VAR_1.METHOD_2 ( project ) ) 
( VAR_1 VAR_1 ) ( result TYPE_1 result ) 
( project project   VAR_1.change ( ) .getProject ( ) ) ( METHOD_1_return static int METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project   VAR_1.change ( ) .getProject ( ) ; try { return ( ( VAR_2.config )    null ) || ( project    null ) ? VAR_3 : VAR_4.METHOD_2 ( project VAR_5 ) .METHOD_3 ( VAR_6 VAR_3 ) ; } catch ( TYPE_1 e ) { VAR_7.error ( ( STRING_1 + project ) ) ; return VAR_3 ; } } ) ( VAR_1 com.google.gerrit.server.query.change.ChangeData VAR_1 ) ( VAR_1 VAR_1 ) 
( event TYPE_1 event ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( change com.google.gerrit.reviewdb.client.Change change ) 
( TYPE_2 TYPE_2 ) ( cfg cfg   VAR_1.METHOD_2 ( VAR_2 ) .METHOD_3 ( ) ) ( VAR_1 VAR_1 ) 
( java.lang.String ) ( in in   new TYPE_2 ( ) ) ( ) 
( VAR_1 final java.lang.String VAR_1 ) ( ui ui ) ( METHOD_1_return_line1_col445 return VAR_5 ; ) ( VAR_2 final java.lang.String VAR_2 ) ( VAR_3 final boolean VAR_3 ) ( VAR_4 VAR_4   get ( ) ) ( VAR_5 VAR_5   ui.METHOD_2 ( ( VAR_4 !   null ? VAR_4 : VAR_2 ) STRING_1 VAR_1 ) ) ( final java.lang.String ) ( VAR_5 VAR_5 ) ( METHOD_1_return public java.lang.String METHOD_1 ( final java.lang.String VAR_1 final java.lang.String final java.lang.String VAR_2 final boolean VAR_3 ) { final java.lang.String VAR_4   get ( ) ; java.lang.String VAR_5   ui.METHOD_2 ( ( VAR_4 !   null ? VAR_4 : VAR_2 ) STRING_1 VAR_1 ) ; if ( VAR_3 & & ( VAR_5    VAR_2 ) ) { VAR_5   null ; } if ( ! ( TYPE_1.METHOD_3 ( VAR_4 VAR_5 ) ) ) { set ( VAR_5 ) ; } return VAR_5 ; } ) 
( TYPE_1 TYPE_1 ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) 
( VAR_2 VAR_2 ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( VAR_1 java.lang.String VAR_1 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i   1 ; i < INT_1 ; i++ ) { java.lang.String p   STRING_1 + i ; METHOD_2 ( p ) ; TYPE_2.METHOD_3 ( ( ( ( VAR_1.METHOD_4 ( ) ) + STRING_2 ) + p ) ) ; } return null ; } ) 
( VAR_3 java.lang.String VAR_3 ) ( METHOD_1_return private TYPE_1.Result METHOD_1 ( java.lang.String ref java.lang.String VAR_1 java.lang.String VAR_2 java.lang.String VAR_3 ) throws java.io.IOException TYPE_2 { TYPE_3 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 ) ; return VAR_4.to ( git ref ) ; } ) ( ref java.lang.String ref ) ( VAR_4 VAR_4 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_5 VAR_5 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_4 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 ) ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   new TYPE_1 ( VAR_1 STRING_1 ) ) 
( METHOD_1_return TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_1 < TYPE_2 > ( ) { private static final long VAR_1   INT_1 ; public void METHOD_1 ( TYPE_2 VAR_2 TYPE_3 VAR_3 ) { try { TYPE_4 VAR_4   new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ; try { VAR_4.METHOD_2 ( VAR_2 ) ; VAR_4.METHOD_3 ( ) ; } finally { VAR_4.close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_6 ( STRING_1 err ) ; } } } ; } ) 
( change change   insert ( METHOD_3 ( repo ) ) ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( query query   METHOD_4 ( STRING_2 ) .METHOD_5 ( INT_1 ) ) 
( VAR_4 VAR_4 ) ( VAR_1 VAR_1   new TYPE_6 ( new TYPE_6.Id ( user.getAccountId ( ) VAR_2 ) VAR_3 ) ) ( i TYPE_1 i ) 
( METHOD_1_return public java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > VAR_1   new TYPE_1 < > ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1.add ( cd.change ( ) .currentPatchSetId ( ) ) ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col374 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new TYPE_1 < > ( ) ) 
( VAR_2 VAR_2 ) ( VAR_4 VAR_4   VAR_5.METHOD_9 ( VAR_3 ) ) ( VAR_5 VAR_5 ) ( VAR_1 VAR_1   VAR_2.METHOD_2 ( ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( TYPE_2 TYPE_2 ) 
( s s ) ( s s   METHOD_1 ( email ) ) ( TYPE_2 TYPE_2 ) ( user_return private Account.Id user ( java.lang.String java.lang.String email ) { final TYPE_1 s   METHOD_1 ( email ) ; TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( TYPE_2.METHOD_4 ( s.METHOD_5 ( ) .getId ( ) ) ) ) .METHOD_6 ( TYPE_3.of ( s ) ) ; return s.METHOD_5 ( ) .getId ( ) ; } ) ( email java.lang.String email ) ( java.lang.String ) 
( METHOD_1_return_line1_col475 return VAR_2 ; ) ( VAR_2 VAR_2 ) ( VAR_5 VAR_5   new TYPE_4 ( ) ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException java.io.IOException { TYPE_1 VAR_2   new TYPE_1 ( ) ; VAR_2.METHOD_2 ( METHOD_3 ( ) ) ; VAR_2.METHOD_4 ( new TYPE_3 ( VAR_3 VAR_4 ) ) ; VAR_2.METHOD_5 ( STRING_1 ) ; TYPE_4 VAR_5   new TYPE_4 ( ) ; org.eclipse.jgit.lib.ObjectId VAR_6   METHOD_6 ( VAR_1 VAR_5 ) ; if ( VAR_5.get ( ) ) { return null ; } VAR_2.METHOD_7 ( TYPE_5.METHOD_8 ( VAR_6 ) ) ; return VAR_2 ; } ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   new TYPE_1 ( ) ) ( VAR_2 VAR_2 ) ( VAR_6 VAR_6   METHOD_6 ( VAR_1 VAR_5 ) ) ( VAR_2 VAR_2 ) 
( ctl ctl ) ( ctl TYPE_2 ctl ) ( format_return public TYPE_1 format ( TYPE_1 out TYPE_2 ctl TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId   ctl.getChange ( ) .currentPatchSetId ( ) ; return format ( out ctl VAR_2.METHOD_1 ( db.get ( ) VAR_1 psId VAR_3 ) ) ; } ) ( VAR_1 TYPE_3 VAR_1 ) ( out TYPE_1 out ) ( psId psId   ctl.getChange ( ) .currentPatchSetId ( ) ) 
( METHOD_1_return protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return TYPE_1.METHOD_2 ( ) ; } catch ( TYPE_3.OrmException e ) { throw new TYPE_2 ( INT_1 STRING_1 ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( INT_1 STRING_1 ) ; } } ) 
( rsrc TYPE_2 rsrc ) ( apply_return public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc.METHOD_1 ( ) ) ) { return VAR_2.format ( rsrc.METHOD_2 ( ) .getProject ( ) ) ; } throw new TYPE_3 ( rsrc.getName ( ) ) ; } ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( null ) { public TYPE_2 METHOD_2 ( ) { return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; } } ; } ) 
( factory factory ) ( VAR_1 VAR_1   factory.METHOD_7 ( ) ) ( factory factory ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 factory   TYPE_3.METHOD_2 ( ) ; factory.METHOD_3 ( false ) ; factory.METHOD_4 ( false ) ; factory.METHOD_5 ( true ) ; factory.METHOD_6 ( true ) ; final TYPE_1 VAR_1   factory.METHOD_7 ( ) ; return VAR_1 ; } ) ( factory factory ) ( factory factory   TYPE_3.METHOD_2 ( ) ) ( METHOD_1_return_line1_col286 return VAR_1 ; ) ( TYPE_3 TYPE_3 ) ( factory factory ) ( factory factory ) ( VAR_1 VAR_1 ) 
( change change   METHOD_3 ( repo null null null null ) .insert ( ) ) ( change change ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( key key   change.getKey ( ) .get ( ) ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   insert ( METHOD_4 ( repo ) ) ) ( repo repo   METHOD_3 ( STRING_1 ) ) ( VAR_3 VAR_3   insert ( METHOD_4 ( repo ) ) ) 
( get_return public TYPE_1 get ( ) { try { return new TYPE_2 ( server ) ; } catch ( final TYPE_3 VAR_1 ) { return new TYPE_1 ( ) { public void METHOD_1 ( TYPE_4.Account account TYPE_5 info ) throws TYPE_3 { throw VAR_1 ; } } ; } } ) 
( ref java.lang.String ref ) ( ref ref ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   ( ref.METHOD_2 ( TYPE_1 ) ) + ( TYPE_1.length ( ) ) ) ( METHOD_1_return public static com.google.gerrit.reviewdb.client.Change.Id METHOD_1 ( java.lang.String ref ) { int VAR_1   ( ref.METHOD_2 ( TYPE_1 ) ) + ( TYPE_1.length ( ) ) ; int VAR_2   TYPE_2.METHOD_3 ( ref VAR_1 ) ; java.lang.String id   ref.METHOD_4 ( VAR_1 VAR_2 ) ; return new com.google.gerrit.reviewdb.client.Change.Id ( TYPE_3.METHOD_5 ( id ) ) ; } ) ( id id   ref.METHOD_4 ( VAR_1 VAR_2 ) ) ( VAR_2 VAR_2   TYPE_2.METHOD_3 ( ref VAR_1 ) ) 
( r r   new java.util.ArrayList < TYPE_1 > ( in.size ( ) ) ) ( r r ) ( in java.util.List < TYPE_1 > in ) ( METHOD_1_return private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > in ) { java.util.ArrayList < TYPE_1 > r   new java.util.ArrayList < TYPE_1 > ( in.size ( ) ) ; for ( TYPE_1 m : in ) { if ( VAR_1.METHOD_2 ( ) ) { for ( TYPE_2 c : VAR_1.METHOD_3 ( ) ) { r.add ( new TYPE_1 ( c VAR_2 ) ) ; } } else { r.add ( m ) ; } } return r ; } ) ( METHOD_1_return_line1_col361 return r ; ) 
( TYPE_3 TYPE_3 ) ( msg msg   TYPE_3.message ( VAR_1 ) ) ( res res ) ( VAR_1 TYPE_1 VAR_1 ) ( res res ) ( res TYPE_2.HttpServletResponse res ) 
( s s ) ( s s   METHOD_2 ( ) ) ( METHOD_1_return public java.lang.String METHOD_1 ( ) { final java.lang.String s   METHOD_2 ( ) ; if ( ( s    null ) || ( ( s.length ( ) )    0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1   s.METHOD_3 ( STRING_2 ) ; if ( ( VAR_1.length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ 2 ] ; } ) ( VAR_1 VAR_1   s.METHOD_3 ( STRING_2 ) ) 
( id id ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id ; try { id   TYPE_2.METHOD_2 ( VAR_1 ) ; } catch ( TYPE_3 VAR_2 ) { return null ; } try { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_3 ( ) ; try { return auth ( db.METHOD_4 ( ) .get ( id ) ) ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) .log ( STRING_1 e ) ; return null ; } } ) ( VAR_1 final java.lang.String VAR_1 ) 
( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( info info ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1   info.METHOD_2 ( ) .values ( ) ) ( r r   new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSet > ( VAR_1.length ( ) ) ) ( METHOD_1_return_line1_col494 return r ; ) ( METHOD_1_return private static java.util.List < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1.ChangeInfo info ) { TYPE_2 < TYPE_3 > VAR_1   info.METHOD_2 ( ) .values ( ) ; TYPE_3.METHOD_3 ( VAR_1 ) ; java.util.List < com.google.gerrit.reviewdb.client.PatchSet > r   new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSet > ( VAR_1.length ( ) ) ; for ( TYPE_3 VAR_2 : TYPE_4.METHOD_4 ( VAR_1 ) ) { r.add ( TYPE_5.METHOD_5 ( info VAR_2 ) ) ; } return r ; } ) ( info TYPE_1.ChangeInfo info ) ( r r ) 
( VAR_3 TYPE_1 VAR_3 ) ( VAR_1 java.io.IOException VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( java.io.IOException VAR_1 int VAR_2 TYPE_1 VAR_3 ) { if ( ( VAR_2 > ( cfg.METHOD_2 ( ) ) ) || ( VAR_1 instanceof TYPE_2 ) ) { return false ; } METHOD_3 ( VAR_1.getMessage ( ) ) ; try { TYPE_3.METHOD_4 ( cfg.METHOD_5 ( ) ) ; } catch ( TYPE_4 e ) { TYPE_3.METHOD_6 ( ) .METHOD_7 ( ) ; return false ; } return true ; } ) ( VAR_2 int VAR_2 ) 
( STRING_1 STRING_1 ) ( VAR_2 VAR_2   STRING_2 ) ( a a   new TYPE_1 ( VAR_1 VAR_2 ) ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   STRING_1 ) ( STRING_2 STRING_2 ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) 
( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) .METHOD_3 ( new TYPE_4 ( ) ) ) 
( t TYPE_1 t ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_1 t ) { if ( t.METHOD_2 ( ) ) return new TYPE_2 ( ( ( this.METHOD_3 ( ) ) - ( t.METHOD_3 ( ) ) ) ) ; return new TYPE_3 ( ( ( this.VAR_1 ) - ( t.METHOD_4 ( ) ) ) ) ; } ) 
( TYPE_4 TYPE_4 ) ( query final java.lang.String query ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 final java.lang.String query final int VAR_2 ) { final int n   ( VAR_2 <   0 ) ? INT_1 : TYPE_3.METHOD_2 ( VAR_2 INT_1 ) ; return TYPE_4.METHOD_3 ( TYPE_5.METHOD_4 ( VAR_3.METHOD_5 ( query ) n ) ) ; } ) ( n n   ( VAR_2 <   0 ) ? INT_1 : TYPE_3.METHOD_2 ( VAR_2 INT_1 ) ) ( VAR_2 final int VAR_2 ) ( VAR_1 final TYPE_2 VAR_1 ) 
( VAR_1 TYPE_2 VAR_1 ) ( in in   new TYPE_7 ( ) ) ( input TYPE_3 input ) ( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 TYPE_3 input ) throws TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException { TYPE_7 in   new TYPE_7 ( ) ; VAR_2   TYPE_8.of ( VAR_1.METHOD_1 ( ) .toString ( ) ) ; return delete.get ( ) .apply ( VAR_1 in ) ; } ) ( TYPE_8 TYPE_8 ) ( delete delete ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( int index TYPE_2 VAR_1 ) { int VAR_2   METHOD_2 ( index false VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } return METHOD_3 ( VAR_2 VAR_1 null TYPE_3.METHOD_4 ( TYPE_4.METHOD_5 ( ) ) ) ; } ) ( index int index ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2   METHOD_2 ( index false VAR_3 ) ) 
( TYPE_2 TYPE_2 ) ( TYPE_3 TYPE_3 ) 
( id java.lang.String id ) 
( token final java.lang.String token ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( final java.lang.String token ) { if ( TYPE_2.METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2.METHOD_3 ( ) .getId ( ) ) ; } else { TYPE_1 r   new TYPE_3 ( null ) ; r.METHOD_4 ( true ) ; return r ; } } ) 
( VAR_1 VAR_1   VAR_2.get ( new TYPE_1.NameKey ( STRING_1 ) ) ) ( VAR_2 VAR_2 ) 
( TYPE_4 TYPE_4 ) ( id com.google.gerrit.reviewdb.client.Account.Id id ) 
( java.lang.String ) ( METHOD_1_return private static boolean METHOD_1 ( TYPE_1 view java.lang.String ) { java.util.List < java.lang.String > values   view.METHOD_2 ( ) .get ( ) ; return ( ! ( values.isEmpty ( ) ) ) & & ( ( values.get ( 0 ) .equals ( STRING_1 ) ) || ( values.get ( 0 ) .equals ( STRING_2 ) ) ) ; } ) ( view view ) ( view TYPE_1 view ) ( values values   view.METHOD_2 ( ) .get ( ) ) 
( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) 
( VAR_2 final java.util.Set < TYPE_2 > VAR_2 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( a TYPE_1 a ) ( Assert org.junit.Assert ) ( VAR_1 TYPE_2 VAR_1 ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) 
( revision java.lang.String revision ) ( projectName java.lang.String projectName ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String projectName java.lang.String revision java.lang.String VAR_1 ) { if ( ( VAR_2 ) !   null ) { return METHOD_2 ( revision.METHOD_3 ( STRING_1 METHOD_4 ( projectName ) ) .METHOD_3 ( STRING_2 METHOD_4 ( revision ) ) .METHOD_3 ( STRING_3 METHOD_4 ( VAR_1 ) ) .toString ( ) ) ; } return null ; } ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( n n   VAR_1.METHOD_3 ( ) ) 
( METHOD_1_return public java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_2.get ( VAR_1 ) )    null ) { TYPE_3 VAR_3   new TYPE_3 ( VAR_1 ) ; VAR_4.METHOD_2 ( VAR_3 ) ; VAR_2.put ( VAR_1 VAR_3.METHOD_1 ( ) ) ; } return VAR_2.get ( VAR_1 ) ; } ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2 ) 
( TYPE_1 TYPE_1 ) 
( VAR_4 VAR_4 ) ( VAR_1 TYPE_1 VAR_1 ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   METHOD_6 ( VAR_3 ) ) 
( project final TYPE_1.NameKey project ) ( ps final TYPE_2.PatchSet ps ) ( METHOD_1_return public java.lang.String METHOD_1 ( final TYPE_1.NameKey project final TYPE_2.PatchSet ps ) { final TYPE_3 r   new TYPE_3 ( ) ; TYPE_4.p ( r project ) ; TYPE_4.METHOD_2 ( r ps ) ; return ( VAR_1 ) + r ; } ) ( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) ( r r   new TYPE_3 ( ) ) 
( VAR_2 VAR_2   METHOD_6 ( VAR_3 ) ) ( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1 ) ( r r   VAR_5.put ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) in ) ) ( Assert org.junit.Assert ) ( FALSE VAR_4.FALSE ) ( VAR_5 VAR_5 ) ( r r ) ( VAR_1 TYPE_1 VAR_1 ) ( in in   new TYPE_2 ( ) ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( VAR_2 TYPE_4.Factory VAR_2 ) ( VAR_4 TYPE_7 VAR_4 ) ( cfg TYPE_2 cfg ) ( s s   new TYPE_1 ( cfg null VAR_1 VAR_2 VAR_3 null null null ) ) ( VAR_3 TYPE_5 < TYPE_6 > VAR_3 ) ( METHOD_1_return TYPE_1 METHOD_1 ( TYPE_2 cfg TYPE_3 VAR_1 TYPE_4.Factory VAR_2 TYPE_5 < TYPE_6 > VAR_3 TYPE_7 VAR_4 ) throws TYPE_8 { TYPE_1 s   new TYPE_1 ( cfg null VAR_1 VAR_2 VAR_3 null null null ) ; for ( TYPE_9 view : TYPE_10.values ( ) ) { s.METHOD_2 ( view VAR_4 ) ; } return s ; } ) ( VAR_1 TYPE_3 VAR_1 ) ( s s ) ( METHOD_1_return_line1_col311 return s ; ) 
( VAR_2 VAR_2   STRING_2 ) ( STRING_1 STRING_1 ) ( a a   new TYPE_1 ( VAR_1 VAR_2 ) ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   STRING_1 ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( STRING_2 STRING_2 ) 
( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) ( ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4 ) ( VAR_3 VAR_3 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( METHOD_1_return_line1_col295 return VAR_4 ; ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.METHOD_2 ( 0 ( ( VAR_2.METHOD_3 ( STRING_1 ) ) - 1 ) ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return public java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1   VAR_2.METHOD_2 ( 0 ( ( VAR_2.METHOD_3 ( STRING_1 ) ) - 1 ) ) ; java.lang.String VAR_3   VAR_2.METHOD_2 ( VAR_2.METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( VAR_4 VAR_1 VAR_3 ) ; return VAR_4 ; } ) ( VAR_3 VAR_3   VAR_2.METHOD_2 ( VAR_2.METHOD_3 ( STRING_1 ) ) ) 
( e e   VAR_1.get ( ( i - 1 ) ) .METHOD_3 ( ) ) ( s s   VAR_1.get ( i ) .METHOD_2 ( ) ) ( i final int i ) ( METHOD_1_return private boolean METHOD_1 ( final int i ) { final int s   VAR_1.get ( i ) .METHOD_2 ( ) ; final int e   VAR_1.get ( ( i - 1 ) ) .METHOD_3 ( ) ; return ( s - e ) <   ( 2 * ( VAR_2 ) ) ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws TYPE_2 { try { return VAR_2.get ( VAR_3.get ( ) new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1.getParentKey ( ) ( ( VAR_1.get ( ) ) - 1 ) ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } } ) 
( VAR_1 VAR_1 ) 
( ps ps   db.patchSets ( ) .get ( psId ) ) ( db db ) ( psId final com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( METHOD_1_return private org.eclipse.jgit.lib.ObjectId METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws TYPE_1 com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps   db.patchSets ( ) .get ( psId ) ; if ( ps    null ) { throw new TYPE_1 ( ) ; } try { return org.eclipse.jgit.lib.ObjectId.METHOD_2 ( ps.getRevision ( ) .get ( ) ) ; } catch ( TYPE_2 e ) { VAR_1.error ( ( ( STRING_1 + psId ) + STRING_2 ) ) ; throw new TYPE_1 ( ) ; } } ) 
( branch java.lang.String branch ) ( topic java.lang.String topic ) ( METHOD_1_return private static java.lang.String METHOD_1 ( java.lang.String branch java.lang.String topic ) { if ( ( topic !   null ) & & ( ! ( topic.isEmpty ( ) ) ) ) { return ( ( branch + STRING_1 ) + topic ) + STRING_2 ; } else { return branch ; } } ) 
( METHOD_1_return public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo java.lang.String message java.util.Set < TYPE_1 > VAR_1 ) throws java.io.IOException TYPE_2 { java.util.Map < TYPE_1 byte [ ] > VAR_2   new TYPE_3 < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2.put ( VAR_3 null ) ; } return TYPE_4.METHOD_1 ( repo message VAR_2 ) ; } ) ( message java.lang.String message ) ( repo org.eclipse.jgit.lib.Repository repo ) ( TYPE_4 TYPE_4 ) ( VAR_1 java.util.Set < TYPE_1 > VAR_1 ) ( VAR_2 VAR_2   new TYPE_3 < > ( ) ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException java.io.IOException { if ( VAR_1    ( TYPE_2.METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db   VAR_2.METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db.close ( ) ; } } synchronized ( VAR_3 ) { VAR_3.update ( 1 ) ; } return null ; } ) 
( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_1 final int VAR_1 ) ( msg msg ) 
( u u   METHOD_2 ( c VAR_1 ) ) ( METHOD_1_return_line1_col401 return c ; ) ( u u ) ( c c   TYPE_2.METHOD_1 ( project VAR_1.getAccountId ( ) ) ) ( c c ) ( u u ) ( u u ) ( METHOD_1_return protected com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws com.google.gwtorm.server.OrmException java.io.IOException TYPE_1 { com.google.gerrit.reviewdb.client.Change c   TYPE_2.METHOD_1 ( project VAR_1.getAccountId ( ) ) ; TYPE_3 u   METHOD_2 ( c VAR_1 ) ; u.METHOD_3 ( c.METHOD_4 ( ) ) ; u.METHOD_5 ( c.METHOD_6 ( ) .get ( ) ) ; u.commit ( ) ; return c ; } ) ( TYPE_2 TYPE_2 ) 
( VAR_1 TYPE_1 VAR_1 ) ( equals_return public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_2 r   ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( ( ( ( TYPE_3.equals ( r.name ) ) & & ( TYPE_3.equals ( id r.id ) ) ) & & ( TYPE_3.equals ( type r.type ) ) ) & & ( TYPE_3.equals ( VAR_2 VAR_3 ) ) ) & & ( TYPE_3.equals ( VAR_4 VAR_5 ) ) ; } return false ; } ) 
( VAR_1 VAR_1   METHOD_3 ( repo VAR_2 ) ) ( VAR_3 VAR_3   insert ( VAR_1 ) ) ( VAR_4 VAR_4   METHOD_3 ( repo VAR_5 ) ) ( VAR_6 VAR_6   insert ( VAR_4 ) ) ( repo repo   METHOD_2 ( STRING_1 ) ) 
( event TYPE_1 event ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( e e   VAR_1.METHOD_4 ( CHAR_1 ) ) ( TYPE_2 TYPE_2 ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2.METHOD_2 ( ( ! ( TYPE_3.METHOD_3 ( VAR_1 ) ) ) STRING_1 ) ; int e   VAR_1.METHOD_4 ( CHAR_1 ) ; TYPE_2.METHOD_2 ( ( e >   0 ) STRING_2 VAR_1 ) ; return new TYPE_1 ( VAR_1.METHOD_5 ( 0 e ) TYPE_4.METHOD_6 ( VAR_1.METHOD_5 ( ( e + 1 ) ) VAR_1.length ( ) ) ) ; } ) 
( VAR_1 VAR_1   VAR_2.get ( req.METHOD_2 ( ) ) ) ( req TYPE_1 req ) ( VAR_2 VAR_2 ) ( rsp TYPE_2.HttpServletResponse rsp ) 
( VAR_1 VAR_1 ) ( r r   METHOD_2 ( ) ) 
( VAR_1 TYPE_1 VAR_1 ) ( error java.lang.Exception error ) 
( METHOD_1_return private boolean METHOD_1 ( ) { if ( ( TYPE_1.equals ( VAR_1 ) ) & & ( ! ( VAR_2.METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2.METHOD_3 ( ) .METHOD_4 ( ) ) & & ( VAR_2.METHOD_5 ( ) ) ) ) { return false ; } } return ( METHOD_6 ( VAR_3 ) ) & & ( METHOD_7 ( ) ) ; } ) 
( Assert org.junit.Assert ) ( VAR_2 VAR_2   new TYPE_2 ( TYPE_3.of ( TYPE_4.METHOD_3 ( STRING_3 ) ) VAR_3 ) ) ( VAR_1 VAR_1   METHOD_2 ( STRING_1 STRING_2 ) ) 
( VAR_5 VAR_5   ( this.METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) .METHOD_3 ( ) ) ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) !   ( this ) ) return VAR_2.METHOD_1 ( VAR_1 ) ; if ( ! ( VAR_1.METHOD_2 ( ) ) ) return VAR_3 ; if ( ( this )    VAR_1 ) return VAR_4 ; int VAR_5   ( this.METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) .METHOD_3 ( ) ) ; if ( VAR_5 !   0 ) return VAR_5 ; throw new TYPE_3 ( STRING_1 ) ; } ) ( VAR_1 TYPE_1 VAR_1 ) 
( line int line ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_1 VAR_1 ) ( path path ) ( message message ) ( message java.lang.String message ) ( METHOD_1_return_line1_col374 return c ; ) ( path java.lang.String path ) ( c C c ) ( METHOD_1_return private static < C extends TYPE_1 > C METHOD_1 ( C c java.lang.String path TYPE_2 VAR_1 int line java.lang.String message ) { c.path   path ; VAR_2   VAR_1 ; c.line   ( line !   0 ) ? line : null ; c.message   message ; if ( line !   0 ) { TYPE_3 VAR_3   new TYPE_3 ( ) ; VAR_4   1 ; VAR_5   1 ; VAR_6   1 ; VAR_7   INT_1 ; VAR_8   VAR_3 ; } return c ; } ) ( c c ) 
( user user   ( ( TYPE_2 ) ( rsrc.METHOD_2 ( ) .METHOD_3 ( ) ) ) ) ( rsrc TYPE_1 rsrc ) 
( r r   VAR_2.get ( VAR_1 ) ) ( Assert org.junit.Assert ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 r   VAR_2.get ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_3 r.METHOD_2 ( ) ) ; return METHOD_3 ( ) .METHOD_4 ( r.METHOD_5 ( ) new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } .METHOD_6 ( ) ) ; } ) ( VAR_2 VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) 
( changeId changeId   METHOD_2 ( STRING_1 ) .getChangeId ( ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   METHOD_3 ( changeId ) ) ( Truth com.google.common.truth.Truth ) 
( ctx ctx ) ( c c   ctx.getChange ( ) ) ( ctx TYPE_1 ctx ) 
( java.lang.String ) ( VAR_2 TYPE_3 VAR_2 ) ( VAR_6 VAR_6   VAR_7.get ( ) ) ( VAR_3 TYPE_4 VAR_3 ) ( VAR_7 VAR_7 ) ( VAR_1 TYPE_2 VAR_1 ) ( get_return public TYPE_1 get ( java.lang.String TYPE_2 VAR_1 TYPE_3 VAR_2 TYPE_4 VAR_3 java.lang.String VAR_4 TYPE_2 VAR_5 ) throws TYPE_5 { TYPE_6 VAR_6   VAR_7.get ( ) ; return new TYPE_1 ( METHOD_1 ( VAR_1 ) VAR_4 VAR_2 VAR_1 VAR_3 new TYPE_7 ( METHOD_1 ( VAR_1 ) VAR_6 VAR_1 ) VAR_5 VAR_6.METHOD_2 ( ) ) ; } ) ( VAR_4 java.lang.String VAR_4 ) ( VAR_5 TYPE_2 VAR_5 ) 
( db db ) ( VAR_3 final TYPE_5 VAR_3 ) ( VAR_1 final TYPE_3.Id VAR_1 ) ( VAR_4 VAR_4   new TYPE_1.PatchSetApproval ( new TYPE_7.Key ( psId VAR_1 VAR_2 ) ( ( short ) ( 0 ) ) ) ) ( VAR_4 VAR_4 ) ( psId final TYPE_2.Id psId ) ( VAR_2 final TYPE_4.Id VAR_2 ) ( db final TYPE_1.ReviewDb db ) ( change final TYPE_1.Change change ) 
( METHOD_1_return private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String   VAR_1.getName ( ) ; if ( name.METHOD_2 ( STRING_1 ) ) {   name.METHOD_3 ( 0 name.METHOD_4 ( CHAR_1 ) ) ; } int VAR_2   name.METHOD_4 ( CHAR_1 ) ; return 0 < VAR_2 ? name.METHOD_3 ( 0 VAR_2 ) : ; } ) (   VAR_1.getName ( ) ) ( VAR_1 TYPE_1 VAR_1 ) ( ) ( VAR_2 VAR_2   name.METHOD_4 ( CHAR_1 ) ) ( VAR_1 VAR_1 ) 
( METHOD_1_return public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) .METHOD_3 ( ) ) { com.google.gerrit.reviewdb.client.Account.Id id   METHOD_2 ( ) .METHOD_4 ( ) .getAccountId ( ) ; return id.equals ( getChange ( ) .METHOD_5 ( ) ) ; } return false ; } ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( STRING_1 STRING_1 ) ( project project ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( Assert org.junit.Assert ) ( info info   VAR_3.changes ( ) .create ( in ) .get ( ) ) ( in in   new TYPE_1.ChangeInfo ( ) ) 
( TYPE_1 TYPE_1 ) 
( VAR_5 VAR_5 ) ( METHOD_1_return protected TYPE_1.Result METHOD_1 ( TYPE_2 git java.lang.String VAR_1 java.lang.String VAR_2 java.lang.String VAR_3 ) throws java.io.IOException TYPE_3 { TYPE_4 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 ) ; return VAR_4.to ( git STRING_1 ) ; } ) ( VAR_4 VAR_4 ) ( git TYPE_2 git ) ( VAR_3 java.lang.String VAR_3 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_4 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 ) ) 
( cm final TYPE_2 cm ) ( METHOD_1_return TYPE_1 METHOD_1 ( final TYPE_2 cm ) { return new TYPE_1 ( ) { public void run ( ) { if ( cm.METHOD_2 ( ) .METHOD_3 ( ) ) { cm.METHOD_2 ( ) .METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) .METHOD_6 ( cm VAR_1 ) .run ( ) ; } } } ; } ) 
( METHOD_1_return private boolean METHOD_1 ( ) { if ( VAR_1.METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg   new java.lang.StringBuilder ( ) ; msg.append ( STRING_1 ) ; msg.append ( STRING_2 ) ; if ( VAR_2 ) { msg.append ( STRING_3 ) ; } else { msg.append ( STRING_4 ) ; msg.append ( STRING_5 ) ; } msg.append ( STRING_6 ) ; return VAR_1.METHOD_3 ( msg.toString ( ) ) ; } } ) 
( METHOD_1_return public org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return TYPE_1.getRevision ( ) ; } else if ( ! ( VAR_2.METHOD_2 ( ) ) ) { return null ; } try ( org.eclipse.jgit.lib.Repository repo   VAR_3.METHOD_3 ( METHOD_4 ( ) ) ) { TYPE_2 ref   repo.METHOD_5 ( ) .METHOD_6 ( TYPE_1.getRefName ( ) ) ; return ref !   null ? ref.METHOD_7 ( ) : null ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } ) 
( update update   METHOD_3 ( c VAR_1 ) ) ( TYPE_1 TYPE_1 ) ( update update ) ( Assert org.junit.Assert ) ( update update ) ( c c   TYPE_1.METHOD_2 ( project VAR_1 1 ) ) 
( VAR_3 VAR_3 ) ( VAR_3 VAR_3 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   STRING_1 + ( VAR_1.METHOD_2 ( ) ) ) ( VAR_3 VAR_3 ) 
( METHOD_1_return_line1_col273 return event ; ) ( event event   new TYPE_1 ( VAR_1 ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 event   new TYPE_1 ( VAR_1 ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey p : VAR_2.METHOD_2 ( ) ) { long size   VAR_3.get ( p ) .get ( ) ; event.METHOD_3 ( size p.get ( ) ) ; } return event ; } ) ( event event ) 
( VAR_1 TYPE_1 < TYPE_2.ChangeInfo > VAR_1 ) ( base java.lang.String base ) ( id int id ) ( VAR_2 VAR_2 ) ( TYPE_4 TYPE_4 ) ( commit java.lang.String commit ) ( VAR_2 VAR_2   TYPE_3.create ( ) ) ( TYPE_3 TYPE_3 ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( req TYPE_1 req ) ( req req ) ( TYPE_2 TYPE_2 ) ( req req ) ( VAR_1 VAR_1 ) ( values values   req.METHOD_3 ( STRING_1 ) ) ( METHOD_1_return private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 req ) { java.util.Set < java.lang.String > VAR_1   TYPE_2.METHOD_2 ( ) ; java.lang.String [ ] values   req.METHOD_3 ( STRING_1 ) ; if ( values !   null ) { VAR_1.METHOD_4 ( TYPE_3.METHOD_5 ( values ) ) ; } values   req.METHOD_3 ( STRING_2 ) ; if ( values !   null ) { VAR_1.METHOD_4 ( TYPE_3.METHOD_5 ( values ) ) ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col418 return VAR_1 ; ) 
( VAR_2 long [ ] VAR_2 ) ( METHOD_1_return private static java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.ObjectId [ ] VAR_1 long [ ] VAR_2 boolean [ ] VAR_3 ) { java.util.List < TYPE_1 > VAR_4   new java.util.ArrayList ( VAR_1.length ) ; for ( int i   0 ; i < ( VAR_1.length ) ; i++ ) { VAR_4.add ( new TYPE_1 ( VAR_1 [ i ] .name ( ) new TYPE_2 ( VAR_2 [ i ] ) VAR_3 [ i ] ) ) ; } return VAR_4 ; } ) ( METHOD_1_return_line1_col385 return VAR_4 ; ) ( VAR_3 boolean [ ] VAR_3 ) ( VAR_4 VAR_4 ) ( VAR_4 VAR_4   new java.util.ArrayList ( VAR_1.length ) ) ( VAR_1 org.eclipse.jgit.lib.ObjectId [ ] VAR_1 ) 
( TYPE_6 TYPE_6 ) ( VAR_3 VAR_3   TYPE_4.METHOD_3 ( ) .METHOD_4 ( VAR_1 ) ) ( TYPE_4 TYPE_4 ) ( VAR_2 final TYPE_2.NameKey VAR_2 ) ( VAR_1 final TYPE_1.Id VAR_1 ) ( e e   TYPE_4.METHOD_2 ( ) .get ( VAR_2 ) ) ( TYPE_4 TYPE_4 ) ( METHOD_1_return public static boolean METHOD_1 ( final TYPE_1.Id VAR_1 final TYPE_2.NameKey VAR_2 ) { final TYPE_3 e   TYPE_4.METHOD_2 ( ) .get ( VAR_2 ) ; if ( e    null ) { return false ; } final java.util.Set < TYPE_5.Id > VAR_3   TYPE_4.METHOD_3 ( ) .METHOD_4 ( VAR_1 ) ; return TYPE_6.METHOD_5 ( VAR_3 e VAR_4 ( ( short ) ( 1 ) ) true ) ; } ) 
( update update ) ( c c   TYPE_1.METHOD_2 ( project VAR_1.getAccountId ( ) 1 ) ) ( TYPE_1 TYPE_1 ) ( update update   METHOD_3 ( c VAR_1 ) ) ( Assert org.junit.Assert ) ( update update ) 
( ctx ctx ) ( ctx TYPE_1 ctx ) 
( notes TYPE_2 notes ) ( METHOD_1_return public TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk VAR_1 TYPE_2 notes com.google.gerrit.reviewdb.client.PatchSet patchSet ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ) { return METHOD_1 ( db VAR_1 notes patchSet ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2.error ( STRING_1 e ) ; return new TYPE_1 ( ) ; } } ) ( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) ( VAR_1 org.eclipse.jgit.revwalk.RevWalk VAR_1 ) 
( r r   METHOD_1 ( ) ) ( VAR_1 VAR_1   VAR_2.changes ( ) .id ( ( STRING_1 + ( r.getChangeId ( ) ) ) ) .METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) 
( id org.eclipse.jgit.lib.ObjectId id ) ( r r   VAR_1.get ( ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) + ( id.name ( ) ) ) ) ) ( VAR_1 VAR_1 ) ( Assert org.junit.Assert ) 
( VAR_2 VAR_2   new java.util.ArrayList < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_1.size ( ) ) ) ( VAR_1 VAR_1   METHOD_2 ( ) ) ( METHOD_1_return_line1_col532 return VAR_2 ; ) ( METHOD_1_return public java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_1 ( ) throws TYPE_1 com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Project > VAR_1   METHOD_2 ( ) ; final java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_2   new java.util.ArrayList < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_1.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Project p : VAR_1 ) { VAR_2.add ( p.METHOD_3 ( ) ) ; } return VAR_2 ; } ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) { final TYPE_1 user   VAR_1.METHOD_1 ( ) ; if ( user.METHOD_2 ( ) ) { TYPE_2 VAR_2   VAR_3.create ( ( ( TYPE_2 ) ( user ) ) .getAccountId ( ) ) ; VAR_2.METHOD_3 ( user.METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } ) ( user user ) ( METHOD_1_return_line1_col260 return user ; ) ( user user   VAR_1.METHOD_1 ( ) ) 
( VAR_2 VAR_2 ) ( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2 ) ( TYPE_2 TYPE_2 ) 
( VAR_2 VAR_2 ) ( VAR_4 VAR_4 ) 
( id final TYPE_1.Key id ) ( VAR_2 final TYPE_2 VAR_2 ) ( TYPE_3 TYPE_3 ) ( edit final boolean edit ) ( token final java.lang.String token ) ( VAR_1 final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( line final int line ) 
( VAR_1 VAR_1 ) ( config config ) ( VAR_2 VAR_2   config.METHOD_3 ( VAR_3 true ) ) ( config TYPE_2 config ) ( METHOD_1_return private java.util.Map < java.lang.String java.util.List < TYPE_1 > > METHOD_1 ( TYPE_2 config ) { java.util.Map < java.lang.String java.util.List < TYPE_1 > > VAR_1   TYPE_3.METHOD_2 ( ) ; java.util.Set < java.lang.String > VAR_2   config.METHOD_3 ( VAR_3 true ) ; for ( java.lang.String key : VAR_2 ) { if ( key.METHOD_4 ( STRING_1 ) ) { java.lang.String VAR_4   config.METHOD_5 ( VAR_3 null key ) ; VAR_1.put ( key METHOD_6 ( VAR_4 ) ) ; } } return VAR_1 ; } ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) ) ( METHOD_1_return_line1_col486 return VAR_1 ; ) 
( VAR_2 VAR_2   VAR_3.METHOD_1 ( project.METHOD_2 ( ) ) ) ( VAR_3 VAR_3 ) ( project com.google.gerrit.reviewdb.client.Project project ) ( VAR_1 boolean VAR_1 ) 
( p final com.google.gerrit.reviewdb.client.Project p ) ( VAR_1 VAR_1 ) 
( db org.eclipse.jgit.lib.Repository db ) ( id org.eclipse.jgit.lib.ObjectId id ) ( db db ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( get get   TYPE_3.METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String VAR_1 TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 get   TYPE_3.METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ; if ( VAR_2 !   null ) { get.METHOD_3 ( VAR_2 ) ; } return METHOD_4 ( get ) ; } ) ( TYPE_3 TYPE_3 ) 
( d TYPE_2 d ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_1 r TYPE_2 VAR_1 TYPE_2 d ) { VAR_2   TYPE_3.METHOD_2 ( VAR_1 ) ; TYPE_4 cfg   VAR_1.METHOD_3 ( ) ; if ( ( VAR_2.isEmpty ( ) ) & & ( ! ( VAR_1.METHOD_4 ( ) ) ) ) { VAR_2   TYPE_3.METHOD_2 ( d ) ; } return r ; } ) ( TYPE_3 TYPE_3 ) ( r TYPE_1 r ) ( METHOD_1_return_line1_col261 return r ; ) ( cfg cfg   VAR_1.METHOD_3 ( ) ) ( r r ) 
( METHOD_1_return private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( project ) ; org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c   rw.parseCommit ( id ) ; rw.METHOD_3 ( c ) ; return c ; } finally { } } ) ( id org.eclipse.jgit.lib.ObjectId id ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( cd cd   VAR_1.create ( db.get ( ) project ps.getId ( ) .getParentKey ( ) ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project com.google.gerrit.reviewdb.client.PatchSet ps ) throws TYPE_2 TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd   VAR_1.create ( db.get ( ) project ps.getId ( ) .getParentKey ( ) ) ; TYPE_4 ctl   cd.METHOD_2 ( ) ; return VAR_2.METHOD_3 ( ctl ps ) ; } ) ( ctl ctl   cd.METHOD_2 ( ) ) ( ps com.google.gerrit.reviewdb.client.PatchSet ps ) ( VAR_1 VAR_1 ) ( cd cd ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { try { VAR_1.METHOD_2 ( id ) ; index.METHOD_3 ( VAR_1.get ( id ) ) ; if ( ( VAR_2 ) !   null ) { VAR_2.METHOD_4 ( ( STRING_1 + VAR_3 ) ) ; } VAR_4.METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_5.METHOD_5 ( ) ; throw e ; } return null ; } ) 
( Assert org.junit.Assert ) ( in in   new TYPE_1 ( ) ) ( r r   VAR_3.put ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) in ) ) ( r r ) ( TRUE VAR_2.TRUE ) ( VAR_3 VAR_3 ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   METHOD_6 ( ) ) ( VAR_5 VAR_5 ) 
( VAR_2 VAR_2   VAR_3.get ( STRING_1 ) ) ( c TYPE_1.ChangeInfo c ) ( Truth com.google.common.truth.Truth ) ( VAR_1 int VAR_1 ) ( Truth com.google.common.truth.Truth ) ( VAR_3 VAR_3 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( b b   new TYPE_1 ( ) ) 
( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) ( VAR_2 TYPE_3 VAR_2 ) ( VAR_3 final TYPE_4 < TYPE_1 > VAR_3 ) ( java.lang.String ) ( VAR_4 VAR_4   METHOD_1 ( VAR_1 VAR_2 ) ) 
( VAR_2 VAR_2 ) ( input input   new TYPE_1 ( ) ) 
( rw rw ) ( rw rw ) ( rw final org.eclipse.jgit.revwalk.RevWalk rw ) ( VAR_2 final org.eclipse.jgit.revwalk.RevCommit VAR_2 ) ( VAR_1 final TYPE_1 VAR_1 ) ( c c ) ( VAR_3 final java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_3 ) 
( id id   psId.getParentKey ( ) ) ( r r ) ( VAR_1 VAR_1   METHOD_4 ( psId user.getId ( ) TYPE_3.METHOD_5 ( ) STRING_1 ) ) ( psId psId   r.METHOD_3 ( ) ) ( psId psId ) ( r r   METHOD_2 ( ) ) ( VAR_2 VAR_2 ) 
( VAR_2 VAR_2 ) ( account account   VAR_2.METHOD_2 ( VAR_1 ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 account   VAR_2.METHOD_2 ( VAR_1 ) ; TYPE_3 < TYPE_4 > VAR_3   account.METHOD_3 ( ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { java.lang.String key   VAR_4.METHOD_4 ( ) .getKey ( ) .get ( ) ; if ( key.METHOD_5 ( TYPE_5 ) ) { return new TYPE_1 ( key.METHOD_6 ( TYPE_5.length ( ) ) ) ; } } return null ; } ) ( VAR_3 VAR_3   account.METHOD_3 ( ) ) ( account account ) ( VAR_1 java.lang.String VAR_1 ) 
( change TYPE_1.ChangeInfo change ) ( event event   new TYPE_5 ( change revision VAR_1 VAR_2 VAR_3 ) ) ( VAR_1 TYPE_3 VAR_1 ) ( VAR_3 TYPE_4 VAR_3 ) ( revision TYPE_2 revision ) ( VAR_2 TYPE_3 VAR_2 ) 
( METHOD_1_return public TYPE_1 < TYPE_2.NameKey com.google.gerrit.reviewdb.client.Change.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2.NameKey com.google.gerrit.reviewdb.client.Change.Id > VAR_1   TYPE_4.create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1.put ( cd.change ( ) .METHOD_2 ( ) cd.getId ( ) ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_4.create ( ) ) ( TYPE_4 TYPE_4 ) ( METHOD_1_return_line1_col407 return VAR_1 ; ) 
( VAR_1 VAR_1   cfg.METHOD_2 ( STRING_1 STRING_2 0 ) ) ( cfg cfg ) ( VAR_2 VAR_2   p.METHOD_3 ( ) ) ( p TYPE_1 p ) ( METHOD_1_return private long METHOD_1 ( TYPE_1 p ) { long VAR_1   cfg.METHOD_2 ( STRING_1 STRING_2 0 ) ; long VAR_2   p.METHOD_3 ( ) ; if ( ( VAR_1 > 0 ) & & ( VAR_2 > 0 ) ) { return TYPE_2.METHOD_4 ( VAR_1 VAR_2 ) ; } else { return TYPE_2.METHOD_5 ( VAR_1 VAR_2 ) ; } } ) ( p p ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < ? > VAR_1 java.lang.String VAR_2 boolean VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4   VAR_1.git ( ) .METHOD_2 ( ) ; VAR_4.METHOD_3 ( VAR_3 ) ; VAR_4.METHOD_4 ( new TYPE_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) ) ) ; TYPE_6 < TYPE_1 > r   VAR_4.METHOD_5 ( ) ; return TYPE_7.METHOD_6 ( r ) ; } ) ( VAR_4 VAR_4   VAR_1.git ( ) .METHOD_2 ( ) ) ( TYPE_7 TYPE_7 ) ( VAR_4 VAR_4 ) ( r r   VAR_4.METHOD_5 ( ) ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_1 TYPE_2 < ? > VAR_1 ) ( VAR_3 boolean VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) 
( message VAR_4.get ( VAR_5 ) .commit.message ) ( Truth com.google.common.truth.Truth ) ( info info   METHOD_4 ( METHOD_5 ( VAR_3 ) ) ) ( message message   VAR_4.get ( VAR_5 ) .commit.message ) 
( c c ) ( c c ) ( VAR_1 VAR_1   c.METHOD_2 ( ) .METHOD_3 ( ) ) ( c c ) ( c final TYPE_1.Change c ) ( id id   c.getId ( ) .get ( ) ) 
( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ( VAR_1 ) !   null ) { try { VAR_1.METHOD_2 ( ) .METHOD_3 ( project ) .run ( ) ; } catch ( java.io.IOException e ) { VAR_2.error ( STRING_1 e ) ; return false ; } } return true ; } ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) 
( r r ) ( r r ) ( p TYPE_1 p ) ( r r   METHOD_3 ( STRING_1 ) ) ( r r ) ( r r ) 
( ctx TYPE_1 ctx ) ( VAR_2 VAR_2 ) ( ctx ctx ) 
( ref java.lang.String ref ) ( VAR_1 TYPE_1 VAR_1 ) ( status TYPE_2 status ) ( VAR_2 TYPE_3.Status VAR_2 ) ( event event   new TYPE_4 ( project ref TYPE_5.METHOD_2 ( VAR_1 ) status VAR_2 ) ) ( project java.lang.String project ) 
( row final int row ) 
( VAR_2 VAR_2 ) 
( VAR_1 VAR_1   TYPE_3.create ( ) ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey com.google.gerrit.server.query.change.ChangeData > VAR_1   TYPE_3.create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2.values ( ) ) { VAR_1.put ( cd.change ( ) .getProject ( ) cd ) ; } return VAR_1 ; } ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return_line1_col482 return VAR_1 ; ) ( VAR_1 VAR_1 ) 
( VAR_2 VAR_2   new TYPE_2 < > ( ) ) ( projectName projectName   METHOD_2 ( VAR_1 ) .get ( ) ) ( VAR_3 VAR_3   new TYPE_1 ( ) ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4 ) ( VAR_5 VAR_5   VAR_4.METHOD_3 ( ) .METHOD_4 ( ) .METHOD_6 ( ) ) ( VAR_4 VAR_4 ) ( projectName projectName ) ( Truth com.google.common.truth.Truth ) 
( VAR_2 VAR_2 ) ( VAR_1 int VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4   VAR_2.METHOD_3 ( ) ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( ) ) 
( rsp rsp ) ( out out ) ( out out ) ( out out ) ( rsp rsp ) ( out out ) ( rsp final TYPE_2.HttpServletResponse rsp ) ( req final TYPE_1 req ) ( rsp rsp ) ( out out ) ( out out   rsp.METHOD_4 ( ) ) ( out out ) 
( Assert org.junit.Assert ) 
( VAR_1 java.lang.String VAR_1 ) ( TYPE_3 TYPE_3 ) ( n n   TYPE_4.METHOD_3 ( VAR_1 ) ) ( VAR_2 TYPE_1 < TYPE_2 > VAR_2 ) ( TYPE_4 TYPE_4 ) ( in in   TYPE_3.METHOD_2 ( ) ) 
( VAR_1 VAR_1   repo.METHOD_2 ( ) ) ( METHOD_1_return private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { TYPE_1 VAR_1   repo.METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id   VAR_1.insert ( VAR_2 new byte [ ] { } ) ; VAR_1.METHOD_3 ( ) ; return id ; } finally { VAR_1.METHOD_4 ( ) ; } } ) ( repo final org.eclipse.jgit.lib.Repository repo ) ( repo repo ) 
( info info ) ( info info ) ( VAR_2 VAR_2   info.METHOD_2 ( ) ) ( info TYPE_1 info ) 
( TYPE_2 TYPE_2 ) ( METHOD_1_return public boolean METHOD_1 ( ) { TYPE_1 VAR_1   TYPE_2.METHOD_2 ( VAR_2.METHOD_3 ( ) .METHOD_4 ( ) null ) ; return ( VAR_1 !   null ) & & ( VAR_3.METHOD_5 ( ) .equals ( VAR_1.getProject ( ) .METHOD_5 ( ) ) ) ; } ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( VAR_2.METHOD_3 ( ) .METHOD_4 ( ) null ) ) 
( b b ) ( toString_return_line1_col306 return b.toString ( ) ; ) ( b b   new java.lang.StringBuilder ( ) ) ( toString_return public java.lang.String toString ( ) { java.lang.StringBuilder b   new java.lang.StringBuilder ( ) ; b.append ( STRING_1 ) ; if ( VAR_1.METHOD_1 ( ) .METHOD_2 ( ) .METHOD_3 ( ) ) { b.append ( ( ( STRING_2 + ( VAR_1.METHOD_1 ( ) .METHOD_2 ( ) .get ( ) ) ) + STRING_3 ) ) ; } return b.toString ( ) ; } ) ( nodeCall_toString_return b.toString ( ) ) ( b b ) 
( METHOD_1_return protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) !   null ) { final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( METHOD_2 ( ) ) ; r.append ( change.getChangeId ( ) ) ; return r.toString ( ) ; } return null ; } ) 
( db TYPE_1.ReviewDb db ) ( VAR_1 java.util.List < TYPE_2 > VAR_1 ) ( VAR_2 TYPE_3 VAR_2 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( ) { switch ( TYPE_2.METHOD_2 ( VAR_1 ) ) { case VAR_2 : return TYPE_3.METHOD_3 ( TYPE_4.of ( ) VAR_3 ) ; case VAR_4 : return TYPE_5.METHOD_3 ( TYPE_4.of ( ) VAR_3 ) ; default : throw new TYPE_6 ( STRING_1 ) ; } } ) 
( VAR_5 VAR_5   TYPE_3.METHOD_2 ( query ) ) ( VAR_1 int VAR_1 ) ( VAR_2 int VAR_2 ) ( VAR_3 java.util.Set < TYPE_1 > VAR_3 ) ( TYPE_3 TYPE_3 ) ( TYPE_3 TYPE_3 ) ( query java.lang.String query ) ( VAR_5 VAR_5 ) ( VAR_4 TYPE_2 < TYPE_3 > VAR_4 ) 
( METHOD_1_return private boolean METHOD_1 ( ) { try ( org.eclipse.jgit.lib.Repository git   VAR_1.METHOD_2 ( getProject ( ) .METHOD_3 ( ) ) ) { TYPE_1 ref   git.METHOD_4 ( ) .METHOD_5 ( VAR_2 ) ; if ( ( ref    null ) || ( ( ref.METHOD_6 ( ) )    null ) ) { return true ; } return ! ( ref.METHOD_6 ( ) .equals ( config.getRevision ( ) ) ) ; } catch ( java.io.IOException VAR_3 ) { return true ; } } ) 
( TYPE_4 TYPE_4 ) ( view view   TYPE_4.METHOD_2 ( ) ) ( res res   new TYPE_5 ( ) ) ( view view ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException TYPE_2 { TYPE_3 < TYPE_1 > view   TYPE_4.METHOD_2 ( ) ; TYPE_5 res   new TYPE_5 ( ) ; METHOD_3 ( VAR_1 view res ) ; METHOD_4 ( ( STRING_1 + ( res.getStatus ( ) ) ) ( ( ( res.getStatus ( ) ) < INT_1 ) || ( ( res.getStatus ( ) ) >   INT_2 ) ) ) ; return view.get ( ) ; } ) 
( b b   new TYPE_1 ( ) ) 
( p p ) ( VAR_2 VAR_2 ) ( VAR_10 VAR_10 ) ( VAR_6 VAR_6 ) ( VAR_8 VAR_8 ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( ) { TYPE_1 p   new TYPE_1 ( ) ; VAR_1   VAR_2 ; VAR_3   true ; VAR_4   true ; VAR_5   VAR_6 ; VAR_7   VAR_8 ; VAR_9   VAR_10 ; VAR_11   null ; VAR_12   VAR_13 ; VAR_14   VAR_15 ; VAR_16   VAR_17 ; VAR_18   false ; VAR_19   true ; VAR_20   false ; VAR_21   VAR_22 ; VAR_23   true ; VAR_24   false ; VAR_25   true ; VAR_26   false ; VAR_27   VAR_28 ; return p ; } ) ( VAR_15 VAR_15 ) ( METHOD_1_return_line1_col401 return p ; ) ( VAR_22 VAR_22 ) ( VAR_28 VAR_28 ) ( VAR_17 VAR_17 ) ( VAR_13 VAR_13 ) ( p p   new TYPE_1 ( ) ) 
( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( TYPE_3 TYPE_3 ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1 ) 
( TYPE_1 TYPE_1 ) ( u u   util.user ( VAR_3 ) ) ( util util ) ( TYPE_1 TYPE_1 ) 
( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { java.util.List < TYPE_1 > result   new TYPE_4 ( args.rw VAR_2 VAR_3 ) .METHOD_1 ( VAR_1 ) ; java.util.Collections.METHOD_1 ( result VAR_4 ) ; return result ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) 
( VAR_2 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( VAR_1 TYPE_1 VAR_1 ) 
( change com.google.gerrit.reviewdb.client.Change change ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( change.getId ( ) ) ) ( VAR_1 TYPE_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_3 VAR_3   VAR_1.METHOD_3 ( repo VAR_2 ) ) 
( METHOD_1_return_line1_col575 return VAR_1 ; ) ( VAR_1 VAR_1   VAR_2.get ( ) .changes ( ) .METHOD_2 ( rsrc.getChange ( ) .getId ( ) new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change.getStatus ( ) )    ( VAR_3 ) ) { change.METHOD_3 ( VAR_4 ) ; TYPE_3.METHOD_4 ( change ) ; } return change ; } } ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change VAR_1   VAR_2.get ( ) .changes ( ) .METHOD_2 ( rsrc.getChange ( ) .getId ( ) new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change.getStatus ( ) )    ( VAR_3 ) ) { change.METHOD_3 ( VAR_4 ) ; TYPE_3.METHOD_4 ( change ) ; } return change ; } } ) ; return VAR_1 ; } ) ( rsrc TYPE_1 rsrc ) ( VAR_2 VAR_2 ) 
( req req   ( ( TYPE_5 ) ( VAR_1 ) ) ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_3 TYPE_3 VAR_3 ) ( VAR_1 TYPE_1 VAR_1 ) ( rsp rsp   new TYPE_7 ( req ( ( TYPE_8.HttpServletResponse ) ( VAR_2 ) ) ) ) 
( r r   VAR_2.METHOD_2 ( STRING_2 VAR_1 ) ) ( STRING_1 STRING_1 ) ( VAR_1 VAR_1   new TYPE_1.ChangeInfo ( ) ) ( Assert org.junit.Assert ) ( project project ) ( Assert org.junit.Assert ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) ( c c   db.get ( ) .changes ( ) .get ( changeId ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws TYPE_2 com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   db.get ( ) .changes ( ) .get ( changeId ) ; if ( c    null ) { throw TYPE_3.error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1.create ( c ) ; } ) ( db db ) ( VAR_1 VAR_1 ) 
( METHOD_1_return private java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( ) { com.google.gerrit.reviewdb.server.ReviewDb db   null ; try { db   VAR_1.METHOD_2 ( ) ; return db.changes ( ) .METHOD_3 ( ) .METHOD_4 ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2.METHOD_5 ( ( STRING_1 + ( e.getMessage ( ) ) ) ) ; return java.util.Collections.METHOD_6 ( ) ; } finally { if ( db !   null ) { db.close ( ) ; } } } ) ( db db   null ) 
( VAR_3 java.lang.String VAR_3 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) 
( rw rw   new org.eclipse.jgit.revwalk.RevWalk ( repo.METHOD_2 ( ) ) ) ( METHOD_1_return private java.util.List < ? > METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( repo.METHOD_2 ( ) ) ; try { return TYPE_1.METHOD_3 ( METHOD_4 ( ) new TYPE_2 ( TYPE_2.METHOD_5 ( ) ) rw VAR_1 ) ; } finally { rw.METHOD_6 ( ) ; } } ) 
( VAR_1 TYPE_2 VAR_1 ) ( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 TYPE_4 TYPE_5 java.lang.Exception { if ( ( format )    ( VAR_2 ) ) { TYPE_6 VAR_3   new TYPE_6 ( ) ; display ( VAR_3 ) ; return TYPE_7.create ( VAR_3.METHOD_1 ( ) ) .METHOD_2 ( STRING_1 ) .METHOD_3 ( STRING_2 ) ; } format   VAR_4 ; return display ( null ) ; } ) ( VAR_4 VAR_4 ) 
( changes changes   METHOD_2 ( id.METHOD_3 ( ) ) ) ( id TYPE_3 id ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 id ) throws TYPE_4 com.google.gwtorm.server.OrmException TYPE_5 { java.util.List < com.google.gerrit.reviewdb.client.Change > changes   METHOD_2 ( id.METHOD_3 ( ) ) ; if ( ( changes.size ( ) ) !   1 ) { throw new TYPE_4 ( id ) ; } TYPE_6 VAR_2 ; try { VAR_2   VAR_3.METHOD_4 ( changes.get ( 0 ) ) ; } catch ( TYPE_7 e ) { throw new TYPE_4 ( id ) ; } return new TYPE_1 ( VAR_2 ) ; } ) ( VAR_2 VAR_2 ) 
( Collections java.util.Collections ) ( VAR_1 VAR_1   new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ( ( reviewers.size ( ) ) + ( VAR_2.size ( ) ) ) ) ) ( METHOD_1_return public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) { final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1   new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ( ( reviewers.size ( ) ) + ( VAR_2.size ( ) ) ) ) ; VAR_1.METHOD_2 ( reviewers ) ; VAR_1.METHOD_2 ( VAR_2 ) ; return java.util.Collections.METHOD_3 ( VAR_1 ) ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( u u ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c   TYPE_1.METHOD_2 ( project VAR_1 ) ; db.changes ( ) .insert ( java.util.Collections.singleton ( c ) ) ; TYPE_2 u   VAR_2.create ( VAR_3.METHOD_3 ( c VAR_4.create ( VAR_1 ) ) ) ; u.METHOD_4 ( c.METHOD_5 ( ) ) ; u.METHOD_6 ( c.METHOD_7 ( ) .get ( ) ) ; u.commit ( ) ; return c ; } ) ( METHOD_1_return_line1_col447 return c ; ) ( u u ) ( db db ) ( u u ) ( c c ) ( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2 ) ( c c   TYPE_1.METHOD_2 ( project VAR_1 ) ) ( u u   VAR_2.create ( VAR_3.METHOD_3 ( c VAR_4.create ( VAR_1 ) ) ) ) 
( e TYPE_1 < java.lang.String > e ) ( VAR_1 VAR_1   e.getValue ( ) ) ( e e ) 
( TYPE_3 TYPE_3 ) ( TYPE_3 TYPE_3 ) ( ref java.lang.String ref ) ( TYPE_3 TYPE_3 ) ( to_return public TYPE_1 to ( java.lang.String ref ) throws java.io.IOException TYPE_2 { TYPE_3.add ( git VAR_1 VAR_2 ) ; changeId   TYPE_3.METHOD_1 ( git VAR_3.METHOD_2 ( ) VAR_4 ) ; return TYPE_3.METHOD_3 ( git ref ) ; } ) 
( VAR_1 TYPE_1 VAR_1 ) 
( METHOD_1_return_line1_col274 return size ; ) ( value TYPE_2 value ) ( size size   ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ) ( key TYPE_1 key ) ( size size ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 key TYPE_2 value ) { int size   ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ; for ( TYPE_3 e : value.METHOD_2 ( ) ) { size +  e.METHOD_1 ( ) ; } return size ; } ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( new TYPE_3 ( ) ) ) ( VAR_1 VAR_1 ) ( VAR_7 VAR_7 ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2 ) ( VAR_3 VAR_3 ) ( VAR_6 VAR_6 ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_2.METHOD_2 ( VAR_1.METHOD_3 ( ) VAR_1.getRefName ( ) ) ) { return METHOD_4 ( VAR_1.commit ) ; } else { return java.util.Collections.METHOD_5 ( ) ; } } ) 
( VAR_1 VAR_1   new TYPE_3 < > ( ) ) ( METHOD_1_return private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException TYPE_1 { java.util.Set < TYPE_2 > VAR_1   new TYPE_3 < > ( ) ; VAR_1.add ( TYPE_4.METHOD_2 ( VAR_2 repo ) ) ; VAR_1.add ( TYPE_4.METHOD_2 ( VAR_3 repo ) ) ; return TYPE_4.METHOD_1 ( repo STRING_1 VAR_1 ) ; } ) ( VAR_1 VAR_1 ) ( TYPE_4 TYPE_4 ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( project result.project ) ( VAR_10 VAR_10 ) ( TYPE_2 TYPE_2 ) ( result final TYPE_1 result ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 final TYPE_2 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) 
( err java.lang.String err ) ( e java.lang.Exception e ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String err java.lang.Exception e ) { if ( VAR_1 ) { if ( e    null ) { VAR_2.error ( err ) ; } else { VAR_2.error ( err e ) ; } return TYPE_2.METHOD_2 ( ) ; } else { return TYPE_2.METHOD_3 ( err ) ; } } ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 res java.lang.String VAR_1 java.lang.String VAR_2 ) { TYPE_1 VAR_3   new TYPE_1 ( TYPE_3.create ( res ) .METHOD_2 ( ) true VAR_2 ) ; if ( VAR_1 !   null ) { VAR_3.METHOD_3 ( VAR_1 ) ; } return VAR_3 ; } ) ( METHOD_1_return_line1_col258 return VAR_3 ; ) ( res TYPE_2 res ) ( VAR_3 VAR_3   new TYPE_1 ( TYPE_3.create ( res ) .METHOD_2 ( ) true VAR_2 ) ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 VAR_3 ) 
( METHOD_1_return private static java.lang.String METHOD_1 ( final long VAR_1 final long VAR_2 ) { if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) .format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) .format ( new TYPE_2 ( VAR_2 ) ) ; } ) ( VAR_1 final long VAR_1 ) ( VAR_2 final long VAR_2 ) 
( n n   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) 
( VAR_6 VAR_6 ) ( p TYPE_1 p ) ( VAR_1 VAR_1 ) ( p p ) ( VAR_9 VAR_9 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_1 p TYPE_1 VAR_1 TYPE_2 VAR_2 ) { VAR_3   VAR_4 ; VAR_5   VAR_6 ; VAR_7   VAR_1 ; VAR_8   VAR_9.METHOD_2 ( ) ; VAR_10   ++ ( VAR_11 ) ; VAR_12.METHOD_3 ( VAR_2 ) ; return p ; } ) ( METHOD_1_return_line1_col222 return p ; ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_12 VAR_12 ) ( VAR_4 VAR_4 ) 
( VAR_5 VAR_5   METHOD_2 ( VAR_1 ) ) ( VAR_4 int VAR_4 ) ( VAR_9 VAR_9 ) ( VAR_3 int VAR_3 ) ( VAR_2 int VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_6 VAR_6 ) 
( VAR_3 VAR_3 ) ( Assert org.junit.Assert ) ( db db ) ( Assert org.junit.Assert ) ( a a   VAR_3.METHOD_3 ( db notes VAR_1 ) ) ( c c   db.changes ( ) .get ( VAR_1.getParentKey ( ) ) ) ( VAR_2 VAR_2 ) ( Assert org.junit.Assert ) ( notes notes   VAR_2.create ( c ) .METHOD_2 ( ) ) ( VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) 
(   STRING_1 ) ( STRING_2 STRING_2 ) ( TYPE_2 TYPE_2 ) ( value value   STRING_2 ) ( STRING_1 STRING_1 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( value ) ) 
( values values   new java.util.ArrayList < > ( ) ) ( t t ) 
( r r ) ( r r ) ( VAR_1 VAR_1   git.METHOD_2 ( ) .METHOD_3 ( STRING_1 ) .METHOD_4 ( ) ) ( r r   METHOD_5 ( STRING_7 STRING_8 STRING_4 STRING_9 ) ) ( VAR_2 VAR_2 ) ( r r ) ( git git ) 
( TYPE_1 TYPE_1 ) ( VAR_4 VAR_4 ) ( TYPE_1 TYPE_1 ) ( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) ( TYPE_1 TYPE_1 ) ( VAR_3 VAR_3 ) 
( VAR_2 VAR_2   ( ( TYPE_2 ) ( VAR_1 ) ) ) ( VAR_1 TYPE_1 VAR_1 ) ( equals_return public boolean equals ( TYPE_1 VAR_1 ) { if ( ( VAR_1    null ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } TYPE_2 VAR_2   ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ( this.VAR_3 ) !   ( VAR_4 ) ) || ( ( this.VAR_5 ) !   ( VAR_6 ) ) ) { return false ; } return true ; } ) 
( METHOD_1_return private static java.util.Set < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw TYPE_1 < TYPE_2 > refs ) throws java.io.IOException TYPE_3 { java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_1   TYPE_4.METHOD_2 ( ) ; for ( TYPE_2 r : refs ) { try { VAR_1.add ( rw.parseCommit ( r.METHOD_3 ( ) ) ) ; } catch ( TYPE_5 VAR_2 ) { } } return VAR_1 ; } ) ( VAR_1 VAR_1   TYPE_4.METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col404 return VAR_1 ; ) ( TYPE_4 TYPE_4 ) ( refs TYPE_1 < TYPE_2 > refs ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) 
( METHOD_1_return private com.google.gerrit.server.query.change.ChangeData METHOD_1 ( ) { if ( ( cd )    null ) { com.google.gerrit.reviewdb.server.ReviewDb VAR_1   db ( ) ; TYPE_1.METHOD_2 ( ( VAR_1 !   null ) STRING_1 ) ; cd   VAR_2.create ( VAR_1 METHOD_3 ( ) ) ; } return cd ; } ) ( cd cd ) ( METHOD_1_return_line1_col278 return cd ; ) 
( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super.equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) .equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) .METHOD_1 ( ) ) ) ; } ) ( VAR_1 final TYPE_1 VAR_1 ) 
( r r   METHOD_2 ( ) ) 
( com.google.gerrit.reviewdb.client.Project.NameKey ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey ) { if ( VAR_1.isEmpty ( ) ) { return true ; } else { java.lang.String projectName   name.get ( ) ; for ( java.lang.String VAR_2 : VAR_1 ) { if ( METHOD_2 ( projectName VAR_2 ) ) { return true ; } } } return false ; } ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 TYPE_1 VAR_1 ) ( rw rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) 
( METHOD_1_return private boolean METHOD_1 ( ) { if ( ( VAR_1.length ( ) )    0 ) { return false ; } if ( VAR_2.isEmpty ( ) ) { return false ; } if ( ( ( VAR_2.size ( ) )    1 ) & & ( VAR_2.contains ( VAR_3 ) ) ) { return false ; } return true ; } ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( change change   new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change.Key ( STRING_1 ) new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) new com.google.gerrit.reviewdb.client.Account.Id ( 2 ) new TYPE_2.NameKey ( VAR_2 STRING_2 ) TYPE_3.METHOD_2 ( ) ) ) ( VAR_1 VAR_1 ) 
( result final java.util.List < TYPE_1 > result ) 
( VAR_3 TYPE_4 < TYPE_1 > VAR_3 ) ( VAR_1 TYPE_3 VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_4 VAR_4   new TYPE_5 < TYPE_1 > ( VAR_5 VAR_3 ) ) 
( VAR_1 VAR_1   TYPE_1.METHOD_2 ( ) ) ( TYPE_1 TYPE_1 ) 
( d d   new TYPE_1 ( ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 d   new TYPE_1 ( ) ; VAR_1   c.getId ( ) .toString ( ) ; d.id   c.getKey ( ) .toString ( ) ; d.revision   ps.getRevision ( ) .get ( ) ; d.ref   ps.getRefName ( ) ; return d ; } ) ( ps com.google.gerrit.reviewdb.client.PatchSet ps ) ( ps ps ) ( d d ) ( c com.google.gerrit.reviewdb.client.Change c ) ( ps ps ) ( c c ) ( c c ) ( METHOD_1_return_line1_col329 return d ; ) 
( TYPE_2 TYPE_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( TYPE_4 TYPE_4 ) ( TYPE_5 TYPE_5 ) ( key key   b.METHOD_5 ( ) ) ( b b ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( ) ) ( METHOD_1_return private byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { final long VAR_2   TYPE_2.METHOD_2 ( ) ; final TYPE_3 b   new TYPE_3 ( ) ; TYPE_4.METHOD_3 ( ) .METHOD_4 ( b VAR_1 ) ; final byte [ ] key   b.METHOD_5 ( ) ; return TYPE_5.METHOD_4 ( TYPE_6.METHOD_6 ( VAR_2 key ) ) .METHOD_5 ( ) ; } ) ( b b   new TYPE_3 ( ) ) 
( revision java.lang.String revision ) ( VAR_1 VAR_1   repo.METHOD_2 ( TYPE_2.METHOD_3 ( revision VAR_2 ) ) ) ( repo repo ) ( METHOD_1_return private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo java.lang.String revision ) throws TYPE_1 java.io.IOException { org.eclipse.jgit.lib.ObjectId VAR_1   repo.METHOD_2 ( TYPE_2.METHOD_3 ( revision VAR_2 ) ) ; if ( VAR_1    null ) { throw new TYPE_1 ( ) ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col328 return VAR_1 ; ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 VAR_1 ) 
( db db ) ( VAR_3 VAR_3 ) ( c c   db.changes ( ) .get ( VAR_1.getParentKey ( ) ) ) ( VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   db.changes ( ) .get ( VAR_1.getParentKey ( ) ) ; TYPE_1 notes   VAR_2.create ( c ) .METHOD_2 ( ) ; return VAR_3.METHOD_1 ( db notes VAR_1 ) ; } ) ( VAR_2 VAR_2 ) ( notes notes   VAR_2.create ( c ) .METHOD_2 ( ) ) 
( VAR_6 VAR_6   util.user ( VAR_1 VAR_5 VAR_3 ) ) ( VAR_4 VAR_4   util.user ( VAR_1 VAR_5 ) ) ( util util ) ( util util ) ( TYPE_1 TYPE_1 ) 
( Assert org.junit.Assert ) ( VAR_2 VAR_2 ) ( Assert org.junit.Assert ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.changes ( ) .query ( STRING_1 ) .get ( ) ) 
( VAR_1 TYPE_2 < java.lang.String > VAR_1 ) ( ps ps ) ( update update ) ( db db ) ( update TYPE_1 update ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( ps com.google.gerrit.reviewdb.client.PatchSet ps ) 
( id id   org.eclipse.jgit.lib.ObjectId.METHOD_2 ( cd.METHOD_3 ( ) .getRevision ( ) .get ( ) ) ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.ObjectId id   org.eclipse.jgit.lib.ObjectId.METHOD_2 ( cd.METHOD_3 ( ) .getRevision ( ) .get ( ) ) ; try ( org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_4 ( cd.change ( ) .getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk rw   TYPE_1.METHOD_5 ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit   rw.parseCommit ( id ) ; return ( commit.METHOD_6 ( ) ) > 1 ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( e ) ; } } ) ( ObjectId org.eclipse.jgit.lib.ObjectId ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String final java.lang.String value ) throws TYPE_3 { final TYPE_4 VAR_1   VAR_2.get ( ) ; if ( VAR_1    null ) { throw TYPE_5.error ( ( ( ( STRING_1 + ) + STRING_2 ) + value ) ) ; } return VAR_1.create ( this value ) ; } ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( final java.lang.String ) ( value final java.lang.String value ) ( VAR_1 VAR_1   VAR_2.get ( ) ) 
( VAR_4 VAR_4   VAR_5.METHOD_4 ( db VAR_1 new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1.getChangeId ( ) psId ) ) ) ( VAR_5 VAR_5 ) ( VAR_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) ( changeId java.lang.String changeId ) ( VAR_1 VAR_1   VAR_2.create ( db TYPE_2.METHOD_2 ( VAR_3.get ( ) .METHOD_3 ( changeId ) ) .change ( ) ) ) ( psId int psId ) 
( VAR_1 VAR_1 ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db org.eclipse.jgit.revwalk.RevWalk rw org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo   METHOD_2 ( ) ; try { return METHOD_3 ( repo db rw commit repo.METHOD_4 ( ) .values ( ) ) ; } finally { repo.close ( ) ; } } catch ( java.io.IOException e ) { java.lang.String msg   java.lang.String.format ( STRING_1 commit.name ( ) getProject ( ) .METHOD_5 ( ) ) ; VAR_1.error ( msg e ) ; return false ; } } ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( cd cd ) ( id com.google.gerrit.reviewdb.client.Change.Id id ) ( cd cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null null null null id ) ) ( METHOD_1_return public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id id int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null null null null id ) ; VAR_1   new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id currentPatchSetId ) ) ; return cd ; } ) ( currentPatchSetId int currentPatchSetId ) ( METHOD_1_return_line1_col523 return cd ; ) 
( VAR_2 VAR_2   new TYPE_2 ( server user ) ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) ( TYPE_3 TYPE_3 ) 
( res TYPE_2.HttpServletResponse res ) ( out out ) ( VAR_1 int VAR_1 ) ( out out ) ( req TYPE_1 req ) ( res res ) ( message java.lang.String message ) ( res res ) ( out out   res.METHOD_5 ( ) ) 
( view view ) ( e TYPE_1 < TYPE_2 > e ) ( VAR_1 VAR_1 ) 
( account TYPE_2 account ) ( METHOD_1_return public java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( TYPE_2 account ) throws TYPE_3 TYPE_4 { try { return VAR_1.METHOD_2 ( ) .apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_5 | java.io.IOException e ) { throw new TYPE_4 ( e ) ; } } ) 
( event TYPE_1 event ) 
( r r   VAR_1.delete ( ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) + ( branch.METHOD_4 ( ) ) ) ) ) ( VAR_1 VAR_1 ) ( Assert org.junit.Assert ) ( r r ) 
( VAR_1 VAR_1   METHOD_3 ( changeId ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( changeId changeId   METHOD_2 ( ( STRING_1 ) ) .getChangeId ( ) ) ( Truth com.google.common.truth.Truth ) 
( METHOD_1_return_line1_col413 return VAR_1 ; ) ( user TYPE_2 user ) ( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) !   null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1.METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) !   null ) { VAR_1   VAR_2.METHOD_3 ( change user ) ; } else { VAR_1   VAR_2.METHOD_3 ( VAR_3 user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } ) 
( VAR_1 int VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_4 java.lang.String VAR_4 ) ( VAR_5 VAR_5 ) ( java.lang.String ) ( VAR_5 java.lang.String [ ] VAR_5 ) ( TYPE_1 TYPE_1 ) ( VAR_2 int VAR_2 ) ( VAR_3 java.lang.String VAR_3 ) 
( row final int row ) ( VAR_1 final boolean VAR_1 ) 
( METHOD_1_return public boolean METHOD_1 ( ) { if ( getChange ( ) .getStatus ( ) .METHOD_2 ( ) ) { return ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) .METHOD_3 ( ) ) ) || ( METHOD_5 ( ) .METHOD_3 ( ) ) ) || ( METHOD_6 ( ) .METHOD_7 ( ) .METHOD_8 ( ) ) ; } return false ; } ) 
( id org.eclipse.jgit.lib.ObjectId id ) ( walk org.eclipse.jgit.revwalk.RevWalk walk ) ( walk walk ) 
( VAR_2 java.lang.String VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) 
( TYPE_4 TYPE_4 ) ( VAR_3 VAR_3   METHOD_2 ( VAR_1 ) ) ( TYPE_5 TYPE_5 ) ( TYPE_5 TYPE_5 ) ( VAR_4 VAR_4   TYPE_4.METHOD_3 ( VAR_2 ) ) ( VAR_2 final TYPE_2 VAR_2 ) ( VAR_5 VAR_5   TYPE_5.METHOD_4 ( VAR_3 ) ) ( VAR_1 final TYPE_1 VAR_1 ) ( TYPE_4 TYPE_4 ) ( TYPE_5 TYPE_5 ) 
( java.lang.String ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public java.lang.String METHOD_1 ( java.lang.String java.lang.String VAR_1 ) { if ( VAR_1    null ) { return cfg.METHOD_1 ( VAR_2 VAR_3 ) ; } else { return TYPE_1.METHOD_2 ( cfg.METHOD_1 ( VAR_2 VAR_3 ) VAR_1 ) ; } } ) 
( VAR_3 int VAR_3 ) ( VAR_10 VAR_10 ) ( VAR_8 VAR_8 ) ( VAR_8 VAR_8 ) ( VAR_2 VAR_2 ) ( VAR_4 TYPE_3 VAR_4 ) ( VAR_1 TYPE_1.Key VAR_1 ) ( VAR_8 VAR_8 ) ( VAR_10 VAR_10 ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_10 VAR_10 ) 
( add add ) ( account TYPE_2 account ) ( delete java.util.List < java.lang.String > delete ) ( add java.util.List < java.lang.String > add ) ( METHOD_1_return public java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( TYPE_2 account java.util.List < java.lang.String > add java.util.List < java.lang.String > delete ) throws TYPE_3 TYPE_4 { TYPE_5 in   new TYPE_5 ( ) ; in.add   add ; in.delete   delete ; try { return VAR_1.apply ( account in ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_7 e ) { throw new TYPE_4 ( e ) ; } } ) ( in in   new TYPE_5 ( ) ) ( delete delete ) 
( VAR_2 VAR_2   repo.METHOD_3 ( repo.file ( STRING_2 VAR_1 ) ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( repo repo ) ( repo repo ) ( VAR_1 VAR_1   repo.METHOD_2 ( STRING_1 ) ) 
( id id   TYPE_3.getChangeId ( VAR_3 VAR_2 ) ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( ) .METHOD_3 ( STRING_1 ) .METHOD_4 ( ) ) ( b b   VAR_3.METHOD_5 ( STRING_1 ) ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return protected TYPE_1 < ? > .VAR_1 METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_2   VAR_3.METHOD_2 ( ) .METHOD_3 ( STRING_1 ) .METHOD_4 ( ) ; TYPE_1 < ? > .VAR_1 b   VAR_3.METHOD_5 ( STRING_1 ) ; TYPE_2 < java.lang.String > id   TYPE_3.getChangeId ( VAR_3 VAR_2 ) ; if ( id.METHOD_6 ( ) ) { b.METHOD_7 ( id.get ( ) .METHOD_8 ( 1 ) ) ; } else { b.METHOD_7 ( ) ; } return b ; } ) ( VAR_3 VAR_3 ) ( METHOD_1_return_line1_col430 return b ; ) ( b b ) 
( VAR_1 TYPE_1 VAR_1 ) ( values java.lang.String [ ] values ) ( key java.lang.String key ) 
( METHOD_1_return public boolean METHOD_1 ( ) { return ( ( ( ( ( user ) instanceof TYPE_1 ) || ( user.METHOD_2 ( group.METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) || ( user.METHOD_5 ( ) .METHOD_6 ( ) ) ) || ( VAR_1.METHOD_7 ( group.METHOD_3 ( ) ) ) ; } ) 
( TYPE_2 TYPE_2 ) ( url_return private static java.lang.String url ( com.google.gerrit.reviewdb.client.PatchSet.Id ps TYPE_1 info ) { return TYPE_2.METHOD_1 ( null ps info.path ( ) ( ( info.METHOD_2 ( ) )    ( VAR_1 ) ? VAR_2 : VAR_3 ) info.line ( ) ) ; } ) ( ps com.google.gerrit.reviewdb.client.PatchSet.Id ps ) ( info TYPE_1 info ) 
( update update ) ( update update ) ( c c   METHOD_2 ( ) ) ( Assert org.junit.Assert ) ( notes notes   METHOD_6 ( c ) ) ( VAR_3 VAR_3   notes.METHOD_7 ( ) ) ( notes notes ) ( update update   METHOD_3 ( c VAR_1 ) ) 
( VAR_1 VAR_1 ) ( msg msg   VAR_1.getValue ( ) .METHOD_2 ( ) ) ( msg msg ) ( METHOD_1_return private boolean METHOD_1 ( ) { java.lang.String msg   VAR_1.getValue ( ) .METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { return ( msg.length ( ) ) > 0 ; } return msg.equals ( ( ( VAR_2.message ( ) ) !   null ? VAR_2.message ( ) .METHOD_2 ( ) : STRING_1 ) ) ; } ) 
( METHOD_1_return private java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > result   new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ; for ( java.lang.String email : VAR_1 ) { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_2   VAR_3.METHOD_2 ( email ) ; result.METHOD_3 ( VAR_2 ) ; } return result ; } ) ( METHOD_1_return_line1_col503 return result ; ) ( VAR_1 java.util.Set < java.lang.String > VAR_1 ) ( result result   new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ) ( result result ) 
( ps final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) ( TYPE_1 TYPE_1 ) ( token token   TYPE_1.METHOD_2 ( ps ) ) 
( cm cm   TYPE_3.METHOD_2 ( VAR_1 ) ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2   TYPE_3.METHOD_2 ( VAR_3 ) ) ( TYPE_3 TYPE_3 ) ( VAR_1 TYPE_1 VAR_1 ) 
( METHOD_1_return public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String n   VAR_1.getName ( ) ; return ( ( ( n.METHOD_2 ( STRING_1 ) ) || ( n.METHOD_2 ( STRING_2 ) ) ) & & ( VAR_1.METHOD_3 ( ) ) ) & & ( ( n.METHOD_4 ( STRING_3 ) ) >   0 ) ; } ) ( n n   VAR_1.getName ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_1 VAR_1 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account a ) { TYPE_1 VAR_1   new TYPE_1 ( a.getId ( ) .get ( ) ) ; VAR_1.email   a.METHOD_2 ( ) ; VAR_1.name   a.METHOD_3 ( ) ; VAR_2   a.METHOD_4 ( ) ; return VAR_1 ; } ) ( METHOD_1_return_line1_col245 return VAR_1 ; ) ( a a ) ( a com.google.gerrit.reviewdb.client.Account a ) ( a a ) ( VAR_1 VAR_1   new TYPE_1 ( a.getId ( ) .get ( ) ) ) ( a a ) ( VAR_1 VAR_1 ) 
( VAR_3 short VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_1 java.lang.StringBuilder VAR_1 ) ( line int line ) ( VAR_1 VAR_1 ) ( VAR_2 TYPE_1 VAR_2 ) 
( METHOD_1_return private boolean METHOD_1 ( ) { boolean VAR_1   TYPE_1.equals ( VAR_2.METHOD_2 ( ) ) ; return ! ( ( VAR_1 || ( ( ( VAR_3 )    ( VAR_4 ) ) & & ( 0 >   ( VAR_2.METHOD_3 ( ) .size ( ) ) ) ) ) || ( ( ( VAR_3 )    ( VAR_5 ) ) & & ( 0 >   ( VAR_2.METHOD_4 ( ) .size ( ) ) ) ) ) ; } ) ( VAR_1 VAR_1   TYPE_1.equals ( VAR_2.METHOD_2 ( ) ) ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return public boolean METHOD_1 ( ) { if ( getChange ( ) .getStatus ( ) .METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) .METHOD_3 ( ) ) ) || ( METHOD_5 ( ) .METHOD_3 ( ) ) ) || ( METHOD_6 ( ) .METHOD_7 ( ) .METHOD_8 ( ) ) ) || ( METHOD_4 ( ) .METHOD_1 ( ) ) ; } return METHOD_4 ( ) .METHOD_9 ( ) ; } ) 
( VAR_1 TYPE_1.NameKey VAR_1 ) ( VAR_2 VAR_2   VAR_3.get ( VAR_1.getParentKey ( ) ) ) ( METHOD_1_return private boolean METHOD_1 ( TYPE_1.NameKey VAR_1 TYPE_2 user ) { final TYPE_3 VAR_2   VAR_3.get ( VAR_1.getParentKey ( ) ) ; if ( VAR_2    null ) { return false ; } final TYPE_4 VAR_4   VAR_2.METHOD_2 ( user ) ; return VAR_4.METHOD_3 ( VAR_1 ) .METHOD_4 ( ) ; } ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4   VAR_2.METHOD_2 ( user ) ) ( user TYPE_2 user ) 
( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) .METHOD_1 ( ) ) ) & & ( ! ( METHOD_5 ( db ) ) ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( METHOD_1_return private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1.email ( ) ) !   null ) { return VAR_1.email ( ) ; } else if ( ( VAR_1.name ( ) ) !   null ) { return VAR_1.name ( ) ; } else if ( ( VAR_1.METHOD_2 ( ) ) !   0 ) { return STRING_1 + ( VAR_1.METHOD_2 ( ) ) ; } else { return STRING_1 ; } } ) ( VAR_1 TYPE_1 VAR_1 ) 
( TYPE_3 TYPE_3 ) ( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2 ) ( p p   VAR_2.projects ( ) .name ( VAR_1 ) .create ( ) .get ( ) ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_4 VAR_4 ) ( Truth com.google.common.truth.Truth ) ( VAR_3 VAR_3   VAR_4.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) ( STRING_1 STRING_1 ) 
( id java.lang.String id ) 
( METHOD_1_return private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo java.lang.String ) throws java.io.IOException { try { org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { return rw.parseCommit ( repo.METHOD_2 ( ) .METHOD_3 ( ) ) ; } finally { rw.METHOD_4 ( ) ; } } finally { repo.close ( ) ; } } ) ( java.lang.String ) ( repo org.eclipse.jgit.lib.Repository repo ) 
( get_return public java.lang.String get ( ) { java.lang.String VAR_1   super.get ( ) ; if ( VAR_1 !   null ) { return VAR_1 ; } if ( ( VAR_2 ) !   null ) { final TYPE_1 req ; try { req   VAR_2.get ( ) ; } catch ( TYPE_2 VAR_3 ) { if ( ( VAR_3.METHOD_1 ( ) ) instanceof TYPE_3 ) { return null ; } else { throw VAR_3 ; } } return TYPE_4.METHOD_2 ( req ) ; } return null ; } ) ( VAR_1 VAR_1   super.get ( ) ) 
( VAR_1 TYPE_2 < com.google.gerrit.reviewdb.client.Change.Id > VAR_1 ) ( VAR_2 VAR_2   new java.util.ArrayList ( VAR_1.size ( ) ) ) ( METHOD_1_return public TYPE_1 < ? java.io.IOException > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.client.Change.Id > VAR_1 ) { java.util.List < TYPE_3 < ? > > VAR_2   new java.util.ArrayList ( VAR_1.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change.Id id : VAR_1 ) { VAR_2.add ( METHOD_1 ( id ) ) ; } return TYPE_4.METHOD_2 ( VAR_2 ) ; } ) ( TYPE_4 TYPE_4 ) 
( TYPE_1 TYPE_1 ) ( rsrc TYPE_2 rsrc ) ( input TYPE_3 input ) ( apply_return public TYPE_1 < ? > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 TYPE_5 java.io.IOException { try { VAR_1.METHOD_1 ( rsrc.METHOD_2 ( ) rsrc.METHOD_3 ( ) TYPE_6.METHOD_4 ( VAR_2.METHOD_5 ( ) ) ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e.getMessage ( ) ) ; } return TYPE_1.METHOD_6 ( ) ; } ) 
( VAR_4 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 ) ) ( VAR_5 VAR_5 ) ( VAR_3 java.lang.String VAR_3 ) ( METHOD_1_return protected TYPE_1.Result METHOD_1 ( TYPE_2 git java.lang.String VAR_1 java.lang.String VAR_2 java.lang.String VAR_3 java.lang.String topic ) throws java.io.IOException TYPE_3 { TYPE_4 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 ) ; return VAR_4.to ( git ( STRING_1 + topic ) ) ; } ) ( topic java.lang.String topic ) ( git TYPE_2 git ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_2 java.lang.String VAR_2 ) 
( METHOD_1_return static final TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { return new TYPE_1 ( TYPE_4.METHOD_2 ( VAR_1.get ( ) .METHOD_3 ( ) VAR_1.get ( ) .METHOD_4 ( ) ) ( ( int ) ( ( VAR_1.get ( ) .METHOD_4 ( ) ) * ( VAR_1.get ( ) .METHOD_3 ( ) ) ) ) ) ; } ) ( VAR_1 TYPE_2 < TYPE_3 > VAR_1 ) 
( ) ( in in   new TYPE_2 ( ) ) ( java.lang.String ) 
( VAR_1 int VAR_1 ) ( cm TYPE_1 cm ) ( line int line ) ( METHOD_1_return private int METHOD_1 ( TYPE_1 cm int line int VAR_1 ) { for ( int i   0 ; i < VAR_1 ; i++ ) { cm.METHOD_2 ( line VAR_2 VAR_3.diff ( ) ) ; } return line + VAR_1 ; } ) 
( METHOD_1_return_line1_col392 return VAR_3 ; ) ( METHOD_1_return private java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3   new java.util.ArrayList < > ( ) ; if ( ( VAR_4 )    null ) { try { VAR_3.add ( VAR_2.METHOD_2 ( VAR_5 VAR_6 ) ) ; } catch ( TYPE_3 e ) { VAR_3.add ( STRING_1 ) ; } } else { VAR_3.METHOD_3 ( METHOD_4 ( VAR_4 VAR_2 VAR_5 ) ) ; } return VAR_3 ; } ) ( VAR_3 VAR_3   new java.util.ArrayList < > ( ) ) ( VAR_3 VAR_3 ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) 
( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) VAR_3 ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col233 return result ; ) ( VAR_1 VAR_1 ) ( result result   VAR_1.to ( STRING_1 ) ) ( result result ) ( result result ) ( METHOD_1_return protected TYPE_1.Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) VAR_3 ) ; TYPE_2.Result result   VAR_1.to ( STRING_1 ) ; result.METHOD_3 ( ) ; return result ; } ) 
( METHOD_1_return private int METHOD_1 ( final TYPE_1 < TYPE_2 > i int row final int VAR_1 ) { while ( i.METHOD_2 ( ) ) { final TYPE_2 c   i.METHOD_3 ( ) ; table.METHOD_4 ( row ) ; table.METHOD_5 ( ) .METHOD_6 ( row 0 VAR_2 ) ; METHOD_7 ( row VAR_1 c ( ! ( i.METHOD_2 ( ) ) ) ) ; row++ ; } return row ; } ) ( i final TYPE_1 < TYPE_2 > i ) ( row int row ) ( row row ) ( METHOD_1_return_line1_col318 return row ; ) ( VAR_1 final int VAR_1 ) 
( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) 
( cd com.google.gerrit.server.query.change.ChangeData cd ) ( cd cd ) ( id id   cd.getId ( ) .toString ( ) ) 
( id int id ) ( TYPE_4 TYPE_4 ) ( message java.lang.String message ) ( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) ( input input ) ( commit java.lang.String commit ) ( TYPE_3 TYPE_3 ) ( input input   TYPE_3.create ( ) ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) 
( changes changes   METHOD_2 ( changeId ) ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Project.NameKey project com.google.gerrit.reviewdb.client.Change.Id changeId ) throws TYPE_2 com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes   METHOD_2 ( changeId ) ; if ( changes.isEmpty ( ) ) { throw new TYPE_2 ( changeId ) ; } return create ( db project changeId ) ; } ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) 
( METHOD_1_return private int METHOD_1 ( final int VAR_1 ) throws TYPE_1 { int VAR_2   VAR_3.get ( ) .METHOD_2 ( ) .METHOD_3 ( VAR_4 ) .METHOD_4 ( ) ; if ( VAR_2    0 ) { throw new TYPE_1 ( STRING_1 ) ; } return ( 0 < VAR_1 ) & & ( VAR_1 <   VAR_2 ) ? VAR_1 : VAR_2 ; } ) ( VAR_3 VAR_3 ) ( VAR_1 final int VAR_1 ) ( VAR_2 VAR_2   VAR_3.get ( ) .METHOD_2 ( ) .METHOD_3 ( VAR_4 ) .METHOD_4 ( ) ) 
( line line   ( cm.METHOD_1 ( ) .METHOD_2 ( ) ) ? cm.METHOD_3 ( cm.METHOD_1 ( ) .METHOD_4 ( ) ) : 0 ) ( Collections java.util.Collections ) ( res res   java.util.Collections.METHOD_5 ( VAR_1 new TYPE_1 ( cm.METHOD_6 ( ) 0 0 line false ) METHOD_7 ( ) ) ) 
( b b   new TYPE_1 ( ) ) 
(   STRING_2 ) ( STRING_2 STRING_2 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( r r   create ( ) .METHOD_4 ( user ) ) ( user user   user ( null ) ) 
( METHOD_1_return_line1_col373 return b ; ) ( VAR_2 java.util.Set < java.lang.String > VAR_2 ) ( VAR_1 TYPE_3 VAR_1 ) ( ref TYPE_2 ref ) ( b b   new TYPE_1 ( ) ) ( b b ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 ref TYPE_3 VAR_1 java.util.Set < java.lang.String > VAR_2 ) { TYPE_1 b   new TYPE_1 ( ) ; b.ref   ref.getName ( ) ; if ( ( ref.METHOD_2 ( ) ) !   null ) { b.revision   ref.METHOD_2 ( ) .name ( ) ; } b.METHOD_3 ( ( ( ! ( VAR_2.contains ( ref.getName ( ) ) ) ) & & ( VAR_1.METHOD_4 ( ) ) ) ) ; return b ; } ) ( ref ref ) ( b b ) 
( key TYPE_3.Key < TYPE_2 > key ) ( VAR_2 VAR_2 ) ( VAR_1 TYPE_4 < TYPE_2 > VAR_1 ) ( add_return public TYPE_1 < TYPE_2 > add ( TYPE_3.Key < TYPE_2 > key TYPE_4 < TYPE_2 > VAR_1 ) { TYPE_5 < TYPE_4 < TYPE_2 > > ref   new TYPE_5 < TYPE_4 < TYPE_2 > > ( VAR_1 ) ; VAR_2.add ( ref ) ; return new TYPE_6 ( ref key VAR_1 ) ; } ) ( ref ref   new TYPE_5 < TYPE_4 < TYPE_2 > > ( VAR_1 ) ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_3 TYPE_3 ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) !   null ) & & ( ( VAR_2.METHOD_2 ( ) .get ( VAR_1 ) ) !   null ) ) { return TYPE_1.of ( TYPE_2.of ( VAR_2.METHOD_2 ( ) .get ( VAR_1 ) ) ) ; } return TYPE_1.METHOD_3 ( ) ; } ) ( TYPE_1 TYPE_1 ) 
( b TYPE_4 < TYPE_1 > b ) ( VAR_2 TYPE_3 < TYPE_1 > VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( n n   VAR_2.METHOD_1 ( b.getKey ( ) b.METHOD_2 ( ) .get ( ) ) ) ( VAR_2 VAR_2 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : this.VAR_3   revision ; break ; default : TYPE_3.METHOD_2 ( ( revision    null ) STRING_1 type ) ; this.VAR_3   revision ; break ; } return this ; } ) ( revision TYPE_2 revision ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_4 ( ) ) ( TYPE_2 TYPE_2 ) 
( ctx TYPE_1 ctx ) ( ctx ctx ) 
( VAR_1 final java.lang.StringBuilder VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_2 final TYPE_1 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( s TYPE_2 < TYPE_3 > s ) ( get_return public TYPE_1.ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return TYPE_5.apply ( VAR_1.get ( ) .METHOD_1 ( s ) .format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 e ) ; } } ) 
( m m ) ( m m ) ( m m ) ( VAR_1 final int VAR_1 ) ( m m ) ( m m ) ( m m ) ( m m ) ( m final TYPE_1 m ) ( m m ) ( m m ) ( m m ) ( m m ) 
( VAR_2 VAR_2 ) ( VAR_2 VAR_2   new TYPE_3 ( null VAR_1 ) ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( METHOD_1_return private TYPE_1 < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 org.eclipse.jgit.revwalk.RevWalk rw org.eclipse.jgit.lib.ObjectId commit ) throws java.io.IOException TYPE_2 { rw.METHOD_2 ( ) ; TYPE_3 VAR_2   new TYPE_3 ( null VAR_1 ) ; VAR_2.METHOD_3 ( rw commit ) ; return VAR_2.METHOD_4 ( ) ; } ) ( VAR_2 VAR_2 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( commit org.eclipse.jgit.lib.ObjectId commit ) ( rw rw ) 
( TYPE_1 TYPE_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 VAR_2 ) throws TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException TYPE_5 { com.google.gerrit.reviewdb.client.Change change   new com.google.gerrit.reviewdb.client.Change ( VAR_2.getChange ( ) ) ; METHOD_2 ( VAR_1 VAR_2 ) ; return TYPE_1.METHOD_3 ( change VAR_1.METHOD_4 ( ) .get ( change.getId ( ) ) ) ; } ) ( VAR_2 TYPE_3 VAR_2 ) ( change change   new com.google.gerrit.reviewdb.client.Change ( VAR_2.getChange ( ) ) ) ( VAR_1 TYPE_2 VAR_1 ) 
( res res ) ( VAR_2 TYPE_4 VAR_2 ) ( VAR_5 VAR_5 ) ( VAR_1 TYPE_3 VAR_1 ) ( VAR_5 VAR_5 ) ( req TYPE_1 req ) ( res res ) ( VAR_5 VAR_5   res.METHOD_4 ( ) ) ( res TYPE_2.HttpServletResponse res ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( VAR_1 VAR_1 ) ( n n   VAR_1.METHOD_3 ( ) ) ( TYPE_2 TYPE_2 ) 
( Truth com.google.common.truth.Truth ) ( TYPE_1 TYPE_1 ) ( Truth com.google.common.truth.Truth ) 
( Assert org.junit.Assert ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) ( r r   VAR_3.METHOD_3 ( STRING_1 VAR_1 ) ) ( Assert org.junit.Assert ) 
( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   VAR_3.METHOD_3 ( new TYPE_3 ( ) { public TYPE_2 METHOD_2 ( ) { return user ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_4 ( ) { return VAR_4.get ( ) ; } } ) ) ( user user   VAR_1.METHOD_2 ( ) ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { final TYPE_2 user   VAR_1.METHOD_2 ( ) ; TYPE_3 VAR_2   VAR_3.METHOD_3 ( new TYPE_3 ( ) { public TYPE_2 METHOD_2 ( ) { return user ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_4 ( ) { return VAR_4.get ( ) ; } } ) ; try { return VAR_5.METHOD_1 ( ) ; } finally { VAR_3.METHOD_3 ( VAR_2 ) ; } } ) 
( db final TYPE_1.ReviewDb db ) ( change final TYPE_1.Change change ) ( event final TYPE_2 event ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 VAR_3   VAR_1.getKey ( ) .getParentKey ( ) .get ( ) ) ( VAR_2 VAR_2 ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_4 VAR_4   VAR_2.getKey ( ) .getParentKey ( ) .get ( ) ) ( TYPE_2 TYPE_2 ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 VAR_1 TYPE_1 VAR_2 ) { java.lang.String VAR_3   VAR_1.getKey ( ) .getParentKey ( ) .get ( ) ; java.lang.String VAR_4   VAR_2.getKey ( ) .getParentKey ( ) .get ( ) ; return TYPE_2.METHOD_2 ( ) .METHOD_1 ( VAR_1.METHOD_3 ( ) VAR_2.METHOD_3 ( ) ) .METHOD_1 ( VAR_3 VAR_4 ) .METHOD_1 ( VAR_1.METHOD_4 ( ) VAR_2.METHOD_4 ( ) ) .result ( ) ; } ) 
( Truth com.google.common.truth.Truth ) 
( status com.google.gerrit.reviewdb.client.Change.Status status ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Status status ) { switch ( status ) { case VAR_1 : case VAR_2 : return ( ( METHOD_2 ( ) ) & & ( METHOD_3 ( ) .METHOD_4 ( ) ) ) || ( METHOD_5 ( ) .METHOD_6 ( ) ) ; case VAR_3 : default : return false ; } } ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 int VAR_2 ) ( edit boolean edit ) ( VAR_4 VAR_4 ) ( line int line ) ( VAR_3 int VAR_3 ) 
( id int id ) ( project java.lang.String project ) ( change_return public static TYPE_1 change ( java.lang.String project int id ) { if ( project    null ) { return new TYPE_1 ( STRING_1 ) .id ( java.lang.String.METHOD_1 ( id ) ) ; } else { return new TYPE_1 ( STRING_1 ) .id ( project id ) ; } } ) 
( Assert org.junit.Assert ) ( change change   METHOD_3 ( git ) ) ( git git   METHOD_2 ( ) ) 
( VAR_3 VAR_3 ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( TYPE_3 TYPE_3 ) ( m m   VAR_3.METHOD_3 ( repo c rw VAR_4 VAR_1 ) ) ( VAR_3 VAR_3   new TYPE_3 ( null null null VAR_2 ) ) ( TYPE_5 TYPE_5 ) ( c org.eclipse.jgit.revwalk.RevCommit c ) ( METHOD_1_return private java.util.List < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw org.eclipse.jgit.revwalk.RevCommit c boolean VAR_1 TYPE_1 cfg ) throws java.lang.Exception { TYPE_2 VAR_2   new TYPE_2 ( ) ; TYPE_3 VAR_3   new TYPE_3 ( null null null VAR_2 ) ; java.lang.String VAR_4   TYPE_3.METHOD_2 ( cfg ) ; java.util.List < TYPE_4 > m   VAR_3.METHOD_3 ( repo c rw VAR_4 VAR_1 ) ; return TYPE_5.METHOD_4 ( m ) ; } ) ( cfg TYPE_1 cfg ) ( VAR_4 VAR_4   TYPE_3.METHOD_2 ( cfg ) ) ( VAR_1 boolean VAR_1 ) ( VAR_2 VAR_2   new TYPE_2 ( ) ) 
( r r ) ( VAR_1 final java.lang.String VAR_1 ) ( r r ) ( n final java.lang.String n ) ( r final TYPE_1 r ) ( r r ) 
( view TYPE_1 view ) ( token token   view.METHOD_2 ( ) ) ( view view ) ( view view ) 
( METHOD_1_return private boolean METHOD_1 ( ) { if ( VAR_1.METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg   new java.lang.StringBuilder ( ) ; msg.append ( STRING_1 ) ; msg.append ( STRING_2 ) ; if ( VAR_2 ) { msg.append ( STRING_3 ) ; } else { msg.append ( STRING_4 ) ; msg.append ( STRING_5 ) ; } msg.append ( STRING_6 ) ; return VAR_1.METHOD_3 ( true msg.toString ( ) ) ; } } ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2   null ; if ( VAR_1 !   null ) { VAR_2   VAR_1.METHOD_2 ( VAR_3 ) ; } if ( VAR_2    null ) { VAR_2   TYPE_3.METHOD_3 ( VAR_4 VAR_5 ) ; } return new TYPE_1 ( VAR_2 ) ; } ) ( VAR_2 VAR_2   null ) 
( java.lang.String ) ( VAR_2 TYPE_1 VAR_2 ) ( git git ) ( db db   VAR_2.METHOD_1 ( p ) ) ( VAR_2 VAR_2 ) ( git git ) ( p p   new com.google.gerrit.reviewdb.client.Project.NameKey ( project.getName ( ) ) ) ( VAR_1 java.lang.String VAR_1 ) ( git git   new TYPE_3 ( db ) ) ( project com.google.gerrit.reviewdb.client.Project project ) ( apply_return public boolean apply ( com.google.gerrit.reviewdb.client.Project project java.lang.String VAR_1 java.lang.String TYPE_1 VAR_2 ) throws java.io.IOException TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey p   new com.google.gerrit.reviewdb.client.Project.NameKey ( project.getName ( ) ) ; org.eclipse.jgit.lib.Repository db   VAR_2.METHOD_1 ( p ) ; TYPE_3 git   new TYPE_3 ( db ) ; git.METHOD_2 ( ) .METHOD_3 ( branch ) .METHOD_4 ( VAR_1 ) .METHOD_5 ( ) ; git.close ( ) ; return true ; } ) 
( TYPE_2 TYPE_2 ) ( table table ) 
( VAR_2 com.google.gerrit.reviewdb.client.AccountGroup ... VAR_2 ) ( VAR_1 TYPE_2.ProjectConfig VAR_1 ) ( java.lang.String ) ( user_return private TYPE_1 user ( TYPE_2.ProjectConfig VAR_1 java.lang.String com.google.gerrit.reviewdb.client.AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3.Collections < TYPE_3 > METHOD_1 ( ) VAR_3.Collections < TYPE_3 > METHOD_1 ( ) VAR_4 null VAR_5 VAR_6 new TYPE_4 ( VAR_2 ) METHOD_2 ( VAR_1 ) ) ; } ) 
( m TYPE_1 < TYPE_2 > m ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( VAR_1 final TYPE_2 < TYPE_3 > VAR_1 ) ( METHOD_1_return private static boolean METHOD_1 ( final TYPE_1 id final TYPE_2 < TYPE_3 > VAR_1 ) { if ( id.METHOD_2 ( ) .METHOD_3 ( STRING_1 ) ) { return true ; } if ( id.METHOD_2 ( ) .METHOD_3 ( STRING_2 ) ) { return true ; } for ( final TYPE_3 t : VAR_1 ) { if ( t.METHOD_4 ( id ) ) { return true ; } } return false ; } ) ( id final TYPE_1 id ) 
( VAR_3 VAR_3   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( n ) .METHOD_4 ( ) VAR_4 ) ) ( VAR_1 TYPE_1 VAR_1 ) ( projectName java.lang.String projectName ) ( n n   projectName + ( VAR_2 ) ) ( db db   TYPE_3.METHOD_5 ( VAR_3 false ) ) ( TYPE_2 TYPE_2 ) ( TYPE_3 TYPE_3 ) 
( VAR_1 com.google.gerrit.server.query.change.ChangeData VAR_1 ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { VAR_2   TYPE_2.METHOD_2 ( VAR_2 VAR_1.change ( ) .METHOD_3 ( ) ) ; try { VAR_3   index.METHOD_4 ( VAR_2 VAR_4 ) ; } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_5 ( ) ; } ) ( TYPE_2 TYPE_2 ) 
( line int line ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) ( cm cm ) ( VAR_3 VAR_3   cm.METHOD_1 ( line VAR_1.METHOD_3 ( ) VAR_2 ) ) ( cm TYPE_2 cm ) ( VAR_2 TYPE_4 VAR_2 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 cm int line final TYPE_3 VAR_1 TYPE_4 VAR_2 ) { VAR_1.METHOD_2 ( false ) ; TYPE_1 VAR_3   cm.METHOD_1 ( line VAR_1.METHOD_3 ( ) VAR_2 ) ; VAR_3.METHOD_4 ( new TYPE_5 ( ) { public void run ( ) { VAR_1.METHOD_2 ( true ) ; } } ) ; return VAR_3 ; } ) ( METHOD_1_return_line1_col301 return VAR_3 ; ) ( VAR_1 final TYPE_3 VAR_1 ) 
( VAR_3 VAR_3 ) ( TYPE_1 TYPE_1 ) ( repo repo   VAR_3.METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( ) ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col390 return repo ; ) ( repo repo ) ( java.lang.String ) ( METHOD_1_return private org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String ) throws java.io.IOException {   TYPE_1.METHOD_2 ( VAR_1 ) ; if ( VAR_2.METHOD_3 ( ) ) { return VAR_2.get ( ) ; } org.eclipse.jgit.lib.Repository repo   VAR_3.METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( ) ) ; VAR_2.put ( repo ) ; return repo ; } ) 
( Truth com.google.common.truth.Truth ) ( STRING_1 STRING_1 ) ( VAR_1 VAR_1   STRING_1 ) ( Truth com.google.common.truth.Truth ) 
( change change   TYPE_3.getChange ( VAR_1 ) ) ( ps ps   TYPE_3.METHOD_2 ( VAR_1 ) ) ( TYPE_3 TYPE_3 ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4   VAR_2.METHOD_3 ( ) .METHOD_4 ( ) ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { com.google.gerrit.reviewdb.client.Change change   TYPE_3.getChange ( VAR_1 ) ; com.google.gerrit.reviewdb.client.PatchSet ps   TYPE_3.METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_2   ( ( TYPE_4 ) ( VAR_3 ) ) ; TYPE_5 VAR_4   VAR_2.METHOD_3 ( ) .METHOD_4 ( ) ; try { return VAR_4.get ( change ps ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e.getMessage ( ) ) ; } } ) ( VAR_2 VAR_2   ( ( TYPE_4 ) ( VAR_3 ) ) ) ( VAR_1 TYPE_2 VAR_1 ) 
( walk walk   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( id org.eclipse.jgit.lib.ObjectId id ) ( parseCommit_return private org.eclipse.jgit.revwalk.RevCommit parseCommit ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { if ( id instanceof org.eclipse.jgit.revwalk.RevCommit ) { return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; } org.eclipse.jgit.revwalk.RevWalk walk   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.revwalk.RevCommit commit   walk.parseCommit ( id ) ; walk.METHOD_1 ( commit ) ; return commit ; } finally { walk.METHOD_2 ( ) ; } } ) 
( event final TYPE_1 event ) 
( VAR_2 byte [ ] VAR_2 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 project java.lang.String path final TYPE_3 VAR_1 byte [ ] VAR_2 TYPE_4 VAR_3 java.lang.String VAR_4 ) { return TYPE_5.METHOD_2 ( VAR_2 VAR_1 ) .METHOD_3 ( VAR_3.toString ( ) ) .METHOD_4 ( TYPE_5.METHOD_5 ( path VAR_4 ) ) ; } ) ( project TYPE_2 project ) ( VAR_3 TYPE_4 VAR_3 ) ( VAR_4 java.lang.String VAR_4 ) ( path java.lang.String path ) ( TYPE_5 TYPE_5 ) ( VAR_1 final TYPE_3 VAR_1 ) 
( VAR_1 VAR_1   new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ) ( METHOD_1_return public TYPE_1.Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1   new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1.METHOD_2 ( 2 ) ; TYPE_6 VAR_3   TYPE_6.METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Account.Id > VAR_4 ; try { VAR_4   METHOD_4 ( VAR_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5.error ( STRING_1 e ) ; return new TYPE_7.Result ( VAR_3 false 0 0 ) ; } return METHOD_5 ( index VAR_4 VAR_1 ) ; } ) ( TYPE_6 TYPE_6 ) ( VAR_4 VAR_4 ) ( index final TYPE_2 index ) ( VAR_3 VAR_3   TYPE_6.METHOD_3 ( ) ) ( VAR_1 VAR_1 ) 
( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db org.eclipse.jgit.revwalk.RevWalk rw org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo   METHOD_2 ( ) ; try { return METHOD_3 ( repo db rw commit repo.METHOD_4 ( ) ) ; } finally { repo.close ( ) ; } } catch ( java.io.IOException e ) { java.lang.String msg   java.lang.String.format ( STRING_1 commit.name ( ) getProject ( ) .METHOD_5 ( ) ) ; VAR_1.error ( msg e ) ; return false ; } } ) 
( token final java.lang.String token ) ( METHOD_1_return private java.lang.String METHOD_1 ( final java.lang.String token final java.lang.String VAR_1 ) { if ( token.METHOD_2 ( STRING_1 ) ) { return TYPE_1.METHOD_3 ( group.METHOD_4 ( ) VAR_1 ) ; } else { return TYPE_1.METHOD_3 ( group.METHOD_5 ( ) VAR_1 ) ; } } ) ( VAR_1 final java.lang.String VAR_1 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( final TYPE_2 rsrc ) { if ( rsrc.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_4 ( ) ) { return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; } else { return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1   VAR_2.create ( account ) ; return rsrc.METHOD_2 ( ) .METHOD_6 ( VAR_1 ) .METHOD_7 ( ) ; } } ; } } ) ( rsrc final TYPE_2 rsrc ) 
( VAR_1 VAR_1   STRING_1 ) ( STRING_1 STRING_1 ) ( p p   new TYPE_1 ( VAR_1 ) ) ( STRING_2 STRING_2 ) ( VAR_2 VAR_2   STRING_2 ) ( c c   new TYPE_2 ( p VAR_2 ) ) 
( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : VAR_1.approvals ( VAR_2 ) ) { final TYPE_1 VAR_3   VAR_4.create ( VAR_2 p.getAccountId ( ) ) ; if ( VAR_3.METHOD_2 ( ) .contains ( VAR_5 ) ) { return true ; } } return false ; } ) ( VAR_1 final com.google.gerrit.server.query.change.ChangeData VAR_1 ) 
( info TYPE_1 info ) ( VAR_1 VAR_1 ) ( info info ) 
( Assert org.junit.Assert ) ( r r ) ( VAR_1 VAR_1 ) ( r r   VAR_1.put ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) METHOD_2 ( STRING_3 ) ) ) 
( METHOD_1_return static < TYPE_1 extends TYPE_2.Key < ? > > boolean METHOD_1 ( final TYPE_1 a final TYPE_1 b ) { if ( a    b ) { return true ; } if ( ( a    null ) || ( b    null ) ) { return false ; } return a.equals ( b ) ; } ) ( b final TYPE_1 b ) ( a final TYPE_1 a ) ( a a ) 
( args TYPE_3 args ) ( key TYPE_2 key ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 key TYPE_3 args ) { if ( VAR_1 ) { try { return VAR_2.get ( key VAR_3.create ( key args ) ) ; } catch ( TYPE_4 | TYPE_5 e ) { VAR_4.METHOD_2 ( ( STRING_1 + key ) e ) ; return new TYPE_1 ( VAR_5 ) ; } } else { return new TYPE_1 ( VAR_6 ) ; } } ) 
( c c   METHOD_2 ( VAR_1 ) ) ( TYPE_2 TYPE_2 ) ( Truth com.google.common.truth.Truth ) ( m m   TYPE_2.METHOD_3 ( repo c VAR_1 ) ) ( VAR_2 VAR_2   new java.util.ArrayList < > ( ) ) 
( METHOD_1_return public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2   TYPE_2.METHOD_2 ( VAR_1 ) .METHOD_3 ( VAR_3 ) ; java.lang.String VAR_4   ( STRING_1 + ( VAR_5 ) ) + STRING_2 ; if ( VAR_2 > 0 ) { return ( TYPE_2.METHOD_2 ( VAR_1 ) .METHOD_4 ( ( VAR_2 + 1 ) ) ) + VAR_4 ; } else { return VAR_4 ; } } ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( VAR_1 ) .METHOD_3 ( VAR_3 ) ) ( VAR_4 VAR_4   ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) ( VAR_1 TYPE_1 VAR_1 ) 
( rw rw   new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) ( VAR_3 VAR_3   rw.METHOD_2 ( VAR_1 ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.io.IOException TYPE_2 TYPE_3 TYPE_4 { if ( ( ( path )    null ) || ( VAR_1    null ) ) { return null ; } final org.eclipse.jgit.revwalk.RevWalk rw   new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; final TYPE_5 VAR_3   rw.METHOD_2 ( VAR_1 ) ; return TYPE_1.METHOD_3 ( VAR_2 path VAR_3 ) ; } ) ( VAR_1 final org.eclipse.jgit.lib.ObjectId VAR_1 ) ( rw rw ) ( TYPE_1 TYPE_1 ) 
( res res   new TYPE_2 ( ) ) ( req TYPE_1 req ) ( servlet servlet ) ( VAR_1 java.lang.String VAR_1 ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ; TYPE_3 < TYPE_4 > VAR_2   java.util.Collections.METHOD_3 ( ) ; java.util.Set < TYPE_5 > VAR_3   TYPE_6.of ( VAR_4 ) ; return new TYPE_1 ( account VAR_3 VAR_2 ) ; } ) ( TYPE_6 TYPE_6 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( Collections java.util.Collections ) ( account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ) ( VAR_3 VAR_3   TYPE_6.of ( VAR_4 ) ) ( VAR_2 VAR_2   java.util.Collections.METHOD_3 ( ) ) 
( TYPE_3 TYPE_3 ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1   TYPE_3.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { try { TYPE_5.METHOD_4 ( new TYPE_6 ( VAR_3.METHOD_5 ( ) ) .METHOD_6 ( ) STRING_1 VAR_3 ) ; } catch ( TYPE_7 e ) { throw new TYPE_8 ( e ) ; } VAR_1.add ( VAR_3 ) ; } return VAR_1.METHOD_7 ( ) .METHOD_8 ( ) ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ) 
( m m ) ( VAR_1 final TYPE_2 VAR_1 ) ( VAR_2 final boolean VAR_2 ) ( METHOD_1_return_line1_col397 return m ; ) ( repo final org.eclipse.jgit.lib.Repository repo ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.Repository repo final TYPE_2 VAR_1 final boolean VAR_2 ) { TYPE_1 m ; if ( VAR_2 ) { m   TYPE_3.METHOD_2 ( repo true ) ; } else { m   TYPE_4.METHOD_2 ( repo ) ; } m.METHOD_3 ( new TYPE_5 ( ) { protected TYPE_2 METHOD_4 ( ) { return VAR_1 ; } public void METHOD_5 ( ) { } public void METHOD_6 ( ) { } } ) ; return m ; } ) ( m m ) ( m m ) 
( Truth com.google.common.truth.Truth ) ( TYPE_1 TYPE_1 ) ( info info   METHOD_7 ( METHOD_8 ( VAR_1 ) ) ) ( message message   VAR_2.get ( VAR_3 ) .commit.message ) ( message VAR_2.get ( VAR_3 ) .commit.message ) 
( VAR_2 final java.lang.String VAR_2 ) ( VAR_1 final java.lang.String VAR_1 ) 
( rsrc TYPE_1 rsrc ) ( String java.lang.String ) ( VAR_1 VAR_1   ( VAR_2 ) ? STRING_1 : STRING_2 ) ( apply_return public java.lang.String apply ( TYPE_1 rsrc TYPE_2 input ) { final java.lang.String VAR_1   ( VAR_2 ) ? STRING_1 : STRING_2 ; return java.lang.String.format ( STRING_3 VAR_1 ( TYPE_3.METHOD_1 ( input.message ) ? TYPE_4.METHOD_2 ( user.get ( ) .METHOD_3 ( ) STRING_4 ) : input.message ) rsrc.getName ( ) ) ; } ) ( input TYPE_2 input ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 t TYPE_2 VAR_1 ) { if ( t.METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) .METHOD_1 ( this VAR_1 ) ; if ( ! ( t.METHOD_3 ( ) ) ) return false ; else return ( this.VAR_2 )    ( ( ( TYPE_4 ) ( t ) ) .value ( ) ) ; } ) ( t TYPE_1 t ) 
( rp TYPE_1 rp ) ( rp rp ) ( rp rp ) 
( VAR_4 VAR_4 ) ( VAR_1 java.lang.String VAR_1 ) ( res TYPE_3.HttpServletResponse res ) ( req req ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( TYPE_2 req TYPE_3.HttpServletResponse res java.lang.String VAR_1 java.util.Map < java.lang.String ? > VAR_2 ) throws java.io.IOException { req.METHOD_2 ( VAR_3 true ) ; return VAR_4.METHOD_3 ( res VAR_1 METHOD_4 ( req res VAR_2 ) ) ; } ) ( req TYPE_2 req ) ( VAR_2 java.util.Map < java.lang.String ? > VAR_2 ) 
( METHOD_1_return private boolean METHOD_1 ( final TYPE_1 id ) { if ( id.METHOD_2 ( VAR_1 ) ) { return METHOD_3 ( ) ; } if ( id.METHOD_2 ( VAR_2 ) ) { return true ; } if ( id.METHOD_2 ( VAR_3 ) ) { return true ; } if ( id.METHOD_2 ( VAR_4 ) ) { return true ; } for ( final TYPE_2 p : VAR_5 ) { if ( p.METHOD_4 ( id ) ) { return true ; } } return false ; } ) ( id final TYPE_1 id ) 
( TYPE_6 TYPE_6 ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_5 VAR_5   TYPE_6.METHOD_6 ( VAR_4 ) ) ( VAR_3 VAR_3   METHOD_3 ( VAR_2 ) ) ( VAR_4 VAR_4   METHOD_5 ( VAR_2 ) ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i   1 ; i < INT_1 ; i++ ) { java.lang.String p   STRING_1 + i ; TYPE_2.METHOD_2 ( VAR_1 p ) ; TYPE_2.METHOD_3 ( ( ( ( VAR_1.METHOD_4 ( ) ) + STRING_2 ) + p ) ) ; } return null ; } ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) ( VAR_2 VAR_2   METHOD_2 ( ) ) ( db db ) 
( VAR_3 VAR_3 ) ( java.lang.String ) ( TYPE_5 TYPE_5 ) ( VAR_1 TYPE_3 VAR_1 ) ( m m   new TYPE_6 ( this VAR_1 VAR_2 ) ) ( VAR_2 TYPE_4 < TYPE_1 > VAR_2 ) ( METHOD_1_return public synchronized < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.String TYPE_3 VAR_1 TYPE_4 < TYPE_1 > VAR_2 ) { TYPE_5.METHOD_2 ( VAR_1 ) ; TYPE_6 < TYPE_1 > m   new TYPE_6 ( this VAR_1 VAR_2 ) ; METHOD_3 ( VAR_1 ) ; VAR_3.put ( m ) ; return m.METHOD_4 ( ) ; } ) ( m m ) 
( VAR_1 final TYPE_1 VAR_1 ) ( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { return ( ( METHOD_1 ( ) )    ( VAR_1.METHOD_1 ( ) ) ) & & ( METHOD_2 ( ) .equals ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) .METHOD_2 ( ) ) ) ; } ) 
( VAR_1 boolean VAR_1 ) ( VAR_3 VAR_3 ) ( project com.google.gerrit.reviewdb.client.Project project ) ( VAR_2 VAR_2   VAR_3.METHOD_1 ( project.METHOD_2 ( ) ) ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( u u   util.user ( VAR_1 VAR_4 ) ) ( util util ) 
( repo repo   METHOD_2 ( STRING_1 ) ) ( change change   insert ( METHOD_4 ( repo commit ) ) ) ( commit commit   repo.METHOD_3 ( repo.commit ( ) .message ( STRING_2 ) .add ( STRING_3 STRING_4 ) .add ( STRING_5 STRING_6 ) .create ( ) ) ) ( repo repo ) 
( METHOD_1_return private int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { boolean VAR_3   false ; if ( VAR_1 <   ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return table.METHOD_1 ( VAR_1 ) ; } ) ( table table ) ( VAR_1 final int VAR_1 ) 
( ctl final TYPE_1 ctl ) ( VAR_2 final TYPE_2 VAR_2 ) ( VAR_1 final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) 
( VAR_2 VAR_2 ) ( VAR_4 VAR_4 ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_3 VAR_3   ( TYPE_4.METHOD_2 ( user.METHOD_3 ( ) ) ) ? STRING_1 : user.METHOD_3 ( ) ) ( VAR_1 java.lang.String VAR_1 ) ( user TYPE_2 user ) ( project project   VAR_2.getProject ( ) .getName ( ) ) 
( id com.google.gerrit.reviewdb.client.Change.Id id ) ( cd cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null null null null project id ) ) ( currentPatchSetId int currentPatchSetId ) ( METHOD_1_return public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project com.google.gerrit.reviewdb.client.Change.Id id int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null null null null project id ) ; VAR_1   new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id currentPatchSetId ) ) ; return cd ; } ) ( cd cd ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( METHOD_1_return_line1_col593 return cd ; ) 
( VAR_1 VAR_1 ) ( METHOD_1_return private java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String TYPE_1 > VAR_1   TYPE_3.METHOD_2 ( ) ; for ( TYPE_1 c : db.METHOD_3 ( ) .METHOD_4 ( rsrc.METHOD_5 ( ) .getId ( ) rsrc.METHOD_6 ( ) ) ) { VAR_1.put ( c.getKey ( ) .get ( ) c ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) ) ( rsrc TYPE_2 rsrc ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return_line1_col377 return VAR_1 ; ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( ( ( change ) !   null ) & & ( VAR_1 ) ) { TYPE_2 VAR_2   TYPE_2.METHOD_2 ( change ) ; if ( ( VAR_2    null ) || ( ! ( VAR_2.METHOD_3 ( new TYPE_3 ( repo ) VAR_3 ) ) ) ) { return METHOD_4 ( repo ) ; } } return super.METHOD_1 ( repo ) ; } ) 
( STRING_1 STRING_1 ) ( VAR_1 VAR_1   new TYPE_1 < > ( ) ) ( query query   VAR_3.METHOD_2 ( VAR_1 ) ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( Assert org.junit.Assert ) ( VAR_2 VAR_2   STRING_1 ) 
( c c   ( VAR_2    null ) ? repo.commit ( VAR_3 ) : repo.commit ( VAR_3 VAR_2 ) ) ( c c ) ( VAR_2 org.eclipse.jgit.revwalk.RevCommit ... VAR_2 ) ( repo repo ) ( VAR_3 VAR_3   repo.METHOD_2 ( VAR_1 ) ) ( VAR_1 TYPE_1 [ ] VAR_1 ) ( METHOD_1_return_line1_col417 return c ; ) ( METHOD_1_return public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( TYPE_1 [ ] VAR_1 TYPE_2 < org.eclipse.jgit.lib.Repository > repo org.eclipse.jgit.revwalk.RevCommit ... VAR_2 ) throws java.lang.Exception { final TYPE_3 VAR_3   repo.METHOD_2 ( VAR_1 ) ; org.eclipse.jgit.revwalk.RevCommit c   ( VAR_2    null ) ? repo.commit ( VAR_3 ) : repo.commit ( VAR_3 VAR_2 ) ; repo.METHOD_3 ( c ) ; return c ; } ) ( repo TYPE_2 < org.eclipse.jgit.lib.Repository > repo ) ( repo repo ) 
( VAR_1 TYPE_1 < TYPE_2.NameKey > VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.get ( ) ) 
( VAR_1 final TYPE_1.Id VAR_1 ) 
( METHOD_1_return_line1_col283 return VAR_4 ; ) ( VAR_4 VAR_4 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) & & ( ! ( METHOD_2 ( VAR_2 ) ) ) ) & & ( ! ( METHOD_3 ( ) ) ) ) { return new TYPE_1 ( ( ( STRING_1 + ( VAR_3.getName ( ) ) ) + STRING_2 ) ) ; } if ( VAR_3.METHOD_4 ( ) ) { return METHOD_5 ( ) ; } return VAR_4 ; } ) 
( VAR_1 VAR_1 ) ( r r   METHOD_4 ( ) ) 
( VAR_1 VAR_1 ) ( repo repo   VAR_1.METHOD_4 ( project ) ) ( r TYPE_1.Result r ) 
( VAR_2 TYPE_3.Id VAR_2 ) ( VAR_3 VAR_3 ) ( METHOD_1_return_line1_col384 return VAR_3 ; ) ( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 TYPE_3.Id VAR_2 ) { java.util.List < TYPE_1 > VAR_3   new java.util.ArrayList < TYPE_1 > ( VAR_1.size ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( TYPE_4.METHOD_2 ( getRefName ( ) VAR_4.METHOD_3 ( ) ) ) & & ( VAR_4.METHOD_4 ( ) .equals ( VAR_2 ) ) ) { VAR_3.add ( VAR_4 ) ; } } return VAR_3 ; } ) ( VAR_3 VAR_3   new java.util.ArrayList < TYPE_1 > ( VAR_1.size ( ) ) ) 
( METHOD_1_return public static int METHOD_1 ( ) { int VAR_1   ( VAR_2.METHOD_2 ( ) ) + ( VAR_3.METHOD_2 ( ) ) ; if ( VAR_4.METHOD_3 ( ) ) { VAR_1 +  VAR_4.METHOD_2 ( ) ; } if ( VAR_5.METHOD_3 ( ) ) { VAR_1 +  VAR_5.METHOD_2 ( ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   ( VAR_2.METHOD_2 ( ) ) + ( VAR_3.METHOD_2 ( ) ) ) ( METHOD_1_return_line1_col247 return VAR_1 ; ) 
( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 set ) { final java.util.List < TYPE_1 > VAR_1   new java.util.ArrayList < TYPE_1 > ( set.METHOD_2 ( ) ) ; java.util.Collections.METHOD_1 ( VAR_1 new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_2 TYPE_1 VAR_3 ) { return VAR_2.METHOD_4 ( ) .METHOD_5 ( VAR_3.METHOD_4 ( ) ) ; } } ) ; return VAR_1 ; } ) ( VAR_1 VAR_1   new java.util.ArrayList < TYPE_1 > ( set.METHOD_2 ( ) ) ) ( Collections java.util.Collections ) ( METHOD_1_return_line1_col385 return VAR_1 ; ) ( set final TYPE_2 set ) ( VAR_1 VAR_1 ) 
( p TYPE_1 < java.lang.String > p ) ( c TYPE_1 < java.lang.String > c ) ( VAR_1 java.lang.String VAR_1 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } TYPE_3 VAR_2   TYPE_4.METHOD_2 ( VAR_3 ) ; switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) !   null ? VAR_5 : new TYPE_5 ( ) ; case VAR_6 : return new TYPE_6 ( ) ; default : throw new TYPE_7 ( ( STRING_1 + VAR_2 ) ) ; } } ) ( TYPE_4 TYPE_4 ) ( VAR_2 VAR_2   TYPE_4.METHOD_2 ( VAR_3 ) ) 
( VAR_2 final java.util.List < TYPE_2 > VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3   true ) ( VAR_1 VAR_1 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( in in   new TYPE_2 ( ) ) ( VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 boolean VAR_3 ) ( VAR_3 VAR_3 ) ( METHOD_1_return protected Project.NameKey METHOD_1 ( java.lang.String VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 boolean VAR_3 ) throws TYPE_1 { TYPE_2 in   new TYPE_2 ( ) ; in.name   ( VAR_4 ) + VAR_1 ; VAR_5   ( VAR_2 !   null ) ? VAR_2.get ( ) : null ; VAR_6   VAR_3 ; return METHOD_1 ( in ) ; } ) 
( r r ) ( r r   VAR_1.METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) new TYPE_2 ( ) .label ( STRING_3 2 ) ) ) ( Assert org.junit.Assert ) ( changeId java.lang.String changeId ) ( VAR_1 VAR_1 ) 
( VAR_4 VAR_4 ) ( STRING_2 STRING_2 ) ( VAR_2 VAR_2   STRING_2 ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_3 VAR_3   new TYPE_1 ( new TYPE_2 ( VAR_1 ) VAR_2 ) ) ( VAR_4 VAR_4   new TYPE_1 ( new TYPE_2 ( STRING_4 ) STRING_4 ) ) ( STRING_1 STRING_1 ) 
( METHOD_1_return public PatchSet.Id METHOD_1 ( ) throws TYPE_1 com.google.gwtorm.server.OrmException java.io.IOException { try { if ( magicBranch.edit ) { return METHOD_2 ( ) ; } else if ( VAR_1    ( TYPE_2.METHOD_3 ( ) ) ) { return METHOD_4 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db   VAR_2.METHOD_5 ( ) ; try { return METHOD_4 ( db ) ; } finally { db.close ( ) ; } } } finally { synchronized ( VAR_3 ) { VAR_3.update ( 1 ) ; } } } ) 
( changeId java.lang.String changeId ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   VAR_2.create ( TYPE_2.METHOD_2 ( VAR_3.get ( ) .METHOD_3 ( changeId ) ) .change ( ) ) ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4   VAR_5.METHOD_4 ( db VAR_1 new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1.getChangeId ( ) psId ) ) ) ( psId int psId ) ( VAR_5 VAR_5 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2.METHOD_2 ( ( ! ( VAR_1.METHOD_3 ( ) ) ) ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change   TYPE_1.METHOD_4 ( db ) .changes ( ) .get ( changeId ) ; TYPE_2.METHOD_5 ( change STRING_3 changeId ) ; return new TYPE_1 ( args change.getProject ( ) change ) .METHOD_6 ( ) ; } ) ( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) ( TYPE_2 TYPE_2 ) ( change change   TYPE_1.METHOD_4 ( db ) .changes ( ) .get ( changeId ) ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 java.io.IOException { TYPE_1 VAR_2   new TYPE_1 ( ) ; TYPE_4 in   new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 STRING_1 ) STRING_2 ) ) ; try { VAR_2.METHOD_2 ( in ) ; } finally { in.close ( ) ; } return VAR_2 ; } ) ( in in   new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 STRING_1 ) STRING_2 ) ) ) ( METHOD_1_return_line1_col288 return VAR_2 ; ) ( VAR_2 VAR_2   new TYPE_1 ( ) ) ( VAR_2 VAR_2 ) 
( change VAR_4.change ) ( METHOD_1_return public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 java.lang.String VAR_2 TYPE_2 VAR_3 ) throws TYPE_3 TYPE_4 { TYPE_5 VAR_4   new TYPE_5 ( VAR_1.METHOD_2 ( ) VAR_2 VAR_3 ) ; try ( TYPE_6 u   VAR_5.create ( VAR_6.get ( ) VAR_1.getProject ( ) .METHOD_3 ( ) VAR_1.METHOD_2 ( ) TYPE_7.METHOD_4 ( ) ) ) { u.METHOD_5 ( VAR_1.getId ( ) VAR_4 ) .METHOD_6 ( ) ; } return VAR_4.change ; } ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_3 TYPE_2 VAR_3 ) ( METHOD_1_return_line1_col433 return VAR_4.change ; ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_4 VAR_4   new TYPE_5 ( VAR_1.METHOD_2 ( ) VAR_2 VAR_3 ) ) 
( id org.eclipse.jgit.lib.ObjectId id ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { if ( ! ( id.equals ( org.eclipse.jgit.lib.ObjectId.METHOD_2 ( ) ) ) ) { TYPE_2 p   new TYPE_2 ( ) ; p.METHOD_3 ( walk.METHOD_4 ( ) walk.METHOD_5 ( id ) ) ; return p ; } else { return new TYPE_3 ( ) ; } } ) ( walk org.eclipse.jgit.revwalk.RevWalk walk ) 
( out TYPE_1 out ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( cd cd ) ( psId psId   cd.change ( ) .currentPatchSetId ( ) ) ( cd cd ) ( format_return public TYPE_1 format ( TYPE_1 out TYPE_2 VAR_1 com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId   cd.change ( ) .currentPatchSetId ( ) ; TYPE_4 ctl   cd.METHOD_1 ( ) .METHOD_2 ( VAR_1.user ( ) ) ; return format ( out VAR_1 cd VAR_2.METHOD_3 ( db.get ( ) ctl psId new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) ) ) ; } ) ( ctl ctl   cd.METHOD_1 ( ) .METHOD_2 ( VAR_1.user ( ) ) ) ( VAR_1 TYPE_2 VAR_1 ) 
( p TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { try { TYPE_5 VAR_1   new TYPE_5 ( ) ; for ( int i   0 ; i < ( p.METHOD_2 ( ) ) ; i++ ) { VAR_1.add ( TYPE_6.METHOD_3 ( schema p.METHOD_4 ( i ) ) VAR_2 ) ; } return VAR_1 ; } catch ( TYPE_5 e ) { throw new TYPE_4 ( ( STRING_1 + p ) e ) ; } } ) ( schema TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema ) 
( VAR_1 VAR_1   VAR_2 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1   VAR_2 ; if ( VAR_1    null ) { VAR_1   VAR_3.METHOD_2 ( getProject ( ) .METHOD_3 ( ) METHOD_4 ( ) .METHOD_5 ( ) ) ; VAR_2   VAR_1 ; } return VAR_4.create ( VAR_1 ) ; } ) ( VAR_4 VAR_4 ) 
( c c   db.changes ( ) .get ( psId.getParentKey ( ) ) ) ( db db ) ( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( VAR_2 VAR_2 ) ( METHOD_1_return public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   db.changes ( ) .get ( psId.getParentKey ( ) ) ; if ( c    null ) { return null ; } TYPE_1 notes   VAR_1.create ( db c ) ; com.google.gerrit.reviewdb.client.PatchSet ps   VAR_2.get ( db notes psId ) ; return ps !   null ? ps.METHOD_2 ( ) : null ; } ) ( ps ps   VAR_2.get ( db notes psId ) ) ( VAR_1 VAR_1 ) ( notes notes   VAR_1.create ( db c ) ) 
( VAR_1 byte [ ] VAR_1 ) ( VAR_4 VAR_4 ) ( METHOD_1_return_line1_col340 return VAR_4 ; ) ( VAR_3 VAR_3   new TYPE_7 ( VAR_1 ) ) ( TYPE_1 TYPE_1 ) ( VAR_5 VAR_5 ) ( VAR_2 int VAR_2 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( byte [ ] VAR_1 int VAR_2 ) throws TYPE_2 TYPE_3 TYPE_4 TYPE_5 TYPE_6 { TYPE_7 VAR_3   new TYPE_7 ( VAR_1 ) ; TYPE_1 VAR_4   TYPE_1.METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_5   TYPE_8.METHOD_2 ( VAR_6 ) ; VAR_5.METHOD_3 ( VAR_3 ) ; VAR_4.METHOD_3 ( VAR_2 key.get ( ) VAR_5 ) ; return VAR_4 ; } ) ( VAR_4 VAR_4 ) ( VAR_4 VAR_4   TYPE_1.METHOD_2 ( STRING_1 ) ) ( VAR_5 VAR_5   TYPE_8.METHOD_2 ( VAR_6 ) ) ( TYPE_8 TYPE_8 ) 
( VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) ( apply_return public TYPE_1 apply ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_2 TYPE_3 java.io.IOException { try { return this.apply ( new TYPE_4 ( VAR_2.METHOD_1 ( VAR_1 VAR_3.get ( ) ) ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( VAR_1.get ( ) ) ; } } ) 
( VAR_1 final TYPE_1 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) throws java.lang.Exception { try { final java.util.List < ? > VAR_2   VAR_3.METHOD_2 ( ( ( java.lang.String ) ( VAR_1 ) ) ) ; return ( VAR_2 !   null ) & & ( ! ( VAR_2.isEmpty ( ) ) ) ? VAR_2 : null ; } catch ( TYPE_2 e ) { return null ; } } ) 
( VAR_5 VAR_5 ) ( STRING_1 STRING_1 ) ( VAR_2 VAR_2 ) ( project project   VAR_5.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_3 ) ) .getProject ( ) ) ( r r   VAR_2.put ( ( STRING_2 + VAR_1 ) ) ) ( VAR_3 VAR_3   STRING_3 ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_2 VAR_2 ) ( in in   new TYPE_2 ( ) ) ( STRING_3 STRING_3 ) ( Assert org.junit.Assert ) ( r r ) ( VAR_1 VAR_1 ) 
( change TYPE_1.Change change ) ( update_return public TYPE_1.Change update ( TYPE_1.Change change ) { if ( ( ( change.getStatus ( ) )    ( VAR_1 ) ) & & ( change.currentPatchSetId ( ) .equals ( VAR_2 ) ) ) { change.METHOD_1 ( VAR_3 ) ; TYPE_2.METHOD_2 ( change ) ; return change ; } else { return null ; } } ) 
( METHOD_1_return private static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String path TYPE_2 < TYPE_1 > VAR_1 ) { for ( int i   0 ; i < ( VAR_1.length ( ) ) ; i++ ) { VAR_1.get ( i ) .METHOD_2 ( path ) ; } return TYPE_3.METHOD_3 ( VAR_1 ) ; } ) ( TYPE_3 TYPE_3 ) ( path java.lang.String path ) ( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) 
( VAR_1 VAR_1 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) .get ( STRING_1 ) ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.AccountGroup METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2   VAR_1.METHOD_2 ( ) .get ( STRING_1 ) ; if ( VAR_2    null ) { VAR_2   VAR_1.METHOD_2 ( ) .get ( STRING_2 ) ; } TYPE_2 VAR_3   new TYPE_2 ( VAR_2.METHOD_2 ( ) .get ( TYPE_3.getName ( ) ) .METHOD_3 ( ) ) ; return VAR_4.get ( VAR_3 ) ; } ) ( VAR_3 VAR_3   new TYPE_2 ( VAR_2.METHOD_2 ( ) .get ( TYPE_3.getName ( ) ) .METHOD_3 ( ) ) ) ( VAR_4 VAR_4 ) 
( VAR_2 VAR_2 ) ( get_return public TYPE_1 < TYPE_2 > get ( ) { TYPE_3 < TYPE_2 > m   new TYPE_3 < TYPE_2 > ( ) ; java.util.List < TYPE_4 < TYPE_2 > > VAR_1   VAR_2.METHOD_1 ( type ) ; if ( VAR_1 !   null ) { for ( TYPE_4 < TYPE_2 > b : VAR_1 ) { m.put ( STRING_1 b.getKey ( ) b.METHOD_2 ( ) .get ( ) ) ; } } return m ; } ) ( m m   new TYPE_3 < TYPE_2 > ( ) ) ( m m ) ( VAR_1 VAR_1   VAR_2.METHOD_1 ( type ) ) ( get_return_line1_col312 return m ; ) 
( TYPE_1 TYPE_1 ) 
( repo org.eclipse.jgit.lib.Repository repo ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( VAR_1 ) { TYPE_2 VAR_2   TYPE_2.METHOD_2 ( change ) ; TYPE_3 refs   ( ( this.refs ) !   null ) ? this.refs : new TYPE_4 ( repo ) ; if ( ( VAR_2    null ) || ( ! ( VAR_2.METHOD_3 ( refs ) ) ) ) { return METHOD_4 ( repo ) ; } } return super.METHOD_1 ( repo ) ; } ) 
( VAR_1 boolean VAR_1 ) ( path java.lang.String path ) 
( METHOD_1_return_line1_col206 return VAR_1 ; ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( TYPE_2 group ) { TYPE_1 VAR_1   new TYPE_1 ( ) ; if ( ( TYPE_3.METHOD_2 ( group ) ) & & ( ( ( TYPE_4 ) ( group ) ) .METHOD_3 ( ) ) ) { VAR_2   true ; } return VAR_1 ; } ) ( VAR_1 VAR_1   new TYPE_1 ( ) ) ( VAR_1 VAR_1 ) ( group TYPE_2 group ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( Truth com.google.common.truth.Truth ) ( METHOD_1_return public boolean METHOD_1 ( java.lang.String TYPE_1 VAR_1 TYPE_2.ChangeInfo VAR_2 TYPE_3 VAR_3 ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) .METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) .isEqualTo ( VAR_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) .METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_6 ) .isEqualTo ( 1 ) ; if ( name.equals ( STRING_1 ) ) { return false ; } if ( name.equals ( STRING_2 ) ) { VAR_1.label   STRING_3 ; } return true ; } ) ( VAR_1 TYPE_1 VAR_1 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( java.lang.String ) ( Truth com.google.common.truth.Truth ) ( VAR_2 TYPE_2.ChangeInfo VAR_2 ) ( VAR_3 TYPE_3 VAR_3 ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1   ( projects.length )    1 ) ( config config ) ( projects projects   config.METHOD_2 ( ) ) ( METHOD_1_return_line1_col275 return VAR_1 ; ) ( METHOD_1_return boolean METHOD_1 ( ) { java.lang.String [ ] projects   config.METHOD_2 ( ) ; boolean VAR_1   ( projects.length )    1 ; if ( VAR_1 ) { java.lang.String VAR_2   projects [ 0 ] ; if ( ( TYPE_1.METHOD_3 ( VAR_2 ) ) !   ( VAR_3 ) ) { VAR_1   false ; } } return VAR_1 ; } ) 
( METHOD_1_return private java.lang.String METHOD_1 ( final TYPE_1.Account account ) { if ( account !   null ) { java.lang.String result   ( ( account.METHOD_2 ( ) )    null ) ? VAR_1 : account.METHOD_2 ( ) ; if ( ( account.METHOD_3 ( ) ) !   null ) { result +  ( STRING_1 + ( account.METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col345 return VAR_1 ; ) ( account final TYPE_1.Account account ) 
( changeId int changeId ) ( VAR_2 VAR_2 ) ( msg msg ) ( VAR_2 VAR_2   new TYPE_3 ( ( ( ( VAR_3 ) + changeId ) + STRING_1 ) ) ) ( VAR_1 TYPE_1 < TYPE_2.ChangeInfo > VAR_1 ) ( message java.lang.String message ) ( msg msg   new TYPE_4 ( ) ) 
( in in   new TYPE_2 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 java.lang.String VAR_1 ) 
( approvals approvals   db.METHOD_2 ( ) .METHOD_3 ( change.getId ( ) ) .METHOD_4 ( ) ) ( db final TYPE_1.ReviewDb db ) ( change final TYPE_1.Change change ) ( db db ) ( db db ) 
( VAR_2 VAR_2 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( ps ps   db.patchSets ( ) .get ( id ) ) ( ps ps ) ( db TYPE_2.ReviewDb db ) ( METHOD_1_return private boolean METHOD_1 ( TYPE_1.Id id TYPE_2.ReviewDb db ) throws TYPE_3.OrmException { TYPE_2.PatchSet ps   db.patchSets ( ) .get ( id ) ; if ( ps    null ) { throw new TYPE_3.OrmException ( ( ( STRING_1 + id ) + STRING_2 ) ) ; } return ps.METHOD_2 ( ) ; } ) ( db db ) ( id TYPE_1.Id id ) 
( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( info TYPE_1.ChangeInfo info ) 
( group group ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_1 group ) { if ( group !   null ) { TYPE_1 ref   VAR_1.get ( group.METHOD_2 ( ) ) ; if ( ref !   null ) { return ref ; } VAR_1.put ( group.METHOD_2 ( ) group ) ; } return group ; } ) ( METHOD_1_return_line1_col222 return group ; ) ( group TYPE_1 group ) 
( token final java.lang.String token ) ( id final TYPE_1.Key id ) ( VAR_2 final TYPE_2 VAR_2 ) ( edit final boolean edit ) ( VAR_1 final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( line final int line ) ( TYPE_3 TYPE_3 ) 
( VAR_1 VAR_1 ) ( com.google.gerrit.reviewdb.client.Project.NameKey ) ( repo repo   VAR_1.get ( name.get ( ) .METHOD_1 ( ) ) ) ( get_return private synchronized TYPE_1 get ( com.google.gerrit.reviewdb.client.Project.NameKey ) throws TYPE_2 { TYPE_1 repo   VAR_1.get ( name.get ( ) .METHOD_1 ( ) ) ; if ( repo !   null ) { return repo ; } else { throw new TYPE_2 ( name.get ( ) ) ; } } ) 
( VAR_1 TYPE_2 < TYPE_3.PatchSetApproval > VAR_1 ) ( p TYPE_1 p ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) ( VAR_2 VAR_2   p.METHOD_2 ( ) ) ( p p ) ( p TYPE_1 p ) ( METHOD_1_return public long METHOD_1 ( TYPE_1 p ) { long VAR_1   METHOD_2 ( ) ; long VAR_2   p.METHOD_2 ( ) ; if ( ( VAR_1 > 0 ) & & ( VAR_2 > 0 ) ) { return TYPE_2.METHOD_3 ( VAR_1 VAR_2 ) ; } else { return TYPE_2.METHOD_4 ( VAR_1 VAR_2 ) ; } } ) 
( VAR_1 final TYPE_2 VAR_1 ) ( project final TYPE_1.NameKey project ) ( ref final java.lang.String ref ) 
( revision TYPE_3 revision ) ( METHOD_1_return TYPE_1 METHOD_1 ( TYPE_2 user TYPE_3 revision ) { return new TYPE_1 ( user.METHOD_2 ( ) revision.METHOD_3 ( ) TYPE_4.of ( user.getAccountId ( ) ) null VAR_1 VAR_2 TYPE_5.of ( ) ) ; } ) ( user TYPE_2 user ) 
( update update   METHOD_2 ( VAR_2 VAR_1 ) ) 
( VAR_1 java.lang.String VAR_1 ) ( file java.lang.String file ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project java.lang.String VAR_1 java.lang.String file ) { java.util.List < TYPE_1 > VAR_2   new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_4.get ( ) .METHOD_2 ( project.getName ( ) VAR_1 file ) ) { if ( ( ! ( TYPE_2.METHOD_3 ( VAR_3.name ) ) ) & & ( ! ( TYPE_2.METHOD_3 ( VAR_3.url ) ) ) ) { VAR_2.add ( VAR_3 ) ; } } return VAR_2 ; } ) ( VAR_2 VAR_2 ) ( project com.google.gerrit.reviewdb.client.Project project ) ( VAR_2 VAR_2   new java.util.ArrayList < > ( ) ) ( METHOD_1_return_line1_col458 return VAR_2 ; ) 
( VAR_2 VAR_2 ) ( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) ( VAR_1 final TYPE_1 VAR_1 ) 
( METHOD_1_return public boolean METHOD_1 ( ) { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_2 ( ) ) ) || ( METHOD_4 ( ) .METHOD_2 ( ) ) ) || ( METHOD_5 ( ) .METHOD_6 ( ) .METHOD_7 ( ) ) ) || ( METHOD_3 ( ) .METHOD_1 ( ) ) ; } ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( VAR_1 VAR_1 ) ( revision revision ) ( repo final org.eclipse.jgit.lib.Repository repo ) ( METHOD_1_return_line1_col291 return id ; ) ( VAR_3 VAR_3 ) ( id id ) ( repo repo ) ( id id   VAR_1.insert ( VAR_2 new byte [ ] { } ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   repo.METHOD_2 ( ) ) ( to to ) ( METHOD_1_return private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { TYPE_1 VAR_1   repo.METHOD_2 ( ) ; org.eclipse.jgit.lib.ObjectId id   VAR_1.insert ( VAR_2 new byte [ ] { } ) ; VAR_1.METHOD_3 ( ) ; return id ; METHOD_4 ( INT_1 ) ; TYPE_2.a VAR_3 ; TYPE_3 to ; TYPE_4 revision ; } ) 
( id id   res.getAccountId ( ) ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2   res.METHOD_2 ( ) ) ( VAR_4 VAR_4 ) ( VAR_1 final boolean VAR_1 ) ( res final TYPE_1 res ) ( res res ) ( res res ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String TYPE_2 > VAR_1   VAR_2.get ( ) .apply ( new TYPE_3 ( ) ) ; for ( TYPE_4 < java.lang.String TYPE_2 > VAR_3 : VAR_1.METHOD_2 ( ) ) { TYPE_2 VAR_4   VAR_3.getValue ( ) ; if ( ( VAR_4.type )    null ) { VAR_4.type   VAR_5 ; } VAR_4.name   VAR_3.getKey ( ) ; } return VAR_1.values ( ) ; } ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.get ( ) .apply ( new TYPE_3 ( ) ) ) ( VAR_1 VAR_1 ) 
( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) ) ( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 [ ] VAR_2   VAR_1.METHOD_2 ( ) ; if ( VAR_2    null ) { return null ; } for ( TYPE_2 VAR_3 : VAR_2 ) { if ( VAR_3.getName ( ) .METHOD_3 ( STRING_1 ) ) { return VAR_3.getValue ( ) ; } } return null ; } ) ( VAR_1 VAR_1 ) 
( TYPE_2 TYPE_2 ) ( VAR_3 VAR_3   new java.util.ArrayList < > ( ) ) ( Truth com.google.common.truth.Truth ) ( c c   METHOD_2 ( VAR_1 ) ) ( m m   TYPE_2.METHOD_3 ( repo c VAR_2 ) ) 
( revision_return public TYPE_1 revision ( java.lang.String id ) throws TYPE_2 { try { return VAR_1.create ( VAR_2.METHOD_1 ( change TYPE_3.METHOD_2 ( id ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) ( id java.lang.String id ) 
( VAR_1 VAR_1 ) ( db final TYPE_1.ReviewDb db ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( VAR_1 TYPE_1.Factory VAR_1 ) ( VAR_3 java.lang.String VAR_3 ) ( user TYPE_2 user ) ( VAR_2 TYPE_3 < TYPE_4 > VAR_2 ) 
( VAR_3 VAR_3 ) ( run_return_line1_col406 return VAR_3 ; ) ( run_return public TYPE_1 run ( TYPE_2.ReviewDb db ) throws TYPE_3.OrmException { TYPE_4.Id VAR_1   getAccountId ( ) ; if ( ! ( VAR_2.getAccountId ( ) .equals ( getAccountId ( ) ) ) ) { throw new TYPE_5 ( ( ( ( ( STRING_1 + ( VAR_2.getAccountId ( ) ) ) + STRING_2 ) + STRING_3 ) + ( getAccountId ( ) ) ) ) ; } db.METHOD_1 ( ) .METHOD_2 ( java.util.Collections.singleton ( VAR_2 ) ) ; return VAR_3 ; } ) ( db db ) ( db TYPE_2.ReviewDb db ) ( VAR_1 VAR_1   getAccountId ( ) ) 
( Collections java.util.Collections ) ( p p   VAR_1.METHOD_2 ( ) ) ( METHOD_1_return private static TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 p   VAR_1.METHOD_2 ( ) ; final java.util.List < TYPE_2 > VAR_2   new java.util.ArrayList < TYPE_2 > ( 2 ) ; TYPE_4.METHOD_3 ( VAR_2 p VAR_3 ) ; TYPE_4.METHOD_3 ( VAR_2 p VAR_4 ) ; return java.util.Collections.METHOD_4 ( VAR_2 ) ; } ) ( VAR_2 VAR_2   new java.util.ArrayList < TYPE_2 > ( 2 ) ) ( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) ( VAR_1 VAR_1 ) 
( METHOD_1_return public Account.Id METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { try { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { final TYPE_2 VAR_2   db.METHOD_3 ( ) .get ( new TYPE_2.Key ( VAR_1 ) ) ; return VAR_2 !   null ? VAR_2.getAccountId ( ) : null ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) e ) ; } } ) ( VAR_1 final java.lang.String VAR_1 ) 
( result TYPE_1 result ) 
( VAR_1 TYPE_1 VAR_1 ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) 
( get_return public java.util.List < TYPE_1 > get ( ) { java.util.Set < java.lang.String > VAR_1   cfg.METHOD_1 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3   TYPE_2.METHOD_2 ( VAR_1.size ( ) ) ; for ( java.lang.String : VAR_1 ) { VAR_3.add ( TYPE_3.METHOD_3 ( cfg ) ) ; } return TYPE_4.METHOD_4 ( VAR_3 ) ; } ) ( TYPE_4 TYPE_4 ) ( cfg cfg ) ( VAR_3 VAR_3   TYPE_2.METHOD_2 ( VAR_1.size ( ) ) ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   cfg.METHOD_1 ( VAR_2 ) ) 
( METHOD_1_return java.util.Set < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException java.io.IOException { METHOD_2 ( ) ; if ( VAR_1 ) { try ( org.eclipse.jgit.lib.Repository repo   VAR_2.METHOD_3 ( VAR_3 ) ) { return TYPE_2.METHOD_1 ( repo TYPE_2.METHOD_4 ( repo ) ) ; } } return TYPE_1.METHOD_5 ( db.METHOD_6 ( ) .METHOD_1 ( ) .METHOD_7 ( ) ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 )    null ) || ( ( VAR_1.get ( STRING_1 ) )    null ) ) { return new TYPE_1 [ 0 ] ; } else { return VAR_1.get ( STRING_1 ) .METHOD_2 ( new TYPE_1 [ 0 ] ) ; } } ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 final TYPE_2 VAR_2 ) ( VAR_2 VAR_2 ) 
( VAR_3 VAR_3 ) ( repo repo ) ( TYPE_1 TYPE_1 ) ( METHOD_1_return_line1_col390 return repo ; ) ( java.lang.String ) ( VAR_1 VAR_1 ) ( METHOD_1_return private org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String ) throws java.io.IOException { if ( VAR_1.METHOD_2 ( ) ) { return VAR_1.get ( ) ; }   TYPE_1.METHOD_3 ( VAR_2 ) ; org.eclipse.jgit.lib.Repository repo   VAR_3.METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( ) ) ; VAR_1.put ( repo ) ; return repo ; } ) ( repo repo   VAR_3.METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( ) ) ) 
( VAR_1 TYPE_1 VAR_1 ) ( ctx ctx   VAR_2.METHOD_2 ( VAR_3 null ) ) ( VAR_4 VAR_4   VAR_2.set ( ctx ) ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2 ) 
( METHOD_1_return public boolean METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { try { final TYPE_2.ReviewDb db   schema.METHOD_2 ( ) ; try { final java.util.List < TYPE_3 > VAR_2   db.METHOD_3 ( ) .METHOD_4 ( VAR_1 ) .METHOD_5 ( ) ; return ! ( VAR_2.isEmpty ( ) ) ; } finally { db.close ( ) ; } } catch ( TYPE_4.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) e ) ; } } ) ( VAR_1 final java.lang.String VAR_1 ) 
( TYPE_3 TYPE_3 ) ( n n   project.get ( ) ) ( r final TYPE_1 r ) ( project final TYPE_2.NameKey project ) ( project project ) 
( VAR_1 final TYPE_2.Id VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2.Id VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.AccountGroup group   VAR_2.get ( VAR_1 ) ; if ( group    null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( VAR_2 user.get ( ) group ) ; } ) ( group group   VAR_2.get ( VAR_1 ) ) ( VAR_2 VAR_2 ) 
( query TYPE_2 query ) ( METHOD_1_return_line1_col451 return result ; ) ( TYPE_5 TYPE_5 ) ( result result   query.get ( ) ) ( result result ) ( VAR_1 VAR_1   TYPE_5.METHOD_2 ( result ) ) ( Truth com.google.common.truth.Truth ) ( query query ) ( changes com.google.gerrit.reviewdb.client.Change ... changes ) ( METHOD_1_return protected java.util.List < TYPE_1.ChangeInfo > METHOD_1 ( TYPE_2 query com.google.gerrit.reviewdb.client.Change ... changes ) throws java.lang.Exception { java.util.List < TYPE_1.ChangeInfo > result   query.get ( ) ; TYPE_3 < TYPE_4 > VAR_1   TYPE_5.METHOD_2 ( result ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) .METHOD_3 ( query.METHOD_4 ( ) ) .METHOD_5 ( TYPE_5.METHOD_2 ( changes ) ) .METHOD_6 ( ) ; return result ; } ) 
( VAR_1 VAR_1 ) ( p com.google.gerrit.reviewdb.client.Project.NameKey p ) ( repo repo   VAR_1.METHOD_2 ( p ) ) ( METHOD_1_return private java.lang.String [ ] METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException TYPE_1 { org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( p ) ; try { TYPE_2 VAR_2   new TYPE_2 ( repo.METHOD_3 ( ) STRING_1 ) ; return VAR_2.METHOD_4 ( new TYPE_3 ( ) { public boolean METHOD_5 ( TYPE_2 VAR_3 java.lang.String ) { return name.METHOD_6 ( STRING_2 ) ; } } ) ; } finally { repo.close ( ) ; } } ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change change TYPE_2 user ) throws com.google.gwtorm.server.OrmException java.io.IOException TYPE_3 TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd   VAR_1.create ( db change.getProject ( ) change.getId ( ) ) ; cd.METHOD_2 ( user ) ; if ( TYPE_5.METHOD_3 ( cfg ) ) { return METHOD_4 ( db new TYPE_1 ( cd ) user ) ; } else { return METHOD_5 ( db new TYPE_1 ( cd ) user ) ; } } ) ( user TYPE_2 user ) ( cd cd   VAR_1.create ( db change.getProject ( ) change.getId ( ) ) ) ( VAR_1 VAR_1 ) ( cd cd ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( change com.google.gerrit.reviewdb.client.Change change ) 
( VAR_1 VAR_1 ) 
( info.name ) ( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 ) { TYPE_3 info   ( ( TYPE_4 ) ( VAR_1 ) ) .METHOD_1 ( project revision file ) ; TYPE_1 VAR_2   new TYPE_1 ( ) ; VAR_2.name   info.name ; VAR_3   VAR_4 ; VAR_2.url   info.url ; VAR_5   VAR_6 ; return VAR_2 ; } ) ( url info.url ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2   new TYPE_1 ( ) ) ( apply_return_line1_col261 return VAR_2 ; ) ( VAR_4 VAR_4 ) ( VAR_6 VAR_6 ) ( VAR_2 VAR_2 ) ( info info   ( ( TYPE_4 ) ( VAR_1 ) ) .METHOD_1 ( project revision file ) ) 
( VAR_4 VAR_4 ) ( VAR_2 VAR_2   METHOD_2 ( VAR_3 ) ) ( Truth com.google.common.truth.Truth ) ( VAR_4 VAR_4 ) (   ( STRING_1 ) ) 
( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( line java.lang.String line ) 
( VAR_1 final boolean VAR_1 ) ( id id   res.getAccountId ( ) ) ( VAR_4 VAR_4 ) ( res final TYPE_1 res ) ( res res ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2   res.METHOD_2 ( ) ) ( res res ) 
( rsrc TYPE_1 rsrc ) 
( VAR_1 final boolean VAR_1 ) 
( TYPE_1 TYPE_1 ) ( input TYPE_3 input ) ( apply_return public TYPE_1 < ? > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException TYPE_5 { if ( ! ( VAR_1.METHOD_1 ( ) ) ) { throw new TYPE_4 ( ) ; } try { VAR_2.METHOD_2 ( db.get ( ) rsrc.getId ( ) ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( TYPE_7.METHOD_3 ( rsrc.getId ( ) .toString ( ) ) ) ; } return TYPE_1.METHOD_4 ( ) ; } ) ( rsrc TYPE_2 rsrc ) 
( e TYPE_1 e ) ( TYPE_2 TYPE_2 ) 
( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1.METHOD_2 ( ) ) ) return VAR_2 ; if ( VAR_3.equals ( ( ( TYPE_2 ) ( VAR_1 ) ) .VAR_3 ) ) return VAR_4 ; return ( VAR_3.METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) .VAR_3.METHOD_3 ( ) ) ; } ) 
( METHOD_1_return public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id id int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null null null id ) ; VAR_1   new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id currentPatchSetId ) ) ; return cd ; } ) ( cd cd ) ( id com.google.gerrit.reviewdb.client.Change.Id id ) ( currentPatchSetId int currentPatchSetId ) ( METHOD_1_return_line1_col516 return cd ; ) ( cd cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null null null id ) ) 
( e TYPE_1 < java.lang.String > e ) ( e e ) ( VAR_1 VAR_1   e.getValue ( ) ) 
( view TYPE_1 view ) ( TYPE_2 TYPE_2 ) ( token token   view.METHOD_2 ( ) ) ( view view ) ( view view ) 
( event TYPE_2 event ) ( VAR_1 TYPE_1.NameKey VAR_1 ) 
( METHOD_1_return_line1_col322 return VAR_1 ; ) ( METHOD_1_return public java.util.List METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1   new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 t   this ; while ( t.METHOD_2 ( ) ) { VAR_1.add ( ( ( TYPE_3 ) ( t ) ) .METHOD_3 ( ) .METHOD_4 ( ) .METHOD_1 ( ) ) ; t   ( ( TYPE_3 ) ( t ) ) .METHOD_5 ( ) .METHOD_4 ( ) ; } return VAR_1 ; } ) ( t t   this ) ( VAR_1 VAR_1   new java.util.ArrayList < TYPE_1 > ( ) ) ( VAR_1 VAR_1 ) 
( VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   METHOD_6 ( VAR_3 ) ) 
( util util ) ( d d   util.user ( VAR_4 VAR_3 ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { com.google.gerrit.reviewdb.client.Change c   change ( ) ; VAR_1   VAR_2.METHOD_2 ( c VAR_3.create ( c.METHOD_3 ( ) ) ) ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col261 return VAR_1 ; ) ( VAR_1 VAR_1 ) 
( id int id ) ( input input   TYPE_3.create ( ) ) ( user java.lang.String user ) ( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) ( TYPE_3 TYPE_3 ) ( TYPE_4 TYPE_4 ) ( input input ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) 
( METHOD_1_return public AccountGroup.Id METHOD_1 ( ) throws TYPE_1 TYPE_2 TYPE_3.OrmException { if ( ! ( user.METHOD_2 ( ) .METHOD_3 ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 user.METHOD_4 ( ) ) ) ; } final TYPE_4 VAR_1   VAR_2.create ( ) ; final TYPE_5.Id me   user.getAccountId ( ) ; return VAR_1.METHOD_5 ( VAR_3 null false null java.util.Collections.singleton ( me ) null ) ; } ) ( VAR_1 VAR_1   VAR_2.create ( ) ) ( user user ) ( me me   user.getAccountId ( ) ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) 
( VAR_1 java.util.Map < TYPE_1 byte [ ] > VAR_1 ) ( METHOD_1_return public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo java.lang.String message java.util.Map < TYPE_1 byte [ ] > VAR_1 ) throws java.io.IOException TYPE_2 { try ( TYPE_3 git   new TYPE_3 ( repo ) ) { if ( VAR_1 !   null ) { TYPE_4.METHOD_2 ( git VAR_1 ) ; } return git.commit ( ) .METHOD_3 ( message ) .METHOD_4 ( ) ; } } ) ( message java.lang.String message ) ( repo org.eclipse.jgit.lib.Repository repo ) 
( VAR_1 long VAR_1 ) ( METHOD_1_return private static java.lang.String METHOD_1 ( long VAR_1 long VAR_2 ) { if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) .format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) .format ( new TYPE_2 ( VAR_2 ) ) ; } ) ( VAR_2 long VAR_2 ) 
( VAR_2 VAR_2   query ( ( STRING_1 + ( VAR_1.getChangeId ( ) ) ) ) ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   METHOD_2 ( ) ) 
( VAR_1 TYPE_1 VAR_1 ) ( TYPE_3 TYPE_3 ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) 
( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2.Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r   new java.util.ArrayList < TYPE_1 > ( VAR_2.length ) ; for ( final TYPE_3 e : VAR_2 ) { r.add ( e.METHOD_2 ( VAR_1 ) ) ; } return r ; } ) ( r r   new java.util.ArrayList < TYPE_1 > ( VAR_2.length ) ) ( VAR_1 final TYPE_2.Id VAR_1 ) ( r r ) ( METHOD_1_return_line1_col261 return r ; ) 
( VAR_1 java.lang.String VAR_1 ) ( path java.lang.String path ) ( id int id ) ( VAR_2 TYPE_1 < TYPE_2 > VAR_2 ) 
( ctx TYPE_1 ctx ) ( ctx ctx ) ( patchSet patchSet ) 
( isEmpty_return private boolean isEmpty ( ) { return ( ( ( ( ( ( ( approvals.isEmpty ( ) ) & & ( ( VAR_1 )    null ) ) & & ( VAR_2.isEmpty ( ) ) ) & & ( reviewers.isEmpty ( ) ) ) & & ( ( status )    null ) ) & & ( ( VAR_3 )    null ) ) & & ( ( VAR_4 )    null ) ) & & ( ( VAR_5 )    null ) ; } ) 
( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( METHOD_1_return private int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ; int VAR_3   VAR_1.METHOD_1 ( ) ; if ( VAR_3    ( -1 ) ) { return VAR_2.equals ( STRING_1 ) ? INT_1 : INT_2 ; } else { return VAR_3 ; } } ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3   VAR_1.METHOD_1 ( ) ) 
( r TYPE_3.Result r ) ( Truth com.google.common.truth.Truth ) ( METHOD_1_return private TYPE_1 < ? extends TYPE_1 < ? java.lang.String TYPE_2 < java.lang.String > > java.lang.String TYPE_2 < java.lang.String > > METHOD_1 ( TYPE_3.Result r ) throws java.lang.Exception { return com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < java.lang.String > ) ( VAR_1.changes ( ) .id ( r.getChange ( ) .getId ( ) .get ( ) ) .METHOD_2 ( ) ) ) ) ; } ) 
( VAR_1 TYPE_3 VAR_1 ) ( req TYPE_1 req ) ( VAR_2 VAR_2   ( VAR_1 !   null ) ? VAR_1.METHOD_2 ( ) : STRING_1 ) ( c c ) ( rsp TYPE_2.HttpServletResponse rsp ) ( c c ) ( rsp rsp ) ( c c ) ( c c ) ( c c   new TYPE_4 ( VAR_3 VAR_2 ) ) 
( VAR_1 VAR_1   null ) ( query java.lang.String query ) ( VAR_2 VAR_2   null ) ( METHOD_1_return public TYPE_1 < java.lang.String TYPE_2 > METHOD_1 ( java.lang.String query ) throws TYPE_3 { TYPE_4 VAR_1   null ; TYPE_5 VAR_2   null ; try { VAR_1   VAR_3.METHOD_2 ( ) ; VAR_2   VAR_1.METHOD_3 ( ) ; return METHOD_4 ( VAR_2 query ) ; } catch ( TYPE_6 e ) { throw new TYPE_3 ( STRING_1 e ) ; } finally { METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_1 ) ; } } ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) 
( METHOD_1_return TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 TYPE_4 > VAR_1 ) { TYPE_5 p   METHOD_2 ( ) ; if ( ( VAR_2 ) !   null ) { return new TYPE_6 ( VAR_1 VAR_2.METHOD_3 ( STRING_1 ) false ) ; } else { return new TYPE_6 ( VAR_1 METHOD_4 ( STRING_2 ) true ) ; } } ) ( p p   METHOD_2 ( ) ) ( VAR_1 TYPE_2 < TYPE_3 TYPE_4 > VAR_1 ) 
( VAR_1 VAR_1 ) ( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( ( VAR_1.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ) & & ( METHOD_4 ( ) .METHOD_5 ( ) .METHOD_6 ( ) ) ) ) || ( METHOD_7 ( db ) ) ) { return false ; } if ( METHOD_8 ( ) ) { return true ; } return VAR_1.METHOD_1 ( ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( t t   METHOD_2 ( STRING_1 ) ) ( TYPE_3 TYPE_3 ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2 ) (   new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   new TYPE_3 ( VAR_3 cfg ) ) 
( TYPE_6 TYPE_6 ) ( TYPE_6 TYPE_6 ) ( req TYPE_3 req ) ( TYPE_5 TYPE_5 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String java.lang.String > config TYPE_3 req ) { TYPE_4 VAR_1   TYPE_5.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ; TYPE_6.METHOD_4 ( VAR_1 config req ) ; TYPE_6.METHOD_5 ( VAR_1 config ) ; return VAR_1.create ( ) ; } ) ( config TYPE_2 < java.lang.String java.lang.String > config ) ( VAR_1 VAR_1   TYPE_5.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ) ( VAR_1 VAR_1 ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( changeId changeId   METHOD_2 ( ) ) ( Assert org.junit.Assert ) ( c c   METHOD_3 ( ( STRING_1 + changeId ) ) ) 
( METHOD_1_return public boolean METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) throws java.io.IOException { TYPE_1 ref   VAR_1.METHOD_2 ( TYPE_2.METHOD_3 ( VAR_2 changeId ) ) ; if ( ref    null ) { return ! ( VAR_3.METHOD_4 ( VAR_2 ) ) ; } return ref.METHOD_5 ( ) .equals ( VAR_3.get ( VAR_2 ) ) ; } ) ( ref ref   VAR_1.METHOD_2 ( TYPE_2.METHOD_3 ( VAR_2 changeId ) ) ) ( VAR_1 VAR_1 ) ( ref ref ) ( VAR_2 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) 
( VAR_1 VAR_1   new TYPE_2 < java.lang.String > ( ) ) ( METHOD_1_return protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1   new TYPE_2 < java.lang.String > ( ) ; VAR_1.add ( STRING_1 ) ; VAR_1.add ( STRING_2 ) ; VAR_1.add ( STRING_3 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1.add ( c.getName ( ) ) ; } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col310 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( db db ) ( s s   db.METHOD_2 ( ) ) ( METHOD_1_return public java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 db ) throws TYPE_2 { TYPE_3 s   db.METHOD_2 ( ) ; try { TYPE_4 VAR_1   s.METHOD_3 ( STRING_1 ) ; try { TYPE_5 < java.lang.String > VAR_2   new TYPE_5 < java.lang.String > ( ) ; while ( VAR_1.METHOD_4 ( ) ) { VAR_2.add ( VAR_1.METHOD_5 ( 1 ) .METHOD_6 ( ) ) ; } return VAR_2 ; } finally { VAR_1.close ( ) ; } } finally { s.close ( ) ; } } ) ( db TYPE_1 db ) 
( VAR_3 VAR_3   insert ( METHOD_3 ( VAR_1 null null null null ) ) ) ( VAR_1 VAR_1   METHOD_2 ( STRING_1 ) ) ( VAR_2 VAR_2   METHOD_2 ( STRING_2 ) ) ( VAR_4 VAR_4   insert ( METHOD_3 ( VAR_2 null null null null ) ) ) 
( VAR_1 boolean VAR_1 ) ( VAR_2 TYPE_1 < TYPE_2 > VAR_2 ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) 
( VAR_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) .toString ( ) ) ( METHOD_1_return public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2   VAR_1.METHOD_2 ( ) .toString ( ) ; if ( TYPE_2.METHOD_3 ( VAR_2 ) ) { return VAR_2.METHOD_4 ( 0 VAR_2.METHOD_5 ( CHAR_1 ) ) ; } if ( VAR_3.METHOD_6 ( VAR_1 ) ) { return VAR_3.METHOD_7 ( VAR_1 ) ; } return null ; } ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_2 TYPE_1 VAR_2 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( path java.lang.String path ) ( diff TYPE_2 diff ) ( VAR_1 TYPE_1 VAR_1 ) 
( ctx TYPE_1 ctx ) ( VAR_4 VAR_4 ) 
( METHOD_1_return private boolean METHOD_1 ( ) { if ( VAR_1.get ( ) .METHOD_2 ( ) ) { TYPE_1 ctl   VAR_1.get ( ) .METHOD_3 ( ) ; return ( ctl.METHOD_4 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) || ( ctl.METHOD_5 ( ) ) ; } else { return false ; } } ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_1 java.lang.String VAR_1 ) ( to java.lang.String to ) ( e e   new TYPE_2 ( s ) ) ( s s   ( ( TYPE_1 ) ( db ) ) ) 
( psId psId   cd.change ( ) .currentPatchSetId ( ) ) ( cd cd ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( ctl ctl   cd.METHOD_1 ( ) .METHOD_2 ( VAR_1.user ( ) ) ) ( cd cd ) ( VAR_1 TYPE_2 VAR_1 ) ( format_return public TYPE_1 format ( TYPE_1 out TYPE_2 VAR_1 com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId   cd.change ( ) .currentPatchSetId ( ) ; TYPE_4 ctl   cd.METHOD_1 ( ) .METHOD_2 ( VAR_1.user ( ) ) ; return format ( out VAR_1 cd VAR_2.METHOD_3 ( db.get ( ) cd.notes ( ) ctl.METHOD_4 ( ) psId new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) null null ) ) ; } ) ( out TYPE_1 out ) 
( VAR_2 TYPE_2 VAR_2 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_1 TYPE_2 VAR_1 ) ( p p   VAR_2.METHOD_1 ( VAR_3 id ) ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 id ) throws TYPE_4 TYPE_5 java.io.IOException { TYPE_2 p   VAR_2.METHOD_1 ( VAR_3 id ) ; for ( TYPE_6 VAR_4 : p.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_4 ( ) ) { if ( VAR_1.METHOD_5 ( ) .equals ( VAR_4.getProject ( ) .METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 p.METHOD_3 ( ) ) ; } } throw new TYPE_4 ( id ) ; } ) ( id TYPE_3 id ) ( VAR_2 VAR_2 ) 
( TYPE_1 TYPE_1 ) ( r r   create ( ) .METHOD_4 ( null ) ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) !   null ) & & ( ( VAR_2.METHOD_2 ( ) .get ( VAR_1 ) ) !   null ) ) { return TYPE_1.of ( TYPE_2.of ( VAR_2.METHOD_2 ( ) .get ( VAR_1 ) ) ) ; } else { return TYPE_1.METHOD_3 ( ) ; } } ) ( VAR_1 java.lang.String VAR_1 ) 
( err err   new TYPE_1 ( ) ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change.Id id TYPE_2 VAR_1 ) { return VAR_1.submit ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db   VAR_2.METHOD_3 ( ) ) { METHOD_4 ( db id ) ; } return null ; } } ) ; } ) ( id final com.google.gerrit.reviewdb.client.Change.Id id ) ( VAR_1 TYPE_2 VAR_1 ) 
( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( METHOD_1_return private static TYPE_1 < java.lang.String TYPE_2 > METHOD_1 ( java.util.List < TYPE_2 > plugins ) throws java.io.IOException { TYPE_1 < java.lang.String TYPE_2 > VAR_1   TYPE_3.create ( ) ; for ( TYPE_2 VAR_2 : plugins ) { VAR_1.put ( TYPE_4.METHOD_2 ( VAR_2 ) VAR_2 ) ; } return VAR_1 ; } ) ( TYPE_3 TYPE_3 ) ( plugins java.util.List < TYPE_2 > plugins ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col304 return VAR_1 ; ) ( VAR_1 VAR_1   TYPE_3.create ( ) ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( VAR_2 VAR_2   new TYPE_3 ( VAR_1 ) ) 
( METHOD_1_return public final java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) .METHOD_3 ( ) ) !   null ) { return METHOD_2 ( ) .METHOD_3 ( ) ; } else { if ( ( METHOD_2 ( ) .METHOD_4 ( ) ) !   ( -1 ) ) { return TYPE_1.toString ( METHOD_2 ( ) .METHOD_4 ( ) ) ; } else { return STRING_1 ; } } } ) 
( VAR_2 VAR_2   METHOD_3 ( ) ) ( VAR_1 VAR_1   METHOD_3 ( ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( git git   METHOD_2 ( ) ) ( change change   METHOD_4 ( git ) ) 
( VAR_1 java.util.List < TYPE_1 > VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2   VAR_3 ; for ( int i   ( VAR_1.size ( ) ) - 1 ; i >   0 ; i -- ) { VAR_2   new TYPE_2 ( VAR_1.get ( i ) VAR_2 ) ; } return VAR_2 ; } ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col224 return VAR_2 ; ) 
( event final TYPE_1 event ) ( VAR_1 VAR_1   ( ( TYPE_2 ) ( event.METHOD_2 ( ) ) ) ) 
( METHOD_1_return public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) !   null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } ) 
( VAR_1 boolean VAR_1 ) ( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2.values ( ) ; } else { java.util.List < TYPE_2 > plugins   new java.util.ArrayList ( VAR_2.values ( ) ) ; plugins.METHOD_2 ( VAR_3.values ( ) ) ; return plugins ; } } ) 
( VAR_2 VAR_2   VAR_1.METHOD_4 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_1 VAR_1 ) ( TYPE_2 TYPE_2 ) 
( TYPE_3 TYPE_3 ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3 ) ( VAR_1 java.lang.String VAR_1 ) ( message java.lang.String message ) ( VAR_3 VAR_3   TYPE_3.create ( ) ) ( VAR_2 TYPE_1 < TYPE_2.ChangeInfo > VAR_2 ) ( TYPE_4 TYPE_4 ) ( id int id ) ( commit java.lang.String commit ) 
( res res   METHOD_5 ( STRING_1 VAR_1 ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( d d   res.get ( ) ) ( repo repo ) ( res res ) (   repo.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_4 ( ) ) ( Truth com.google.common.truth.Truth ) 
( VAR_2 VAR_2   null ) ( VAR_1 TYPE_1 VAR_1 ) 
( db db   new TYPE_5 ( VAR_3 ) .METHOD_2 ( ) ) ( METHOD_1_return private < TYPE_1 TYPE_2 > TYPE_3 < TYPE_2 TYPE_1 > METHOD_1 ( java.lang.String TYPE_4 < TYPE_2 > VAR_1 long VAR_2 ) { TYPE_5 db   new TYPE_5 ( VAR_3 ) .METHOD_2 ( ) ; java.lang.String url   STRING_1 + ( db.METHOD_3 ( ) .toString ( ) ) ; return new TYPE_3 < TYPE_2 TYPE_1 > ( url VAR_1 VAR_2 ) ; } ) ( url url   STRING_1 + ( db.METHOD_3 ( ) .toString ( ) ) ) ( VAR_1 TYPE_4 < TYPE_2 > VAR_1 ) ( VAR_2 long VAR_2 ) ( java.lang.String ) 
( VAR_2 VAR_2 ) ( VAR_3 VAR_3 ) ( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 git TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2   VAR_3.create ( db VAR_1 VAR_4 VAR_5 new java.lang.String ( VAR_6 ) ) ; return VAR_2.METHOD_2 ( git STRING_1 ) .getChangeId ( ) ; } ) ( git TYPE_1 git ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2   VAR_3.create ( db VAR_1 VAR_4 VAR_5 new java.lang.String ( VAR_6 ) ) ) 
( repo repo ) ( change com.google.gerrit.reviewdb.client.Change change ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws TYPE_2 java.io.IOException TYPE_3 { org.eclipse.jgit.lib.Repository repo ; try { repo   VAR_1.METHOD_2 ( change.getProject ( ) ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( change.getProject ( ) e ) ; } try { return new TYPE_1 ( repo change ) ; } finally { repo.close ( ) ; } } ) 
( VAR_1 final boolean VAR_1 ) 
( VAR_1 final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) 
( VAR_1 VAR_1   new TYPE_1 < TYPE_2 > ( ) { private int VAR_2 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_2 ) )    ( VAR_3.size ( ) ) ) { METHOD_2 ( ) ; } } } ) 
( VAR_1 TYPE_1 VAR_1 ) ( java.lang.String ) ( VAR_2 VAR_2   TYPE_3.create ( VAR_3 0 ) ) ( TYPE_3 TYPE_3 ) 
( METHOD_1_return public java.lang.String METHOD_1 ( ) { if ( ( value ( ) ) <   ( ( short ) ( 0 ) ) ) { return ( ( label ( ) ) + CHAR_1 ) + ( value ( ) ) ; } else { return ( ( label ( ) ) + STRING_1 ) + ( value ( ) ) ; } } ) 
( VAR_1 VAR_1   new java.lang.String [ ] { STRING_1 STRING_1 STRING_2 STRING_2 STRING_3 STRING_3 STRING_4 STRING_4 STRING_4 STRING_4 STRING_5 STRING_6 STRING_7 STRING_8 STRING_9 STRING_10 } ) 
( group com.google.gerrit.reviewdb.client.AccountGroup group ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_1 group ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( VAR_2 ) ) { VAR_3.METHOD_1 ( repo TYPE_2.METHOD_3 ( db group.getId ( ) ) ) ; TYPE_3 VAR_4   TYPE_3.METHOD_4 ( repo group.METHOD_5 ( ) ) ; TYPE_4 < TYPE_1 > result   VAR_4.METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( result ) .METHOD_7 ( ) ; return result.get ( ) ; } } ) ( group TYPE_1 group ) 
( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { return new TYPE_4 ( args.rw VAR_2.METHOD_2 ( ) VAR_3 VAR_4 VAR_5 VAR_6 args.repo ) .METHOD_1 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) ( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) 
( METHOD_1_return public java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1   TYPE_2.METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey n : METHOD_3 ( ) ) { TYPE_3 p   VAR_2.METHOD_4 ( n ) ; if ( p !   null ) { VAR_1.METHOD_5 ( p.METHOD_6 ( ) .METHOD_7 ( ) ) ; } } return VAR_1 ; } ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( METHOD_1_return_line1_col315 return VAR_1 ; ) 
( TYPE_1 TYPE_1 ) 
( ctx ctx ) ( ctx ctx ) ( c c   ctx.getChange ( ) ) ( ctx TYPE_1 ctx ) 
( rsrc TYPE_2 rsrc ) ( input TYPE_3 input ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1 ) ( apply_return public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 TYPE_5 com.google.gwtorm.server.OrmException { if ( ( rsrc.METHOD_1 ( ) ) || ( METHOD_2 ( rsrc.getChange ( ) ) ) ) { return TYPE_1.METHOD_3 ( STRING_1 ) ; } VAR_1.METHOD_4 ( rsrc ) ; return TYPE_1.METHOD_3 ( STRING_1 ) ; } ) 
( VAR_4 VAR_4 ) ( VAR_3 VAR_3   VAR_4.create ( ) .METHOD_5 ( user ) .METHOD_6 ( VAR_5 ) ) ( VAR_1 VAR_1   add ( TYPE_2.METHOD_2 ( ) user ) ) ( VAR_2 VAR_2   add ( TYPE_2.METHOD_3 ( ) METHOD_4 ( STRING_1 ) ) ) 
( VAR_1 VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_5 VAR_5 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( ctx TYPE_1 ctx ) ( METHOD_1_return_line1_col402 return change ; ) ( change change ) ( change change ) ( change change ) ( METHOD_1_return public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 ctx ) { change   new com.google.gerrit.reviewdb.client.Change ( TYPE_2.METHOD_2 ( commit ) changeId ctx.METHOD_3 ( ) .getAccountId ( ) new TYPE_3.NameKey ( ctx.getProject ( ) VAR_1 ) ctx.METHOD_4 ( ) ) ; change.METHOD_5 ( TYPE_4.METHOD_6 ( status VAR_2 ) ) ; change.METHOD_7 ( topic ) ; return change ; } ) 
( create boolean create ) ( group TYPE_2 group ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 group boolean create ) { METHOD_2 ( ) ; for ( TYPE_1 r : VAR_1 ) { if ( TYPE_3.METHOD_3 ( r group ) ) { return r ; } } if ( create ) { TYPE_1 r   new TYPE_1 ( group ) ; VAR_1.add ( r ) ; return r ; } else { return null ; } } ) 
( r r   TYPE_3.METHOD_2 ( VAR_1.size ( ) ) ) ( VAR_1 java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > VAR_1 ) ( schema TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema ) ( METHOD_1_return_line1_col502 return r ; ) ( r r ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r   TYPE_3.METHOD_2 ( VAR_1.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change.Id id : VAR_1 ) { r.add ( new TYPE_4 ( schema id ) ) ; } return r ; } ) 
( VAR_1 VAR_1   new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( Truth com.google.common.truth.Truth ) 
( VAR_2 boolean VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 boolean VAR_2 ) throws com.google.gwtorm.server.OrmException { if ( VAR_1    null ) { return VAR_3 ; } if ( VAR_2 ) { return TYPE_1.METHOD_2 ( VAR_1 ) ; } else { if ( VAR_1.equals ( STRING_1 ) ) { return VAR_3 ; } else if ( VAR_1.equals ( STRING_2 ) ) { return VAR_4 ; } else { throw new com.google.gwtorm.server.OrmException ( ( STRING_3 + VAR_1 ) ) ; } } } ) 
( TYPE_4 TYPE_4 ) ( t TYPE_1 t ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 t TYPE_2 VAR_1 ) { t   t.METHOD_2 ( ) ; if ( t.METHOD_3 ( ) ) { ( ( TYPE_3 ) ( t ) ) .bind ( this VAR_1 ) ; return true ; } return TYPE_4.METHOD_4 ( this t ) ; } ) ( t t ) ( VAR_1 TYPE_2 VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) 
( VAR_1 TYPE_1.ChangeInfo VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) ( event event   new TYPE_3 ( change VAR_1 VAR_2 ) ) ( change TYPE_1.ChangeInfo change ) 
( METHOD_1_return private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < TYPE_3 > m ) { TYPE_1 < java.lang.String > VAR_1   new TYPE_1 < java.lang.String > ( m.METHOD_2 ( ) ) ; for ( java.lang.String id : VAR_2 ) { VAR_1.METHOD_3 ( id ) ; } return VAR_1 ; } ) ( m TYPE_2 < TYPE_3 > m ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new TYPE_1 < java.lang.String > ( m.METHOD_2 ( ) ) ) ( METHOD_1_return_line1_col255 return VAR_1 ; ) 
( METHOD_1_return private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 r   label ( VAR_1.METHOD_2 ( ) .get ( ) ) ; if ( ( ( VAR_1.METHOD_3 ( ) )    ( VAR_2 ) ) & & ( r.isEmpty ( ) ) ) { return false ; } return r.contains ( VAR_1.value ( ) ) ; } ) ( r r ) ( VAR_1 TYPE_1 VAR_1 ) ( r r   label ( VAR_1.METHOD_2 ( ) .get ( ) ) ) 
( patchSet final TYPE_2.PatchSet patchSet ) ( METHOD_1_return_line1_col366 return p ; ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2.PatchSet patchSet ) { TYPE_1 p   new TYPE_1 ( ) ; p.revision   patchSet.getRevision ( ) .get ( ) ; VAR_1   TYPE_3.toString ( patchSet.METHOD_2 ( ) ) ; p.ref   patchSet.getRefName ( ) ; VAR_2   METHOD_3 ( patchSet.METHOD_4 ( ) ) ; VAR_3   ( patchSet.METHOD_5 ( ) .METHOD_6 ( ) ) / INT_1 ; return p ; } ) ( patchSet patchSet ) ( TYPE_3 TYPE_3 ) ( p p ) ( p p   new TYPE_1 ( ) ) ( patchSet patchSet ) 
( VAR_4 VAR_4   cd.change ( ) .METHOD_4 ( ) ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( VAR_3 VAR_3   TYPE_3.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 com.google.gerrit.server.query.change.ChangeData cd TYPE_1 < TYPE_2 > VAR_2 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > VAR_3   TYPE_3.METHOD_2 ( ) .METHOD_3 ( VAR_2 ) ; com.google.gerrit.reviewdb.client.Account.Id VAR_4   cd.change ( ) .METHOD_4 ( ) ; for ( TYPE_2 cm : VAR_3 ) { if ( VAR_1.equals ( cm.METHOD_5 ( ) ) ) { return true ; } else if ( VAR_4.equals ( cm.METHOD_5 ( ) ) ) { return false ; } } return false ; } ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( cd cd ) ( VAR_2 TYPE_1 < TYPE_2 > VAR_2 ) 
( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ( change com.google.gerrit.reviewdb.client.Change change ) 
( Assert org.junit.Assert ) ( c c   METHOD_2 ( ) ) ( VAR_2 VAR_2 ) ( notes notes   METHOD_5 ( c ) ) ( VAR_2 VAR_2   new TYPE_2 < > ( ) ) ( VAR_2 VAR_2 ) ( update update   METHOD_3 ( c VAR_1 ) ) ( update update ) ( update update ) 
( close_return public TYPE_1 close ( java.lang.String VAR_1 ) { TYPE_2.METHOD_1 ( ( ( TYPE_3.contains ( VAR_1 ) ) & & ( ! ( TYPE_4.equals ( VAR_1 ) ) ) ) STRING_1 VAR_1 ) ; METHOD_2 ( ) ; VAR_2.append ( STRING_2 ) .append ( VAR_1 ) .append ( CHAR_1 ) ; return this ; } ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) 
( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2   METHOD_2 ( STRING_5 ) ) ( VAR_1 VAR_1   STRING_1 + STRING_2 ) ( Truth com.google.common.truth.Truth ) ( repo repo ) 
( METHOD_1_return public PatchSet.Id METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { try { if ( VAR_1    ( TYPE_1.METHOD_2 ( ) ) ) { return METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db   VAR_2.METHOD_4 ( ) ; try { return METHOD_3 ( db ) ; } finally { db.close ( ) ; } } } finally { synchronized ( VAR_3 ) { VAR_4.update ( 1 ) ; } } } ) 
( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_3 VAR_2   VAR_3.get ( TYPE_4.create ( VAR_4 VAR_1 ) ) ; if ( VAR_2    null ) { return TYPE_1.METHOD_2 ( ) ; } return METHOD_3 ( VAR_2.METHOD_4 ( ) ) ; } catch ( java.io.IOException | TYPE_5 e ) { VAR_5.METHOD_5 ( ( STRING_1 + VAR_1 ) e ) ; return null ; } } ) ( VAR_1 java.lang.String VAR_1 ) 
( TYPE_4 TYPE_4 ) ( config TYPE_1 config ) ( TYPE_4 TYPE_4 ) ( VAR_1 TYPE_2 VAR_1 ) ( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( VAR_2 ) ) ( input input   new TYPE_1 ( ) ) ( VAR_1 VAR_1 ) 
( VAR_2 VAR_2 ) ( create_return TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey ) throws TYPE_2 TYPE_3 java.io.IOException { TYPE_4 VAR_1   VAR_2.METHOD_1 ( ) ; if ( ! ( VAR_1.getProject ( ) .METHOD_2 ( ) .METHOD_3 ( ) ) ) { throw new TYPE_3 ( ) ; } return new TYPE_1 ( VAR_1 VAR_3.get ( ) VAR_4.METHOD_4 ( ) VAR_5 VAR_6 ) ; } ) ( com.google.gerrit.reviewdb.client.Project.NameKey ) ( VAR_1 VAR_1   VAR_2.METHOD_1 ( ) ) 
( on on ) ( on final boolean on ) 
( VAR_1 VAR_1 ) ( ps ps   VAR_1.to ( git STRING_1 ) .METHOD_3 ( ) ) ( VAR_1 VAR_1   VAR_2.create ( db admin.METHOD_2 ( ) ) ) ( VAR_3 VAR_3   METHOD_4 ( ps ) ) ( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2 ) 
( e e ) ( TYPE_3 TYPE_3 ) ( TYPE_2 TYPE_2 ) ( token token   TYPE_3.METHOD_4 ( psId VAR_1.path ( ) ) ) ( e TYPE_1 e ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( ) throws TYPE_2 TYPE_3 TYPE_4 TYPE_5 TYPE_6 TYPE_7 com.google.gwtorm.server.OrmException java.io.IOException TYPE_8 TYPE_9 { VAR_1.METHOD_2 ( VAR_2 VAR_3.getAccountId ( ) ) ; return VAR_4.create ( VAR_2.getParentKey ( ) ) .METHOD_1 ( ) ; } ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1 ) 
( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( repo org.eclipse.jgit.lib.Repository repo ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.lib.ObjectId VAR_1 org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { TYPE_2.Key key   new TYPE_2.Key ( VAR_1 VAR_2 VAR_3 ) ; return VAR_4.get ( key new TYPE_3 ( key VAR_5 project repo ) ) ; } catch ( TYPE_4 e ) { VAR_6.METHOD_2 ( ( ( ( STRING_1 + ( VAR_2.name ( ) ) ) + STRING_2 ) + project ) e ) ; return VAR_7 ; } } ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) 
( TYPE_1 TYPE_1 ) ( u u   user ( VAR_4 ) ) ( TYPE_1 TYPE_1 ) 
( Assert org.junit.Assert ) ( VAR_2 VAR_2   METHOD_2 ( ) ) ( Assert org.junit.Assert ) ( VAR_3 VAR_3   VAR_4.changes ( ) .query ( STRING_1 ) .get ( ) ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1   METHOD_2 ( ) ) ( Assert org.junit.Assert ) 
( cm cm ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   cm.METHOD_2 ( ) ) ( size size   ( ( VAR_2.METHOD_3 ( ) ) - ( VAR_2.METHOD_4 ( ) ) ) + 1 ) ( cm cm ) 
( res TYPE_2.HttpServletResponse res ) ( req TYPE_1 req ) ( VAR_1 TYPE_3 VAR_1 ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( VAR_2 TYPE_2 VAR_2 ) ( VAR_4 VAR_4   VAR_5.get ( ( ( TYPE_6 ) ( VAR_1 ) ) ) ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_5 VAR_5 ) ( VAR_3 TYPE_3 VAR_3 ) 
( VAR_3 TYPE_3 VAR_3 ) ( change TYPE_1.ChangeInfo change ) ( VAR_2 java.lang.String VAR_2 ) ( event event   new TYPE_4 ( change VAR_1 VAR_2 VAR_3 ) ) ( VAR_1 TYPE_2 VAR_1 ) 
( ref java.lang.String ref ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_3 java.lang.String VAR_3 ) ( METHOD_1_return private TYPE_1.Result METHOD_1 ( java.lang.String ref java.lang.String VAR_1 java.lang.String VAR_2 java.lang.String VAR_3 java.lang.String changeId ) throws java.io.IOException TYPE_2 { TYPE_3 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 changeId ) ; return VAR_4.to ( git ref ) ; } ) ( VAR_4 VAR_4 ) ( changeId java.lang.String changeId ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_5 VAR_5 ) ( VAR_4 VAR_4   VAR_5.create ( db admin.METHOD_2 ( ) VAR_1 VAR_2 VAR_3 changeId ) ) 
( req final TYPE_1 req ) ( req req ) ( VAR_1 VAR_1   req.METHOD_2 ( VAR_2 ) ) ( METHOD_1_return private java.lang.String METHOD_1 ( final TYPE_1 req ) throws TYPE_2 { java.lang.String VAR_1   req.METHOD_2 ( VAR_2 ) ; if ( ( VAR_1    null ) || ( ! ( VAR_1.METHOD_3 ( TYPE_3 ) ) ) ) { return null ; } else { return new java.lang.String ( TYPE_4.METHOD_4 ( VAR_1.METHOD_5 ( TYPE_3.length ( ) ) ) TYPE_5.METHOD_6 ( req ) ) ; } } ) 
( rsrc TYPE_1 rsrc ) 
( result result ) ( Assert org.junit.Assert ) ( result result   TYPE_2.METHOD_2 ( repo VAR_1 ) ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException TYPE_1 { TYPE_2.Result result   TYPE_2.METHOD_2 ( repo VAR_1 ) ; org.junit.Assert.assertEquals ( INT_1 result.METHOD_3 ( ) .getStatus ( ) ) ; return result.METHOD_3 ( ) .METHOD_4 ( VAR_2 ) ; } ) ( VAR_1 java.lang.String VAR_1 ) ( TYPE_2 TYPE_2 ) 
( Assert org.junit.Assert ) ( VAR_3 VAR_3   query ( STRING_1 ) ) ( VAR_2 VAR_2   METHOD_2 ( ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   METHOD_2 ( ) ) 
( METHOD_1_return private static java.lang.String METHOD_1 ( final java.lang.String token ) { if ( TYPE_1.METHOD_2 ( STRING_1 token ) ) { return TYPE_2.METHOD_3 ( STRING_2 TYPE_1.METHOD_4 ( token ) ) ; } if ( TYPE_1.METHOD_2 ( STRING_3 token ) ) { return TYPE_2.METHOD_3 ( STRING_4 TYPE_1.METHOD_4 ( token ) ) ; } if ( TYPE_1.METHOD_2 ( STRING_5 token ) ) { return TYPE_2.METHOD_3 ( STRING_6 TYPE_1.METHOD_4 ( token ) ) ; } return null ; } ) ( token final java.lang.String token ) 
( VAR_1 TYPE_1 VAR_1 ) ( event java.lang.String event ) ( projectName java.lang.String projectName ) 
( VAR_1 VAR_1   TYPE_1.METHOD_2 ( ) ) ( b b ) ( branch final TYPE_2 branch ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( VAR_1 VAR_1 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( final TYPE_2 branch org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException TYPE_3 TYPE_4 { final TYPE_1 VAR_1   TYPE_1.METHOD_2 ( ) ; final TYPE_5 b   VAR_1.METHOD_3 ( ) ; b.METHOD_4 ( new byte [ 0 ] VAR_2 rw.METHOD_5 ( ) rw.METHOD_6 ( branch.METHOD_7 ( ) ) ) ; b.METHOD_8 ( ) ; return VAR_1 ; } ) ( b b ) ( METHOD_1_return_line1_col368 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( b b   VAR_1.METHOD_3 ( ) ) ( TYPE_1 TYPE_1 ) 
( TYPE_1 TYPE_1 ) ( apply_return public TYPE_1 < ? > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 TYPE_5 java.io.IOException { if ( ( VAR_1 )    null ) { throw new TYPE_5 ( STRING_1 ) ; } try { VAR_2.METHOD_1 ( rsrc.METHOD_2 ( ) rsrc.METHOD_3 ( ) TYPE_6.METHOD_4 ( VAR_1.METHOD_5 ( ) ) ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e.getMessage ( ) ) ; } return TYPE_1.METHOD_6 ( ) ; } ) ( input TYPE_3 input ) ( rsrc TYPE_2 rsrc ) 
( Assert org.junit.Assert ) ( res res   METHOD_3 ( STRING_1 ) ) 
( create_return public TYPE_1 create ( ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 ) ) { VAR_1   true ; final com.google.gerrit.reviewdb.server.ReviewDb c   METHOD_1 ( ) ; try { try { VAR_2.create ( c ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( STRING_1 e ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( STRING_1 e ) ; } } finally { c.close ( ) ; } } return this ; } ) 
( VAR_1 VAR_1   new TYPE_1.ChangeInfo ( ) ) ( project project ) ( VAR_2 VAR_2 ) ( Assert org.junit.Assert ) ( r r   VAR_2.METHOD_2 ( STRING_1 VAR_1 ) ) ( Assert org.junit.Assert ) 
( VAR_2 VAR_2 ) ( METHOD_1_return public boolean METHOD_1 ( ) { if ( ( VAR_1 ) !   null ) { return true ; } if ( ! ( VAR_2.METHOD_1 ( ) ) ) { return false ; } com.google.gerrit.reviewdb.client.Project.NameKey r   VAR_2.METHOD_2 ( ) ; if ( r.get ( ) .METHOD_3 ( VAR_3 ) ) { VAR_1   r ; return true ; } else { VAR_2   VAR_4.Collections < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_4 ( ) .METHOD_5 ( ) ; return false ; } } ) ( r r   VAR_2.METHOD_2 ( ) ) 
( VAR_1 java.util.List < java.lang.String > VAR_1 ) ( VAR_2 int VAR_2 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( branch TYPE_2.NameKey branch ) ( METHOD_1_return TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.Repository repo com.google.gerrit.reviewdb.server.ReviewDb db TYPE_2.NameKey branch java.util.List < java.lang.String > VAR_1 int VAR_2 ) throws com.google.gwtorm.server.OrmException java.io.IOException { if ( ( VAR_1.size ( ) ) > VAR_2 ) { return METHOD_2 ( repo db branch VAR_1 ) ; } else { return METHOD_3 ( branch VAR_1 ) ; } } ) 
( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 TYPE_3 input ) throws TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException { TYPE_7 in   new TYPE_7 ( ) ; VAR_2   id ; java.util.List < TYPE_8 > VAR_3   put.get ( ) .apply ( VAR_1 in ) ; if ( ( VAR_3.size ( ) )    1 ) { return VAR_3.get ( 0 ) ; } else { throw new TYPE_9 ( ) ; } } ) ( in in   new TYPE_7 ( ) ) ( input TYPE_3 input ) ( id id ) ( put put ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_3 VAR_3   put.get ( ) .apply ( VAR_1 in ) ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   VAR_1.METHOD_3 ( STRING_1 ) ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String TYPE_2 > VAR_1   ( ( java.util.Map < java.lang.String TYPE_2 > ) ( VAR_2.get ( ) .apply ( new TYPE_3 ( ) ) ) ) ; for ( TYPE_4 < java.lang.String TYPE_2 > VAR_3 : VAR_1.METHOD_2 ( ) ) { TYPE_2 VAR_4   VAR_3.getValue ( ) ; VAR_4.name   VAR_3.getKey ( ) ; } return VAR_1.values ( ) ; } ) ( VAR_1 VAR_1   ( ( java.util.Map < java.lang.String TYPE_2 > ) ( VAR_2.get ( ) .apply ( new TYPE_3 ( ) ) ) ) ) ( VAR_1 VAR_1 ) 
( c c ) ( VAR_2 VAR_2   c.currentPatchSetId ( ) ) ( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   VAR_1.change ( ) ; if ( c    null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2   c.currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : VAR_1.approvals ( ) .values ( ) ) { if ( ( p.METHOD_2 ( ) .equals ( VAR_2 ) ) & & ( ( p.getValue ( ) ) !   0 ) ) { return true ; } } return false ; } ) ( VAR_1 final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ( c c   VAR_1.change ( ) ) ( VAR_1 VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( change TYPE_1.Change change ) ( update_return public TYPE_1.Change update ( TYPE_1.Change change ) { if ( change.getStatus ( ) .METHOD_1 ( ) ) { if ( ( VAR_1 ) !   null ) { change.METHOD_2 ( ( VAR_1.isEmpty ( ) ? null : VAR_1 ) ) ; } change.METHOD_3 ( VAR_2 ) ; change.METHOD_4 ( result.info ) ; TYPE_2.METHOD_5 ( change ) ; return change ; } else { return null ; } } ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 VAR_3 ) ) 
( VAR_1 VAR_1 ) 
( TYPE_6 TYPE_6 ) ( s s   ( user.get ( ) .METHOD_2 ( ) ) ? VAR_2.get ( ) : null ) ( req TYPE_1 req ) ( rsp TYPE_2 rsp ) ( VAR_1 TYPE_3 VAR_1 ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1   VAR_2.create ( ) ) ( user user ) ( METHOD_1_return public AccountGroup.Id METHOD_1 ( ) throws TYPE_1 TYPE_2 com.google.gwtorm.server.OrmException { final TYPE_3 VAR_1   VAR_2.create ( ) ; final com.google.gerrit.reviewdb.client.Account.Id me   user.getAccountId ( ) ; return VAR_1.METHOD_2 ( VAR_3 null VAR_4 null java.util.Collections.singleton ( me ) null ) ; } ) ( VAR_2 VAR_2 ) ( me me   user.getAccountId ( ) ) ( VAR_1 VAR_1 ) 
( in com.google.gerrit.reviewdb.client.PatchSet in ) ( ctl TYPE_2 ctl ) ( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 ctl com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException { VAR_1   VAR_2.create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo   VAR_4.METHOD_3 ( ctl.getProject ( ) .METHOD_4 ( ) ) ) { TYPE_1 VAR_5   METHOD_5 ( ctl VAR_6.create ( db.get ( ) ctl ) in repo ) ; VAR_1.METHOD_6 ( ) ; return VAR_5 ; } } ) 
( METHOD_1_return public boolean METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 ( ( short ) ( 1 ) ) ) ) { return true ; } if ( ( getRefName ( ) .equals ( TYPE_1.METHOD_3 ( 0 ( ( TYPE_1.length ( ) ) - 1 ) ) ) ) & & ( METHOD_4 ( ) .METHOD_1 ( ) ) ) { return true ; } return false ; } ) 
( input TYPE_3 input ) ( VAR_2 VAR_2 ) ( project TYPE_2 project ) ( TYPE_1 TYPE_1 ) ( VAR_3 VAR_3 ) ( apply_return public TYPE_1 < ? > apply ( TYPE_2 project TYPE_3 input ) throws TYPE_4 com.google.gwtorm.server.OrmException java.io.IOException { if ( ( ( input    null ) || ( ( VAR_1 )    null ) ) || ( VAR_1.isEmpty ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } VAR_2.create ( project ) .refs ( VAR_1 ) .delete ( ) ; return TYPE_1.METHOD_1 ( ) ; METHOD_2 ( 2 ) ; TYPE_6 VAR_3 ; } ) 
( w TYPE_1 w ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_1 ( ) ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 TYPE_2 ... VAR_2 ) { TYPE_3 < TYPE_2 > VAR_3   new TYPE_3 < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ; VAR_3.METHOD_3 ( TYPE_4.METHOD_4 ( VAR_2 ) ) ; return new TYPE_5 < TYPE_2 > ( VAR_3 ) ; } ) ( VAR_2 TYPE_2 ... VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3   new TYPE_3 < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ) 
( event TYPE_1 event ) 
( Assert org.junit.Assert ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   new TYPE_3 ( VAR_1 ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) 
( in TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > in ) ( METHOD_1_return private static java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > in ) { java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id com.google.gerrit.reviewdb.client.PatchSet > out   new TYPE_2 ( new TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id > ( ) { public int METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id a com.google.gerrit.reviewdb.client.PatchSet.Id b ) { return TYPE_4.METHOD_3 ( a b ) .result ( ) ; } } ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : in ) { out.put ( ps.getId ( ) ps ) ; } return out ; } ) ( METHOD_1_return_line1_col692 return out ; ) ( out out   new TYPE_2 ( new TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id > ( ) { public int METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id a com.google.gerrit.reviewdb.client.PatchSet.Id b ) { return TYPE_4.METHOD_3 ( a b ) .result ( ) ; } } ) ) ( out out ) 
( id id   repo.branch ( STRING_2 ) .commit ( ) .create ( ) ) ( repo repo ) ( Assert org.junit.Assert ) ( repo repo ) ( TYPE_1 TYPE_1 ) ( VAR_3 VAR_3   METHOD_3 ( ) ) ( rw rw   repo.METHOD_4 ( ) ) 
( ctx TYPE_1 ctx ) ( ctx ctx ) ( update update   ctx.METHOD_2 ( ) ) ( ctx ctx ) 
( id com.google.gerrit.reviewdb.client.Change.Id id ) ( currentPatchSetId int currentPatchSetId ) ( cd cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null id ) ) ( METHOD_1_return public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id id int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null null null id ) ; VAR_1   new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id currentPatchSetId ) ) ; return cd ; } ) ( cd cd ) ( METHOD_1_return_line1_col502 return cd ; ) 
( id com.google.gerrit.reviewdb.client.Change.Id id ) ( VAR_1 boolean VAR_1 ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2 ) ( VAR_1 int VAR_1 ) ( path path   VAR_2.get ( VAR_1 ) .path ( ) ) 
( r r ) ( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final java.util.ArrayList < TYPE_2 > r   new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_2 c : VAR_1 ) { if ( c.METHOD_2 ( ) ) { r.METHOD_3 ( c.METHOD_4 ( ) ) ; } else { r.add ( c ) ; } } return r ; } ) ( METHOD_1_return_line1_col266 return r ; ) ( r r   new java.util.ArrayList < TYPE_2 > ( ) ) 
( data data ) ( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return_line1_col323 return data ; ) ( METHOD_1_return private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data   new byte [ VAR_2.METHOD_2 ( ) .get ( ) .METHOD_3 ( ) ] ; TYPE_3 in   VAR_1.METHOD_4 ( VAR_2 ) ; try { TYPE_4.METHOD_5 ( in data 0 data.length ) ; } finally { in.close ( ) ; } return data ; } ) ( VAR_1 VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) ( in in   VAR_1.METHOD_4 ( VAR_2 ) ) ( data data   new byte [ VAR_2.METHOD_2 ( ) .get ( ) .METHOD_3 ( ) ] ) 
( psId psId   cd.change ( ) .currentPatchSetId ( ) ) ( out TYPE_1 out ) ( user TYPE_2 user ) ( VAR_1 TYPE_3 VAR_1 ) ( format_return public TYPE_1 format ( TYPE_2 user TYPE_1 out TYPE_3 VAR_1 com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_4 com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId   cd.change ( ) .currentPatchSetId ( ) ; return format ( user out VAR_1 cd VAR_2.METHOD_1 ( db.get ( ) cd.notes ( ) VAR_1.user ( ) psId new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) null null ) ) ; } ) ( cd cd ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( TYPE_2 TYPE_2 ) 
( VAR_3 VAR_3   VAR_4.projects ( ) .name ( VAR_5.get ( ) ) .METHOD_3 ( VAR_2.get ( ) ) .get ( ) ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1   new TYPE_1 ( server admin ) ) ( VAR_2 VAR_2   new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1 ) 
( t TYPE_1 t ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 t TYPE_2 VAR_1 ) { if ( t.METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) .METHOD_1 ( this VAR_1 ) ; if ( ! ( t.METHOD_3 ( ) ) ) return false ; return ( this.VAR_2 )    ( ( ( TYPE_4 ) ( t ) ) .value ( ) ) ; } ) 
( VAR_11 TYPE_12 < TYPE_13 com.google.gerrit.reviewdb.client.Account.Id > VAR_11 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_13 boolean VAR_13 ) ( create_return TYPE_1 create ( TYPE_2 VAR_1 TYPE_3.NameKey VAR_2 TYPE_4 VAR_3 TYPE_5 rw TYPE_6 VAR_4 TYPE_7 VAR_5 org.eclipse.jgit.lib.Repository repo TYPE_8 VAR_6 com.google.gerrit.reviewdb.server.ReviewDb db java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_7 java.util.Set < TYPE_9 > VAR_8 TYPE_10 VAR_9 TYPE_11 VAR_10 TYPE_12 < TYPE_13 com.google.gerrit.reviewdb.client.Account.Id > VAR_11 TYPE_14 VAR_12 boolean VAR_13 ) ; ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_7 java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_7 ) ( VAR_9 TYPE_10 VAR_9 ) ( rw TYPE_5 rw ) ( VAR_12 TYPE_14 VAR_12 ) ( VAR_3 TYPE_4 VAR_3 ) ( VAR_10 TYPE_11 VAR_10 ) ( VAR_2 TYPE_3.NameKey VAR_2 ) ( VAR_8 java.util.Set < TYPE_9 > VAR_8 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_6 TYPE_8 VAR_6 ) ( VAR_4 TYPE_6 VAR_4 ) ( VAR_5 TYPE_7 VAR_5 ) 
( VAR_1 VAR_1   VAR_2.METHOD_2 ( ) ) ( e TYPE_1 e ) ( VAR_2 VAR_2 ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { com.google.gerrit.reviewdb.client.Change c   change ( ) ; if ( c    null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( ) ) { if ( p.getId ( ) .equals ( c.currentPatchSetId ( ) ) ) { VAR_1   p ; return p ; } } } return VAR_1 ; } ) ( METHOD_1_return_line1_col411 return VAR_1 ; ) 
( Assert org.junit.Assert ) ( r r ) ( r r   VAR_1.put ( ( ( STRING_1 + ( VAR_2.get ( ) ) ) + STRING_2 ) METHOD_2 ( project.get ( ) ) ) ) ( VAR_1 VAR_1 ) 
( VAR_2 VAR_2   TYPE_2.METHOD_2 ( VAR_1.METHOD_3 ( ) ) ) ( TYPE_4 TYPE_4 ) ( VAR_3 VAR_3   TYPE_4.METHOD_4 ( ) ) ( VAR_1 TYPE_1 VAR_1 ) ( cmd cmd   STRING_1 + VAR_2 ) ( TYPE_2 TYPE_2 ) 
( VAR_1 final TYPE_1 VAR_1 ) ( METHOD_1_return private boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2.equals ( VAR_1.METHOD_2 ( ) ) ) { return true ; } try { return VAR_2.METHOD_3 ( VAR_1.METHOD_2 ( ) ) ; } catch ( TYPE_3 e ) { VAR_3.METHOD_4 ( STRING_1 e ) ; return true ; } } ) 
( TYPE_2 TYPE_2 ) ( update_return_line1_col387 return c ; ) ( c c ) ( c com.google.gerrit.reviewdb.client.Change c ) ( c c ) ( c c ) ( update_return public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { c.METHOD_1 ( VAR_1 ) ; c.METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_3.equals ( c.currentPatchSetId ( ) ) ) ) { try { c.METHOD_3 ( VAR_4.get ( db VAR_3 ) ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_4 ( ( STRING_1 + VAR_3 ) VAR_5 ) ; } } TYPE_2.METHOD_5 ( c ) ; return c ; } ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change TYPE_2 user ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1   change.getProject ( ) ; try { return VAR_2.METHOD_1 ( VAR_1 user ) .METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) e ) ; } } ) ( user TYPE_2 user ) ( VAR_1 VAR_1   change.getProject ( ) ) ( change change ) ( change com.google.gerrit.reviewdb.client.Change change ) 
( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   TYPE_1.METHOD_2 ( VAR_1.METHOD_3 ( ) TYPE_2.METHOD_4 ( VAR_1.METHOD_5 ( ) ) ) ) ( VAR_1 com.google.gerrit.reviewdb.client.Project VAR_1 ) ( METHOD_1_return private static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2   TYPE_1.METHOD_2 ( VAR_1.METHOD_3 ( ) TYPE_2.METHOD_4 ( VAR_1.METHOD_5 ( ) ) ) ; if ( VAR_2.METHOD_6 ( TYPE_3 ) ) { return VAR_2.METHOD_7 ( TYPE_3.length ( ) ) ; } else { return VAR_2 ; } } ) 
( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2 ) ( TYPE_1 TYPE_1 ) 
( VAR_1 TYPE_2 VAR_1 ) ( commit commit   config.commit ( VAR_2 ) ) ( config config ) ( VAR_7 VAR_7 ) ( VAR_6 VAR_6 ) ( VAR_2 TYPE_4 VAR_2 ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3.ProjectConfig config TYPE_4 VAR_2 boolean VAR_3 ) throws TYPE_5 TYPE_6 java.io.IOException TYPE_7 { org.eclipse.jgit.revwalk.RevCommit commit   config.commit ( VAR_2 ) ; VAR_4.METHOD_2 ( config.getProject ( ) .METHOD_3 ( ) VAR_5 base commit.getId ( ) VAR_1.METHOD_4 ( ) .METHOD_5 ( ) .METHOD_6 ( ) ) ; VAR_6.METHOD_7 ( config.getProject ( ) ) ; return VAR_7.create ( projectName ) .METHOD_8 ( ) ; } ) ( VAR_4 VAR_4 ) ( config TYPE_3.ProjectConfig config ) ( VAR_3 boolean VAR_3 ) 
( revision revision ) ( to to ) ( VAR_4 VAR_4 ) 
( VAR_2 VAR_2   TYPE_1.METHOD_2 ( VAR_1 ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col362 return VAR_2 ; ) ( TYPE_1 TYPE_1 ) ( METHOD_1_return private TYPE_1 < TYPE_2 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) throws TYPE_3 { TYPE_1 < TYPE_2 > VAR_2   TYPE_1.METHOD_2 ( VAR_1 ) ; if ( ! ( TYPE_4.METHOD_3 ( VAR_3 ) ) ) { VAR_2   VAR_2.METHOD_4 ( new TYPE_5 ( VAR_3 ) ) ; } else if ( ! ( TYPE_4.METHOD_3 ( VAR_4 ) ) ) { VAR_2   VAR_2.METHOD_4 ( new TYPE_6 ( VAR_4 ) ) ; } return VAR_2 ; } ) ( VAR_1 java.util.List < TYPE_2 > VAR_1 ) 
( VAR_1 java.lang.String VAR_1 ) ( n com.google.gerrit.reviewdb.client.Project.NameKey n ) ( METHOD_1_return public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey n java.lang.String VAR_1 ) { if ( TYPE_1.equals ( VAR_1 ) ) { return STRING_1 + ( n.toString ( ) ) ; } return ( ( STRING_1 + ( n.toString ( ) ) ) + STRING_2 ) + VAR_1 ; } ) 
( VAR_1 VAR_1 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 )    null ) { VAR_1   new java.util.ArrayList < TYPE_1 > ( values.size ( ) ) ; for ( TYPE_2 VAR_2 : values ) { VAR_1.add ( TYPE_1.METHOD_2 ( VAR_2.getValue ( ) ) ) ; } java.util.Collections.METHOD_3 ( VAR_1 ) ; java.util.Collections.METHOD_4 ( VAR_1 ) ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col349 return VAR_1 ; ) 
( projects TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > projects ) 
( revision TYPE_2 revision ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : throw new TYPE_3 ( java.lang.String.format ( STRING_1 type ) ) ; case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : default : this.revision   TYPE_4.METHOD_2 ( revision ) ; return this ; } } ) 
( METHOD_1_return public int METHOD_1 ( TYPE_1 key TYPE_2 value ) { int size   ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ; for ( java.lang.String p : value.METHOD_2 ( ) ) { size +  p.length ( ) ; } size +  ( value.METHOD_2 ( ) .size ( ) ) - 1 ; return size ; } ) ( size size   ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) ( METHOD_1_return_line1_col260 return size ; ) ( key TYPE_1 key ) ( value TYPE_2 value ) ( size size ) 
( TYPE_2 TYPE_2 ) ( me me ) ( me me ) ( result final TYPE_1.Account result ) ( me me   TYPE_2.METHOD_2 ( ) ) ( me me ) ( TYPE_2 TYPE_2 ) 
( VAR_2 TYPE_1 VAR_2 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( projectName_return Project.NameKey projectName ( org.eclipse.jgit.lib.Repository repo ) { TYPE_1 VAR_1   repo.METHOD_1 ( ) .METHOD_2 ( ) ; if ( VAR_1.METHOD_3 ( VAR_2 ) ) { java.lang.String p   VAR_2.METHOD_4 ( VAR_1 ) .toString ( ) ; java.lang.String n   p.METHOD_5 ( 0 ( ( p.length ( ) ) - ( STRING_1.length ( ) ) ) ) ; return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; } else { VAR_3.METHOD_6 ( ( STRING_2 + VAR_1 ) ) ; return null ; } } ) ( VAR_1 VAR_1   repo.METHOD_1 ( ) .METHOD_2 ( ) ) ( repo org.eclipse.jgit.lib.Repository repo ) ( repo repo ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 project org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.lib.ObjectId VAR_1 org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return VAR_3.get ( new TYPE_3.Key ( project repo VAR_1 VAR_2 VAR_4 ) ) ; } catch ( TYPE_4 e ) { VAR_5.METHOD_2 ( ( ( ( STRING_1 + ( VAR_2.name ( ) ) ) + STRING_2 ) + ( project.getProject ( ) .getName ( ) ) ) e ) ; return VAR_6 ; } } ) ( project TYPE_2 project ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) 
( VAR_5 VAR_5 ) ( VAR_7 VAR_7 ) 
( row final int row ) 
( VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) 
( TYPE_4 TYPE_4 ) ( VAR_3 VAR_3   new TYPE_1 ( VAR_1 VAR_4 ) ) ( VAR_1 VAR_1   TYPE_4.METHOD_2 ( VAR_2.get ( ) ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1   TYPE_4.METHOD_2 ( VAR_2.get ( ) ) ; TYPE_1 VAR_3   new TYPE_1 ( VAR_1 VAR_4 ) ; try { if ( VAR_3.METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_5 ) { throw new TYPE_2 ( STRING_2 ) ; } } ) 
( format_return public TYPE_1 format ( TYPE_1 out TYPE_2 ctl TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId   ctl.getChange ( ) .currentPatchSetId ( ) ; return format ( out ctl VAR_2.METHOD_1 ( db.get ( ) ctl psId VAR_3 ) ) ; } ) ( VAR_1 TYPE_3 VAR_1 ) ( ctl TYPE_2 ctl ) ( psId psId   ctl.getChange ( ) .currentPatchSetId ( ) ) ( out TYPE_1 out ) ( ctl ctl ) 
( VAR_1 VAR_1   0 ) ( METHOD_1_return public int METHOD_1 ( ) { int VAR_1   0 ; if ( ( VAR_2 ) !   null ) { for ( TYPE_1 r : VAR_2.METHOD_2 ( ) ) { VAR_3.METHOD_3 ( java.lang.String.format ( STRING_1 r ) ) ; } VAR_1   VAR_2.METHOD_4 ( ) .size ( ) ; VAR_2.METHOD_5 ( ) ; VAR_2   null ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col279 return VAR_1 ; ) ( VAR_1 VAR_1 ) 
( out TYPE_1 out ) ( path java.lang.String path ) ( data byte [ ] data ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   ( ( TYPE_3 < TYPE_1 > ) ( format ) ) ) 
( VAR_1 int VAR_1 ) ( c TYPE_3 c ) ( res res ) ( msg java.lang.String msg ) ( TYPE_6 TYPE_6 ) ( req TYPE_1 req ) ( TYPE_6 TYPE_6 ) ( res TYPE_2.HttpServletResponse res ) ( err TYPE_4 err ) 
( METHOD_1_return private boolean METHOD_1 ( ) { if ( VAR_1.get ( ) .METHOD_2 ( ) ) { return ( VAR_2.user ( VAR_1 ) .METHOD_3 ( new TYPE_1 ( VAR_3 VAR_4 ) ) ) & & ( VAR_2.user ( VAR_1 ) .METHOD_3 ( VAR_5 ) ) ; } else { return false ; } } ) 
( METHOD_1_return public boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 TYPE_2 TYPE_3 { final TYPE_4 ctx   VAR_2.METHOD_2 ( ) ; try { TYPE_5 schema   VAR_2.METHOD_3 ( ctx ) ; VAR_2.METHOD_4 ( schema ctx VAR_1 false ) ; return true ; } catch ( TYPE_6 e ) { return false ; } finally { try { ctx.close ( ) ; } catch ( TYPE_2 e ) { VAR_3.METHOD_5 ( STRING_1 e ) ; } } } ) ( ctx ctx   VAR_2.METHOD_2 ( ) ) ( VAR_2 VAR_2 ) ( VAR_1 java.lang.String VAR_1 ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( m TYPE_1 < TYPE_2 > m ) 
( VAR_2 VAR_2 ) ( VAR_1 final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) 
( VAR_2 VAR_2   ctx.METHOD_2 ( STRING_1 ) ) ( VAR_3 VAR_3   VAR_2.get ( STRING_2 ) ) ( res res ) ( VAR_2 VAR_2 ) ( METHOD_1_return static TYPE_1 METHOD_1 ( final TYPE_2 ctx ) throws TYPE_3 { final TYPE_4 VAR_1   new TYPE_4 ( ) ; final TYPE_5 < TYPE_6 > res ; final TYPE_7 VAR_2   ctx.METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_3   VAR_2.get ( STRING_2 ) ; if ( ( VAR_3 !   null ) & & ( VAR_3.contains ( STRING_3 ) ) ) { return new TYPE_9 ( VAR_2 ) ; } return VAR_4 ; } ) ( VAR_1 VAR_1   new TYPE_4 ( ) ) ( VAR_4 VAR_4 ) ( ctx final TYPE_2 ctx ) ( ctx ctx ) ( METHOD_1_return_line1_col337 return VAR_4 ; ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( VAR_2.getValue ( VAR_2.METHOD_3 ( ) ) ) ) ( VAR_3 VAR_3 ) ( e TYPE_1 e ) ( TYPE_2 TYPE_2 ) ( view view ) 
( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col401 return VAR_1 ; ) ( VAR_1 VAR_1   TYPE_4.create ( ) ) ( METHOD_1_return public TYPE_1 < TYPE_2.NameKey com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2.NameKey com.google.gerrit.server.query.change.ChangeData > VAR_1   TYPE_4.create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1.put ( cd.change ( ) .METHOD_2 ( ) cd ) ; } return VAR_1 ; } ) ( TYPE_4 TYPE_4 ) 
( VAR_3 final boolean VAR_3 ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_4 VAR_4   VAR_1.METHOD_3 ( ) ) ( VAR_2 final int VAR_2 ) 
( TYPE_1 TYPE_1 ) ( cfg TYPE_2 cfg ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( TYPE_2 cfg ) { return TYPE_1.create ( cfg.METHOD_2 ( STRING_1 null STRING_2 0 ) cfg.METHOD_2 ( STRING_1 null STRING_3 0 ) cfg.METHOD_2 ( STRING_1 null STRING_4 0 ) cfg.METHOD_2 ( STRING_1 null STRING_5 VAR_1 ) ) ; } ) 
( r r   new java.util.ArrayList < > ( INT_1 ) ) ( VAR_1 TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) ( METHOD_1_return public static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r   new java.util.ArrayList < > ( INT_1 ) ; for ( final com.google.gerrit.reviewdb.client.Change.Status e : TYPE_3.values ( ) ) { if ( e.METHOD_2 ( ) ) { r.add ( new TYPE_4 ( e ) ) ; } } return ( r.size ( ) )    1 ? r.get ( 0 ) : METHOD_3 ( r ) ; } ) 
( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( db VAR_4.create ( db c ) ) .values ( ) ) ( VAR_1 TYPE_1 ... VAR_1 ) ( c com.google.gerrit.reviewdb.client.Change c ) ( Truth com.google.common.truth.Truth ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   TYPE_3.METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ) ( r r   VAR_1.METHOD_2 ( ) ) ( TYPE_3 TYPE_3 ) ( VAR_1 VAR_1 ) ( METHOD_1_return protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { final TYPE_2 r   VAR_1.METHOD_2 ( ) ; assert r instanceof TYPE_3 : STRING_1 + r ; final TYPE_2 VAR_2   TYPE_3.METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ; if ( VAR_2    null ) { return null ; } else { return TYPE_4.METHOD_4 ( VAR_3 VAR_2 ) ; } } ) 
( change change   METHOD_3 ( git ) ) ( git git   METHOD_2 ( ) ) ( Truth com.google.common.truth.Truth ) 
( METHOD_1_return private java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { try ( org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_2 ( VAR_2 ) ) { return METHOD_1 ( repo changeId ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) 
( VAR_1 boolean VAR_1 ) ( id com.google.gerrit.reviewdb.client.PatchSet.Id id ) ( VAR_2 java.lang.String VAR_2 ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( boolean VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id id java.lang.String VAR_2 ) { return VAR_1 ? TYPE_2.METHOD_2 ( id.getParentKey ( ) VAR_2 ) : TYPE_3.revision ( id ) .view ( STRING_1 ) .id ( VAR_2 ) .view ( STRING_2 ) ; } ) 
( VAR_1 TYPE_2 VAR_1 ) ( rsrc rsrc ) ( VAR_2 boolean VAR_2 ) ( submit_return public java.util.List < com.google.gerrit.reviewdb.client.Change > submit ( TYPE_1 rsrc TYPE_2 VAR_1 boolean VAR_2 ) throws TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { java.lang.String topic   rsrc.getChange ( ) .METHOD_1 ( ) ; if ( ( VAR_3 ) & & ( ! ( TYPE_4.METHOD_2 ( topic ) ) ) ) { return METHOD_3 ( rsrc VAR_1 VAR_2 topic ) ; } else { return TYPE_5.METHOD_4 ( METHOD_5 ( rsrc VAR_1 VAR_2 ) ) ; } } ) ( topic topic   rsrc.getChange ( ) .METHOD_1 ( ) ) ( rsrc TYPE_1 rsrc ) 
( VAR_1 VAR_1 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change change TYPE_2 user ) throws com.google.gwtorm.server.OrmException java.io.IOException TYPE_3 TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd   VAR_1.create ( db change.getProject ( ) change.getId ( ) ) ; cd.METHOD_2 ( user ) ; if ( TYPE_5.METHOD_3 ( cfg ) ) { return METHOD_4 ( db new TYPE_1 ( cd ) user ) ; } return METHOD_5 ( db new TYPE_1 ( cd ) user ) ; } ) ( change com.google.gerrit.reviewdb.client.Change change ) ( user TYPE_2 user ) ( cd cd ) ( cd cd   VAR_1.create ( db change.getProject ( ) change.getId ( ) ) ) 
( VAR_2 final int VAR_2 ) ( i i   0 ) ( VAR_3 final boolean VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_4 VAR_4   VAR_1.METHOD_3 ( ) ) 
( db db ) ( VAR_1 VAR_1   db.METHOD_2 ( ) ) ( db db ) ( VAR_2 VAR_2   db.METHOD_2 ( ) ) ( db db ) 
( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3 ) ( TYPE_2 TYPE_2 ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3 ) ( cfg cfg   VAR_1.METHOD_2 ( VAR_2 ) .METHOD_3 ( ) ) ( VAR_3 VAR_3 ) 
( VAR_1 boolean VAR_1 ) ( e java.lang.Exception e ) ( error java.lang.String error ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( change change   METHOD_3 ( git ) ) ( git git   METHOD_2 ( false ) ) ( Assert org.junit.Assert ) 
( VAR_2 VAR_2   TYPE_1.METHOD_2 ( ) ) ( METHOD_1_return_line1_col283 return VAR_2 ; ) ( VAR_2 VAR_2 ) ( TYPE_1 TYPE_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException TYPE_3 TYPE_4 { TYPE_1 VAR_2   TYPE_1.METHOD_2 ( ) ; if ( VAR_1 !   null ) { TYPE_5 b   VAR_2.METHOD_3 ( ) ; b.METHOD_4 ( new byte [ 0 ] VAR_3 VAR_4 VAR_1 ) ; b.METHOD_5 ( ) ; } return VAR_2 ; } ) ( VAR_1 TYPE_2 VAR_1 ) 
( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_3 VAR_3 ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( user ) ) ( change TYPE_1.Change change ) ( db TYPE_1.ReviewDb db ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( user TYPE_2 user ) ( METHOD_1_return private boolean METHOD_1 ( TYPE_1.Change change TYPE_2 user TYPE_1.ReviewDb db ) throws TYPE_3.OrmException { final TYPE_4 VAR_1   VAR_2.get ( change.getProject ( ) ) ; if ( VAR_1    null ) { return false ; } final TYPE_5 VAR_3   VAR_1.METHOD_2 ( user ) ; return VAR_3.METHOD_2 ( change ) .METHOD_3 ( db ) ; } ) ( VAR_1 VAR_1   VAR_2.get ( change.getProject ( ) ) ) 
( VAR_1 java.lang.String VAR_1 ) ( projectName java.lang.String projectName ) ( VAR_2 VAR_2 ) ( repo repo   VAR_2.METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) !   null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1.METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) !   null ) { VAR_1   VAR_2.METHOD_3 ( change user ) ; } else { VAR_1   VAR_2.METHOD_3 ( project VAR_3 user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } ) ( user TYPE_2 user ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col423 return VAR_1 ; ) 
( METHOD_1_return protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2   TYPE_4.get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_3   TYPE_5.get ( VAR_1 ) ; TYPE_6 VAR_4   ( ( TYPE_6 ) ( VAR_5 ) ) ; try { return new TYPE_1 ( VAR_6 VAR_3 VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_7 ( e.getMessage ( ) ) ; } } ) ( VAR_2 VAR_2   TYPE_4.get ( VAR_1 ) ) ( VAR_4 VAR_4   ( ( TYPE_6 ) ( VAR_5 ) ) ) ( VAR_1 TYPE_2 VAR_1 ) ( TYPE_5 TYPE_5 ) ( VAR_3 VAR_3   TYPE_5.get ( VAR_1 ) ) ( TYPE_4 TYPE_4 ) 
( TYPE_1 TYPE_1 ) ( String java.lang.String ) ( VAR_2 VAR_2   java.lang.String.METHOD_2 ( revision.get ( ) ) ) ( VAR_1 boolean VAR_1 ) ( b b   ( ( base ) !   null ) ? java.lang.String.METHOD_2 ( base.get ( ) ) : null ) 
( METHOD_1_return public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { com.google.gerrit.reviewdb.client.Change c   change ( ) ; if ( c    null ) { return java.util.Collections.METHOD_2 ( ) ; } VAR_1   new TYPE_1 < > ( ) ; for ( TYPE_2 VAR_2 : VAR_3.METHOD_3 ( db notes ) ) { VAR_1.add ( VAR_2.METHOD_4 ( ) ) ; } } return VAR_1 ; } ) ( METHOD_1_return_line1_col431 return VAR_1 ; ) ( VAR_1 VAR_1 ) 
( edit edit   VAR_3.METHOD_4 ( change ) ) ( VAR_1 VAR_1 ) ( r r   VAR_1.delete ( METHOD_2 ( ) ) ) ( Assert org.junit.Assert ) ( VAR_3 VAR_3 ) 
( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) 
( METHOD_1_return private java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_1 VAR_2   METHOD_2 ( VAR_1 ) ; try { final TYPE_1 VAR_3   METHOD_3 ( STRING_1 ) ; assertEquals ( 0 METHOD_4 ( VAR_4 VAR_3 VAR_2.METHOD_5 ( ) ) ) ; return METHOD_6 ( VAR_2 ) ; } finally { VAR_2.delete ( ) ; } } ) ( VAR_2 VAR_2   METHOD_2 ( VAR_1 ) ) ( VAR_1 final java.lang.String VAR_1 ) 
( Truth com.google.common.truth.Truth ) 
( key final TYPE_2.Key key ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_5 VAR_5   VAR_1.METHOD_4 ( ) ) ( VAR_4 VAR_4   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.getAccountId ( ) ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( ) ) ( METHOD_1_return TYPE_1 METHOD_1 ( final TYPE_2.Key key final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2   VAR_1.getAccountId ( ) ; final boolean VAR_3   VAR_1.METHOD_2 ( ) ; final TYPE_3.Key VAR_4   VAR_1.METHOD_3 ( ) ; final java.lang.String VAR_5   VAR_1.METHOD_4 ( ) ; return METHOD_1 ( key VAR_2 VAR_3 VAR_4 VAR_5 ) ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( get_return public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo   VAR_1.METHOD_1 ( change.getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2   new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3.METHOD_2 ( VAR_2 patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2.METHOD_3 ( e ) ; } } ) 
( base java.lang.String base ) ( diff_return public TYPE_1 diff ( java.lang.String base ) throws TYPE_2 { try { return VAR_1.get ( ) .METHOD_1 ( base ) .apply ( file ) .value ( ) ; } catch ( java.io.IOException | TYPE_3 | com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) 
( VAR_1 TYPE_2 VAR_1 ) ( group group   VAR_1.METHOD_1 ( ) ) ( VAR_1 VAR_1 ) ( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 { com.google.gerrit.reviewdb.client.AccountGroup group   VAR_1.METHOD_1 ( ) ; if ( group    null ) { throw new TYPE_3 ( ) ; } try { TYPE_4 c   VAR_2.METHOD_2 ( group.METHOD_3 ( ) ) ; return VAR_3.METHOD_4 ( VAR_4 ) .format ( c.METHOD_5 ( ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( ) ; } } ) 
( ui ui ) 
( d d   util.user ( VAR_1 STRING_3 VAR_3 ) ) ( util util ) ( TYPE_1 TYPE_1 ) ( u u   util.user ( VAR_1 STRING_2 VAR_3 ) ) ( util util ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( VAR_2.getValue ( VAR_2.METHOD_3 ( ) ) ) ) ( VAR_3 VAR_3 ) ( e TYPE_1 e ) 
( VAR_1 java.util.Map < java.lang.String TYPE_1 > VAR_1 ) ( rsrc rsrc ) ( rsrc TYPE_2 rsrc ) ( VAR_2 VAR_2   rsrc.METHOD_2 ( ) .METHOD_3 ( ) ) 
( TYPE_3 TYPE_3 ) ( db TYPE_1.ReviewDb db ) ( VAR_1 byte [ ] VAR_1 ) ( TYPE_3 TYPE_3 ) 
( get_return public TYPE_1 get ( com.google.gerrit.reviewdb.client.Change change com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey project   change.getProject ( ) ; org.eclipse.jgit.lib.ObjectId a   null ; if ( ( patchSet.getRevision ( ) )    null ) { throw new TYPE_2 ( ( STRING_1 + ( patchSet.getId ( ) ) ) ) ; } org.eclipse.jgit.lib.ObjectId b   org.eclipse.jgit.lib.ObjectId.METHOD_1 ( patchSet.getRevision ( ) .get ( ) ) ; TYPE_3 VAR_1   VAR_2 ; return get ( new TYPE_4 ( a b VAR_1 ) project ) ; } ) ( a a   null ) ( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) ( change com.google.gerrit.reviewdb.client.Change change ) ( change change ) ( VAR_1 VAR_1   VAR_2 ) ( VAR_2 VAR_2 ) ( project project   change.getProject ( ) ) ( ObjectId org.eclipse.jgit.lib.ObjectId ) ( b b   org.eclipse.jgit.lib.ObjectId.METHOD_1 ( patchSet.getRevision ( ) .get ( ) ) ) 
( VAR_1 VAR_1 ) ( METHOD_1_return private java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 )    null ) { VAR_1   new TYPE_2 < java.lang.String TYPE_1 > ( ) ; if ( ( VAR_2 ) !   null ) { for ( final TYPE_1 t : VAR_2 ) { VAR_1.put ( t.getId ( ) t ) ; } } } return VAR_1 ; } ) ( METHOD_1_return_line1_col271 return VAR_1 ; ) 
( change change   METHOD_4 ( git ) ) ( VAR_1 VAR_1   METHOD_3 ( ) ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( git git   METHOD_2 ( ) ) ( VAR_2 VAR_2   METHOD_3 ( ) ) 
( METHOD_1_return public Account.Id METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { try { com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { TYPE_2 VAR_2   db.METHOD_3 ( ) .get ( new TYPE_2.Key ( VAR_1 ) ) ; return VAR_2 !   null ? VAR_2.getAccountId ( ) : null ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) e ) ; } } ) ( VAR_1 java.lang.String VAR_1 ) 
( VAR_1 VAR_1 ) ( changes changes   VAR_1.get ( ) .METHOD_2 ( project.METHOD_3 ( ) ) ) ( project com.google.gerrit.reviewdb.client.Project project ) ( db db ) ( db db ) 
( METHOD_1_return private java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Account account ) { if ( account !   null ) { java.lang.String result   ( ( account.METHOD_2 ( ) )    null ) ? VAR_1 : account.METHOD_2 ( ) ; if ( ( account.METHOD_3 ( ) ) !   null ) { result +  ( STRING_1 + ( account.METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col370 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( account final com.google.gerrit.reviewdb.client.Account account ) 
( id TYPE_1.Id id ) ( VAR_1 java.lang.String VAR_1 ) ( create_return public TYPE_1 create ( TYPE_1.Id id java.lang.String VAR_1 ) throws TYPE_2 { try { final TYPE_1 key   new TYPE_1 ( id TYPE_3.METHOD_1 ( VAR_1 ) ) ; TYPE_3.METHOD_2 ( key ) ; return key ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_5 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_6 e ) { VAR_2.error ( STRING_1 e ) ; throw new TYPE_2 ( ) ; } } ) 
( change com.google.gerrit.reviewdb.client.Change change ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( event TYPE_1 event ) 
( VAR_2 VAR_2 ) ( user user   VAR_1.METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return public java.lang.String METHOD_1 ( ) { TYPE_1 user   VAR_1.METHOD_2 ( ) ; TYPE_2 VAR_2   TYPE_3.METHOD_3 ( ) .METHOD_4 ( ) .METHOD_5 ( user.METHOD_6 ( ) .contains ( getChange ( ) .getId ( ) ) ) ; METHOD_7 ( VAR_2 user ) ; return VAR_2.METHOD_8 ( ) .toString ( ) ; } ) ( TYPE_3 TYPE_3 ) ( VAR_2 VAR_2   TYPE_3.METHOD_3 ( ) .METHOD_4 ( ) .METHOD_5 ( user.METHOD_6 ( ) .contains ( getChange ( ) .getId ( ) ) ) ) 
( api api   TYPE_2.change ( id ) .view ( STRING_1 ) .METHOD_2 ( STRING_2 n ) .METHOD_2 ( STRING_3 e ) ) ( TYPE_2 TYPE_2 ) ( METHOD_1_return_line1_col285 return api ; ) ( id int id ) ( VAR_1 java.lang.String VAR_1 ) ( api api ) ( n int n ) ( e boolean e ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( int id java.lang.String VAR_1 int n boolean e ) { TYPE_1 api   TYPE_2.change ( id ) .view ( STRING_1 ) .METHOD_2 ( STRING_2 n ) .METHOD_2 ( STRING_3 e ) ; if ( VAR_1 !   null ) { api.METHOD_2 ( STRING_4 VAR_1 ) ; } return api ; } ) 
( VAR_1 final TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) 
( cd cd   VAR_1.create ( db.get ( ) rsrc.METHOD_1 ( ) ) ) ( format_return public TYPE_1.ChangeInfo format ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd   VAR_1.create ( db.get ( ) rsrc.METHOD_1 ( ) ) ; return format ( cd TYPE_3.of ( rsrc.METHOD_2 ( ) .getId ( ) ) ) ; } ) ( VAR_1 VAR_1 ) ( rsrc TYPE_2 rsrc ) 
( a a ) ( a a   new TYPE_1 ( ) ) ( VAR_2 VAR_2   a.METHOD_5 ( ) ) ( VAR_3 VAR_3 ) ( a a ) ( VAR_1 java.lang.String VAR_1 ) ( java.lang.String ) ( a a ) 
( VAR_2 VAR_2 ) ( VAR_1 final TYPE_2 VAR_1 ) ( group group   VAR_2.get ( VAR_1 ) ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.AccountGroup group   VAR_2.get ( VAR_1 ) ; if ( group    null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( VAR_2 user.get ( ) group ) ; } ) 
( VAR_2 TYPE_1 VAR_2 ) ( VAR_3 TYPE_2 VAR_3 ) ( VAR_1 int VAR_1 ) ( out java.lang.StringBuilder out ) 
( rsrc rsrc ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 rsrc com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   VAR_1.get ( ) .changes ( ) .get ( id ) ; if ( c    null ) { return null ; } return rsrc.METHOD_2 ( ) .METHOD_3 ( ) .METHOD_1 ( c ) ; } ) ( VAR_1 VAR_1 ) ( rsrc TYPE_2 rsrc ) ( c c   VAR_1.get ( ) .changes ( ) .get ( id ) ) ( id com.google.gerrit.reviewdb.client.Change.Id id ) 
( VAR_3 VAR_3 ) ( req req ) ( apply_return public TYPE_1.ChangeInfo apply ( TYPE_2 req TYPE_3 input ) throws TYPE_4 TYPE_5 com.google.gwtorm.server.OrmException { TYPE_6 VAR_1   req.METHOD_1 ( ) ; if ( ! ( VAR_1.METHOD_2 ( VAR_2.get ( ) ) ) ) { throw new TYPE_7 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change   METHOD_3 ( VAR_1 input.message VAR_1.METHOD_4 ( ) .METHOD_5 ( ) .METHOD_6 ( ) ) ; return VAR_3.create ( VAR_4 ) .format ( change ) ; } ) ( req TYPE_2 req ) ( input TYPE_3 input ) ( VAR_1 VAR_1   req.METHOD_1 ( ) ) ( change change   METHOD_3 ( VAR_1 input.message VAR_1.METHOD_4 ( ) .METHOD_5 ( ) .METHOD_6 ( ) ) ) 
( VAR_1 VAR_1   null ) ( project project ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1   null ; TYPE_3.NameKey VAR_2   new TYPE_3.NameKey ( STRING_1 ) ; TYPE_4 VAR_3   null ; TYPE_5.Project project   new TYPE_5.Project ( ) ; project.METHOD_2 ( VAR_4.get ( ) ) ; TYPE_1 ps   new TYPE_1 ( VAR_5 VAR_1 VAR_2 VAR_3 project VAR_6 ) ; ps.METHOD_3 ( VAR_7 ) ; return ps ; } ) ( ps ps   new TYPE_1 ( VAR_5 VAR_1 VAR_2 VAR_3 project VAR_6 ) ) ( VAR_2 VAR_2   new TYPE_3.NameKey ( STRING_1 ) ) ( project project   new TYPE_5.Project ( ) ) ( ps ps ) ( VAR_3 VAR_3   null ) ( METHOD_1_return_line1_col353 return ps ; ) ( ps ps ) 
( b b   new TYPE_1 ( ) ) 
( VAR_1 VAR_1   new TYPE_3 ( ) .create ( ) .METHOD_3 ( key ) ) ( TYPE_2 TYPE_2 ) ( TYPE_4 TYPE_4 ) ( Truth com.google.common.truth.Truth ) ( key key   TYPE_2.METHOD_2 ( STRING_1 ) ) 
( VAR_1 VAR_1   METHOD_2 ( ) .METHOD_3 ( STRING_1 ) ) 
( Assert org.junit.Assert ) ( changeId changeId   METHOD_2 ( admin ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( reviewers reviewers   METHOD_3 ( changeId STRING_1 INT_1 ) ) 
( VAR_1 VAR_1   new TYPE_2.Id ( INT_1 ) ) ( account account   new TYPE_3.Account ( VAR_1 ) ) ( final java.lang.String ) ( s s   new TYPE_1 ( account VAR_2.Collections < TYPE_4.Id > METHOD_4 ( ) VAR_2.Collections < TYPE_5 > METHOD_4 ( ) ) ) ( METHOD_1_return_line1_col429 return s ; ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final java.lang.String final java.lang.String email ) { final TYPE_2.Id VAR_1   new TYPE_2.Id ( INT_1 ) ; final TYPE_3.Account account   new TYPE_3.Account ( VAR_1 ) ; account.METHOD_2 ( ) ; account.METHOD_3 ( email ) ; final TYPE_1 s   new TYPE_1 ( account VAR_2.Collections < TYPE_4.Id > METHOD_4 ( ) VAR_2.Collections < TYPE_5 > METHOD_4 ( ) ) ; return s ; } ) ( account account ) ( s s ) ( email final java.lang.String email ) ( account account ) 
( update update   ctx.METHOD_2 ( psId ) ) ( ctx ctx ) ( ctx TYPE_1 ctx ) ( ctx ctx ) 
( walk org.eclipse.jgit.revwalk.RevWalk walk ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_3 VAR_3   walk.parseCommit ( VAR_2.getId ( ) ) ) ( walk walk ) ( METHOD_1_return private static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk TYPE_1 VAR_1 TYPE_1 VAR_2 ) throws java.io.IOException TYPE_2 TYPE_3 { org.eclipse.jgit.revwalk.RevCommit VAR_3   walk.parseCommit ( VAR_2.getId ( ) ) ; if ( ( VAR_3.METHOD_2 ( ) ) > 0 ) { return TYPE_4.METHOD_3 ( VAR_3.METHOD_4 ( ) ) .contains ( VAR_1.getId ( ) ) ; } else { return VAR_1    ( VAR_4 ) ; } } ) ( VAR_1 TYPE_1 VAR_1 ) 
( commit commit ) ( info info ) ( info info ) ( commit commit   VAR_3.commit ( ) ) ( VAR_2 VAR_2   TYPE_2.METHOD_1 ( ) ) ( TYPE_2 TYPE_2 ) ( revision revision ) ( VAR_3 VAR_3 ) ( VAR_1 boolean VAR_1 ) ( info TYPE_1.ChangeInfo info ) ( revision java.lang.String revision ) ( commit commit ) ( VAR_3 VAR_3   info.revision ( revision ) ) ( info info ) 
( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   ( ( METHOD_3 ( ) ) + STRING_2 ) + ( METHOD_4 ( ) ) ) 
( apply_return public TYPE_1 < ? > apply ( TYPE_2 rsrc TYPE_3 in ) throws TYPE_4 com.google.gwtorm.server.OrmException { if ( ( VAR_1.get ( ) ) !   ( rsrc.METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } try { VAR_2.METHOD_2 ( VAR_1.get ( ) .getAccountId ( ) change.getId ( ) ) ; } catch ( TYPE_5 e ) { return TYPE_1.METHOD_3 ( ) ; } return TYPE_1.METHOD_3 ( ) ; } ) ( TYPE_1 TYPE_1 ) ( rsrc TYPE_2 rsrc ) ( in TYPE_3 in ) 
( VAR_2 VAR_2   METHOD_3 ( ) ) ( change change   METHOD_3 ( ) ) ( VAR_1 VAR_1   METHOD_2 ( ) ) ( Truth com.google.common.truth.Truth ) ( VAR_3 VAR_3   METHOD_2 ( ) ) 
( values values   new java.util.ArrayList < > ( ) ) 
( METHOD_1_return public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2.Key key ) throws java.io.IOException { try { TYPE_3 VAR_1   new TYPE_3 ( key.repo key.path ) ; try { VAR_1.METHOD_2 ( null VAR_2 ) ; return TYPE_2.METHOD_3 ( VAR_1 ) ; } finally { VAR_1.METHOD_4 ( ) ; } } finally { key.repo   null ; } } ) ( key TYPE_2.Key key ) 
( TYPE_3 TYPE_3 ) ( info TYPE_1 info ) ( r boolean r ) ( api api   TYPE_3.revision ( VAR_1 ) .view ( STRING_1 ) .id ( info.path ( ) ) .view ( STRING_2 ) ) 
( config TYPE_2 config ) ( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( TYPE_2 config java.lang.String VAR_1 java.lang.String VAR_2 ) { return new TYPE_3 ( ) .METHOD_2 ( TYPE_4.METHOD_3 ( TYPE_5.METHOD_4 ( ) ) ) .METHOD_5 ( VAR_3 ) .METHOD_6 ( VAR_4 ) .METHOD_7 ( config ) .METHOD_8 ( VAR_1 ) .METHOD_9 ( VAR_2 ) ; } ) ( VAR_2 java.lang.String VAR_2 ) 
( VAR_1 VAR_1   TYPE_3.create ( ) ) ( VAR_1 VAR_1 ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey com.google.gerrit.reviewdb.client.Change.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey com.google.gerrit.reviewdb.client.Change.Id > VAR_1   TYPE_3.create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1.put ( cd.change ( ) .getProject ( ) cd.getId ( ) ) ; } return VAR_1 ; } ) ( METHOD_1_return_line1_col475 return VAR_1 ; ) 
( VAR_8 java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_8 ) ( VAR_4 TYPE_6 VAR_4 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_10 TYPE_11 VAR_10 ) ( VAR_13 TYPE_15 VAR_13 ) ( VAR_5 TYPE_7 VAR_5 ) ( VAR_6 TYPE_8 VAR_6 ) ( VAR_11 TYPE_12 VAR_11 ) ( rw TYPE_5 rw ) ( VAR_7 TYPE_9 VAR_7 ) ( VAR_12 TYPE_13 < TYPE_14 com.google.gerrit.reviewdb.client.Account.Id > VAR_12 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_14 boolean VAR_14 ) ( create_return TYPE_1 create ( TYPE_2 VAR_1 TYPE_3.NameKey VAR_2 TYPE_4 VAR_3 TYPE_5 rw TYPE_6 VAR_4 TYPE_7 VAR_5 TYPE_8 VAR_6 org.eclipse.jgit.lib.Repository repo TYPE_9 VAR_7 com.google.gerrit.reviewdb.server.ReviewDb db java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_8 java.util.Set < TYPE_10 > VAR_9 TYPE_11 VAR_10 TYPE_12 VAR_11 TYPE_13 < TYPE_14 com.google.gerrit.reviewdb.client.Account.Id > VAR_12 TYPE_15 VAR_13 boolean VAR_14 ) ; ) ( VAR_2 TYPE_3.NameKey VAR_2 ) ( VAR_3 TYPE_4 VAR_3 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_9 java.util.Set < TYPE_10 > VAR_9 ) 
( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( ) .METHOD_3 ( new java.lang.String ( VAR_1 VAR_3 ) ) ) ( p p   new TYPE_1 ( ) ) ( VAR_1 byte [ ] VAR_1 ) ( Assert org.junit.Assert ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { byte [ ] VAR_2   TYPE_2.METHOD_2 ( ) .METHOD_3 ( new java.lang.String ( VAR_1 VAR_3 ) ) ; TYPE_1 p   new TYPE_1 ( ) ; p.METHOD_4 ( VAR_2 0 VAR_2.length ) ; org.junit.Assert.assertEquals ( TYPE_3.of ( ) p.METHOD_5 ( ) ) ; return p ; } ) ( p p ) ( METHOD_1_return_line1_col312 return p ; ) ( p p ) 
( VAR_2 VAR_2   VAR_3.create ( true ) ) ( VAR_2 VAR_2 ) ( result result   new TYPE_2 < > ( ) ) ( METHOD_1_return_line1_col415 return result ; ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_1 > result   new TYPE_2 < > ( ) ; TYPE_3 VAR_2   VAR_3.create ( true ) ; for ( com.google.gerrit.reviewdb.client.Account.Id VAR_4 : VAR_1 ) { result.add ( VAR_2.get ( VAR_4 ) ) ; } VAR_2.METHOD_2 ( ) ; return result ; } ) ( VAR_1 java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) ( VAR_3 VAR_3 ) ( result result ) 
( r r ) ( t t   METHOD_3 ( ) ) ( r r   new java.lang.StringBuilder ( ) ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 final TYPE_2 VAR_2 ) ( VAR_3 VAR_3   METHOD_4 ( ) ) ( nodeCall_toString_return r.toString ( ) ) ( r r ) ( VAR_1 VAR_1 ) (   VAR_1.METHOD_2 ( ) ) ( METHOD_1_return public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 final TYPE_2 VAR_2 ) { final java.lang.String   VAR_1.METHOD_2 ( ) ; final java.lang.String t   METHOD_3 ( ) ; final java.lang.String VAR_3   METHOD_4 ( ) ; final java.lang.StringBuilder r   new java.lang.StringBuilder ( ) ; r.append ( STRING_1 ) ; if ( VAR_1.METHOD_5 ( ) ) { r.append ( ( STRING_2 + VAR_3 ) ) ; r.append ( STRING_3 ) ; } return r.toString ( ) ; } ) ( METHOD_1_return_line1_col430 return r.toString ( ) ; ) 
( r r   VAR_1.put ( ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) + ( branch.METHOD_2 ( ) ) ) ) ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1 ) 
( db final TYPE_1.ReviewDb db ) ( VAR_1 final TYPE_2.Id VAR_1 ) 
( VAR_2 VAR_2 ) 
( VAR_1 TYPE_3 VAR_1 ) ( TYPE_5 TYPE_5 ) ( METHOD_1_return TYPE_1 METHOD_1 ( TYPE_2 config TYPE_3 VAR_1 ) { if ( ( VAR_2 ) !   null ) { return VAR_2 ; } int VAR_3   config.METHOD_2 ( STRING_1 null STRING_2 0 ) ; if ( VAR_3 <   0 ) { VAR_3   config.METHOD_2 ( STRING_3 null STRING_4 0 ) ; } if ( VAR_3 <   0 ) { VAR_3   TYPE_4.METHOD_3 ( ) .METHOD_4 ( ) ; } return TYPE_5.METHOD_5 ( VAR_1.METHOD_6 ( VAR_3 STRING_5 ) ) ; } ) ( VAR_3 VAR_3   config.METHOD_2 ( STRING_1 null STRING_2 0 ) ) ( config TYPE_2 config ) ( config config ) 
( VAR_1 TYPE_2 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_5 VAR_5 ) ( VAR_6 VAR_6 ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1.METHOD_2 ( ) ; TYPE_3 VAR_2   VAR_3 ; int VAR_4 ; VAR_2   VAR_2.METHOD_3 ( ) ; if ( ! ( VAR_2.METHOD_4 ( ) ) ) throw new TYPE_4 ( this 1 STRING_1 VAR_2 ) ; VAR_4   ( ( TYPE_5 ) ( VAR_2 ) ) .METHOD_5 ( ) ; VAR_5.METHOD_6 ( VAR_4 ) ; return VAR_6 ; } ) ( VAR_2 VAR_2   VAR_3 ) ( METHOD_1_return_line1_col315 return VAR_6 ; ) ( VAR_3 VAR_3 ) 
( VAR_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   new java.lang.String [ ] { STRING_1 STRING_2 } ) ( m m   VAR_2.METHOD_2 ( repo METHOD_3 ( ) VAR_1 true ) ) 
( STRING_1 STRING_1 ) ( VAR_1 VAR_1   STRING_1 ) 
( METHOD_1_return private TYPE_1.Key < TYPE_2 > METHOD_1 ( ) { new TYPE_2 ( ) { private static final long VAR_1   INT_1 ; VAR_2 ( TYPE_3 VAR_3 ) { } protected void METHOD_2 ( final TYPE_4 req final TYPE_5.HttpServletResponse rsp ) throws java.io.IOException { TYPE_6.METHOD_3 ( req.METHOD_4 ( ) .METHOD_5 ( req.METHOD_6 ( ) .length ( ) ) req rsp ) ; METHOD_7 ( VAR_4 ) ; TYPE_7 VAR_5 ; TYPE_8 VAR_6 ; TYPE_9.to VAR_7 ; } } ; } ) 
( VAR_1 VAR_1 ) ( ctx TYPE_1 ctx ) 
( VAR_2 VAR_2 ) 
( VAR_2 VAR_2 ) ( r r ) ( n n   r.METHOD_1 ( ) ) ( r final TYPE_1 r ) 
( VAR_2 final java.lang.String VAR_2 ) ( VAR_1 final java.lang.String VAR_1 ) ( err final TYPE_2 err ) ( METHOD_1_return public TYPE_1.OrmException METHOD_1 ( final java.lang.String VAR_1 final java.lang.String VAR_2 final TYPE_2 err ) { if ( ( ( err.METHOD_2 ( ) )    null ) & & ( ( err.METHOD_3 ( ) ) !   null ) ) { err.METHOD_4 ( err.METHOD_3 ( ) ) ; } return new TYPE_1.OrmException ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) err ) ; } ) 
( STRING_1 STRING_1 ) ( VAR_2 VAR_2   VAR_3.projects ( ) .name ( VAR_1 ) .create ( ) ) ( VAR_4 VAR_4   VAR_5.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_2 VAR_2 ) ( Assert org.junit.Assert ) ( VAR_5 VAR_5 ) ( VAR_3 VAR_3 ) ( p p   VAR_2.get ( ) ) ( Assert org.junit.Assert ) ( TYPE_5 TYPE_5 ) 
( VAR_1 VAR_1 ) ( VAR_2 final java.lang.String VAR_2 ) ( METHOD_1_return private static Account.Id METHOD_1 ( final TYPE_1 VAR_1 final java.lang.String VAR_2 ) throws TYPE_2 com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account a   VAR_1.METHOD_2 ( VAR_2 ) ; if ( a    null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a.getId ( ) ; } ) ( a a ) ( VAR_1 final TYPE_1 VAR_1 ) ( a a   VAR_1.METHOD_2 ( VAR_2 ) ) 
( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   TYPE_2.METHOD_2 ( VAR_3.METHOD_3 ( ) ) ) ( VAR_1 java.util.List < TYPE_1 > VAR_1 ) ( METHOD_1_return private boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2   TYPE_2.METHOD_2 ( VAR_3.METHOD_3 ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_2.METHOD_4 ( TYPE_3.METHOD_5 ( VAR_4 ) ) ; } for ( java.lang.String : VAR_2 ) { VAR_5.info ( java.lang.String.format ( STRING_1 ) ) ; VAR_3.METHOD_4 ( ) .METHOD_6 ( ) ; } return ! ( VAR_2.isEmpty ( ) ) ; } ) 
( VAR_2 int VAR_2 ) ( VAR_3 int VAR_3 ) ( edit boolean edit ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_4 VAR_4 ) 
( change com.google.gerrit.reviewdb.client.Change change ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_1 TYPE_1 VAR_1 ) ( reviewers java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) ( ps com.google.gerrit.reviewdb.client.PatchSet ps ) ( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( info TYPE_3 info ) ( VAR_2 java.util.List < TYPE_2 > VAR_2 ) 
( in in   p.METHOD_2 ( ) .METHOD_3 ( p.getName ( ) ) ) ( VAR_1 VAR_1 ) ( p p ) ( VAR_1 VAR_1   new TYPE_3 ( ) ) ( p final TYPE_1 p ) ( METHOD_1_return private static byte [ ] METHOD_1 ( final TYPE_1 p ) throws java.io.IOException { final TYPE_2 in   p.METHOD_2 ( ) .METHOD_3 ( p.getName ( ) ) ; TYPE_3 VAR_1   new TYPE_3 ( ) ; try { TYPE_4.METHOD_4 ( in VAR_1 ) ; } finally { in.close ( ) ; VAR_1.close ( ) ; } return VAR_1.METHOD_5 ( ) ; } ) 
( TYPE_1 TYPE_1 ) ( util util ) ( TYPE_1 TYPE_1 ) ( u u   util.user ( VAR_3 VAR_4 ) ) 
( VAR_2 VAR_2 ) 
( VAR_1 boolean VAR_1 ) ( TYPE_1 TYPE_1 ) 
( Assert org.junit.Assert ) ( VAR_1 VAR_1 ) ( r r   VAR_1.put ( ( ( ( STRING_1 + ( project.get ( ) ) ) + STRING_2 ) + ( branch.METHOD_4 ( ) ) ) ) ) 
( METHOD_1_return_line1_col239 return db ; ) ( METHOD_1_return protected TYPE_1.ReviewDb METHOD_1 ( ) throws TYPE_2 { if ( ( db )    null ) { try { db   METHOD_2 ( ) .METHOD_3 ( ) .METHOD_4 ( ) ; } catch ( TYPE_3.OrmException e ) { throw new TYPE_2 ( 1 STRING_1 e ) ; } } return db ; } ) ( db db ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( util util ) ( u u   util.user ( VAR_3 VAR_5 ) ) 
( VAR_4 VAR_4 ) ( VAR_3 VAR_3 ) ( diff_return public java.lang.String diff ( TYPE_1 VAR_1 TYPE_1 VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3   VAR_4 ; TYPE_3 VAR_5   VAR_3.diff ( VAR_6 VAR_1 VAR_2 ) ; TYPE_4 VAR_7   new TYPE_4 ( ) ; TYPE_5 VAR_8   new TYPE_5 ( VAR_7 ) ; VAR_8.format ( VAR_5 VAR_1 VAR_2 ) ; return VAR_7.toString ( VAR_9 ) ; } ) ( VAR_7 VAR_7 ) ( VAR_5 VAR_5   VAR_3.diff ( VAR_6 VAR_1 VAR_2 ) ) ( VAR_8 VAR_8 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 VAR_3   VAR_4 ) ( VAR_7 VAR_7   new TYPE_4 ( ) ) ( VAR_8 VAR_8   new TYPE_5 ( VAR_7 ) ) ( VAR_2 TYPE_1 VAR_2 ) 
( VAR_2 VAR_2   TYPE_2.METHOD_2 ( ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return_line1_col479 return VAR_2 ; ) ( TYPE_2 TYPE_2 ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { java.util.List < TYPE_1 > VAR_2   TYPE_2.METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey projectName : VAR_3.METHOD_3 ( ) ) { TYPE_3 e   VAR_3.get ( projectName ) ; if ( e    null ) { continue ; } if ( VAR_1.equals ( e.getProject ( ) .METHOD_4 ( VAR_4 ) ) ) { VAR_2.add ( VAR_5.format ( e.getProject ( ) ) ) ; } } return VAR_2 ; } ) ( VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) 
( VAR_2 VAR_2   new TYPE_3 ( ) .METHOD_2 ( VAR_3 ) .METHOD_3 ( VAR_4 ) .METHOD_4 ( insert ( VAR_4 VAR_1 ) ) .METHOD_5 ( VAR_5 ) .METHOD_6 ( ) ) ( client client ) ( result result   client.METHOD_7 ( VAR_2 ) ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_1 VAR_1   notes.getChange ( ) .METHOD_2 ( ) ) ( METHOD_1_return public boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1   notes.getChange ( ) .METHOD_2 ( ) ; if ( ( VAR_1 !   null ) & & ( METHOD_3 ( ) .METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id   METHOD_3 ( ) .getAccountId ( ) ; return id.equals ( VAR_1 ) ; } return false ; } ) ( notes notes ) 
( notes notes ) ( change_return public TYPE_1 change ( TYPE_2 notes ) { com.google.gerrit.reviewdb.client.Change change   notes.getChange ( ) ; TYPE_3.METHOD_1 ( METHOD_2 ( ) .getProject ( ) .METHOD_3 ( ) .equals ( change.getProject ( ) ) STRING_1 ) ; return METHOD_2 ( ) .METHOD_4 ( notes ) .METHOD_5 ( ) ; } ) ( TYPE_3 TYPE_3 ) ( notes TYPE_2 notes ) ( change change   notes.getChange ( ) ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.revwalk.RevWalk rw org.eclipse.jgit.revwalk.RevCommit base java.lang.String path TYPE_3 VAR_2 byte [ ] VAR_3 ) throws TYPE_4 java.io.IOException { final org.eclipse.jgit.lib.ObjectId VAR_4   ( VAR_1    ( VAR_5 ) ) ? VAR_2.insert ( VAR_6 VAR_3 ) : TYPE_5.METHOD_2 ( repo rw base path ) ; return new TYPE_1 ( path ) { public void apply ( TYPE_6 VAR_7 ) { VAR_7.METHOD_3 ( VAR_8 ) ; VAR_7.METHOD_4 ( VAR_4 ) ; } } ; } ) ( VAR_4 VAR_4   ( VAR_1    ( VAR_5 ) ) ? VAR_2.insert ( VAR_6 VAR_3 ) : TYPE_5.METHOD_2 ( repo rw base path ) ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_3 byte [ ] VAR_3 ) ( path java.lang.String path ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_2 TYPE_3 VAR_2 ) ( base org.eclipse.jgit.revwalk.RevCommit base ) 
( a TYPE_1 a ) ( change TYPE_2.Change change ) ( change change ) ( change change ) ( change change ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2 ) ( repo repo   VAR_2.METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) ( projectName java.lang.String projectName ) 
( TYPE_2 TYPE_2 ) ( p p   TYPE_2.METHOD_2 ( STRING_1 ) ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 java.lang.String id ) throws TYPE_3 java.lang.Exception { final TYPE_4 user   VAR_2.get ( ) ; if ( user instanceof TYPE_5 ) { throw new TYPE_6 ( STRING_1 ) ; } else if ( ! ( user instanceof TYPE_7 ) ) { throw new TYPE_3 ( id ) ; } return TYPE_8.METHOD_1 ( id VAR_3 ) ; } ) ( TYPE_8 TYPE_8 ) ( VAR_2 VAR_2 ) ( user user   VAR_2.get ( ) ) ( id java.lang.String id ) 
( VAR_2 VAR_2   VAR_3.METHOD_1 ( project.METHOD_2 ( ) ) ) ( VAR_3 VAR_3 ) ( project com.google.gerrit.reviewdb.client.Project project ) ( VAR_1 boolean VAR_1 ) 
( approvals_return private TYPE_1 < com.google.gerrit.reviewdb.client.PatchSetApproval > approvals ( com.google.gerrit.reviewdb.server.ReviewDb db final TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { return TYPE_3.METHOD_1 ( db.METHOD_2 ( ) .METHOD_3 ( rsrc.getChange ( ) .getId ( ) ) new TYPE_4 < com.google.gerrit.reviewdb.client.PatchSetApproval > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return input.getAccountId ( ) .equals ( rsrc.METHOD_4 ( ) .getAccountId ( ) ) ; } } ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( rsrc final TYPE_2 rsrc ) ( TYPE_3 TYPE_3 ) 
( res res ) ( res res ) ( res res ) ( req TYPE_1 req ) ( res TYPE_2.HttpServletResponse res ) ( type TYPE_3 type ) ( res res ) 
( TYPE_1 TYPE_1 ) 
( VAR_2 VAR_2 ) ( file java.lang.String file ) ( set set   VAR_2.get ( file ) ) ( VAR_1 java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) 
( METHOD_1_return public TYPE_1.Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref   repo.METHOD_2 ( VAR_1 ) ; VAR_2.run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref    null ) { VAR_3   org.eclipse.jgit.lib.ObjectId.METHOD_3 ( ) ; VAR_4   VAR_5.get ( ) ; } else { VAR_3   ref.METHOD_4 ( ) ; VAR_4   METHOD_5 ( rw VAR_3 ) ; } return METHOD_6 ( repo rw VAR_3 ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } ) ( ref ref   repo.METHOD_2 ( VAR_1 ) ) ( VAR_2 VAR_2 ) ( repo repo ) ( VAR_3 VAR_3 ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) .METHOD_1 ( ) ) ) & & ( VAR_1.METHOD_5 ( ) .METHOD_6 ( VAR_2 ) ) ) & & ( ! ( METHOD_7 ( db ) ) ) ; } ) 
( VAR_1 VAR_1 ) ( VAR_1 VAR_1   0 ) ( length_return public int length ( ) { int VAR_1   0 ; TYPE_1 t   this ; while ( t.METHOD_1 ( ) ) { VAR_1++ ; t   ( ( TYPE_2 ) ( t ) ) .METHOD_2 ( ) .METHOD_3 ( ) ; } return VAR_1 ; } ) ( t t   this ) ( length_return_line1_col177 return VAR_1 ; ) 
( VAR_1 TYPE_1 VAR_1 ) ( change TYPE_2.Change change ) ( VAR_3 VAR_3 ) ( patchSet TYPE_2.PatchSet patchSet ) ( VAR_2 VAR_2   VAR_3.get ( change patchSet ) ) 
( commit commit ) ( VAR_1 boolean VAR_1 ) ( VAR_6 VAR_6 ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4 ) ( VAR_5 VAR_5 ) 
( message message   VAR_2.get ( VAR_3 ) .commit.message ) ( info info   METHOD_3 ( METHOD_4 ( VAR_1 ) ) ) ( Truth com.google.common.truth.Truth ) ( message VAR_2.get ( VAR_3 ) .commit.message ) 
( topic java.lang.String topic ) ( in in   new TYPE_2 ( ) ) ( topic topic ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index.METHOD_2 ( TYPE_1.METHOD_3 ( new TYPE_2 ( db VAR_1.getId ( ) ) this ) ) .METHOD_4 ( ) ) { if ( VAR_2.getId ( ) .equals ( VAR_1.getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } ) ( VAR_1 com.google.gerrit.server.query.change.ChangeData VAR_1 ) 
( VAR_1 TYPE_2.ProjectConfig VAR_1 ) ( java.lang.String ) ( user_return private TYPE_1 user ( TYPE_2.ProjectConfig VAR_1 java.lang.String com.google.gerrit.reviewdb.client.AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3.Collections < TYPE_3 > METHOD_1 ( ) VAR_3.Collections < TYPE_3 > METHOD_1 ( ) VAR_4 VAR_5 null VAR_6 VAR_7 new TYPE_4 ( VAR_2 ) METHOD_2 ( VAR_1 ) ) ; } ) ( VAR_2 com.google.gerrit.reviewdb.client.AccountGroup ... VAR_2 ) 
( METHOD_1_return_line1_col386 return result ; ) ( result result ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 TYPE_3.Id VAR_2 ) { java.util.List < TYPE_1 > result   new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( TYPE_4.METHOD_2 ( change.METHOD_3 ( ) .get ( ) VAR_3.METHOD_4 ( ) ) ) & & ( VAR_2.equals ( VAR_3.METHOD_5 ( ) ) ) ) { result.add ( VAR_3 ) ; } } return result ; } ) ( VAR_2 TYPE_3.Id VAR_2 ) ( VAR_1 TYPE_2 < TYPE_1 > VAR_1 ) ( result result   new java.util.ArrayList < TYPE_1 > ( ) ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2   TYPE_1.METHOD_2 ( TYPE_2.create ( a ) TYPE_2.create ( b ) ) .toString ( ) ) ( TYPE_1 TYPE_1 ) ( a java.lang.String a ) ( b java.lang.String b ) 
( s s   VAR_1.METHOD_3 ( db ) ) ( VAR_1 VAR_1 ) 
( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 s ) { TYPE_3 VAR_1   TYPE_4.METHOD_2 ( ( s.METHOD_3 ( ) .METHOD_4 ( ) ? s.METHOD_3 ( ) .get ( ) : TYPE_4.METHOD_2 ( s.METHOD_5 ( ) .getId ( ) ) ) ) ; return new TYPE_1 ( VAR_1 TYPE_4.METHOD_6 ( VAR_1 s ) ) ; } ) ( VAR_1 VAR_1   TYPE_4.METHOD_2 ( ( s.METHOD_3 ( ) .METHOD_4 ( ) ? s.METHOD_3 ( ) .get ( ) : TYPE_4.METHOD_2 ( s.METHOD_5 ( ) .getId ( ) ) ) ) ) ( TYPE_4 TYPE_4 ) ( s TYPE_2 s ) 
( METHOD_1_return private static boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } TYPE_1 ui   null ; if ( TYPE_2.METHOD_2 ( ) ) { ui   TYPE_2.METHOD_3 ( ) .METHOD_4 ( ) .METHOD_5 ( ) ; } if ( ui    null ) { ui   TYPE_2.METHOD_6 ( ) .METHOD_5 ( ) ; } return ui    ( VAR_2 ) ; } ) ( ui ui   null ) 
( Collections java.util.Collections ) ( METHOD_1_return_line1_col453 return r ; ) ( METHOD_1_return private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < ? extends TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_1 ) { java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r   new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( VAR_1 ) ; java.util.Collections.METHOD_1 ( r VAR_2 ) ; return r ; } ) ( r r ) ( VAR_1 TYPE_2 < ? extends TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_1 ) ( r r   new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( VAR_1 ) ) 
( VAR_2 VAR_2   false ) ( ctx ctx ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 com.google.gwtorm.server.OrmException { user   ctx.METHOD_2 ( ) .METHOD_3 ( ) ; notes   ctx.METHOD_4 ( ) ; ps   VAR_1.get ( ctx.METHOD_5 ( ) ctx.METHOD_4 ( ) psId ) ; boolean VAR_2   false ; VAR_2 |  METHOD_6 ( ctx ) ; VAR_2 |  METHOD_7 ( ctx ) ; VAR_2 |  METHOD_8 ( ctx ) ; if ( VAR_2 ) { ctx.METHOD_9 ( ) ; } return VAR_2 ; } ) ( METHOD_1_return_line1_col403 return VAR_2 ; ) ( ctx TYPE_1 ctx ) ( ctx ctx ) 
( VAR_1 VAR_1   TYPE_3.METHOD_2 ( ) ) ( p TYPE_2 p ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return_line1_col298 return VAR_1 ; ) ( VAR_1 VAR_1 ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 p ) { java.util.List < TYPE_1 > VAR_1   TYPE_3.METHOD_2 ( ) ; for ( TYPE_2 c : p.METHOD_3 ( ) ) { if ( c.METHOD_4 ( ) ) { VAR_1.add ( VAR_2.format ( c.getProject ( ) ) ) ; VAR_1.METHOD_5 ( METHOD_1 ( c ) ) ; } } return VAR_1 ; } ) 
( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) 
( VAR_2 VAR_2   METHOD_2 ( STRING_2 ) ) ( VAR_4 VAR_4   insert ( METHOD_3 ( VAR_2 ) ) ) ( VAR_1 VAR_1   METHOD_2 ( STRING_1 ) ) ( VAR_3 VAR_3   insert ( METHOD_3 ( VAR_1 ) ) ) 
( TYPE_2 TYPE_2 ) ( u u   util.user ( VAR_1 VAR_4 ) ) ( r r   TYPE_2.METHOD_2 ( VAR_1 VAR_2 VAR_3 STRING_1 ) ) ( util util ) ( TYPE_2 TYPE_2 ) ( r r ) ( r r ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_1 TYPE_1.NameKey VAR_1 ) ( git org.eclipse.jgit.lib.Repository git ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( METHOD_1_return public static boolean METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet TYPE_1.NameKey VAR_1 org.eclipse.jgit.lib.Repository git org.eclipse.jgit.revwalk.RevWalk rw com.google.gerrit.reviewdb.server.ReviewDb db ) { try { TYPE_2.METHOD_2 ( patchSet VAR_1 git rw db ) ; return true ; } catch ( TYPE_3 e ) { return false ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { VAR_2.METHOD_3 ( java.lang.String.format ( STRING_1 patchSet.getId ( ) VAR_1 ) e ) ; return false ; } } ) ( patchSet com.google.gerrit.reviewdb.client.PatchSet patchSet ) 
( VAR_1 boolean VAR_1 ) 
( cd cd ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( id id   cd.getId ( ) .toString ( ) ) 
( update update ) ( VAR_1 TYPE_1.Factory VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_1.Factory VAR_1 ) { TYPE_2.METHOD_2 ( ( ( db ) !   null ) STRING_1 ) ; if ( ( update )    null ) { update   VAR_1.create ( db METHOD_3 ( ) VAR_2 VAR_3 ) .METHOD_4 ( repo rw VAR_4 ) .METHOD_5 ( VAR_5 ) .METHOD_6 ( VAR_6.create ( ) ) ; } return update ; } ) ( METHOD_1_return_line1_col308 return update ; ) ( TYPE_2 TYPE_2 ) 
( TYPE_3 TYPE_3 ) ( VAR_4 VAR_4 ) ( TYPE_3 TYPE_3 ) ( me me ) ( result final TYPE_1 result ) ( VAR_1 VAR_1 ) ( me me   TYPE_3.METHOD_2 ( ) ) ( me me ) ( me me ) 
( VAR_1 TYPE_1 VAR_1 ) ( args args   VAR_1.METHOD_3 ( ) ) ( METHOD_1_return_line1_col273 return VAR_2 ; ) ( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2   VAR_1.METHOD_2 ( ) ; java.lang.String [ ] args   VAR_1.METHOD_3 ( ) ; for ( int i   1 ; i < ( args.length ) ; i++ ) { VAR_2   ( VAR_2 + STRING_1 ) + ( args [ i ] ) ; } return VAR_2 ; } ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) ) 
( input TYPE_4 input ) ( VAR_1 TYPE_2.Factory VAR_1 ) ( VAR_2 VAR_2 ) ( rsrc TYPE_3 rsrc ) ( METHOD_1_return protected TYPE_1 < ? > METHOD_1 ( TYPE_2.Factory VAR_1 TYPE_3 rsrc TYPE_4 input ) throws TYPE_5 TYPE_6 { return VAR_2.apply ( VAR_1 rsrc.METHOD_2 ( ) .METHOD_3 ( ) rsrc.getChange ( ) rsrc.getChange ( ) .currentPatchSetId ( ) null ) ; } ) 
(   change.getProject ( ) ) ( change change ) ( METHOD_1_return private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1.Change change ) { TYPE_2.NameKey   change.getProject ( ) ; try { return VAR_1.METHOD_1 ( name.get ( ) ) ; } catch ( TYPE_3 err ) { VAR_2.METHOD_2 ( ( STRING_1 + ( name.get ( ) ) ) err ) ; return null ; } } ) ( change final TYPE_1.Change change ) 
( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id com.google.gerrit.reviewdb.client.PatchSetApproval > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 )    null ) { VAR_1   TYPE_3.create ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval VAR_2 : TYPE_4.METHOD_2 ( db.get ( ) .METHOD_3 ( ) .METHOD_4 ( VAR_3 ) ) ) { VAR_1.put ( VAR_2.METHOD_5 ( ) VAR_2 ) ; } } return VAR_1 ; } ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col506 return VAR_1 ; ) ( db TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) 
( cm TYPE_1 cm ) ( METHOD_1_return private int METHOD_1 ( TYPE_1 cm int line int VAR_1 ) { for ( int i   0 ; i < VAR_1 ; i++ ) { cm.METHOD_2 ( ( line + i ) VAR_2 VAR_3.diff ( ) ) ; } return line + VAR_1 ; } ) ( line int line ) ( VAR_1 int VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_1 ( STRING_1 ) ) 
( VAR_1 VAR_1 ) ( VAR_3 VAR_3   true ) ( VAR_1 VAR_1 ) ( VAR_2 final java.util.Set < TYPE_2 > VAR_2 ) ( VAR_1 final TYPE_1 VAR_1 ) 
( ctx TYPE_1 ctx ) ( c c   METHOD_2 ( branch ) ) 
( e TYPE_1 e ) ( TYPE_2 TYPE_2 ) 
( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) .METHOD_2 ( ) ) ) || ( METHOD_4 ( ) .METHOD_2 ( ) ) ) || ( METHOD_5 ( ) .METHOD_6 ( ) .METHOD_7 ( ) ) ) || ( METHOD_3 ( ) .METHOD_1 ( ) ) ) & & ( ! ( METHOD_8 ( db ) ) ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( schema schema   METHOD_2 ( ) ) 
( METHOD_1_return protected TYPE_1.Result METHOD_1 ( java.lang.String changeId ) throws java.io.IOException TYPE_2 { java.util.Collections.METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_2   VAR_3.create ( db admin.METHOD_3 ( ) VAR_4 VAR_5 new java.lang.String ( TYPE_4.METHOD_4 ( VAR_1 ) ) changeId ) ; return VAR_2.to ( git STRING_1 ) ; } ) ( changeId java.lang.String changeId ) ( VAR_3 VAR_3 ) ( Collections java.util.Collections ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   VAR_3.create ( db admin.METHOD_3 ( ) VAR_4 VAR_5 new java.lang.String ( TYPE_4.METHOD_4 ( VAR_1 ) ) changeId ) ) 
( METHOD_1_return protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { final TYPE_2 VAR_1   TYPE_2.METHOD_2 ( ) ; final TYPE_3 < TYPE_4.ReviewDb > VAR_2   VAR_1.METHOD_3 ( ) ; final TYPE_5 VAR_3   VAR_1.METHOD_4 ( ) ; final TYPE_6 config   VAR_1.METHOD_5 ( ) ; return new TYPE_7 ( VAR_2 VAR_3 config ) ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( config config   VAR_1.METHOD_5 ( ) ) ( VAR_3 VAR_3   VAR_1.METHOD_4 ( ) ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_2 VAR_2   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1 ) 
( e java.lang.Exception e ) ( err java.lang.String err ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String err java.lang.Exception e ) { if ( VAR_1 ) { if ( e    null ) { VAR_2.error ( err ) ; } else { VAR_2.error ( err e ) ; } return TYPE_2.METHOD_2 ( ) ; } else { return TYPE_1.error ( err ) ; } } ) 
( VAR_1 VAR_1 ) ( VAR_2 final short VAR_2 ) ( VAR_1 final TYPE_1 VAR_1 ) ( VAR_3 final short VAR_3 ) ( n n   VAR_1.METHOD_2 ( ) ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( n n   VAR_1.METHOD_3 ( ) ) 
( VAR_2 VAR_2   new TYPE_2 ( VAR_1 ) ) ( VAR_1 final TYPE_1 VAR_1 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { TYPE_1 msg   TYPE_3.METHOD_2 ( TYPE_3.METHOD_3 ( TYPE_4.METHOD_4 ( VAR_1.get ( ) .METHOD_5 ( ) .METHOD_6 ( rsrc.getChange ( ) .getId ( ) ) .METHOD_7 ( ) ) new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input.METHOD_8 ( ) )    null ; } } ) null ) ; return msg ; } ) ( msg msg   TYPE_3.METHOD_2 ( TYPE_3.METHOD_3 ( TYPE_4.METHOD_4 ( VAR_1.get ( ) .METHOD_5 ( ) .METHOD_6 ( rsrc.getChange ( ) .getId ( ) ) .METHOD_7 ( ) ) new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input.METHOD_8 ( ) )    null ; } } ) null ) ) ( rsrc TYPE_2 rsrc ) ( METHOD_1_return_line1_col404 return msg ; ) ( TYPE_3 TYPE_3 ) ( msg msg ) 
( VAR_1 VAR_1 ) ( VAR_1 final org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) 
( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2   new TYPE_2 ( VAR_1.METHOD_2 ( ) ) ; try { TYPE_3 VAR_3   VAR_2.METHOD_3 ( ) ; TYPE_4 VAR_4   VAR_3.METHOD_4 ( ) ; return VAR_4.getValue ( VAR_5 ) ; } finally { VAR_2.close ( ) ; } } ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_1.METHOD_2 ( ) ) ) 
( VAR_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( rsrc TYPE_2 rsrc ) ( TYPE_1 TYPE_1 ) ( apply_return public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 TYPE_5 com.google.gwtorm.server.OrmException { if ( ( rsrc.METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc.getChange ( ) ) ) ) ) { return TYPE_1.METHOD_3 ( STRING_1 ) ; } VAR_1.METHOD_4 ( VAR_2.get ( ) .getAccountId ( ) rsrc.getProject ( ) rsrc.getChange ( ) ) ; return TYPE_1.METHOD_3 ( STRING_1 ) ; } ) ( input TYPE_3 input ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) .METHOD_2 ( ) ) & & ( ! ( METHOD_3 ( db cd ) ) ) ) { return false ; } if ( ( ( getChange ( ) .getStatus ( ) )    ( VAR_1 ) ) & & ( ! ( METHOD_4 ( db cd ) ) ) ) { return false ; } return METHOD_5 ( ) .METHOD_1 ( ) ; } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) 
( VAR_2 java.lang.String VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( type_return private static TYPE_1 type ( TYPE_2 VAR_1 java.lang.String VAR_2 ) { if ( ( VAR_1.METHOD_1 ( VAR_2 ) ) !   null ) { return VAR_1.METHOD_1 ( VAR_2 ) ; } for ( TYPE_1 VAR_3 : VAR_1.METHOD_2 ( ) ) { if ( VAR_2.METHOD_3 ( VAR_3.getName ( ) ) ) { return VAR_3 ; } } return null ; } ) 
( VAR_1 java.lang.String VAR_1 ) ( VAR_4 VAR_4 ) ( java.lang.String ) ( VAR_2 java.lang.String VAR_2 ) ( METHOD_1_return public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 java.lang.String VAR_2 java.lang.String ) { java.lang.String [ ] VAR_3   VAR_4.METHOD_2 ( VAR_1 VAR_2 ) ; if ( VAR_3 !   null ) { return VAR_3 ; } return super.METHOD_1 ( VAR_1 VAR_2 ) ; } ) ( VAR_3 VAR_3   VAR_4.METHOD_2 ( VAR_1 VAR_2 ) ) 
( VAR_1 VAR_1 ) ( VAR_4 VAR_4 ) ( TYPE_1 TYPE_1 ) ( file file ) ( file file ) ( file file ) 
( METHOD_1_return private boolean METHOD_1 ( TYPE_1.Change c ) throws TYPE_2.OrmException { final TYPE_3 commit   VAR_1.get ( c.getId ( ) ) ; final TYPE_4 s   ( commit !   null ) ? VAR_2 : null ; boolean VAR_3   false ; if ( ( s !   null ) & & ( ( ( s.equals ( VAR_4 ) ) || ( s.equals ( VAR_5 ) ) ) || ( s.equals ( VAR_6 ) ) ) ) { VAR_3   true ; } return VAR_3 ; } ) ( s s   ( commit !   null ) ? VAR_2 : null ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3   false ) ( METHOD_1_return_line1_col361 return VAR_3 ; ) ( c TYPE_1.Change c ) ( commit commit   VAR_1.get ( c.getId ( ) ) ) ( VAR_3 VAR_3 ) 
( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( VAR_4 VAR_4   VAR_5.METHOD_2 ( name.get ( ) ) ) ( VAR_3 org.eclipse.jgit.lib.ObjectId VAR_3 ) ( VAR_5 VAR_5 ) ( com.google.gerrit.reviewdb.client.Project.NameKey ) ( VAR_1 java.lang.String VAR_1 ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 final TYPE_3 VAR_2 ) throws TYPE_4 { final TYPE_5 group   VAR_3.get ( VAR_2 ) ; if ( group    null ) { throw new TYPE_4 ( VAR_2 ) ; } return new TYPE_1 ( VAR_1 group ) ; } ) ( VAR_1 final TYPE_2 VAR_1 ) ( VAR_2 final TYPE_3 VAR_2 ) ( group group   VAR_3.get ( VAR_2 ) ) ( VAR_3 VAR_3 ) 
( VAR_1 int VAR_1 ) 
( result result   VAR_3.METHOD_4 ( VAR_1.METHOD_5 ( ) VAR_2 VAR_1.METHOD_6 ( ) ) ) ( TYPE_1 TYPE_1 ) ( VAR_3 VAR_3 ) ( Assert org.junit.Assert ) ( VAR_1 VAR_1   TYPE_1.METHOD_2 ( ) ) ( VAR_2 VAR_2   ( VAR_1.METHOD_3 ( ) ) + 1 ) 
( walk org.eclipse.jgit.revwalk.RevWalk walk ) ( walk walk ) ( id org.eclipse.jgit.lib.ObjectId id ) 
( java.lang.String ) ( METHOD_1_return TYPE_1 METHOD_1 ( java.lang.String ) { try { TYPE_2 p   METHOD_2 ( ) ; return VAR_1.get ( p METHOD_3 ( p ) ) ; } catch ( TYPE_3 e ) { VAR_2.METHOD_4 ( java.lang.String.format ( STRING_1 ) e ) ; return null ; } } ) 
( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_1 boolean VAR_1 ) ( VAR_3 VAR_3 ) ( TYPE_1 TYPE_1 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2.NameKey branch ) throws TYPE_3 { final TYPE_4 p   VAR_1.get ( branch.getParentKey ( ) ) ; if ( p    null ) { throw new TYPE_3 ( branch.getParentKey ( ) ) ; } return p.METHOD_1 ( ) ; } ) ( VAR_1 VAR_1 ) ( branch TYPE_2.NameKey branch ) ( p p   VAR_1.get ( branch.getParentKey ( ) ) ) ( p p ) 
( c c ) ( c c ) ( c c   new TYPE_3 ( ) ) ( cfg TYPE_2 cfg ) ( METHOD_1_return private TYPE_1 [ ] METHOD_1 ( TYPE_2 cfg ) { TYPE_1 c   new TYPE_3 ( ) ; c.METHOD_2 ( null ) ; c.METHOD_3 ( cfg.METHOD_4 ( STRING_1 null STRING_2 INT_1 ) ) ; c.METHOD_5 ( false ) ; return new TYPE_1 [ ] { c } ; } ) ( c c ) 
( change com.google.gerrit.server.query.change.ChangeData change ) ( VAR_1 boolean VAR_1 ) ( Truth com.google.common.truth.Truth ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( db change.change ( ) user ( admin ) ) ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_3 TYPE_3 ) 
( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1 ) ( reviewers reviewers   VAR_1.METHOD_2 ( db TYPE_1.of ( user.email admin.email ) project change VAR_2.METHOD_3 ( ) .id ( VAR_3.get ( ) ) .get ( ) ) ) 
( d d   res.get ( STRING_2 ) ) ( Assert org.junit.Assert ) ( res res ) ( res res   METHOD_2 ( STRING_1 new TYPE_2 < java.util.Map < java.lang.String TYPE_1 > > ( ) { } .METHOD_3 ( ) ) ) ( Assert org.junit.Assert ) 
( email final java.lang.String email ) ( METHOD_1_return private TYPE_1 METHOD_1 ( final java.lang.String email ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { java.util.List < com.google.gerrit.reviewdb.client.Account > VAR_1   db.METHOD_3 ( ) .METHOD_1 ( email ) .METHOD_4 ( ) ; return ( VAR_1.size ( ) )    1 ? auth ( VAR_1.get ( 0 ) ) : null ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) .log ( STRING_1 e ) ; return null ; } } ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_1 VAR_1 ) ( info TYPE_2 info ) ( VAR_1 VAR_1 ) 
( VAR_3 VAR_3   TYPE_1.METHOD_2 ( STRING_1 STRING_2 VAR_2 ) ) ( METHOD_1_return_line1_col333 return VAR_3 ; ) ( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) ( VAR_3 VAR_3 ) ( TYPE_1 TYPE_1 ) ( out out   new TYPE_4 ( VAR_3 ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 TYPE_1 VAR_2 ) throws TYPE_2 java.io.IOException TYPE_3 { TYPE_1 VAR_3   TYPE_1.METHOD_2 ( STRING_1 STRING_2 VAR_2 ) ; TYPE_4 out   new TYPE_4 ( VAR_3 ) ; try { git.METHOD_3 ( VAR_1 ) .METHOD_4 ( out ) ; } finally { out.close ( ) ; } return VAR_3 ; } ) ( VAR_2 TYPE_1 VAR_2 ) 
( diff TYPE_2 diff ) ( repo org.eclipse.jgit.lib.Repository repo ) ( path java.lang.String path ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 TYPE_1 VAR_2 ) 
( VAR_4 VAR_4 ) ( VAR_4 VAR_4 ) ( VAR_1 final TYPE_2.Change VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4 ) ( METHOD_1_return_line1_col415 return VAR_4 ; ) ( VAR_2 java.util.Map < TYPE_3.Id TYPE_4.Id > VAR_2 ) ( METHOD_1_return private TYPE_1.ChangeInfo METHOD_1 ( final TYPE_2.Change VAR_1 java.util.Map < TYPE_3.Id TYPE_4.Id > VAR_2 ) { VAR_3.METHOD_2 ( VAR_1.METHOD_3 ( ) ) ; TYPE_1.ChangeInfo VAR_4 ; if ( VAR_2    null ) { VAR_4   new TYPE_1.ChangeInfo ( VAR_1 ) ; } else { VAR_4   new TYPE_1.ChangeInfo ( VAR_1 VAR_2.get ( VAR_1.getId ( ) ) ) ; } VAR_4.METHOD_4 ( METHOD_5 ( VAR_1 ) ) ; return VAR_4 ; } ) 
( Assert org.junit.Assert ) ( VAR_1 VAR_1   STRING_1 ) ( STRING_1 STRING_1 ) ( VAR_2 VAR_2   ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( VAR_3 VAR_3   repo.METHOD_4 ( ) ) ( repo repo ) ( VAR_1 boolean VAR_1 ) ( p com.google.gerrit.reviewdb.client.Project.NameKey p ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p boolean VAR_1 ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo   ( VAR_1 ) ? VAR_2.METHOD_2 ( p ) : VAR_2.METHOD_3 ( p ) ; TYPE_2 VAR_3   repo.METHOD_4 ( ) ; return new TYPE_1 ( repo new org.eclipse.jgit.revwalk.RevWalk ( VAR_3.METHOD_5 ( ) ) VAR_3 new TYPE_3 ( ) true ) ; } ) ( repo repo   ( VAR_1 ) ? VAR_2.METHOD_2 ( p ) : VAR_2.METHOD_3 ( p ) ) 
( info TYPE_1 info ) 
( b b ) ( b b   new TYPE_1 ( ) ) 
( in TYPE_1 in ) ( Assert org.junit.Assert ) ( Truth com.google.common.truth.Truth ) ( VAR_1 TYPE_2 < ? extends TYPE_3 > VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_2 VAR_2 ) 
( patchSets final TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > patchSets ) ( change final com.google.gerrit.reviewdb.client.Change change ) 
( VAR_5 VAR_5 ) ( VAR_1 TYPE_2 ... VAR_1 ) ( METHOD_1_return_line1_col283 return VAR_2 ; ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   METHOD_2 ( VAR_1 ) ) ( VAR_4 VAR_4 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 ... VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2   METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; VAR_4.changes ( ) .id ( VAR_2.changeId ) .revision ( STRING_1 ) .METHOD_4 ( TYPE_3.METHOD_5 ( ) ) ; VAR_5.METHOD_6 ( ) ; return VAR_2 ; } ) 
( VAR_1 VAR_1   TYPE_1.METHOD_1 ( user ) ) ( TYPE_1 TYPE_1 ) ( toString_return public java.lang.String toString ( ) { java.lang.String VAR_1   TYPE_1.METHOD_1 ( user ) ; if ( ( VAR_1.METHOD_2 ( CHAR_1 ) ) < 0 ) { return ( ( VAR_2 ) + STRING_1 ) + VAR_1 ; } else { return ( ( ( VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; } } ) 
( VAR_1 VAR_1   METHOD_2 ( req ) ) ( in in   new TYPE_6 ( VAR_1 ) ) ( res res ) ( req TYPE_1 req ) ( res res ) ( res res ) ( out out   res.METHOD_6 ( ) ) ( res TYPE_2.HttpServletResponse res ) ( res res ) 
( url url ) ( VAR_1 VAR_1 ) ( url url   new java.lang.StringBuilder ( ) ) ( nodeCall_append_return url.append ( VAR_1 ) ) ( url url ) ( rsp rsp ) ( req final TYPE_1 req ) ( url url ) ( url url ) ( VAR_1 final java.lang.String VAR_1 ) ( rsp final TYPE_2.HttpServletResponse rsp ) 
( VAR_4 VAR_4   new TYPE_1.Id ( VAR_5 VAR_3 ) ) ( key key ) ( key key   new TYPE_3 ( ) .create ( VAR_4 VAR_1 ) ) ( METHOD_1_return public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2.METHOD_2 ( ( ( VAR_2 ) !   null ) STRING_1 ) ; int VAR_3   ( VAR_2.isEmpty ( ) ) ? 1 : ( VAR_2.size ( ) ) + 1 ; TYPE_1.Id VAR_4   new TYPE_1.Id ( VAR_5 VAR_3 ) ; TYPE_1 key   new TYPE_3 ( ) .create ( VAR_4 VAR_1 ) ; VAR_2.add ( TYPE_4.of ( key ) ) ; return key ; } ) ( TYPE_2 TYPE_2 ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_3 VAR_3   ( VAR_2.isEmpty ( ) ) ? 1 : ( VAR_2.size ( ) ) + 1 ) ( METHOD_1_return_line1_col349 return key ; ) 
( u u   user ( ) ) 
( Truth com.google.common.truth.Truth ) ( VAR_2 VAR_2   new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) 
( master master   METHOD_3 ( STRING_2 ) .METHOD_4 ( ) .name ( ) ) ( TYPE_1 TYPE_1 ) 
( r TYPE_1.Result r ) ( VAR_4 VAR_4 ) ( Assert org.junit.Assert ) ( VAR_1 int VAR_1 ) ( c c   get ( r.getChangeId ( ) VAR_2 ) ) ( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( VAR_3 VAR_3   VAR_4.get ( STRING_1 ) ) 
( TYPE_2 TYPE_2 ) ( n n   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( VAR_1 VAR_1 ) 
( VAR_2 TYPE_2 < TYPE_3 > VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) 
( VAR_3 VAR_3 ) ( VAR_4 VAR_4 ) ( VAR_1 VAR_1   ( TYPE_1.METHOD_1 ( ) ) - ( ( TYPE_2.METHOD_2 ( ) ) + INT_1 ) ) ( VAR_7 VAR_7 ) ( VAR_2 VAR_2 ) 
( VAR_4 VAR_4   new java.util.ArrayList ( ( 1 + ( VAR_3.length ) ) ) ) ( Truth com.google.common.truth.Truth ) ( VAR_4 VAR_4 ) ( notes TYPE_1 notes ) ( VAR_3 TYPE_3 ... VAR_3 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 TYPE_3 VAR_2 ) ( VAR_4 VAR_4 ) 
( METHOD_1_return public TYPE_1.Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref   repo.METHOD_2 ( VAR_1 ) ; VAR_2.run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref    null ) { VAR_3   org.eclipse.jgit.lib.ObjectId.METHOD_3 ( ) ; VAR_4   VAR_5.get ( ) ; } else { VAR_3   ref.METHOD_4 ( ) ; VAR_4   METHOD_5 ( VAR_3 ) ; } return METHOD_6 ( repo rw VAR_3 ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } ) ( repo repo ) ( VAR_3 VAR_3 ) ( ref ref   repo.METHOD_2 ( VAR_1 ) ) ( VAR_2 VAR_2 ) 
( VAR_1 TYPE_1 VAR_1 ) ( req req   ( ( TYPE_5 ) ( VAR_1 ) ) ) ( rsp rsp   new TYPE_7 ( ( ( TYPE_8.HttpServletResponse ) ( VAR_2 ) ) ) ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_3 TYPE_3 VAR_3 ) 
( apply_return public TYPE_1 apply ( TYPE_2 VAR_1 TYPE_3 input ) throws TYPE_4 TYPE_5 TYPE_6 com.google.gwtorm.server.OrmException { TYPE_7 in   new TYPE_7 ( ) ; VAR_2   id ; java.util.List < TYPE_1 > VAR_3   put.get ( ) .apply ( VAR_1 in ) ; if ( ( VAR_3.size ( ) )    1 ) { return VAR_3.get ( 0 ) ; } throw new TYPE_8 ( ) ; } ) ( in in   new TYPE_7 ( ) ) ( VAR_1 TYPE_2 VAR_1 ) ( id id ) ( input TYPE_3 input ) ( put put ) ( VAR_3 VAR_3   put.get ( ) .apply ( VAR_1 in ) ) 
( a a   new TYPE_1 ( VAR_1 STRING_2 ) ) ( STRING_1 STRING_1 ) ( VAR_1 VAR_1   STRING_1 ) 
( id com.google.gerrit.reviewdb.client.Change.Id id ) ( METHOD_1_return static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id id int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null id ) ; VAR_1   new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id currentPatchSetId ) ) ; return cd ; } ) ( currentPatchSetId int currentPatchSetId ) ( cd cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null null id ) ) ( METHOD_1_return_line1_col481 return cd ; ) ( cd cd ) 
( currentPatchSetId int currentPatchSetId ) ( id com.google.gerrit.reviewdb.client.Change.Id id ) ( METHOD_1_return static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id id int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null id ) ; VAR_1   new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id currentPatchSetId ) ) ; return cd ; } ) ( METHOD_1_return_line1_col474 return cd ; ) ( cd cd   new com.google.gerrit.server.query.change.ChangeData ( null null null null null null null null id ) ) ( cd cd ) 
( edit edit   VAR_1.METHOD_2 ( change ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws TYPE_1 TYPE_2 java.io.IOException { TYPE_3 < TYPE_4 > edit   VAR_1.METHOD_2 ( change ) ; if ( edit.METHOD_3 ( ) ) { return edit.get ( ) .METHOD_4 ( ) .METHOD_5 ( ) ; } throw new TYPE_2 ( change.getId ( ) ) ; } ) 
( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( factory factory ) ( VAR_3 VAR_3 ) ( create_return_line1_col330 return VAR_3 ; ) ( user TYPE_2 user ) ( com.google.gerrit.reviewdb.client.Project.NameKey ) ( create_return public TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey org.eclipse.jgit.lib.Repository VAR_1 TYPE_2 user TYPE_3 VAR_2 ) { TYPE_1 VAR_3   factory.create ( VAR_1 VAR_2 ) ; VAR_3.METHOD_1 ( ) .METHOD_2 ( METHOD_3 ( user ) ) ; VAR_3.METHOD_1 ( ) .METHOD_4 ( VAR_4 ) ; return VAR_3 ; } ) ( VAR_3 VAR_3   factory.create ( VAR_1 VAR_2 ) ) ( VAR_2 TYPE_3 VAR_2 ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3 ) 
( METHOD_1_return private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException TYPE_1 { java.util.Map < TYPE_2 byte [ ] > VAR_1   new TYPE_3 < > ( ) ; VAR_1.put ( new TYPE_2 ( repo.METHOD_2 ( ) .METHOD_3 ( ) STRING_1 ) null ) ; return TYPE_4.METHOD_4 ( repo STRING_2 VAR_1 ) ; } ) ( VAR_1 VAR_1   new TYPE_3 < > ( ) ) ( VAR_1 VAR_1 ) ( TYPE_4 TYPE_4 ) 
( db db ) ( config config   METHOD_2 ( ) ) 
( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_1 TYPE_1 VAR_1 ) 
( msg java.lang.String msg ) ( t TYPE_1 t ) 
( VAR_1 final TYPE_3 < TYPE_4 > VAR_1 ) ( r r   new java.util.ArrayList < TYPE_2 > ( ) ) ( get_return public TYPE_1 < TYPE_2 > get ( final TYPE_3 < TYPE_4 > VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.ArrayList < TYPE_2 > r   new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_4 key : VAR_1 ) { final TYPE_2 VAR_2   get ( key ) ; if ( VAR_2 !   null ) { r.add ( VAR_2 ) ; } } return new TYPE_5 < TYPE_2 > ( r ) ; } ) 
( VAR_1 final TYPE_1 VAR_1 ) ( n n   VAR_1.METHOD_2 ( ) ) ( VAR_3 final java.lang.String VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_2 final java.lang.String VAR_2 ) 
( ctx ctx   new TYPE_1 ( VAR_3.METHOD_3 ( notes user ) new TYPE_3 ( db ) ) ) ( ctx ctx ) ( c c   VAR_1.get ( id ) ) ( id com.google.gerrit.reviewdb.client.Change.Id id ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id id ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c   VAR_1.get ( id ) ; if ( c    null ) { c   db.changes ( ) .get ( id ) ; } TYPE_2 notes   VAR_2.METHOD_2 ( c ) ; TYPE_1 ctx   new TYPE_1 ( VAR_3.METHOD_3 ( notes user ) new TYPE_3 ( db ) ) ; if ( VAR_4.METHOD_4 ( ) ) { ctx.METHOD_5 ( ) .METHOD_6 ( ) ; } return ctx ; } ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( notes notes   VAR_2.METHOD_2 ( c ) ) ( METHOD_1_return_line1_col441 return ctx ; ) 
( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) ( TYPE_2 TYPE_2 ) 
( METHOD_1_return public java.util.List < java.lang.String > METHOD_1 ( ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1   TYPE_2.METHOD_2 ( ) ; java.lang.String [ ] VAR_2   METHOD_3 ( ) .METHOD_4 ( ) ; if ( VAR_2 !   null ) { for ( java.lang.String VAR_3 : VAR_2 ) { java.lang.String VAR_4   VAR_3.METHOD_5 ( 0 ( ( VAR_3.length ( ) ) - ( TYPE_3.length ( ) ) ) ) ; VAR_1.add ( VAR_4 ) ; } } return VAR_1 ; } ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return_line1_col416 return VAR_1 ; ) ( VAR_2 VAR_2   METHOD_3 ( ) .METHOD_4 ( ) ) 
( branch TYPE_2.NameKey branch ) ( TYPE_4 TYPE_4 ) ( METHOD_1_return public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2.NameKey branch java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema   TYPE_4.schema ( VAR_2 ) ; if ( schema.METHOD_2 ( VAR_3 ) ) { return query ( TYPE_4.METHOD_3 ( branch TYPE_4.METHOD_4 ( schema VAR_1 ) ) ) ; } else { return METHOD_1 ( schema branch VAR_1 VAR_4.METHOD_5 ( ) ) ; } } ) ( schema schema   TYPE_4.schema ( VAR_2 ) ) ( VAR_1 java.util.List < java.lang.String > VAR_1 ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) ( line int line ) 
( METHOD_1_return public static java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Change.Status status ) { if ( status    null ) { return STRING_1 ; } switch ( status ) { case VAR_1 : return TYPE_1.METHOD_2 ( ) ; case VAR_2 : return TYPE_1.METHOD_3 ( ) ; case VAR_3 : return TYPE_1.METHOD_4 ( ) ; case VAR_4 : return TYPE_1.METHOD_5 ( ) ; case VAR_5 : return TYPE_1.METHOD_6 ( ) ; default : return status.name ( ) ; } } ) ( status final com.google.gerrit.reviewdb.client.Change.Status status ) 
( VAR_1 TYPE_1 VAR_1 ) ( rsp rsp ) ( rsp rsp ) ( rsp rsp ) ( rsp TYPE_2.HttpServletResponse rsp ) ( rsp rsp ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) ) ( out out   rsp.METHOD_7 ( ) ) ( rsp rsp ) ( VAR_1 VAR_1 ) ( rsp rsp ) 
( a a   TYPE_4.METHOD_3 ( ) .get ( me db ) ) ( TYPE_4 TYPE_4 ) ( server server ) ( db final TYPE_2.ReviewDb db ) ( me final TYPE_1.Id me ) ( c c   server.METHOD_2 ( ) ) 
( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1 ) ( reviewers reviewers   VAR_1.METHOD_2 ( db java.util.Collections.singleton ( user.email ) project change VAR_2.METHOD_3 ( ) .id ( VAR_3.get ( ) ) .get ( ) ) ) 
( VAR_4 VAR_4 ) ( VAR_2 VAR_2   METHOD_2 ( VAR_3 ) ) (   ( STRING_1 ) ) ( VAR_4 VAR_4 ) ( Truth com.google.common.truth.Truth ) 
( VAR_4 VAR_4   VAR_2.METHOD_3 ( ) ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   VAR_3.METHOD_2 ( ) ) ( event java.lang.String event ) ( projectName java.lang.String projectName ) ( VAR_3 VAR_3 ) ( VAR_1 TYPE_1 VAR_1 ) 
( METHOD_1_return private boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) .METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( ( METHOD_6 ( ) ) & & ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8.METHOD_8 ( ) ) ; } } ) 
( METHOD_1_return protected TYPE_1 METHOD_1 ( ) { switch ( status ) { case VAR_1 : return new TYPE_2 ( project STRING_1 ) ; case VAR_2 : return new TYPE_3 ( project STRING_1 ) ; case VAR_3 : case VAR_4 : default : return new TYPE_4 ( project STRING_1 ) ; } } ) 
( change com.google.gerrit.reviewdb.client.Change change ) ( METHOD_1_return static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( null change.getId ( ) null TYPE_3.of ( ) TYPE_3.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_5.METHOD_1 ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_4.of ( ) TYPE_6.of ( ) TYPE_6.of ( ) null ) ; } ) 
( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change TYPE_1 user com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1   VAR_2.get ( change.getProject ( ) ) ; if ( VAR_1    null ) { return false ; } TYPE_3 VAR_3   VAR_1.METHOD_2 ( user ) ; return VAR_3.METHOD_2 ( db change ) .METHOD_3 ( db ) ; } ) ( VAR_1 VAR_1   VAR_2.get ( change.getProject ( ) ) ) ( VAR_1 VAR_1 ) ( user TYPE_1 user ) ( change com.google.gerrit.reviewdb.client.Change change ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( user ) ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2 ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( changes java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) ( project com.google.gerrit.reviewdb.client.Project.NameKey project ) ( git git ) 
( rsrc TYPE_2 rsrc ) ( input TYPE_3 input ) ( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1 ) ( apply_return public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 TYPE_5 com.google.gwtorm.server.OrmException { if ( ( rsrc.METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc.getChange ( ) ) ) ) ) { return TYPE_1.METHOD_3 ( STRING_1 ) ; } VAR_1.METHOD_4 ( rsrc ) ; return TYPE_1.METHOD_3 ( STRING_1 ) ; } ) 
( METHOD_1_return public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 java.lang.String VAR_2 TYPE_2 VAR_3 ) throws TYPE_3 TYPE_4 { TYPE_5 VAR_4   new TYPE_5 ( VAR_1 VAR_2 VAR_3 ) ; try ( TYPE_6 u   VAR_5.create ( VAR_6.get ( ) VAR_1.getProject ( ) .METHOD_2 ( ) VAR_1.METHOD_3 ( ) TYPE_7.METHOD_4 ( ) ) ) { u.METHOD_5 ( VAR_1.getId ( ) VAR_4 ) .METHOD_6 ( ) ; } return VAR_4.change ; } ) ( change VAR_4.change ) ( METHOD_1_return_line1_col418 return VAR_4.change ; ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_3 TYPE_2 VAR_3 ) ( VAR_4 VAR_4   new TYPE_5 ( VAR_1 VAR_2 VAR_3 ) ) 
( value int value ) ( VAR_2 com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ( VAR_3 VAR_3 ) ( VAR_1 TYPE_2 VAR_1 ) ( notes TYPE_1 notes ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 notes TYPE_2 VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_2 int value ) throws TYPE_3 TYPE_4 { if ( METHOD_2 ( notes VAR_1 VAR_2 value ) ) { return true ; } return VAR_3.user ( VAR_1 ) .change ( notes ) .METHOD_3 ( VAR_4 ) .METHOD_4 ( VAR_5 ) ; } ) 
( req TYPE_2 req ) ( create_return_line1_col394 return VAR_2 ; ) ( repo org.eclipse.jgit.lib.Repository repo ) ( create_return public TYPE_1 create ( TYPE_2 req org.eclipse.jgit.lib.Repository repo ) throws TYPE_3 TYPE_4 { TYPE_5 VAR_1   TYPE_6.METHOD_1 ( req ) ; if ( ! ( VAR_1.METHOD_2 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_1 VAR_2   new TYPE_1 ( repo ) ; VAR_2.METHOD_3 ( VAR_3 ) ; if ( ! ( VAR_1.METHOD_4 ( ) ) ) { VAR_2.METHOD_5 ( new TYPE_7 ( repo VAR_1 db.get ( ) ) ) ; } return VAR_2 ; } ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   TYPE_6.METHOD_1 ( req ) ) ( TYPE_6 TYPE_6 ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   new TYPE_1 ( repo ) ) 
( VAR_2 int VAR_2 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_3 TYPE_2 VAR_3 ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 VAR_1 int VAR_2 TYPE_2 VAR_3 ) { if ( VAR_2 > ( cfg.METHOD_2 ( ) ) ) { return false ; } if ( ( VAR_1.METHOD_3 ( ) .METHOD_4 ( ) ) >   ( VAR_4 ) ) { METHOD_5 ( VAR_1.METHOD_3 ( ) .METHOD_6 ( ) ) ; return true ; } return false ; } ) 
( t t ) ( VAR_1 TYPE_2 VAR_1 ) ( t TYPE_1 t ) 
( in in   new TYPE_1 ( ) ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1 ) ( STRING_1 STRING_1 ) 
( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) .METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1   METHOD_4 ( db cd ) .reviewers ( ) .METHOD_5 ( ) ; return VAR_1.contains ( METHOD_2 ( ) .getAccountId ( ) ) ; } return false ; } ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( METHOD_1_return public boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) .METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( METHOD_4 ( ) .METHOD_6 ( ) .METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) & & ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; } } ) 
( apply_return public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 TYPE_5 com.google.gwtorm.server.OrmException { if ( ( rsrc.METHOD_1 ( ) ) || ( METHOD_2 ( rsrc.getChange ( ) ) ) ) { return TYPE_1.METHOD_3 ( STRING_1 ) ; } VAR_1.METHOD_4 ( VAR_2.get ( ) .getAccountId ( ) rsrc.getProject ( ) rsrc.getChange ( ) ) ; return TYPE_1.METHOD_3 ( STRING_1 ) ; } ) ( input TYPE_3 input ) ( VAR_1 VAR_1 ) ( rsrc TYPE_2 rsrc ) ( TYPE_1 TYPE_1 ) 
( cd cd ) ( VAR_1 java.lang.String ... VAR_1 ) ( change_return private static com.google.gerrit.server.query.change.ChangeData change ( java.lang.String ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_1.METHOD_1 ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData cd   com.google.gerrit.server.query.change.ChangeData.METHOD_2 ( new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) ) ; cd.METHOD_3 ( TYPE_1.METHOD_4 ( VAR_1 ) ) ; return cd ; } ) ( cd cd   com.google.gerrit.server.query.change.ChangeData.METHOD_2 ( new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) ) ) ( change_return_line1_col423 return cd ; ) ( cd cd ) ( ChangeData com.google.gerrit.server.query.change.ChangeData ) ( TYPE_1 TYPE_1 ) 
( email user.email ) ( VAR_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) ( r r   METHOD_2 ( ) ) ( in in   new TYPE_2 ( ) ) 
( Assert org.junit.Assert ) ( Assert org.junit.Assert ) ( repo repo ) ( VAR_1 VAR_1   STRING_1 + STRING_2 ) ( VAR_2 VAR_2   METHOD_2 ( STRING_5 ) ) 
( change com.google.gerrit.reviewdb.client.Change change ) ( db db ) ( VAR_1 final TYPE_1 VAR_1 ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return private com.google.gerrit.reviewdb.client.Change METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.reviewdb.client.Change change final TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { return db.changes ( ) .METHOD_2 ( change.getId ( ) new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) .METHOD_3 ( ) ) { change.METHOD_4 ( VAR_2 ) ; change.METHOD_5 ( VAR_1 ) ; return change ; } return null ; } } ) ; } ) 
( VAR_1 VAR_1   METHOD_2 ( ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return TYPE_1 METHOD_1 ( ) throws TYPE_2 TYPE_3 { final TYPE_4 VAR_1   METHOD_2 ( ) ; VAR_1.put ( VAR_2 VAR_3 ) ; VAR_1.put ( VAR_4 VAR_5 ) ; if ( STRING_1.equals ( VAR_3 ) ) { return METHOD_3 ( VAR_1 ) ; } else { if ( ( VAR_6 ) !   null ) { VAR_1.put ( VAR_7 VAR_6 ) ; VAR_1.put ( VAR_8 VAR_9 ) ; } return new TYPE_5 ( VAR_1 ) ; } } ) ( VAR_1 VAR_1 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws TYPE_2 com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   db.get ( ) .changes ( ) .get ( changeId ) ; if ( c    null ) { throw TYPE_3.error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1.create ( db.get ( ) c ) ; } ) ( c c   db.get ( ) .changes ( ) .get ( changeId ) ) ( VAR_1 VAR_1 ) ( changeId com.google.gerrit.reviewdb.client.Change.Id changeId ) ( db db ) 
( VAR_1 final TYPE_1 VAR_1 ) ( TYPE_4 TYPE_4 ) ( in in   TYPE_4.METHOD_2 ( VAR_2 ) ) ( VAR_2 final TYPE_2 < ? > VAR_2 ) ( final java.lang.String ) 
( e TYPE_1 e ) ( TYPE_2 TYPE_2 ) 
( String java.lang.String ) ( b b   ( ( base ) !   null ) ? java.lang.String.METHOD_2 ( base.get ( ) ) : null ) ( TYPE_1 TYPE_1 ) ( VAR_2 VAR_2   java.lang.String.METHOD_2 ( revision.get ( ) ) ) ( VAR_1 boolean VAR_1 ) 
( res res   METHOD_3 ( STRING_1 ) ) ( Assert org.junit.Assert ) 
( METHOD_1_return public java.lang.String METHOD_1 ( ) { if ( ( getValue ( ) ) < 0 ) { return TYPE_1.toString ( getValue ( ) ) ; } else if ( ( getValue ( ) )    0 ) { return STRING_1 ; } else { return STRING_2 + ( TYPE_1.toString ( getValue ( ) ) ) ; } } ) 
( n n   c.getName ( ) ) ( c c ) ( TYPE_2 TYPE_2 ) ( n n ) ( c TYPE_1 < ? > c ) ( METHOD_1_return public static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n   c.getName ( ) ; n   n.METHOD_2 ( ( ( n.METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n.METHOD_4 ( STRING_1 ) ) n   n.METHOD_2 ( 1 ) ; return TYPE_2.METHOD_5 ( n ) ; } ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1 ) ( p p   VAR_1.METHOD_2 ( ) ) 
( VAR_1 final TYPE_2 VAR_1 ) ( VAR_4 final java.util.List < TYPE_4 > VAR_4 ) ( VAR_3 final TYPE_3 VAR_3 ) ( METHOD_1_return TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 final boolean VAR_2 final TYPE_3 VAR_3 final java.util.List < TYPE_4 > VAR_4 ) throws java.io.IOException { VAR_5   db.METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 VAR_2 VAR_3 VAR_4 ) ; } finally { VAR_5.METHOD_4 ( ) ; } } ) ( db db ) ( VAR_2 final boolean VAR_2 ) 
( i final TYPE_1 < TYPE_2 > i ) ( VAR_1 final int VAR_1 ) ( VAR_2 boolean VAR_2 ) ( METHOD_1_return_line1_col353 return row ; ) ( METHOD_1_return private int METHOD_1 ( final TYPE_1 < TYPE_2 > i int row final int VAR_1 boolean VAR_2 ) { while ( i.METHOD_2 ( ) ) { final TYPE_2 c   i.METHOD_3 ( ) ; if ( ( c.METHOD_4 ( ) )    ( VAR_3 ) ) { METHOD_5 ( row ) ; } else { METHOD_6 ( row ) ; } METHOD_7 ( row VAR_1 c ( ! ( i.METHOD_2 ( ) ) ) VAR_2 ) ; row++ ; } return row ; } ) ( row row ) ( row int row ) 
( input java.lang.String input ) ( result result   new TYPE_3 ( ) .METHOD_3 ( ) .METHOD_4 ( STRING_3 VAR_1 ) .append ( TYPE_4.METHOD_5 ( input ) ) .METHOD_6 ( ) .METHOD_7 ( ) ) ( METHOD_1_return_line1_col432 return result ; ) ( VAR_2 VAR_2 ) ( VAR_1 VAR_1   VAR_2.METHOD_1 ( input VAR_3 ) ) ( METHOD_1_return public java.lang.String METHOD_1 ( java.lang.String input ) { java.lang.String VAR_1   VAR_2.METHOD_1 ( input VAR_3 ) ; if ( ! ( TYPE_1.METHOD_2 ( VAR_1 ) ) ) { throw new TYPE_2 ( ( ( ( STRING_1 + ( toString ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; } java.lang.String result   new TYPE_3 ( ) .METHOD_3 ( ) .METHOD_4 ( STRING_3 VAR_1 ) .append ( TYPE_4.METHOD_5 ( input ) ) .METHOD_6 ( ) .METHOD_7 ( ) ; return result ; } ) ( result result ) 
( VAR_2 TYPE_3 VAR_2 ) ( TYPE_1 TYPE_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 VAR_2 ) throws com.google.gwtorm.server.OrmException { int VAR_3   VAR_1.METHOD_2 ( ) ; return TYPE_1.METHOD_3 ( ) .METHOD_4 ( new TYPE_4.NameKey ( VAR_2.getName ( ) ) ) .METHOD_5 ( new TYPE_4.Id ( VAR_3 ) ) .METHOD_6 ( VAR_2.METHOD_7 ( ) ) .METHOD_8 ( TYPE_5.METHOD_9 ( ) ) .METHOD_10 ( ) ; } ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( ) ) ( VAR_1 TYPE_2 VAR_1 ) 
( METHOD_1_return public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1.size ( ) ) !   1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 < TYPE_2 > ( getName ( ) VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ; } ) ( VAR_1 final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) 
( apply_return public java.lang.String apply ( TYPE_1 rsrc ) throws TYPE_2 { TYPE_3 VAR_1   VAR_2.get ( ) ; if ( VAR_1    null ) { throw new TYPE_2 ( ) ; } java.lang.String url   VAR_1.METHOD_1 ( rsrc.METHOD_2 ( ) ) ; if ( TYPE_4.METHOD_3 ( url ) ) { throw new TYPE_2 ( ) ; } else { return url ; } } ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( rsrc TYPE_1 rsrc ) ( VAR_1 VAR_1   VAR_2.get ( ) ) ( url url   VAR_1.METHOD_1 ( rsrc.METHOD_2 ( ) ) ) 
( VAR_2 int VAR_2 ) ( VAR_3 TYPE_1 < TYPE_2 > VAR_3 ) ( VAR_1 java.lang.String VAR_1 ) 
( TYPE_5 TYPE_5 ) ( apply_return public TYPE_1 < java.util.List < TYPE_2 > > apply ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { java.util.List < TYPE_1 < TYPE_2 > > result   TYPE_3.METHOD_1 ( changes.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change c : changes ) { result.add ( VAR_1.submit ( new TYPE_4 ( event c.METHOD_2 ( ) c.getId ( ) ) ) ) ; } return TYPE_5.METHOD_3 ( result ) ; } ) ( TYPE_3 TYPE_3 ) ( result result   TYPE_3.METHOD_1 ( changes.size ( ) ) ) ( changes java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) 
( VAR_1 TYPE_2 VAR_1 ) ( TYPE_5 TYPE_5 ) ( file TYPE_1 file ) ( VAR_1 VAR_1 ) ( input input   new TYPE_4 ( file ) ) ( java.lang.String ) ( VAR_1 VAR_1 ) ( input input ) 
( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.get ( change.METHOD_4 ( ) .getParentKey ( ) ) ) ( me me   TYPE_2.getAccountId ( ) ) ( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( ) .METHOD_3 ( me ) ) ( TYPE_2 TYPE_2 ) 
( repo repo   METHOD_2 ( STRING_1 ) ) ( change change   METHOD_4 ( repo commit null null null ) .insert ( ) ) ( commit commit   repo.METHOD_3 ( repo.commit ( ) .message ( STRING_2 ) .add ( STRING_3 STRING_4 ) .add ( STRING_5 STRING_6 ) .create ( ) ) ) ( repo repo ) 
( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) 
( TYPE_1 TYPE_1 ) ( Assert org.junit.Assert ) ( STRING_1 STRING_1 ) ( r r   VAR_3.put ( ( ( STRING_2 + ( project.get ( ) ) ) + STRING_3 ) METHOD_3 ( VAR_1 ) ) ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1   STRING_1 ) ( r r ) 
( VAR_2 VAR_2 ) ( r r   new java.util.ArrayList < TYPE_3 > ( result.length ( ) ) ) ( result TYPE_1 < TYPE_2 > result ) 
( VAR_1 TYPE_2 VAR_1 ) ( VAR_3 VAR_3 ) ( git TYPE_1 git ) ( changeId java.lang.String changeId ) ( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 git TYPE_2 VAR_1 java.lang.String changeId ) throws java.lang.Exception { TYPE_3 VAR_2   VAR_3.create ( db VAR_1 VAR_4 VAR_5 new java.lang.String ( VAR_6 ) changeId ) ; return VAR_2.to ( git STRING_1 ) .getChangeId ( ) ; } ) ( VAR_2 VAR_2   VAR_3.create ( db VAR_1 VAR_4 VAR_5 new java.lang.String ( VAR_6 ) changeId ) ) ( VAR_2 VAR_2 ) 
( git git   VAR_1.METHOD_1 ( VAR_2 ) ) ( apply_return public TYPE_1 apply ( TYPE_2 rsrc ) throws java.io.IOException TYPE_3 { org.eclipse.jgit.lib.Repository git   VAR_1.METHOD_1 ( VAR_2 ) ; try { TYPE_4 p   TYPE_4.METHOD_2 ( ) ; p.METHOD_3 ( git ) ; return new TYPE_1 ( null p git ) ; } finally { git.close ( ) ; } } ) ( rsrc TYPE_2 rsrc ) ( VAR_1 VAR_1 ) 
( id int id ) ( TYPE_3 TYPE_3 ) ( input input   TYPE_3.create ( ) ) ( msg java.lang.String msg ) ( VAR_1 TYPE_1 < TYPE_2.ChangeInfo > VAR_1 ) ( input input ) ( TYPE_4 TYPE_4 ) 
( values java.util.List < java.util.List < java.lang.String > > values ) ( row row   2 ) 
( d d   new TYPE_1 ( ) ) ( d d ) ( change change   db.changes ( ) .get ( id ) ) ( run_return public TYPE_1 run ( final TYPE_2.ReviewDb db ) throws TYPE_3 TYPE_4.OrmException { final TYPE_2.Change change   db.changes ( ) .get ( id ) ; if ( change    null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1   new TYPE_6 ( db ) ; final TYPE_1 d   new TYPE_1 ( ) ; d.METHOD_1 ( db new TYPE_7 ( db ) VAR_1 change ) ; return d ; } ) ( d d ) ( run_return_line1_col370 return d ; ) ( VAR_1 VAR_1   new TYPE_6 ( db ) ) ( db final TYPE_2.ReviewDb db ) ( db db ) 
( VAR_2 VAR_2   null ) ( VAR_1 VAR_1   null ) ( METHOD_1_return public boolean METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1   null ; TYPE_3 VAR_2   null ; try { VAR_1   VAR_3.METHOD_2 ( ) ; VAR_2   VAR_1.METHOD_3 ( ) .METHOD_4 ( null null TYPE_4.METHOD_5 ( ) null ) ; return VAR_2.METHOD_6 ( ) ; } finally { METHOD_7 ( VAR_2 ) ; METHOD_8 ( VAR_1 ) ; } } ) 
( VAR_5 VAR_5 ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) 
( get_return public java.util.List < TYPE_1 > get ( ) throws TYPE_2 com.google.gwtorm.server.OrmException { if ( ! ( TYPE_3.METHOD_1 ( VAR_1 ) ) ) { return METHOD_2 ( ) ; } if ( VAR_2 ) { return METHOD_3 ( ( ( user ) !   null ? VAR_3.create ( user ) : VAR_4.get ( ) ) ) ; } if ( ( user ) !   null ) { return VAR_5.get ( ) .apply ( new TYPE_4 ( VAR_3.create ( user ) ) ) ; } return METHOD_4 ( ) ; } ) 
( METHOD_1_return public TYPE_1 < com.google.gerrit.reviewdb.client.AccountGroup > METHOD_1 ( ) { try { com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { return java.util.Collections.METHOD_3 ( db.METHOD_4 ( ) .METHOD_1 ( ) .METHOD_5 ( ) ) ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { VAR_1.METHOD_6 ( STRING_1 e ) ; return java.util.Collections.METHOD_7 ( ) ; } } ) 
( get_return TYPE_1 get ( org.eclipse.jgit.lib.Repository VAR_1 com.google.gerrit.server.query.change.ChangeData VAR_2 int VAR_3 ) throws com.google.gwtorm.server.OrmException { java.lang.String branch   VAR_2.change ( ) .METHOD_1 ( ) .get ( ) ; java.lang.String VAR_4   TYPE_2.METHOD_2 ( VAR_2.getId ( ) .get ( ) VAR_3 branch ) ; return get ( VAR_4 VAR_1 branch VAR_2.METHOD_3 ( ) ) ; } ) ( VAR_3 int VAR_3 ) ( VAR_2 VAR_2 ) ( branch branch   VAR_2.change ( ) .METHOD_1 ( ) .get ( ) ) ( VAR_2 com.google.gerrit.server.query.change.ChangeData VAR_2 ) ( TYPE_2 TYPE_2 ) ( VAR_1 org.eclipse.jgit.lib.Repository VAR_1 ) ( VAR_4 VAR_4   TYPE_2.METHOD_2 ( VAR_2.getId ( ) .get ( ) VAR_3 branch ) ) 
( u u   user ( ) ) 
( VAR_1 final TYPE_1 VAR_1 ) ( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super.equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) .equals ( new TYPE_3 < TYPE_4 > ( ( ( TYPE_2 ) ( VAR_1 ) ) .METHOD_1 ( ) ) ) ; } ) 
( change final TYPE_2.Change change ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final TYPE_2.Change change ) throws TYPE_3 { try { final TYPE_4.NameKey VAR_1   change.getProject ( ) ; return VAR_2.METHOD_2 ( VAR_1 ) .METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) e ) ; } } ) 
( TYPE_1 TYPE_1 ) ( METHOD_1_return private static final boolean METHOD_1 ( ) { final java.lang.String VAR_1   TYPE_1.METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3.METHOD_3 ( STRING_1 ) ; } } ) ; return ( VAR_1 !   null ) & & ( ( VAR_1.METHOD_4 ( ) .METHOD_5 ( STRING_2 ) ) !   ( -1 ) ) ; } ) ( VAR_1 VAR_1   TYPE_1.METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3.METHOD_3 ( STRING_1 ) ; } } ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1.id ( VAR_2.get ( ) .apply ( change in ) .VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 e ) ; } } ) ( in TYPE_2 in ) 
( METHOD_1_return private TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2.NameKey branch java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_3.METHOD_2 ( TYPE_4.ref ( branch ) TYPE_4.project ( branch.getParentKey ( ) ) TYPE_3.not ( TYPE_4.status ( VAR_2 ) ) TYPE_3.METHOD_3 ( TYPE_4.METHOD_4 ( TYPE_4.schema ( VAR_3 ) VAR_1 ) ) ) ) ; } ) ( branch TYPE_2.NameKey branch ) ( VAR_1 java.util.List < java.lang.String > VAR_1 ) 
( VAR_1 java.util.Set < TYPE_1 > VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { boolean VAR_2   ( ( VAR_3.equals ( VAR_1 ) ) & & ( ( token ) !   null ) ) & & ( ( VAR_4 ) !   null ) ; if ( VAR_2 ) { try { VAR_5   VAR_4.METHOD_2 ( ) ; } catch ( TYPE_2 e ) { VAR_6.error ( STRING_1 e ) ; METHOD_3 ( ) ; VAR_2   false ; } } return VAR_2 ; } ) ( METHOD_1_return_line1_col325 return VAR_2 ; ) ( VAR_2 VAR_2   ( ( VAR_3.equals ( VAR_1 ) ) & & ( ( token ) !   null ) ) & & ( ( VAR_4 ) !   null ) ) ( VAR_2 VAR_2 ) 
( p p   TYPE_2.METHOD_2 ( STRING_1 ) ) ( TYPE_2 TYPE_2 ) 
( STRING_1 STRING_1 ) ( VAR_1 VAR_1 ) ( TYPE_2 TYPE_2 ) ( VAR_3 VAR_3 ) ( VAR_3 VAR_3 ) ( VAR_1 VAR_1   STRING_1 ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4 ) ( in in   new TYPE_1 ( ) ) 
( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.changes ( ) .query ( ) .METHOD_3 ( 1 ) .get ( ) ) ( VAR_1 VAR_1   METHOD_2 ( ) ) ( Assert org.junit.Assert ) 
( TYPE_2 TYPE_2 ) ( VAR_1 VAR_1   TYPE_2.METHOD_2 ( STRING_1 ) ) ( n n   VAR_1.METHOD_3 ( ) ) ( VAR_1 VAR_1 ) 
( cd com.google.gerrit.server.query.change.ChangeData cd ) ( cd cd ) ( ps ps   cd.METHOD_3 ( ) ) ( cd cd ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( cd.METHOD_2 ( ) ) !   null ) { return cd.METHOD_2 ( ) ; } com.google.gerrit.reviewdb.client.PatchSet ps   cd.METHOD_3 ( ) ; if ( ps    null ) { return TYPE_2.of ( ) ; } cd.METHOD_4 ( new TYPE_3 ( cd ) .METHOD_5 ( ps ) .METHOD_6 ( true ) .METHOD_7 ( true ) .METHOD_8 ( ) ) ; return cd.METHOD_2 ( ) ; } ) ( cd cd ) 
( ctx ctx ) ( ctx ctx ) ( c c ) ( msg TYPE_2 msg ) ( c c ) ( c c   ctx.getChange ( ) ) ( db db   ctx.METHOD_2 ( ) ) ( ctx TYPE_1 ctx ) ( ctx ctx ) 
( get_return public TYPE_1 get ( long VAR_1 TYPE_2 VAR_2 ) throws TYPE_3 TYPE_4 TYPE_5 { if ( ! ( METHOD_1 ( ) ) ) { VAR_3.METHOD_2 ( VAR_4 ( ( int ) ( TYPE_6.METHOD_3 ( VAR_1 VAR_2 ) ) ) ) ; set ( null ) ; } return super.get ( VAR_1 VAR_2 ) ; } ) ( VAR_1 long VAR_1 ) ( VAR_2 TYPE_2 VAR_2 ) 
( res res   new TYPE_2 ( ) ) ( METHOD_1_return private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException TYPE_1 { TYPE_2 res   new TYPE_2 ( ) ; METHOD_2 ( VAR_1 VAR_2 < TYPE_3 > METHOD_3 ( ) res ) ; assertEquals ( INT_1 res.getStatus ( ) ) ; return res.METHOD_4 ( VAR_3 ) ; } ) ( VAR_1 java.lang.String VAR_1 ) ( res res ) 
( VAR_2 VAR_2   METHOD_2 ( git true ) ) ( changes changes   METHOD_3 ( change ) ) ( VAR_1 VAR_1   METHOD_2 ( git true ) ) ( change change   METHOD_2 ( git true ) ) 
( result TYPE_1 result ) ( VAR_3 VAR_3 ) 
( METHOD_1_return public TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change TYPE_2 VAR_1 final TYPE_3 VAR_2 final TYPE_3 VAR_3 final org.eclipse.jgit.lib.Repository VAR_4 final org.eclipse.jgit.lib.Repository VAR_5 ) { return VAR_1.submit ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_2 ( ) throws java.lang.Exception { METHOD_3 ( change VAR_2 VAR_3 VAR_4 VAR_5 ) ; return null ; } } ) ; } ) ( VAR_5 final org.eclipse.jgit.lib.Repository VAR_5 ) ( change final com.google.gerrit.reviewdb.client.Change change ) ( VAR_2 final TYPE_3 VAR_2 ) ( VAR_3 final TYPE_3 VAR_3 ) ( VAR_4 final org.eclipse.jgit.lib.Repository VAR_4 ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_2 VAR_1 ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( to java.lang.String to ) ( s s   ( ( TYPE_1 ) ( db ) ) ) ( table java.lang.String table ) ( VAR_1 java.lang.String VAR_1 ) ( e e   new TYPE_2 ( s ) ) 
( VAR_1 VAR_1 ) ( input input   new TYPE_1 ( ) ) 
( METHOD_1_return public int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { boolean VAR_3   false ; if ( VAR_1 <   ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return super.METHOD_1 ( VAR_1 ) ; } ) ( VAR_1 final int VAR_1 ) 
( req req   new TYPE_4 ( VAR_2 url.toString ( ) ) ) ( req req ) ( req req ) ( VAR_1 final TYPE_3 < TYPE_1 > VAR_1 ) 
( VAR_1 TYPE_1 VAR_1 ) ( METHOD_1_return public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1.email ( ) ) !   null ) { return VAR_1.email ( ) ; } else if ( ( VAR_1.name ( ) ) !   null ) { return VAR_1.name ( ) ; } else { return STRING_1 ; } } ) 
( VAR_1 VAR_1   METHOD_3 ( repo null null null null ) .insert ( ) ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( VAR_2 VAR_2   METHOD_3 ( repo null null null null ) .insert ( ) ) 
( VAR_1 TYPE_2 VAR_1 ) ( get_return public TYPE_1 get ( TYPE_2 VAR_1 ) { final TYPE_3 ref   TYPE_4.METHOD_1 ( VAR_1 ) ; if ( ref !   null ) { return new TYPE_5 ( ) { public java.lang.String getName ( ) { return ref.getName ( ) ; } public TYPE_6 METHOD_2 ( ) { return ref.METHOD_3 ( ) ; } public java.lang.String METHOD_4 ( ) { return null ; } public java.lang.String METHOD_5 ( ) { return null ; } } ; } return null ; } ) ( ref ref   TYPE_4.METHOD_1 ( VAR_1 ) ) ( TYPE_4 TYPE_4 ) 
( VAR_3 short VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) ( VAR_2 TYPE_1 VAR_2 ) ( VAR_1 java.lang.StringBuilder VAR_1 ) ( line int line ) 
( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) ( TYPE_4 TYPE_4 ) ( config TYPE_1 config ) ( TYPE_4 TYPE_4 ) ( VAR_1 TYPE_2 VAR_1 ) 
( out final TYPE_1 out ) ( VAR_1 final byte [ ] VAR_1 ) ( out out ) ( VAR_2 VAR_2   out.METHOD_2 ( ) ) 
( db db ) ( VAR_1 VAR_1 ) ( c c   db.changes ( ) .get ( psId.getParentKey ( ) ) ) ( VAR_2 VAR_2 ) ( notes notes   VAR_1.create ( c ) ) ( METHOD_1_return public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   db.changes ( ) .get ( psId.getParentKey ( ) ) ; if ( c    null ) { return null ; } TYPE_1 notes   VAR_1.create ( c ) ; com.google.gerrit.reviewdb.client.PatchSet ps   VAR_2.get ( db notes psId ) ; return ps !   null ? ps.METHOD_2 ( ) : null ; } ) ( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( ps ps   VAR_2.get ( db notes psId ) ) 
( METHOD_1_return public boolean METHOD_1 ( ) { while ( ( ( VAR_1 )    null ) & & ( VAR_2.METHOD_1 ( ) ) ) { TYPE_1 < TYPE_2 > p   VAR_2.METHOD_2 ( ) .get ( ) ; if ( p !   null ) { try { VAR_1   p.get ( ) ; } catch ( TYPE_3 e ) { VAR_3.error ( ( ( STRING_1 + p ) + STRING_2 ) e ) ; } } } return ( VAR_1 ) !   null ; } ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( getChange ( ) .getStatus ( ) )    ( VAR_1 ) ) & & ( ! ( METHOD_2 ( db null ) ) ) ) { return false ; } return METHOD_3 ( ) ; } ) 
( event TYPE_1 event ) ( event event ) ( VAR_1 VAR_1   event.METHOD_2 ( ) ) ( VAR_2 VAR_2 ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2   VAR_3.create ( TYPE_3.of ( db ) VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3.of ( db ) ; } } ; } ) ( VAR_2 VAR_2   VAR_3.create ( TYPE_3.of ( db ) VAR_1 ) ) ( VAR_3 VAR_3 ) ( VAR_1 com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 VAR_3 ) ) 
( VAR_1 TYPE_1 VAR_1 ) ( rsp rsp   new TYPE_7 ( ( ( TYPE_8.HttpServletResponse ) ( VAR_2 ) ) ) ) ( req req   ( ( TYPE_5 ) ( VAR_1 ) ) ) ( VAR_3 TYPE_3 VAR_3 ) ( VAR_2 TYPE_2 VAR_2 ) 
( Collections java.util.Collections ) ( METHOD_1_return private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1   new TYPE_1 ( ) ; VAR_1.METHOD_2 ( new TYPE_2 ( ) .METHOD_3 ( TYPE_3.METHOD_4 ( ) ) ) ; VAR_1.METHOD_5 ( TYPE_4.METHOD_6 ( base revision path ) ) ; VAR_1.METHOD_7 ( TYPE_5.METHOD_4 ( ) ) ; return java.util.Collections.METHOD_8 ( VAR_1 ) ; } ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1   new TYPE_1 ( ) ) ( VAR_1 VAR_1 ) ( VAR_1 VAR_1 ) 
( input TYPE_3 input ) ( rsrc TYPE_2 rsrc ) ( apply_return public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc TYPE_3 input ) throws TYPE_4 { try { if ( rsrc.METHOD_1 ( ) ) { throw new TYPE_5 ( STRING_1 ) ; } if ( ! ( METHOD_2 ( rsrc ) ) ) { VAR_1.METHOD_3 ( rsrc ) ; } return TYPE_1.METHOD_4 ( STRING_2 ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e.getMessage ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_3 e ) ; } } ) 
( db db ) ( group group   db.METHOD_1 ( ) .get ( VAR_1 ) ) ( db db ) ( group group ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4 ) ( run_return public TYPE_1 run ( final TYPE_2.ReviewDb db ) throws TYPE_3 TYPE_4.OrmException { final TYPE_2.AccountGroup group   db.METHOD_1 ( ) .get ( VAR_1 ) ; METHOD_2 ( db group ) ; group.METHOD_3 ( VAR_2 ) ; db.METHOD_1 ( ) .update ( java.util.Collections.singleton ( group ) ) ; VAR_3.METHOD_4 ( VAR_1 ) ; return VAR_4 ; } ) ( run_return_line1_col340 return VAR_4 ; ) ( db final TYPE_2.ReviewDb db ) 
( req TYPE_1 req ) 
( TYPE_1 TYPE_1 ) ( Truth com.google.common.truth.Truth ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   TYPE_1.METHOD_2 ( new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) STRING_1 ) ) ( Truth com.google.common.truth.Truth ) 
( VAR_2 VAR_2   METHOD_2 ( index false VAR_3 ) ) ( VAR_4 VAR_4   METHOD_3 ( VAR_2 VAR_1 null TYPE_3.METHOD_4 ( TYPE_4.METHOD_5 ( ) ) ) ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( int index TYPE_2 VAR_1 ) { int VAR_2   METHOD_2 ( index false VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } TYPE_1 VAR_4   METHOD_3 ( VAR_2 VAR_1 null TYPE_3.METHOD_4 ( TYPE_4.METHOD_5 ( ) ) ) ; return VAR_4 ; } ) ( METHOD_1_return_line1_col255 return VAR_4 ; ) ( index int index ) ( VAR_4 VAR_4 ) 
( VAR_1 org.eclipse.jgit.lib.ObjectId VAR_1 ) ( VAR_2 org.eclipse.jgit.lib.ObjectId VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 project org.eclipse.jgit.lib.Repository repo org.eclipse.jgit.lib.ObjectId VAR_1 org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return new TYPE_3 ( ) .METHOD_2 ( new TYPE_4.Key ( project repo VAR_1 VAR_2 VAR_3 ) ) ; } catch ( java.io.IOException e ) { VAR_4.METHOD_3 ( ( ( ( STRING_1 + ( VAR_2.name ( ) ) ) + STRING_2 ) + ( project.getProject ( ) .getName ( ) ) ) e ) ; return VAR_5 ; } } ) ( repo org.eclipse.jgit.lib.Repository repo ) ( project TYPE_2 project ) 
( change change ) ( ctx ctx ) ( VAR_2 VAR_2 ) ( ctx TYPE_1 ctx ) 
( VAR_1 int VAR_1 ) ( VAR_2 int VAR_2 ) 
( VAR_9 VAR_9 ) ( VAR_8 VAR_8 ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   new TYPE_4 ( ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 rsrc java.lang.String VAR_1 ) throws TYPE_3 com.google.gwtorm.server.OrmException java.io.IOException { TYPE_4 VAR_2   new TYPE_4 ( ) ; VAR_3   VAR_1 ; VAR_4   VAR_5 ; VAR_6   true ; VAR_7   VAR_8 ; return VAR_9.METHOD_2 ( rsrc VAR_2 ) ; } ) ( VAR_5 VAR_5 ) ( rsrc TYPE_2 rsrc ) ( VAR_1 java.lang.String VAR_1 ) 
( type TYPE_2 type ) ( METHOD_1_return static TYPE_1 METHOD_1 ( TYPE_2 type ) { return new TYPE_3 ( VAR_1 TYPE_4.METHOD_2 ( type.getName ( ) ) TYPE_4.METHOD_2 ( type.getId ( ) ) TYPE_4.METHOD_2 ( type.METHOD_3 ( ) ) new TYPE_5 ( type.METHOD_4 ( ) .getValue ( ) ) new TYPE_5 ( type.METHOD_5 ( ) .getValue ( ) ) ) ; } ) 
( VAR_1 VAR_1   table.METHOD_2 ( event ) ) ( table table ) ( event final TYPE_1 event ) 
( res TYPE_2.HttpServletResponse res ) (   METHOD_2 ( TYPE_3.METHOD_3 ( req ) TYPE_4.METHOD_4 ( req ) req res ) ) ( out out ) ( out out ) ( out out   METHOD_5 ( req res ) ) ( req TYPE_1 req ) 
( change TYPE_1.ChangeInfo change ) ( e e   new TYPE_4 ( change VAR_1 VAR_2 VAR_3 VAR_4 ) ) ( VAR_2 TYPE_3 < java.lang.String > VAR_2 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_3 TYPE_3 < java.lang.String > VAR_3 ) ( VAR_4 TYPE_3 < java.lang.String > VAR_4 ) 
( changeId java.lang.String changeId ) ( VAR_1 int VAR_1 ) ( r r ) ( Assert org.junit.Assert ) ( s TYPE_1 s ) ( s s ) ( r r   s.METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) new TYPE_3 ( ) .label ( STRING_3 2 ) ) ) 
( create_return static TYPE_1 create ( TYPE_2 VAR_1 TYPE_3 VAR_2 TYPE_4 VAR_3 ) { TYPE_5 group   ( ( VAR_3 !   null ) & & ( ( VAR_3.METHOD_1 ( ) ) !   null ) ) ? VAR_3.METHOD_1 ( ) .METHOD_2 ( ) : null ; return new TYPE_6 ( VAR_1.getName ( ) VAR_2.getName ( ) group ) ; } ) ( VAR_2 TYPE_3 VAR_2 ) ( VAR_3 TYPE_4 VAR_3 ) ( group group   ( ( VAR_3 !   null ) & & ( ( VAR_3.METHOD_1 ( ) ) !   null ) ) ? VAR_3.METHOD_1 ( ) .METHOD_2 ( ) : null ) ( VAR_1 TYPE_2 VAR_1 ) 
( cm TYPE_1 cm ) 
( VAR_1 VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 )    null ) { VAR_1   VAR_3.get ( ) .METHOD_2 ( ) ; } else { VAR_1   VAR_2 ; } return new TYPE_1 ( VAR_3.get ( ) VAR_1 VAR_4.create ( VAR_5 new TYPE_3 < TYPE_2 > ( ) { public TYPE_2 get ( ) { return VAR_1 ; } } VAR_6 ) ) ; } ) 
( VAR_1 java.lang.String VAR_1 ) ( METHOD_1_return_line1_col330 return VAR_2 ; ) ( METHOD_1_return private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < java.lang.String > VAR_2   new TYPE_1 < java.lang.String > ( ) ; for ( TYPE_2 VAR_3 : METHOD_2 ( ) ) { TYPE_3 VAR_4   VAR_3.METHOD_3 ( VAR_1 ) ; if ( VAR_4 !   null ) { VAR_2.add ( VAR_3.METHOD_4 ( ) ) ; } } return VAR_2 ; } ) ( VAR_2 VAR_2   new TYPE_1 < java.lang.String > ( ) ) ( VAR_2 VAR_2 ) 
( config config   STRING_1 + ( STRING_2 + STRING_3 ) ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   new TYPE_1 ( new TYPE_2 ( projectName config ) new TYPE_3 ( STRING_4 ) new TYPE_4 ( new com.google.gerrit.reviewdb.client.AccountGroup ( new TYPE_5.NameKey ( STRING_5 ) new TYPE_5.Id ( 1 ) new TYPE_6 ( STRING_4 ) ) ) ) ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 VAR_3 ) ) 
( out out ) ( VAR_1 VAR_1 ) ( in in   METHOD_2 ( STRING_1 ) ) 
( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2   new TYPE_4 < > ( ) ; for ( TYPE_5 VAR_3 : VAR_4 ) { try { VAR_2.METHOD_2 ( VAR_3.METHOD_1 ( VAR_1 ) ) ; } catch ( TYPE_3 e ) { VAR_2.METHOD_2 ( e.METHOD_3 ( ) ) ; throw new TYPE_3 ( e.getMessage ( ) VAR_2 ) ; } } return VAR_2 ; } ) ( METHOD_1_return_line1_col354 return VAR_2 ; ) ( VAR_2 VAR_2   new TYPE_4 < > ( ) ) 
( TYPE_1 TYPE_1 ) ( admin admin ) ( VAR_2 VAR_2 ) ( VAR_7 VAR_7 ) 
( commit org.eclipse.jgit.revwalk.RevCommit commit ) ( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db org.eclipse.jgit.revwalk.RevWalk rw org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.lib.Repository repo   METHOD_2 ( ) ) { return METHOD_3 ( repo db rw commit repo.METHOD_4 ( ) .values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg   java.lang.String.format ( STRING_1 commit.name ( ) getProject ( ) .METHOD_5 ( ) ) ; VAR_1.error ( msg e ) ; return false ; } } ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) 
( METHOD_1_return private java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) !   null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) .METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3.METHOD_4 ( ) .METHOD_5 ( ) ; } ) ( TYPE_3 TYPE_3 ) 
( db db ) ( ps ps ) ( db db ) ( db final TYPE_1.ReviewDb db ) ( ps final TYPE_1.PatchSet ps ) 
( cfg TYPE_2 cfg ) ( out TYPE_3 out ) ( TYPE_4 TYPE_4 ) ( revision java.lang.String revision ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 cfg java.lang.String revision TYPE_3 out ) { return TYPE_4.METHOD_2 ( ) .METHOD_3 ( VAR_1 ) .METHOD_4 ( VAR_2 ) .METHOD_5 ( VAR_3 ) .METHOD_6 ( VAR_4 ) .METHOD_7 ( METHOD_8 ( cfg revision ) ) .METHOD_9 ( true ) .METHOD_10 ( out ) .get ( ) ; } ) 
( revision TYPE_2 revision ) ( change TYPE_1.ChangeInfo change ) ( VAR_3 TYPE_5 VAR_3 ) ( VAR_2 TYPE_4 VAR_2 ) ( event event   new TYPE_6 ( change revision VAR_1 VAR_2 VAR_3 ) ) ( VAR_1 TYPE_3 VAR_1 ) 
( VAR_2 VAR_2 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1.METHOD_2 ( ) ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_2   VAR_4.METHOD_3 ( ) ; if ( ! ( VAR_2.METHOD_4 ( ) ) ) return VAR_1.METHOD_5 ( ) ; VAR_3   ( ( TYPE_5 ) ( VAR_2 ) ) .METHOD_6 ( ) ; VAR_5   this.VAR_6 ; return VAR_3 ; } ) ( VAR_3 VAR_3 ) ( METHOD_1_return_line1_col283 return VAR_3 ; ) ( VAR_1 VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_4 VAR_4 ) ( VAR_6 this.VAR_6 ) 
( VAR_1 VAR_1   VAR_2.METHOD_3 ( ) .METHOD_4 ( ) ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) 
( revision TYPE_2 revision ) ( change TYPE_1.ChangeInfo change ) ( VAR_3 TYPE_4 VAR_3 ) ( VAR_2 java.lang.String VAR_2 ) ( VAR_1 TYPE_3 VAR_1 ) ( event event   new TYPE_5 ( change revision VAR_1 VAR_2 VAR_3 ) ) 
( VAR_5 VAR_5   VAR_2.METHOD_3 ( VAR_6 STRING_1 ) ) ( TYPE_2 TYPE_2 ) ( VAR_8 VAR_8 ) ( VAR_7 VAR_7   VAR_8.METHOD_3 ( VAR_9 STRING_1 ) ) ( p p   VAR_3.METHOD_1 ( VAR_4 line ) ) ( VAR_2 VAR_2 ) ( METHOD_1_return private double METHOD_1 ( double VAR_1 ) { int line   VAR_2.METHOD_2 ( VAR_1 STRING_1 ) ; TYPE_1 p   VAR_3.METHOD_1 ( VAR_4 line ) ; double VAR_5   VAR_2.METHOD_3 ( VAR_6 STRING_1 ) ; double VAR_7   VAR_8.METHOD_3 ( VAR_9 STRING_1 ) ; return TYPE_2.METHOD_4 ( 0 ( VAR_7 + ( VAR_1 - VAR_5 ) ) ) ; } ) ( line line   VAR_2.METHOD_2 ( VAR_1 STRING_1 ) ) ( VAR_1 double VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_3 VAR_3 ) 
( row int row ) ( insert_return private int insert ( final java.util.List < TYPE_1 > in int row ) { for ( TYPE_2 < TYPE_1 > VAR_1   in.METHOD_1 ( ) ; VAR_1.METHOD_2 ( ) ; ) { final TYPE_1 c   VAR_1.METHOD_3 ( ) ; table.METHOD_4 ( row ) ; table.METHOD_5 ( ) .METHOD_6 ( row 0 VAR_2 ) ; METHOD_7 ( row VAR_3 c ( ! ( VAR_1.METHOD_2 ( ) ) ) ) ; row++ ; } return row ; } ) ( row row ) ( insert_return_line1_col365 return row ; ) ( in final java.util.List < TYPE_1 > in ) 
( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change TYPE_1 user com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1   VAR_2.get ( change.getProject ( ) ) ; if ( VAR_1    null ) { return false ; } TYPE_3 VAR_3   VAR_1.METHOD_2 ( user ) ; return VAR_3.METHOD_2 ( change ) .METHOD_3 ( db ) ; } ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( VAR_3 VAR_3   VAR_1.METHOD_2 ( user ) ) ( user TYPE_1 user ) ( VAR_1 VAR_1   VAR_2.get ( change.getProject ( ) ) ) ( change com.google.gerrit.reviewdb.client.Change change ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_3 VAR_3 ) 
( VAR_1 TYPE_1 VAR_1 ) 
( VAR_1 final TYPE_1 VAR_1 ) ( value int value ) 
( TYPE_4 TYPE_4 ) ( c TYPE_3 c ) ( res TYPE_2.HttpServletResponse res ) ( req TYPE_1 req ) ( msg java.lang.String msg ) ( VAR_1 int VAR_1 ) ( res res ) ( TYPE_4 TYPE_4 ) 
( STRING_2 STRING_2 ) (   STRING_2 ) ( user user   user ( null ) ) ( r r   create ( ) .METHOD_4 ( user ) ) ( TYPE_1 TYPE_1 ) ( TYPE_1 TYPE_1 ) 
( config result.config ) ( result final TYPE_1 result ) 
( t TYPE_3 t ) ( METHOD_1_return private static long METHOD_1 ( org.eclipse.jgit.lib.Repository repo TYPE_1 VAR_1 TYPE_2 VAR_2 java.lang.String path TYPE_3 t ) throws java.io.IOException { if ( ! ( TYPE_4.METHOD_2 ( VAR_2 ) ) ) { return 0 ; } try ( TYPE_5 VAR_3   TYPE_5.METHOD_3 ( VAR_1 path t ) ) { return VAR_3 !   null ? repo.METHOD_4 ( VAR_3.METHOD_5 ( 0 ) VAR_4 ) .METHOD_6 ( ) : 0 ; } } ) ( VAR_1 TYPE_1 VAR_1 ) ( path java.lang.String path ) ( repo org.eclipse.jgit.lib.Repository repo ) ( VAR_2 TYPE_2 VAR_2 ) 
( VAR_2 VAR_2   VAR_3 ) ( VAR_1 VAR_1 ) ( VAR_1 int VAR_1 ) ( VAR_6 VAR_6 ) ( VAR_3 VAR_3 ) ( VAR_4 VAR_4   ( VAR_3 ) - ( VAR_5 ) ) ( VAR_7 VAR_7 ) 
( VAR_1 final TYPE_1 VAR_1 ) ( VAR_2 VAR_2   new TYPE_2 ( VAR_1 ) ) 
( notes notes ) ( change change ) ( METHOD_1_return_line1_col422 return change ; ) ( METHOD_1_return public com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( project )    null ) { notes   VAR_1.METHOD_2 ( db VAR_2 ) ; } else { notes   VAR_1.create ( db project VAR_2 ) ; } change   notes.getChange ( ) ; if ( ( change )    null ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + ( VAR_2 ) ) ) ; } METHOD_3 ( null ) ; return change ; } ) 
( result result ) ( METHOD_1_return_line1_col462 return result ; ) ( result result   new TYPE_2 < > ( ) ) ( METHOD_1_return static TYPE_1 < java.lang.String java.lang.String > METHOD_1 ( java.util.Map < java.lang.String java.util.Set < java.lang.String > > VAR_1 ) { TYPE_1 < java.lang.String java.lang.String > result   new TYPE_2 < > ( ) ; for ( java.lang.String key : TYPE_3.METHOD_2 ( ) .METHOD_3 ( VAR_1.METHOD_4 ( ) ) ) { result.put ( key java.lang.String.METHOD_5 ( STRING_1 TYPE_3.METHOD_2 ( ) .METHOD_3 ( VAR_1.get ( key ) ) ) ) ; } return result ; } ) ( VAR_1 java.util.Map < java.lang.String java.util.Set < java.lang.String > > VAR_1 ) 
( Truth com.google.common.truth.Truth ) ( r r   METHOD_2 ( ) ) 
( TYPE_1 TYPE_1 ) 
( VAR_1 VAR_1   METHOD_3 ( repo ) ) ( repo repo   METHOD_2 ( STRING_1 ) ) ( VAR_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_4 ( ) .getRevision ( ) .get ( ) ) 
( METHOD_1_return public boolean METHOD_1 ( ) { if ( getChange ( ) .getStatus ( ) .METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) .METHOD_3 ( ) ) ) || ( METHOD_5 ( ) .METHOD_3 ( ) ) ) || ( METHOD_6 ( ) .METHOD_7 ( ) .METHOD_8 ( ) ) ) || ( METHOD_4 ( ) .METHOD_1 ( ) ) ; } else { return METHOD_4 ( ) .METHOD_9 ( ) ; } } ) 
( VAR_1 VAR_1 ) ( to to ) ( e e ) ( revision revision ) ( e e   new TYPE_1 ( ) ) ( e e ) ( file_return_line1_col299 return e ; ) ( file_return private TYPE_1 file ( final java.lang.String ) throws java.io.IOException { TYPE_2 VAR_1   VAR_2.METHOD_1 ( ) ; final TYPE_1 e   new TYPE_1 ( ) ; e.METHOD_2 ( VAR_3 ) ; e.METHOD_3 ( VAR_1.insert ( VAR_4 TYPE_3.METHOD_4 ( ) ) ) ; VAR_1.METHOD_5 ( ) ; return e ; METHOD_6 ( INT_1 ) ; TYPE_4.a VAR_5 ; TYPE_5 to ; TYPE_6 revision ; } ) ( final java.lang.String ) ( VAR_2 VAR_2 ) ( e e ) ( VAR_5 VAR_5 ) ( VAR_1 VAR_1   VAR_2.METHOD_1 ( ) ) 
( VAR_4 VAR_4 ) ( VAR_1 TYPE_1.ProjectConfig VAR_1 ) ( VAR_3 VAR_3 ) ( VAR_2 VAR_2   VAR_3.create ( VAR_1.getProject ( ) .METHOD_2 ( ) user ) ) ( VAR_1 VAR_1 ) 
( event final TYPE_1 event ) 
( VAR_5 VAR_5 ) ( METHOD_1_return_line1_col264 return VAR_2 ; ) ( VAR_2 VAR_2 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2   VAR_1.METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 ) ; VAR_5.changes ( ) .id ( VAR_2.changeId ) .revision ( STRING_1 ) .METHOD_4 ( TYPE_3.METHOD_5 ( ) ) ; return VAR_2 ; } ) ( VAR_1 VAR_1 ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( VAR_3 ) ) 
( change TYPE_1.ChangeInfo change ) ( VAR_2 java.lang.String VAR_2 ) ( revision TYPE_2 revision ) ( VAR_1 TYPE_3 VAR_1 ) ( e e   new TYPE_4 ( change revision VAR_1 VAR_2 ) ) 
( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( cd.METHOD_2 ( user ) ) { return true ; } try { com.google.gerrit.reviewdb.client.Change c   cd.change ( db ) ; if ( c    null ) { return false ; } TYPE_1 VAR_1   VAR_2.METHOD_3 ( c user ) ; if ( VAR_1.METHOD_4 ( db.get ( ) ) ) { cd.METHOD_5 ( VAR_1 ) ; return true ; } } catch ( TYPE_2 e ) { } return false ; } ) ( cd final com.google.gerrit.server.query.change.ChangeData cd ) 
( r r   new java.util.ArrayList < TYPE_1 > ( VAR_2.length ) ) ( VAR_1 final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( METHOD_1_return public java.util.List < TYPE_1 > METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r   new java.util.ArrayList < TYPE_1 > ( VAR_2.length ) ; for ( final TYPE_2 e : VAR_2 ) { r.add ( e.METHOD_2 ( VAR_1 ) ) ; } return r ; } ) ( r r ) ( METHOD_1_return_line1_col295 return r ; ) 
( p TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) { if ( p instanceof TYPE_3 < ? > ) { return TYPE_4.METHOD_2 ( p ) ; } else { return new TYPE_5 ( new TYPE_6 ( p.METHOD_3 ( ) .getName ( ) p.getValue ( ) ) ) ; } } ) 
( VAR_2 VAR_2   METHOD_6 ( VAR_3 ) ) ( TYPE_1 TYPE_1 ) 
( t TYPE_1 t ) ( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 t TYPE_2 VAR_1 ) { if ( t.METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) .METHOD_1 ( this VAR_1 ) ; if ( ! ( t.METHOD_3 ( ) ) ) return false ; return VAR_2.equals ( ( ( TYPE_4 ) ( t ) ) .VAR_2 ) ; } ) ( VAR_2 VAR_2 ) 
( rw org.eclipse.jgit.revwalk.RevWalk rw ) ( id org.eclipse.jgit.lib.ObjectId id ) ( commit commit ) ( rw rw ) ( commit commit ) ( rw rw ) ( VAR_1 java.lang.String VAR_1 ) ( VAR_1 VAR_1 ) ( commit commit   rw.parseCommit ( id ) ) 
( t TYPE_1 t ) ( METHOD_1_return boolean METHOD_1 ( TYPE_1 t ) { if ( ! ( t.METHOD_2 ( ) ) ) return false ; if ( t.equals ( VAR_1 ) ) return true ; return ( ( ( TYPE_2 ) ( t ) ) .name ( ) .length ( ) )    1 ; } ) 
( TYPE_1 TYPE_1 ) ( VAR_1 VAR_1   METHOD_3 ( STRING_2 ) .METHOD_4 ( ) .name ( ) ) 
( METHOD_1_return public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id key ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db   schema.METHOD_2 ( ) ; try { final TYPE_1 VAR_1   METHOD_1 ( db key ) ; java.lang.String user   VAR_1.METHOD_3 ( ) ; if ( user !   null ) { VAR_2.put ( user TYPE_2.of ( VAR_1.METHOD_4 ( ) .getId ( ) ) ) ; } return VAR_1 ; } finally { db.close ( ) ; } } ) ( schema schema ) ( db db   schema.METHOD_2 ( ) ) ( key com.google.gerrit.reviewdb.client.Account.Id key ) 
( get_return public TYPE_1.ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { TYPE_5 u   user.get ( ) ; if ( u.METHOD_1 ( ) ) { ( ( TYPE_6 ) ( u ) ) .METHOD_2 ( ) ; } return VAR_1.get ( ) .METHOD_3 ( s ) .format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 e ) ; } } ) ( s TYPE_2 < TYPE_3 > s ) 
( VAR_4 VAR_4   VAR_5.get ( ) ) ( VAR_1 VAR_1 ) ( METHOD_1_return private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 )    null ) { VAR_1   VAR_3.get ( ) .METHOD_2 ( ) ; } else { VAR_1   VAR_2 ; } TYPE_3 VAR_4   VAR_5.get ( ) ; if ( VAR_4 instanceof TYPE_4 ) { VAR_4   null ; } return new TYPE_1 ( VAR_3.get ( ) VAR_1 VAR_6.METHOD_3 ( VAR_1 VAR_7 VAR_4 ) ) ; } ) ( VAR_5 VAR_5 ) 
( s final TYPE_1 s ) ( s s ) ( n n   s.METHOD_1 ( ) ) ( VAR_2 VAR_2 ) 
( METHOD_1_return public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( ( TYPE_1.METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2.schema ( VAR_2 ) .METHOD_3 ( VAR_3 ) ) ) ) { return java.util.Collections.METHOD_4 ( ) ; } else { return query ( new TYPE_3 ( VAR_1 ) ) ; } } ) ( VAR_1 java.lang.String VAR_1 ) 
( VAR_1 VAR_1   p.METHOD_2 ( schema ) ) ( TYPE_4 TYPE_4 ) ( p p ) ( p TYPE_3 p ) ( METHOD_1_return private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema TYPE_3 p ) { long VAR_1   p.METHOD_2 ( schema ) ; long VAR_2   p.METHOD_3 ( schema ) ; return TYPE_4.METHOD_4 ( p.METHOD_5 ( ) .getName ( ) ( VAR_1 !   ( VAR_3 ) ? VAR_1 : null ) ( VAR_2 !   ( VAR_4 ) ? VAR_2 : null ) false false ) ; } ) ( schema TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema ) ( p p ) ( VAR_2 VAR_2   p.METHOD_3 ( schema ) ) 
( label TYPE_1 label ) ( status TYPE_2 status ) 
( VAR_2 TYPE_3 VAR_2 ) ( VAR_3 org.eclipse.jgit.lib.Repository VAR_3 ) ( get_return TYPE_1 get ( TYPE_2 VAR_1 TYPE_3 VAR_2 org.eclipse.jgit.lib.Repository VAR_3 com.google.gerrit.server.query.change.ChangeData VAR_4 int VAR_5 ) throws com.google.gwtorm.server.OrmException java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project   VAR_4.change ( ) .getProject ( ) ; java.lang.String branch   VAR_4.change ( ) .METHOD_1 ( ) .get ( ) ; java.lang.String VAR_6   TYPE_4.METHOD_2 ( VAR_4.getId ( ) .get ( ) VAR_5 branch ) ; return get ( VAR_1 VAR_2 VAR_6 VAR_3 project branch VAR_4.METHOD_3 ( ) ) ; } ) ( VAR_6 VAR_6   TYPE_4.METHOD_2 ( VAR_4.getId ( ) .get ( ) VAR_5 branch ) ) ( branch branch   VAR_4.change ( ) .METHOD_1 ( ) .get ( ) ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_4 com.google.gerrit.server.query.change.ChangeData VAR_4 ) ( VAR_4 VAR_4 ) ( TYPE_4 TYPE_4 ) ( VAR_5 int VAR_5 ) ( VAR_4 VAR_4 ) ( project project   VAR_4.change ( ) .getProject ( ) ) 
( METHOD_1_return public boolean METHOD_1 ( ) { return ( ( ( ( ( ( VAR_1 ) >   0 ) & & ( ( VAR_2 ) >   0 ) ) & & ( ( VAR_3 ) >   0 ) ) & & ( ( VAR_4 ) >   0 ) ) & & ( ( VAR_1 ) <   ( VAR_3 ) ) ) & & ( ( ( VAR_1 ) !   ( VAR_3 ) ) || ( ( VAR_2 ) <   ( VAR_4 ) ) ) ; } ) 
( result result   null ) ( result result ) ( METHOD_1_return_line1_col260 return result ; ) ( METHOD_1_return public TYPE_1 < ? > METHOD_1 ( final int id ) { TYPE_1 < ? > result   null ; for ( final TYPE_2 e : VAR_1 ) { final TYPE_1 < ? > t   e.METHOD_1 ( id ) ; if ( t !   null ) { if ( result !   null ) { return null ; } else { result   t ; } } } return result ; } ) ( id final int id ) 
( b b   new TYPE_1 ( ) ) 
( result result ) ( TYPE_4 TYPE_4 ) ( result result   TYPE_4.METHOD_3 ( ) ) ( patchSets patchSets   cd.METHOD_2 ( ) ) ( cd cd ) ( METHOD_1_return private static TYPE_1 < TYPE_2 com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets   cd.METHOD_2 ( ) ; TYPE_1 < TYPE_2 com.google.gerrit.reviewdb.client.PatchSet > result   TYPE_4.METHOD_3 ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result.put ( ps.getId ( ) .get ( ) ps ) ; } return result ; } ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) ( METHOD_1_return_line1_col511 return result ; ) 
( TYPE_1 TYPE_1 ) 
( ctx ctx ) ( ctx ctx ) ( update update   ctx.METHOD_2 ( change.currentPatchSetId ( ) ) ) ( ctx TYPE_1 ctx ) ( change change ) ( METHOD_1_return public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change   ctx.getChange ( ) ; if ( ( change.getStatus ( ) )    ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } TYPE_3 update   ctx.METHOD_2 ( change.currentPatchSetId ( ) ) ; change.METHOD_3 ( VAR_2 ) ; change.METHOD_4 ( ctx.METHOD_5 ( ) ) ; update.METHOD_3 ( VAR_2 ) ; METHOD_6 ( ctx update ) ; return true ; } ) ( change change   ctx.getChange ( ) ) ( change change ) ( update update ) 
( repo repo ) ( java.lang.String ) ( VAR_1 VAR_1   repo.METHOD_2 ( ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo java.lang.String ) throws java.io.IOException { TYPE_2 p   new TYPE_2 ( ) ; TYPE_3 VAR_1   repo.METHOD_2 ( ) ; try { p.METHOD_3 ( VAR_1 new org.eclipse.jgit.revwalk.RevWalk ( repo ) .METHOD_4 ( repo.METHOD_5 ( ) ) ) ; return p ; } finally { VAR_1.METHOD_6 ( ) ; } } ) ( repo org.eclipse.jgit.lib.Repository repo ) ( p p   new TYPE_2 ( ) ) 
( req req ) ( req TYPE_2 req ) ( rp rp   VAR_3.METHOD_4 ( ) ) ( VAR_3 VAR_3 ) ( create_return_line1_col389 return rp ; ) ( rp rp ) ( factory factory ) ( db org.eclipse.jgit.lib.Repository db ) ( create_return public TYPE_1 create ( TYPE_2 req org.eclipse.jgit.lib.Repository db ) throws TYPE_3 { final TYPE_4 VAR_1   ( ( TYPE_4 ) ( req.METHOD_1 ( VAR_2 ) ) ) ; if ( ! ( VAR_1.METHOD_2 ( ) .METHOD_3 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_5 VAR_3   factory.create ( VAR_1 db TYPE_6.of ( ) ) ; TYPE_1 rp   VAR_3.METHOD_4 ( ) ; req.METHOD_5 ( VAR_4 VAR_3 ) ; return rp ; } ) ( VAR_1 VAR_1   ( ( TYPE_4 ) ( req.METHOD_1 ( VAR_2 ) ) ) ) ( VAR_3 VAR_3   factory.create ( VAR_1 db TYPE_6.of ( ) ) ) 
( VAR_1 TYPE_3 VAR_1 ) ( account TYPE_2 account ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 account TYPE_3 VAR_1 ) throws TYPE_4 TYPE_5 { try { return VAR_2.create ( VAR_3.METHOD_2 ( account VAR_1 ) ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_5 ( e ) ; } } ) 
( VAR_3 VAR_3 ) ( VAR_3 VAR_3   TYPE_4.METHOD_2 ( changeId.get ( ) ) ) ( TYPE_5 TYPE_5 ) ( VAR_1 boolean VAR_1 ) ( TYPE_4 TYPE_4 ) ( VAR_2 TYPE_1 < TYPE_2.ChangeInfo > VAR_2 ) 
( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 int VAR_2 ) ( METHOD_1_return public static int METHOD_1 ( TYPE_1 VAR_1 int VAR_2 ) { try { TYPE_2 VAR_3   TYPE_3.get ( VAR_1 ) ; TYPE_4 VAR_4   TYPE_5.get ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData VAR_5   TYPE_6.get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_6   TYPE_7.get ( VAR_1 ) ; return new TYPE_8 ( VAR_6 VAR_5 VAR_2 ) .METHOD_1 ( VAR_3 VAR_4 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_7.error ( STRING_1 e ) ; return 0 ; } } ) 
( METHOD_1_return private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder m   new java.lang.StringBuilder ( ) ; m.append ( METHOD_2 ( ) ) ; if ( user.METHOD_3 ( ) ) { TYPE_1 u   user.METHOD_4 ( ) ; if ( u.METHOD_5 ( ) .METHOD_6 ( ) .METHOD_7 ( ) ) { m.append ( STRING_1 ) .append ( u.METHOD_5 ( ) .METHOD_6 ( ) .get ( ) ) .append ( STRING_2 ) ; } } return m.toString ( ) ; } ) ( nodeCall_toString_return m.toString ( ) ) ( m m ) ( m m ) ( METHOD_1_return_line1_col377 return m.toString ( ) ; ) ( m m   new java.lang.StringBuilder ( ) ) 
( edit edit ) ( METHOD_1_return_line1_col306 return out ; ) ( VAR_1 boolean VAR_1 ) ( out out   new TYPE_1 ( ) ) ( out out ) ( edit TYPE_2 edit ) ( TYPE_3 TYPE_3 ) ( METHOD_1_return public TYPE_1 METHOD_1 ( TYPE_2 edit boolean VAR_1 ) { TYPE_1 out   new TYPE_1 ( ) ; out.commit   TYPE_3.METHOD_2 ( edit.METHOD_3 ( ) ) ; VAR_2   edit.METHOD_4 ( ) .getRevision ( ) .get ( ) ; VAR_3   TYPE_3.METHOD_5 ( edit ) ; if ( VAR_1 ) { VAR_4   METHOD_6 ( edit ) ; } return out ; } ) ( TYPE_3 TYPE_3 ) 
( schema schema ) ( METHOD_1_return private static long METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > schema java.lang.String value ) { TYPE_2 < com.google.gerrit.server.query.change.ChangeData ? > VAR_1   schema.METHOD_2 ( ) .get ( TYPE_3.getName ( ) ) ; if ( VAR_1    ( TYPE_4 ) ) { return TYPE_5.METHOD_1 ( value ) ; } else { return TYPE_6.METHOD_3 ( value ) ; } } ) ( VAR_1 VAR_1   schema.METHOD_2 ( ) .get ( TYPE_3.getName ( ) ) ) ( schema TYPE_1 < com.google.gerrit.server.query.change.ChangeData > schema ) ( value java.lang.String value ) 
( url url   c.METHOD_2 ( ) .METHOD_3 ( ) ) ( METHOD_1_return public static TYPE_1 METHOD_1 ( TYPE_2 c ) throws TYPE_3.OrmException TYPE_4 { java.lang.String url   c.METHOD_2 ( ) .METHOD_3 ( ) ; for ( TYPE_1 d : VAR_1 ) { if ( d.METHOD_4 ( url c ) ) { return d.METHOD_5 ( c ) ; } } throw new TYPE_3.OrmException ( ( STRING_1 + url ) ) ; } ) ( c TYPE_2 c ) ( c c ) 
( VAR_1 VAR_1   TYPE_2.METHOD_2 ( token ) ) ( token final java.lang.String token ) ( VAR_4 VAR_4 ) ( TYPE_2 TYPE_2 ) 
( in in   new TYPE_4 ( ) ) ( Assert org.junit.Assert ) ( VAR_2 VAR_2 ) ( VAR_2 VAR_2   VAR_3.changes ( ) .id ( ( STRING_1 + ( r.getChangeId ( ) ) ) ) ) ( email user.email ) ( VAR_3 VAR_3 ) ( r r   METHOD_2 ( ) ) 
( VAR_1 final TYPE_1 VAR_1 ) ( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) )    ( VAR_1.METHOD_1 ( ) ) ) { final TYPE_2 < ? > p   ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( TYPE_2.METHOD_2 ( ) .equals ( p.METHOD_2 ( ) ) ) & & ( ( METHOD_3 ( ) )    ( p.METHOD_3 ( ) ) ) ; } return false ; } ) 
( VAR_1 VAR_1   VAR_2.METHOD_2 ( VAR_3 ) ) ( VAR_2 VAR_2 ) ( VAR_4 VAR_4 ) 
( VAR_2 VAR_2   VAR_3.METHOD_2 ( db VAR_4.create ( c ) ) .values ( ) ) ( c com.google.gerrit.reviewdb.client.Change c ) ( VAR_3 VAR_3 ) ( VAR_1 TYPE_1 ... VAR_1 ) ( Truth com.google.common.truth.Truth ) 
( TYPE_5 TYPE_5 ) ( METHOD_1_return private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException TYPE_1 { java.util.Set < TYPE_2 > VAR_1   new TYPE_3 < > ( ) ; for ( java.lang.String VAR_2 : TYPE_4.METHOD_2 ( ) ) { VAR_1.add ( new TYPE_2 ( repo.METHOD_3 ( ) .METHOD_4 ( ) VAR_2 ) ) ; } VAR_1.add ( new TYPE_2 ( repo.METHOD_3 ( ) .METHOD_4 ( ) STRING_1 ) ) ; return TYPE_5.METHOD_1 ( repo STRING_2 VAR_1 ) ; } ) ( VAR_1 VAR_1   new TYPE_3 < > ( ) ) ( VAR_1 VAR_1 ) 
( VAR_1 VAR_1   METHOD_2 ( VAR_2 ) ) 
( METHOD_1_return private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 TYPE_3 VAR_2 org.eclipse.jgit.lib.Repository repo ) { return new TYPE_1 ( TYPE_4.of ( new TYPE_5 ( VAR_1 ) new TYPE_6 ( VAR_1 VAR_3 ) new TYPE_7 ( VAR_1 VAR_4 ) new TYPE_8 ( VAR_1 ) new TYPE_9 ( VAR_1 VAR_4 VAR_5 VAR_2 ) new TYPE_10 ( VAR_1 repo VAR_6 ) new TYPE_11 ( VAR_7 ) new TYPE_12 ( VAR_6 ) ) ) ; } ) ( VAR_1 TYPE_2 VAR_1 ) ( VAR_2 TYPE_3 VAR_2 ) ( repo org.eclipse.jgit.lib.Repository repo ) 
( config TYPE_1.ProjectConfig config ) ( METHOD_1_return private boolean METHOD_1 ( TYPE_1.ProjectConfig config java.util.Set < java.lang.String > VAR_1 TYPE_2 VAR_2 ) throws TYPE_3 { for ( TYPE_4 VAR_3 : VAR_2.METHOD_2 ( ) ) { for ( TYPE_5 VAR_4 : VAR_3.METHOD_3 ( ) ) { METHOD_4 ( VAR_4 ) ; } } boolean VAR_5   ! ( VAR_2.equals ( config.METHOD_5 ( VAR_2.getName ( ) ) ) ) ; config.METHOD_1 ( VAR_2 ) ; VAR_1.METHOD_6 ( VAR_2.getName ( ) ) ; return VAR_5 ; } ) ( VAR_5 VAR_5   ! ( VAR_2.equals ( config.METHOD_5 ( VAR_2.getName ( ) ) ) ) ) ( VAR_5 VAR_5 ) ( config config ) ( VAR_1 java.util.Set < java.lang.String > VAR_1 ) ( METHOD_1_return_line1_col428 return VAR_5 ; ) ( VAR_2 TYPE_2 VAR_2 ) ( VAR_1 VAR_1 ) 
( VAR_2 VAR_2 ) ( Truth com.google.common.truth.Truth ) ( VAR_1 VAR_1   new java.lang.String [ ] { STRING_1 STRING_2 STRING_3 } ) ( m m   VAR_2.METHOD_2 ( repo METHOD_3 ( ) VAR_1 false ) ) 
( METHOD_1_return protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) !   null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) .METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3.METHOD_4 ( ) .METHOD_5 ( ) ; } ) ( TYPE_3 TYPE_3 ) 
( VAR_1 final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : VAR_1.approvals ( ) ) { final TYPE_1 VAR_2   VAR_3.create ( VAR_4 p.getAccountId ( ) ) ; if ( VAR_2.METHOD_2 ( ) .contains ( VAR_5 ) ) { return true ; } } return false ; } ) 
( VAR_1 TYPE_1 < java.lang.String > VAR_1 ) ( VAR_2 java.util.Set < java.lang.String > VAR_2 ) ( Truth com.google.common.truth.Truth ) 
( s s   ( ( TYPE_4 ) ( db ) ) ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( VAR_1 java.util.List < TYPE_1 > VAR_1 ) ( e e   new TYPE_5 ( s ) ) ( ui TYPE_2 ui ) 
( final java.lang.String ) ( METHOD_1_return public TYPE_1 METHOD_1 ( final java.lang.String java.lang.String value ) { if ( ( value !   null ) & & ( ( value.length ( ) ) > 0 ) ) { final java.lang.String e   METHOD_2 ( ) ; return METHOD_3 ( ( ( e.length ( ) ) > 0 ? ( e + STRING_1 ) + value : e ) ) ; } return this ; } ) ( value java.lang.String value ) 
( METHOD_1_return public java.util.Map < java.lang.String TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String TYPE_1 > ) ( VAR_1.get ( ) .apply ( revision ) .value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 e ) ; } } ) 
( METHOD_1_return public java.util.Set < java.lang.String > METHOD_1 ( ) throws TYPE_1 { try { return TYPE_2.METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1.get ( ) .METHOD_3 ( true ) .apply ( revision ) .value ( ) ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 e ) ; } } ) 
( get_return public TYPE_1.ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { TYPE_5 u   user.get ( ) ; if ( u.METHOD_1 ( ) ) { u.METHOD_2 ( ) .METHOD_3 ( ) ; } return VAR_1.create ( s ) .format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 e ) ; } } ) ( s TYPE_2 < TYPE_3 > s ) 
( VAR_1 VAR_1   STRING_1 ) ( STRING_2 STRING_2 ) ( a a   new TYPE_1 ( VAR_1 VAR_2 ) ) ( STRING_1 STRING_1 ) ( VAR_2 VAR_2   STRING_2 ) 
( METHOD_1_return private com.google.gerrit.reviewdb.client.PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   db.changes ( ) .get ( VAR_1.getParentKey ( ) ) ; TYPE_1 notes   VAR_2.create ( db c ) .METHOD_2 ( ) ; return VAR_3.METHOD_1 ( db notes VAR_1 ) ; } ) ( VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ( VAR_2 VAR_2 ) ( db db ) ( c c   db.changes ( ) .get ( VAR_1.getParentKey ( ) ) ) ( VAR_3 VAR_3 ) ( notes notes   VAR_2.create ( db c ) .METHOD_2 ( ) ) 
( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) .METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1   METHOD_4 ( db cd ) .reviewers ( ) .values ( ) ; TYPE_2 user   ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; return VAR_1.contains ( user.getAccountId ( ) ) ; } return false ; } ) ( cd com.google.gerrit.server.query.change.ChangeData cd ) 
( walk walk ) 
( cd com.google.gerrit.server.query.change.ChangeData cd ) ( db com.google.gerrit.reviewdb.server.ReviewDb db ) ( METHOD_1_return private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) .METHOD_2 ( ) ) & & ( ! ( METHOD_3 ( db cd ) ) ) ) { return false ; } return ( VAR_1.METHOD_1 ( ) ) & & ( METHOD_4 ( ) .getProject ( ) .METHOD_5 ( ) .METHOD_6 ( ) ) ; } ) 
( equals_return public boolean equals ( final TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } final TYPE_2 VAR_2   ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ! ( name.equals ( VAR_2.name ) ) ) || ( ( VAR_3 ) !   ( VAR_4 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) .equals ( new TYPE_3 < TYPE_4 > ( VAR_2.METHOD_1 ( ) ) ) ; } ) ( VAR_2 VAR_2   ( ( TYPE_2 ) ( VAR_1 ) ) ) ( VAR_1 final TYPE_1 VAR_1 ) 
( VAR_1 VAR_1 ) ( VAR_2 VAR_2 ) ( TYPE_1 TYPE_1 ) 
( format_return public java.lang.String format ( ) { if ( ( value )    ( ( short ) ( 0 ) ) ) { return CHAR_1 + ( ) ; } else if ( ( value )    ( ( short ) ( 1 ) ) ) { return ; } else if ( ( value ) < 0 ) { return ( ) + ( value ) ; } else { return ( ( ) + CHAR_2 ) + ( value ) ; } } ) 
( TYPE_4 TYPE_4 ) ( id com.google.gerrit.reviewdb.client.PatchSet.Id id ) ( path java.lang.String path ) ( VAR_1 TYPE_1 < TYPE_2 > VAR_1 ) 
( c c   VAR_1.change ( ) ) ( VAR_2 VAR_2   c.currentPatchSetId ( ) ) ( VAR_1 VAR_1 ) ( c c ) ( VAR_1 final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ( METHOD_1_return public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c   VAR_1.change ( ) ; if ( c    null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2   c.currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : VAR_1.approvals ( ) ) { if ( ( p.METHOD_2 ( ) .equals ( VAR_2 ) ) & & ( ( p.getValue ( ) ) !   0 ) ) { return true ; } } return false ; } ) 
( util util ) ( TYPE_1 TYPE_1 ) ( util util ) ( u u   util.user ( VAR_1 VAR_3 ) ) ( d d   util.user ( VAR_1 VAR_3 ) ) ( TYPE_1 TYPE_1 ) 
( VAR_2 final TYPE_1 VAR_2 ) ( VAR_3 final TYPE_1 VAR_3 ) ( VAR_1 final TYPE_3 VAR_1 ) 
( VAR_1 TYPE_3 VAR_1 ) ( VAR_3 VAR_3   new TYPE_5 < TYPE_1 > ( VAR_4 VAR_2 ) ) ( VAR_2 TYPE_4 < TYPE_1 > VAR_2 ) 
( cd com.google.gerrit.server.query.change.ChangeData cd ) ( METHOD_1_return private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { TYPE_1 result   new TYPE_1 ( ) ; for ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > VAR_1 : schema.METHOD_2 ( cd VAR_2 ) ) { if ( ( VAR_1.METHOD_3 ( ) ) !   null ) { add ( result VAR_1 ) ; } } return result ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } } ) 
( VAR_1 final TYPE_2.Id VAR_1 ) ( VAR_3 final TYPE_5 VAR_3 ) ( result final TYPE_1 result ) ( VAR_2 final TYPE_3.Id VAR_2 ) ( db final TYPE_4.ReviewDb db ) 
( VAR_1 TYPE_2 VAR_1 ) ( METHOD_1_return TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return new TYPE_1 ( ) { public void run ( ) { ( VAR_3 ? VAR_4 : VAR_5 ) .METHOD_2 ( ) ; } } ; case VAR_6 : return new TYPE_1 ( ) { public void run ( ) { ( VAR_7 ? VAR_8 : VAR_5 ) .METHOD_2 ( ) ; } } ; default : return new TYPE_1 ( ) { public void run ( ) { } } ; } } ) 
( psId com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ( patch_return public com.google.gerrit.reviewdb.client.PatchSet patch ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { if ( ( ( VAR_1 ) !   null ) & & ( VAR_1.getId ( ) .equals ( psId ) ) ) { return VAR_1 ; } for ( com.google.gerrit.reviewdb.client.PatchSet ps : METHOD_1 ( ) ) { if ( ps.getId ( ) .equals ( psId ) ) { return ps ; } } return null ; } ) 
( METHOD_1_return private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2   VAR_1.METHOD_2 ( ) ; java.lang.String [ ] args   VAR_1.METHOD_3 ( ) ; if ( ( args.length ) > 1 ) { return ( VAR_2 + STRING_1 ) + ( args [ 1 ] ) ; } else { return VAR_2 ; } } ) ( VAR_1 VAR_1 ) ( args args   VAR_1.METHOD_3 ( ) ) ( VAR_1 TYPE_1 VAR_1 ) ( VAR_2 VAR_2   VAR_1.METHOD_2 ( ) ) ( VAR_1 VAR_1 ) 
( java.lang.String ) ( account account ) ( account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ) ( METHOD_1_return private TYPE_1 METHOD_1 ( java.lang.String java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1   new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account   new com.google.gerrit.reviewdb.client.Account ( VAR_1 TYPE_2.METHOD_2 ( ) ) ; account.METHOD_3 ( ) ; account.METHOD_4 ( email ) ; return new TYPE_1 ( new TYPE_3 ( VAR_2 ) account java.util.Collections.METHOD_5 ( ) java.util.Collections.METHOD_5 ( ) new TYPE_4 < > ( ) ) ; } ) ( email java.lang.String email ) ( VAR_1 VAR_1   new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) ( account account ) 
