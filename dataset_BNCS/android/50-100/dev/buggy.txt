private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; } } ; ) STRING_3 , STRING_3 , VAR_4 , VAR_3 , ) ( METHOD_5 . VAR_2 , 0 , STRING_2 , ) STRING_1 , VAR_5 ( METHOD_4 . TYPE_5 ( TYPE_1 new return } ; ) value ( METHOD_3 . VAR_4 { ) values : value long ( for ; ) ( > < java.util.ArrayList new = VAR_4 > TYPE_4 < java.util.List ; ) VAR_1 ( METHOD_2 . TYPE_3 = VAR_3 > java.lang.String < java.util.List { ) VAR_2 TYPE_2 , values ] [ long , VAR_1 ] [ java.lang.String ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule ! = null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } } } } } ; ) ) ( e.toString , ) ( METHOD_7 . ) ( METHOD_6 . rule , STRING_1 ( METHOD_5 { ) e java.lang.Exception ( catch } ; ) VAR_6 , VAR_5 , VAR_4 , VAR_3 , VAR_2 , VAR_1 ( METHOD_4 . rule { try { ) null = ! rule ( if ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 = rule TYPE_5 { ) VAR_6 boolean , VAR_5 boolean , VAR_4 TYPE_4 , VAR_3 TYPE_3 , VAR_2 ] [ TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) & & ( ( VAR_2 ) ! = null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } } } } } ; ) null , VAR_3 , ) node ( METHOD_3 . mContext , node , VAR_4 ( METHOD_2 . mContext ; ) STRING_4 + ) STRING_3 + STRING_2 ( ( + STRING_1 = VAR_3 java.lang.String { ) VAR_2 : node TYPE_1 ( for { ) ) null = ! ) VAR_2 ( ( & & ) ) VAR_1 ( ! ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { double VAR_1 = METHOD_2 ( METHOD_3 ( ) ) ; android.util.Log . i ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; if ( ( VAR_1 > = FLOAT_1 ) & & ( VAR_1 < = FLOAT_2 ) ) { return ; } if ( METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) { if ( ( VAR_1 > = FLOAT_3 ) & & ( VAR_1 < = FLOAT_2 ) ) { return ; } } fail ( ( STRING_2 + VAR_1 ) ) ; } } ; ) ) VAR_1 + STRING_2 ( ( fail } } ; return { ) ) FLOAT_2 = < VAR_1 ( & & ) FLOAT_3 = > VAR_1 ( ( if { ) ) VAR_3 ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 ( if } ; return { ) ) FLOAT_2 = < VAR_1 ( & & ) FLOAT_1 = > VAR_1 ( ( if ; ) ) VAR_1 + STRING_1 ( , TAG . VAR_2 ( i . android.util.Log ; ) ) ( METHOD_3 ( METHOD_2 = VAR_1 double { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( ) { android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ; final TYPE_1 service = VAR_2 ; if ( service ! = null ) { try { return service . METHOD_1 ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; } } ; ) ( > android.bluetooth.BluetoothDevice < java.util.ArrayList new return } ; ) STRING_2 , TAG . VAR_1 ( android.util.Log.w { else } } ; ) ) ( e.toString , TAG . VAR_1 ( android.util.Log.e { ) e android.os.RemoteException ( catch } ; ) ( METHOD_1 . service return { try { ) null = ! service ( if ; VAR_2 = service TYPE_1 final ; ) STRING_1 , TAG . VAR_1 ( android.util.Log.v { ) ( METHOD_1 > android.bluetooth.BluetoothDevice < java.util.List public 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = INT_1 ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( 10 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( 100 ) ; TYPE_2 VAR_5 = METHOD_3 ( VAR_1 , VAR_2 ) ; try { VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ; fail ( STRING_2 ) ; } catch ( TYPE_3 VAR_6 ) { } catch ( java.lang.Exception e ) { fail ( ( e + STRING_3 ) ) ; } } } } ; ) ) STRING_3 + e ( ( fail { ) e java.lang.Exception ( catch } { ) VAR_6 TYPE_3 ( catch } ; ) STRING_2 ( fail ; ) VAR_4 , VAR_3 ( METHOD_4 . VAR_5 { try ; ) VAR_2 , VAR_1 ( METHOD_3 = VAR_5 TYPE_2 ; ) 100 ( METHOD_2 . TYPE_1 = VAR_4 TYPE_1 ; ) 10 ( METHOD_2 . TYPE_1 = VAR_3 TYPE_1 ; INT_1 = VAR_2 int ; STRING_1 = VAR_1 java.lang.String { ) ( METHOD_1 void public 
public static void METHOD_1 ( TYPE_1 test , java.lang.Object VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { assertNotNull ( STRING_1 , VAR_2 ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( test , STRING_2 ) ; VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , VAR_3 ) ; } } ; ) VAR_3 , ) ) VAR_1 ( ) TYPE_3 ( ( ( METHOD_3 . VAR_2 ; ) STRING_2 , test ( METHOD_2 . TYPE_4 = VAR_3 TYPE_3 ; ) VAR_2 , STRING_1 ( assertNotNull { java.lang.Exception throws ) VAR_2 TYPE_2 , VAR_1 java.lang.Object , test TYPE_1 ( METHOD_1 void static public 
protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.List < TYPE_3 > VAR_3 = TYPE_4 . METHOD_5 ( VAR_4 ) ; for ( TYPE_3 VAR_5 : VAR_3 ) { TYPE_5 VAR_6 = VAR_2 . METHOD_6 ( VAR_5 ) ; if ( ( VAR_6 . METHOD_7 ( ) ) & & ( ( VAR_6 . equals ( METHOD_8 ( ) ) ) == false ) ) { METHOD_9 ( VAR_6 , VAR_6 ) ; } } } } } } ; ) VAR_6 , VAR_6 ( METHOD_9 { ) ) false == ) ) ) ( METHOD_8 ( equals . VAR_6 ( ( & & ) ) ( METHOD_7 . VAR_6 ( ( if ; ) VAR_5 ( METHOD_6 . VAR_2 = VAR_6 TYPE_5 { ) VAR_3 : VAR_5 TYPE_3 ( for ; ) VAR_4 ( METHOD_5 . TYPE_4 = VAR_3 > TYPE_3 < java.util.List ; ) ( METHOD_4 . ) ( METHOD_3 . TYPE_2 = VAR_2 TYPE_1 ; ) ( METHOD_2 . VAR_1 { ) ( METHOD_1 void protected 
public void METHOD_1 ( TYPE_1 test , java.lang.String VAR_1 ) { if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ) ; VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) ; } VAR_4 . METHOD_6 ( test ) ; super . METHOD_1 ( test , VAR_1 ) ; } } ; ) VAR_1 , test ( METHOD_1 . super ; ) test ( METHOD_6 . VAR_4 } ; ) ) VAR_1 ( METHOD_5 ( METHOD_2 . VAR_2 ; ) ) VAR_3 , ) ( METHOD_4 . test , ) ( METHOD_3 . test , STRING_1 ( java.lang.String.format ( METHOD_2 . VAR_2 { ) null = ! ) VAR_2 ( ( if { ) VAR_1 java.lang.String , test TYPE_1 ( METHOD_1 void public 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 ! = null ) { java.lang.String VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ; if ( ( VAR_2 . length ( ) ) > 0 ) { return VAR_2 ; } } return null ; } } ; null return } } ; VAR_2 return { ) 0 > ) ) ( length . VAR_2 ( ( if ; ) VAR_4 , VAR_3 ( METHOD_3 . VAR_1 = VAR_2 java.lang.String { ) null = ! VAR_1 ( if ; ) ( METHOD_2 = VAR_1 TYPE_1 { ) ( METHOD_1 java.lang.String private 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) ! = ( VAR_1 . METHOD_1 ( ) ) ) ) { return false ; } if ( ! ( super . equals ( VAR_1 ) ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( VAR_3 ) ! = ( VAR_4 ) ) { return false ; } return true ; } } ; true return } ; false return { ) ) VAR_4 ( = ! ) VAR_3 ( ( if ; ) ) VAR_1 ( ) TYPE_1 ( ( = VAR_2 TYPE_1 } ; false return { ) ) ) VAR_1 ( equals . super ( ! ( if } ; false return { ) ) ) ) ( METHOD_1 . VAR_1 ( = ! ) ) ( METHOD_1 ( ( || ) null == VAR_1 ( ( if } ; true return { ) VAR_1 == ) this ( ( if { ) VAR_1 java.lang.Object ( equals boolean public 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_7 , VAR_1 , STRING_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_8 ) ; } } ; ) VAR_8 ( METHOD_3 . VAR_4 ; ) VAR_2 , STRING_1 , VAR_1 , VAR_7 ( METHOD_5 . VAR_4 ; ) VAR_3 ( METHOD_4 . VAR_4 ; ) VAR_6 ( METHOD_3 . VAR_4 ; ) VAR_1 , VAR_5 ( METHOD_2 . VAR_4 { ) VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void private 
public boolean METHOD_1 ( int subId ) { boolean VAR_1 = false ; try { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony ! = null ) VAR_1 = telephony . METHOD_1 ( subId ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } catch ( java.lang.NullPointerException e ) { } android.util.Log.d ( VAR_2 . TAG , ( STRING_2 + VAR_1 ) ) ; return VAR_1 ; } } ; VAR_1 return ; ) ) VAR_1 + STRING_2 ( , TAG . VAR_2 ( android.util.Log.d } { ) e java.lang.NullPointerException ( catch } ; ) e , STRING_1 , TAG . VAR_2 ( android.util.Log.e { ) e android.os.RemoteException ( catch } ; ) subId ( METHOD_1 . telephony = VAR_1 ) null = ! telephony ( if ; ) ( METHOD_2 = telephony TYPE_1 { try ; false = VAR_1 boolean { ) subId int ( METHOD_1 boolean public 
private void METHOD_1 ( java.lang.String parent , TYPE_1 c , java.lang.String VAR_1 ) { java.lang.String VAR_2 = c . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 , parent , METHOD_4 ( ) ) ) { java.lang.String value = METHOD_5 ( c . METHOD_6 ( ) ) ; METHOD_7 ( context , VAR_2 , value , parent , VAR_1 , c ) ; } } } } ; ) c , VAR_1 , parent , value , VAR_2 , context ( METHOD_7 ; ) ) ( METHOD_6 . c ( METHOD_5 = value java.lang.String { ) ) ) ( METHOD_4 , parent , VAR_2 ( METHOD_3 ( if ; ) ( METHOD_2 . c = VAR_2 java.lang.String { ) VAR_1 java.lang.String , c TYPE_1 , parent java.lang.String ( METHOD_1 void private 
public boolean METHOD_1 ( TYPE_1 context ) { if ( TYPE_2 . METHOD_2 ( context ) ) { if ( ( VAR_1 ) > = ( VAR_2 ) ) { return TYPE_2 . METHOD_3 ( context ) . METHOD_4 ( ) ; } else { return TYPE_2 . METHOD_3 ( context ) . METHOD_1 ( ) ; } } return false ; } } ; false return } } ; ) ( METHOD_1 . ) context ( METHOD_3 . TYPE_2 return { else } ; ) ( METHOD_4 . ) context ( METHOD_3 . TYPE_2 return { ) ) VAR_2 ( = > ) VAR_1 ( ( if { ) ) context ( METHOD_2 . TYPE_2 ( if { ) context TYPE_1 ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 = new TYPE_1 [ ] { } ; VAR_2 = VAR_3 = VAR_4 = - 1 ; VAR_5 = new TYPE_2 ( INT_1 , 0 , TYPE_3 . METHOD_4 ( STRING_1 ) ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; VAR_7 = new TYPE_4 ( TAG ) ; VAR_7 . start ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_8 class , STRING_2 , VAR_9 , VAR_10 ) ; } } ; ) VAR_10 , VAR_9 , STRING_2 , class VAR_8 ( METHOD_7 ; ) ( METHOD_6 ; ) ( start . VAR_7 ; ) TAG ( TYPE_4 new = VAR_7 ; ) VAR_5 ( METHOD_5 . VAR_6 ; ) ) STRING_1 ( METHOD_4 . TYPE_3 , 0 , INT_1 ( TYPE_2 new = VAR_5 ; 1 - = VAR_4 = VAR_3 = VAR_2 ; } { ] [ TYPE_1 new = VAR_1 ; ) ) ( METHOD_3 . ) ( METHOD_2 ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( name ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_3 . METHOD_1 ( name ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_4 . METHOD_1 ( name ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_5 . METHOD_1 ( name ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) name ( METHOD_1 . TYPE_5 = VAR_1 { ) null == VAR_1 ( if } ; ) name ( METHOD_1 . TYPE_4 = VAR_1 { ) null == VAR_1 ( if } ; ) name ( METHOD_1 . TYPE_3 = VAR_1 { ) null == VAR_1 ( if ; ) name ( METHOD_1 . TYPE_2 = VAR_1 TYPE_1 { ) name java.lang.String ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) . METHOD_3 ( 2 , 1 ) . METHOD_4 ( ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } } ; ) ( METHOD_8 ; ) ( METHOD_7 ; ) ) ) ( METHOD_6 . VAR_1 ( METHOD_5 . VAR_4 , VAR_3 ( assertEquals ; ) ( METHOD_4 . ) 1 , 2 ( METHOD_3 . ) 1 , VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ; METHOD_3 ( VAR_3 ) ; synchronized ( this ) { METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_4 , VAR_3 ( METHOD_4 { ) this ( synchronized ; ) VAR_3 ( METHOD_3 ; ) ) ) ) ( METHOD_2 . VAR_2 ( + ) STRING_2 + ) ) this ( + STRING_1 ( ( ( , com.android.server.am.ActivityManagerService.TAG ( android.util.Log.v ) VAR_1 ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( boolean VAR_1 ) { try { final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; long VAR_3 = TYPE_3 . METHOD_4 ( ) ; long VAR_4 = 10 ; assertFalse ( c . METHOD_5 ( VAR_4 , VAR_5 ) ) ; assertTrue ( ( ( METHOD_6 ( VAR_3 ) ) > = VAR_4 ) ) ; VAR_2 . METHOD_7 ( ) ; } catch ( TYPE_4 e ) { METHOD_8 ( e ) ; } } } } ; ) e ( METHOD_8 { ) e TYPE_4 ( catch } ; ) ( METHOD_7 . VAR_2 ; ) ) VAR_4 = > ) ) VAR_3 ( METHOD_6 ( ( ( assertTrue ; ) ) VAR_5 , VAR_4 ( METHOD_5 . c ( assertFalse ; 10 = VAR_4 long ; ) ( METHOD_4 . TYPE_3 = VAR_3 long ; ) ( METHOD_3 . VAR_2 ; ) ( METHOD_2 . VAR_2 = c TYPE_2 final ; ) VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 final { try { ) VAR_1 boolean ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = VAR_2 ; when ( VAR_3 . METHOD_2 ( ) ) . thenReturn ( true ) ; when ( VAR_4 . METHOD_2 ( ) ) . thenReturn ( false ) ; VAR_5 . METHOD_3 ( VAR_1 ) ; VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) ; VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) ; } } ; ) ) class VAR_8 ( METHOD_6 , ) ( METHOD_8 ( METHOD_7 . ) ) ( METHOD_4 , VAR_4 ( verify . VAR_6 ; ) ) class VAR_7 ( METHOD_6 ( METHOD_5 . ) ) ( METHOD_4 , VAR_4 ( verify . VAR_6 ; ) VAR_1 ( METHOD_3 . VAR_5 ; ) false ( thenReturn . ) ) ( METHOD_2 . VAR_4 ( when ; ) true ( thenReturn . ) ) ( METHOD_2 . VAR_3 ( when ; VAR_2 = VAR_1 int { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( STRING_1 ) ; VAR_3 = TYPE_1 . METHOD_6 ( VAR_4 class ) ; VAR_5 = new TYPE_2 ( VAR_6 , VAR_7 , VAR_1 ) ; } } ; ) VAR_1 , VAR_7 , VAR_6 ( TYPE_2 new = VAR_5 ; ) class VAR_4 ( METHOD_6 . TYPE_1 = VAR_3 ; ) STRING_1 ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . TYPE_1 ; ) class VAR_2 ( METHOD_2 . TYPE_1 = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void protected 
private void METHOD_1 ( ) { if ( ( ( VAR_1 . length ) > 0 ) & & ( ( VAR_1 [ 0 ] ) ! = null ) ) { if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , mContext , VAR_4 , VAR_5 ) ; } else { VAR_2 . METHOD_3 ( VAR_3 , mContext , VAR_4 ) ; } } else { if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_4 ( ) ; } VAR_2 = null ; } } } } ; null = VAR_2 } ; ) ( METHOD_4 . VAR_2 { ) null = ! ) VAR_2 ( ( if { else } } ; ) VAR_4 , mContext , VAR_3 ( METHOD_3 . VAR_2 { else } ; ) VAR_5 , VAR_4 , mContext , VAR_3 ( METHOD_2 . TYPE_1 = VAR_2 { ) null == ) VAR_2 ( ( if { ) ) null = ! ) ] 0 [ VAR_1 ( ( & & ) 0 > ) length . VAR_1 ( ( ( if { ) ( METHOD_1 void private 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 e = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; VAR_1 = ( ( VAR_2 ) == null ) ? null : VAR_2 . METHOD_1 ( ) ; return e ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( ) ; } } } } ; ) ( TYPE_3 new throw { ) e TYPE_2 ( catch } ; e return ; ) ( METHOD_1 . VAR_2 : null ? ) null == ) VAR_2 ( ( = VAR_1 ; ) ) ) ( METHOD_1 . super ( ) TYPE_1 ( ( = e TYPE_1 { try { ) ( METHOD_1 java.lang.Object public 
public android.os.Bundle METHOD_1 ( TYPE_1 VAR_1 , java.lang.String action , int x , int y , int VAR_2 , android.os.Bundle VAR_3 , boolean VAR_4 ) { synchronized ( VAR_5 ) { long VAR_6 = TYPE_2 . METHOD_2 ( ) ; try { return METHOD_3 ( METHOD_4 ( this , VAR_1 ) , action , x , y , VAR_2 , VAR_3 , VAR_4 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_6 ) ; } } } } } } ; ) VAR_6 ( METHOD_5 . TYPE_2 { finally } ; ) VAR_4 , VAR_3 , VAR_2 , y , x , action , ) VAR_1 , this ( METHOD_4 ( METHOD_3 return { try ; ) ( METHOD_2 . TYPE_2 = VAR_6 long { ) VAR_5 ( synchronized { ) VAR_4 boolean , VAR_3 android.os.Bundle , VAR_2 int , y int , x int , action java.lang.String , VAR_1 TYPE_1 ( METHOD_1 android.os.Bundle public 
public boolean METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) { if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) & & ( ( VAR_1 . METHOD_3 ( ) ) instanceof TYPE_1 ) ) { TYPE_2 VAR_2 = VAR_1 . METHOD_4 ( ) ; assert VAR_2 ! = null ; if ( ( VAR_2 . METHOD_5 ( VAR_3 class ) ) == null ) { VAR_2 . METHOD_6 ( new TYPE_3 ( VAR_2 ) ) ; } } return super . METHOD_1 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_1 . super return } } ; ) ) VAR_2 ( TYPE_3 new ( METHOD_6 . VAR_2 { ) null == ) ) class VAR_3 ( METHOD_5 . VAR_2 ( ( if ; null = ! VAR_2 assert ; ) ( METHOD_4 . VAR_1 = VAR_2 TYPE_2 { ) ) TYPE_1 instanceof ) ) ( METHOD_3 . VAR_1 ( ( & & ) ) ) ( METHOD_2 . VAR_1 ( ! ( ( if { ) VAR_1 com.android.jack.ir.ast.JMethod ( METHOD_1 boolean public 
private static void METHOD_1 ( java.lang.String [ ] VAR_1 , int VAR_2 , int VAR_3 , java.util.List < java.lang.String > VAR_4 ) { for ( int i = VAR_2 ; i < VAR_3 ; i ++ ) { final java.lang.String VAR_5 = VAR_1 [ i ] ; if ( TYPE_1 . METHOD_2 ( VAR_5 ) ) { VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) ; } else { break ; } } } } } } ; break { else } ; ) ) VAR_6 ( METHOD_4 . VAR_5 ( METHOD_3 . VAR_4 { ) ) VAR_5 ( METHOD_2 . TYPE_1 ( if ; ] i [ VAR_1 = VAR_5 java.lang.String final { ) ++ i ; VAR_3 < i ; VAR_2 = i int ( for { ) VAR_4 > java.lang.String < java.util.List , VAR_3 int , VAR_2 int , VAR_1 ] [ java.lang.String ( METHOD_1 void static private 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_2 ) ; args . METHOD_2 ( STRING_2 , 0 ) ; args . METHOD_2 ( STRING_3 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 , VAR_5 ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; } } ; ) VAR_4 ( METHOD_6 . TYPE_4 ; ) VAR_5 , VAR_1 ( METHOD_5 . ) VAR_4 ( org.mockito.Mockito.verify ; ) ) ( toString . ) args ( METHOD_4 . TYPE_3 , VAR_1 ( METHOD_3 . TYPE_2 ; ) VAR_3 , STRING_3 ( METHOD_2 . args ; ) 0 , STRING_2 ( METHOD_2 . args ; ) VAR_2 , STRING_1 ( METHOD_2 . args ; ) ( android.os.Bundle new = args android.os.Bundle ; INT_1 = VAR_1 short final { TYPE_1 throws ) ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , boolean VAR_4 ) { TYPE_2 VAR_5 ; if ( TYPE_3 . METHOD_2 ( ) ) { VAR_5 = TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ; } else { VAR_5 = TYPE_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } return new TYPE_1 ( VAR_5 ) ; } } ; ) VAR_5 ( TYPE_1 new return } ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 ( METHOD_1 . TYPE_5 = VAR_5 { else } ; ) null , VAR_4 , VAR_3 , VAR_2 , VAR_1 ( METHOD_1 . TYPE_4 = VAR_5 { ) ) ( METHOD_2 . TYPE_3 ( if ; VAR_5 TYPE_2 { ) VAR_4 boolean , VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 TYPE_1 static public 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_3 > VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) . VAR_3 ; return TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_2 , true , VAR_1 ) ) ; } } ; ) ) VAR_1 , true , VAR_2 ( METHOD_7 . TYPE_6 ( METHOD_6 . TYPE_5 return ; VAR_3 . ) ( METHOD_5 . ) ) ( METHOD_4 . ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_4 = VAR_2 > TYPE_3 < java.util.List { ) VAR_1 TYPE_2 ( METHOD_1 > TYPE_1 < java.util.ArrayList static public 
public static java.util.Set < java.lang.Integer > METHOD_1 ( int VAR_1 ) { int VAR_2 = 1 ; java.util.Set < java.lang.Integer > result = null ; while ( VAR_1 ! = 0 ) { if ( ( VAR_1 & 1 ) ! = 0 ) { if ( result == null ) { result = new TYPE_1 < java.lang.Integer > ( ) ; } result . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ; } VAR_1 > > > = 1 ; VAR_2 < < = 1 ; } return result ! = null ? result : VAR_3 < java.lang.Integer > METHOD_4 ( ) ; } } ; ) ( METHOD_4 > java.lang.Integer < VAR_3 : result ? null = ! result return } ; 1 = < < VAR_2 ; 1 = > > > VAR_1 } ; ) ) VAR_2 ( METHOD_3 . TYPE_2 ( METHOD_2 . result } ; ) ( > java.lang.Integer < TYPE_1 new = result { ) null == result ( if { ) 0 = ! ) 1 & VAR_1 ( ( if { ) 0 = ! VAR_1 ( while ; null = result > java.lang.Integer < java.util.Set ; 1 = VAR_2 int { ) VAR_1 int ( METHOD_1 > java.lang.Integer < java.util.Set static public 
public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( VAR_1 . toString ( ) ) ; sb.append ( CHAR_2 ) ; sb.append ( type . METHOD_2 ( ) ) ; sb.append ( CHAR_3 ) ; return sb . toString ( ) ; } } ; ) ( toString . sb return ; ) CHAR_3 ( sb.append ; ) ) ( METHOD_2 . type ( sb.append ; ) CHAR_2 ( sb.append ; ) ) ( toString . VAR_1 ( sb.append ; ) CHAR_1 ( sb.append ; ) ) ( getName . ) ( METHOD_1 ( sb.append ; ) 100 ( TYPE_1 new = sb TYPE_1 { ) ( toString java.lang.String public 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } session = VAR_1 . METHOD_7 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( method ) ; VAR_3 . METHOD_5 ( method ) ; } } ; ) method ( METHOD_5 . VAR_3 ; ) method ( TYPE_1 new = VAR_3 TYPE_1 ; ) ( METHOD_7 . VAR_1 = session } ; return { ) ) ) ) method , ) ( METHOD_6 . this ( METHOD_5 . VAR_2 ( ! ( || ) ) ) ( METHOD_4 . method ( || ) ) ) ( METHOD_3 . method ( || ) ) ( METHOD_2 . VAR_1 ( ( ( ( if ; ) ( METHOD_1 . method = VAR_1 com.android.jack.ir.ast.JDefinedClassOrInterface { java.lang.Exception throws ) method com.android.jack.ir.ast.JMethod ( run void public 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_3 = VAR_1 ; VAR_2 = VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; } if ( ! ( VAR_2 . METHOD_3 ( ) ) ) VAR_2 . METHOD_4 ( ) ; return true ; } } ; true return ; ) ( METHOD_4 . VAR_2 ) ) ) ( METHOD_3 . VAR_2 ( ! ( if } ; ) VAR_1 , VAR_5 ( METHOD_2 . VAR_4 = VAR_2 ; VAR_1 = VAR_3 { ) null == ) VAR_2 ( ( if { ) VAR_1 java.lang.String ( METHOD_1 boolean private 
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 . i ( STRING_1 , STRING_2 ) ; throw new java.lang.NullPointerException ( STRING_3 ) ; } return ( ( ( ( VAR_2 ) > = ( VAR_3 ) ) & & ( ( VAR_2 ) < = ( VAR_4 ) ) ) & & ( ! ( TYPE_3 . METHOD_2 ( ) ) ) ) & & ( VAR_1 . METHOD_3 ( STRING_4 , false ) ) ; } } ; ) ) false , STRING_4 ( METHOD_3 . VAR_1 ( & & ) ) ) ) ( METHOD_2 . TYPE_3 ( ! ( & & ) ) ) VAR_4 ( = < ) VAR_2 ( ( & & ) ) VAR_3 ( = > ) VAR_2 ( ( ( ( return } ; ) STRING_3 ( java.lang.NullPointerException new throw ; ) STRING_2 , STRING_1 ( i . TYPE_2 { ) null == VAR_1 ( if { ) VAR_1 TYPE_1 ( METHOD_1 boolean static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + STRING_1 ) ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ; try { VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) ; fail ( ) ; } catch ( TYPE_3 expected ) { } } } } { ) expected TYPE_3 ( catch } ; ) ( fail ; ) VAR_1 , VAR_5 , VAR_4 ( METHOD_3 . VAR_2 { try ; ) STRING_2 ( METHOD_2 . TYPE_2 = VAR_2 ; ) VAR_1 , VAR_5 , VAR_4 ( METHOD_3 . VAR_2 ; ) ) STRING_1 + ) VAR_3 ( ( ( METHOD_2 . TYPE_2 = VAR_2 TYPE_2 ; ) ( TYPE_1 new = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws android.os.RemoteException { TYPE_1 config = new TYPE_2 ( ) . addFeature ( VAR_1 ) . addFeature ( VAR_2 ) . build ( ) ; VAR_3 = config ; TYPE_1 result = VAR_4 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( config , result ) ; } } ; ) result , config ( assertEquals . TYPE_3 ; ) ( METHOD_2 . VAR_4 = result TYPE_1 ; config = VAR_3 ; ) ( build . ) VAR_2 ( addFeature . ) VAR_1 ( addFeature . ) ( TYPE_2 new = config TYPE_1 { android.os.RemoteException throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device ) ; } } ; ) device ( METHOD_1 . service return ; false return ) null == service ( if ; ) ( METHOD_3 = service TYPE_2 } ; false return ; ) STRING_1 , TAG . TYPE_2 ( android.util.Log.w { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) device android.bluetooth.BluetoothDevice ( METHOD_1 boolean public 
private void METHOD_1 ( ) { try { synchronized ( this ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; if ( VAR_3 ) out . METHOD_5 ( ) ; } } catch ( TYPE_2 x ) { TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ; } catch ( java.io.IOException x ) { VAR_4 = true ; } } } } ; true = VAR_4 { ) x java.io.IOException ( catch } ; ) ( METHOD_7 . ) ( METHOD_6 . TYPE_3 { ) x TYPE_2 ( catch } } ; ) ( METHOD_5 . out ) VAR_3 ( if ; ) ( METHOD_4 . VAR_2 ; ) ( METHOD_4 . VAR_1 ; ) ( METHOD_1 . VAR_1 ; ) ( METHOD_3 = VAR_1 TYPE_1 ; ) ( METHOD_2 { ) this ( synchronized { try { ) ( METHOD_1 void private 
public static java.lang.String METHOD_1 ( char [ ] s ) { TYPE_1 result = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( s . length ) ; ++ i ) { if ( i ! = 0 ) result . append ( CHAR_1 ) ; result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) ; } return result . toString ( ) ; } } ; ) ( toString . result return } ; ) ) ] i [ s ( METHOD_1 . TYPE_2 ( append . result ; ) CHAR_1 ( append . result ) 0 = ! i ( if { ) i ++ ; ) length . s ( < i ; 0 = i int ( for ; ) ( TYPE_1 new = result TYPE_1 { ) s ] [ char ( METHOD_1 java.lang.String static public 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( TYPE_2 VAR_3 : m . METHOD_2 ( VAR_2 ) ) { sb.append ( VAR_3 . toString ( ) ) . append ( CHAR_1 ) ; for ( TYPE_3 item : VAR_3 . METHOD_3 ( ) ) { sb.append ( STRING_1 ) . append ( item . toString ( ) ) . append ( CHAR_1 ) ; } } return sb . toString ( ) ; } } ; ) ( toString . sb return } } ; ) CHAR_1 ( append . ) ) ( toString . item ( append . ) STRING_1 ( sb.append { ) ) ( METHOD_3 . VAR_3 : item TYPE_3 ( for ; ) CHAR_1 ( append . ) ) ( toString . VAR_3 ( sb.append { ) ) VAR_2 ( METHOD_2 . m : VAR_3 TYPE_2 ( for ; ) ( java.lang.StringBuilder new = sb java.lang.StringBuilder { ) VAR_2 boolean , VAR_1 TYPE_1 ( METHOD_1 java.lang.String public 
public void METHOD_1 ( java.lang.String VAR_1 , int index , int VAR_2 ) { if ( VAR_3 ) TYPE_1 . d ( VAR_4 . TAG , ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_2 . VAR_5 ; ) ) VAR_2 + ) STRING_3 + ) index + ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( ( ( , TAG . VAR_4 ( d . TYPE_1 ) VAR_3 ( if { ) VAR_2 int , index int , VAR_1 java.lang.String ( METHOD_1 void public 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 < TYPE_4 > VAR_2 ) { java.util.List < TYPE_4 > VAR_3 = TYPE_5 . METHOD_2 ( VAR_2 ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; return new TYPE_6 ( TYPE_7 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) , TYPE_8 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_3 ) ; } } ; ) VAR_3 , ) ) ( METHOD_9 . VAR_1 ( METHOD_8 . TYPE_8 , ) ) ( METHOD_7 . VAR_1 ( METHOD_6 . TYPE_7 ( TYPE_6 new return ; ) VAR_4 ( METHOD_5 . VAR_3 ; ) ) ( METHOD_4 . VAR_1 , VAR_5 ( METHOD_3 . TYPE_5 = VAR_4 TYPE_4 ; ) VAR_2 ( METHOD_2 . TYPE_5 = VAR_3 > TYPE_4 < java.util.List { ) VAR_2 > TYPE_4 < TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) ; for ( int i = 0 , size = VAR_3 . size ( ) ; i < size ; ++ i ) { TYPE_1 type = VAR_3 . get ( i ) ; if ( type == VAR_1 ) { VAR_3 . set ( i , VAR_2 ) ; } } } } } } ; ) VAR_2 , i ( set . VAR_3 { ) VAR_1 == type ( if ; ) i ( get . VAR_3 = type TYPE_1 { ) i ++ ; size < i ; ) ( size . VAR_3 = size , 0 = i int ( for ; ) VAR_1 , STRING_1 , ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 { ) VAR_2 TYPE_1 , VAR_1 TYPE_1 ( METHOD_1 void private 
private TYPE_1 < TYPE_2 > METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = new TYPE_3 < TYPE_2 > ( ) ; assert ( VAR_3 ) ! = null ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ) { for ( com.android.jack.ir.ast.JMethod method : type . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( method . METHOD_5 ( ) ) ; } } } return VAR_2 ; } } ; VAR_2 return } } } ; ) ) ( METHOD_5 . method ( METHOD_4 . VAR_2 { ) ) ( METHOD_3 . type : method com.android.jack.ir.ast.JMethod ( for { ) ) ) VAR_1 ( METHOD_2 . type ( || ) ) type ( METHOD_2 . VAR_1 ( ( if { ) VAR_3 : type com.android.jack.ir.ast.JDefinedClassOrInterface ( for ; null = ! ) VAR_3 ( assert ; ) ( > TYPE_2 < TYPE_3 new = VAR_2 > TYPE_2 < java.util.Set { ) VAR_1 com.android.jack.ir.ast.JDefinedClassOrInterface ( METHOD_1 > TYPE_2 < TYPE_1 private 
private long METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ; int VAR_3 = VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; boolean VAR_5 = ( VAR_3 > = 0 ) & & ( VAR_3 < = ( VAR_6 ) ) ; return VAR_5 ? VAR_3 : TYPE_1 . METHOD_6 ( ) . METHOD_5 ( VAR_4 ) ; } } ; ) VAR_4 ( METHOD_5 . ) ( METHOD_6 . TYPE_1 : VAR_3 ? VAR_5 return ; ) ) VAR_6 ( = < VAR_3 ( & & ) 0 = > VAR_3 ( = VAR_5 boolean ; ) VAR_4 ( METHOD_5 . ) ( METHOD_4 . VAR_1 = VAR_3 int ; ) class VAR_2 ( METHOD_3 . ) ( METHOD_2 = VAR_1 TYPE_1 { ) ( METHOD_1 long private 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; s . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ; s . METHOD_6 ( ) . getElement ( ) . METHOD_8 ( ) ; s . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . s ; ) ( METHOD_8 . ) ( getElement . ) ( METHOD_6 . s ; ) ( METHOD_8 . ) ( METHOD_7 . ) ( METHOD_6 . s ; ) ( METHOD_5 . VAR_1 ; ) ( METHOD_4 . s ; ) s , VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 . VAR_1 ; ) VAR_1 ( TYPE_2 new = s TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 void private 
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; java.io.File VAR_3 ; try { VAR_3 = TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_4 ( TYPE_4 . getName ( ) , TYPE_5 . toString ( VAR_4 ) ) ; VAR_1 . METHOD_4 ( TYPE_6 . getName ( ) , STRING_3 ) ; VAR_1 . METHOD_4 ( TYPE_7 . getName ( ) , VAR_3 . METHOD_5 ( ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_8 ( e ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) e ( TYPE_8 new throw { ) e java.io.IOException ( catch } ; ) ) ( METHOD_5 . VAR_3 , ) ( getName . TYPE_7 ( METHOD_4 . VAR_1 ; ) STRING_3 , ) ( getName . TYPE_6 ( METHOD_4 . VAR_1 ; ) ) VAR_4 ( toString . TYPE_5 , ) ( getName . TYPE_4 ( METHOD_4 . VAR_1 ; ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_3 = VAR_3 { try ; VAR_3 java.io.File ; ) class VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 TYPE_1 protected 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) METHOD_2 ( ) ; if ( VAR_3 ) android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( VAR_5 . METHOD_5 ( ) ) & & ( VAR_6 ) ) { if ( VAR_2 ) { METHOD_6 ( VAR_7 ) ; } else { METHOD_6 ( VAR_8 ) ; } } } } } } ; ) VAR_8 ( METHOD_6 { else } ; ) VAR_7 ( METHOD_6 { ) VAR_2 ( if { ) ) VAR_6 ( & & ) ) ( METHOD_5 . VAR_5 ( ( if ; ) ) ( METHOD_3 . VAR_1 ( METHOD_4 . VAR_5 ; ) ) VAR_2 + ) STRING_2 + ) ) ) ( METHOD_3 . VAR_1 ( + STRING_1 ( ( ( , VAR_4 ( android.util.Log.d ) VAR_3 ( if ; ) ( METHOD_2 ) VAR_3 ( if { ) VAR_2 boolean , VAR_1 TYPE_1 ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , STRING_1 , VAR_1 , VAR_4 , ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_3 , VAR_7 < TYPE_5 > METHOD_3 ( VAR_1 ) , VAR_2 ) ; return VAR_6 ; } } ; VAR_6 return ; ) VAR_2 , ) VAR_1 ( METHOD_3 > TYPE_5 < VAR_7 , VAR_3 ( TYPE_1 new = VAR_6 TYPE_1 ; ) ) ) ) ( METHOD_2 . VAR_5 ( ) TYPE_4 ( ( , VAR_4 , VAR_1 , STRING_1 , VAR_3 ( TYPE_3 new = VAR_2 TYPE_3 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ; VAR_1 . METHOD_6 ( null ) ; TYPE_5 VAR_3 = METHOD_7 ( VAR_2 ) ; TYPE_6 < TYPE_7 > request = METHOD_8 ( TYPE_8 . with ( VAR_1 ) , VAR_2 ) . METHOD_9 ( VAR_3 ) . METHOD_10 ( VAR_3 ) ; if ( VAR_2 . METHOD_11 ( ) ) { request . METHOD_12 ( ) ; } request . METHOD_13 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_13 . request } ; ) ( METHOD_12 . request { ) ) ( METHOD_11 . VAR_2 ( if ; ) VAR_3 ( METHOD_10 . ) VAR_3 ( METHOD_9 . ) VAR_2 , ) VAR_1 ( with . TYPE_8 ( METHOD_8 = request > TYPE_7 < TYPE_6 ; ) VAR_2 ( METHOD_7 = VAR_3 TYPE_5 ; ) null ( METHOD_6 . VAR_1 ; ) ) ) ( METHOD_5 . VAR_2 ( METHOD_4 . TYPE_4 ( METHOD_3 . VAR_1 ; ) ( METHOD_2 . TYPE_3 { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
void METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 , java.lang.String VAR_2 , long VAR_3 , int VAR_4 ) throws TYPE_1 { if ( ( ( VAR_5 ) ++ ) > 0 ) { super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } } } ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 , uri ( METHOD_1 . super { ) 0 > ) ++ ) VAR_5 ( ( ( if { TYPE_1 throws ) VAR_4 int , VAR_3 long , VAR_2 java.lang.String , VAR_1 java.lang.String , uri java.lang.String ( METHOD_1 void 
private void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 ; int VAR_4 = ( ( int ) ( METHOD_2 ( VAR_5 ) ) ) ; int VAR_6 = VAR_4 + ( VAR_7 ) ; int VAR_8 = METHOD_3 ( VAR_1 ) ; int VAR_9 = METHOD_4 ( VAR_5 ) ; if ( VAR_10 . METHOD_5 ( ) ) { METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , VAR_8 , VAR_11 , VAR_9 ) ; } else { } } } } { else } ; ) VAR_9 , VAR_11 , VAR_8 , VAR_6 , VAR_4 , VAR_2 ( METHOD_6 { ) ) ( METHOD_5 . VAR_10 ( if ; ) VAR_5 ( METHOD_4 = VAR_9 int ; ) VAR_1 ( METHOD_3 = VAR_8 int ; ) VAR_7 ( + VAR_4 = VAR_6 int ; ) ) ) VAR_5 ( METHOD_2 ( ) int ( ( = VAR_4 int ; VAR_3 = VAR_2 int { ) VAR_1 TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 b ) { java.util.ArrayList < TYPE_2 > VAR_1 = b . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( ( ( VAR_3 . METHOD_4 ( ) ) ! = ( VAR_4 ) ) & & ( VAR_3 ! = ( VAR_5 ) ) ) { throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; } } } } ; ) ) STRING_2 + STRING_1 ( ( java.lang.RuntimeException new throw { ) ) ) VAR_5 ( = ! VAR_3 ( & & ) ) VAR_4 ( = ! ) ) ( METHOD_4 . VAR_3 ( ( ( if ; ) ( METHOD_3 . VAR_2 = VAR_3 TYPE_3 ; ) ) 1 - ) ) ( size . VAR_1 ( ( ( get . VAR_1 = VAR_2 TYPE_2 ; ) ( METHOD_2 . b = VAR_1 > TYPE_2 < java.util.ArrayList { ) b TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } java.util.HashMap < java.lang.Integer , TYPE_3 > m = new java.util.HashMap < > ( ) ; m . METHOD_4 ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } } } } { ) expected TYPE_2 ( catch } ; ) ( fail ; ) FLOAT_2 , FLOAT_1 , 1 ( METHOD_3 . ) m ( METHOD_2 . TYPE_1 { try ; ) FLOAT_1 , 1 ( METHOD_4 . m ; ) ( > < java.util.HashMap new = m > TYPE_3 , java.lang.Integer < java.util.HashMap } { ) expected TYPE_2 ( catch } ; ) ( fail ; ) FLOAT_2 , FLOAT_1 , 1 ( METHOD_3 . ) ) ( > < java.util.HashMap new ( METHOD_2 . TYPE_1 { try { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_2 ) ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_2 , STRING_1 ) ; assertEquals ( match , result ) ; } } ; ) result , match ( assertEquals ; ) STRING_1 , STRING_2 , INT_1 , VAR_1 ( METHOD_6 . TYPE_3 = result TYPE_1 ; ) ) ) STRING_2 ( METHOD_5 . TYPE_3 = match ( ( METHOD_3 . VAR_1 ; ) ) STRING_1 ( METHOD_5 . TYPE_3 ( METHOD_3 . VAR_1 ; ) ) ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_1 ; ) ( METHOD_2 . TYPE_2 = VAR_1 > TYPE_1 < java.util.List ; match TYPE_1 { ) ( METHOD_1 void public 
public synchronized void METHOD_1 ( int VAR_1 ) throws TYPE_1 { if ( ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) throw new java.lang.IllegalArgumentException ( STRING_1 ) ; if ( METHOD_2 ( ) ) throw new TYPE_1 ( STRING_2 ) ; try { METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_1 ) ; } catch ( TYPE_1 VAR_3 ) { if ( ! ( METHOD_5 ( ) ) ) throw VAR_3 ; } } } } ; VAR_3 throw ) ) ) ( METHOD_5 ( ! ( if { ) VAR_3 TYPE_1 ( catch } ; ) VAR_1 , VAR_2 ( METHOD_4 . ) ( METHOD_3 { try ; ) STRING_2 ( TYPE_1 new throw ) ) ( METHOD_2 ( if ; ) STRING_1 ( java.lang.IllegalArgumentException new throw ) ) INT_1 > VAR_1 ( || ) 0 < VAR_1 ( ( if { TYPE_1 throws ) VAR_1 int ( METHOD_1 void synchronized public 
void METHOD_1 ( final long id , final int VAR_1 ) { if ( ( ( status ) & ( VAR_2 ) ) == 0 ) { status |= VAR_2 ; VAR_3 = new int [ ( ( VAR_1 - 1 ) / INT_1 ) + 1 ] ; } VAR_3 [ ( ( int ) ( id > > > INT_1 ) ) ] |= ( ( int ) ( id ) ) ; } } ; ) ) id ( ) int ( ( |= ] ) ) INT_1 > > > id ( ) int ( ( [ VAR_3 } ; ] 1 + ) INT_1 / ) 1 - VAR_1 ( ( [ int new = VAR_3 ; VAR_2 |= status { ) 0 == ) ) VAR_2 ( & ) status ( ( ( if { ) VAR_1 int final , id long final ( METHOD_1 void 
private static void METHOD_1 ( TYPE_1 session , TYPE_2 < TYPE_3 > VAR_1 , TYPE_4 VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( VAR_2 , session . METHOD_4 ( ) ) ; session . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ; } } } } ; ) VAR_4 ( METHOD_6 . ) ( METHOD_5 . session ; ) ) ( METHOD_4 . session , VAR_2 ( METHOD_3 . VAR_1 = VAR_4 TYPE_3 { ) ) VAR_3 ( METHOD_2 . VAR_2 ( if { ) VAR_2 TYPE_4 , VAR_1 > TYPE_3 < TYPE_2 , session TYPE_1 ( METHOD_1 void static private 
public synchronized TYPE_1 METHOD_1 ( java.lang.String name ) throws TYPE_2 { try { return METHOD_2 ( name ) ; } catch ( TYPE_3 e ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( this , name ) ; VAR_3 . METHOD_3 ( name , VAR_1 ) ; return VAR_1 ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( VAR_2 . METHOD_4 ( this , name ) ) ; } } } } ; ) ) name , this ( METHOD_4 . VAR_2 ( TYPE_2 new throw { ) e TYPE_4 ( catch } ; VAR_1 return ; ) VAR_1 , name ( METHOD_3 . VAR_3 ; ) name , this ( METHOD_1 . VAR_2 = VAR_1 TYPE_1 { ) e TYPE_3 ( catch } ; ) name ( METHOD_2 return { try { TYPE_2 throws ) name java.lang.String ( METHOD_1 TYPE_1 synchronized public 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; ++ i ) { if ( ! ( VAR_3 [ i ] . equals ( VAR_4 [ i ] ) ) ) return false ; } return true ; } } ; true return } ; false return ) ) ) ] i [ VAR_4 ( equals . ] i [ VAR_3 ( ! ( if { ) i ++ ; ) length . VAR_3 ( < i ; 0 = i int ( for ; ) ) VAR_1 ( ) TYPE_1 ( ( = VAR_2 TYPE_1 } ; false return { ) ) TYPE_1 instanceof VAR_1 ( ! ( if { ) VAR_1 java.lang.Object ( equals boolean public 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 [ ] VAR_3 = VAR_4 ; if ( METHOD_2 ( VAR_3 ) ) { TYPE_4 VAR_5 = VAR_6 ; if ( VAR_5 == null ) { return false ; } java.lang.String VAR_7 = TYPE_5 . METHOD_3 ( VAR_2 ) ; TYPE_6 item = TYPE_7 . METHOD_4 ( VAR_7 , VAR_5 ) ; if ( item ! = null ) { assert VAR_7 ! = null ; METHOD_5 ( VAR_7 , item ) ; METHOD_6 ( VAR_3 , item ) ; } } return false ; } } ; false return } } ; ) item , VAR_3 ( METHOD_6 ; ) item , VAR_7 ( METHOD_5 ; null = ! VAR_7 assert { ) null = ! item ( if ; ) VAR_5 , VAR_7 ( METHOD_4 . TYPE_7 = item TYPE_6 ; ) VAR_2 ( METHOD_3 . TYPE_5 = VAR_7 java.lang.String } ; false return { ) null == VAR_5 ( if ; VAR_6 = VAR_5 TYPE_4 { ) ) VAR_3 ( METHOD_2 ( if ; VAR_4 = VAR_3 ] [ TYPE_3 { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 boolean public 
public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) return ; VAR_2 = VAR_1 ; if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; TYPE_1 . METHOD_3 ( mContext , VAR_5 ) ; } else { VAR_3 . METHOD_4 ( VAR_4 ) ; TYPE_1 . METHOD_5 ( mContext , VAR_5 ) ; } } } } ; ) VAR_5 , mContext ( METHOD_5 . TYPE_1 ; ) VAR_4 ( METHOD_4 . VAR_3 { else } ; ) VAR_5 , mContext ( METHOD_3 . TYPE_1 ; ) VAR_4 ( METHOD_2 . VAR_3 { ) VAR_2 ( if ; VAR_1 = VAR_2 ; return ) VAR_1 == ) VAR_2 ( ( if { ) VAR_1 boolean ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; boolean VAR_3 = VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_3 , true ) ; } } ; ) true , VAR_3 ( assertEquals ; ) ) VAR_1 ( org.mockito.Matchers.eq ( METHOD_5 . ) VAR_6 ( org.mockito.Mockito.verify ; ) VAR_5 ( METHOD_4 . VAR_4 = VAR_3 boolean ; ) VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { while ( VAR_1 ! = null ) { java.lang.Class < ? extends TYPE_1 > type = VAR_1 . METHOD_2 ( ) ; if ( ( type == ( VAR_2 class ) ) || ( type == ( VAR_3 class ) ) ) { return VAR_1 ; } VAR_1 = VAR_1 . METHOD_3 ( ) ; } return null ; } } ; null return } ; ) ( METHOD_3 . VAR_1 = VAR_1 } ; VAR_1 return { ) ) ) class VAR_3 ( == type ( || ) ) class VAR_2 ( == type ( ( if ; ) ( METHOD_2 . VAR_1 = type > TYPE_1 extends ? < java.lang.Class { ) null = ! VAR_1 ( while { ) VAR_1 TYPE_1 ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { for ( TYPE_1 < TYPE_2 > i = VAR_4 . METHOD_2 ( ) ; i . METHOD_3 ( ) ; ) { TYPE_2 VAR_5 = i . METHOD_4 ( ) ; try { VAR_5 . METHOD_5 ( VAR_1 , VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) ; i . METHOD_6 ( ) ; } } } } } } } } ; ) ( METHOD_6 . i ; ) ) ) ) ( e.getMessage ( + ) STRING_2 + STRING_1 ( ( , VAR_6 ( android.util.Log.w { ) e android.os.RemoteException ( catch } ; ) VAR_2 , VAR_1 ( METHOD_5 . VAR_5 { try ; ) ( METHOD_4 . i = VAR_5 TYPE_2 { ) ; ) ( METHOD_3 . i ; ) ( METHOD_2 . VAR_4 = i > TYPE_2 < TYPE_1 ( for { ) VAR_3 ( synchronized { ) VAR_2 int , VAR_1 int ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( ) { int size = ( this . METHOD_2 ( ) ) > > 2 ; int VAR_1 = METHOD_3 ( ) ; return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 , VAR_1 , size , size , 0 , ) 1 - ( , this ( TYPE_2 new ( ) TYPE_1 ( ( return ; ) ( METHOD_3 = VAR_1 int ; 2 > > ) ) ( METHOD_2 . this ( = size int { ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ; } } ; ) ) class VAR_5 ( METHOD_5 . org.mockito.Matchers , ) 0 ( eq . TYPE_1 , ) 0 ( eq . TYPE_1 , ) STRING_4 ( eq . TYPE_1 , ) STRING_3 ( eq . TYPE_1 ( METHOD_4 . ) VAR_4 ( org.mockito.Mockito.verify ; ) ) 1 - ( , false , ) 1 - ( , false , null , null , null , null , TAG . VAR_3 , STRING_2 , STRING_1 ( METHOD_3 . VAR_2 ; ) VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = TYPE_2 . getName ( VAR_1 ) ; if ( name == null ) { name = TYPE_3 . getName ( VAR_1 ) ; if ( name == null ) { name = TYPE_4 . getName ( VAR_1 ) ; } if ( name == null ) { name = TYPE_5 . getName ( VAR_1 ) ; } if ( name == null ) { name = TYPE_6 . getName ( VAR_1 ) ; } } return name ; } } ; name return } } ; ) VAR_1 ( getName . TYPE_6 = name { ) null == name ( if } ; ) VAR_1 ( getName . TYPE_5 = name { ) null == name ( if } ; ) VAR_1 ( getName . TYPE_4 = name { ) null == name ( if ; ) VAR_1 ( getName . TYPE_3 = name { ) null == name ( if ; ) VAR_1 ( getName . TYPE_2 = name java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String static public 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 a = METHOD_2 ( STRING_1 ) ; TYPE_1 b = METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_1 = new TYPE_2 ( new TYPE_1 [ ] { a , b } , VAR_2 ) . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_1 [ ] { a , VAR_1 } , VAR_2 ) ; try { VAR_3 . METHOD_3 ( ) ; fail ( ) ; } catch ( TYPE_3 expected ) { assertEquals ( STRING_3 , expected . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . expected , STRING_3 ( assertEquals { ) expected TYPE_3 ( catch } ; ) ( fail ; ) ( METHOD_3 . VAR_3 { try ; ) VAR_2 , } VAR_1 , a { ] [ TYPE_1 new ( TYPE_2 new = VAR_3 TYPE_2 ; ) ( METHOD_3 . ) VAR_2 , } b , a { ] [ TYPE_1 new ( TYPE_2 new = VAR_1 TYPE_1 ; ) STRING_2 ( METHOD_2 = b TYPE_1 ; ) STRING_1 ( METHOD_2 = a TYPE_1 { java.io.IOException throws ) ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( TYPE_2 type ) { switch ( type . METHOD_2 ( ) ) { case VAR_1 : return VAR_2 ; case VAR_3 : return VAR_4 ; case VAR_5 : return VAR_6 ; case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; case VAR_11 : return VAR_4 ; } return TYPE_3 . METHOD_3 ( type ) ; } } ; ) type ( METHOD_3 . TYPE_3 return } ; VAR_4 return : VAR_11 case ; VAR_10 return : VAR_9 case ; VAR_8 return : VAR_7 case ; VAR_6 return : VAR_5 case ; VAR_4 return : VAR_3 case ; VAR_2 return : VAR_1 case { ) ) ( METHOD_2 . type ( switch { ) type TYPE_2 ( METHOD_1 TYPE_1 static public 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) & & ( VAR_2 . METHOD_3 ( ) ) ) { android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( ) ; } METHOD_7 ( ) ; if ( ( METHOD_8 ( ) ) == 0 ) { if ( VAR_5 ) android.util.Log.d ( VAR_3 . TAG , STRING_3 ) ; METHOD_9 ( false ) ; } } } } ; ) false ( METHOD_9 ; ) STRING_3 , TAG . VAR_3 ( android.util.Log.d ) VAR_5 ( if { ) 0 == ) ) ( METHOD_8 ( ( if ; ) ( METHOD_7 } ; ) ( METHOD_6 . VAR_2 ; ) VAR_4 ( METHOD_5 ; ) VAR_1 ( METHOD_4 ; ) ) STRING_2 + ) ) VAR_4 ( + STRING_1 ( ( , TAG . VAR_3 ( android.util.Log.w { ) ) ) ( METHOD_3 . VAR_2 ( & & ) ) ) VAR_1 ( METHOD_2 ( ! ( ( if { ) VAR_1 TYPE_1 ( METHOD_1 void 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { if ( VAR_2 ) log ( ( ( ( getName ( ) ) + ( VAR_1 . toString ( ) ) ) + STRING_1 ) ) ; switch ( VAR_3 ) { case VAR_4 : if ( ( message.arg1 ) == ( VAR_5 ) ) { METHOD_2 ( VAR_1 ) ; } break ; case VAR_6 : METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; transitionTo ( VAR_7 ) ; break ; default : return VAR_8 ; } TYPE_1 . METHOD_4 ( VAR_9 , VAR_3 ) ; return VAR_10 ; } } ; VAR_10 return ; ) VAR_3 , VAR_9 ( METHOD_4 . TYPE_1 } ; VAR_8 return : default ; break ; ) VAR_7 ( transitionTo ; ) ( METHOD_3 ; ) VAR_1 ( METHOD_2 : VAR_6 case ; break } ; ) VAR_1 ( METHOD_2 { ) ) VAR_5 ( == ) message.arg1 ( ( if : VAR_4 case { ) VAR_3 ( switch ; ) ) STRING_1 + ) ) ) ( toString . VAR_1 ( + ) ) ( getName ( ( ( ( log ) VAR_2 ( if { ) VAR_1 android.os.Message ( METHOD_1 boolean public 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( INT_1 ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ; assertEquals ( match , result ) ; } } ; ) result , match ( assertEquals ; ) STRING_1 , INT_1 , VAR_1 ( METHOD_6 . TYPE_3 = result TYPE_1 ; ) ) INT_2 ( METHOD_5 . TYPE_3 ( METHOD_3 . VAR_1 ; ) ) ) INT_1 ( METHOD_5 . TYPE_3 = match ( ( METHOD_3 . VAR_1 ; ) ) ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_1 ; ) ( METHOD_2 . TYPE_2 = VAR_1 > TYPE_1 < java.util.List ; match TYPE_1 { ) ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String path ) { try { java.io.File VAR_1 = new java.io.File ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ; TYPE_3 . METHOD_2 ( VAR_3 , path ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ; } } } } ; ) ) ) ) ( e.getMessage ( + STRING_1 ( , VAR_4 ( android.util.Log.e { ) e java.lang.Exception ( catch } ; ) ( METHOD_4 . VAR_3 ; ) ( METHOD_3 . VAR_3 ; ) path , VAR_3 ( METHOD_2 . TYPE_3 ; ) ) false , VAR_1 ( TYPE_2 new ( TYPE_1 new = VAR_3 TYPE_1 ; ) VAR_2 ( java.io.File new = VAR_1 java.io.File { try { ) path java.lang.String ( METHOD_1 void private 
private static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { if ( ( VAR_2 ) < ( VAR_3 ) ) { return null ; } if ( VAR_1 == null ) { TYPE_4 . i ( STRING_1 , STRING_2 ) ; VAR_1 = TYPE_5 . METHOD_2 ( context ) ; if ( VAR_1 == null ) { TYPE_4 . i ( STRING_1 , STRING_3 ) ; return null ; } } return context . METHOD_3 ( VAR_4 class ) . METHOD_1 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_1 . ) class VAR_4 ( METHOD_3 . context return } } ; null return ; ) STRING_3 , STRING_1 ( i . TYPE_4 { ) null == VAR_1 ( if ; ) context ( METHOD_2 . TYPE_5 = VAR_1 ; ) STRING_2 , STRING_1 ( i . TYPE_4 { ) null == VAR_1 ( if } ; null return { ) ) VAR_3 ( < ) VAR_2 ( ( if { ) VAR_1 TYPE_3 , context TYPE_2 ( METHOD_1 TYPE_1 static private 
private static java.lang.String METHOD_1 ( java.lang.String [ ] VAR_1 , int start , int VAR_2 ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( INT_1 ) ; for ( int i = start ; i < VAR_2 ; ++ i ) { if ( i ! = 0 ) { VAR_3 . append ( CHAR_1 ) ; } VAR_3 . append ( VAR_1 [ i ] ) ; } return VAR_3 . toString ( ) ; } } ; ) ( toString . VAR_3 return } ; ) ] i [ VAR_1 ( append . VAR_3 } ; ) CHAR_1 ( append . VAR_3 { ) 0 = ! i ( if { ) i ++ ; VAR_2 < i ; start = i int ( for ; ) INT_1 ( java.lang.StringBuilder new = VAR_3 java.lang.StringBuilder { ) VAR_2 int , start int , VAR_1 ] [ java.lang.String ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) { android.renderscript.Allocation VAR_1 = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) ; VAR_1 . METHOD_4 ( n ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( INT_3 , 16 ) ; } } ; ) 16 , INT_3 ( METHOD_6 ; ) VAR_1 ( METHOD_5 . VAR_2 ; ) n ( METHOD_4 . VAR_1 ; ) n , 1 , INT_2 , INT_1 ( METHOD_3 . TYPE_2 ; ] 4 * ) INPUTSIZE ( [ int new = n ; ) android.renderscript.cts.INPUTSIZE , ) mRS ( METHOD_2 . TYPE_1 , mRS ( android.renderscript.Allocation.createSized = VAR_1 android.renderscript.Allocation { ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { assert ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( getName ( ) ) ) ) ; if ( VAR_1 . METHOD_3 ( this ) ) { if ( VAR_1 . METHOD_4 ( ) ) { METHOD_5 ( ) ; METHOD_6 ( ) ; } VAR_1 . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_5 ) ; } VAR_1 . METHOD_8 ( this ) ; } } ; ) this ( METHOD_8 . VAR_1 } ; ) VAR_5 ( METHOD_7 . VAR_1 ; ) VAR_4 ( METHOD_7 . VAR_1 } ; ) ( METHOD_6 ; ) ( METHOD_5 { ) ) ( METHOD_4 . VAR_1 ( if { ) ) this ( METHOD_3 . VAR_1 ( if ; ) ) ) ) ( getName ( METHOD_2 . VAR_3 ( ! ( || ) null == ) VAR_2 ( ( assert { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_2 ) ; TYPE_3 . assertTrue ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_4 , null ) ) ; TYPE_3 . assertTrue ( STRING_5 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_6 , null ) ) ; TYPE_2 . METHOD_5 ( VAR_1 , STRING_4 , null ) ; TYPE_2 . METHOD_5 ( VAR_1 , STRING_6 , null ) ; } } ; ) null , STRING_6 , VAR_1 ( METHOD_5 . TYPE_2 ; ) null , STRING_4 , VAR_1 ( METHOD_5 . TYPE_2 ; ) ) null , STRING_6 , VAR_1 ( METHOD_4 . TYPE_2 , STRING_5 ( assertTrue . TYPE_3 ; ) ) null , STRING_4 , VAR_1 ( METHOD_4 . TYPE_2 , STRING_3 ( assertTrue . TYPE_3 ; ) STRING_2 , VAR_1 ( METHOD_3 . TYPE_2 ; ) STRING_1 , VAR_1 ( METHOD_3 . TYPE_2 ; ) ( METHOD_2 . VAR_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( ) ) ) || ( VAR_2 . METHOD_3 ( ) ) ) { return ; } VAR_1 . print ( STRING_1 ) ; VAR_1 . print ( METHOD_4 ( ) ) ; VAR_1 . println ( STRING_2 ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } VAR_1 . print ( STRING_3 ) ; VAR_1 . println ( ) ; } } ; ) ( println . VAR_1 ; ) STRING_3 ( print . VAR_1 } ; ) VAR_1 ( METHOD_1 . VAR_3 { ) VAR_2 : VAR_3 TYPE_2 ( for ; ) STRING_2 ( println . VAR_1 ; ) ) ( METHOD_4 ( print . VAR_1 ; ) STRING_1 ( print . VAR_1 } ; return { ) ) ) ( METHOD_3 . VAR_2 ( || ) ) ) ( METHOD_2 ( ! ( ( if { ) VAR_1 TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( ) { java.lang.Class < ? > target = VAR_1 class ; java.lang.String VAR_2 = STRING_1 ; TYPE_1 VAR_3 = new TYPE_2 ( VAR_4 , VAR_2 , null , target , VAR_5 , VAR_6 , 0 ) ; VAR_3 . run ( STRING_2 , null , null ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_3 . METHOD_2 ( 8 ) ) . METHOD_3 ( VAR_7 ) ; } } ; ) VAR_7 ( METHOD_3 . ) ) 8 ( METHOD_2 . TYPE_3 , VAR_4 ( org.mockito.Mockito.verify ; ) null , null , STRING_2 ( run . VAR_3 ; ) 0 , VAR_6 , VAR_5 , target , null , VAR_2 , VAR_4 ( TYPE_2 new = VAR_3 TYPE_1 ; STRING_1 = VAR_2 java.lang.String ; class VAR_1 = target > ? < java.lang.Class { ) ( METHOD_1 void public 
public int METHOD_1 ( ) throws java.io.IOException { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( path ) ; byte [ ] b = new byte [ 1 ] ; int res = - 1 ; try { res = METHOD_1 ( b , 0 , 1 ) ; } finally { TYPE_1 . METHOD_3 ( VAR_1 , res ) ; } return res ! = ( - 1 ) ? ( b [ 0 ] ) & INT_1 : - 1 ; } } ; 1 - : INT_1 & ) ] 0 [ b ( ? ) 1 - ( = ! res return } ; ) res , VAR_1 ( METHOD_3 . TYPE_1 { finally } ; ) 1 , 0 , b ( METHOD_1 = res { try ; 1 - = res int ; ] 1 [ byte new = b ] [ byte ; ) path ( METHOD_2 . TYPE_1 = VAR_1 java.lang.Object { java.io.IOException throws ) ( METHOD_1 int public 
public void error ( TYPE_1 VAR_1 , TYPE_2 location , java.lang.String VAR_2 , java.lang.Object ... VAR_3 ) { switch ( VAR_1 ) { case VAR_4 : VAR_5 . METHOD_1 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; case VAR_6 : VAR_5 . METHOD_2 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; case VAR_7 : VAR_5 . error ( null , STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; } } } } ; break ; ) ) VAR_3 , VAR_2 ( java.lang.String.format , location , STRING_1 , null ( error . VAR_5 : VAR_7 case ; break ; ) ) VAR_3 , VAR_2 ( java.lang.String.format , location , STRING_1 ( METHOD_2 . VAR_5 : VAR_6 case ; break ; ) ) VAR_3 , VAR_2 ( java.lang.String.format , location , STRING_1 ( METHOD_1 . VAR_5 : VAR_4 case { ) VAR_1 ( switch { ) VAR_3 ... java.lang.Object , VAR_2 java.lang.String , location TYPE_2 , VAR_1 TYPE_1 ( error void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; TYPE_1 . when ( VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_2 ) ; assertFalse ( VAR_3 . METHOD_3 ( ) ) ; assertFalse ( VAR_3 . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . VAR_3 ( assertFalse ; ) ) ( METHOD_3 . VAR_3 ( assertFalse ; ) VAR_2 ( METHOD_5 . ) ) ) ( METHOD_4 ( METHOD_3 . VAR_1 ( when . TYPE_1 ; ) false , false , false ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public static int METHOD_1 ( int uid , int VAR_1 , int [ ] VAR_2 , boolean VAR_3 , int [ ] [ ] VAR_4 ) { int VAR_5 = ( VAR_3 ) ? VAR_6 : 0 ; return TYPE_1 . METHOD_1 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; } } ; ) VAR_4 , VAR_5 , VAR_2 , VAR_1 , uid ( METHOD_1 . TYPE_1 return ; 0 : VAR_6 ? ) VAR_3 ( = VAR_5 int { ) VAR_4 ] [ ] [ int , VAR_3 boolean , VAR_2 ] [ int , VAR_1 int , uid int ( METHOD_1 int static public 
void METHOD_1 ( ) { final int VAR_1 = VAR_2 . size ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { TYPE_1 w = VAR_2 . get ( i ) ; if ( VAR_3 ) android.util.Log.v ( TYPE_2 . TAG , ( STRING_1 + w ) ) ; w . METHOD_2 ( ) ; } } } } ; ) ( METHOD_2 . w ; ) ) w + STRING_1 ( , TAG . TYPE_2 ( android.util.Log.v ) VAR_3 ( if ; ) i ( get . VAR_2 = w TYPE_1 { ) ++ i ; VAR_1 < i ; 0 = i int ( for ; ) ( size . VAR_2 = VAR_1 int final { ) ( METHOD_1 void 
public java.lang.Integer METHOD_1 ( ) { java.lang.Integer result = 0 ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , null , null , null , null ) ; if ( VAR_1 ! = null ) { result = VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } return result ; } } ; result return } ; ) ( METHOD_4 . VAR_1 ; ) ( METHOD_3 . VAR_1 = result { ) null = ! VAR_1 ( if ; ) null , null , null , null , VAR_3 ( METHOD_2 . VAR_2 = VAR_1 TYPE_1 ; 0 = result java.lang.Integer { ) ( METHOD_1 java.lang.Integer public 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; try { TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class } , VAR_1 ) ; VAR_7 . println ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException VAR_8 ) { java.lang.System.out.println ( STRING_2 ) ; } } } } ; ) STRING_2 ( java.lang.System.out.println { ) VAR_8 java.lang.IllegalArgumentException ( catch } ; ) STRING_1 ( println . VAR_7 ; ) VAR_1 , } class VAR_6 , class VAR_5 , class VAR_4 , class VAR_3 { ] [ > ? < java.lang.Class new , ) ( METHOD_3 . class VAR_2 ( METHOD_2 . TYPE_3 { try ; ) ( TYPE_2 new = VAR_1 TYPE_1 { ) args ] [ java.lang.String ( METHOD_1 void static public 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = null ; try { VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( m ) ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ( TYPE_5 new throw { ) e TYPE_4 ( catch } ; ) ) m ( TYPE_3 new ( METHOD_2 . VAR_1 ; ) ) ) ( METHOD_1 . super ( ) > TYPE_2 < TYPE_1 ( ( = VAR_1 { try ; null = VAR_1 > TYPE_2 < TYPE_1 { ) ( METHOD_1 > TYPE_2 < TYPE_1 public 
private synchronized void METHOD_1 ( ) { if ( ( ( VAR_1 ) == true ) || ( ( VAR_2 ) ! = null ) ) { return ; } TYPE_1 pm = ( ( TYPE_1 ) ( mContext . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 = pm . METHOD_3 ( VAR_4 , VAR_5 ) ; } } ; ) VAR_5 , VAR_4 ( METHOD_3 . pm = VAR_2 ; ) ) ) VAR_3 ( METHOD_2 . mContext ( ) TYPE_1 ( ( = pm TYPE_1 } ; return { ) ) null = ! ) VAR_2 ( ( || ) true == ) VAR_1 ( ( ( if { ) ( METHOD_1 void synchronized private 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; java.lang.Class [ ] VAR_2 = TYPE_1 . METHOD_3 ( ) ; if ( ( ( VAR_3 . size ( ) ) < 1 ) || ( ( ( VAR_3 . size ( ) ) == 1 ) & & ( VAR_4 class . METHOD_4 ( ) . equals ( VAR_3 . get ( 0 ) . getName ( ) ) ) ) ) { METHOD_5 ( STRING_1 ) ; VAR_5 . METHOD_6 ( VAR_6 ) ; } METHOD_7 ( VAR_2 , VAR_7 ) ; } } ; ) VAR_7 , VAR_2 ( METHOD_7 } ; ) VAR_6 ( METHOD_6 . VAR_5 ; ) STRING_1 ( METHOD_5 { ) ) ) ) ) ( getName . ) 0 ( get . VAR_3 ( equals . ) ( METHOD_4 . class VAR_4 ( & & ) 1 == ) ) ( size . VAR_3 ( ( ( || ) 1 < ) ) ( size . VAR_3 ( ( ( if ; ) ( METHOD_3 . TYPE_1 = VAR_2 ] [ java.lang.Class ; ) ( METHOD_2 . VAR_1 { ) ( METHOD_1 void 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 c = TYPE_1 . METHOD_2 ( ) ; TYPE_2 e = VAR_1 . METHOD_3 ( ) ; java.lang.String [ ] VAR_2 = e . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( VAR_3 , VAR_2 ) ; METHOD_6 ( VAR_2 , e . METHOD_4 ( ) ) ; c . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . c ; ) ) ( METHOD_4 . e , VAR_2 ( METHOD_6 ; ) VAR_2 , VAR_3 ( METHOD_5 . TYPE_3 ; ) ( METHOD_4 . e = VAR_2 ] [ java.lang.String ; ) ( METHOD_3 . VAR_1 = e TYPE_2 ; ) ( METHOD_2 . TYPE_1 = c TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 context ) { if ( ( VAR_1 ) ! = null ) { for ( TYPE_2 < java.lang.String , TYPE_3 > VAR_2 : VAR_1 ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; if ( ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) ) { continue ; } TYPE_3 location = VAR_2 . METHOD_4 ( ) ; context . METHOD_5 ( VAR_5 , location , VAR_6 , null ) ; } } } } } } ; ) null , VAR_6 , location , VAR_5 ( METHOD_5 . context ; ) ( METHOD_4 . VAR_2 = location TYPE_3 } ; continue { ) ) ) ) VAR_3 ( METHOD_3 . VAR_4 ( ! ( || ) null == ) VAR_4 ( ( ( if ; ) ( METHOD_2 . VAR_2 = VAR_3 java.lang.String { ) VAR_1 : VAR_2 > TYPE_3 , java.lang.String < TYPE_2 ( for { ) null = ! ) VAR_1 ( ( if { ) context TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( java.lang.StringBuilder sb ) { sb.append ( STRING_1 ) ; if ( ( VAR_1 ) == null ) { sb.append ( STRING_2 ) ; return ; } if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_1 ( sb ) ; } else { sb.append ( STRING_3 ) ; } VAR_3 . METHOD_1 ( sb ) ; sb.append ( STRING_4 ) ; } } ; ) STRING_4 ( sb.append ; ) sb ( METHOD_1 . VAR_3 } ; ) STRING_3 ( sb.append { else } ; ) sb ( METHOD_1 . VAR_2 { ) null = ! ) VAR_2 ( ( if } ; return ; ) STRING_2 ( sb.append { ) null == ) VAR_1 ( ( if ; ) STRING_1 ( sb.append { ) sb java.lang.StringBuilder ( METHOD_1 void public 
public static final java.util.HashMap METHOD_1 ( TYPE_1 in ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( in , null ) ; return ( ( java.util.HashMap ) ( TYPE_5 . METHOD_4 ( VAR_1 , new java.lang.String [ 1 ] ) ) ) ; } } ; ) ) ) ] 1 [ java.lang.String new , VAR_1 ( METHOD_4 . TYPE_5 ( ) java.util.HashMap ( ( return ; ) null , in ( METHOD_3 . VAR_1 ; ) ( METHOD_2 . TYPE_4 = VAR_1 TYPE_3 { TYPE_2 , java.io.IOException throws ) in TYPE_1 ( METHOD_1 java.util.HashMap final static public 
public char METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_2 ( i , VAR_2 ) ; char x = ( ( char ) ( TYPE_2 . METHOD_3 ( METHOD_4 ( i ) , ( ! ( VAR_3 ) ) ) ) ) ; return x ; } } ; x return ; ) ) ) ) ) VAR_3 ( ! ( , ) i ( METHOD_4 ( METHOD_3 . TYPE_2 ( ) char ( ( = x char ; ) VAR_2 , i ( METHOD_2 } ; ) STRING_1 ( TYPE_1 new throw { ) ) VAR_1 ( ! ( if { ) i int ( METHOD_1 char public 
public void METHOD_1 ( int VAR_1 , TYPE_1 listener ) throws TYPE_2 { METHOD_2 ( ) ; if ( listener == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } try { TYPE_3 p = METHOD_3 ( VAR_1 , listener ) ; VAR_2 . METHOD_4 ( p ) ; VAR_3 . METHOD_1 ( VAR_4 , p ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; } } } } ; ) VAR_5 , e , STRING_2 ( TYPE_2 new throw { ) e android.os.RemoteException ( catch } ; ) p , VAR_4 ( METHOD_1 . VAR_3 ; ) p ( METHOD_4 . VAR_2 ; ) listener , VAR_1 ( METHOD_3 = p TYPE_3 { try } ; ) STRING_1 ( java.lang.NullPointerException new throw { ) null == listener ( if ; ) ( METHOD_2 { TYPE_2 throws ) listener TYPE_1 , VAR_1 int ( METHOD_1 void public 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) ) ; VAR_3 . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) } ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; return VAR_3 ; } } ; VAR_3 return ; ) VAR_2 ( METHOD_4 . VAR_3 ; ) } ) ( METHOD_3 . TYPE_5 { ] [ TYPE_4 new ( METHOD_2 . VAR_3 ; ) ) ) VAR_6 ( | ) ) VAR_5 ( | ) VAR_4 ( ( ( , VAR_1 ( TYPE_1 new = VAR_3 TYPE_1 { ) VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static 
public void METHOD_1 ( TYPE_1 context ) { if ( ( VAR_1 ) ! = null ) { TYPE_2 VAR_2 = context . METHOD_2 ( ) ; if ( ( VAR_2 ! = null ) & & ( VAR_2 ! = ( VAR_3 ) ) ) { java.lang.String name = TYPE_3 . METHOD_3 ( VAR_4 . getName ( ) ) ; if ( ! ( name . METHOD_4 ( VAR_1 ) ) ) { TYPE_4 location = TYPE_4 . METHOD_5 ( VAR_4 ) ; context . METHOD_6 ( VAR_5 , location , METHOD_7 ( name ) , null ) ; } } } } } } } } ; ) null , ) name ( METHOD_7 , location , VAR_5 ( METHOD_6 . context ; ) VAR_4 ( METHOD_5 . TYPE_4 = location TYPE_4 { ) ) ) VAR_1 ( METHOD_4 . name ( ! ( if ; ) ) ( getName . VAR_4 ( METHOD_3 . TYPE_3 = name java.lang.String { ) ) ) VAR_3 ( = ! VAR_2 ( & & ) null = ! VAR_2 ( ( if ; ) ( METHOD_2 . context = VAR_2 TYPE_2 { ) null = ! ) VAR_1 ( ( if { ) context TYPE_1 ( METHOD_1 void public 
protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { java.util.List < java.lang.Class < ? extends TYPE_3 > > VAR_1 = new java.util.ArrayList < java.lang.Class < ? extends TYPE_3 > > ( 1 ) ; VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_2 ( VAR_3 class ) ; TYPE_1 VAR_4 = null ; VAR_4 = TYPE_4 . METHOD_3 ( VAR_5 class , VAR_1 ) ; java.io.File [ ] VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; VAR_4 . METHOD_6 ( VAR_7 ) ; return VAR_4 ; } } ; VAR_4 return ; ) VAR_7 ( METHOD_6 . VAR_4 ; ) VAR_6 ( METHOD_5 . VAR_4 ; ) ( METHOD_4 . VAR_4 = VAR_6 ] [ java.io.File ; ) VAR_1 , class VAR_5 ( METHOD_3 . TYPE_4 = VAR_4 ; null = VAR_4 TYPE_1 ; ) class VAR_3 ( METHOD_2 . VAR_1 ; ) class VAR_2 ( METHOD_2 . VAR_1 ; ) 1 ( > > TYPE_3 extends ? < java.lang.Class < java.util.ArrayList new = VAR_1 > > TYPE_3 extends ? < java.lang.Class < java.util.List { TYPE_2 throws ) ( METHOD_1 TYPE_1 protected 
protected boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { TYPE_1 c = VAR_4 . METHOD_2 ( ) ; if ( ( c ! = null ) & & ( c . METHOD_3 ( VAR_1 ) ) ) { android.content.Intent VAR_5 = METHOD_4 ( c , VAR_2 , VAR_3 ) ; METHOD_5 ( VAR_5 ) ; return true ; } return false ; } } ; false return } ; true return ; ) VAR_5 ( METHOD_5 ; ) VAR_3 , VAR_2 , c ( METHOD_4 = VAR_5 android.content.Intent { ) ) ) VAR_1 ( METHOD_3 . c ( & & ) null = ! c ( ( if ; ) ( METHOD_2 . VAR_4 = c TYPE_1 { ) VAR_3 java.lang.String , VAR_2 int , VAR_1 int ( METHOD_1 boolean protected 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 , java.lang.Object ... VAR_5 ) { switch ( VAR_1 ) { case VAR_6 : VAR_7 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; case VAR_8 : VAR_7 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; case VAR_9 : VAR_7 . error ( null , STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; } } } } ; break ; ) ) VAR_5 , VAR_4 ( java.lang.String.format , VAR_3 , VAR_2 , STRING_1 , null ( error . VAR_7 : VAR_9 case ; break ; ) ) VAR_5 , VAR_4 ( java.lang.String.format , VAR_3 , VAR_2 , STRING_1 ( METHOD_3 . VAR_7 : VAR_8 case ; break ; ) ) VAR_5 , VAR_4 ( java.lang.String.format , VAR_3 , VAR_2 , STRING_1 ( METHOD_2 . VAR_7 : VAR_6 case { ) VAR_1 ( switch { ) VAR_5 ... java.lang.Object , VAR_4 java.lang.String , VAR_3 TYPE_2 , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ; VAR_7 . METHOD_6 ( VAR_6 ) ; TYPE_2 . METHOD_7 ( VAR_8 ) ; org.mockito.Mockito.verify ( VAR_3 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_6 ) , org.mockito.Matchers . METHOD_10 ( ) ) ; } } ; ) ) ( METHOD_10 . org.mockito.Matchers , ) VAR_6 ( org.mockito.Matchers.eq ( METHOD_6 . ) ) ( METHOD_9 . TYPE_3 , ) ( METHOD_8 . VAR_3 ( org.mockito.Mockito.verify ; ) VAR_8 ( METHOD_7 . TYPE_2 ; ) VAR_6 ( METHOD_6 . VAR_7 ; ) ) ( METHOD_5 . ) VAR_6 ( METHOD_4 . VAR_5 , VAR_4 ( assertEquals ; ) VAR_3 , ) ( METHOD_3 . VAR_2 , STRING_1 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { assert ! ( METHOD_2 ( ) ) ; java.io.File path = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_5 ( ) ) ) { throw new TYPE_2 ( VAR_1 . METHOD_6 ( ) ) ; } VAR_1 . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . VAR_1 } ; ) ) ( METHOD_6 . VAR_1 ( TYPE_2 new throw { ) ) ) ( METHOD_5 . path ( || ) ) ) ( METHOD_1 . path ( ! ( ( if ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 = path java.io.File ; ) ) ( METHOD_2 ( ! assert { TYPE_2 throws ) VAR_1 TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 { byte [ ] VAR_3 = VAR_2 . METHOD_2 ( ) ; byte [ ] VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; if ( VAR_1 ) { METHOD_5 ( ) ; } else { METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 { else } ; ) ( METHOD_5 { ) VAR_1 ( if ; ) VAR_4 ( METHOD_4 . VAR_6 ; ) VAR_3 ( METHOD_4 . VAR_5 ; ) ( METHOD_3 . VAR_2 = VAR_4 ] [ byte ; ) ( METHOD_2 . VAR_2 = VAR_3 ] [ byte { TYPE_2 , java.io.IOException throws ) VAR_2 TYPE_1 , VAR_1 boolean ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( true , null ) ; VAR_2 = this . VAR_1 ; VAR_3 . METHOD_5 ( VAR_4 , new java.lang.String [ ] { } ) ; new TYPE_1 ( TAG ) . start ( ) ; METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; TYPE_2 . METHOD_8 ( 100 ) ; } } ; ) 100 ( METHOD_8 . TYPE_2 ; ) STRING_1 ( METHOD_7 ; ) ( METHOD_6 ; ) ( start . ) TAG ( TYPE_1 new ; ) } { ] [ java.lang.String new , VAR_4 ( METHOD_5 . VAR_3 ; VAR_1 . this = VAR_2 ; ) null , true ( METHOD_4 . VAR_1 ; ) ) ( METHOD_3 . ) ( METHOD_2 . this ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_3 ) ; VAR_2 . METHOD_2 ( new java.lang.String [ ] { context . METHOD_3 ( VAR_4 ) } ) ; return new TYPE_1 ( new TYPE_5 [ ] { VAR_2 , VAR_1 } ) ; } } ; ) } VAR_1 , VAR_2 { ] [ TYPE_5 new ( TYPE_1 new return ; ) } ) VAR_4 ( METHOD_3 . context { ] [ java.lang.String new ( METHOD_2 . VAR_2 ; ) VAR_3 ( TYPE_4 new = VAR_2 TYPE_4 { ) VAR_1 TYPE_3 , context TYPE_2 ( METHOD_1 TYPE_1 static 
private static int METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { if ( VAR_1 ) { if ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) { return 0 ; } } else { if ( ( ( VAR_3 ) == ( VAR_6 ) ) || ( ( VAR_3 ) == ( VAR_7 ) ) ) { return 0 ; } } throw VAR_2 . METHOD_2 ( ) ; } } ; ) ( METHOD_2 . VAR_2 throw } } ; 0 return { ) ) ) VAR_7 ( == ) VAR_3 ( ( || ) ) VAR_6 ( == ) VAR_3 ( ( ( if { else } } ; 0 return { ) ) ) VAR_5 ( == ) VAR_3 ( ( || ) ) VAR_4 ( == ) VAR_3 ( ( ( if { ) VAR_1 ( if { TYPE_2 throws ) VAR_2 TYPE_1 , VAR_1 boolean ( METHOD_1 int static private 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { return false ; } boolean VAR_3 = false ; for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( VAR_4 . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) ) { VAR_3 = true ; } } return VAR_3 ; } } ; VAR_3 return } } ; true = VAR_3 { ) ) ) ( METHOD_4 . VAR_1 ( equals . ) ( METHOD_4 . VAR_4 ( if { ) ) ( METHOD_3 . VAR_2 : VAR_4 TYPE_1 ( for ; false = VAR_3 boolean } ; false return { ) null == VAR_2 ( if ; ) ( METHOD_2 = VAR_2 TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 boolean private 
public void METHOD_1 ( ) { android.renderscript.Allocation VAR_1 = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 2 ] ; TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) ; VAR_1 . METHOD_4 ( n ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( INT_1 , 16 ) ; } } ; ) 16 , INT_1 ( METHOD_6 ; ) VAR_1 ( METHOD_5 . VAR_2 ; ) n ( METHOD_4 . VAR_1 ; ) n , 1 , INT_2 , INT_1 ( METHOD_3 . TYPE_2 ; ] 2 * ) INPUTSIZE ( [ int new = n ; ) android.renderscript.cts.INPUTSIZE , ) mRS ( METHOD_2 . TYPE_1 , mRS ( android.renderscript.Allocation.createSized = VAR_1 android.renderscript.Allocation { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 . i ( VAR_1 , STRING_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; if ( ( VAR_6 ) == ( VAR_7 ) ) { TYPE_1 . i ( VAR_1 , ( STRING_2 + STRING_3 ) ) ; VAR_3 . METHOD_4 ( VAR_8 ) ; } VAR_3 . METHOD_4 ( VAR_9 ) ; VAR_2 . METHOD_5 ( VAR_10 ) ; } else { TYPE_1 . i ( VAR_1 , STRING_4 ) ; } VAR_2 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . VAR_2 } ; ) STRING_4 , VAR_1 ( i . TYPE_1 { else } ; ) VAR_10 ( METHOD_5 . VAR_2 ; ) VAR_9 ( METHOD_4 . VAR_3 } ; ) VAR_8 ( METHOD_4 . VAR_3 ; ) ) STRING_3 + STRING_2 ( , VAR_1 ( i . TYPE_1 { ) ) VAR_7 ( == ) VAR_6 ( ( if ; ) VAR_5 , VAR_4 ( METHOD_3 . VAR_3 { ) ) ( METHOD_2 . VAR_2 ( if ; ) STRING_1 , VAR_1 ( i . TYPE_1 { ) ( METHOD_1 void public 
java.util.List < TYPE_1 < TYPE_2 > > METHOD_1 ( ) { java.util.List < TYPE_1 < TYPE_2 > > VAR_1 = super . METHOD_1 ( ) ; TYPE_1 < TYPE_2 > VAR_2 = TYPE_3 . not ( new TYPE_4 ( VAR_3 class ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; if ( ! ( VAR_4 ) ) { TYPE_1 < TYPE_2 > VAR_5 = TYPE_3 . not ( new TYPE_4 ( VAR_6 class ) ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) VAR_5 ( METHOD_2 . VAR_1 ; ) ) class VAR_6 ( TYPE_4 new ( not . TYPE_3 = VAR_5 > TYPE_2 < TYPE_1 { ) ) VAR_4 ( ! ( if ; ) ) ( METHOD_3 ( METHOD_2 . VAR_1 ; ) VAR_2 ( METHOD_2 . VAR_1 ; ) ) class VAR_3 ( TYPE_4 new ( not . TYPE_3 = VAR_2 > TYPE_2 < TYPE_1 ; ) ( METHOD_1 . super = VAR_1 > > TYPE_2 < TYPE_1 < java.util.List { ) ( METHOD_1 > > TYPE_2 < TYPE_1 < java.util.List 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ! = null ) & & ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) { context . METHOD_4 ( VAR_4 , VAR_2 , context . METHOD_5 ( VAR_2 ) , STRING_1 , null ) ; } } } } ; ) null , STRING_1 , ) VAR_2 ( METHOD_5 . context , VAR_2 , VAR_4 ( METHOD_4 . context { ) ) ) VAR_3 ( equals . ) ( METHOD_3 . VAR_2 ( & & ) null = ! VAR_2 ( ( if ; ) ( METHOD_2 . VAR_1 = VAR_2 TYPE_3 { ) VAR_1 TYPE_2 , context TYPE_1 ( METHOD_1 void public 
public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( VAR_1 . METHOD_2 ( ) ) ; sb.append ( CHAR_2 ) ; return sb . toString ( ) ; } } ; ) ( toString . sb return ; ) CHAR_2 ( sb.append ; ) ) ( METHOD_2 . VAR_1 ( sb.append ; ) CHAR_1 ( sb.append ; ) ) ( getName . ) ( METHOD_1 ( sb.append ; ) 100 ( TYPE_1 new = sb TYPE_1 { ) ( toString java.lang.String public 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; METHOD_3 ( new TYPE_4 ( info , METHOD_4 ( info , VAR_2 ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } } } ; ) e , x ( METHOD_5 throw { ) e java.lang.Throwable ( catch } ; ) ) ) VAR_2 , info ( METHOD_4 , info ( TYPE_4 new ( METHOD_3 ; ) x ( METHOD_2 = info TYPE_3 { try { ) VAR_1 TYPE_2 , x TYPE_1 ( METHOD_1 void public 
void METHOD_1 ( ) { for ( int i = ( VAR_1 . size ( ) ) - 1 ; i > = 0 ; i -- ) { android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) . VAR_3 ) ) ) ; } } } } ; ) ) ) VAR_3 . ) i ( get . VAR_1 ( + ) STRING_2 + ) i + STRING_1 ( ( ( , TAG . VAR_2 ( android.util.Log.v { ) -- i ; 0 = > i ; 1 - ) ) ( size . VAR_1 ( = i int ( for { ) ( METHOD_1 void 
public int METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; return - 1 ; } TYPE_3 VAR_4 = METHOD_3 ( VAR_3 ) ; if ( VAR_4 ! = null ) { android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; METHOD_4 ( VAR_4 ) ; } return 1 ; } } ; 1 return } ; ) VAR_4 ( METHOD_4 ; ) ) VAR_2 + ) STRING_2 + ) VAR_1 + STRING_3 ( ( ( , TAG . TYPE_2 ( android.util.Log.d { ) null = ! VAR_4 ( if ; ) VAR_3 ( METHOD_3 = VAR_4 TYPE_3 } ; 1 - return ; ) ) VAR_2 + ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( , TAG . TYPE_2 ( android.util.Log.d { ) null == VAR_3 ( if ; ) VAR_2 , VAR_1 ( METHOD_2 = VAR_3 TYPE_1 { ) VAR_2 java.lang.String , VAR_1 int ( METHOD_1 int public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = new TYPE_1 [ 0 ] ; TYPE_2 request = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ; TYPE_5 result = METHOD_5 ( VAR_3 , request ) ; TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . result ( METHOD_6 . TYPE_6 ; ) request , VAR_3 ( METHOD_5 = result TYPE_5 ; ) ( build . ) ) VAR_2 ( METHOD_4 . ) ( TYPE_4 new ( METHOD_3 . ) VAR_1 ( METHOD_2 . ) ( TYPE_3 new = request TYPE_2 ; ] 0 [ TYPE_1 new = VAR_1 ] [ TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; VAR_9 = VAR_10 ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; VAR_17 = VAR_18 ; VAR_19 = VAR_20 ; VAR_21 = VAR_22 ; return VAR_2 ; } } ; VAR_2 return ; VAR_22 = VAR_21 ; VAR_20 = VAR_19 ; VAR_18 = VAR_17 ; VAR_16 = VAR_15 ; VAR_14 = VAR_13 ; VAR_12 = VAR_11 ; VAR_10 = VAR_9 ; VAR_8 = VAR_7 ; VAR_6 = VAR_5 ; VAR_4 = VAR_3 ; ) ( TYPE_1 new = VAR_2 TYPE_1 { ) VAR_1 TYPE_1 ( METHOD_1 TYPE_1 private 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { switch ( VAR_2 ) { case VAR_3 : VAR_4 . METHOD_2 ( this ) ; case VAR_5 : transitionTo ( VAR_6 ) ; break ; case VAR_7 : METHOD_3 ( ) ; transitionTo ( VAR_8 ) ; break ; case VAR_9 : VAR_10 . METHOD_4 ( VAR_11 , this ) ; VAR_10 . METHOD_5 ( VAR_11 , this ) . METHOD_6 ( ) ; transitionTo ( VAR_8 ) ; break ; } return VAR_12 ; } } ; VAR_12 return } ; break ; ) VAR_8 ( transitionTo ; ) ( METHOD_6 . ) this , VAR_11 ( METHOD_5 . VAR_10 ; ) this , VAR_11 ( METHOD_4 . VAR_10 : VAR_9 case ; break ; ) VAR_8 ( transitionTo ; ) ( METHOD_3 : VAR_7 case ; break ; ) VAR_6 ( transitionTo : VAR_5 case ; ) this ( METHOD_2 . VAR_4 : VAR_3 case { ) VAR_2 ( switch { ) VAR_1 android.os.Message ( METHOD_1 boolean public 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } TYPE_4 VAR_3 = TYPE_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) { throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; } return TYPE_5 . METHOD_1 ( VAR_1 , VAR_3 ) ; } } ; ) VAR_3 , VAR_1 ( METHOD_1 . TYPE_5 return } ; ) ) VAR_2 + STRING_2 ( ( TYPE_3 new throw { ) null == VAR_3 ( if ; ) VAR_2 ( METHOD_2 . TYPE_4 = VAR_3 TYPE_4 } ; ) STRING_1 ( java.lang.NullPointerException new throw { ) null == VAR_1 ( if { TYPE_3 throws ) VAR_2 java.lang.String , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( final java.lang.String log ) { if ( METHOD_2 ( log , false ) ) { METHOD_3 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_4 ( VAR_2 , ( STRING_1 + log ) ) ; } } ) ; if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_5 ( STRING_2 , log ) ; } } } } } } ; ) log , STRING_2 ( METHOD_5 . VAR_3 { ) null = ! ) VAR_3 ( ( if ; ) } } ; ) ) log + STRING_1 ( , VAR_2 ( METHOD_4 { ) ( run void public { ) ( java.lang.Runnable new , VAR_1 ( METHOD_3 { ) ) false , log ( METHOD_2 ( if { ) log java.lang.String final ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . d ( this , STRING_1 , VAR_1 ) ; if ( TYPE_3 . equals ( VAR_2 , VAR_1 ) ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) ; TYPE_1 VAR_6 = null ; if ( ( VAR_5 ) ! = null ) { VAR_6 = VAR_7 . METHOD_3 ( ) ; } METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; if ( ( VAR_5 ) ! = null ) { METHOD_6 ( VAR_5 ) ; VAR_5 = null ; } } } } } } ; null = VAR_5 ; ) VAR_5 ( METHOD_6 { ) null = ! ) VAR_5 ( ( if ; ) ( METHOD_5 ; ) VAR_6 ( METHOD_4 } ; ) ( METHOD_3 . VAR_7 = VAR_6 { ) null = ! ) VAR_5 ( ( if ; null = VAR_6 TYPE_1 ; ) VAR_5 , VAR_4 ( METHOD_2 . VAR_3 { ) ) VAR_1 , VAR_2 ( equals . TYPE_3 ( if ; ) VAR_1 , STRING_1 , this ( d . TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public static void METHOD_1 ( int i , byte [ ] VAR_1 , int offset ) { VAR_1 [ offset ] = ( ( byte ) ( i > > 16 ) ) ; VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > 8 ) ) ; VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i ) ) ; } } ; ) ) i ( ) byte ( ( = ] ) 2 + offset ( [ VAR_1 ; ) ) 8 > > i ( ) byte ( ( = ] ) 1 + offset ( [ VAR_1 ; ) ) 16 > > i ( ) byte ( ( = ] offset [ VAR_1 { ) offset int , VAR_1 ] [ byte , i int ( METHOD_1 void static public 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) throws java.io.IOException { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } server = METHOD_4 ( VAR_1 , VAR_2 ) ; try { out = new TYPE_2 ( new TYPE_3 ( server . METHOD_5 ( ) ) , true , VAR_3 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ( ( VAR_3 ) + STRING_1 ) ) ; } in = new TYPE_6 ( server . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . server ( TYPE_6 new = in } ; ) ) STRING_1 + ) VAR_3 ( ( ( TYPE_5 new throw { ) e TYPE_4 ( catch } ; ) VAR_3 , true , ) ) ( METHOD_5 . server ( TYPE_3 new ( TYPE_2 new = out { try ; ) VAR_2 , VAR_1 ( METHOD_4 = server } ; ) ( METHOD_3 { ) ) ( METHOD_2 ( if { java.io.IOException throws ) VAR_2 int , VAR_1 TYPE_1 ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 ) { if ( new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) { return new TYPE_6 ( VAR_1 , VAR_3 ) ; } else { return null ; } } } } ; null return { else } ; ) VAR_3 , VAR_1 ( TYPE_6 new return { ) ) class . ] [ java.lang.String , STRING_1 , class . void , true ( METHOD_2 . ) VAR_3 ( TYPE_5 new ( if { ) VAR_7 boolean , VAR_6 int , VAR_5 TYPE_4 , VAR_4 > java.lang.String < TYPE_3 , VAR_3 > ? < java.lang.Class , VAR_2 java.lang.String , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( false ) ; TYPE_1 . when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 , VAR_6 , VAR_7 ) , null , null , false , true , null ) ; } } ; ) null , true , false , null , null , ) VAR_7 , VAR_6 , VAR_5 ( METHOD_8 . TYPE_3 ( METHOD_7 . VAR_4 ; ) ) ( METHOD_6 . TYPE_2 ( thenReturn . ) ) ) class VAR_3 ( METHOD_5 . TYPE_1 ( METHOD_4 . VAR_2 ( when . TYPE_1 ; ) false ( thenReturn . ) ) ) ( METHOD_3 . org.mockito.Matchers ( METHOD_2 . VAR_1 ( when . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { java.lang.String [ ] res = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_1 , STRING_1 } ; TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_3 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( STRING_4 ) ; int VAR_3 = 0 ; for ( ; VAR_2 . METHOD_4 ( ) ; VAR_3 ++ ) { assertEquals ( res [ VAR_3 ] , VAR_2 . METHOD_5 ( ) ) ; } } } } ; ) ) ( METHOD_5 . VAR_2 , ] VAR_3 [ res ( assertEquals { ) ++ VAR_3 ; ) ( METHOD_4 . VAR_2 ; ( for ; 0 = VAR_3 int ; ) STRING_4 ( METHOD_3 . VAR_1 = VAR_2 TYPE_2 ; ) STRING_3 ( METHOD_2 . TYPE_1 = VAR_1 TYPE_1 ; } STRING_1 , STRING_1 , STRING_2 , STRING_1 { ] [ java.lang.String new = res ] [ java.lang.String { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { java.util.ArrayList VAR_1 = new java.util.ArrayList ( 5 ) ; assertEquals ( STRING_1 , 0 , VAR_1 . size ( ) ) ; try { new java.util.ArrayList ( ( - 10 ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.IllegalArgumentException e ) { } } } } { ) e java.lang.IllegalArgumentException ( catch } ; ) STRING_2 ( fail ; ) ) 10 - ( ( java.util.ArrayList new { try ; ) ) ( size . VAR_1 , 0 , STRING_1 ( assertEquals ; ) 5 ( java.util.ArrayList new = VAR_1 java.util.ArrayList { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; VAR_1 = METHOD_2 ( true , STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; METHOD_3 ( VAR_2 , VAR_3 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_4 , STRING_3 ) ; METHOD_3 ( VAR_2 , VAR_5 , STRING_4 ) ; } } ; ) STRING_4 , VAR_5 , VAR_2 ( METHOD_3 ; ) STRING_3 , VAR_4 , VAR_2 ( METHOD_3 ; ) STRING_2 , VAR_3 , VAR_2 ( METHOD_3 ; ) VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 ; ) STRING_1 , true ( METHOD_2 = VAR_1 ; VAR_1 java.io.File { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < java.io.File > VAR_1 = TYPE_1 . METHOD_2 ( new java.io.File ( STRING_1 ) ) ; java.util.Set < java.io.File > VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; assertTrue ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) , VAR_1 . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . VAR_1 , ) ) ) ( toString . VAR_1 ( + STRING_2 ( ( assertTrue ; ) VAR_2 ( METHOD_4 . VAR_1 ; ) VAR_3 ( METHOD_3 . TYPE_1 = VAR_2 > java.io.File < java.util.Set ; ) ) STRING_1 ( java.io.File new ( METHOD_2 . TYPE_1 = VAR_1 > java.io.File < java.util.Set { java.lang.Exception throws ) ( METHOD_1 void public 
public static int METHOD_1 ( int value , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } int VAR_3 = INT_1 ; return ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ; } } ; ) ) VAR_3 - VAR_1 ( < < value ( + ) ) ) INT_4 + VAR_1 ( > > > value ( + ) ) ) INT_3 ^ VAR_1 ( > > value ( + ) ) INT_2 | VAR_1 ( < < value ( ( ( return ; INT_1 = VAR_3 int } ; ) ( TYPE_1 new throw { ) VAR_2 ( if { ) VAR_1 int , value int ( METHOD_1 int static public 
private static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { if ( ( VAR_2 [ i ] ) ! = ( VAR_3 [ i ] . get ( ) ) ) { VAR_4 . println ( ( ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_2 [ i ] ) ) + STRING_3 ) + ( VAR_3 [ i ] . get ( ) ) ) ) ; } } } } } } ; ) ) ) ) ( get . ] i [ VAR_3 ( + ) STRING_3 + ) ) ] i [ VAR_2 ( + ) STRING_2 + ) i + STRING_1 ( ( ( ( ( ( println . VAR_4 { ) ) ) ( get . ] i [ VAR_3 ( = ! ) ] i [ VAR_2 ( ( if { ) ++ i ; ) VAR_1 ( < i ; 0 = i int ( for { ) ( METHOD_1 void static private 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new byte [ 0 ] ) ) ; assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new byte [ 1 ] ) ) ; TYPE_2 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . TYPE_2 ; ) ) ] 1 [ byte new ( METHOD_2 . TYPE_1 , VAR_1 ( assertEquals ; ) ) ] 0 [ byte new ( METHOD_2 . TYPE_1 , VAR_1 ( assertEquals } { ) expected java.lang.NullPointerException ( catch } ; ) ( fail ; ) null ( METHOD_2 . TYPE_1 { try { java.lang.Exception throws ) ( METHOD_1 void public 
public final void verify ( TYPE_1 key , java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { java.lang.String VAR_2 = TYPE_7 . METHOD_1 ( c . METHOD_2 ( ) ) ; TYPE_8 VAR_3 = TYPE_8 . METHOD_3 ( VAR_2 , VAR_1 ) ; METHOD_4 ( key , VAR_3 ) ; } } ; ) VAR_3 , key ( METHOD_4 ; ) VAR_1 , VAR_2 ( METHOD_3 . TYPE_8 = VAR_3 TYPE_8 ; ) ) ( METHOD_2 . c ( METHOD_1 . TYPE_7 = VAR_2 java.lang.String { TYPE_6 , TYPE_5 , TYPE_4 , TYPE_3 , TYPE_2 throws ) VAR_1 java.lang.String , key TYPE_1 ( verify void final public 
public void METHOD_1 ( java.lang.String VAR_1 , int index , int VAR_2 , TYPE_1 VAR_3 ) { if ( VAR_4 ) TYPE_2 . d ( VAR_5 . TAG , ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; TYPE_3 VAR_6 = new TYPE_3 ( mContext , VAR_1 , null ) ; VAR_6 . set ( VAR_3 ) ; VAR_7 . METHOD_2 ( VAR_6 , VAR_2 , new TYPE_4 ( VAR_8 , VAR_8 ) ) ; } } ; ) ) VAR_8 , VAR_8 ( TYPE_4 new , VAR_2 , VAR_6 ( METHOD_2 . VAR_7 ; ) VAR_3 ( set . VAR_6 ; ) null , VAR_1 , mContext ( TYPE_3 new = VAR_6 TYPE_3 ; ) ) VAR_3 + ) STRING_4 + ) VAR_2 + ) STRING_3 + ) index + ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( ( ( ( ( , TAG . VAR_5 ( d . TYPE_2 ) VAR_4 ( if { ) VAR_3 TYPE_1 , VAR_2 int , index int , VAR_1 java.lang.String ( METHOD_1 void public 
public static java.lang.String METHOD_1 ( TYPE_1 element ) { TYPE_2 VAR_1 = element . METHOD_2 ( ) ; for ( int j = 0 ; j < ( VAR_1 . METHOD_3 ( ) ) ; j ++ ) { TYPE_3 VAR_2 = VAR_1 . item ( j ) ; if ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) { return VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; } } return null ; } } ; null return } } ; ) ( METHOD_6 . ) ( METHOD_5 . VAR_2 return { ) ) VAR_3 ( == ) ) ( METHOD_4 . VAR_2 ( ( if ; ) j ( item . VAR_1 = VAR_2 TYPE_3 { ) ++ j ; ) ) ( METHOD_3 . VAR_1 ( < j ; 0 = j int ( for ; ) ( METHOD_2 . element = VAR_1 TYPE_2 { ) element TYPE_1 ( METHOD_1 java.lang.String static public 
public static TYPE_1 METHOD_1 ( int state , java.lang.String VAR_1 ) { return new TYPE_1 ( state , false , VAR_2 , new TYPE_2 ( VAR_3 ) , null , null , null , null , null , false , false , false , false , false , false , false , 0 , false , false , false , true , VAR_4 , false , VAR_1 ) ; } } ; ) VAR_1 , false , VAR_4 , true , false , false , false , 0 , false , false , false , false , false , false , false , null , null , null , null , null , ) VAR_3 ( TYPE_2 new , VAR_2 , false , state ( TYPE_1 new return { ) VAR_1 java.lang.String , state int ( METHOD_1 TYPE_1 static public 
public int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , int version , int VAR_4 , int VAR_5 ) { if ( ( VAR_6 ) == false ) { throw new java.lang.RuntimeException ( ( ( VAR_7 . TAG ) + STRING_1 ) ) ; } return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 , VAR_5 ) ; } } ; ) VAR_5 , VAR_4 , version , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 return } ; ) ) STRING_1 + ) TAG . VAR_7 ( ( ( java.lang.RuntimeException new throw { ) false == ) VAR_6 ( ( if { ) VAR_5 int , VAR_4 int , version int , VAR_3 int , VAR_2 int , VAR_1 java.lang.String ( METHOD_1 int public 
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( ( ( ! ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) & & ( ! ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) ) & & ( ! ( VAR_1 . METHOD_2 ( STRING_3 ) ) ) ) & & ( ! ( VAR_1 . METHOD_2 ( STRING_4 ) ) ) ) & & ( ! ( VAR_1 . METHOD_3 ( STRING_5 ) ) ) ; } } ; ) ) ) STRING_5 ( METHOD_3 . VAR_1 ( ! ( & & ) ) ) ) STRING_4 ( METHOD_2 . VAR_1 ( ! ( & & ) ) ) ) STRING_3 ( METHOD_2 . VAR_1 ( ! ( & & ) ) ) ) STRING_2 ( METHOD_2 . VAR_1 ( ! ( & & ) ) ) STRING_1 ( METHOD_2 . VAR_1 ( ! ( ( ( ( return { ) VAR_1 java.lang.String ( METHOD_1 boolean static public 
void METHOD_1 ( java.lang.String [ ] expected , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( expected . length , VAR_2 . length ) ; for ( int i = 0 ; i < ( expected . length ) ; ++ i ) { org.junit.Assert.assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ; } } } } ; ) ] i [ VAR_2 , ] i [ expected , ) i + STRING_1 ( ( org.junit.Assert.assertEquals { ) i ++ ; ) length . expected ( < i ; 0 = i int ( for ; ) length . VAR_2 , length . expected ( org.junit.Assert.assertEquals ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_1 = VAR_2 ] [ java.lang.String { ) VAR_1 java.lang.String , expected ] [ java.lang.String ( METHOD_1 void 
public static java.lang.String METHOD_1 ( TYPE_1 context ) { java.lang.String msg = STRING_1 ; try { TYPE_2 pm = context . METHOD_2 ( ) ; TYPE_3 VAR_1 = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ; msg = STRING_2 ; if ( ( VAR_2 ) ! = null ) { msg = VAR_2 ; } } catch ( TYPE_4 e ) { TYPE_5 . d ( VAR_3 . TAG , msg ) ; } return msg ; } } ; msg return } ; ) msg , TAG . VAR_3 ( d . TYPE_5 { ) e TYPE_4 ( catch } } ; VAR_2 = msg { ) null = ! ) VAR_2 ( ( if ; STRING_2 = msg ; ) 0 , ) ( METHOD_4 . context ( METHOD_3 . pm = VAR_1 TYPE_3 ; ) ( METHOD_2 . context = pm TYPE_2 { try ; STRING_1 = msg java.lang.String { ) context TYPE_1 ( METHOD_1 java.lang.String static public 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.lang.String key = ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ; TYPE_4 VAR_4 = TYPE_5 . get ( key ) ; if ( VAR_4 == null ) { VAR_4 = TYPE_6 . METHOD_2 ( new TYPE_7 ( VAR_1 ) , null , VAR_2 , VAR_3 ) ; TYPE_5 . METHOD_3 ( key , VAR_4 ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) VAR_4 , key ( METHOD_3 . TYPE_5 ; ) VAR_3 , VAR_2 , null , ) VAR_1 ( TYPE_7 new ( METHOD_2 . TYPE_6 = VAR_4 { ) null == VAR_4 ( if ; ) key ( get . TYPE_5 = VAR_4 TYPE_4 ; VAR_3 + ) STRING_1 + ) VAR_2 + ) STRING_1 + VAR_1 ( ( ( = key java.lang.String { ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 java.lang.String ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( short VAR_1 , TYPE_1 status ) { if ( VAR_2 ) { android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) ; } VAR_3 . METHOD_3 ( VAR_1 , status . status , true ) ; } } ; ) true , status . status , VAR_1 ( METHOD_3 . VAR_3 } ; ) ) ) ) status ( METHOD_2 . TYPE_2 ( + ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( , TAG . TYPE_2 ( android.util.Log.v { ) VAR_2 ( if { ) status TYPE_1 , VAR_1 short ( METHOD_1 void public 
private boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_1 == ( VAR_4 ) ) & & ( VAR_2 > = 0 ) ) { if ( VAR_3 == ( VAR_5 ) ) { if ( VAR_2 < = ( VAR_6 ) ) { return true ; } } else if ( ( VAR_3 < ( VAR_5 ) ) & & ( VAR_3 > = ( VAR_7 ) ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) ) VAR_7 ( = > VAR_3 ( & & ) ) VAR_5 ( < VAR_3 ( ( if else } } ; true return { ) ) VAR_6 ( = < VAR_2 ( if { ) ) VAR_5 ( == VAR_3 ( if { ) ) 0 = > VAR_2 ( & & ) ) VAR_4 ( == VAR_1 ( ( if { ) VAR_3 int , VAR_2 int , VAR_1 int ( METHOD_1 boolean private 
private TYPE_1 METHOD_1 ( ) { TYPE_2 . d ( STRING_1 , STRING_2 ) ; TYPE_1 VAR_1 = null ; try { VAR_1 = TYPE_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( true ) ; } catch ( java.io.IOException e ) { } return VAR_1 ; } } ; VAR_1 return } { ) e java.io.IOException ( catch } ; ) true ( METHOD_5 . ) ( METHOD_4 . VAR_1 ; ) ) ( METHOD_3 . TYPE_3 ( METHOD_2 . TYPE_1 = VAR_1 { try ; null = VAR_1 TYPE_1 ; ) STRING_2 , STRING_1 ( d . TYPE_2 { ) ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_4 . METHOD_6 ( ) ) ; if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_5 ) ) { final TYPE_3 config = new TYPE_3 ( ) ; VAR_1 . METHOD_8 ( config ) ; METHOD_9 ( config ) ; } } } } ; ) config ( METHOD_9 ; ) config ( METHOD_8 . VAR_1 ; ) ( TYPE_3 new = config TYPE_3 final { ) ) VAR_5 ( == ) ) ( METHOD_7 . VAR_1 ( ( if ; ) ) ( METHOD_6 . VAR_4 , ) ) ( METHOD_5 . VAR_3 ( METHOD_4 . ) ( METHOD_3 . TYPE_2 , ) ( getName . VAR_3 , ) ( METHOD_2 . VAR_2 ( TYPE_1 new = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } try { VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) ; } catch ( TYPE_3 e ) { android.util.Log.w ( VAR_5 , STRING_2 ) ; VAR_1 = null ; throw new TYPE_1 ( VAR_6 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) ; throw new TYPE_1 ( VAR_7 ) ; } } } } ; ) VAR_7 ( TYPE_1 new throw ; ) ) e + STRING_3 ( , VAR_5 ( android.util.Log.w { ) e android.os.RemoteException ( catch } ; ) VAR_6 ( TYPE_1 new throw ; null = VAR_1 ; ) STRING_2 , VAR_5 ( android.util.Log.w { ) e TYPE_3 ( catch } ; ) ) ( METHOD_2 . VAR_4 , VAR_3 , VAR_2 ( METHOD_1 . VAR_1 { try } ; ) STRING_1 ( TYPE_2 new throw { ) null == ) VAR_1 ( ( if { TYPE_1 throws ) ( METHOD_1 void public 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return false ; } TYPE_2 path = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( path == null ) { return false ; } if ( VAR_5 . METHOD_3 ( ) ) { path . METHOD_4 ( ) ; return false ; } path . METHOD_5 ( VAR_5 . METHOD_6 ( new TYPE_3 ( ) ) ) ; return true ; } } ; true return ; ) ) ) ( TYPE_3 new ( METHOD_6 . VAR_5 ( METHOD_5 . path } ; false return ; ) ( METHOD_4 . path { ) ) ( METHOD_3 . VAR_5 ( if } ; false return { ) null == path ( if ; ) VAR_2 ( METHOD_2 . TYPE_2 = path TYPE_2 } ; false return { ) null == VAR_3 ( if ; ) VAR_1 ( METHOD_2 . VAR_4 = VAR_3 TYPE_1 { ) VAR_2 int , VAR_1 int ( METHOD_1 boolean static 
public void METHOD_1 ( ) { int [ ] VAR_1 = new int [ ] { VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 } ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) ; fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ; } catch ( java.io.IOException expected ) { } } } } } } { ) expected java.io.IOException ( catch } ; ) ) ) ] i [ VAR_1 ( + STRING_2 ( ( fail ; ) STRING_1 , ] i [ VAR_1 ( METHOD_2 . ) ( TYPE_1 new { try { ) ++ i ; ) length . VAR_1 ( < i ; 0 = i int ( for ; } VAR_10 , VAR_9 , VAR_8 , VAR_7 , VAR_6 , VAR_5 , VAR_4 , VAR_3 , VAR_2 { ] [ int new = VAR_1 ] [ int { ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) { TYPE_1 pkg = super . METHOD_1 ( ) ; if ( pkg == null ) { try { pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , STRING_1 , null , TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) ; METHOD_8 ( pkg ) ; } catch ( java.lang.Exception e ) { METHOD_9 ( STRING_2 , e.toString ( ) ) ; } } return pkg ; } } ; pkg return } } ; ) ) ( e.toString , STRING_2 ( METHOD_9 { ) e java.lang.Exception ( catch } ; ) pkg ( METHOD_8 ; ) ) ( METHOD_7 . ) ( METHOD_6 , ) ( METHOD_5 . TYPE_4 , ) ( METHOD_4 . TYPE_3 , null , STRING_1 , null , 0 , ) ( METHOD_3 , null ( METHOD_2 . TYPE_2 = pkg { try { ) null == pkg ( if ; ) ( METHOD_1 . super = pkg TYPE_1 { ) ( METHOD_1 TYPE_1 public 
public static float METHOD_1 ( float a , float b ) { if ( a ! = a ) return a ; if ( ( ( a == FLOAT_1 ) & & ( b == FLOAT_1 ) ) & & ( ( TYPE_1 . METHOD_2 ( a ) ) == ( VAR_1 ) ) ) { return b ; } return a > = b ? a : b ; } } ; b : a ? b = > a return } ; b return { ) ) ) VAR_1 ( == ) ) a ( METHOD_2 . TYPE_1 ( ( & & ) ) FLOAT_1 == b ( & & ) FLOAT_1 == a ( ( ( if ; a return ) a = ! a ( if { ) b float , a float ( METHOD_1 float static public 
public static TYPE_1 [ ] METHOD_1 ( TYPE_2 [ ] VAR_1 ) throws TYPE_3 { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 p : VAR_1 ) { if ( ( p . METHOD_2 ( ) ) & & ( p . METHOD_3 ( VAR_3 ) ) ) { VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( p ) ) ; } } return VAR_2 . METHOD_6 ( new TYPE_1 [ VAR_2 . size ( ) ] ) ; } } ; ) ] ) ( size . VAR_2 [ TYPE_1 new ( METHOD_6 . VAR_2 return } } ; ) ) p ( METHOD_5 . TYPE_4 ( METHOD_4 . VAR_2 { ) ) ) VAR_3 ( METHOD_3 . p ( & & ) ) ( METHOD_2 . p ( ( if { ) VAR_1 : p TYPE_2 ( for ; ) ( > TYPE_1 < java.util.ArrayList new = VAR_2 > TYPE_1 < java.util.ArrayList { TYPE_3 throws ) VAR_1 ] [ TYPE_2 ( METHOD_1 ] [ TYPE_1 static public 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_2 ( ) ) ; VAR_3 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; VAR_6 = TYPE_3 . METHOD_3 ( VAR_7 , VAR_8 ) ; TYPE_4 < TYPE_5 > VAR_9 = TYPE_4 . METHOD_4 ( VAR_10 class ) ; org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_9 . METHOD_6 ( ) ) ; VAR_11 = VAR_9 . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . VAR_9 = VAR_11 ; ) ) ( METHOD_6 . VAR_9 ( METHOD_5 . ) VAR_2 ( org.mockito.Mockito.verify ; ) class VAR_10 ( METHOD_4 . TYPE_4 = VAR_9 > TYPE_5 < TYPE_4 ; ) VAR_8 , VAR_7 ( METHOD_3 . TYPE_3 = VAR_6 ; ) VAR_5 , VAR_4 ( METHOD_3 . TYPE_3 = VAR_3 ; ) ) ( METHOD_2 . TYPE_2 , VAR_2 ( TYPE_1 new = VAR_1 ; ) ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String VAR_1 , double ... VAR_2 ) throws java.lang.Throwable { METHOD_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( 10 , VAR_3 ) ) ; try { METHOD_6 ( VAR_2 ) ; } finally { METHOD_7 ( ) ; } } } } ; ) ( METHOD_7 { finally } ; ) VAR_2 ( METHOD_6 { try ; ) ) VAR_3 , 10 ( METHOD_5 . TYPE_2 ( METHOD_4 . TYPE_1 ; ) ( METHOD_3 ; ) STRING_2 ( METHOD_2 ; ) ) VAR_1 , STRING_1 ( java.lang.String.format ( METHOD_2 { java.lang.Throwable throws ) VAR_2 ... double , VAR_1 java.lang.String ( METHOD_1 void private 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { synchronized ( VAR_1 ) { final int VAR_2 = VAR_1 . size ( ) ; java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ; } return VAR_3 ; } } } } ; VAR_3 return } ; ) ) i ( METHOD_3 . VAR_1 ( METHOD_2 . VAR_3 { ) ++ i ; VAR_2 < i ; 0 = i int ( for ; ) VAR_2 ( > TYPE_1 < java.util.ArrayList new = VAR_3 > TYPE_1 < java.util.ArrayList ; ) ( size . VAR_1 = VAR_2 int final { ) VAR_1 ( synchronized { ) ( METHOD_1 > TYPE_1 < java.util.ArrayList public 
public synchronized boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) { METHOD_4 ( STRING_2 ) ; return false ; } METHOD_4 ( ( STRING_3 + VAR_1 ) ) ; VAR_6 = VAR_1 ; android.os.Message m = VAR_7 . METHOD_5 ( VAR_8 ) ; VAR_7 . METHOD_6 ( m ) ; return true ; } } ; true return ; ) m ( METHOD_6 . VAR_7 ; ) VAR_8 ( METHOD_5 . VAR_7 = m android.os.Message ; VAR_1 = VAR_6 ; ) ) VAR_1 + STRING_3 ( ( METHOD_4 } ; false return ; ) STRING_2 ( METHOD_4 { ) ) VAR_5 , VAR_4 ( METHOD_3 . VAR_3 ( if ; ) STRING_1 , VAR_2 ( METHOD_2 { ) VAR_1 boolean ( METHOD_1 boolean synchronized public 
private int METHOD_1 ( java.lang.Class < ? > VAR_1 , boolean VAR_2 ) throws java.io.IOException { output . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 . METHOD_4 ( ) ) { METHOD_5 ( VAR_1 , VAR_4 , VAR_2 ) ; } else { METHOD_6 ( VAR_4 , VAR_2 ) ; } int VAR_5 = METHOD_7 ( ) ; if ( ! VAR_2 ) { VAR_6 . METHOD_8 ( VAR_1 , VAR_5 ) ; } return VAR_5 ; } } ; VAR_5 return } ; ) VAR_5 , VAR_1 ( METHOD_8 . VAR_6 { ) VAR_2 ! ( if ; ) ( METHOD_7 = VAR_5 int } ; ) VAR_2 , VAR_4 ( METHOD_6 { else } ; ) VAR_2 , VAR_4 , VAR_1 ( METHOD_5 { ) ) ( METHOD_4 . VAR_4 ( if ; ) VAR_1 ( METHOD_3 . TYPE_1 = VAR_4 TYPE_1 ; ) VAR_3 ( METHOD_2 . output { java.io.IOException throws ) VAR_2 boolean , VAR_1 > ? < java.lang.Class ( METHOD_1 int private 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 item = VAR_2 . get ( VAR_1 ) ; if ( item == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return item . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . item return } ; ) STRING_2 ( java.lang.IllegalArgumentException new throw { ) null == item ( if ; ) VAR_1 ( get . VAR_2 = item TYPE_2 ; ) ( METHOD_2 } ; ) STRING_1 ( java.lang.NullPointerException new throw { ) null == VAR_1 ( if { ) VAR_1 TYPE_1 ( METHOD_1 int public 
public java.lang.Integer METHOD_1 ( ) { int n = number ; if ( n < = 1 ) return n ; TYPE_1 VAR_1 = new TYPE_1 ( ( n - 1 ) ) ; VAR_1 . METHOD_2 ( ) ; return ( new TYPE_1 ( ( n - 2 ) ) . METHOD_1 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . VAR_1 ( + ) ) ( METHOD_1 . ) ) 2 - n ( ( TYPE_1 new ( return ; ) ( METHOD_2 . VAR_1 ; ) ) 1 - n ( ( TYPE_1 new = VAR_1 TYPE_1 ; n return ) 1 = < n ( if ; number = n int { ) ( METHOD_1 java.lang.Integer public 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , ( ( VAR_1 . get ( INT_1 ) ) == ( VAR_2 [ INT_1 ] ) ) ) ; try { VAR_1 . get ( INT_2 ) ; fail ( STRING_2 ) ; } catch ( TYPE_1 e ) { } } } } { ) e TYPE_1 ( catch } ; ) STRING_2 ( fail ; ) INT_2 ( get . VAR_1 { try ; ) ) ) ] INT_1 [ VAR_2 ( == ) ) INT_1 ( get . VAR_1 ( ( , STRING_1 ( assertTrue { ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . d ( this , STRING_1 ) ; if ( ! ( METHOD_2 ( ) ) ) { final int VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 ! = ( VAR_3 ) ) { METHOD_4 ( VAR_2 ) ; } } } } } } ; ) VAR_2 ( METHOD_4 { ) ) VAR_3 ( = ! VAR_2 ( if ; ) VAR_1 ( METHOD_3 = VAR_2 int final { ) ) ) ( METHOD_2 ( ! ( if ; ) STRING_1 , this ( d . TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( byte [ ] name ) { TYPE_2 VAR_1 ; try { VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_3 VAR_2 ) { throw new TYPE_4 ( STRING_2 ) ; } byte [ ] VAR_3 = VAR_1 . METHOD_3 ( name ) ; VAR_3 [ 6 ] & = INT_1 ; VAR_3 [ 6 ] |= INT_2 ; VAR_3 [ 8 ] & = INT_3 ; VAR_3 [ 8 ] |= INT_4 ; return new TYPE_1 ( VAR_3 ) ; } } ; ) VAR_3 ( TYPE_1 new return ; INT_4 |= ] 8 [ VAR_3 ; INT_3 = & ] 8 [ VAR_3 ; INT_2 |= ] 6 [ VAR_3 ; INT_1 = & ] 6 [ VAR_3 ; ) name ( METHOD_3 . VAR_1 = VAR_3 ] [ byte } ; ) STRING_2 ( TYPE_4 new throw { ) VAR_2 TYPE_3 ( catch } ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 { try ; VAR_1 TYPE_2 { ) name ] [ byte ( METHOD_1 TYPE_1 static public 
private static int METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : return VAR_6 ; case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : return VAR_11 ; default : throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ( VAR_1 & - 1 ) ) ) ) ) ; } } } } ; ) ) ) ) ) 1 - & VAR_1 ( ( METHOD_2 . TYPE_1 ( + STRING_1 ( ( java.lang.IllegalArgumentException new throw : default ; VAR_11 return : VAR_10 case : VAR_9 case : VAR_8 case : VAR_7 case ; VAR_6 return : VAR_5 case : VAR_4 case : VAR_3 case : VAR_2 case { ) VAR_1 ( switch { ) VAR_1 int ( METHOD_1 int static private 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { assert ( VAR_3 ) ! = null ; try { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; try { VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( e ) ; } catch ( TYPE_6 e ) { throw new TYPE_5 ( e ) ; } } catch ( TYPE_7 e ) { } catch ( TYPE_8 e ) { throw new TYPE_3 ( e ) ; } } } } ; ) e ( TYPE_3 new throw { ) e TYPE_8 ( catch } { ) e TYPE_7 ( catch } } ; ) e ( TYPE_5 new throw { ) e TYPE_6 ( catch } ; ) e ( TYPE_5 new throw { ) e TYPE_4 ( catch } ; ) VAR_2 , VAR_1 ( METHOD_3 . VAR_3 { try ; ) VAR_2 , VAR_1 ( METHOD_2 . VAR_3 { try ; null = ! ) VAR_3 ( assert { TYPE_3 throws ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) ; assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) ; assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) ; assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) ; assertTrue ( STRING_5 , TYPE_1 . METHOD_2 ( CHAR_5 ) ) ; assertTrue ( STRING_6 , TYPE_1 . METHOD_2 ( CHAR_6 ) ) ; assertTrue ( STRING_7 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_7 ) ) ) ) ; } } ; ) ) ) ) CHAR_7 ( METHOD_2 . TYPE_1 ( ! ( , STRING_7 ( assertTrue ; ) ) CHAR_6 ( METHOD_2 . TYPE_1 , STRING_6 ( assertTrue ; ) ) CHAR_5 ( METHOD_2 . TYPE_1 , STRING_5 ( assertTrue ; ) ) CHAR_4 ( METHOD_2 . TYPE_1 , STRING_4 ( assertTrue ; ) ) CHAR_3 ( METHOD_2 . TYPE_1 , STRING_3 ( assertTrue ; ) ) CHAR_2 ( METHOD_2 . TYPE_1 , STRING_2 ( assertTrue ; ) ) CHAR_1 ( METHOD_2 . TYPE_1 , STRING_1 ( assertTrue { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this ) ; TYPE_2 context = METHOD_3 ( VAR_1 class ) ; when ( context . METHOD_4 ( VAR_2 ) ) . thenReturn ( VAR_3 ) ; METHOD_5 ( ) . when ( VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( VAR_4 . String class ) , VAR_5 . METHOD_10 ( ) , METHOD_9 ( VAR_6 class ) ) ; VAR_7 = new TYPE_3 ( context , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; } } ; ) VAR_13 , VAR_12 , VAR_11 , VAR_10 , VAR_9 , VAR_8 , context ( TYPE_3 new = VAR_7 ; ) ) class VAR_6 ( METHOD_9 , ) ( METHOD_10 . VAR_5 , ) class String . VAR_4 ( METHOD_9 , ) ( METHOD_8 , ) ( METHOD_7 ( METHOD_6 . ) VAR_3 ( when . ) ( METHOD_5 ; ) VAR_3 ( thenReturn . ) ) VAR_2 ( METHOD_4 . context ( when ; ) class VAR_1 ( METHOD_3 = context TYPE_2 ; ) this ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , boolean VAR_1 , int VAR_2 , byte [ ] VAR_3 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 , VAR_1 , device ( METHOD_1 . service return ; false return ) null == service ( if ; ) ( METHOD_3 = service TYPE_2 } ; false return ; ) STRING_1 , TAG . TYPE_2 ( android.util.Log.w { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) VAR_3 ] [ byte , VAR_2 int , VAR_1 boolean , device android.bluetooth.BluetoothDevice ( METHOD_1 boolean public 
static < TYPE_1 , TYPE_2 > java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( java.util.Set < TYPE_1 > set , TYPE_3 < ? super TYPE_1 , TYPE_2 > VAR_1 ) { if ( set instanceof TYPE_4 ) { return TYPE_5 . METHOD_1 ( ( ( TYPE_4 < TYPE_1 > ) ( set ) ) , VAR_1 ) ; } else { return new TYPE_6 < TYPE_1 , TYPE_2 > ( set , VAR_1 ) ; } } } } ; ) VAR_1 , set ( > TYPE_2 , TYPE_1 < TYPE_6 new return { else } ; ) VAR_1 , ) ) set ( ) > TYPE_1 < TYPE_4 ( ( ( METHOD_1 . TYPE_5 return { ) TYPE_4 instanceof set ( if { ) VAR_1 > TYPE_2 , TYPE_1 super ? < TYPE_3 , set > TYPE_1 < java.util.Set ( METHOD_1 > TYPE_2 , TYPE_1 < java.util.Map > TYPE_2 , TYPE_1 < static 
protected java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { final java.lang.String VAR_3 ; if ( VAR_1 == 16 ) { VAR_3 = STRING_1 ; } else { VAR_3 = STRING_2 ; } if ( VAR_2 == ( VAR_4 ) ) { return VAR_3 ; } else { return ( VAR_3 + STRING_3 ) + ( VAR_2 . toString ( ) . METHOD_2 ( VAR_5 ) ) ; } } } } ; ) ) VAR_5 ( METHOD_2 . ) ( toString . VAR_2 ( + ) STRING_3 + VAR_3 ( return { else } ; VAR_3 return { ) ) VAR_4 ( == VAR_2 ( if } ; STRING_2 = VAR_3 { else } ; STRING_1 = VAR_3 { ) 16 == VAR_1 ( if ; VAR_3 java.lang.String final { ) VAR_2 TYPE_1 , VAR_1 int ( METHOD_1 java.lang.String protected 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_4 type = VAR_1 . METHOD_4 ( ) ; TYPE_5 VAR_3 = TYPE_6 . METHOD_5 ( TYPE_3 . METHOD_6 ( type ) ) ; TYPE_7 VAR_4 = TYPE_3 . METHOD_7 ( VAR_1 ) ; TYPE_8 VAR_5 = new TYPE_9 ( VAR_3 , VAR_4 , VAR_6 , METHOD_8 ( ) , VAR_2 ) ; METHOD_9 ( VAR_5 ) ; METHOD_10 ( VAR_7 , VAR_4 ) ; return false ; } } ; false return ; ) VAR_4 , VAR_7 ( METHOD_10 ; ) VAR_5 ( METHOD_9 ; ) VAR_2 , ) ( METHOD_8 , VAR_6 , VAR_4 , VAR_3 ( TYPE_9 new = VAR_5 TYPE_8 ; ) VAR_1 ( METHOD_7 . TYPE_3 = VAR_4 TYPE_7 ; ) ) type ( METHOD_6 . TYPE_3 ( METHOD_5 . TYPE_6 = VAR_3 TYPE_5 ; ) ( METHOD_4 . VAR_1 = type TYPE_4 ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_3 = VAR_2 TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 boolean public 
private TYPE_1 METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_1 VAR_2 = VAR_3 . get ( ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . METHOD_2 ( ) ) ! = ( VAR_4 ) ) ) { TYPE_4 VAR_5 = VAR_6 . METHOD_1 ( VAR_4 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_2 = VAR_5 . METHOD_6 ( VAR_1 ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) VAR_1 ( METHOD_6 . VAR_5 = VAR_2 ; ) ) ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . VAR_1 , VAR_4 ( METHOD_1 . VAR_6 = VAR_5 TYPE_4 { ) ) ) VAR_4 ( = ! ) ) ( METHOD_2 . VAR_2 ( ( || ) null == VAR_2 ( ( if ; ) ( get . VAR_3 = VAR_2 TYPE_1 { java.io.IOException , TYPE_3 , TYPE_2 throws ) VAR_1 com.android.jack.ir.ast.JMethod ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_2 ! = null ) { TYPE_3 data = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( data ! = null ) { TYPE_4 VAR_3 = data . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; } } if ( ( ( VAR_5 ) ! = null ) & & ( VAR_5 . METHOD_7 ( ) ) ) { VAR_5 = null ; } } } } ; null = VAR_5 { ) ) ) ( METHOD_7 . VAR_5 ( & & ) null = ! ) VAR_5 ( ( ( if } } ; ) ) ( METHOD_6 . VAR_4 ( METHOD_5 . VAR_3 ; ) ( METHOD_4 . data = VAR_3 TYPE_4 { ) null = ! data ( if ; ) VAR_1 ( METHOD_3 . VAR_2 = data TYPE_3 { ) null = ! VAR_2 ( if ; ) ( METHOD_2 . TYPE_2 = VAR_2 TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 is , TYPE_2 VAR_1 , java.lang.String name ) { try { TYPE_3 VAR_2 = new TYPE_3 ( name ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( is , VAR_1 , name ) ; } catch ( java.lang.Exception e ) { throw new TYPE_4 ( ( STRING_1 + name ) , e ) ; } } } } ; ) e , ) name + STRING_1 ( ( TYPE_4 new throw { ) e java.lang.Exception ( catch } ; ) name , VAR_1 , is ( METHOD_3 ; ) VAR_2 ( METHOD_2 . VAR_1 ; ) name ( TYPE_3 new = VAR_2 TYPE_3 { try { ) name java.lang.String , VAR_1 TYPE_2 , is TYPE_1 ( METHOD_1 void private 
public static synchronized int METHOD_1 ( TYPE_1 provider , int VAR_1 ) { java.lang.String VAR_2 = provider . getName ( ) ; TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_2 ) ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( VAR_3 , provider , ( VAR_1 - 1 ) ) ; if ( VAR_3 == VAR_4 ) { return - 1 ; } TYPE_2 . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; return ( VAR_4 . METHOD_7 ( VAR_2 ) ) + 1 ; } } ; 1 + ) ) VAR_2 ( METHOD_7 . VAR_4 ( return ; ) VAR_4 ( METHOD_6 . TYPE_4 ; ) ( METHOD_5 . TYPE_2 } ; 1 - return { ) VAR_4 == VAR_3 ( if ; ) ) 1 - VAR_1 ( , provider , VAR_3 ( METHOD_4 . TYPE_3 = VAR_4 TYPE_3 ; ) ( METHOD_3 . TYPE_4 = VAR_3 TYPE_3 ; ) ) VAR_2 + STRING_1 ( ( METHOD_2 . TYPE_2 ; ) ( getName . provider = VAR_2 java.lang.String { ) VAR_1 int , provider TYPE_1 ( METHOD_1 int synchronized static public 
public void METHOD_1 ( int VAR_1 , int count , float [ ] d ) { int VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * count ; METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ; } } ; ) VAR_2 , d , count , VAR_4 , VAR_1 , ) ( METHOD_5 ( METHOD_4 . mRS ; ) VAR_2 , ) 4 * ) length . d ( ( , count , VAR_1 ( METHOD_3 ; count * ) ) ( METHOD_2 . VAR_3 ( = VAR_2 int { ) d ] [ float , count int , VAR_1 int ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( TYPE_2 is ) throws TYPE_3 { final TYPE_4 VAR_1 = new TYPE_4 ( is ) ; try { final long VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == INT_1 ) { return null ; } return new TYPE_1 ( VAR_2 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( e ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . VAR_1 { finally } ; ) e ( TYPE_3 new throw { ) e java.lang.Exception ( catch } ; ) VAR_2 ( TYPE_1 new return } ; null return { ) INT_1 == VAR_2 ( if ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_5 = VAR_2 long final { try ; ) is ( TYPE_4 new = VAR_1 TYPE_4 final { TYPE_3 throws ) is TYPE_2 ( METHOD_1 TYPE_1 static public 
void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String s = METHOD_2 ( VAR_1 , 10 ) ; this . METHOD_3 ( ) ; int VAR_2 = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ; TYPE_2 . METHOD_5 ( ( VAR_2 > 0 ) ) ; if ( VAR_2 < ( s . length ( ) ) ) { throw METHOD_6 ( VAR_1 ) ; } } } } ; ) VAR_1 ( METHOD_6 throw { ) ) ) ( length . s ( < VAR_2 ( if ; ) ) 0 > VAR_2 ( ( METHOD_5 . TYPE_2 ; ) s , VAR_3 . this ( METHOD_4 . TYPE_1 = VAR_2 int ; ) ( METHOD_3 . this ; ) 10 , VAR_1 ( METHOD_2 = s java.lang.String { ) VAR_1 java.lang.String ( METHOD_1 void 
public TYPE_1 METHOD_1 ( ) { try { android.os.Bundle VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 . METHOD_4 ( ) ) return null ; return VAR_2 ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } } } } ; null return { ) ex java.lang.NullPointerException ( catch } ; null return { ) ex android.os.RemoteException ( catch } ; VAR_2 return ; null return ) ) ( METHOD_4 . VAR_2 ( if ; ) VAR_1 ( METHOD_3 . TYPE_1 = VAR_2 TYPE_1 ; ) ( METHOD_1 . ) ( METHOD_2 = VAR_1 android.os.Bundle { try { ) ( METHOD_1 TYPE_1 public 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; } } ; ) VAR_6 , d , VAR_5 , h , w , VAR_4 , VAR_3 , VAR_2 , VAR_1 , id , mContext ( METHOD_3 ; ) ( METHOD_2 { ) VAR_6 int , d ] [ byte , VAR_5 int , h int , w int , VAR_4 int , VAR_3 int , VAR_2 int , VAR_1 int , id int ( METHOD_1 void synchronized 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) ( METHOD_6 . VAR_3 ( assertTrue ; ) VAR_1 ( METHOD_5 ; ) VAR_1 ( METHOD_4 ; ) VAR_1 ( METHOD_3 . VAR_2 ; ) ( > < java.util.ArrayList new = VAR_2 > TYPE_1 < java.util.List ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ! = null ) & & ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { if ( VAR_1 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( false , true ) ; } else { VAR_1 . METHOD_6 ( ) ; } } } ) ; } } } } ; ) } } } ; ) ( METHOD_6 . VAR_1 { else } ; ) true , false ( METHOD_5 . VAR_1 { ) ) ( METHOD_4 . VAR_1 ( if { ) ( run void public { ) ( java.lang.Runnable new ( METHOD_3 . VAR_2 { ) ) ) ( METHOD_2 . VAR_1 ( & & ) null = ! ) VAR_1 ( ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 device ) { if ( ! ( device . METHOD_2 ( VAR_1 ) ) ) return ; TYPE_2 VAR_2 = device . METHOD_3 ( ) ; try { for ( TYPE_3 listener : VAR_3 ) { listener . METHOD_4 ( VAR_2 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) ; } } } } ; ) e , STRING_1 , TAG . TYPE_4 ( android.util.Log.e { ) e android.os.RemoteException ( catch } } ; ) VAR_2 ( METHOD_4 . listener { ) VAR_3 : listener TYPE_3 ( for { try ; ) ( METHOD_3 . device = VAR_2 TYPE_2 ; return ) ) ) VAR_1 ( METHOD_2 . device ( ! ( if { ) device TYPE_1 ( METHOD_1 void public 
private final boolean METHOD_1 ( TYPE_1 uri , int uid , int VAR_1 ) { if ( ( uid == 0 ) || ( ! ( TYPE_2 . METHOD_2 ( ) ) ) ) { return true ; } java.util.HashMap < TYPE_1 , TYPE_3 > VAR_2 = VAR_3 . get ( uid ) ; if ( VAR_2 == null ) return false ; TYPE_3 VAR_4 = VAR_2 . get ( uri ) ; if ( VAR_4 == null ) return false ; return ( VAR_1 & ( VAR_5 ) ) == VAR_1 ; } } ; VAR_1 == ) ) VAR_5 ( & VAR_1 ( return ; false return ) null == VAR_4 ( if ; ) uri ( get . VAR_2 = VAR_4 TYPE_3 ; false return ) null == VAR_2 ( if ; ) uid ( get . VAR_3 = VAR_2 > TYPE_3 , TYPE_1 < java.util.HashMap } ; true return { ) ) ) ) ( METHOD_2 . TYPE_2 ( ! ( || ) 0 == uid ( ( if { ) VAR_1 int , uid int , uri TYPE_1 ( METHOD_1 boolean final private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ; } } ; ) STRING_4 ( METHOD_4 . ) ) STRING_4 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_4 ; ) STRING_3 ( METHOD_4 . ) ) STRING_2 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_4 ; ) ) ( of . TYPE_3 , ) ( of . TYPE_3 , ) ( of . TYPE_3 , null , null , ) STRING_1 ( TYPE_2 new ( TYPE_1 new = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr ! = null ) { java.lang.String ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = VAR_2 ; TYPE_3 . METHOD_3 ( VAR_5 , ret ) ; } VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) ; } } } } ; ) ret , VAR_1 , rr ( METHOD_4 . VAR_3 } ; ) ret , VAR_5 ( METHOD_3 . TYPE_3 ; VAR_2 = ret { ) ) VAR_4 ( == ) error . VAR_1 ( ( if ; null = ret java.lang.String { ) null = ! rr ( if ; ) VAR_1 ( METHOD_2 . VAR_3 = rr TYPE_2 { ) VAR_2 java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( TYPE_2 c ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , c . state , VAR_2 , VAR_3 , VAR_4 , VAR_1 . METHOD_3 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , false , false , 0 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; } } ; ) VAR_13 , VAR_12 , VAR_11 , VAR_10 , 0 , false , false , VAR_9 , VAR_8 , VAR_7 , VAR_6 , VAR_5 , ) ( METHOD_3 . VAR_1 , VAR_4 , VAR_3 , VAR_2 , state . c , ) ( METHOD_2 . VAR_1 ( TYPE_1 new return { ) c TYPE_2 ( METHOD_1 TYPE_1 private 
static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 device ) throws TYPE_3 , TYPE_4 , java.io.IOException { if ( device ! = null ) { java.lang.String msg = STRING_1 + ( device . METHOD_2 ( ) ) ; byte [ ] VAR_2 = TYPE_5 . METHOD_3 ( msg ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 ) ; TYPE_6 VAR_3 = TYPE_5 . METHOD_5 ( VAR_1 , false ) ; if ( ( VAR_4 ) == false ) { throw new TYPE_3 ( VAR_5 , true ) ; } } } } } } ; ) true , VAR_5 ( TYPE_3 new throw { ) false == ) VAR_4 ( ( if ; ) false , VAR_1 ( METHOD_5 . TYPE_5 = VAR_3 TYPE_6 ; ) VAR_2 , VAR_1 ( METHOD_4 . TYPE_5 ; ) msg ( METHOD_3 . TYPE_5 = VAR_2 ] [ byte ; ) ) ( METHOD_2 . device ( + STRING_1 = msg java.lang.String { ) null = ! device ( if { java.io.IOException , TYPE_4 , TYPE_3 throws ) device TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void static 
private void METHOD_1 ( final java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { VAR_3 = new TYPE_3 ( new TYPE_4 ( this ) , VAR_4 . value ( ) ) ; VAR_3 . start ( ) ; VAR_5 = new TYPE_5 ( ) ; if ( ( VAR_1 ! = null ) & & ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_2 ( VAR_1 , VAR_2 ) ; } else { for ( java.lang.String VAR_6 : METHOD_3 ( ) ) { METHOD_2 ( VAR_6 , VAR_2 ) ; } } } } } } ; ) VAR_2 , VAR_6 ( METHOD_2 { ) ) ( METHOD_3 : VAR_6 java.lang.String ( for { else } ; ) VAR_2 , VAR_1 ( METHOD_2 { ) ) 0 > ) ) ( length . VAR_1 ( ( & & ) null = ! VAR_1 ( ( if ; ) ( TYPE_5 new = VAR_5 ; ) ( start . VAR_3 ; ) ) ( value . VAR_4 , ) this ( TYPE_4 new ( TYPE_3 new = VAR_3 { TYPE_2 throws ) VAR_2 TYPE_1 , VAR_1 java.lang.String final ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr ! = null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } } } } ; ) ret , VAR_1 , rr ( METHOD_5 . VAR_3 } ; ) ret , VAR_5 ( METHOD_4 . TYPE_6 { ) ) VAR_4 ( == ) error . VAR_1 ( ( if ; ) VAR_2 ( METHOD_3 . TYPE_5 = ret TYPE_4 { ) null = ! rr ( if ; ) VAR_1 ( METHOD_2 . VAR_3 = rr TYPE_3 { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) ; assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . get ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( get . VAR_1 ( METHOD_5 ; ) ) VAR_2 ( METHOD_2 . VAR_1 ( assertTrue ; ) ) ) VAR_2 ( get . VAR_1 , VAR_4 ( equals . TYPE_1 ( assertTrue ; ) VAR_4 , VAR_2 ( METHOD_4 . VAR_1 ; ) ) VAR_2 ( METHOD_2 . VAR_1 ( assertTrue ; ) VAR_3 ( METHOD_3 . VAR_1 ; ) ) VAR_2 ( METHOD_2 . VAR_1 ( assertTrue { java.lang.Exception throws ) ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( int VAR_1 , int uid , java.lang.String VAR_2 , boolean VAR_3 , boolean VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { final TYPE_1 config = new TYPE_1 ( ) ; VAR_7 = VAR_2 ; VAR_8 = VAR_1 ; VAR_9 = uid ; VAR_10 = VAR_3 ; config . status = ( VAR_4 ) ? VAR_11 : VAR_12 ; if ( VAR_5 ! = null ) { VAR_13 = VAR_5 ; VAR_14 = VAR_6 ; VAR_15 . METHOD_2 ( VAR_16 ) ; } return config ; } } ; config return } ; ) VAR_16 ( METHOD_2 . VAR_15 ; VAR_6 = VAR_14 ; VAR_5 = VAR_13 { ) null = ! VAR_5 ( if ; VAR_12 : VAR_11 ? ) VAR_4 ( = status . config ; VAR_3 = VAR_10 ; uid = VAR_9 ; VAR_1 = VAR_8 ; VAR_2 = VAR_7 ; ) ( TYPE_1 new = config TYPE_1 final { ) VAR_6 java.lang.String , VAR_5 java.lang.String , VAR_4 boolean , VAR_3 boolean , VAR_2 java.lang.String , uid int , VAR_1 int ( METHOD_1 TYPE_1 static public 
private TYPE_1 METHOD_1 ( TYPE_2 p , TYPE_3 VAR_1 , TYPE_4 VAR_2 , byte a , byte VAR_3 ) { TYPE_3 [ ] VAR_4 ; if ( a == 0 ) { VAR_4 = VAR_5 ; } else { VAR_4 = VAR_6 ; } TYPE_5 VAR_7 = TYPE_6 . METHOD_2 ( VAR_3 , VAR_8 ) ; byte [ ] VAR_9 = TYPE_6 . METHOD_3 ( VAR_3 , VAR_1 , VAR_8 , TYPE_5 . METHOD_4 ( VAR_10 ) , VAR_7 , VAR_4 ) ; return TYPE_7 . METHOD_5 ( p , VAR_9 , VAR_2 ) ; } } ; ) VAR_2 , VAR_9 , p ( METHOD_5 . TYPE_7 return ; ) VAR_4 , VAR_7 , ) VAR_10 ( METHOD_4 . TYPE_5 , VAR_8 , VAR_1 , VAR_3 ( METHOD_3 . TYPE_6 = VAR_9 ] [ byte ; ) VAR_8 , VAR_3 ( METHOD_2 . TYPE_6 = VAR_7 TYPE_5 } ; VAR_6 = VAR_4 { else } ; VAR_5 = VAR_4 { ) 0 == a ( if ; VAR_4 ] [ TYPE_3 { ) VAR_3 byte , a byte , VAR_2 TYPE_4 , VAR_1 TYPE_3 , p TYPE_2 ( METHOD_1 TYPE_1 private 
public int [ ] METHOD_1 ( int [ ] src , int [ ] VAR_1 ) { return new int [ ] { src [ 0 ] , VAR_1 [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; } } ; } ) ) ) ] 3 [ VAR_1 ( + ) ] 3 [ src ( ( , INT_1 ( METHOD_2 . TYPE_1 , ] 2 [ VAR_1 , ] 1 [ VAR_1 , ] 0 [ src { ] [ int new return { ) VAR_1 ] [ int , src ] [ int ( METHOD_1 ] [ int public 
static int METHOD_1 ( int [ ] a , int VAR_1 ) { int x = 0 ; for ( int i = TYPE_1 . METHOD_2 ( VAR_1 ) ; i < ( a . length ) ; i ++ ) { x += a [ i ] ; } return x ; } } ; x return } ; ] i [ a += x { ) ++ i ; ) length . a ( < i ; ) VAR_1 ( METHOD_2 . TYPE_1 = i int ( for ; 0 = x int { ) VAR_1 int , a ] [ int ( METHOD_1 int static 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } METHOD_7 ( method ) ; VAR_2 . METHOD_8 ( method ) ; } } ; ) method ( METHOD_8 . VAR_2 ; ) method ( METHOD_7 } ; return { ) ) ) ) method , ) ( METHOD_6 . this ( METHOD_5 . VAR_1 ( ! ( || ) ) ) ( METHOD_4 . method ( || ) ) ) ( METHOD_3 . method ( || ) ) ( METHOD_2 . ) ( METHOD_1 . method ( ( ( ( if { java.lang.Exception throws ) method com.android.jack.ir.ast.JMethod ( run void public 
public void METHOD_1 ( ) { assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ; assertEquals ( VAR_2 . METHOD_2 ( ) , STRING_2 ) ; assertEquals ( VAR_3 . METHOD_2 ( ) , STRING_3 ) ; assertEquals ( VAR_4 . METHOD_2 ( ) , STRING_4 ) ; assertEquals ( VAR_5 . METHOD_2 ( ) , STRING_5 ) ; } } ; ) STRING_5 , ) ( METHOD_2 . VAR_5 ( assertEquals ; ) STRING_4 , ) ( METHOD_2 . VAR_4 ( assertEquals ; ) STRING_3 , ) ( METHOD_2 . VAR_3 ( assertEquals ; ) STRING_2 , ) ( METHOD_2 . VAR_2 ( assertEquals ; ) STRING_1 , ) ( METHOD_2 . VAR_1 ( assertEquals { ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { if ( VAR_1 ) log ( STRING_1 ) ; if ( ( VAR_2 ) == false ) return ; if ( ( METHOD_2 ( ) ) == false ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_3 ) ; } else { METHOD_5 ( VAR_3 ) ; } } } } ; ) VAR_3 ( METHOD_5 { else } ; ) VAR_3 ( METHOD_4 ; ) VAR_3 ( METHOD_3 { ) false == ) ) ( METHOD_2 ( ( if ; return ) false == ) VAR_2 ( ( if ; ) STRING_1 ( log ) VAR_1 ( if { ) ( METHOD_1 void protected 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { try { TYPE_4 VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_5 VAR_3 = TYPE_5 . METHOD_1 ( TYPE_6 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , VAR_1 . METHOD_5 ( ) ) ; return new TYPE_1 ( TYPE_6 . METHOD_6 ( VAR_2 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , null ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( e ) ; } } } } ; ) e ( TYPE_3 new throw { ) e java.lang.Exception ( catch } ; ) ) null , ) ( METHOD_4 . VAR_3 , ) ( METHOD_4 . VAR_2 ( METHOD_6 . TYPE_6 ( TYPE_1 new return ; ) ) ( METHOD_5 . VAR_1 , VAR_2 , ) ) ( METHOD_4 . VAR_2 ( METHOD_3 . TYPE_6 ( METHOD_1 . TYPE_5 = VAR_3 TYPE_5 ; ) ) ( METHOD_2 . VAR_1 ( METHOD_1 . TYPE_4 = VAR_2 TYPE_4 { try { TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static public 
public java.lang.String METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { return VAR_3 ; } return new java.lang.StringBuilder ( ) . append ( ( ( METHOD_3 ( ) ) ! = null ? METHOD_3 ( ) . print ( VAR_1 ) : STRING_1 ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_4 ( ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_5 ( ) ) . toString ( ) ; } } ; ) ( toString . ) ) ( METHOD_5 . VAR_2 ( append . ) STRING_2 ( append . ) ) ( METHOD_4 . VAR_2 ( append . ) STRING_2 ( append . ) ) STRING_1 : ) VAR_1 ( print . ) ( METHOD_3 ? null = ! ) ) ( METHOD_3 ( ( ( append . ) ( java.lang.StringBuilder new return } ; VAR_3 return { ) null == VAR_2 ( if ; ) ( METHOD_2 = VAR_2 TYPE_1 { ) VAR_1 boolean ( METHOD_1 java.lang.String public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) & & ( VAR_2 ! = ( VAR_4 ) ) ) { return VAR_5 ; } if ( ( VAR_6 . METHOD_3 ( ) ) & & ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) < 0 ) ) { VAR_2 = VAR_8 ; } if ( ( VAR_6 . METHOD_5 ( ) ) & & ( VAR_2 == ( VAR_9 ) ) ) { VAR_2 = VAR_5 ; } return VAR_2 ; } } ; VAR_2 return } ; VAR_5 = VAR_2 { ) ) ) VAR_9 ( == VAR_2 ( & & ) ) ( METHOD_5 . VAR_6 ( ( if } ; VAR_8 = VAR_2 { ) ) 0 < ) ) VAR_7 ( METHOD_4 . VAR_2 ( ( & & ) ) ( METHOD_3 . VAR_6 ( ( if } ; VAR_5 return { ) ) ) VAR_4 ( = ! VAR_2 ( & & ) VAR_3 ( ( if ; ) VAR_1 ( METHOD_2 = VAR_2 TYPE_1 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 m = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( m . METHOD_3 ( ) ) { java.lang.String v = m . METHOD_4 ( 1 ) ; int VAR_3 = - 1 ; try { VAR_3 = java.lang.Integer.parseInt ( v ) ; } catch ( TYPE_3 e ) { return null ; } TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 ) ; return VAR_4 ; } return null ; } } ; null return } ; VAR_4 return ; ) VAR_3 ( TYPE_1 new = VAR_4 TYPE_1 } ; null return { ) e TYPE_3 ( catch } ; ) v ( java.lang.Integer.parseInt = VAR_3 { try ; 1 - = VAR_3 int ; ) 1 ( METHOD_4 . m = v java.lang.String { ) ) ( METHOD_3 . m ( if ; ) VAR_1 ( METHOD_2 . VAR_2 = m TYPE_2 { ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( int VAR_1 , int count , byte [ ] d ) { int VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * count ; METHOD_3 ( VAR_1 , count , d . length , VAR_2 ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ; } } ; ) VAR_2 , d , count , VAR_4 , VAR_1 , ) ( METHOD_5 ( METHOD_4 . mRS ; ) VAR_2 , length . d , count , VAR_1 ( METHOD_3 ; count * ) ) ( METHOD_2 . VAR_3 ( = VAR_2 int { ) d ] [ byte , count int , VAR_1 int ( METHOD_1 void public 
private void METHOD_1 ( int VAR_1 ) { int VAR_2 = java.util.HashMap . METHOD_2 ( VAR_1 ) ; float VAR_3 = VAR_2 * ( VAR_4 ) ; if ( VAR_3 > ( ( VAR_5 ) + 1 ) ) { VAR_3 = ( VAR_5 ) + 1 ; } VAR_6 = ( ( int ) ( VAR_3 ) ) ; VAR_7 = new TYPE_1 [ VAR_2 ] ; METHOD_3 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_3 ; ] VAR_2 [ TYPE_1 new = VAR_7 ; ) ) VAR_3 ( ) int ( ( = VAR_6 } ; 1 + ) VAR_5 ( = VAR_3 { ) ) 1 + ) VAR_5 ( ( > VAR_3 ( if ; ) VAR_4 ( * VAR_2 = VAR_3 float ; ) VAR_1 ( METHOD_2 . java.util.HashMap = VAR_2 int { ) VAR_1 int ( METHOD_1 void private 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , TYPE_1 VAR_6 , TYPE_1 VAR_7 , java.lang.String VAR_8 ) { TYPE_2 VAR_9 = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; try { VAR_9 . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } } } ; ) e ( java.lang.RuntimeException new throw { ) e java.io.IOException ( catch } ; ) ( METHOD_2 . VAR_9 { try ; ) VAR_7 , VAR_6 , VAR_5 , VAR_4 , VAR_3 , VAR_2 , VAR_1 , VAR_8 ( TYPE_2 new = VAR_9 TYPE_2 { ) VAR_8 java.lang.String , VAR_7 TYPE_1 , VAR_6 TYPE_1 , VAR_5 java.lang.String , VAR_4 java.lang.String , VAR_3 int , VAR_2 int , VAR_1 java.lang.String ( METHOD_1 void private 
public static TYPE_1 METHOD_1 ( java.lang.String path ) throws TYPE_2 { TYPE_3 fd = VAR_1 . METHOD_2 ( path , VAR_2 , 0 ) ; long size = VAR_1 . METHOD_3 ( fd ) . VAR_3 ; long address = VAR_1 . METHOD_4 ( INT_1 , size , VAR_4 , VAR_5 , fd , 0 ) ; VAR_1 . METHOD_5 ( fd ) ; return new TYPE_1 ( address , size ) ; } } ; ) size , address ( TYPE_1 new return ; ) fd ( METHOD_5 . VAR_1 ; ) 0 , fd , VAR_5 , VAR_4 , size , INT_1 ( METHOD_4 . VAR_1 = address long ; VAR_3 . ) fd ( METHOD_3 . VAR_1 = size long ; ) 0 , VAR_2 , path ( METHOD_2 . VAR_1 = fd TYPE_3 { TYPE_2 throws ) path java.lang.String ( METHOD_1 TYPE_1 static public 
private static java.util.Set < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.util.Set < java.lang.String > VAR_4 = new TYPE_4 < java.lang.String > ( ) ; if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { VAR_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_1 , VAR_5 ) ) ; } else { VAR_4 . METHOD_3 ( TYPE_5 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_3 ) ) ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) ) ) VAR_3 ( METHOD_6 . VAR_2 ( METHOD_5 . TYPE_5 ( METHOD_3 . VAR_4 { else } ; ) ) VAR_5 , VAR_1 ( METHOD_4 . TYPE_5 ( METHOD_3 . VAR_4 { ) ) VAR_3 ( METHOD_2 . VAR_2 ( if ; ) ( > java.lang.String < TYPE_4 new = VAR_4 > java.lang.String < java.util.Set { ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 > TYPE_1 < java.util.List ( METHOD_1 > java.lang.String < java.util.Set static private 
void METHOD_1 ( ) { try { int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_1 > 0 ) { VAR_4 = VAR_5 ; } else if ( VAR_1 == 0 ) { VAR_4 = VAR_6 ; } else { VAR_4 = VAR_7 ; } } catch ( android.os.RemoteException e ) { } } } } { ) e android.os.RemoteException ( catch } } ; VAR_7 = VAR_4 { else } ; VAR_6 = VAR_4 { ) 0 == VAR_1 ( if else } ; VAR_5 = VAR_4 { ) 0 > VAR_1 ( if ; ) VAR_3 ( METHOD_2 . VAR_2 = VAR_1 int { try { ) ( METHOD_1 void 
public static void METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_4 VAR_4 = VAR_1 . METHOD_3 ( STRING_1 ) ; if ( VAR_4 ! = null ) { VAR_3 . METHOD_4 ( VAR_4 ) ; } VAR_3 . METHOD_5 ( null ) ; final TYPE_5 VAR_5 = TYPE_5 . METHOD_6 ( VAR_2 ) ; VAR_5 . METHOD_7 ( VAR_3 , STRING_1 ) ; } } ; ) STRING_1 , VAR_3 ( METHOD_7 . VAR_5 ; ) VAR_2 ( METHOD_6 . TYPE_5 = VAR_5 TYPE_5 final ; ) null ( METHOD_5 . VAR_3 } ; ) VAR_4 ( METHOD_4 . VAR_3 { ) null = ! VAR_4 ( if ; ) STRING_1 ( METHOD_3 . VAR_1 = VAR_4 TYPE_4 final ; ) ( METHOD_2 . VAR_1 = VAR_3 TYPE_3 final { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 ( METHOD_1 void static public 
public boolean METHOD_1 ( int VAR_1 ) { boolean VAR_2 = false ; VAR_3 = VAR_1 ; if ( ! ( VAR_4 ) ) { METHOD_2 ( ) ; if ( VAR_5 ) TYPE_1 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) ; VAR_7 . METHOD_3 ( ) . METHOD_4 ( this ) ; if ( ( VAR_8 ) ! = null ) { VAR_2 = VAR_8 . METHOD_5 ( this ) ; } VAR_9 = null ; } METHOD_6 ( ) ; METHOD_7 ( ) ; return VAR_2 ; } } ; VAR_2 return ; ) ( METHOD_7 ; ) ( METHOD_6 } ; null = VAR_9 } ; ) this ( METHOD_5 . VAR_8 = VAR_2 { ) null = ! ) VAR_8 ( ( if ; ) this ( METHOD_4 . ) ( METHOD_3 . VAR_7 ; ) ) VAR_1 + STRING_1 ( , VAR_6 ( d . TYPE_1 ) VAR_5 ( if ; ) ( METHOD_2 { ) ) VAR_4 ( ! ( if ; VAR_1 = VAR_3 ; false = VAR_2 boolean { ) VAR_1 int ( METHOD_1 boolean public 
protected void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { if ( ( VAR_2 ! = null ) & & ( ( VAR_4 ) ! = ( VAR_5 ) ) ) { throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; } METHOD_3 ( VAR_1 , key ) ; } } ; ) key , VAR_1 ( METHOD_3 } ; ) ) ) ) ( getName . ) ( METHOD_2 . VAR_2 ( + STRING_1 ( ( TYPE_4 new throw { ) ) ) VAR_5 ( = ! ) VAR_4 ( ( & & ) null = ! VAR_2 ( ( if { TYPE_5 , TYPE_4 throws ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , key TYPE_1 , VAR_1 int ( METHOD_1 void protected 
static void METHOD_1 ( int VAR_1 , int r , int VAR_2 , int b ) { TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( - INT_1 | ( r < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) ; } } ; ) VAR_3 , ) ) INT_2 & b ( | ) ) 8 < < ) INT_2 & VAR_2 ( ( | ) ) 16 < < r ( | INT_1 - ( ( ( , VAR_1 ( METHOD_2 . TYPE_1 { ) b int , VAR_2 int , r int , VAR_1 int ( METHOD_1 void static 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e ) { if ( ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) & & ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } int id = VAR_1 . METHOD_5 ( 5 , e . METHOD_6 ( VAR_1 ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( id , VAR_1 ) ; VAR_2 . METHOD_7 ( FLOAT_1 ) ; return VAR_2 ; } } ; VAR_2 return ; ) FLOAT_1 ( METHOD_7 . VAR_2 ; ) VAR_1 , id ( TYPE_1 new = VAR_2 TYPE_1 ; ) ) VAR_1 ( METHOD_6 . e , 5 ( METHOD_5 . VAR_1 = id int } ; ) STRING_1 ( TYPE_4 new throw { ) ) ) ) ) VAR_1 ( METHOD_4 . TYPE_3 ( METHOD_2 . e ( ! ( & & ) ) ) ) VAR_1 ( METHOD_3 . TYPE_3 ( METHOD_2 . e ( ! ( ( if { ) e TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . build ( ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( VAR_4 ) ) ; VAR_2 . METHOD_2 ( STRING_2 , VAR_5 , TYPE_3 . METHOD_3 ( VAR_6 ) ) ; VAR_2 . METHOD_2 ( STRING_3 , 0 , TYPE_3 . METHOD_3 ( VAR_7 ) ) ; VAR_2 . METHOD_2 ( STRING_4 , false , TYPE_3 . METHOD_3 ( VAR_8 ) ) ; VAR_2 . METHOD_2 ( STRING_5 , false , TYPE_3 . METHOD_3 ( VAR_9 ) ) ; } } ; ) ) VAR_9 ( METHOD_3 . TYPE_3 , false , STRING_5 ( METHOD_2 . VAR_2 ; ) ) VAR_8 ( METHOD_3 . TYPE_3 , false , STRING_4 ( METHOD_2 . VAR_2 ; ) ) VAR_7 ( METHOD_3 . TYPE_3 , 0 , STRING_3 ( METHOD_2 . VAR_2 ; ) ) VAR_6 ( METHOD_3 . TYPE_3 , VAR_5 , STRING_2 ( METHOD_2 . VAR_2 ; ) ) VAR_4 ( METHOD_3 . TYPE_3 , VAR_3 , STRING_1 ( METHOD_2 . VAR_2 ; ) ( build . ) ( TYPE_2 new = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
void METHOD_1 ( java.lang.String [ ] expected , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; assertEquals ( expected . length , VAR_2 . length ) ; for ( int i = 0 ; i < ( expected . length ) ; ++ i ) { assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ; } } } } ; ) ] i [ VAR_2 , ] i [ expected , ) i + STRING_1 ( ( assertEquals { ) i ++ ; ) length . expected ( < i ; 0 = i int ( for ; ) length . VAR_2 , length . expected ( assertEquals ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_1 = VAR_2 ] [ java.lang.String { ) VAR_1 java.lang.String , expected ] [ java.lang.String ( METHOD_1 void 
public void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = METHOD_2 ( STRING_1 ) ; s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , true ) ; assertTrue ( STRING_2 , ( ( s . METHOD_5 ( ) ) == VAR_1 ) ) ; s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , false ) ; } } ; ) false , VAR_1 , ) ( METHOD_4 . ) ( METHOD_3 . TYPE_2 ( TYPE_1 new = s ; ) ) VAR_1 == ) ) ( METHOD_5 . s ( ( , STRING_2 ( assertTrue ; ) true , VAR_1 , ) ( METHOD_4 . ) ( METHOD_3 . TYPE_2 ( TYPE_1 new = s ; ) STRING_1 ( METHOD_2 = VAR_1 int { java.io.IOException throws ) ( METHOD_1 void public 
public final java.lang.String METHOD_1 ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; boolean VAR_1 = true ; sb.append ( STRING_1 ) ; for ( TYPE_2 i : VAR_2 ) { if ( VAR_1 ) { VAR_1 = false ; } else { sb.append ( STRING_2 ) ; } sb.append ( i . METHOD_1 ( ) ) ; } sb.append ( STRING_3 ) ; return sb . toString ( ) ; } } ; ) ( toString . sb return ; ) STRING_3 ( sb.append } ; ) ) ( METHOD_1 . i ( sb.append } ; ) STRING_2 ( sb.append { else } ; false = VAR_1 { ) VAR_1 ( if { ) VAR_2 : i TYPE_2 ( for ; ) STRING_1 ( sb.append ; true = VAR_1 boolean ; ) 100 ( TYPE_1 new = sb TYPE_1 { ) ( METHOD_1 java.lang.String final public 
protected com.android.jack.ir.ast.JDefinedClassOrInterface METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { assert ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; for ( TYPE_2 VAR_3 : VAR_4 ) { try { return VAR_3 . METHOD_1 ( this , VAR_1 ) ; } catch ( TYPE_3 e ) { } } throw new TYPE_4 ( this , VAR_1 ) ; } } ; ) VAR_1 , this ( TYPE_4 new throw } } { ) e TYPE_3 ( catch } ; ) VAR_1 , this ( METHOD_1 . VAR_3 return { try { ) VAR_4 : VAR_3 TYPE_2 ( for ; ) ) VAR_1 ( METHOD_2 . VAR_2 ( ! assert { TYPE_1 throws ) VAR_1 java.lang.String ( METHOD_1 com.android.jack.ir.ast.JDefinedClassOrInterface protected 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , true ) ; } } ; ) true , offset , ) ( METHOD_5 . this , ) ( METHOD_4 . this , ) ( METHOD_3 . this , ) ( METHOD_2 . this , VAR_2 ( TYPE_3 new return } ; ) STRING_1 ( TYPE_2 new throw { ) ) VAR_1 ( ! ( if { ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) ; VAR_2 . METHOD_5 ( false ) ; int VAR_3 = VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( VAR_4 ) ; int VAR_5 = VAR_2 . METHOD_6 ( ) ; assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) ; } } ; ) VAR_5 , ) 2 * VAR_3 ( ( assertEquals ; ) ( METHOD_6 . VAR_2 = VAR_5 int ; ) VAR_4 ( METHOD_7 . VAR_2 ; ) ( METHOD_6 . VAR_2 = VAR_3 int ; ) false ( METHOD_5 . VAR_2 ; ) null ( thenReturn . ) ) ) ( METHOD_4 , ) ( METHOD_4 , ) ( METHOD_4 , ) ( METHOD_3 ( METHOD_2 . VAR_1 ( when { ) ( METHOD_1 void public 
void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( METHOD_2 ( VAR_1 ) ) == ( VAR_3 ) ) { return ; } java.lang.String msg = ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( TYPE_1 . METHOD_3 ( ) ) ) + STRING_3 ) + ( TYPE_1 . METHOD_4 ( ) ) ) + STRING_4 ) + VAR_1 ; android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , msg ) ; throw new TYPE_2 ( msg ) ; } } ; ) msg ( TYPE_2 new throw ; ) msg , com.android.server.am.ActivityManagerService.TAG ( android.util.Log.w ; VAR_1 + ) STRING_4 + ) ) ) ( METHOD_4 . TYPE_1 ( + ) STRING_3 + ) ) ) ( METHOD_3 . TYPE_1 ( + ) STRING_2 + ) VAR_2 + STRING_1 ( ( ( ( ( ( = msg java.lang.String } ; return { ) ) VAR_3 ( == ) ) VAR_1 ( METHOD_2 ( ( if { ) VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void 
private int METHOD_1 ( ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : return VAR_8 ; case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; case VAR_20 : return VAR_21 ; default : return VAR_22 ; } } } } ; VAR_22 return : default ; VAR_21 return : VAR_20 case ; VAR_19 return : VAR_18 case ; VAR_17 return : VAR_16 case ; VAR_15 return : VAR_14 case ; VAR_13 return : VAR_12 case : VAR_11 case : VAR_10 case : VAR_9 case ; VAR_8 return : VAR_7 case : VAR_6 case : VAR_5 case : VAR_4 case ; VAR_3 return : VAR_2 case { ) VAR_1 ( switch { ) ( METHOD_1 int private 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_2 ( STRING_2 ) ; assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) ; VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 2 ) ; VAR_3 . METHOD_5 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) ; } } ; ) 0 , ) ( size . ) ( METHOD_2 . VAR_3 ( assertEquals ; ) ) VAR_2 , VAR_1 ( METHOD_4 . TYPE_3 ( METHOD_5 . VAR_3 ; ) 2 , ) ( size . ) ( METHOD_2 . VAR_3 ( assertEquals ; ) ) VAR_2 , VAR_1 ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_3 ; ) 0 , ) ( size . ) ( METHOD_2 . VAR_3 ( assertEquals ; ) STRING_2 ( TYPE_2 new = VAR_2 TYPE_1 ; ) STRING_1 ( TYPE_2 new = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; while ( ! ( VAR_1 . METHOD_2 ( true , false ) ) ) ; assertFalse ( VAR_1 . get ( ) ) ; while ( ! ( VAR_1 . METHOD_2 ( false , false ) ) ) ; assertFalse ( VAR_1 . get ( ) ) ; while ( ! ( VAR_1 . METHOD_2 ( false , true ) ) ) ; assertTrue ( VAR_1 . get ( ) ) ; } } ; ) ) ( get . VAR_1 ( assertTrue ; ) ) ) true , false ( METHOD_2 . VAR_1 ( ! ( while ; ) ) ( get . VAR_1 ( assertFalse ; ) ) ) false , false ( METHOD_2 . VAR_1 ( ! ( while ; ) ) ( get . VAR_1 ( assertFalse ; ) ) ) false , true ( METHOD_2 . VAR_1 ( ! ( while ; ) true ( TYPE_1 new = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , false ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , false ) ; assertEquals ( VAR_1 , VAR_3 ) ; VAR_3 = new TYPE_1 ( VAR_2 , true ) ; assertFalse ( VAR_1 . equals ( VAR_3 ) ) ; VAR_3 = new TYPE_1 ( VAR_4 , false ) ; assertFalse ( VAR_1 . equals ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( equals . VAR_1 ( assertFalse ; ) false , VAR_4 ( TYPE_1 new = VAR_3 ; ) ) VAR_3 ( equals . VAR_1 ( assertFalse ; ) true , VAR_2 ( TYPE_1 new = VAR_3 ; ) VAR_3 , VAR_1 ( assertEquals ; ) false , VAR_2 ( TYPE_1 new = VAR_3 TYPE_1 ; ) false , VAR_2 ( TYPE_1 new = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } try { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } catch ( java.io.IOException e ) { android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) ; } VAR_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) VAR_5 ( METHOD_3 . VAR_4 } ; ) ) ) ) ( e.toString ( + STRING_1 ( , TAG . VAR_3 ( android.util.Log.e { ) e java.io.IOException ( catch } ; null = VAR_2 ; ) ( METHOD_2 . VAR_2 { try } ; null = VAR_1 ; ) ( METHOD_2 . VAR_1 { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 { final int VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; args . METHOD_2 ( STRING_2 , VAR_2 ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 , true ) ; TYPE_4 . METHOD_6 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_6 . TYPE_4 ; ) true , VAR_4 , VAR_1 ( METHOD_5 . ) VAR_3 ( org.mockito.Mockito.verify ; ) ) ( toString . ) args ( METHOD_4 . TYPE_3 ( METHOD_3 . TYPE_2 ; ) VAR_2 , STRING_2 ( METHOD_2 . args ; ) VAR_1 , STRING_1 ( METHOD_2 . args ; ) ( android.os.Bundle new = args android.os.Bundle ; INT_1 = VAR_1 int final { TYPE_1 throws ) ( METHOD_1 void public 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( ! ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; } if ( ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) ) 1 - ) ) ( length . VAR_2 ( ( , 1 ( METHOD_5 . VAR_2 = VAR_1 { else } ; VAR_2 = VAR_1 { ) CHAR_1 == ) ) 0 ( METHOD_4 . VAR_2 ( ( if } ; ) ) ) VAR_2 ( + STRING_1 ( ( java.lang.IllegalArgumentException new throw { ) ) ) ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ! ( if { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 java.lang.String public 
public static void METHOD_1 ( int VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_3 ( ) ; if ( VAR_4 ) { VAR_3 . METHOD_4 ( VAR_1 , false ) ; } else { VAR_3 . METHOD_4 ( VAR_1 ) ; } } catch ( java.lang.Throwable e ) { throw TYPE_3 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . VAR_2 { finally } ; ) e ( METHOD_5 . TYPE_3 throw { ) e java.lang.Throwable ( catch } } ; ) VAR_1 ( METHOD_4 . VAR_3 { else } ; ) false , VAR_1 ( METHOD_4 . VAR_3 { ) VAR_4 ( if ; ) ( METHOD_3 . TYPE_2 = VAR_3 TYPE_1 ; ) ( METHOD_2 . VAR_2 { try { ) VAR_1 int ( METHOD_1 void static public 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( this ) ; VAR_2 . METHOD_4 ( this ) ; } if ( ( VAR_3 ) ! = null ) { VAR_1 . METHOD_5 ( VAR_3 ) ; } VAR_1 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) ! = null ) { VAR_1 . METHOD_5 ( VAR_5 ) ; } VAR_6 . METHOD_6 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_6 . VAR_6 } ; ) VAR_5 ( METHOD_5 . VAR_1 { ) null = ! ) VAR_5 ( ( if ; ) VAR_4 ( METHOD_5 . VAR_1 } ; ) VAR_3 ( METHOD_5 . VAR_1 { ) null = ! ) VAR_3 ( ( if } ; ) this ( METHOD_4 . VAR_2 ; ) this ( METHOD_3 . VAR_2 { ) ) ( METHOD_2 . VAR_1 ( if { ) VAR_1 TYPE_1 ( METHOD_1 void protected 
private void METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( true ) ; break ; case VAR_5 : VAR_3 . METHOD_2 ( VAR_6 ) ; VAR_3 . METHOD_3 ( true ) ; break ; case VAR_7 : VAR_3 . METHOD_2 ( VAR_8 ) ; VAR_3 . METHOD_3 ( true ) ; break ; default : VAR_3 . METHOD_2 ( null ) ; VAR_3 . METHOD_3 ( false ) ; break ; } } } } ; break ; ) false ( METHOD_3 . VAR_3 ; ) null ( METHOD_2 . VAR_3 : default ; break ; ) true ( METHOD_3 . VAR_3 ; ) VAR_8 ( METHOD_2 . VAR_3 : VAR_7 case ; break ; ) true ( METHOD_3 . VAR_3 ; ) VAR_6 ( METHOD_2 . VAR_3 : VAR_5 case ; break ; ) true ( METHOD_3 . VAR_3 ; ) VAR_4 ( METHOD_2 . VAR_3 : VAR_2 case { ) VAR_1 ( switch { ) VAR_1 int ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this ) ; VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 class ) ; TYPE_2 . METHOD_4 ( VAR_2 class ) ; TYPE_2 . METHOD_5 ( VAR_2 class , VAR_3 ) ; TYPE_3 . when ( mContext . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_5 ) ; TYPE_3 . when ( mContext . METHOD_6 ( VAR_6 ) ) . thenReturn ( VAR_7 ) ; } } ; ) VAR_7 ( thenReturn . ) ) VAR_6 ( METHOD_6 . mContext ( when . TYPE_3 ; ) VAR_5 ( thenReturn . ) ) VAR_4 ( METHOD_6 . mContext ( when . TYPE_3 ; ) VAR_3 , class VAR_2 ( METHOD_5 . TYPE_2 ; ) class VAR_2 ( METHOD_4 . TYPE_2 ; ) class VAR_2 ( METHOD_3 . TYPE_2 = VAR_1 ; ) this ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return false ; } if ( ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ) { return false ; } TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; return ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ; } } ; ) VAR_3 ( == ) ) ( METHOD_3 . VAR_2 ( return ; ) VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 } ; false return { ) 0 == ) ) ( length . ) ( METHOD_2 . VAR_1 ( ( if } ; false return { ) null == VAR_1 ( if { ) VAR_1 java.lang.String ( METHOD_1 boolean private 
private static TYPE_1 METHOD_1 ( ) { for ( TYPE_2 VAR_1 : TYPE_3 . METHOD_2 ( ) ) { TYPE_1 project = VAR_1 . METHOD_3 ( ) ; TYPE_4 state = TYPE_5 . METHOD_4 ( project ) ; if ( state . METHOD_5 ( ) ) { TYPE_6 VAR_2 = TYPE_6 . get ( project ) ; if ( VAR_2 . METHOD_6 ( ) . equals ( STRING_1 ) ) { return project ; } } } return null ; } } ; null return } } } ; project return { ) ) STRING_1 ( equals . ) ( METHOD_6 . VAR_2 ( if ; ) project ( get . TYPE_6 = VAR_2 TYPE_6 { ) ) ( METHOD_5 . state ( if ; ) project ( METHOD_4 . TYPE_5 = state TYPE_4 ; ) ( METHOD_3 . VAR_1 = project TYPE_1 { ) ) ( METHOD_2 . TYPE_3 : VAR_1 TYPE_2 ( for { ) ( METHOD_1 TYPE_1 static private 
public static int METHOD_1 ( int a , int b , int c , int d , int e , int f ) { int [ ] values = new int [ ] { a , b , c , d , e , f } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; } } ; b : a ? b > a return ; ) ) STRING_2 + ) ) ) values ( toString . TYPE_1 ( + STRING_1 ( ( ( println . VAR_1 ; } f , e , d , c , b , a { ] [ int new = values ] [ int { ) f int , e int , d int , c int , b int , a int ( METHOD_1 int static public 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) { java.lang.Integer VAR_3 = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; } assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) ; } } ; ) ) ( METHOD_4 . VAR_1 , 0 ( assertEquals } ; ) ) VAR_3 ( METHOD_3 . VAR_1 ( assertTrue ; ) VAR_3 ( METHOD_2 . VAR_1 ; ) i ( java.lang.Integer new = VAR_3 java.lang.Integer { ) i ++ ; ) VAR_2 ( < i ; 0 = i int ( for ; ) VAR_2 ( TYPE_2 new = VAR_1 TYPE_2 { TYPE_1 throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 context , java.lang.Object VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { if ( context . METHOD_2 ( VAR_2 ) ) { boolean VAR_4 = context . METHOD_3 ( ) ; if ( VAR_4 ) { int VAR_5 = METHOD_4 ( context , VAR_1 ) ; if ( ( VAR_5 > = 0 ) & & ( context . METHOD_5 ( VAR_5 , VAR_2 ) ) ) { return ; } } context . METHOD_1 ( VAR_2 , METHOD_6 ( context , VAR_1 ) , VAR_3 , null ) ; } } } } ; ) null , VAR_3 , ) VAR_1 , context ( METHOD_6 , VAR_2 ( METHOD_1 . context } } ; return { ) ) ) VAR_2 , VAR_5 ( METHOD_5 . context ( & & ) 0 = > VAR_5 ( ( if ; ) VAR_1 , context ( METHOD_4 = VAR_5 int { ) VAR_4 ( if ; ) ( METHOD_3 . context = VAR_4 boolean { ) ) VAR_2 ( METHOD_2 . context ( if { ) VAR_3 java.lang.String , VAR_2 TYPE_2 , VAR_1 java.lang.Object , context TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( int count ) { if ( count < 0 ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } int VAR_1 = ( VAR_2 ) + count ; if ( VAR_3 ) { METHOD_2 ( VAR_1 ) ; } else if ( VAR_1 > ( data . length ) ) { TYPE_1 . METHOD_3 ( ) ; return ; } TYPE_2 . METHOD_4 ( data , VAR_2 , VAR_1 , ( ( byte ) ( 0 ) ) ) ; VAR_2 = VAR_1 ; } } ; VAR_1 = VAR_2 ; ) ) ) 0 ( ) byte ( ( , VAR_1 , VAR_2 , data ( METHOD_4 . TYPE_2 } ; return ; ) ( METHOD_3 . TYPE_1 { ) ) length . data ( > VAR_1 ( if else } ; ) VAR_1 ( METHOD_2 { ) VAR_3 ( if ; count + ) VAR_2 ( = VAR_1 int } ; ) STRING_1 ( java.lang.IllegalArgumentException new throw { ) 0 < count ( if { ) count int ( METHOD_1 void public 
static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 context ) { if ( ! ( TYPE_4 . get ( context ) . METHOD_2 ( VAR_1 , false ) ) ) { return TYPE_1 . METHOD_3 ( ) ; } java.lang.String VAR_2 = TYPE_5 . METHOD_4 ( context ) . METHOD_5 ( ) ; return TYPE_6 . METHOD_6 ( VAR_2 ) ? TYPE_1 . of ( TYPE_6 . get ( VAR_2 ) ) : TYPE_1 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . TYPE_1 : ) ) VAR_2 ( get . TYPE_6 ( of . TYPE_1 ? ) VAR_2 ( METHOD_6 . TYPE_6 return ; ) ( METHOD_5 . ) context ( METHOD_4 . TYPE_5 = VAR_2 java.lang.String } ; ) ( METHOD_3 . TYPE_1 return { ) ) ) false , VAR_1 ( METHOD_2 . ) context ( get . TYPE_4 ( ! ( if { ) context TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 static 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; TYPE_1 VAR_5 = ( ( TYPE_1 ) ( VAR_6 . METHOD_4 ( ) ) ) ; VAR_5 . flags & = ~ ( VAR_7 ) ; VAR_8 . METHOD_5 ( VAR_6 , VAR_5 ) ; } } ; ) VAR_5 , VAR_6 ( METHOD_5 . VAR_8 ; ) VAR_7 ( ~ = & flags . VAR_5 ; ) ) ) ( METHOD_4 . VAR_6 ( ) TYPE_1 ( ( = VAR_5 TYPE_1 ; ) VAR_4 ( METHOD_3 . VAR_3 ; ) VAR_2 ( METHOD_2 . VAR_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , null , 0 ) ; VAR_1 . METHOD_4 ( true ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_4 ( false ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . VAR_1 , STRING_2 ( assertFalse ; ) false ( METHOD_4 . VAR_1 ; ) ) ( METHOD_5 . VAR_1 , STRING_1 ( assertTrue ; ) true ( METHOD_4 . VAR_1 ; ) 0 , null , ) ( METHOD_3 . server , ) ( METHOD_2 . TYPE_3 ( TYPE_2 new = VAR_1 TYPE_2 ; ) 0 ( TYPE_1 new = server TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( short VAR_1 , short VAR_2 , java.lang.String VAR_3 , java.lang.Exception VAR_4 ) throws java.io.IOException { VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; byte [ ] error = new byte [ 2 ] ; error [ 0 ] = ( ( byte ) ( VAR_1 ) ) ; error [ 1 ] = ( ( byte ) ( VAR_2 ) ) ; METHOD_3 ( VAR_6 , error , 0 , 2 ) ; } } ; ) 2 , 0 , error , VAR_6 ( METHOD_3 ; ) ) VAR_2 ( ) byte ( ( = ] 1 [ error ; ) ) VAR_1 ( ) byte ( ( = ] 0 [ error ; ] 2 [ byte new = error ] [ byte ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . VAR_5 { java.io.IOException throws ) VAR_4 java.lang.Exception , VAR_3 java.lang.String , VAR_2 short , VAR_1 short ( METHOD_1 void private 
public static void METHOD_1 ( long i , TYPE_1 output ) throws java.io.IOException { output . METHOD_2 ( ( ( int ) ( i > > INT_1 ) ) ) ; output . METHOD_2 ( ( ( int ) ( i > > 16 ) ) ) ; output . METHOD_2 ( ( ( int ) ( i > > 8 ) ) ) ; output . METHOD_2 ( ( ( int ) ( i ) ) ) ; } } ; ) ) ) i ( ) int ( ( ( METHOD_2 . output ; ) ) ) 8 > > i ( ) int ( ( ( METHOD_2 . output ; ) ) ) 16 > > i ( ) int ( ( ( METHOD_2 . output ; ) ) ) INT_1 > > i ( ) int ( ( ( METHOD_2 . output { java.io.IOException throws ) output TYPE_1 , i long ( METHOD_1 void static public 
public java.lang.String METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_2 . toString ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 instanceof java.lang.Class ? TYPE_3 . METHOD_4 ( ( ( java.lang.Class ) ( VAR_2 ) ) ) : VAR_2 . toString ( ) ) ) + STRING_2 ) + ( TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ) ) + STRING_3 ) + ( getName ( ) ) ; } } ; ) ) ( getName ( + ) STRING_3 + ) ) ) ) ( METHOD_5 ( METHOD_4 . TYPE_3 ( + ) STRING_2 + ) ) ) ( toString . VAR_2 : ) ) ) VAR_2 ( ) java.lang.Class ( ( ( METHOD_4 . TYPE_3 ? java.lang.Class instanceof VAR_2 ( + ) STRING_2 + ) ) VAR_1 ( toString . TYPE_2 ( : STRING_1 ? 0 == VAR_1 ( ( ( ( ( return ; ) ( METHOD_3 = VAR_2 TYPE_1 ; ) ( METHOD_2 = VAR_1 int { ) ( METHOD_1 java.lang.String public 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; VAR_2 . METHOD_5 ( method ) ; new TYPE_2 ( ) . METHOD_5 ( method ) ; } } ; ) method ( METHOD_5 . ) ( TYPE_2 new ; ) method ( METHOD_5 . VAR_2 ; ) method ( TYPE_1 new = VAR_2 TYPE_1 } ; return { ) ) ) ) method , ) ( METHOD_6 . this ( METHOD_5 . VAR_1 ( ! ( || ) ) ) ( METHOD_4 . method ( || ) ) ) ( METHOD_3 . method ( || ) ) ( METHOD_2 . ) ( METHOD_1 . method ( ( ( ( if { java.lang.Exception throws ) method com.android.jack.ir.ast.JMethod ( run void public 
private static boolean METHOD_1 ( TYPE_1 element ) { java.lang.String VAR_1 = element . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 ! = null ) & & ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { return TYPE_2 . METHOD_4 ( VAR_1 ) ; } else { for ( TYPE_1 VAR_4 : TYPE_3 . METHOD_5 ( element ) ) { if ( VAR_4 . METHOD_6 ( ) . equals ( VAR_5 ) ) { return true ; } } } return false ; } } ; false return } } } ; true return { ) ) VAR_5 ( equals . ) ( METHOD_6 . VAR_4 ( if { ) ) element ( METHOD_5 . TYPE_3 : VAR_4 TYPE_1 ( for { else } ; ) VAR_1 ( METHOD_4 . TYPE_2 return { ) ) ) ) ( METHOD_3 . VAR_1 ( ! ( & & ) null = ! VAR_1 ( ( if ; ) VAR_3 , VAR_2 ( METHOD_2 . element = VAR_1 java.lang.String { ) element TYPE_1 ( METHOD_1 boolean static private 
private java.util.List < TYPE_1 > METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_1 ) == null ) { try { VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( VAR_3 ) ) ; } catch ( TYPE_3 e ) { VAR_4 . error ( e , null ) ; VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( null , STRING_1 ) ; VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; } } } return VAR_1 ; } } ; VAR_1 return } } } ; ) ( > TYPE_1 < java.util.ArrayList new = VAR_1 ; ) STRING_1 , null ( error . VAR_4 { ) e java.lang.Exception ( catch } ; ) ( > TYPE_1 < java.util.ArrayList new = VAR_1 ; ) null , e ( error . VAR_4 { ) e TYPE_3 ( catch } ; ) ) VAR_3 ( METHOD_3 . class VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 { try { ) null == ) VAR_1 ( ( if { ) this ( synchronized { ) ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_4 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; } } ; ) true , VAR_2 ( assertEquals ; ) ) class . int ( METHOD_4 . org.mockito.Matchers , ) VAR_1 ( org.mockito.Matchers.eq ( METHOD_3 . ) VAR_4 ( org.mockito.Mockito.verify ; ) ( METHOD_3 . VAR_3 = VAR_2 boolean ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public final void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String format , byte [ ] VAR_3 ) { synchronized ( VAR_4 ) { if ( ( VAR_5 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } try { VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , format , VAR_3 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_7 ) ; } } } } } } ; ) VAR_7 , VAR_2 , VAR_1 ( METHOD_2 ; ) ) ) ) ( e.getMessage ( + STRING_2 ( , VAR_6 ( android.util.Log.e { ) e android.os.RemoteException ( catch } ; ) VAR_3 , format , VAR_2 , VAR_1 ( METHOD_1 . VAR_5 { try } ; ) STRING_1 ( TYPE_1 new throw { ) null == ) VAR_5 ( ( if { ) VAR_4 ( synchronized { ) VAR_3 ] [ byte , format java.lang.String , VAR_2 int , VAR_1 int ( METHOD_1 void final public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 = null ; VAR_1 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 . METHOD_3 ( ) ; VAR_8 = null ; super . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . super ; null = VAR_8 ; ) ( METHOD_3 . VAR_7 ; null = VAR_6 ; null = VAR_5 ; null = VAR_4 ; null = VAR_3 ; null = VAR_1 ; null = VAR_2 ; ) VAR_1 ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { com.android.tradefed.log.LogUtil.CLog.i ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ; METHOD_4 ( STRING_4 ) ; return ; } TYPE_2 VAR_3 = new TYPE_2 ( ) { public boolean run ( ) throws TYPE_3 , TYPE_4 , java.io.IOException { METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; return true ; } } ; METHOD_6 ( STRING_5 , VAR_3 , VAR_4 ) ; } } ; ) VAR_4 , VAR_3 , STRING_5 ( METHOD_6 ; } } ; true return ; ) VAR_1 ( METHOD_5 . ) ( METHOD_2 { java.io.IOException , TYPE_4 , TYPE_3 throws ) ( run boolean public { ) ( TYPE_2 new = VAR_3 TYPE_2 } ; return ; ) STRING_4 ( METHOD_4 ; ) ) VAR_2 , STRING_3 ( java.lang.String.format ( METHOD_4 ; ) STRING_2 ( METHOD_4 ; ) STRING_1 ( com.android.tradefed.log.LogUtil.CLog.i { ) ) ( METHOD_3 . ) ( METHOD_2 ( if { TYPE_1 throws ) VAR_1 java.lang.String final ( METHOD_1 void protected 
public synchronized long METHOD_1 ( long n ) throws java.io.IOException { if ( VAR_1 ) { return 0 ; } if ( ( in ) instanceof TYPE_1 ) { n = in . METHOD_1 ( n ) ; } else { long VAR_2 = ( n > ( ( expected ) - ( count ) ) ) ? ( expected ) - ( count ) : n ; n = in . METHOD_1 ( VAR_2 ) ; } METHOD_2 ( n ) ; return n ; } } ; n return ; ) n ( METHOD_2 } ; ) VAR_2 ( METHOD_1 . in = n ; n : ) count ( - ) expected ( ? ) ) ) count ( - ) expected ( ( > n ( = VAR_2 long { else } ; ) n ( METHOD_1 . in = n { ) TYPE_1 instanceof ) in ( ( if } ; 0 return { ) VAR_1 ( if { java.io.IOException throws ) n long ( METHOD_1 long synchronized public 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int line ) { if ( ( VAR_3 ) ! = null ) { for ( TYPE_1 VAR_4 : VAR_3 ) { if ( VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , line ) ) { break ; } } } } } } } } ; break { ) ) line , VAR_2 , VAR_1 ( METHOD_1 . VAR_4 ( if { ) VAR_3 : VAR_4 TYPE_1 ( for { ) null = ! ) VAR_3 ( ( if { ) line int , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { int c = TYPE_1 . METHOD_2 ( ) ; int s = TYPE_1 . METHOD_3 ( c ) ; try { TYPE_1 . METHOD_4 ( s ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } TYPE_1 . METHOD_5 ( s ) ; TYPE_1 . METHOD_6 ( c ) ; } } ; ) c ( METHOD_6 . TYPE_1 ; ) s ( METHOD_5 . TYPE_1 } { ) expected TYPE_2 ( catch } ; ) ( fail ; ) s ( METHOD_4 . TYPE_1 { try ; ) c ( METHOD_3 . TYPE_1 = s int ; ) ( METHOD_2 . TYPE_1 = c int { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( ) ; synchronized ( VAR_3 ) { ( VAR_4 ) ++ ; VAR_3 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_1 ) ) ; VAR_5 . METHOD_4 ( ) ; } int uid = TYPE_3 . METHOD_5 ( ) ; TYPE_4 VAR_6 = TYPE_3 . METHOD_6 ( ) ; try { VAR_7 . METHOD_7 ( uid ) ; } catch ( android.os.RemoteException e ) { } finally { TYPE_3 . METHOD_8 ( VAR_6 ) ; } } } } ; ) VAR_6 ( METHOD_8 . TYPE_3 { finally } { ) e android.os.RemoteException ( catch } ; ) uid ( METHOD_7 . VAR_7 { try ; ) ( METHOD_6 . TYPE_3 = VAR_6 TYPE_4 ; ) ( METHOD_5 . TYPE_3 = uid int } ; ) ( METHOD_4 . VAR_5 ; ) ) VAR_1 , VAR_2 ( TYPE_2 new ( METHOD_3 . VAR_3 ; ++ ) VAR_4 ( { ) VAR_3 ( synchronized ; ) ( METHOD_2 { ) VAR_2 java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void public 
protected void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( 0 , STRING_1 , STRING_2 , null , null ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_3 , 0 ) ; VAR_1 . METHOD_5 ( VAR_4 , STRING_3 , STRING_1 , STRING_2 ) ; } } ; ) STRING_2 , STRING_1 , STRING_3 , VAR_4 ( METHOD_5 . VAR_1 ; ) 0 , VAR_3 ( METHOD_4 . VAR_1 ; ) ( METHOD_3 . VAR_1 ; ) null , null , STRING_2 , STRING_1 , 0 ( METHOD_2 . VAR_2 = VAR_1 { ) ( METHOD_1 void protected 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return VAR_2 < TYPE_2 > of ( ) . METHOD_1 ( ) ; } java.util.List < TYPE_2 > VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , VAR_1 , VAR_3 ) ; return VAR_3 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . VAR_3 return ; ) VAR_3 , VAR_1 , ) ( METHOD_5 . ) VAR_1 ( METHOD_4 ( METHOD_3 ; ) ( > TYPE_2 < java.util.ArrayList new = VAR_3 > TYPE_2 < java.util.List } ; ) ( METHOD_1 . ) ( of > TYPE_2 < VAR_2 return { ) ) ) VAR_1 ( METHOD_2 ( ! ( if { ) VAR_1 TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 public 
public void METHOD_1 ( ) { TYPE_1 . i ( STRING_1 , STRING_2 ) ; TYPE_2 . METHOD_2 ( mContext ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 . METHOD_7 ( ) , VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) ; TYPE_3 . METHOD_12 ( ) . METHOD_13 ( ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ( METHOD_13 . ) ( METHOD_12 . TYPE_3 ; ) ) ( METHOD_11 . VAR_1 , ) ( METHOD_10 . ) ( METHOD_9 . VAR_1 , ) ( METHOD_8 . VAR_1 , ) ( METHOD_7 . VAR_1 ( METHOD_6 ; ) ) ( METHOD_5 , ) ( METHOD_4 . VAR_1 ( METHOD_3 ; ) mContext ( METHOD_2 . TYPE_2 ; ) STRING_2 , STRING_1 ( i . TYPE_1 { ) ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String packageName , java.util.Set < java.lang.String > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = packageName + CHAR_1 ; java.lang.String VAR_4 = VAR_3 . METHOD_2 ( CHAR_1 , CHAR_2 ) ; for ( java.lang.String entry : VAR_5 ) { java.io.File VAR_6 = new java.io.File ( entry ) ; if ( ( VAR_6 . METHOD_3 ( ) ) & & ( ! ( VAR_6 . METHOD_4 ( ) ) ) ) { VAR_7 . METHOD_5 ( VAR_6 , VAR_4 , packageName , VAR_1 , VAR_2 ) ; } } } } } } ; ) VAR_2 , VAR_1 , packageName , VAR_4 , VAR_6 ( METHOD_5 . VAR_7 { ) ) ) ) ( METHOD_4 . VAR_6 ( ! ( & & ) ) ( METHOD_3 . VAR_6 ( ( if ; ) entry ( java.io.File new = VAR_6 java.io.File { ) VAR_5 : entry java.lang.String ( for ; ) CHAR_2 , CHAR_1 ( METHOD_2 . VAR_3 = VAR_4 java.lang.String ; CHAR_1 + packageName = VAR_3 java.lang.String { java.io.IOException throws ) VAR_2 > java.lang.String < java.util.Set , VAR_1 > java.lang.String < java.util.Set , packageName java.lang.String ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( ) { return new TYPE_2 < TYPE_3 , TYPE_3 , TYPE_4 > ( new TYPE_5 < TYPE_3 , TYPE_3 , TYPE_4 > ( ) { public TYPE_6 get ( TYPE_7 < TYPE_6 , TYPE_8 > entry ) { return entry . key ; } } , VAR_1 ) ; } } ; ) VAR_1 , } } ; key . entry return { ) entry > TYPE_8 , TYPE_6 < TYPE_7 ( get TYPE_6 public { ) ( > TYPE_4 , TYPE_3 , TYPE_3 < TYPE_5 new ( > TYPE_4 , TYPE_3 , TYPE_3 < TYPE_2 new return { ) ( METHOD_1 TYPE_1 public 
private TYPE_1 METHOD_1 ( TYPE_2 expected , TYPE_1 VAR_1 ) { if ( ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( expected ) ) ; return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 , VAR_2 ) ; } else { return VAR_1 ; } } } } ; VAR_1 return { else } ; ) VAR_2 , VAR_1 , ) ( METHOD_4 . VAR_1 ( TYPE_4 new return ; ) ) expected ( ) TYPE_3 ( ( = VAR_2 TYPE_3 { ) ) ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . expected ( ! ( if { ) VAR_1 TYPE_1 , expected TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) ; } else if ( event . METHOD_2 ( ) . equals ( VAR_3 ) ) { TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; } } } } ; ) ) ( METHOD_7 . VAR_3 ( METHOD_6 . TYPE_2 { ) ) VAR_3 ( equals . ) ( METHOD_2 . event ( if else } ; ) ) ( METHOD_5 , ) ( METHOD_4 . VAR_1 ( METHOD_3 . VAR_2 { ) ) VAR_1 ( equals . ) ( METHOD_2 . event ( if { ) event TYPE_1 ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { switch ( VAR_1 ) { case VAR_3 : return new TYPE_4 ( this ) ; case VAR_4 : case VAR_5 : case VAR_6 : return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; case VAR_11 : return new TYPE_7 ( this ) ; default : throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; } } } } ; ) ) VAR_1 + STRING_1 ( ( java.lang.IllegalArgumentException new throw : default ; ) this ( TYPE_7 new return : VAR_11 case ; ) VAR_2 , VAR_1 , this ( TYPE_6 new return : VAR_10 case : VAR_9 case : VAR_8 case : VAR_7 case ; ) VAR_2 , VAR_1 , this ( TYPE_5 new return : VAR_6 case : VAR_5 case : VAR_4 case ; ) this ( TYPE_4 new return : VAR_3 case { ) VAR_1 ( switch { ) VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { synchronized ( VAR_2 ) { if ( ( VAR_3 ) == null ) { return null ; } } return ( ( TYPE_1 ) ( VAR_3 . get ( VAR_1 ) ) ) ; } } ; ) ) ) VAR_1 ( get . VAR_3 ( ) TYPE_1 ( ( return } } ; null return { ) null == ) VAR_3 ( ( if { ) VAR_2 ( synchronized { ) VAR_1 > TYPE_1 < java.lang.Class ( METHOD_1 TYPE_1 > TYPE_2 extends TYPE_1 < public 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , int VAR_5 ) { java.lang.String key = VAR_2 + VAR_3 ; TYPE_2 VAR_6 = VAR_7 . get ( key ) ; if ( VAR_6 == null ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } return new TYPE_1 ( VAR_8 , VAR_3 , TYPE_3 . METHOD_2 ( VAR_1 , VAR_8 ) , ( VAR_5 - ( VAR_9 ) ) ) ; } } ; ) ) ) VAR_9 ( - VAR_5 ( , ) VAR_8 , VAR_1 ( METHOD_2 . TYPE_3 , VAR_3 , VAR_8 ( TYPE_1 new return } ; ) VAR_5 , VAR_4 , VAR_3 , VAR_2 ( TYPE_1 new return { ) null == VAR_6 ( if ; ) key ( get . VAR_7 = VAR_6 TYPE_2 ; VAR_3 + VAR_2 = key java.lang.String { ) VAR_5 int , VAR_4 java.lang.String , VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ; byte [ ] VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 [ ( ( VAR_3 . length ) - 3 ) ] = CHAR_1 ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } } ; ) ( METHOD_7 ; ) ( METHOD_6 ; ) ) ) ( METHOD_5 . VAR_4 ( METHOD_4 . VAR_6 , VAR_5 ( assertEquals ; ) VAR_3 ( METHOD_3 . TYPE_3 = VAR_4 TYPE_2 ; CHAR_1 = ] ) 3 - ) length . VAR_3 ( ( [ VAR_3 ; ) ( METHOD_2 . VAR_1 = VAR_3 ] [ byte ; ) 1 , VAR_2 , 1 , 1 ( TYPE_1 new = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) { synchronized ( this ) { if ( VAR_2 ) { return ; } TYPE_1 node ; try { node = METHOD_2 ( VAR_3 ) ; node . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( METHOD_4 ( VAR_1 ) , e ) ; } VAR_2 = true ; if ( VAR_4 ) { VAR_1 . METHOD_5 ( ) ; } } } } } } ; ) ( METHOD_5 . VAR_1 { ) VAR_4 ( if ; true = VAR_2 } ; ) e , ) VAR_1 ( METHOD_4 ( TYPE_3 new throw { ) e TYPE_2 ( catch } ; ) VAR_1 ( METHOD_3 . node ; ) VAR_3 ( METHOD_2 = node { try ; node TYPE_1 } ; return { ) VAR_2 ( if { ) this ( synchronized { ) VAR_1 com.android.jack.ir.ast.JMethod ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = INT_1 * INT_1 ; byte [ ] VAR_2 = new byte [ INT_2 ] ; TYPE_1 in = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( VAR_1 ) ) ) ; while ( ( in . METHOD_3 ( ) ) ! = null ) { while ( ( in . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ) ! = ( - 1 ) ) { } } in . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . in } } { ) ) 1 - ( = ! ) ) length . VAR_2 , 0 , VAR_2 ( METHOD_4 . in ( ( while { ) null = ! ) ) ( METHOD_3 . in ( ( while ; ) ) ) VAR_1 ( METHOD_2 ( TYPE_2 new ( TYPE_1 new = in TYPE_1 ; ] INT_2 [ byte new = VAR_2 ] [ byte ; INT_1 * INT_1 = VAR_1 int { java.io.IOException throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == 1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; VAR_2 . start ( ) ; VAR_3 = new TYPE_2 ( VAR_2 . METHOD_3 ( ) , VAR_4 , VAR_1 , this ) ; } } } } } } ; ) this , VAR_1 , VAR_4 , ) ( METHOD_3 . VAR_2 ( TYPE_2 new = VAR_3 ; ) ( start . VAR_2 ; ) STRING_1 ( TYPE_1 new = VAR_2 TYPE_1 { ) 1 == ) ) ( METHOD_2 . VAR_1 ( ( if { ) VAR_1 ( synchronized { ) ( METHOD_1 void private 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_1 location ) throws TYPE_2 , TYPE_3 { assert VAR_1 ! = null ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( location ) ; } if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { throw new TYPE_3 ( ( ( TYPE_4 ) ( location ) ) ) ; } } } } ; ) ) ) location ( ) TYPE_4 ( ( ( TYPE_3 new throw { ) ) ) ( METHOD_3 . VAR_1 ( ! ( if } ; ) location ( TYPE_2 new throw { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if ; null = ! VAR_1 assert { TYPE_3 , TYPE_2 throws ) location TYPE_1 , VAR_1 java.io.File ( METHOD_1 void static public 
public static TYPE_1 METHOD_1 ( java.lang.Object obj ) { if ( ( obj == null ) || ( obj instanceof TYPE_2 ) ) { return ( ( TYPE_1 ) ( obj ) ) ; } if ( obj instanceof TYPE_3 ) { return new TYPE_1 ( ( ( TYPE_3 ) ( obj ) ) ) ; } throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( obj . METHOD_2 ( ) . getName ( ) ) ) ) ; } } ; ) ) ) ) ( getName . ) ( METHOD_2 . obj ( + STRING_1 ( ( java.lang.IllegalArgumentException new throw } ; ) ) ) obj ( ) TYPE_3 ( ( ( TYPE_1 new return { ) TYPE_3 instanceof obj ( if } ; ) ) obj ( ) TYPE_1 ( ( return { ) ) TYPE_2 instanceof obj ( || ) null == obj ( ( if { ) obj java.lang.Object ( METHOD_1 TYPE_1 static public 
void METHOD_1 ( TYPE_1 [ ] VAR_1 , boolean VAR_2 ) { int VAR_3 = VAR_1 . length ; for ( TYPE_2 < TYPE_3 , TYPE_4 > e = VAR_4 ; e ! = ( VAR_5 ) ; e = VAR_6 ) { if ( VAR_2 ) VAR_7 = ( ( e . key ) == null ) ? 0 : java.util.HashMap . METHOD_2 ( e . key ) ; int index = METHOD_3 ( VAR_7 , VAR_3 ) ; VAR_8 = VAR_1 [ index ] ; VAR_1 [ index ] = e ; } } } } ; e = ] index [ VAR_1 ; ] index [ VAR_1 = VAR_8 ; ) VAR_3 , VAR_7 ( METHOD_3 = index int ; ) key . e ( METHOD_2 . java.util.HashMap : 0 ? ) null == ) key . e ( ( = VAR_7 ) VAR_2 ( if { ) VAR_6 = e ; ) VAR_5 ( = ! e ; VAR_4 = e > TYPE_4 , TYPE_3 < TYPE_2 ( for ; length . VAR_1 = VAR_3 int { ) VAR_2 boolean , VAR_1 ] [ TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_6 , VAR_7 ) ; TYPE_2 < TYPE_3 > VAR_8 = TYPE_2 . METHOD_7 ( VAR_3 class ) ; org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_8 ( VAR_6 ) ) . METHOD_3 ( VAR_8 . METHOD_9 ( ) ) ; TYPE_4 . assertEquals ( VAR_9 , VAR_8 . METHOD_10 ( ) . METHOD_11 ( ) ) ; } } ; ) ) ( METHOD_11 . ) ( METHOD_10 . VAR_8 , VAR_9 ( assertEquals . TYPE_4 ; ) ) ( METHOD_9 . VAR_8 ( METHOD_3 . ) ) VAR_6 ( METHOD_8 . TYPE_1 , VAR_2 ( org.mockito.Mockito.verify ; ) class VAR_3 ( METHOD_7 . TYPE_2 = VAR_8 > TYPE_3 < TYPE_2 ; ) VAR_7 , VAR_6 ( METHOD_6 . VAR_5 ; ) ( METHOD_5 . VAR_4 ; ) ) class VAR_3 ( METHOD_4 . org.mockito.Matchers ( METHOD_3 . ) VAR_2 ( when . ) VAR_1 ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.util.Map < ? extends TYPE_2 , ? extends TYPE_3 > VAR_1 ) { VAR_2 . METHOD_2 ( ( ( VAR_2 . size ( ) ) + ( VAR_1 . size ( ) ) ) ) ; for ( TYPE_4 < ? extends TYPE_2 , ? extends TYPE_3 > entry : VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( entry . METHOD_5 ( ) , entry . METHOD_6 ( ) ) ; } return this ; } } ; this return } ; ) ) ( METHOD_6 . entry , ) ( METHOD_5 . entry ( METHOD_4 { ) ) ( METHOD_3 . VAR_1 : entry > TYPE_3 extends ? , TYPE_2 extends ? < TYPE_4 ( for ; ) ) ) ) ( size . VAR_1 ( + ) ) ( size . VAR_2 ( ( ( METHOD_2 . VAR_2 { ) VAR_1 > TYPE_3 extends ? , TYPE_2 extends ? < java.util.Map ( METHOD_1 > TYPE_3 , TYPE_2 < TYPE_1 public 
public static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 == null ) { TYPE_4 [ ] VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( ( VAR_3 . length ) > 0 ) { VAR_2 = VAR_3 [ 0 ] ; } } if ( VAR_2 ! = null ) { TYPE_5 VAR_4 = VAR_2 . METHOD_5 ( ) ; if ( VAR_4 ! = null ) { return VAR_4 . METHOD_1 ( ) ; } } return null ; } } ; null return } } ; ) ( METHOD_1 . VAR_4 return { ) null = ! VAR_4 ( if ; ) ( METHOD_5 . VAR_2 = VAR_4 TYPE_5 { ) null = ! VAR_2 ( if } } ; ] 0 [ VAR_3 = VAR_2 { ) 0 > ) length . VAR_3 ( ( if ; ) ( METHOD_4 . VAR_1 = VAR_3 ] [ TYPE_4 { ) null == VAR_2 ( if ; ) ( METHOD_3 . VAR_1 = VAR_2 TYPE_4 ; ) ( METHOD_2 . TYPE_3 = VAR_1 TYPE_2 { ) ( METHOD_1 TYPE_1 static public 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int value ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , value ) ; } } ; ) value , device ( METHOD_1 . service return ; false return ) null == service ( if ; ) ( METHOD_3 = service TYPE_2 } ; false return ; ) STRING_1 , TAG . TYPE_2 ( android.util.Log.w { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) value int , device android.bluetooth.BluetoothDevice ( METHOD_1 boolean public 
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } else { VAR_2 . METHOD_2 ( VAR_4 ) ; } return this ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } } } } ; ) e ( TYPE_3 new throw { ) e TYPE_2 ( catch } ; this return } ; ) VAR_4 ( METHOD_2 . VAR_2 { else } ; ) VAR_3 ( METHOD_2 . VAR_2 { ) VAR_1 ( if { try { ) VAR_1 boolean ( METHOD_1 TYPE_1 public 
boolean METHOD_1 ( long VAR_1 ) { if ( VAR_2 ) { return false ; } if ( ( VAR_3 ) < = 0 ) { return false ; } if ( ( ( VAR_4 . size ( ) ) > 0 ) & & ( ( VAR_5 ) > VAR_1 ) ) { return false ; } long VAR_6 = VAR_1 - ( VAR_3 ) ; return VAR_6 < = ( METHOD_2 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_2 ( = < VAR_6 return ; ) VAR_3 ( - VAR_1 = VAR_6 long } ; false return { ) ) VAR_1 > ) VAR_5 ( ( & & ) 0 > ) ) ( size . VAR_4 ( ( ( if } ; false return { ) 0 = < ) VAR_3 ( ( if } ; false return { ) VAR_2 ( if { ) VAR_1 long ( METHOD_1 boolean 
protected com.android.jack.ir.ast.JMethod METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { for ( com.android.jack.ir.ast.JMethod m : VAR_1 . METHOD_2 ( ) ) { if ( ( m . METHOD_3 ( ) . equals ( VAR_2 ) ) & & ( m . METHOD_4 ( ) . equals ( VAR_3 ) ) ) { return m ; } } return null ; } } ; null return } } ; m return { ) ) ) VAR_3 ( equals . ) ( METHOD_4 . m ( & & ) ) VAR_2 ( equals . ) ( METHOD_3 . m ( ( if { ) ) ( METHOD_2 . VAR_1 : m com.android.jack.ir.ast.JMethod ( for { ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 com.android.jack.ir.ast.JMethod protected 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } METHOD_4 ( 0 ) ; METHOD_5 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 ) ; final TYPE_2 VAR_5 = METHOD_6 ( VAR_2 , VAR_3 ) ; TYPE_3 . METHOD_7 ( VAR_4 , VAR_5 ) ; } } ; ) VAR_5 , VAR_4 ( METHOD_7 . TYPE_3 ; ) VAR_3 , VAR_2 ( METHOD_6 = VAR_5 TYPE_2 final ; ) 1 ( METHOD_4 ; ) VAR_3 , VAR_2 ( METHOD_6 = VAR_4 TYPE_2 final ; ) VAR_3 , VAR_2 ( METHOD_5 ; ) 0 ( METHOD_4 } ; return ; ) STRING_1 , VAR_1 ( METHOD_3 . TYPE_1 { ) ) ) ( METHOD_2 ( ! ( if { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_5 ) ) ) == 1 ; VAR_6 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_7 ) ) ) == 1 ; VAR_8 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_9 ) ) ) == 1 ; VAR_10 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_11 ) ) ) == 1 ; } } ; 1 == ) ) ) VAR_11 ( METHOD_2 . VAR_3 ( java.lang.Integer.parseInt ( = VAR_10 ; 1 == ) ) ) VAR_9 ( METHOD_2 . VAR_3 ( java.lang.Integer.parseInt ( = VAR_8 ; 1 == ) ) ) VAR_7 ( METHOD_2 . VAR_3 ( java.lang.Integer.parseInt ( = VAR_6 ; 1 == ) ) ) VAR_5 ( METHOD_2 . VAR_3 ( java.lang.Integer.parseInt ( = VAR_4 { ) VAR_3 TYPE_2 , VAR_2 java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String name , java.lang.String VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , name , TYPE_3 . on ( CHAR_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) , VAR_4 ) ; } } ; ) VAR_4 , ) VAR_3 ( METHOD_3 . ) ( METHOD_2 . ) CHAR_1 ( on . TYPE_3 , name , VAR_2 , VAR_1 ( METHOD_1 . TYPE_2 return { ) VAR_4 boolean , VAR_3 java.lang.String , name java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 TYPE_1 static private 
public TYPE_1 METHOD_1 ( int VAR_1 , int index ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } int VAR_2 = size ( ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( METHOD_3 ( i ) ) ) ; if ( ( VAR_3 ! = null ) & & ( VAR_3 . METHOD_4 ( VAR_1 , index ) ) ) { return VAR_3 ; } } return null ; } } ; null return } } ; VAR_3 return { ) ) ) index , VAR_1 ( METHOD_4 . VAR_3 ( & & ) null = ! VAR_3 ( ( if ; ) ) ) i ( METHOD_3 ( ) TYPE_1 ( ( = VAR_3 TYPE_1 { ) ++ i ; VAR_2 < i ; 0 = i int ( for ; ) ( size = VAR_2 int } ; ) STRING_1 ( TYPE_2 new throw { ) ) ) ( METHOD_2 ( ! ( if { ) index int , VAR_1 int ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String msg = STRING_2 + STRING_3 ; super . METHOD_1 ( ) ; TYPE_2 . METHOD_3 ( msg , VAR_1 ) ; throw new TYPE_3 ( msg ) ; } METHOD_4 ( new TYPE_4 ( VAR_2 , METHOD_5 ( ) ) ) ; super . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . super ; ) ) ) ( METHOD_5 , VAR_2 ( TYPE_4 new ( METHOD_4 } ; ) msg ( TYPE_3 new throw ; ) VAR_1 , msg ( METHOD_3 . TYPE_2 ; ) ( METHOD_1 . super ; STRING_3 + STRING_2 = msg java.lang.String ; STRING_1 = VAR_1 java.lang.String { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; int VAR_1 = 5 ; METHOD_3 ( VAR_1 , false , false ) ; TYPE_1 . when ( VAR_2 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( false ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 = VAR_1 ; VAR_3 . METHOD_6 ( ) . METHOD_7 ( STRING_1 ) ; assertFalse ( VAR_5 . METHOD_8 ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( METHOD_8 . VAR_5 ( assertFalse ; ) STRING_1 ( METHOD_7 . ) ( METHOD_6 . VAR_3 ; VAR_1 = VAR_4 ; ) ( TYPE_2 new = VAR_3 TYPE_2 ; ) false ( thenReturn . ) ) ) ( METHOD_5 . org.mockito.Matchers ( METHOD_4 . VAR_2 ( when . TYPE_1 ; ) false , false , VAR_1 ( METHOD_3 ; 5 = VAR_1 int ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; int VAR_5 = VAR_1 . METHOD_4 ( VAR_3 ) ; int VAR_6 = VAR_1 . METHOD_5 ( VAR_3 ) ; return TYPE_6 . METHOD_6 ( VAR_4 , VAR_5 , VAR_6 ) ; } } ; ) VAR_6 , VAR_5 , VAR_4 ( METHOD_6 . TYPE_6 return ; ) VAR_3 ( METHOD_5 . VAR_1 = VAR_6 int ; ) VAR_3 ( METHOD_4 . VAR_1 = VAR_5 int ; ) ( METHOD_3 . ) VAR_2 ( METHOD_2 . VAR_3 = VAR_4 TYPE_5 { ) VAR_3 TYPE_4 , VAR_2 > TYPE_3 < java.util.List , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static private 
private int METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.lang.Exception { TYPE_1 . when ( VAR_4 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( VAR_3 ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_5 ( VAR_1 , TYPE_3 . METHOD_6 ( VAR_2 ) . METHOD_7 ( ) , VAR_7 , new TYPE_4 ( ) ) ; return VAR_8 ; } } ; VAR_8 return ; ) ) ( TYPE_4 new , VAR_7 , ) ( METHOD_7 . ) VAR_2 ( METHOD_6 . TYPE_3 , VAR_1 ( METHOD_5 . VAR_6 = VAR_5 TYPE_2 ; ) VAR_3 ( thenReturn . ) ) ) ( METHOD_3 . org.mockito.Matchers , ) ( METHOD_4 . org.mockito.Matchers , ) ( METHOD_4 . org.mockito.Matchers , ) ( METHOD_3 . org.mockito.Matchers , ) ( METHOD_3 . org.mockito.Matchers ( METHOD_2 . VAR_4 ( when . TYPE_1 { java.lang.Exception throws ) VAR_3 int , VAR_2 java.lang.String , VAR_1 int ( METHOD_1 int private 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 service = METHOD_2 ( ) ; if ( service ! = null ) { try { return service . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } } return false ; } } ; false return } } ; ) e , STRING_1 , TAG . VAR_2 ( android.util.Log.e { ) e android.os.RemoteException ( catch } ; ) VAR_1 ( METHOD_1 . service return { try { ) null = ! service ( if ; ) ( METHOD_2 = service TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 boolean public 
void METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 , int VAR_4 ) throws TYPE_1 { if ( ( ( VAR_5 ) ++ ) > 0 ) { super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } } } ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 , uri ( METHOD_1 . super { ) 0 > ) ++ ) VAR_5 ( ( ( if { TYPE_1 throws ) VAR_4 int , VAR_3 int , VAR_2 java.lang.String , VAR_1 java.lang.String , uri java.lang.String ( METHOD_1 void 
public TYPE_1 METHOD_1 ( TYPE_2 callback ) { if ( callback == null ) { android.util.Log.w ( VAR_1 . TAG , STRING_1 ) ; return null ; } android.os.Message msg = VAR_2 . METHOD_2 ( VAR_3 ) ; msg.obj = callback ; VAR_2 . METHOD_3 ( msg ) ; synchronized ( VAR_4 ) { return VAR_5 ; } } } } ; VAR_5 return { ) VAR_4 ( synchronized ; ) msg ( METHOD_3 . VAR_2 ; callback = msg.obj ; ) VAR_3 ( METHOD_2 . VAR_2 = msg android.os.Message } ; null return ; ) STRING_1 , TAG . VAR_1 ( android.util.Log.w { ) null == callback ( if { ) callback TYPE_2 ( METHOD_1 TYPE_1 public 
protected boolean METHOD_1 ( ) { VAR_1 = null ; if ( VAR_2 ) { METHOD_2 ( ) ; VAR_2 = false ; } if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_4 ) ! = null ) { VAR_4 . METHOD_3 ( ) ; } if ( ( VAR_5 ) ! = null ) { VAR_5 . METHOD_3 ( ) ; } return true ; } } ; true return } ; ) ( METHOD_3 . VAR_5 { ) null = ! ) VAR_5 ( ( if } ; ) ( METHOD_3 . VAR_4 { ) null = ! ) VAR_4 ( ( if } ; ) ( METHOD_3 . VAR_3 { ) null = ! ) VAR_3 ( ( if } ; false = VAR_2 ; ) ( METHOD_2 { ) VAR_2 ( if ; null = VAR_1 { ) ( METHOD_1 boolean protected 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( VAR_3 ) ; return ; } try { TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . e throw { ) e android.os.RemoteException ( catch } ; ) VAR_3 , ) ( METHOD_5 . mContext , VAR_2 , VAR_1 ( METHOD_1 . ) ( METHOD_4 . TYPE_3 { try } ; return ; ) VAR_3 ( METHOD_3 . TYPE_3 { ) ) ) ( METHOD_2 ( ! ( if { ) VAR_3 TYPE_2 , VAR_2 boolean , VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) { assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) ; } METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . VAR_1 ( METHOD_4 } ; ) ) ) ) ( METHOD_3 . VAR_1 ( ) TYPE_2 ( ( , ) i ( TYPE_2 new ( assertEquals { ) i ++ ; ) VAR_3 ( < i ; 0 = i int ( for ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; assertNotNull ( VAR_1 ) ; int VAR_2 = 7 ; VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_3 ) , VAR_2 ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( org.mockito.Matchers.eq , ) VAR_2 ( org.mockito.Matchers.eq , ) VAR_5 ( org.mockito.Matchers.eq ( METHOD_5 . ) VAR_4 ( org.mockito.Mockito.verify ; ) VAR_2 , ) VAR_3 ( METHOD_4 . TYPE_1 ( METHOD_3 . VAR_1 ; 7 = VAR_2 int ; ) VAR_1 ( assertNotNull ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_2 ) ; args . METHOD_2 ( STRING_2 , 0 ) ; args . METHOD_2 ( STRING_3 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; } } ; ) VAR_4 ( METHOD_6 . TYPE_4 ; ) VAR_1 ( METHOD_5 . ) VAR_4 ( org.mockito.Mockito.verify ; ) ) ( toString . ) args ( METHOD_4 . TYPE_3 , VAR_1 ( METHOD_3 . TYPE_2 ; ) VAR_3 , STRING_3 ( METHOD_2 . args ; ) 0 , STRING_2 ( METHOD_2 . args ; ) VAR_2 , STRING_1 ( METHOD_2 . args ; ) ( android.os.Bundle new = args android.os.Bundle ; INT_1 = VAR_1 short final { TYPE_1 throws ) ( METHOD_1 void public 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 , method ) ; VAR_3 . METHOD_5 ( method ) ; VAR_2 . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . VAR_2 ; ) method ( METHOD_5 . VAR_3 ; ) method , VAR_2 ( TYPE_2 new = VAR_3 TYPE_2 ; ) method ( TYPE_1 new = VAR_2 TYPE_1 } ; return { ) ) ) ) method , ) ( METHOD_6 . this ( METHOD_5 . VAR_1 ( ! ( || ) ) ) ( METHOD_4 . method ( || ) ) ) ( METHOD_3 . method ( || ) ) ( METHOD_2 . ) ( METHOD_1 . method ( ( ( ( if { java.lang.Exception throws ) method com.android.jack.ir.ast.JMethod ( run void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 out = METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; out . METHOD_5 ( VAR_2 ) ; out . METHOD_6 ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ; assertEquals ( null , VAR_3 . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . VAR_3 , null ( assertEquals ; ) VAR_1 ( TYPE_4 new = VAR_3 TYPE_4 ; ) ( METHOD_6 . out ; ) VAR_2 ( METHOD_5 . out ; ) STRING_2 ( METHOD_4 . VAR_2 ; ) STRING_1 ( TYPE_3 new = VAR_2 TYPE_3 ; ) VAR_1 ( METHOD_3 = out TYPE_2 ; ) ( METHOD_2 . TYPE_1 = VAR_1 java.io.File { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_1 , VAR_4 ) ; TYPE_1 VAR_5 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_5 ) ; TYPE_2 . assertFalse ( VAR_5 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_5 . METHOD_6 ( ) . size ( ) ) ; METHOD_7 ( VAR_3 , VAR_5 , VAR_1 , true , VAR_4 ) ; } } ; ) VAR_4 , true , VAR_1 , VAR_5 , VAR_3 ( METHOD_7 ; ) ) ( size . ) ( METHOD_6 . VAR_5 , ) ( size . VAR_1 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_5 . VAR_5 ( assertFalse . TYPE_2 ; ) VAR_5 ( assertNotNull . TYPE_2 ; ) VAR_2 ( METHOD_4 = VAR_5 TYPE_1 ; ) VAR_4 , VAR_1 , VAR_3 ( METHOD_3 ; ) ( METHOD_2 . VAR_2 = VAR_1 > java.lang.String < java.util.List { ) ( METHOD_1 void public 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 request ) { int VAR_2 = ( VAR_1 ) ? + 1 : - 1 ; switch ( request . type ) { case VAR_3 : case VAR_4 : VAR_5 += VAR_2 ; break ; case VAR_6 : VAR_5 += VAR_2 ; VAR_7 += VAR_2 ; break ; case VAR_8 : break ; case VAR_9 : default : android.util.Log . METHOD_2 ( VAR_10 . TAG , ( STRING_1 + ( request . type ) ) ) ; break ; } } } } ; break ; ) ) ) type . request ( + STRING_1 ( , TAG . VAR_10 ( METHOD_2 . android.util.Log : default : VAR_9 case ; break : VAR_8 case ; break ; VAR_2 += VAR_7 ; VAR_2 += VAR_5 : VAR_6 case ; break ; VAR_2 += VAR_5 : VAR_4 case : VAR_3 case { ) type . request ( switch ; 1 - : 1 + ? ) VAR_1 ( = VAR_2 int { ) request TYPE_1 , VAR_1 boolean ( METHOD_1 void private 
public static void run ( ) { TYPE_1 . METHOD_1 ( VAR_1 class ) ; java.lang.System.out.println ( STRING_1 ) ; if ( TYPE_2 . METHOD_2 ( ) ) { java.lang.System.out.println ( STRING_2 ) ; } if ( TYPE_2 . METHOD_3 ( ) ) { java.lang.System.out.println ( STRING_3 ) ; } TYPE_2 . set ( 0 ) ; TYPE_2 . set ( 1 ) ; TYPE_2 . set ( 2 ) ; TYPE_2 . set ( 4 ) ; TYPE_2 . set ( 8 ) ; } } ; ) 8 ( set . TYPE_2 ; ) 4 ( set . TYPE_2 ; ) 2 ( set . TYPE_2 ; ) 1 ( set . TYPE_2 ; ) 0 ( set . TYPE_2 } ; ) STRING_3 ( java.lang.System.out.println { ) ) ( METHOD_3 . TYPE_2 ( if } ; ) STRING_2 ( java.lang.System.out.println { ) ) ( METHOD_2 . TYPE_2 ( if ; ) STRING_1 ( java.lang.System.out.println ; ) class VAR_1 ( METHOD_1 . TYPE_1 { ) ( run void static public 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; try { TYPE_3 VAR_4 = VAR_3 . METHOD_4 ( VAR_1 ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( STRING_1 , VAR_5 ) ; } VAR_2 = new TYPE_4 ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) VAR_6 , e , STRING_1 ( TYPE_2 new throw { ) e android.os.RemoteException ( catch } ; ) VAR_4 ( TYPE_4 new = VAR_2 } ; ) VAR_5 , STRING_1 ( TYPE_2 new throw { ) null == VAR_4 ( if ; ) VAR_1 ( METHOD_4 . VAR_3 = VAR_4 TYPE_3 { try ; ) ( METHOD_3 { ) ) ) ) ( METHOD_2 . VAR_3 ( ! ( || ) null == ) VAR_2 ( ( ( if { TYPE_2 throws ) VAR_1 int ( METHOD_1 TYPE_1 public 
private static void METHOD_1 ( java.lang.Object expected , java.lang.String VAR_1 ) { java.lang.String source = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ; TYPE_1 . METHOD_2 ( expected , source , STRING_12 ) ; } } ; ) STRING_12 , source , expected ( METHOD_2 . TYPE_1 ; STRING_11 + ) STRING_10 + ) STRING_9 + ) STRING_8 + ) STRING_7 + ) STRING_6 + ) VAR_1 + ) ) STRING_5 + ) STRING_4 + ) STRING_3 + STRING_2 ( ( ( + STRING_1 ( ( ( ( ( ( ( = source java.lang.String { ) VAR_1 java.lang.String , expected java.lang.Object ( METHOD_1 void static private 
static void METHOD_1 ( ) { TYPE_1 VAR_1 ; VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) ; java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; VAR_1 = new TYPE_1 ( STRING_5 , STRING_6 ) ; java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) ; try { java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . println ( STRING_7 ) ; } } } } ; ) STRING_7 ( println . VAR_3 { ) VAR_2 TYPE_2 ( catch } ; ) ) ) ) ( METHOD_2 . VAR_1 ( + STRING_4 ( ( java.lang.System.out.println { try ; ) ) VAR_1 + STRING_3 ( ( java.lang.System.out.println ; ) STRING_6 , STRING_5 ( TYPE_1 new = VAR_1 ; ) ) ) ) ( METHOD_2 . VAR_1 ( + STRING_4 ( ( java.lang.System.out.println ; ) ) VAR_1 + STRING_3 ( ( java.lang.System.out.println ; ) STRING_2 , STRING_1 ( TYPE_1 new = VAR_1 ; VAR_1 TYPE_1 { ) ( METHOD_1 void static 
public boolean METHOD_1 ( ) throws TYPE_1 { if ( ( TYPE_2 . METHOD_2 ( ) ) < = INT_1 ) { return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; } else { return device . METHOD_3 ( new TYPE_3 ( ) . text ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; } } } } ; ) ( METHOD_5 . ) ) ) VAR_1 + STRING_1 ( ( text . ) ( TYPE_3 new ( METHOD_3 . device return { else } ; ) ( METHOD_5 . ) ) ) VAR_1 + STRING_1 ( ( METHOD_4 . ) ( TYPE_3 new ( METHOD_3 . device return { ) INT_1 = < ) ) ( METHOD_2 . TYPE_2 ( ( if { TYPE_1 throws ) ( METHOD_1 boolean public 
public java.lang.Class METHOD_1 ( java.lang.String name , java.util.List < java.lang.Throwable > VAR_1 ) { for ( TYPE_1 element : VAR_2 ) { TYPE_2 VAR_3 = VAR_4 ; if ( VAR_3 ! = null ) { java.lang.Class VAR_5 = VAR_3 . METHOD_2 ( name , VAR_6 , VAR_1 ) ; if ( VAR_5 ! = null ) { return VAR_5 ; } } } if ( ( VAR_7 ) ! = null ) { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_7 ) ) ; } return null ; } } ; null return } ; ) ) VAR_7 ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_1 { ) null = ! ) VAR_7 ( ( if } } } ; VAR_5 return { ) null = ! VAR_5 ( if ; ) VAR_1 , VAR_6 , name ( METHOD_2 . VAR_3 = VAR_5 java.lang.Class { ) null = ! VAR_3 ( if ; VAR_4 = VAR_3 TYPE_2 { ) VAR_2 : element TYPE_1 ( for { ) VAR_1 > java.lang.Throwable < java.util.List , name java.lang.String ( METHOD_1 java.lang.Class public 
private TYPE_1 METHOD_1 ( char VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = VAR_4 ; if ( VAR_2 ) { if ( VAR_5 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_5 ; } else if ( VAR_6 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_6 ; } } else { if ( VAR_7 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_7 ; } else if ( VAR_8 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_8 ; } } return VAR_3 ; } } ; VAR_3 return } } ; VAR_8 = VAR_3 { ) ) VAR_1 ( METHOD_2 . VAR_8 ( if else } ; VAR_7 = VAR_3 { ) ) VAR_1 ( METHOD_2 . VAR_7 ( if { else } } ; VAR_6 = VAR_3 { ) ) VAR_1 ( METHOD_2 . VAR_6 ( if else } ; VAR_5 = VAR_3 { ) ) VAR_1 ( METHOD_2 . VAR_5 ( if { ) VAR_2 ( if ; VAR_4 = VAR_3 TYPE_1 { ) VAR_2 boolean , VAR_1 char ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , float [ ] VAR_3 ) { assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( VAR_4 ) ) ; float [ ] VAR_5 = ( ( float [ ] ) ( VAR_1 . METHOD_2 ( VAR_6 ) ) ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { assertEquals ( VAR_3 [ i ] , VAR_5 [ i ] , FLOAT_1 ) ; } } } } ; ) FLOAT_1 , ] i [ VAR_5 , ] i [ VAR_3 ( assertEquals { ) ++ i ; ) length . VAR_3 ( < i ; 0 = i int ( for ; ) ) ) VAR_6 ( METHOD_2 . VAR_1 ( ) ] [ float ( ( = VAR_5 ] [ float ; ) ) VAR_4 ( METHOD_2 . VAR_1 , VAR_2 ( assertEquals { ) VAR_3 ] [ float , VAR_2 boolean , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) , VAR_2 ) ) ) ; if ( VAR_1 == null ) { errln ( STRING_2 ) ; } } catch ( TYPE_3 ex ) { METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) ; } } } } ; ) ) ) ) ( getMessage . ex ( + STRING_3 ( ( METHOD_4 { ) ex TYPE_3 ( catch } } ; ) STRING_2 ( errln { ) null == VAR_1 ( if ; ) ) ) VAR_2 , ) ( METHOD_3 . TYPE_2 , STRING_1 ( METHOD_2 . TYPE_1 ( ) TYPE_1 ( ( = VAR_1 TYPE_1 { try { ) ( METHOD_1 void public 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) , STRING_3 ) ) & & ( ! ( TYPE_3 . METHOD_4 ( STRING_4 ) ) ) ) { METHOD_5 ( STRING_5 ) ; } else if ( TYPE_1 . METHOD_6 ( TYPE_2 . METHOD_3 ( STRING_6 , STRING_2 ) , STRING_7 ) ) { METHOD_5 ( STRING_8 ) ; } } } } ; ) STRING_8 ( METHOD_5 { ) ) STRING_7 , ) STRING_2 , STRING_6 ( METHOD_3 . TYPE_2 ( METHOD_6 . TYPE_1 ( if else } ; ) STRING_5 ( METHOD_5 { ) ) ) ) STRING_4 ( METHOD_4 . TYPE_3 ( ! ( & & ) ) STRING_3 , ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_2 ( METHOD_2 . TYPE_1 ( ( if { ) ( METHOD_1 void private 
synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_1 . METHOD_2 ( ) ; java.util.List < TYPE_5 > VAR_5 = METHOD_3 ( VAR_1 ) ; TYPE_5 VAR_6 = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , null , VAR_3 ) ; VAR_5 . METHOD_8 ( VAR_6 ) ; } } ; ) VAR_6 ( METHOD_8 . VAR_5 ; ) VAR_3 , null , ) ( METHOD_7 . VAR_1 , ) ) ( METHOD_6 . VAR_1 , ) ( METHOD_5 . ) ( METHOD_4 . VAR_4 ( TYPE_6 new , VAR_2 ( TYPE_5 new = VAR_6 TYPE_5 ; ) VAR_1 ( METHOD_3 = VAR_5 > TYPE_5 < java.util.List ; ) ( METHOD_2 . VAR_1 = VAR_4 TYPE_4 { ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void synchronized 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 service = METHOD_2 ( ) ; if ( service == null ) return null ; TYPE_1 VAR_2 = service . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { METHOD_3 ( STRING_1 ) ; return null ; } return VAR_2 ; } } ; VAR_2 return } ; null return ; ) STRING_1 ( METHOD_3 { ) null == VAR_2 ( if ; ) VAR_1 ( METHOD_1 . service = VAR_2 TYPE_1 ; null return ) null == service ( if ; ) ( METHOD_2 = service TYPE_3 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_2 , STRING_1 ) ) ) { throw new TYPE_2 ( STRING_2 ) ; } TYPE_3 VAR_3 ; synchronized ( VAR_4 ) { VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_3 == null ) { android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) ; return ; } VAR_5 = true ; } } } } ; true = VAR_5 } ; return ; ) ) VAR_1 + STRING_3 ( , TAG . TYPE_4 ( android.util.Log.w { ) null == VAR_3 ( if ; ) VAR_1 ( METHOD_3 = VAR_3 { ) VAR_4 ( synchronized ; VAR_3 TYPE_3 } ; ) STRING_2 ( TYPE_2 new throw { ) ) ) STRING_1 , VAR_2 ( METHOD_2 ( ! ( if { ) VAR_1 TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 = new java.lang.String [ VAR_2 . length ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_3 [ i ] = VAR_2 [ i ] . getName ( ) ; } VAR_4 = METHOD_3 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_3 = VAR_4 } ; ) ( getName . ] i [ VAR_2 = ] i [ VAR_3 { ) ++ i ; ) length . VAR_2 ( < i ; 0 = i int ( for ; ] length . VAR_2 [ java.lang.String new = VAR_3 ; ) ( METHOD_2 . VAR_1 = VAR_2 ] [ TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public java.lang.String METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { throw new TYPE_1 ( this , VAR_1 ) ; } int VAR_2 = ( count ) - VAR_1 ; if ( VAR_2 < 0 ) { throw new TYPE_1 ( this , VAR_1 ) ; } return VAR_1 == 0 ? this : METHOD_2 ( VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 ( METHOD_2 : this ? 0 == VAR_1 return } ; ) VAR_1 , this ( TYPE_1 new throw { ) 0 < VAR_2 ( if ; VAR_1 - ) count ( = VAR_2 int } ; ) VAR_1 , this ( TYPE_1 new throw { ) 0 < VAR_1 ( if { ) VAR_1 int ( METHOD_1 java.lang.String public 
void METHOD_1 ( ) { if ( ( VAR_1 ) || ( VAR_2 ) ) { if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_3 ( ) ; if ( VAR_4 . METHOD_2 ( ) ) { VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; } } if ( ( VAR_7 ) == null ) { if ( VAR_8 ) android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_1 ) ; if ( VAR_9 ) android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_2 ) ; METHOD_6 ( false , true ) ; } } } } } } ; ) true , false ( METHOD_6 ; ) STRING_2 , com.android.server.am.ActivityManagerService.TAG ( android.util.Log.v ) VAR_9 ( if ; ) STRING_1 , com.android.server.am.ActivityManagerService.TAG ( android.util.Log.v ) VAR_8 ( if { ) null == ) VAR_7 ( ( if } } ; ) VAR_6 ( METHOD_5 . VAR_5 ; ) ( METHOD_4 . VAR_4 { ) ) ( METHOD_2 . VAR_4 ( if ; ) ( METHOD_3 . VAR_3 { ) ) ) ( METHOD_2 . VAR_3 ( ! ( if { ) ) VAR_2 ( || ) VAR_1 ( ( if { ) ( METHOD_1 void 
protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String packageName , java.util.Map < java.lang.String , java.lang.Object > args ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , packageName ) ; java.lang.String result = METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ; return TYPE_2 . METHOD_5 ( result ) ; } } ; ) result ( METHOD_5 . TYPE_2 return ; ) ) VAR_2 ( METHOD_4 . VAR_1 ( METHOD_3 = result java.lang.String ; ) packageName , STRING_4 , STRING_3 , STRING_2 , STRING_1 ( METHOD_2 . TYPE_1 = VAR_1 > java.lang.String < java.util.List { ) args > java.lang.Object , java.lang.String < java.util.Map , packageName java.lang.String ( METHOD_1 > java.lang.Object , java.lang.String < java.util.Map protected 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 msg ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( msg . METHOD_3 ( 0 ) . METHOD_4 ( 0 ) ) ; java.lang.Integer VAR_2 = java.lang.Integer . METHOD_2 ( ( ( VAR_1 . value ) - ( VAR_3 . value ) ) ) ; TYPE_1 VAR_4 = new TYPE_4 ( TYPE_5 . METHOD_5 ( msg . METHOD_6 ( ) , VAR_5 , VAR_6 ) , VAR_2 ) ; return TYPE_6 . METHOD_7 ( VAR_4 ) ; } } ; ) VAR_4 ( METHOD_7 . TYPE_6 return ; ) VAR_2 , ) VAR_6 , VAR_5 , ) ( METHOD_6 . msg ( METHOD_5 . TYPE_5 ( TYPE_4 new = VAR_4 TYPE_1 ; ) ) ) value . VAR_3 ( - ) value . VAR_1 ( ( ( METHOD_2 . java.lang.Integer = VAR_2 java.lang.Integer ; ) ) 0 ( METHOD_4 . ) 0 ( METHOD_3 . msg ( METHOD_2 . TYPE_3 = VAR_1 TYPE_3 { ) msg TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List static private 
public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( obj instanceof TYPE_1 ) ) ) { return false ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ( this ) == VAR_1 ) { return true ; } return ( VAR_2 . equals ( VAR_1 . METHOD_1 ( ) ) ) & & ( VAR_3 . equals ( VAR_1 . METHOD_2 ( ) ) ) ; } } ; ) ) ) ( METHOD_2 . VAR_1 ( equals . VAR_3 ( & & ) ) ) ( METHOD_1 . VAR_1 ( equals . VAR_2 ( return } ; true return { ) VAR_1 == ) this ( ( if ; ) ) obj ( ) TYPE_1 ( ( = VAR_1 TYPE_1 } ; false return { ) ) ) TYPE_1 instanceof obj ( ! ( || ) null == obj ( ( if { ) obj java.lang.Object ( equals boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( true , INT_1 ) ; assertEquals ( STRING_1 , INT_1 , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_4 ( false , 0 ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . server ; ) ( METHOD_6 . VAR_1 ; ) 0 , false ( METHOD_4 . VAR_1 ; ) ) ( METHOD_5 . VAR_1 , INT_1 , STRING_1 ( assertEquals ; ) INT_1 , true ( METHOD_4 . VAR_1 ; ) ) ( METHOD_3 . server , ) ( METHOD_2 . TYPE_3 ( TYPE_2 new = VAR_1 TYPE_2 ; ) 0 ( TYPE_1 new = server TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( null == ( VAR_2 ) ) return true ; if ( null == ( VAR_3 ) ) return false ; for ( TYPE_2 VAR_4 : VAR_3 ) { if ( VAR_4 . METHOD_2 ( VAR_5 ) ) return true ; if ( ! ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) { return false ; } } return true ; } } ; true return } } ; false return { ) ) ) VAR_4 ( METHOD_3 . VAR_1 ( ! ( if ; true return ) ) VAR_5 ( METHOD_2 . VAR_4 ( if { ) VAR_3 : VAR_4 TYPE_2 ( for ; false return ) ) VAR_3 ( == null ( if ; true return ) ) VAR_2 ( == null ( if { ) VAR_1 TYPE_1 ( METHOD_1 boolean public 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } int VAR_2 = this . METHOD_2 ( ) ; int VAR_3 = this . METHOD_3 ( ) ; assert VAR_2 < = VAR_3 ; int VAR_4 = ( VAR_2 < = VAR_3 ) ? VAR_3 - VAR_2 : 0 ; int size = VAR_4 > > 2 ; return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 , VAR_2 , size , size , 0 , ) 1 - ( , this ( TYPE_3 new ( ) TYPE_1 ( ( return ; 2 > > VAR_4 = size int ; 0 : VAR_2 - VAR_3 ? ) VAR_3 = < VAR_2 ( = VAR_4 int ; VAR_3 = < VAR_2 assert ; ) ( METHOD_3 . this = VAR_3 int ; ) ( METHOD_2 . this = VAR_2 int } ; ) STRING_1 ( TYPE_2 new throw { ) ) VAR_1 ( ! ( if { ) ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) throws java.io.IOException , TYPE_1 { final TYPE_2 res = VAR_3 ; final int VAR_4 = res . METHOD_2 ( ) . VAR_4 ; try { METHOD_3 ( res , VAR_1 , VAR_2 ) ; } finally { TYPE_3 . METHOD_4 ( res , VAR_4 ) ; } } } } ; ) VAR_4 , res ( METHOD_4 . TYPE_3 { finally } ; ) VAR_2 , VAR_1 , res ( METHOD_3 { try ; VAR_4 . ) ( METHOD_2 . res = VAR_4 int final ; VAR_3 = res TYPE_2 final { TYPE_1 , java.io.IOException throws ) VAR_2 boolean , VAR_1 int ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 < TYPE_4 > > VAR_1 , long key ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_4 > VAR_3 = VAR_1 . get ( key ) ; if ( VAR_3 ! = null ) { TYPE_4 entry = VAR_3 . get ( ) ; if ( entry ! = null ) { return entry . METHOD_2 ( ) ; } else { VAR_1 . METHOD_3 ( key ) ; } } } return null ; } } ; null return } } } ; ) key ( METHOD_3 . VAR_1 { else } ; ) ( METHOD_2 . entry return { ) null = ! entry ( if ; ) ( get . VAR_3 = entry TYPE_4 { ) null = ! VAR_3 ( if ; ) key ( get . VAR_1 = VAR_3 > TYPE_4 < TYPE_3 { ) VAR_2 ( synchronized { ) key long , VAR_1 > > TYPE_4 < TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_2 , java.lang.Object arg ) { METHOD_3 ( ) ; } } ; VAR_3 . METHOD_5 ( VAR_1 ) ; } } } } ; ) VAR_1 ( METHOD_5 . VAR_3 ; } } ; ) ( METHOD_3 { ) arg java.lang.Object , VAR_2 TYPE_2 ( METHOD_4 void public { ) ( TYPE_1 new = VAR_1 { ) null == ) VAR_1 ( ( if ; ) ( METHOD_3 ; ) ( METHOD_2 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 , new TYPE_2 ( ) , VAR_4 , new TYPE_3 ( ) , VAR_5 . METHOD_3 ( ) ) ; if ( ( VAR_6 ) > = ( VAR_7 ) ) { TYPE_1 . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . TYPE_1 { ) ) VAR_7 ( = > ) VAR_6 ( ( if ; ) ) ( METHOD_3 . VAR_5 , ) ( TYPE_3 new , VAR_4 , ) ( TYPE_2 new , VAR_3 , ) ( METHOD_2 . VAR_2 ( TYPE_1 new = VAR_1 { ) ( METHOD_1 void private 
public void METHOD_1 ( TYPE_1 res ) { int VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ; VAR_4 = new TYPE_2 ( mRS , res , VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; VAR_4 . METHOD_7 ( INT_1 ) ; } } ; ) INT_1 ( METHOD_7 . VAR_4 ; ) VAR_3 ( METHOD_6 . VAR_4 ; ) VAR_1 ( METHOD_5 . VAR_4 ; ) VAR_5 , res , mRS ( TYPE_2 new = VAR_4 ; ) ( METHOD_4 . ) ( METHOD_2 . VAR_2 = VAR_3 int ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_2 = VAR_1 int { ) res TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; assertEquals ( 3 , VAR_1 . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . VAR_1 ; ) ) ( METHOD_7 . VAR_1 , 3 ( assertEquals ; ) ) ) ( METHOD_6 . ) STRING_2 ( METHOD_5 . server ( ) TYPE_2 ( ( = VAR_1 TYPE_2 ; ) ( METHOD_4 . server ; ) ) STRING_1 ( METHOD_3 . ) ( TYPE_1 new ( METHOD_2 . server { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { return ; } if ( METHOD_2 ( 1 ) ) { int VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; } int VAR_3 = METHOD_5 ( VAR_4 , VAR_5 , VAR_6 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) ; METHOD_4 ( VAR_3 , VAR_5 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_2 , VAR_9 ) ; METHOD_7 ( VAR_3 , VAR_5 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) ; } } ; ) VAR_9 , STRING_1 , VAR_8 , VAR_7 ( METHOD_6 ; ) VAR_5 , VAR_3 ( METHOD_7 ; ) VAR_9 , STRING_2 , VAR_8 , VAR_7 ( METHOD_6 ; ) VAR_5 , VAR_3 ( METHOD_4 ; ) VAR_9 , STRING_1 , VAR_8 , VAR_7 ( METHOD_6 ; ) VAR_6 , VAR_5 , VAR_4 ( METHOD_5 = VAR_3 int } ; ) VAR_2 ( METHOD_4 ; ) ( METHOD_3 = VAR_2 int { ) ) 1 ( METHOD_2 ( if } ; return { ) ) VAR_1 ( ! ( if { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( VAR_2 [ 0 ] , session ) ; super . METHOD_1 ( VAR_3 , s , VAR_3 , VAR_1 , fd , callback ) ; } } ; ) callback , fd , VAR_1 , VAR_3 , s , VAR_3 ( METHOD_1 . super ; ) session , ] 0 [ VAR_2 ( METHOD_2 . TYPE_4 { java.lang.Exception throws ) callback TYPE_3 , fd TYPE_2 , VAR_1 TYPE_1 , c int , s int , session int ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 context ) throws java.lang.Exception { super . METHOD_1 ( context ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_1 ( ) ; TYPE_3 . METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; synchronized ( VAR_2 class ) { VAR_3 = null ; } } } } ; null = VAR_3 { ) class VAR_2 ( synchronized ; ) ( METHOD_3 . VAR_1 ; ) ( METHOD_3 . TYPE_3 ; ) ( METHOD_1 . TYPE_2 ; ) ( METHOD_2 ; ) context ( METHOD_1 . super { java.lang.Exception throws ) context TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_2 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_3 response = VAR_4 . METHOD_6 ( ) ; assertEquals ( VAR_5 , response . status ) ; assertEquals ( VAR_1 , VAR_6 . packageName ) ; } } ; ) packageName . VAR_6 , VAR_1 ( assertEquals ; ) status . response , VAR_5 ( assertEquals ; ) ( METHOD_6 . VAR_4 = response TYPE_3 ; ) ( METHOD_5 . VAR_4 ; ) ) ) VAR_1 ( TYPE_2 new ( METHOD_4 . TYPE_1 ( METHOD_3 . ) ) VAR_2 ( METHOD_2 . TYPE_1 , VAR_3 ( org.mockito.Mockito.verify { ) VAR_2 int , VAR_1 java.lang.String ( METHOD_1 void private 
public static void METHOD_1 ( java.io.File [ ] VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , boolean VAR_4 , boolean VAR_5 , float VAR_6 ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) ; } } ; ) ) ) null ( ) ] [ TYPE_3 ( ( , ) ) null ( ) TYPE_2 ( ( , VAR_6 , VAR_5 , VAR_4 , VAR_3 , VAR_2 , VAR_1 ( METHOD_1 . TYPE_1 { java.lang.Exception throws ) VAR_6 float , VAR_5 boolean , VAR_4 boolean , VAR_3 java.io.File , VAR_2 ] [ java.io.File , VAR_1 ] [ java.io.File ( METHOD_1 void static public 
public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { return ; } TYPE_1 VAR_3 = new TYPE_1 ( mContext ) ; for ( TYPE_2 test : VAR_4 ) { assertEquals ( ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) + ( test . address ) ) , VAR_6 , ( METHOD_3 ( test . address ) ? VAR_7 : VAR_3 . METHOD_4 ( test . address , VAR_5 ) ) ) ; } } } } ; ) ) ) VAR_5 , address . test ( METHOD_4 . VAR_3 : VAR_7 ? ) address . test ( METHOD_3 ( , VAR_6 , ) ) address . test ( + ) STRING_2 + ) ) VAR_5 ( + STRING_1 ( ( ( ( assertEquals { ) VAR_4 : test TYPE_2 ( for ; ) mContext ( TYPE_1 new = VAR_3 TYPE_1 } ; return { ) ) ) VAR_2 ( METHOD_2 . VAR_1 ( ! ( if { ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 device ) { try { java.lang.String VAR_1 = device . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 ! = null ) { TYPE_1 VAR_4 = new TYPE_1 ( device ) ; boolean result = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_4 ( ) ; if ( result ) { return VAR_4 ; } } } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_5 . TAG , STRING_1 , e ) ; } return null ; } } ; null return } ; ) e , STRING_1 , TAG . VAR_5 ( android.util.Log.e { ) e java.lang.Exception ( catch } } } ; VAR_4 return { ) result ( if ; ) ( METHOD_4 . VAR_2 ; ) VAR_2 , VAR_1 ( METHOD_3 . VAR_4 = result boolean ; ) device ( TYPE_1 new = VAR_4 TYPE_1 { ) null = ! VAR_2 ( if ; ) VAR_1 ( METHOD_1 . VAR_3 = VAR_2 TYPE_3 ; ) ( METHOD_2 . device = VAR_1 java.lang.String { try { ) device TYPE_2 ( METHOD_1 TYPE_1 public 
private static byte [ ] METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { byte [ ] VAR_2 = new byte [ VAR_1 . size ( ) ] ; int i = 0 ; for ( TYPE_1 b : VAR_1 ) { VAR_2 [ ( i ++ ) ] = b ; } return VAR_2 ; } } ; VAR_2 return } ; b = ] ) ++ i ( [ VAR_2 { ) VAR_1 : b TYPE_1 ( for ; 0 = i int ; ] ) ( size . VAR_1 [ byte new = VAR_2 ] [ byte { ) VAR_1 > TYPE_1 < java.util.ArrayList ( METHOD_1 ] [ byte static private 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 = ( VAR_5 ) ++ ; if ( VAR_6 ) { android.util.Log.v ( VAR_7 . TAG , ( STRING_1 + ( VAR_3 . METHOD_2 ( ) ) ) ) ; } METHOD_3 ( VAR_3 ) ; VAR_8 . METHOD_4 ( VAR_3 ) ; } for ( java.lang.String VAR_9 : VAR_2 ) { VAR_10 . METHOD_5 ( VAR_9 ) ; } } } } ; ) VAR_9 ( METHOD_5 . VAR_10 { ) VAR_2 : VAR_9 java.lang.String ( for } ; ) VAR_3 ( METHOD_4 . VAR_8 ; ) VAR_3 ( METHOD_3 } ; ) ) ) ) ( METHOD_2 . VAR_3 ( + STRING_1 ( , TAG . VAR_7 ( android.util.Log.v { ) VAR_6 ( if ; ++ ) VAR_5 ( = VAR_4 { ) VAR_1 : VAR_3 TYPE_1 ( for { ) VAR_2 > java.lang.String < java.util.Set , VAR_1 > TYPE_1 < java.util.List ( METHOD_1 void private 
public void run ( ) { TYPE_1 VAR_1 = ( METHOD_1 ( ) ) ? VAR_2 . METHOD_2 ( false ) : METHOD_3 ( ) ; if ( android.util.Log . METHOD_4 ( VAR_3 , VAR_4 ) ) { TYPE_2 . log ( ( STRING_1 + VAR_5 ) ) ; TYPE_2 . log ( ( STRING_2 + VAR_1 ) ) ; } METHOD_5 ( VAR_1 ) ; this . VAR_6 . METHOD_6 ( ) ; if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_7 ( VAR_1 ) ; } } } } ; ) VAR_1 ( METHOD_7 . VAR_2 { ) null = ! ) VAR_2 ( ( if ; ) ( METHOD_6 . VAR_6 . this ; ) VAR_1 ( METHOD_5 } ; ) ) VAR_1 + STRING_2 ( ( log . TYPE_2 ; ) ) VAR_5 + STRING_1 ( ( log . TYPE_2 { ) ) VAR_4 , VAR_3 ( METHOD_4 . android.util.Log ( if ; ) ( METHOD_3 : ) false ( METHOD_2 . VAR_2 ? ) ) ( METHOD_1 ( = VAR_1 TYPE_1 { ) ( run void public 
public static boolean METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; } } } } ; ) false , VAR_3 ( METHOD_4 . ) context ( METHOD_5 . TYPE_3 return { else } ; ) VAR_3 ( METHOD_4 . VAR_2 return { ) ) context ( METHOD_3 . TYPE_3 ( if ; ) VAR_1 ( METHOD_2 . TYPE_2 { ) context TYPE_1 ( METHOD_1 boolean static public 
static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_1 = new TYPE_4 ( null , method , call , 0 ) ; method . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_3 ( ) ; return name ; } } ; name return ; ) ( METHOD_3 . VAR_1 = name java.lang.String ; ) VAR_1 ( METHOD_2 . method ; ) 0 , call , method , null ( TYPE_4 new = VAR_1 TYPE_4 ; ) TYPE_3 instanceof call ( || ) TYPE_2 instanceof call ( assert { ) call TYPE_1 , method TYPE_1 ( METHOD_1 java.lang.String static 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 call , TYPE_3 callback , boolean VAR_2 ) { org.mockito.Mockito.verify ( callback ) . METHOD_2 ( call ) ; org.mockito.Mockito.verify ( call . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ( VAR_2 ? 1 : 0 ) ) ) . METHOD_5 ( ) ; assertEquals ( call . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . VAR_1 , ) ( METHOD_3 . call ( assertEquals ; ) ( METHOD_5 . ) ) ) 0 : 1 ? VAR_2 ( ( METHOD_4 . TYPE_4 , ) ( METHOD_3 . call ( org.mockito.Mockito.verify ; ) call ( METHOD_2 . ) callback ( org.mockito.Mockito.verify { ) VAR_2 boolean , callback TYPE_3 , call TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void static private 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.Class < ? > VAR_4 , TYPE_3 < java.lang.String > VAR_5 , TYPE_4 VAR_6 , int VAR_7 , boolean VAR_8 ) { if ( new TYPE_5 ( VAR_4 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) { return new TYPE_6 ( VAR_1 , VAR_4 ) ; } else { return null ; } } } } ; null return { else } ; ) VAR_4 , VAR_1 ( TYPE_6 new return { ) ) class . ] [ java.lang.String , STRING_1 , class . void , true ( METHOD_2 . ) VAR_4 ( TYPE_5 new ( if { ) VAR_8 boolean , VAR_7 int , VAR_6 TYPE_4 , VAR_5 > java.lang.String < TYPE_3 , VAR_4 > ? < java.lang.Class , VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public int METHOD_1 ( ) { if ( METHOD_2 ( ) ) { int VAR_1 = METHOD_3 ( ) . METHOD_1 ( ) ; if ( ( VAR_1 & ( VAR_2 ) ) ! = 0 ) { VAR_1 & = ~ ( ( VAR_2 ) | ( VAR_3 ) ) ; } return ( ( VAR_4 ) | ( VAR_5 ) ) | VAR_1 ; } int VAR_6 = INT_1 ; int VAR_7 = TYPE_1 . METHOD_4 ( this , ( ( VAR_8 ) & VAR_6 ) ) ; return VAR_7 & VAR_6 ; } } ; VAR_6 & VAR_7 return ; ) ) VAR_6 & ) VAR_8 ( ( , this ( METHOD_4 . TYPE_1 = VAR_7 int ; INT_1 = VAR_6 int } ; VAR_1 | ) ) VAR_5 ( | ) VAR_4 ( ( return } ; ) ) VAR_3 ( | ) VAR_2 ( ( ~ = & VAR_1 { ) 0 = ! ) ) VAR_2 ( & VAR_1 ( ( if ; ) ( METHOD_1 . ) ( METHOD_3 = VAR_1 int { ) ) ( METHOD_2 ( if { ) ( METHOD_1 int public 
private static void METHOD_1 ( TYPE_1 context , java.util.List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { boolean VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; boolean VAR_4 = ! ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ; VAR_1 . METHOD_6 ( new TYPE_5 ( context , TYPE_6 . METHOD_7 ( context , VAR_2 . METHOD_8 ( ) , TYPE_7 . METHOD_9 ( VAR_2 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) ; } } ; ) ) VAR_6 , VAR_5 , ) VAR_4 , VAR_3 , ) VAR_2 ( METHOD_9 . TYPE_7 , ) ( METHOD_8 . VAR_2 , context ( METHOD_7 . TYPE_6 , context ( TYPE_5 new ( METHOD_6 . VAR_1 ; ) ) ) ( METHOD_5 . ) ( METHOD_2 . VAR_2 ( METHOD_4 . TYPE_4 ( ! = VAR_4 boolean ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_2 = VAR_3 boolean { ) VAR_2 TYPE_3 , VAR_1 > TYPE_2 < java.util.List , context TYPE_1 ( METHOD_1 void static private 
public void METHOD_1 ( final boolean VAR_1 , final int VAR_2 , final TYPE_1 VAR_3 ) { if ( METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } } ) ; return ; } VAR_5 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_1 . ) ( METHOD_4 . VAR_5 } ; return ; ) } } ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_1 { ) ( run void public { ) ( java.lang.Runnable new ( METHOD_3 . VAR_4 { ) ) ( METHOD_2 ( if { ) VAR_3 TYPE_1 final , VAR_2 int final , VAR_1 boolean final ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.io.File VAR_3 = java.io.File . METHOD_2 ( STRING_6 , STRING_7 ) ; TYPE_2 VAR_4 = new TYPE_3 ( new TYPE_4 ( VAR_3 ) ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( ) ; TYPE_5 VAR_5 = VAR_2 . METHOD_5 ( new TYPE_6 ( VAR_3 ) ) ; assertNotNull ( VAR_5 ) ; VAR_3 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . VAR_3 ; ) VAR_5 ( assertNotNull ; ) ) VAR_3 ( TYPE_6 new ( METHOD_5 . VAR_2 = VAR_5 TYPE_5 ; ) ( METHOD_4 . VAR_4 ; ) VAR_1 ( METHOD_3 . VAR_4 ; ) ) VAR_3 ( TYPE_4 new ( TYPE_3 new = VAR_4 TYPE_2 ; ) STRING_7 , STRING_6 ( METHOD_2 . java.io.File = VAR_3 java.io.File ; ) ( TYPE_1 new = VAR_2 TYPE_1 ; ) STRING_5 + ) STRING_4 + ) STRING_3 + STRING_2 ( ( ( + STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
private synchronized boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_1 VAR_1 ) { if ( VAR_2 ) android.util.Log.d ( TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) ) ; if ( ( ( VAR_3 ) == false ) & & ( ( VAR_4 . METHOD_1 ( device , VAR_1 ) ) == true ) ) { VAR_3 = true ; return true ; } return false ; } } ; false return } ; true return ; true = VAR_3 { ) ) true == ) ) VAR_1 , device ( METHOD_1 . VAR_4 ( ( & & ) false == ) VAR_3 ( ( ( if ; ) ) ) VAR_3 ( + ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( , TAG ( android.util.Log.d ) VAR_2 ( if { ) VAR_1 TYPE_1 , device android.bluetooth.BluetoothDevice ( METHOD_1 boolean synchronized private 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Throwable VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ; if ( VAR_3 ! = null ) { VAR_6 = true ; } METHOD_3 ( VAR_4 ) ; } } ; ) VAR_4 ( METHOD_3 } ; true = VAR_6 { ) null = ! VAR_3 ( if ; ) VAR_4 , VAR_5 , STRING_1 , VAR_3 ( log . TYPE_1 ; ) VAR_2 , VAR_1 ( METHOD_2 = VAR_4 java.lang.String { ) VAR_3 java.lang.Throwable , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; while ( VAR_3 ! = null ) { java.lang.String VAR_4 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) ; VAR_3 = VAR_2 . METHOD_2 ( ) ; } TYPE_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . VAR_1 ( METHOD_3 . TYPE_2 } ; ) ( METHOD_2 . VAR_2 = VAR_3 ; ) VAR_3 , VAR_4 ( assertEquals . TYPE_2 ; ) ( METHOD_2 . VAR_1 = VAR_4 java.lang.String { ) null = ! VAR_3 ( while ; ) ( METHOD_2 . VAR_2 = VAR_3 java.lang.String { java.io.IOException throws ) VAR_2 TYPE_1 , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_5 ( VAR_1 , INT_3 , STRING_1 ) ; METHOD_6 ( result ) ; } } ; ) result ( METHOD_6 ; ) STRING_1 , INT_3 , VAR_1 ( METHOD_5 . TYPE_3 = result TYPE_1 ; ) ) INT_2 ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_1 ; ) ) INT_1 ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_1 ; ) ( METHOD_2 . TYPE_2 = VAR_1 > TYPE_1 < java.util.List { ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_1 . METHOD_2 ( true , true , true ) ; } else if ( VAR_3 ) { VAR_1 . METHOD_2 ( false , false , true ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( VAR_4 ) ) ) ; } else { VAR_1 . METHOD_2 ( true , ( ! ( VAR_4 ) ) , true ) ; } } } } ; ) true , ) ) VAR_4 ( ! ( , true ( METHOD_2 . VAR_1 { else } ; ) ) ) VAR_4 ( ! ( ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . VAR_1 ; ) true , false , false ( METHOD_2 . VAR_1 { ) VAR_3 ( if else } ; ) true , true , true ( METHOD_2 . VAR_1 { ) VAR_2 ( if { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertFalse ( VAR_4 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_4 . METHOD_6 ( ) . size ( ) ) ; METHOD_7 ( VAR_2 , VAR_4 , VAR_1 , false , VAR_3 ) ; } } ; ) VAR_3 , false , VAR_1 , VAR_4 , VAR_2 ( METHOD_7 ; ) ) ( size . ) ( METHOD_6 . VAR_4 , ) ( size . VAR_1 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_5 . VAR_4 ( assertFalse . TYPE_2 ; ) VAR_4 ( assertNotNull . TYPE_2 ; ) VAR_2 ( METHOD_4 = VAR_4 TYPE_1 ; ) VAR_3 , VAR_1 , VAR_2 ( METHOD_3 ; ) ( METHOD_2 . VAR_2 = VAR_1 > java.lang.String < java.util.List { ) ( METHOD_1 void public 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 < TYPE_6 > VAR_4 = TYPE_5 . of ( VAR_1 , VAR_2 , VAR_3 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_1 ; } public TYPE_5 < TYPE_6 > METHOD_3 ( ) { return VAR_4 ; } public TYPE_5 < TYPE_6 > METHOD_4 ( ) { return VAR_4 . METHOD_5 ( 1 , VAR_4 . size ( ) ) ; } } ; } } ; } } ; ) ) ( size . VAR_4 , 1 ( METHOD_5 . VAR_4 return { ) ( METHOD_4 > TYPE_6 < TYPE_5 public } ; VAR_4 return { ) ( METHOD_3 > TYPE_6 < TYPE_5 public } ; VAR_1 return { ) ( METHOD_2 TYPE_2 public { ) ( TYPE_1 new return ; ) VAR_3 , VAR_2 , VAR_1 ( of . TYPE_5 = VAR_4 > TYPE_6 < TYPE_5 { ) VAR_3 TYPE_4 , VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 ) ; if ( VAR_4 . METHOD_3 ( ) ) { TYPE_4 VAR_5 = new TYPE_4 ( ) ; try { VAR_5 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_4 , TYPE_5 . METHOD_6 ( ) ) ; return VAR_5 ; } catch ( java.io.IOException e ) { } } return null ; } } ; null return } } { ) e java.io.IOException ( catch } ; VAR_5 return ; ) ) ( METHOD_6 . TYPE_5 , VAR_4 ( METHOD_5 . VAR_5 ; ) VAR_4 ( METHOD_4 . VAR_5 { try ; ) ( TYPE_4 new = VAR_5 TYPE_4 { ) ) ( METHOD_3 . VAR_4 ( if ; ) VAR_2 ( TYPE_3 new = VAR_4 TYPE_3 ; ) VAR_3 ( METHOD_2 . VAR_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( final boolean VAR_1 ) { if ( METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 ) ; } } ) ; return ; } VAR_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_1 . ) ( METHOD_4 . VAR_3 } ; return ; ) } } ; ) VAR_1 ( METHOD_1 { ) ( run void public { ) ( java.lang.Runnable new ( METHOD_3 . VAR_2 { ) ) ( METHOD_2 ( if { ) VAR_1 boolean final ( METHOD_1 void public 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , TYPE_1 . METHOD_4 ( device . METHOD_5 ( ) ) , VAR_1 ) ; if ( VAR_2 ) { android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) ) ; } return true ; } } ; true return } ; ) ) VAR_1 + ) STRING_2 + ) device + STRING_1 ( ( ( , TAG . VAR_3 ( android.util.Log.v { ) VAR_2 ( if ; ) VAR_1 , ) ) ( METHOD_5 . device ( METHOD_4 . TYPE_1 , ) ( METHOD_3 ( METHOD_2 . TYPE_1 { ) VAR_1 int , device android.bluetooth.BluetoothDevice ( METHOD_1 boolean public 
public static int METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } } } } ; ) VAR_4 , VAR_3 ( METHOD_4 . ) context ( METHOD_5 . TYPE_3 return { else } ; ) VAR_4 , VAR_3 ( METHOD_4 . VAR_2 return { ) ) context ( METHOD_3 . TYPE_3 ( if ; ) VAR_1 ( METHOD_2 . TYPE_2 { ) context TYPE_1 ( METHOD_1 int static public 
static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call , int VAR_1 ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_2 = new TYPE_4 ( method , call , VAR_1 ) ; method . METHOD_2 ( VAR_2 ) ; java.lang.String name = VAR_2 . METHOD_3 ( ) ; return name ; } } ; name return ; ) ( METHOD_3 . VAR_2 = name java.lang.String ; ) VAR_2 ( METHOD_2 . method ; ) VAR_1 , call , method ( TYPE_4 new = VAR_2 TYPE_4 ; ) TYPE_3 instanceof call ( || ) TYPE_2 instanceof call ( assert { ) VAR_1 int , call TYPE_1 , method TYPE_1 ( METHOD_1 java.lang.String static 
static void METHOD_1 ( int VAR_1 , float x , float y , float VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_2 . Float ( ( x - VAR_2 ) , ( y - VAR_2 ) , ( VAR_2 * 2 ) , ( VAR_2 * 2 ) ) , false ) ; } } ; ) false , ) ) 2 * VAR_2 ( , ) 2 * VAR_2 ( , ) VAR_2 - y ( , ) VAR_2 - x ( ( Float . TYPE_2 new ( append . VAR_6 } ; return { ) null == VAR_4 ( if ; ) VAR_1 ( METHOD_2 . VAR_5 = VAR_4 TYPE_1 { ) VAR_3 int , VAR_2 float , y float , x float , VAR_1 int ( METHOD_1 void static 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { TYPE_1 config = new TYPE_1 ( ) ; VAR_1 = in . METHOD_2 ( ) ; VAR_2 = ( ( TYPE_3 ) ( in . METHOD_3 ( null ) ) ) ; VAR_3 = in . METHOD_4 ( ) ; VAR_4 = TYPE_4 . METHOD_5 ( in . METHOD_2 ( ) ) ; return config ; } } ; config return ; ) ) ( METHOD_2 . in ( METHOD_5 . TYPE_4 = VAR_4 ; ) ( METHOD_4 . in = VAR_3 ; ) ) ) null ( METHOD_3 . in ( ) TYPE_3 ( ( = VAR_2 ; ) ( METHOD_2 . in = VAR_1 ; ) ( TYPE_1 new = config TYPE_1 { ) in TYPE_2 ( METHOD_1 TYPE_1 public 
private TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String name , TYPE_2 type , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( id , name , type , VAR_1 ) ; VAR_3 . METHOD_2 ( id , VAR_2 ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) VAR_2 , id ( METHOD_2 . VAR_3 ; ) VAR_1 , type , name , id ( TYPE_1 new = VAR_2 { ) null == VAR_2 ( if ; ) id ( get . VAR_3 = VAR_2 TYPE_1 { ) VAR_1 java.lang.String , type TYPE_2 , name java.lang.String , id java.lang.String ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) , org.mockito.Matchers . METHOD_7 ( ) ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) ) ; assertEquals ( VAR_2 , false ) ; } } ; ) false , VAR_2 ( assertEquals ; ) ) class VAR_5 ( METHOD_6 . org.mockito.Matchers ( METHOD_8 . ) ) ( METHOD_4 . TYPE_1 , VAR_1 ( org.mockito.Mockito.verify ; ) ) ( METHOD_7 . org.mockito.Matchers , ) class VAR_5 ( METHOD_6 . org.mockito.Matchers ( METHOD_5 . ) ) ( METHOD_4 . TYPE_1 , VAR_1 ( org.mockito.Mockito.verify ; ) VAR_4 ( METHOD_3 . VAR_3 = VAR_2 boolean ; ) null ( thenReturn . ) ) ( METHOD_2 . VAR_1 ( when . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
