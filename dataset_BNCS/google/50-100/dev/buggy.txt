private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1 . NameKey name ) { try { return VAR_1 . METHOD_1 ( name . get ( ) ) ; } catch ( TYPE_2 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } } } ; null return ; ) err , ) ) ) ( get . name ( + STRING_1 ( ( METHOD_2 . VAR_2 { ) err TYPE_2 ( catch } ; ) ) ( get . name ( METHOD_1 . VAR_1 return { try { ) name NameKey . TYPE_1 final ( METHOD_1 org.eclipse.jgit.lib.Repository private 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; } } ; ) null , null , ) ) ( METHOD_3 . VAR_1 , class VAR_5 ( METHOD_2 . TYPE_1 , ) ) ( METHOD_3 . VAR_1 , class VAR_4 ( METHOD_2 . TYPE_1 , ) ) ) ) ( METHOD_3 . VAR_1 , class VAR_3 ( METHOD_2 . TYPE_1 ( ! ( , true , VAR_2 ( TYPE_3 new return { ) VAR_2 java.lang.String , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_5 ) ) ; TYPE_6 . Change change = TYPE_7 . get ( VAR_1 ) ; TYPE_8 . NameKey name = change . getProject ( ) ; if ( ! ( VAR_2 . METHOD_4 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) { return VAR_1 . METHOD_5 ( ) ; } return VAR_7 ; } } ; VAR_7 return } ; ) ( METHOD_5 . VAR_1 return { ) ) ) VAR_6 , ) ) ( get . name ( create . TYPE_9 ( METHOD_4 . VAR_2 ( ! ( if ; ) ( getProject . change = name NameKey . TYPE_8 ; ) VAR_1 ( get . TYPE_7 = change Change . TYPE_6 ; ) ) VAR_5 ( ) TYPE_5 ( ( = VAR_4 TYPE_5 ; ) ( METHOD_3 . VAR_3 = VAR_2 TYPE_4 ; ) ( METHOD_2 . VAR_1 { TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( p ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; } } ; ) true , ) ( TYPE_3 new , VAR_2 , ) ) ( METHOD_4 . VAR_2 ( org.eclipse.jgit.revwalk.RevWalk new , repo ( TYPE_1 new return ; ) ( METHOD_3 . repo = VAR_2 TYPE_2 ; ) p ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository { java.io.IOException throws ) p com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 private 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2 = new TYPE_4 < > ( ) ; try { for ( TYPE_5 VAR_3 : VAR_4 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; } } catch ( TYPE_3 e ) { VAR_2 . METHOD_2 ( e . METHOD_4 ( ) ) ; throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) VAR_2 , ) ( getMessage . e ( TYPE_3 new throw ; ) ) ( METHOD_4 . e ( METHOD_2 . VAR_2 { ) e TYPE_3 ( catch } } ; ) ) VAR_1 ( METHOD_3 . VAR_3 ( METHOD_2 . VAR_2 { ) VAR_4 : VAR_3 TYPE_5 ( for { try ; ) ( > < TYPE_4 new = VAR_2 > TYPE_1 < java.util.List { TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List public 
public java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey project , final com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 VAR_1 = new TYPE_1 ( type . getRevision ( ) ) ; final java.util.Map < java.lang.String , java.lang.String > p = new TYPE_2 < java.lang.String , java.lang.String > ( ) ; p . put ( STRING_1 , METHOD_2 ( project . get ( ) ) ) ; p . put ( STRING_2 , METHOD_2 ( ps . getRevision ( ) . get ( ) ) ) ; return ( VAR_2 ) + ( VAR_1 . METHOD_3 ( p ) ) ; } } ; ) ) p ( METHOD_3 . VAR_1 ( + ) VAR_2 ( return ; ) ) ) ( get . ) ( getRevision . ps ( METHOD_2 , STRING_2 ( put . p ; ) ) ) ( get . project ( METHOD_2 , STRING_1 ( put . p ; ) ( > java.lang.String , java.lang.String < TYPE_2 new = p > java.lang.String , java.lang.String < java.util.Map final ; ) ) ( getRevision . type ( TYPE_1 new = VAR_1 TYPE_1 { ) ps com.google.gerrit.reviewdb.client.PatchSet final , project com.google.gerrit.reviewdb.client.Project.NameKey final ( METHOD_1 java.lang.String public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , java.io.IOException { TYPE_2 p = VAR_2 . get ( ) . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_5 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; } } throw new TYPE_4 ( id ) ; } } ; ) id ( TYPE_4 new throw } } ; ) ) ( METHOD_2 . p , VAR_1 ( TYPE_1 new return { ) ) ) ( METHOD_5 . ) ( getProject . VAR_4 ( equals . ) ( METHOD_5 . VAR_1 ( if { ) ) ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 . p : VAR_4 TYPE_5 ( for ; ) id , VAR_3 ( METHOD_1 . ) ( get . VAR_2 = p TYPE_2 { java.io.IOException , TYPE_4 throws ) id TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public < TYPE_1 > void put ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 < TYPE_2 < TYPE_4 > , TYPE_4 > p = METHOD_1 ( ( value ! = null ) ) ; if ( ( p ! = null ) || ( value ! = null ) ) { TYPE_2 < TYPE_4 > VAR_1 = ( ( TYPE_2 < TYPE_4 > ) ( key ) ) ; if ( value ! = null ) { p . put ( VAR_1 , value ) ; } else { p . METHOD_2 ( VAR_1 ) ; } } } } } } ; ) VAR_1 ( METHOD_2 . p { else } ; ) value , VAR_1 ( put . p { ) null = ! value ( if ; ) ) key ( ) > TYPE_4 < TYPE_2 ( ( = VAR_1 > TYPE_4 < TYPE_2 { ) ) null = ! value ( || ) null = ! p ( ( if ; ) ) null = ! value ( ( METHOD_1 = p > TYPE_4 , > TYPE_4 < TYPE_2 < TYPE_3 { ) value TYPE_1 , key > TYPE_1 < TYPE_2 ( put void > TYPE_1 < public 
public void add ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_3 . METHOD_1 ( ) ; } VAR_2 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ; } VAR_3 . add ( VAR_1 ) ; } } ; ) VAR_1 ( add . VAR_3 } ; ) ) ) VAR_1 ( ) > ? < TYPE_2 ( ( ( add . VAR_2 } ; ) ( METHOD_1 . TYPE_3 = VAR_2 { ) null == ) VAR_2 ( ( if { ) TYPE_2 instanceof VAR_1 ( if { ) VAR_1 TYPE_1 ( add void public 
public TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; p . ref = patchSet . getRefName ( ) ; final TYPE_4 VAR_2 = VAR_3 . get ( patchSet . METHOD_3 ( ) ) ; VAR_4 = METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; return p ; } } ; p return ; ) ) ( METHOD_5 . VAR_2 ( METHOD_4 = VAR_4 ; ) ) ( METHOD_3 . patchSet ( get . VAR_3 = VAR_2 TYPE_4 final ; ) ( getRefName . patchSet = ref . p ; ) ) ( METHOD_2 . patchSet ( toString . TYPE_3 = VAR_1 ; ) ( get . ) ( getRevision . patchSet = revision . p ; ) ( TYPE_1 new = p TYPE_1 { ) patchSet PatchSet . TYPE_2 final ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_3 , STRING_4 , STRING_5 , STRING_2 , STRING_6 , STRING_7 ) ) ; } } ; ) ) STRING_7 , STRING_6 , STRING_2 , STRING_5 , STRING_4 , STRING_3 ( of . TYPE_4 ( METHOD_8 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ) ) STRING_2 , STRING_1 ( METHOD_7 . TYPE_3 ( METHOD_6 . TYPE_2 ( METHOD_5 . ) ) VAR_3 ( METHOD_4 . TYPE_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_4 , VAR_3 , VAR_1 , VAR_2 ( METHOD_3 ; ) STRING_1 ( METHOD_2 . TYPE_1 = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { VAR_1 . close ( ) ; } VAR_1 = null ; if ( ( db ) ! = null ) { try { db . close ( ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } db = null ; } } ; null = db } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e TYPE_1 ( catch } ; ) ( close . db { try { ) null = ! ) db ( ( if ; null = VAR_1 } ; ) ( close . VAR_1 { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void protected 
private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { if ( VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; return TYPE_4 . METHOD_3 ( ) ; } TYPE_5 < TYPE_1 > VAR_4 = new TYPE_5 < TYPE_1 > ( VAR_1 ) ; VAR_5 . add ( VAR_4 ) ; VAR_6 . add ( VAR_4 ) ; return VAR_4 ; } } ; VAR_4 return ; ) VAR_4 ( add . VAR_6 ; ) VAR_4 ( add . VAR_5 ; ) VAR_1 ( > TYPE_1 < TYPE_5 new = VAR_4 > TYPE_1 < TYPE_5 } ; ) ( METHOD_3 . TYPE_4 return ; ) VAR_3 ( METHOD_2 . VAR_1 { ) VAR_2 ( if { ) VAR_1 > TYPE_1 < TYPE_3 ( METHOD_1 > TYPE_1 < TYPE_2 > TYPE_1 < private 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( null ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( STRING_1 ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_1 ) ) . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_2 ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_3 ) ) . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . ) ) VAR_3 ( equals . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 . ) ) VAR_2 ( equals . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_3 . ) ) VAR_1 ( equals . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 . ) ) STRING_1 ( equals . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 . ) ) null ( equals . VAR_1 ( com.google.common.truth.Truth.assertThat { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; assertEquals ( query ( in ) , METHOD_3 ( in ) ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( VAR_2 ) ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_5 ( ( out instanceof TYPE_3 ) ) ; assertEquals ( TYPE_4 . of ( query ( in . METHOD_6 ( 0 ) ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . out , ) ) 1 ( METHOD_6 . in , ) ) 0 ( METHOD_6 . in ( query ( of . TYPE_4 ( assertEquals ; ) ) TYPE_3 instanceof out ( ( METHOD_5 ; ) in ( METHOD_3 = out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) ) VAR_2 ( TYPE_2 new ( METHOD_4 . VAR_1 ; ) ) in ( METHOD_3 , ) in ( query ( assertEquals ; ) STRING_1 ( METHOD_2 = in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert.assertEquals ( TYPE_2 . METHOD_4 ( ( ( TYPE_2 . METHOD_4 ( STRING_2 ) ) + STRING_3 ) ) , n . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . n , ) ) STRING_3 + ) ) STRING_2 ( METHOD_4 . TYPE_2 ( ( ( METHOD_4 . TYPE_2 ( org.junit.Assert.assertEquals ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
private java.util.Set < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) { java.util.List < java.lang.String > VAR_1 = commit . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . isEmpty ( ) ) || ( ( VAR_1 . size ( ) ) > 1 ) ) { return null ; } if ( VAR_1 . get ( 0 ) . isEmpty ( ) ) { return TYPE_1 . of ( ) ; } else { return TYPE_2 . METHOD_3 ( TYPE_3 . on ( CHAR_1 ) . METHOD_4 ( VAR_1 . get ( 0 ) ) ) ; } } } } ; ) ) ) 0 ( get . VAR_1 ( METHOD_4 . ) CHAR_1 ( on . TYPE_3 ( METHOD_3 . TYPE_2 return { else } ; ) ( of . TYPE_1 return { ) ) ( isEmpty . ) 0 ( get . VAR_1 ( if } ; null return { ) ) 1 > ) ) ( size . VAR_1 ( ( || ) ) ( isEmpty . VAR_1 ( ( if ; ) VAR_2 ( METHOD_2 . commit = VAR_1 > java.lang.String < java.util.List { ) commit org.eclipse.jgit.revwalk.RevCommit ( METHOD_1 > java.lang.String < java.util.Set private 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_3 ) { for ( java.lang.String VAR_4 : METHOD_2 ( VAR_1 ) ) { java.util.Set < java.lang.String > VAR_5 = VAR_3 . METHOD_3 ( VAR_4 , ( VAR_6 ) - > TYPE_1 . METHOD_4 ( ) ) ; VAR_5 . add ( VAR_2 ) ; } } } } ; ) VAR_2 ( add . VAR_5 ; ) ) ( METHOD_4 . TYPE_1 > - ) VAR_6 ( , VAR_4 ( METHOD_3 . VAR_3 = VAR_5 > java.lang.String < java.util.Set { ) ) VAR_1 ( METHOD_2 : VAR_4 java.lang.String ( for { ) VAR_3 > > java.lang.String < java.util.Set , java.lang.String < java.util.Map , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , change ) . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . ) change , args ( TYPE_1 new return ; ) ) ( getProject . change , changeId , project , ) STRING_2 + STRING_1 ( , ) project ( equals . ) ( getProject . change ( METHOD_2 . TYPE_2 { java.lang.Exception throws ) ( METHOD_1 TYPE_1 public 
protected void run ( ) throws TYPE_1 { try { METHOD_1 ( ) ; } catch ( TYPE_2 err ) { throw new TYPE_1 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; } final TYPE_3 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) ! = null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } } } ; ) ( run . VAR_1 { else } ; ) query ( METHOD_3 . VAR_1 { ) null = ! ) query ( ( if ; ) format ( METHOD_2 . VAR_1 ; ) out , in ( create . factory = VAR_1 TYPE_3 final } ; ) ) ) ) ( getMessage . err ( + STRING_1 ( ( TYPE_1 new throw { ) err TYPE_2 ( catch } ; ) ( METHOD_1 { try { TYPE_1 throws ) ( run void protected 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ; METHOD_5 ( VAR_1 , n ) ; assertEquals ( STRING_4 , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , STRING_4 ( assertEquals ; ) n , VAR_1 ( METHOD_5 ; ) ) ) STRING_3 , STRING_2 ( TYPE_3 new ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 = n TYPE_1 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , 0 , line , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } } ; ) VAR_3 , res , VAR_2 , VAR_1 ( METHOD_8 ; ) ) ( METHOD_7 , ) false , line , 0 , 0 , 0 , ) ( METHOD_6 . cm ( TYPE_1 new , VAR_1 ( METHOD_5 . java.util.Collections = res int ; 0 : ) ) ( METHOD_4 . ) ( METHOD_1 . cm ( METHOD_3 . cm ? ) ) ( METHOD_2 . ) ( METHOD_1 . cm ( = line int { ) ( run void public 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { TYPE_2 r = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; TYPE_1 result = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_3 class ) ; r . METHOD_6 ( ) ; return result ; } } ; result return ; ) ( METHOD_6 . r ; ) class VAR_3 , ) ( METHOD_5 . r ( METHOD_4 . ) ( METHOD_3 = result TYPE_1 ; ) ) ( METHOD_2 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ) ) ( name . id ( + ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( ( get . VAR_1 = r TYPE_2 { java.lang.Exception throws ) id org.eclipse.jgit.lib.ObjectId ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final long VAR_2 = INT_2 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; METHOD_2 ( p , c . getParentKey ( ) ) ; METHOD_3 ( ( VAR_2 ! = ( c . METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 . c ( = ! VAR_2 ( ( METHOD_3 ; ) ) ( getParentKey . c , p ( METHOD_2 ; ) VAR_2 , p ( TYPE_2 new = c TYPE_2 final ; ) VAR_1 ( TYPE_1 new = p TYPE_1 final ; INT_2 = VAR_2 long final ; INT_1 = VAR_1 long final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . not ( p ) ; assertEquals ( 1 , n . METHOD_3 ( ) ) ; METHOD_4 ( p , n . METHOD_5 ( 0 ) ) ; } } ; ) ) 0 ( METHOD_5 . n , p ( METHOD_4 ; ) ) ( METHOD_3 . n , 1 ( assertEquals ; ) p ( not . TYPE_3 = n > java.lang.String < TYPE_3 final ; ) STRING_2 , STRING_1 ( METHOD_2 . TYPE_2 = p TYPE_1 final { ) ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( final org.eclipse.jgit.revwalk.RevCommit [ ] VAR_1 , final org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , TYPE_2 { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_3 : VAR_1 ) { walk . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 . getId ( ) . name ( ) ) ; java.lang.String msg = VAR_3 . METHOD_3 ( ) ; VAR_2 . add ( new TYPE_1 ( VAR_4 , msg ) ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ) msg , VAR_4 ( TYPE_1 new ( add . VAR_2 ; ) ( METHOD_3 . VAR_3 = msg java.lang.String ; ) ) ( name . ) ( getId . VAR_3 ( TYPE_3 new = VAR_4 TYPE_3 ; ) VAR_3 ( METHOD_2 . walk { ) VAR_1 : VAR_3 org.eclipse.jgit.revwalk.RevCommit ( for ; ) length . VAR_1 ( > TYPE_1 < java.util.ArrayList new = VAR_2 > TYPE_1 < java.util.List { TYPE_2 , java.io.IOException throws ) walk org.eclipse.jgit.revwalk.RevWalk final , VAR_1 ] [ org.eclipse.jgit.revwalk.RevCommit final ( METHOD_1 > TYPE_1 < java.util.List private 
protected void METHOD_1 ( TYPE_1 result ) { VAR_1 = new TYPE_2 ( this , METHOD_2 ( ) , getRevision ( ) , METHOD_3 ( ) , result . METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) ; METHOD_7 ( result . METHOD_8 ( ) ) ; display ( VAR_2 ) ; } } ; ) VAR_2 ( display ; ) ) ( METHOD_8 . result ( METHOD_7 ; ) ) ( METHOD_6 . ) ( METHOD_5 , ) ( METHOD_4 . result , ) ( METHOD_3 , ) ( getRevision , ) ( METHOD_2 , this ( TYPE_2 new = VAR_1 { ) result TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_2 u = user ( VAR_4 ) ; METHOD_4 ( u ) ; METHOD_5 ( STRING_3 , u ) ; METHOD_5 ( STRING_4 , u ) ; METHOD_6 ( STRING_5 , u ) ; } } ; ) u , STRING_5 ( METHOD_6 ; ) u , STRING_4 ( METHOD_5 ; ) u , STRING_3 ( METHOD_5 ; ) u ( METHOD_4 ; ) VAR_4 ( user = u TYPE_2 ; ) STRING_2 , VAR_3 , VAR_2 , VAR_4 ( METHOD_2 . TYPE_1 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_4 ( METHOD_3 . TYPE_1 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; install ( new TYPE_3 ( ) ) ; install ( new TYPE_4 ( ) ) ; } } ; ) ) ( TYPE_4 new ( install ; ) ) ( TYPE_3 new ( install ; ) ) ( TYPE_2 new ( install ; ) ) ( TYPE_1 new ( install ; ) class VAR_4 ( rpc ; ) class VAR_3 ( rpc ; ) class VAR_2 ( rpc ; ) class VAR_1 ( rpc { ) ( METHOD_1 void protected 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 ! = null ) & & ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; view . METHOD_5 ( VAR_2 . METHOD_2 ( ) ) ; } } } } ; ) ) ( METHOD_2 . VAR_2 ( METHOD_5 . view ; ) ) ) VAR_1 ( METHOD_4 . TYPE_3 , 1 ( METHOD_3 . TYPE_2 ( METHOD_2 . VAR_2 { ) ) 0 > ) ) ( length . VAR_1 ( ( & & ) null = ! VAR_1 ( ( if ; ) ( getValue . e = VAR_1 java.lang.String { ) e > java.lang.String < TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 plugins = VAR_1 ; TYPE_2 . METHOD_2 ( plugins ) ; TYPE_1 VAR_2 = plugins . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 . METHOD_5 ( VAR_3 ) ) ; VAR_4 . METHOD_6 ( STRING_3 ) ; TYPE_3 i = VAR_5 . config ( ) . server ( ) . METHOD_7 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_6 ) . METHOD_8 ( 1 ) ; } } ; ) 1 ( METHOD_8 . ) VAR_6 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_7 . ) ( server . ) ( config . VAR_5 = i TYPE_3 ; ) STRING_3 ( METHOD_6 . VAR_4 ; ) ) VAR_3 ( METHOD_5 . STRING_2 , VAR_2 ( METHOD_4 . TYPE_2 ; ) STRING_1 ( METHOD_3 . plugins = VAR_2 TYPE_1 ; ) plugins ( METHOD_2 . TYPE_2 ; VAR_1 = plugins TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; } } ; ) true , ) ( TYPE_3 new , VAR_2 , ) ) ( METHOD_4 . VAR_2 ( org.eclipse.jgit.revwalk.RevWalk new , repo ( TYPE_1 new return ; ) ( METHOD_3 . repo = VAR_2 TYPE_2 ; ) project ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository { java.io.IOException throws ) project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( METHOD_3 ( 2 ) ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_4 ( ) ) ) ) . METHOD_5 ( TYPE_3 . of ( METHOD_3 ( 2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_3 ( 2 ) ) . VAR_5 ) . isEqualTo ( INT_1 ) ; } } ; ) INT_1 ( isEqualTo . ) VAR_5 . ) ) 2 ( METHOD_3 ( get . VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ) ) 2 ( METHOD_3 ( of . TYPE_3 ( METHOD_5 . ) ) ) ) ( METHOD_4 . VAR_3 ( ) > ? < TYPE_2 ( ( ( com.google.common.truth.Truth.assertThat ; ) ) 2 ( METHOD_3 ( isEqualTo . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) 1 ( METHOD_2 . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) VAR_2 , VAR_1 , changeId ( get = c ChangeInfo . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 < TYPE_2 . NameKey > VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( VAR_4 ) ; try { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( STRING_2 ) ; } catch ( TYPE_4 e ) { METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ; } } } } ; ) e , ) STRING_4 + STRING_3 ( ( METHOD_3 { ) e TYPE_4 ( catch } ; ) STRING_2 ( METHOD_2 ; ) VAR_1 ( METHOD_1 . VAR_2 { try ; ) VAR_4 ( create . VAR_3 = VAR_2 TYPE_3 ; ) STRING_1 ( METHOD_2 { ) VAR_1 > NameKey . TYPE_2 < TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( VAR_1 , null , true ) ; TYPE_1 r = VAR_2 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_3 ) ; r . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . r ; ) VAR_3 ( isEqualTo . ) ) ( METHOD_4 . r ( com.google.common.truth.Truth.assertThat ; ) ) VAR_1 ( METHOD_3 , ) STRING_3 + ) ) ) ( get . project ( + STRING_2 ( ( ( put . VAR_2 = r TYPE_1 ; ) true , null , VAR_1 ( METHOD_2 ; STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ( format ) == ( VAR_2 ) ) { TYPE_4 VAR_3 = new TYPE_4 ( ) ; display ( VAR_3 ) ; return TYPE_5 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_6 . name ( ) ) ; } return apply ( ) ; } } ; ) ( apply return } ; ) ) ( name . TYPE_6 ( METHOD_3 . ) STRING_1 ( METHOD_2 . ) ) ( METHOD_1 . VAR_3 ( create . TYPE_5 return ; ) VAR_3 ( display ; ) ( TYPE_4 new = VAR_3 TYPE_4 { ) ) VAR_2 ( == ) format ( ( if { TYPE_3 throws ) VAR_1 TYPE_2 ( apply TYPE_1 public 
public org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , java.lang.String path ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw . METHOD_2 ( rw . parseCommit ( VAR_1 ) ) ; rw . METHOD_3 ( false ) ; rw . METHOD_4 ( TYPE_1 . create ( TYPE_2 . METHOD_5 ( path ) , VAR_2 ) ) ; return rw . METHOD_6 ( ) ; } finally { rw . METHOD_7 ( ) ; } } } } ; ) ( METHOD_7 . rw { finally } ; ) ( METHOD_6 . rw return ; ) ) VAR_2 , ) path ( METHOD_5 . TYPE_2 ( create . TYPE_1 ( METHOD_4 . rw ; ) false ( METHOD_3 . rw ; ) ) VAR_1 ( parseCommit . rw ( METHOD_2 . rw { try ; ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk { java.io.IOException throws ) path java.lang.String , VAR_1 org.eclipse.jgit.lib.ObjectId , repo org.eclipse.jgit.lib.Repository ( METHOD_1 org.eclipse.jgit.lib.ObjectId public 
protected void METHOD_1 ( ) throws TYPE_1 { if ( ( db ) ! = null ) { try { final TYPE_2 . Project project = getProject ( ) ; if ( project ! = null ) { for ( TYPE_3 w : db . METHOD_2 ( ) . METHOD_3 ( project . getId ( ) ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } catch ( TYPE_4 . OrmException err ) { } } } } } } { ) err OrmException . TYPE_4 ( catch } } } ; ) ) ( getAccountId . w , VAR_1 ( add { ) ) ) ( getId . project ( METHOD_3 . ) ( METHOD_2 . db : w TYPE_3 ( for { ) null = ! project ( if ; ) ( getProject = project Project . TYPE_2 final { try { ) null = ! ) db ( ( if { TYPE_1 throws ) ( METHOD_1 void protected 
private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { if ( ( VAR_1 . METHOD_2 ( ) ) ! = null ) { return VAR_1 . METHOD_2 ( ) ; } return VAR_1 . METHOD_3 ( ) . toString ( ) ; } return VAR_2 . getName ( ) ; } } ; ) ( getName . VAR_2 return } ; ) ( toString . ) ( METHOD_3 . VAR_1 return } ; ) ( METHOD_2 . VAR_1 return { ) null = ! ) ) ( METHOD_2 . VAR_1 ( ( if { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) , in . METHOD_7 ( INT_1 ) ) , out . METHOD_8 ( ) ) ; } } ; ) ) ( METHOD_8 . out , ) ) INT_1 ( METHOD_7 . in , ) 1 ( METHOD_7 . in , ) ) ) 2 ( METHOD_7 . in , ) 0 ( METHOD_7 . in ( METHOD_6 . TYPE_1 ( query ( of . TYPE_2 ( assertEquals ; ) ) ( METHOD_5 . out , class VAR_1 ( METHOD_4 ; ) in ( METHOD_3 = out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) STRING_1 ( METHOD_2 = in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { com.google.gerrit.reviewdb.client.Change a = VAR_2 . change ; com.google.gerrit.reviewdb.client.Change b = VAR_3 . change ; java.lang.String VAR_4 = ( a . getId ( ) . equals ( b . getId ( ) ) ) ? TYPE_1 . METHOD_2 ( a . getId ( ) ) : STRING_1 ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_5 . Change class , VAR_4 , a , b ) ; } } ; ) b , a , VAR_4 , class Change . VAR_5 , VAR_1 ( METHOD_3 . TYPE_1 ; STRING_1 : ) ) ( getId . a ( METHOD_2 . TYPE_1 ? ) ) ) ( getId . b ( equals . ) ( getId . a ( = VAR_4 java.lang.String ; change . VAR_3 = b com.google.gerrit.reviewdb.client.Change ; change . VAR_2 = a com.google.gerrit.reviewdb.client.Change { ) VAR_3 TYPE_1 , VAR_2 TYPE_1 , VAR_1 > java.lang.String < java.util.List ( METHOD_1 void static private 
private void METHOD_1 ( final TYPE_1 m , boolean VAR_1 ) { m . METHOD_2 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( TYPE_2 . css ( ) . METHOD_5 ( ) ) ; if ( VAR_1 ) { m . METHOD_6 ( TYPE_2 . css ( ) . METHOD_7 ( ) ) ; } else { m . METHOD_8 ( STRING_1 , STRING_2 ) ; } m . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . m } ; ) STRING_2 , STRING_1 ( METHOD_8 . m { else } ; ) ) ( METHOD_7 . ) ( css . TYPE_2 ( METHOD_6 . m { ) VAR_1 ( if ; ) ) ( METHOD_5 . ) ( css . TYPE_2 ( METHOD_4 . m ; ) ( METHOD_3 . m ; ) ( METHOD_2 . m { ) VAR_1 boolean , m TYPE_1 final ( METHOD_1 void private 
public void onSuccess ( TYPE_1 result ) { java.lang.String b = ( ( base ) ! = null ) ? java.lang.String . METHOD_1 ( base . get ( ) ) : null ; java.lang.String VAR_1 = java.lang.String . METHOD_1 ( revision . get ( ) ) ; TYPE_2 . display ( TYPE_3 . METHOD_2 ( changeId , VAR_1 ) , new TYPE_4 ( changeId , b , VAR_1 , VAR_2 ) ) ; } } ; ) ) VAR_2 , VAR_1 , b , changeId ( TYPE_4 new , ) VAR_1 , changeId ( METHOD_2 . TYPE_3 ( display . TYPE_2 ; ) ) ( get . revision ( METHOD_1 . java.lang.String = VAR_1 java.lang.String ; null : ) ) ( get . base ( METHOD_1 . java.lang.String ? ) null = ! ) base ( ( = b java.lang.String { ) result TYPE_1 ( onSuccess void public 
public TYPE_1 < ? extends java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_5 VAR_1 = req . METHOD_1 ( ) ; TYPE_6 notes = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2 = notes . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = java.util.Collections . METHOD_5 ( ) ; } return TYPE_1 . METHOD_6 ( new TYPE_7 < java.lang.String > ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( > java.lang.String < TYPE_7 new ( METHOD_6 . TYPE_1 return } ; ) ( METHOD_5 . java.util.Collections = VAR_2 { ) null == VAR_2 ( if ; ) ( METHOD_4 . notes = VAR_2 > java.lang.String < java.util.Set ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 = notes TYPE_6 ; ) ( METHOD_1 . req = VAR_1 TYPE_5 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 , TYPE_3 throws ) req TYPE_2 ( apply > > java.lang.String < java.util.Set extends ? < TYPE_1 public 
static java.lang.String METHOD_1 ( int change , int patch , java.lang.String branch ) { if ( ( branch . METHOD_2 ( TYPE_1 ) ) == 0 ) { branch = branch . METHOD_3 ( TYPE_1 . length ( ) ) ; } return ( ( ( change + STRING_1 ) + patch ) + STRING_1 ) + branch ; } } ; branch + ) STRING_1 + ) patch + ) STRING_1 + change ( ( ( return } ; ) ) ( length . TYPE_1 ( METHOD_3 . branch = branch { ) 0 == ) ) TYPE_1 ( METHOD_2 . branch ( ( if { ) branch java.lang.String , patch int , change int ( METHOD_1 java.lang.String static 
private void METHOD_1 ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 , TYPE_1 msg ) { if ( msg ! = null ) { if ( ( VAR_1 ! = null ) & & ( ( msg . METHOD_2 ( ) ) == null ) ) { msg . METHOD_3 ( VAR_1 . getAccountId ( ) ) ; } try { db . METHOD_4 ( ) . insert ( java.util.Collections.singleton ( msg ) ) ; } catch ( com.google.gwtorm.server.OrmException err ) { VAR_2 . METHOD_5 ( STRING_1 , err ) ; } } } } } } ; ) err , STRING_1 ( METHOD_5 . VAR_2 { ) err com.google.gwtorm.server.OrmException ( catch } ; ) ) msg ( java.util.Collections.singleton ( insert . ) ( METHOD_4 . db { try } ; ) ) ( getAccountId . VAR_1 ( METHOD_3 . msg { ) ) null == ) ) ( METHOD_2 . msg ( ( & & ) null = ! VAR_1 ( ( if { ) null = ! msg ( if { ) msg TYPE_1 , VAR_1 PatchSetApproval . com.google.gerrit.reviewdb.client ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 out , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk walk , TYPE_2 VAR_1 , TYPE_2 VAR_2 , java.lang.String path ) throws java.io.IOException { TYPE_3 diff = new TYPE_4 ( VAR_3 , out ) ; try { if ( ! ( path . equals ( STRING_1 ) ) ) { diff . METHOD_2 ( TYPE_5 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } } } ; ) ( METHOD_5 . diff { finally } ; ) VAR_2 , VAR_1 ( format . diff ; ) true ( METHOD_4 . diff ; ) repo ( METHOD_3 . diff } ; ) ) path ( create . TYPE_5 ( METHOD_2 . diff { ) ) ) STRING_1 ( equals . path ( ! ( if { try ; ) out , VAR_3 ( TYPE_4 new = diff TYPE_3 { java.io.IOException throws ) path java.lang.String , VAR_2 TYPE_2 , VAR_1 TYPE_2 , walk org.eclipse.jgit.revwalk.RevWalk , repo org.eclipse.jgit.lib.Repository , out TYPE_1 ( METHOD_1 void private 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; boolean VAR_2 = false ; try { for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( event ) ) ; } } catch ( TYPE_5 e ) { VAR_1 . add ( new TYPE_1 ( e . getMessage ( ) , true ) ) ; VAR_2 = true ; } if ( VAR_2 ) { METHOD_5 ( VAR_1 , event ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) event , VAR_1 ( METHOD_5 { ) VAR_2 ( if } ; true = VAR_2 ; ) ) true , ) ( getMessage . e ( TYPE_1 new ( add . VAR_1 { ) e TYPE_5 ( catch } } ; ) ) event ( METHOD_4 . VAR_3 ( METHOD_3 . VAR_1 { ) VAR_4 : VAR_3 TYPE_4 ( for { try ; false = VAR_2 boolean ; ) ( METHOD_2 . TYPE_3 = VAR_1 > TYPE_1 < java.util.List { TYPE_2 throws ) ( METHOD_1 > TYPE_1 < java.util.List public 
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { final TYPE_2 p = ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( METHOD_1 ( ) . equals ( p . METHOD_1 ( ) ) ) & & ( id . equals ( p . id ) ) ; } return false ; } } ; false return } ; ) ) id . p ( equals . id ( & & ) ) ) ( METHOD_1 . p ( equals . ) ( METHOD_1 ( return ; ) ) VAR_1 ( ) TYPE_2 ( ( = p TYPE_2 final { ) TYPE_2 instanceof VAR_1 ( if { ) VAR_1 TYPE_1 ( equals boolean public 
public void METHOD_1 ( final TYPE_1 . Id VAR_1 , final java.lang.String msg , final java.util.Set < TYPE_2 . Id > VAR_2 , final TYPE_3 < TYPE_4 > VAR_3 ) { TYPE_5 . METHOD_2 ( VAR_4 . create ( VAR_1 , msg , VAR_2 ) ) . to ( VAR_3 ) ; } } ; ) VAR_3 ( to . ) ) VAR_2 , msg , VAR_1 ( create . VAR_4 ( METHOD_2 . TYPE_5 { ) VAR_3 > TYPE_4 < TYPE_3 final , VAR_2 > Id . TYPE_2 < java.util.Set final , msg java.lang.String final , VAR_1 Id . TYPE_1 final ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( false ) ; java.util.Set < TYPE_3 > VAR_2 = TYPE_4 . of ( ) ; return new TYPE_1 ( VAR_3 , account , VAR_2 , java.util.Collections . METHOD_4 ( ) , new TYPE_5 < TYPE_6 , java.util.Set < TYPE_7 > > ( ) ) ; } } ; ) ) ( > > TYPE_7 < java.util.Set , TYPE_6 < TYPE_5 new , ) ( METHOD_4 . java.util.Collections , VAR_2 , account , VAR_3 ( TYPE_1 new return ; ) ( of . TYPE_4 = VAR_2 > TYPE_3 < java.util.Set ; ) false ( METHOD_3 . account ; ) ) ( METHOD_2 . TYPE_2 , VAR_1 ( com.google.gerrit.reviewdb.client.Account new = account com.google.gerrit.reviewdb.client.Account { ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 private 
public boolean METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + key ) + STRING_3 ) ) { TYPE_3 METHOD_2 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , key ) ; return VAR_3 . METHOD_4 ( TYPE_5 . on ( STRING_4 ) . METHOD_5 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . } } ; ) VAR_2 , ) VAR_1 , STRING_5 , VAR_4 ( METHOD_5 . ) STRING_4 ( on . TYPE_5 ( METHOD_4 . VAR_3 return ; ) key , VAR_1 ( METHOD_3 . TYPE_4 = VAR_2 java.lang.String { java.io.IOException throws ) ( METHOD_2 TYPE_3 { ) ) STRING_3 + ) key + ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( ( ( TYPE_2 new return { ) key TYPE_1 final , VAR_1 java.lang.String final ( METHOD_1 boolean public 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_4 ) { throw new TYPE_2 ( STRING_2 ) ; } } } } ; ) STRING_2 ( TYPE_2 new throw { ) VAR_4 java.io.IOException ( catch } } ; ) STRING_1 ( TYPE_2 new throw { else } ; VAR_3 return { ) ) ( METHOD_3 . VAR_3 ( if { try ; ) VAR_1 ( TYPE_1 new = VAR_3 TYPE_1 ; ) ) ( get . VAR_2 ( METHOD_2 . TYPE_4 = VAR_1 TYPE_3 { TYPE_2 throws ) ( METHOD_1 TYPE_1 private 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( VAR_1 , VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; } } ; ) null , null , ) ) ( METHOD_3 . VAR_1 , class VAR_5 ( METHOD_2 . TYPE_1 , ) ) ( METHOD_3 . VAR_1 , class VAR_4 ( METHOD_2 . TYPE_1 , ) ) ) ) ( METHOD_3 . VAR_1 , class VAR_3 ( METHOD_2 . TYPE_1 ( ! ( , true , VAR_2 , VAR_1 ( TYPE_3 new return { ) VAR_2 java.lang.String , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static 
private com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String name , java.lang.String email ) throws TYPE_1 , TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 . Key VAR_2 = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = db . METHOD_2 ( ) ; TYPE_4 VAR_5 = VAR_4 . get ( VAR_2 ) ; if ( VAR_5 == null ) { return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; } return VAR_5 . getAccountId ( ) ; } } ; ) ( getAccountId . VAR_5 return } ; ) email , name , VAR_1 ( METHOD_3 . VAR_6 return { ) null == VAR_5 ( if ; ) VAR_2 ( get . VAR_4 = VAR_5 TYPE_4 ; ) ( METHOD_2 . db = VAR_4 TYPE_5 ; ) VAR_1 , VAR_3 ( Key . TYPE_4 new = VAR_2 Key . TYPE_4 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 , TYPE_1 throws ) email java.lang.String , name java.lang.String , VAR_1 java.lang.String , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 Id . com.google.gerrit.reviewdb.client.Change private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( git , true ) ; METHOD_2 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_3 ( change ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( changes ) ) ) . isEmpty ( ) ; } } ; ) ( isEmpty . ) ) ) changes ( ) > ? < TYPE_2 ( ( ( com.google.common.truth.Truth.assertThat ; ) change ( METHOD_3 = changes > java.lang.String < java.util.Set ; ) false , git ( METHOD_2 ; ) true , git ( METHOD_2 = change Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( getId ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; return METHOD_5 ( ) ; } } ; ) ( METHOD_5 return ; ) ( METHOD_4 . VAR_1 ; ) ) ) ( getId ( get . ) ( METHOD_3 . VAR_1 , ) ( getChange ( METHOD_2 . TYPE_2 ; ) this ( add . VAR_1 ; ) ) ( METHOD_1 ( create . VAR_2 = VAR_1 TYPE_1 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( commit org.eclipse.jgit.lib.ObjectId public 
private java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( path , ( STRING_1 + VAR_1 ) , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_3 ) ) . isEqualTo ( STRING_2 ) ; java.lang.String VAR_4 = res . METHOD_4 ( ) ; java.lang.String VAR_5 = STRING_3 ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( VAR_5 ) ; java.lang.String result = VAR_4 . METHOD_6 ( VAR_5 . length ( ) ) ; VAR_6 . METHOD_7 ( result ) ; return result ; } } ; result return ; ) result ( METHOD_7 . VAR_6 ; ) ) ( length . VAR_5 ( METHOD_6 . VAR_4 = result java.lang.String ; ) VAR_5 ( METHOD_5 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; STRING_3 = VAR_5 java.lang.String ; ) ( METHOD_4 . res = VAR_4 java.lang.String ; ) STRING_2 ( isEqualTo . ) ) VAR_3 ( METHOD_3 . res ( com.google.common.truth.Truth.assertThat ; ) VAR_2 , ) VAR_1 + STRING_1 ( , path ( METHOD_2 = res TYPE_1 { java.lang.Exception throws ) VAR_1 java.lang.String , path java.lang.String ( METHOD_1 java.lang.String private 
public static void topic ( int id , java.lang.String topic , TYPE_1 < java.lang.String > VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( id , STRING_1 ) ; topic = TYPE_3 . METHOD_2 ( topic ) ; if ( topic ! = null ) { TYPE_4 input = TYPE_4 . create ( ) ; input . topic ( topic ) ; VAR_2 . put ( input , TYPE_5 . METHOD_3 ( VAR_1 ) ) ; } else { VAR_2 . delete ( TYPE_5 . METHOD_3 ( VAR_1 ) ) ; } } } } ; ) ) VAR_1 ( METHOD_3 . TYPE_5 ( delete . VAR_2 { else } ; ) ) VAR_1 ( METHOD_3 . TYPE_5 , input ( put . VAR_2 ; ) topic ( topic . input ; ) ( create . TYPE_4 = input TYPE_4 { ) null = ! topic ( if ; ) topic ( METHOD_2 . TYPE_3 = topic ; ) STRING_1 , id ( METHOD_1 . TYPE_3 = VAR_2 TYPE_2 { ) VAR_1 > java.lang.String < TYPE_1 , topic java.lang.String , id int ( topic void static public 
public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) & & ( ! ( METHOD_2 ( VAR_2 ) ) ) ) & & ( ! ( METHOD_3 ( ) ) ) ) { java.lang.String VAR_3 = VAR_4 . getProject ( ) . getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } if ( VAR_4 . METHOD_4 ( ) ) { return METHOD_5 ( ) ; } return VAR_5 ; } } ; VAR_5 return } ; ) ( METHOD_5 return { ) ) ( METHOD_4 . VAR_4 ( if } ; ) ) STRING_2 + ) VAR_3 + STRING_1 ( ( ( TYPE_1 new return ; ) ( getName . ) ( getProject . VAR_4 = VAR_3 java.lang.String { ) ) ) ) ( METHOD_3 ( ! ( & & ) ) ) ) VAR_2 ( METHOD_2 ( ! ( & & ) ) ) VAR_1 ( METHOD_2 ( ! ( ( ( if { ) ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_2 ) ) . METHOD_4 ( STRING_3 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_4 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_6 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) STRING_5 ( METHOD_4 . ) ) STRING_6 , null , STRING_1 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_5 . ) STRING_5 ( METHOD_4 . ) ) STRING_4 , null , STRING_1 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_5 . ) STRING_3 ( METHOD_4 . ) ) STRING_2 , null , STRING_1 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result result = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; java.lang.String projectName = result . getChange ( ) . change ( ) . getProject ( ) . get ( ) ; METHOD_3 ( new TYPE_2 . NameKey ( projectName , STRING_5 ) ) ; METHOD_4 ( STRING_6 , projectName ) ; METHOD_5 ( result . getChangeId ( ) ) ; result . METHOD_6 ( ) ; METHOD_7 ( result ) ; } } ; ) result ( METHOD_7 ; ) ( METHOD_6 . result ; ) ) ( getChangeId . result ( METHOD_5 ; ) projectName , STRING_6 ( METHOD_4 ; ) ) STRING_5 , projectName ( NameKey . TYPE_2 new ( METHOD_3 ; ) ( get . ) ( getProject . ) ( change . ) ( getChange . result = projectName java.lang.String ; ) STRING_4 , STRING_3 , STRING_2 , STRING_1 ( METHOD_2 = result Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.util.List < TYPE_3 . Branch > > ( ) { public void onSuccess ( final java.util.List < TYPE_3 . Branch > result ) { METHOD_2 ( true ) ; VAR_2 . display ( result ) ; } } ) ; } } ; ) } } ; ) result ( display . VAR_2 ; ) true ( METHOD_2 { ) result > Branch . TYPE_3 < java.util.List final ( onSuccess void public { ) ( > > Branch . TYPE_3 < java.util.List < TYPE_2 new , VAR_1 ( METHOD_3 . TYPE_1 ; ) ( METHOD_1 . super ; ) false ( METHOD_2 { ) ( METHOD_1 void public 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.util.List < java.lang.String > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_2 = new java.util.ArrayList < > ( VAR_1 . size ( ) ) ; for ( java.lang.String s : VAR_1 ) { VAR_2 . add ( TYPE_3 . commit ( schema , s ) ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ) s , schema ( commit . TYPE_3 ( add . VAR_2 { ) VAR_1 : s java.lang.String ( for ; ) ) ( size . VAR_1 ( > < java.util.ArrayList new = VAR_2 > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List { ) VAR_1 > java.lang.String < java.util.List , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( METHOD_1 > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List static private 
private boolean METHOD_1 ( final TYPE_1 < TYPE_2 > refs ) throws java.io.IOException { METHOD_2 ( refs ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_1 = new TYPE_3 < > ( ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_2 = new TYPE_3 < > ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; rw . METHOD_4 ( ) ; return ( ! ( METHOD_5 ( VAR_2 , 1 ) . isEmpty ( ) ) ) || ( ! ( METHOD_5 ( VAR_1 , 1 ) . isEmpty ( ) ) ) ; } } ; ) ) ) ( isEmpty . ) 1 , VAR_1 ( METHOD_5 ( ! ( || ) ) ) ( isEmpty . ) 1 , VAR_2 ( METHOD_5 ( ! ( return ; ) ( METHOD_4 . rw ; ) VAR_2 , VAR_1 ( METHOD_3 ; ) ( > < TYPE_3 new = VAR_2 > org.eclipse.jgit.revwalk.RevCommit < java.util.List ; ) ( > < TYPE_3 new = VAR_1 > org.eclipse.jgit.revwalk.RevCommit < java.util.List ; ) refs ( METHOD_2 { java.io.IOException throws ) refs > TYPE_2 < TYPE_1 final ( METHOD_1 boolean private 
private void METHOD_1 ( final boolean VAR_1 , final boolean VAR_2 , final boolean VAR_3 ) { VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; VAR_7 . METHOD_2 ( VAR_1 ) ; VAR_8 . METHOD_2 ( VAR_3 ) ; VAR_9 . METHOD_2 ( ( ( VAR_1 || VAR_2 ) || VAR_3 ) ) ; } } ; ) ) VAR_3 || ) VAR_2 || VAR_1 ( ( ( METHOD_2 . VAR_9 ; ) VAR_3 ( METHOD_2 . VAR_8 ; ) VAR_1 ( METHOD_2 . VAR_7 ; ) VAR_1 ( METHOD_2 . VAR_6 ; ) VAR_2 ( METHOD_2 . VAR_5 ; ) VAR_3 ( METHOD_2 . VAR_4 { ) VAR_3 boolean final , VAR_2 boolean final , VAR_1 boolean final ( METHOD_1 void private 
public void update ( final int VAR_1 ) { VAR_2 += VAR_1 ; if ( ( VAR_3 ) ! = ( VAR_4 ) ) { int VAR_5 = ( ( VAR_2 ) * INT_1 ) / ( VAR_3 ) ; if ( VAR_5 > ( VAR_6 ) ) { VAR_6 = VAR_5 ; METHOD_1 ( ) ; } } } } } } ; ) ( METHOD_1 ; VAR_5 = VAR_6 { ) ) VAR_6 ( > VAR_5 ( if ; ) VAR_3 ( / ) INT_1 * ) VAR_2 ( ( = VAR_5 int { ) ) VAR_4 ( = ! ) VAR_3 ( ( if ; VAR_1 += VAR_2 { ) VAR_1 int final ( update void public 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; VAR_1 = new TYPE_5 ( ) ; VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ; } } ; INT_1 / ) ) ( METHOD_4 . ) ( METHOD_3 . repo ( = VAR_2 ; ) ( TYPE_5 new = VAR_1 ; ) ) ( METHOD_2 . repo ( org.eclipse.jgit.revwalk.RevWalk new = walk ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { for ( TYPE_1 path : METHOD_2 ( ) ) { TYPE_2 VAR_1 = METHOD_3 ( path ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( VAR_2 . METHOD_5 ( new TYPE_3 ( ) ) ) { METHOD_6 ( path ) ; } } } } } } ; ) path ( METHOD_6 { ) ) ) ( TYPE_3 new ( METHOD_5 . VAR_2 ( if ; ) ) ( METHOD_4 . VAR_1 ( TYPE_3 new = VAR_2 TYPE_3 ; ) path ( METHOD_3 = VAR_1 TYPE_2 { ) ) ( METHOD_2 : path TYPE_1 ( for { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; assertEquals ( STRING_2 , VAR_2 . toString ( ) ) ; final TYPE_1 VAR_3 = new TYPE_1 ( STRING_3 ) ; VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) ; assertEquals ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( assertEquals ; ) ) ( toString . VAR_2 ( METHOD_2 . VAR_3 ; ) STRING_3 ( TYPE_1 new = VAR_3 TYPE_1 final ; ) ) ( toString . VAR_2 , STRING_2 ( assertEquals ; ) VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 final ; STRING_1 = VAR_1 java.lang.String final { ) ( METHOD_1 void public 
public TYPE_1 . Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1 = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( 2 ) ; TYPE_6 VAR_3 = TYPE_6 . METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_4 ; try { VAR_4 = METHOD_4 ( VAR_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; } return METHOD_5 ( index , VAR_4 , VAR_1 ) ; } } ; ) VAR_1 , VAR_4 , index ( METHOD_5 return } ; ) 0 , 0 , false , VAR_3 ( Result . TYPE_7 new return ; ) e , STRING_1 ( error . VAR_5 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_1 ( METHOD_4 = VAR_4 { try ; VAR_4 > com.google.gerrit.reviewdb.client.Project.NameKey < java.util.List ; ) ( METHOD_3 . TYPE_6 = VAR_3 TYPE_6 ; ) 2 ( METHOD_2 . VAR_1 ; ) ) VAR_2 ( TYPE_5 new ( TYPE_4 new = VAR_1 TYPE_3 { ) index TYPE_2 final ( METHOD_1 Result . TYPE_1 public 
public final void onSuccess ( TYPE_1 result ) { if ( METHOD_1 ( ) ) { if ( ( ( result . size ( ) ) == 1 ) & & ( TYPE_2 . METHOD_2 ( query ) ) ) { TYPE_3 . ChangeInfo c = result . get ( 0 ) ; com.google.gerrit.reviewdb.client.Change . Id id = c . METHOD_3 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ; } else { display ( result ) ; this . display ( ) ; } } } } } } ; ) ( display . this ; ) result ( display { else } ; ) ) id ( TYPE_6 new , ) id ( METHOD_4 . TYPE_5 ( display . TYPE_4 ; ) ( METHOD_3 . c = id Id . com.google.gerrit.reviewdb.client.Change ; ) 0 ( get . result = c ChangeInfo . TYPE_3 { ) ) ) query ( METHOD_2 . TYPE_2 ( & & ) 1 == ) ) ( size . result ( ( ( if { ) ) ( METHOD_1 ( if { ) result TYPE_1 ( onSuccess void final public 
private void commit ( org.eclipse.jgit.lib.Repository VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws java.io.IOException { TYPE_3 VAR_4 = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; try ( TYPE_4 VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_2 . commit ( VAR_5 ) ; } try ( TYPE_4 VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_3 . commit ( VAR_5 ) ; } try ( org.eclipse.jgit.revwalk.RevWalk VAR_6 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) { TYPE_5 . METHOD_4 ( VAR_4 , VAR_6 ) ; } } } } ; ) VAR_6 , VAR_4 ( METHOD_4 . TYPE_5 { ) ) VAR_1 ( org.eclipse.jgit.revwalk.RevWalk new = VAR_6 org.eclipse.jgit.revwalk.RevWalk ( try } ; ) VAR_5 ( commit . VAR_3 { ) ) VAR_4 , VAR_1 ( METHOD_3 = VAR_5 TYPE_4 ( try } ; ) VAR_5 ( commit . VAR_2 { ) ) VAR_4 , VAR_1 ( METHOD_3 = VAR_5 TYPE_4 ( try ; ) ( METHOD_2 . ) ( METHOD_1 . VAR_1 = VAR_4 TYPE_3 { java.io.IOException throws ) VAR_3 TYPE_2 , VAR_2 TYPE_1 , VAR_1 org.eclipse.jgit.lib.Repository ( commit void private 
private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String > VAR_2 = TYPE_3 . METHOD_2 ( ) ; while ( VAR_1 ! = null ) { VAR_2 . METHOD_3 ( VAR_1 . value ( ) ) ; VAR_1 = TYPE_4 . METHOD_4 ( VAR_1 ) ; } VAR_2 . METHOD_5 ( ) ; return VAR_2 ; } } ; VAR_2 return ; ) ( METHOD_5 . VAR_2 } ; ) VAR_1 ( METHOD_4 . TYPE_4 = VAR_1 ; ) ) ( value . VAR_1 ( METHOD_3 . VAR_2 { ) null = ! VAR_1 ( while ; ) ( METHOD_2 . TYPE_3 = VAR_2 > java.lang.String < TYPE_1 { ) VAR_1 TYPE_2 ( METHOD_1 > java.lang.String < TYPE_1 static private 
public void METHOD_1 ( java.lang.String msg ) { if ( ( ( info ) == null ) & & ( ( VAR_1 ) ! = null ) ) { info = new TYPE_1 ( TYPE_2 . info ( ) ) ; VAR_1 . add ( info ) ; } info . METHOD_2 ( msg ) ; } } ; ) msg ( METHOD_2 . info } ; ) info ( add . VAR_1 ; ) ) ( info . TYPE_2 ( TYPE_1 new = info { ) ) null = ! ) VAR_1 ( ( & & ) null == ) info ( ( ( if { ) msg java.lang.String ( METHOD_1 void public 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . METHOD_2 ( ) ) & & ( ( getRevision ( ) ) == null ) ) { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; try { METHOD_1 ( repo ) ; } catch ( TYPE_1 e ) { throw new java.io.IOException ( e ) ; } finally { repo . close ( ) ; } } } } } } ; ) ( close . repo { finally } ; ) e ( java.io.IOException new throw { ) e TYPE_1 ( catch } ; ) repo ( METHOD_1 { try ; ) ) ( METHOD_4 ( METHOD_3 . VAR_2 = repo org.eclipse.jgit.lib.Repository { ) ) null == ) ) ( getRevision ( ( & & ) ) ( METHOD_2 . VAR_1 ( ( if { java.io.IOException throws ) ( METHOD_1 void private 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status . getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } } } } ; STRING_6 + ) ) VAR_6 ( + ) STRING_5 + ) ) VAR_5 ( + ) STRING_4 + ) ) VAR_4 ( + STRING_3 ( ( ( ( ( return : default ; STRING_2 return : VAR_3 case ; STRING_1 return : VAR_2 case { ) ) ( getStatus . status ( switch { else } ; ) VAR_1 ( METHOD_2 return { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 java.lang.String public 
protected java.lang.String METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = name + STRING_1 ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( VAR_2 ) ) { return METHOD_4 ( VAR_1 ) ; } else { return METHOD_5 ( name ) ; } } } } ; ) name ( METHOD_5 return { else } ; ) VAR_1 ( METHOD_4 return { ) ) VAR_2 ( METHOD_3 . TYPE_3 ( if ; ) VAR_1 ( METHOD_2 . VAR_3 = VAR_2 TYPE_2 ; STRING_1 + name = VAR_1 java.lang.String { TYPE_1 throws ) name java.lang.String ( METHOD_1 java.lang.String protected 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . get ( STRING_1 ) ) ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( VAR_1 ) ; VAR_3 = new TYPE_4 ( VAR_4 , cfg , TYPE_1 . METHOD_2 ( VAR_5 class ) , VAR_1 ) ; } } ; ) VAR_1 , ) class VAR_5 ( METHOD_2 . TYPE_1 , cfg , VAR_4 ( TYPE_4 new = VAR_3 ; ) VAR_1 ( METHOD_8 . TYPE_1 ; ) ( METHOD_7 . ) ) ) STRING_1 ( get . TYPE_3 ( METHOD_6 . TYPE_2 ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . TYPE_1 ; ) class VAR_2 ( METHOD_2 . TYPE_1 = VAR_1 { ) ( METHOD_1 void public 
public synchronized < TYPE_1 , TYPE_2 , TYPE_3 > TYPE_4 < TYPE_1 , TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String name , TYPE_5 VAR_1 , TYPE_6 < TYPE_1 > VAR_2 , TYPE_6 < TYPE_2 > VAR_3 , TYPE_6 < TYPE_3 > VAR_4 ) { TYPE_7 . METHOD_2 ( VAR_1 ) ; TYPE_8 m = new TYPE_8 ( this , name , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_5 . put ( name , m ) ; return m . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . m return ; ) m , name ( put . VAR_5 ; ) VAR_1 , name ( METHOD_3 ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 , name , this ( TYPE_8 new = m TYPE_8 ; ) VAR_1 ( METHOD_2 . TYPE_7 { ) VAR_4 > TYPE_3 < TYPE_6 , VAR_3 > TYPE_2 < TYPE_6 , VAR_2 > TYPE_1 < TYPE_6 , VAR_1 TYPE_5 , name java.lang.String ( METHOD_1 > TYPE_3 , TYPE_2 , TYPE_1 < TYPE_4 > TYPE_3 , TYPE_2 , TYPE_1 < synchronized public 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ; TYPE_3 in = TYPE_5 . METHOD_2 ( VAR_2 ) ) { return new TYPE_6 ( in ) ; } catch ( java.io.IOException e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } catch ( TYPE_8 e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } } } } ; ) e , ) VAR_1 + STRING_1 ( ( TYPE_7 new throw { ) e TYPE_8 ( catch } ; ) e , ) VAR_1 + STRING_1 ( ( TYPE_7 new throw { ) e java.io.IOException ( catch } ; ) in ( TYPE_6 new return { ) ) VAR_2 ( METHOD_2 . TYPE_5 = in TYPE_3 ; ) VAR_1 ( TYPE_4 new = VAR_2 TYPE_3 ( try { ) VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 static private 
private void METHOD_1 ( TYPE_1 ctx ) { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; ctx . METHOD_1 ( ) ; } } } } ; ) ( METHOD_1 . ctx ; ) ) ( getStatus . change ( METHOD_3 . update ; ) VAR_3 ( METHOD_3 . change { ) VAR_1 ( if ; ) VAR_2 ( == ) ) ( getStatus . change ( = VAR_1 ; ) psId ( METHOD_2 . ctx = update TYPE_2 ; ) ( getChange . ctx = change { ) ctx TYPE_1 ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; ) e , STRING_1 ( TYPE_3 new throw { ) e TYPE_4 ( catch } ; ) e , STRING_1 ( TYPE_3 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_2 . ) in , revision ( apply . ) ( get . VAR_1 ( id . changes return { try { TYPE_3 throws ) in TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } super . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . super } ; null = VAR_2 ; ) ( METHOD_2 . VAR_2 { ) null = ! ) VAR_2 ( ( if } ; null = VAR_1 ; ) ( METHOD_2 . VAR_1 { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void public 
private static boolean METHOD_1 ( TYPE_1 event , TYPE_2 update ) { return ( ( ( update ! = null ) & & ( ( TYPE_3 . METHOD_2 ( VAR_1 ) ) == ( TYPE_3 . METHOD_2 ( update . METHOD_3 ( ) ) ) ) ) & & ( VAR_2 . equals ( update . METHOD_4 ( ) ) ) ) & & ( VAR_3 . equals ( update . METHOD_5 ( ) ) ) ; } } ; ) ) ) ( METHOD_5 . update ( equals . VAR_3 ( & & ) ) ) ) ( METHOD_4 . update ( equals . VAR_2 ( & & ) ) ) ) ) ( METHOD_3 . update ( METHOD_2 . TYPE_3 ( == ) ) VAR_1 ( METHOD_2 . TYPE_3 ( ( & & ) null = ! update ( ( ( return { ) update TYPE_2 , event TYPE_1 ( METHOD_1 boolean static private 
protected < TYPE_1 > void METHOD_1 ( final java.lang.String VAR_1 , final boolean VAR_2 , final java.lang.String VAR_3 , final TYPE_2 < TYPE_1 > VAR_4 , final TYPE_3 < TYPE_1 > VAR_5 ) throws TYPE_4 { if ( ( url ) == null ) { throw new TYPE_5 ( ) ; } new TYPE_6 < TYPE_1 > ( this , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) . METHOD_2 ( ) ; } } ; ) ( METHOD_2 . ) VAR_5 , VAR_4 , VAR_3 , VAR_2 , VAR_1 , this ( > TYPE_1 < TYPE_6 new } ; ) ( TYPE_5 new throw { ) null == ) url ( ( if { TYPE_4 throws ) VAR_5 > TYPE_1 < TYPE_3 final , VAR_4 > TYPE_1 < TYPE_2 final , VAR_3 java.lang.String final , VAR_2 boolean final , VAR_1 java.lang.String final ( METHOD_1 void > TYPE_1 < protected 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Status VAR_1 , java.lang.String VAR_2 , TYPE_1 ... VAR_3 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = getChange ( ) . change ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( c . METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . isEqualTo ( c . getStatus ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( TYPE_2 . METHOD_3 ( c . METHOD_4 ( ) ) ) ; METHOD_5 ( c , VAR_3 ) ; } } ; ) VAR_3 , c ( METHOD_5 ; ) ) ) ( METHOD_4 . c ( METHOD_3 . TYPE_2 ( isEqualTo . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ) ( getStatus . c ( isEqualTo . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ) ( METHOD_2 . c ( isEqualTo . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ( change . ) ( getChange = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) VAR_3 ... TYPE_1 , VAR_2 java.lang.String , VAR_1 Status . com.google.gerrit.reviewdb.client.Change ( METHOD_1 void public 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; } } ; ) class Factory . VAR_8 ( factory ; ) class Factory . VAR_7 ( factory ; ) class Factory . VAR_6 ( factory ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void protected 
private void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 group ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } TYPE_3 . METHOD_3 ( changeId . get ( ) , VAR_1 . name ( ) , group . add ( new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( TYPE_5 info ) { VAR_1 . METHOD_4 ( info ) ; } public void METHOD_5 ( TYPE_6 VAR_2 ) { } } ) ) ; } } ; ) ) } } { ) VAR_2 TYPE_6 ( METHOD_5 void public } ; ) info ( METHOD_4 . VAR_1 { ) info TYPE_5 ( onSuccess void public { ) ( > TYPE_5 < TYPE_4 new ( add . group , ) ( name . VAR_1 , ) ( get . changeId ( METHOD_3 . TYPE_3 } ; return { ) ) ( METHOD_2 . VAR_1 ( if { ) group TYPE_2 , VAR_1 TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final long VAR_2 = INT_2 ; final TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ; assertEquals ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , VAR_3 . toString ( ) ) ; final TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ; VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) ; assertEquals ( VAR_3 , VAR_4 ) ; } } ; ) VAR_4 , VAR_3 ( assertEquals ; ) ) ( toString . VAR_3 ( METHOD_2 . VAR_4 ; ) 0 , ) 0 ( TYPE_2 new ( TYPE_1 new = VAR_4 TYPE_1 final ; ) ) ( toString . VAR_3 , ) VAR_2 + ) STRING_1 + VAR_1 ( ( ( assertEquals ; ) VAR_2 , ) VAR_1 ( TYPE_2 new ( TYPE_1 new = VAR_3 TYPE_1 final ; INT_2 = VAR_2 long final ; INT_1 = VAR_1 long final { ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( java.lang.String name , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException { try { org.eclipse.jgit.lib.ObjectId id = repo . METHOD_1 ( name ) ; return id ! = null ? walk . METHOD_2 ( id ) : null ; } catch ( TYPE_2 e ) { return null ; } catch ( TYPE_3 e ) { return null ; } catch ( TYPE_4 e ) { return null ; } } } } ; null return { ) e TYPE_4 ( catch } ; null return { ) e TYPE_3 ( catch } ; null return { ) e TYPE_2 ( catch } ; null : ) id ( METHOD_2 . walk ? null = ! id return ; ) name ( METHOD_1 . repo = id org.eclipse.jgit.lib.ObjectId { try { java.io.IOException throws ) walk org.eclipse.jgit.revwalk.RevWalk , name java.lang.String ( METHOD_1 TYPE_1 private 
public static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 , com.google.gerrit.reviewdb.client.PatchSet VAR_3 , TYPE_2 VAR_4 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_5 = db . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_4 . METHOD_1 ( db , VAR_1 , VAR_5 , VAR_2 , VAR_3 , VAR_4 ) ; } } ; ) VAR_4 , VAR_3 , VAR_2 , VAR_5 , VAR_1 , db ( METHOD_1 . TYPE_4 ; ) VAR_2 ( METHOD_3 . ) ( METHOD_2 . db = VAR_5 > PatchSetApproval . com.google.gerrit.reviewdb.client < TYPE_3 { com.google.gwtorm.server.OrmException throws ) VAR_4 TYPE_2 , VAR_3 com.google.gerrit.reviewdb.client.PatchSet , VAR_2 com.google.gerrit.reviewdb.client.PatchSet.Id , VAR_1 TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( server , admin ) ; VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . get ( ) ) ; VAR_3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 . get ( ) ) ; VAR_1 . close ( ) ; } } ; ) ( close . VAR_1 ; ) ) ( get . VAR_3 , VAR_1 ( METHOD_2 . TYPE_2 ; ) STRING_2 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_3 ; ) ) ( get . VAR_2 , VAR_1 ( METHOD_2 . TYPE_2 ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_2 ; ) admin , server ( TYPE_1 new = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 ) ; for ( TYPE_6 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } } } } ; ) e , log . TYPE_7 ( METHOD_5 . util { ) e java.lang.Exception ( catch } ; ) event ( METHOD_4 . VAR_4 { try { ) VAR_3 : VAR_4 TYPE_6 ( for ; ) VAR_2 , VAR_1 , revision , change ( TYPE_5 new = event TYPE_5 } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_3 ( ! ( if { ) VAR_2 TYPE_4 , VAR_1 TYPE_3 , revision TYPE_2 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
protected void METHOD_1 ( java.lang.String changeId , int VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.io.IOException { TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_2 . name ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( VAR_2 . name ( ) ) . VAR_6 ) ; } } ; ) VAR_6 . ) ) ( name . VAR_2 ( get . VAR_5 , VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_4 , ) ( name . VAR_2 ( org.junit.Assert.assertEquals ; ) VAR_3 , changeId ( getChange = c ChangeInfo . TYPE_1 { java.io.IOException throws ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 int , changeId java.lang.String ( METHOD_1 void protected 
private void METHOD_1 ( final TYPE_1 . ReceiveCommand cmd ) { TYPE_2 ctl = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ; if ( ctl . METHOD_3 ( ) ) { cmd . METHOD_4 ( rp ) ; } else { TYPE_3 . reject ( cmd , STRING_1 ) ; } } } } ; ) STRING_1 , cmd ( reject . TYPE_3 { else } ; ) rp ( METHOD_4 . cmd { ) ) ( METHOD_3 . ctl ( if ; ) ) ( getRefName . cmd ( METHOD_2 . VAR_1 = ctl TYPE_2 { ) cmd ReceiveCommand . TYPE_1 final ( METHOD_1 void private 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; commit . METHOD_2 ( ( VAR_1 ? ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) : false ) ) ; VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_2 . VAR_6 ; ) VAR_1 ( METHOD_2 . VAR_5 ; ) ) false : ) ( METHOD_4 . VAR_3 ? VAR_1 ( ( METHOD_2 . VAR_4 ; ) ) false : ) ) ( isEmpty . ) ( METHOD_3 . VAR_3 ( ! ? VAR_1 ( ( METHOD_2 . commit ; ) VAR_1 ( METHOD_2 . VAR_2 { ) VAR_1 boolean ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 { TYPE_3 cm = VAR_1 . create ( change.getId ( ) ) ; cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) ; cm . METHOD_4 ( patchSet , VAR_2 ) ; cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ; cm . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . cm ; ) ) ( METHOD_8 . VAR_3 ( METHOD_7 . cm ; ) ) ( METHOD_6 . VAR_3 ( METHOD_5 . cm ; ) VAR_2 , patchSet ( METHOD_4 . cm ; ) ) ( getAccountId . ) ( METHOD_3 . ctx ( METHOD_2 . cm ; ) ) ( change.getId ( create . VAR_1 = cm TYPE_3 { TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void private 
public static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 , final org.eclipse.jgit.revwalk.RevWalk rw , final TYPE_2 VAR_3 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) { return false ; } try { return ( VAR_2 == null ) || ( rw . METHOD_3 ( VAR_2 , VAR_3 ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; ) ) VAR_3 , VAR_2 ( METHOD_3 . rw ( || ) null == VAR_2 ( return { try } ; false return { ) ) VAR_3 , VAR_1 ( METHOD_2 . TYPE_4 ( if { TYPE_3 throws ) VAR_3 TYPE_2 final , rw org.eclipse.jgit.revwalk.RevWalk final , VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 boolean static public 
protected static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; try ( TYPE_2 e = new TYPE_2 ( s ) ) { s . METHOD_2 ( e , table , VAR_1 , to ) ; } } } } ; ) to , VAR_1 , table , e ( METHOD_2 . s { ) ) s ( TYPE_2 new = e TYPE_2 ( try ; ) ) db ( ) TYPE_1 ( ( = s TYPE_1 { com.google.gwtorm.server.OrmException throws ) to java.lang.String , VAR_1 java.lang.String , table java.lang.String , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void static protected 
public TYPE_1 METHOD_1 ( java.lang.String projectName ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey key = new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( key ) ; try { TYPE_2 . ProjectConfig cfg = new TYPE_2 . ProjectConfig ( key ) ; cfg . METHOD_1 ( git ) ; return VAR_2 . create ( cfg ) ; } finally { git . close ( ) ; } } } } ; ) ( close . git { finally } ; ) cfg ( create . VAR_2 return ; ) git ( METHOD_1 . cfg ; ) key ( ProjectConfig . TYPE_2 new = cfg ProjectConfig . TYPE_2 { try ; ) key ( METHOD_2 . VAR_1 = git org.eclipse.jgit.lib.Repository ; ) projectName ( com.google.gerrit.reviewdb.client.Project.NameKey new = key com.google.gerrit.reviewdb.client.Project.NameKey { java.lang.Exception throws ) projectName java.lang.String ( METHOD_1 TYPE_1 public 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { switch ( type ) { case VAR_2 : this . VAR_3 = ( VAR_1 ! = null ) ? TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : null ; return this ; case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : default : throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; } } } } ; ) ) type , STRING_1 ( java.lang.String.format ( TYPE_4 new throw : default : VAR_15 case : VAR_14 case : VAR_13 case : VAR_12 case : VAR_11 case : VAR_10 case : VAR_9 case : VAR_8 case : VAR_7 case : VAR_6 case : VAR_5 case : VAR_4 case ; this return ; null : ) ) VAR_1 ( METHOD_3 . TYPE_3 ( METHOD_2 . TYPE_2 ? ) null = ! VAR_1 ( = VAR_3 . this : VAR_2 case { ) type ( switch { ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 public 
private java.lang.String METHOD_1 ( TYPE_1 is ) throws java.io.IOException { VAR_1 = new TYPE_2 ( ) ; TYPE_3 input = new TYPE_3 ( is ) ; char [ ] VAR_2 = new char [ INT_1 ] ; int n = 0 ; while ( ( n = input . METHOD_2 ( VAR_2 ) ) ! = ( - 1 ) ) { VAR_1 . METHOD_3 ( VAR_2 , 0 , n ) ; } return VAR_1 . toString ( ) ; } } ; ) ( toString . VAR_1 return } ; ) n , 0 , VAR_2 ( METHOD_3 . VAR_1 { ) ) 1 - ( = ! ) ) VAR_2 ( METHOD_2 . input = n ( ( while ; 0 = n int ; ] INT_1 [ char new = VAR_2 ] [ char ; ) is ( TYPE_3 new = input TYPE_3 ; ) ( TYPE_2 new = VAR_1 { java.io.IOException throws ) is TYPE_1 ( METHOD_1 java.lang.String private 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { patchSet = ctx . METHOD_2 ( ) . patchSets ( ) . get ( psId ) ; if ( ! ( patchSet . METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } patchSet . METHOD_4 ( false ) ; } } ; ) false ( METHOD_4 . patchSet } ; ) STRING_1 ( TYPE_3 new throw { ) ) ) ( METHOD_3 . patchSet ( ! ( if ; ) psId ( get . ) ( patchSets . ) ( METHOD_2 . ctx = patchSet { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void private 
void METHOD_1 ( ) { TYPE_1 . get ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_1 . VAR_2 ; ) ( METHOD_4 . VAR_1 } ; ) STRING_1 ( TYPE_3 new throw { ) ) null == ) VAR_2 ( ( || ) null == ) VAR_1 ( ( ( if { ) ( METHOD_3 void public { ) ( TYPE_2 new ( METHOD_2 . ) ( get . TYPE_1 { ) ( METHOD_1 void 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; java.lang.String VAR_1 = STRING_1 + ( r . getChangeId ( ) ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_6 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . ) VAR_3 . ) VAR_1 ( getChange ( com.google.common.truth.Truth.assertThat ; ) VAR_1 ( METHOD_7 . ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 ; ) ( METHOD_6 . ) VAR_3 . ) VAR_1 ( getChange ( com.google.common.truth.Truth.assertThat ; ) VAR_1 ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 ; ) ) ( getChangeId . r ( + STRING_1 = VAR_1 java.lang.String ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; install ( TYPE_1 . METHOD_2 ( ) ) ; bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . create ( ) ) . to ( VAR_6 class ) ; } } ; ) class VAR_6 ( to . ) ) ( create . TYPE_2 ( METHOD_3 . ) class VAR_5 ( bind ; ) ) ( METHOD_2 . TYPE_1 ( install ; ) class VAR_4 ( to . ) class VAR_3 ( bind ; ) class VAR_2 ( to . ) class VAR_1 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet { ) ( METHOD_1 void protected 
private static synchronized TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 p = new TYPE_3 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( ( STRING_3 + STRING_4 ) + ( ++ ( VAR_2 ) ) ) ) ; final TYPE_1 VAR_3 = new TYPE_4 ( p ) ; return VAR_3 ; } } ; VAR_3 return ; ) p ( TYPE_4 new = VAR_3 TYPE_1 final ; ) ) ) ) VAR_2 ( ++ ( + ) STRING_4 + STRING_3 ( ( , STRING_2 ( METHOD_2 . p ; ) ) ( getName . class VAR_1 , STRING_1 ( METHOD_2 . p ; ) ( TYPE_3 new = p TYPE_3 final { TYPE_2 throws ) ( METHOD_1 TYPE_1 synchronized static private 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 [ ] VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { TYPE_5 d = new TYPE_5 ( ) ; if ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) { VAR_2 = VAR_3 ; } else { VAR_2 = VAR_4 ; VAR_5 = TYPE_6 . METHOD_2 ( VAR_1 [ 0 ] ) ; } METHOD_1 ( db , d ) ; } } ; ) d , db ( METHOD_1 } ; ) ] 0 [ VAR_1 ( METHOD_2 . TYPE_6 = VAR_5 ; VAR_4 = VAR_2 { else } ; VAR_3 = VAR_2 { ) ) 0 == ) length . VAR_1 ( ( || ) null == VAR_1 ( ( if ; ) ( TYPE_5 new = d TYPE_5 { TYPE_4 , TYPE_3 , TYPE_2 , java.io.IOException throws ) VAR_1 ] [ TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void private 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( ctl . getId ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; return METHOD_5 ( ) ; } } ; ) ( METHOD_5 return ; ) ( METHOD_4 . VAR_1 ; ) ) ) ( getId . ctl ( get . ) ( METHOD_3 . VAR_1 , ) ( getChange ( METHOD_2 . TYPE_2 ; ) this ( add . VAR_1 ; ) ) ( METHOD_1 ( create . VAR_2 = VAR_1 TYPE_1 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( commit org.eclipse.jgit.lib.ObjectId public 
public synchronized void METHOD_1 ( TYPE_1 index ) { int VAR_1 = index . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 i : VAR_2 ) { if ( ( i . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } } VAR_2 . add ( index ) ; } } ; ) index ( add . VAR_2 } } ; ) ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( TYPE_2 new throw { ) VAR_1 == ) ) ( METHOD_3 . ) ( METHOD_2 . i ( ( if { ) VAR_2 : i TYPE_1 ( for ; ) ( METHOD_3 . ) ( METHOD_2 . index = VAR_1 int { ) index TYPE_1 ( METHOD_1 void synchronized public 
private PatchSet . Id METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1 = commit . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . size ( ) ) ! = 1 ) { throw METHOD_3 ( STRING_1 , VAR_2 , VAR_1 ) ; } TYPE_2 psId = TYPE_3 . METHOD_4 ( VAR_1 . get ( 0 ) ) ; if ( psId == null ) { throw METHOD_3 ( STRING_2 , VAR_2 , VAR_1 . get ( 0 ) ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , psId ) ; } } ; ) psId , ) ( change.getId ( com.google.gerrit.reviewdb.client.PatchSet.Id new return } ; ) ) 0 ( get . VAR_1 , VAR_2 , STRING_2 ( METHOD_3 throw { ) null == psId ( if ; ) ) 0 ( get . VAR_1 ( METHOD_4 . TYPE_3 = psId TYPE_2 } ; ) VAR_1 , VAR_2 , STRING_1 ( METHOD_3 throw { ) 1 = ! ) ) ( size . VAR_1 ( ( if ; ) VAR_2 ( METHOD_2 . commit = VAR_1 > java.lang.String < java.util.List { TYPE_1 throws ) commit org.eclipse.jgit.revwalk.RevCommit ( METHOD_1 Id . PatchSet private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 0 ) ; TYPE_1 VAR_1 ; METHOD_3 ( ( ( VAR_2 ) - FLOAT_1 ) ) ; METHOD_4 ( ) ; TYPE_2 . ChangeInfo info = METHOD_5 ( METHOD_6 ( VAR_3 ) ) ; java.lang.String message = VAR_4 . get ( VAR_5 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_7 ( ) . METHOD_8 ( ) ) ) ; } } ; ) ) ) ( METHOD_8 . ) ( METHOD_7 . admin , VAR_6 , STRING_1 ( java.lang.String.format ( contains . ) message ( com.google.common.truth.Truth.assertThat ; message . commit . ) VAR_5 ( get . VAR_4 = message java.lang.String ; ) ) VAR_3 ( METHOD_6 ( METHOD_5 = info ChangeInfo . TYPE_2 ; ) ( METHOD_4 ; ) ) FLOAT_1 - ) VAR_2 ( ( ( METHOD_3 ; VAR_1 TYPE_1 ; ) 0 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 < TYPE_2 > VAR_2 , java.util.Map < java.lang.String , TYPE_4 > VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) { return new TYPE_5 ( VAR_1 , TYPE_6 . METHOD_1 ( VAR_2 ) , TYPE_7 . METHOD_1 ( VAR_3 ) , VAR_4 , VAR_5 ) ; } } ; ) VAR_5 , VAR_4 , ) VAR_3 ( METHOD_1 . TYPE_7 , ) VAR_2 ( METHOD_1 . TYPE_6 , VAR_1 ( TYPE_5 new return { ) VAR_5 java.lang.String , VAR_4 java.lang.String , VAR_3 > TYPE_4 , java.lang.String < java.util.Map , VAR_2 > TYPE_2 < TYPE_3 , VAR_1 TYPE_2 ( create TYPE_1 static private 
private void METHOD_1 ( TYPE_1 . Result r ) throws java.lang.Exception { revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; revision ( r ) . submit ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( project ) ; try { org.junit.Assert.assertEquals ( r . METHOD_5 ( ) , repo . METHOD_6 ( STRING_1 ) . METHOD_7 ( ) ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) ) ( METHOD_7 . ) STRING_1 ( METHOD_6 . repo , ) ( METHOD_5 . r ( org.junit.Assert.assertEquals { try ; ) project ( METHOD_4 . VAR_1 = repo org.eclipse.jgit.lib.Repository ; ) ( submit . ) r ( revision ; ) ) ( METHOD_3 . TYPE_2 ( METHOD_2 . ) r ( revision { java.lang.Exception throws ) r Result . TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) ; assertEquals ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 1 , CHAR_1 ) ) ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 , CHAR_2 , CHAR_3 , CHAR_4 , CHAR_4 , CHAR_5 , CHAR_5 , CHAR_6 ) ) ) ) ; } } ; ) ) ) ) CHAR_6 , CHAR_5 , CHAR_5 , CHAR_4 , CHAR_4 , CHAR_3 , CHAR_2 , INT_1 ( b . TYPE_2 ( r . TYPE_2 ( METHOD_3 . TYPE_1 , STRING_2 ( assertEquals ; ) ) ) ) CHAR_1 , 1 ( b . TYPE_2 ( r . TYPE_2 ( METHOD_3 . TYPE_1 , STRING_1 ( assertEquals ; ) ) ) ) 0 ( b . TYPE_2 ( r . TYPE_2 ( METHOD_3 . TYPE_1 ( METHOD_2 { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result r = METHOD_3 ( ) ; TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ; TYPE_3 in = new TYPE_3 ( ) ; VAR_2 = VAR_3 . toString ( ) ; in . label ( STRING_1 , INT_1 ) ; VAR_4 . METHOD_5 ( VAR_5 class ) ; VAR_4 . METHOD_6 ( STRING_2 ) ; revision . METHOD_7 ( in ) ; } } ; ) in ( METHOD_7 . revision ; ) STRING_2 ( METHOD_6 . VAR_4 ; ) class VAR_5 ( METHOD_5 . VAR_4 ; ) INT_1 , STRING_1 ( label . in ; ) ( toString . VAR_3 = VAR_2 ; ) ( TYPE_3 new = in TYPE_3 ; ) ( METHOD_4 . ) ) ( getChangeId . r ( id . ) ( changes . VAR_1 = revision TYPE_2 ; ) ( METHOD_3 = r Result . TYPE_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( id ) ; java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_9 ( ) ; } } } } ; ) ( TYPE_9 new throw { else } ; ) 0 ( get . VAR_3 return { ) 1 == ) ) ( size . VAR_3 ( ( if ; ) in , VAR_1 ( apply . ) ( get . put = VAR_3 > TYPE_1 < java.util.List ; ) id ( of . TYPE_8 = VAR_2 ; ) ( TYPE_7 new = in TYPE_7 { com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 throws ) input TYPE_3 , VAR_1 TYPE_2 ( apply TYPE_1 public 
public static boolean METHOD_1 ( ) { return ( ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ! = null ) & & ( TYPE_1 . METHOD_4 ( ) . auth ( ) . METHOD_5 ( ) ) ) & & ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ) ; } } ; ) ) ) ( METHOD_6 . ) ( METHOD_2 . TYPE_1 ( ! ( & & ) ) ) ( METHOD_5 . ) ( auth . ) ( METHOD_4 . TYPE_1 ( & & ) null = ! ) ) ( METHOD_3 . ) ( METHOD_2 . TYPE_1 ( ( ( return { ) ( METHOD_1 boolean static public 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( false ) ; TYPE_3 < TYPE_4 > VAR_2 = java.util.Collections . METHOD_4 ( ) ; TYPE_3 < TYPE_5 > VAR_3 = java.util.Collections . METHOD_4 ( ) ; java.util.Set < TYPE_6 > VAR_4 = TYPE_7 . of ( ) ; return new TYPE_1 ( account , VAR_4 , VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 , VAR_4 , account ( TYPE_1 new return ; ) ( of . TYPE_7 = VAR_4 > TYPE_6 < java.util.Set ; ) ( METHOD_4 . java.util.Collections = VAR_3 > TYPE_5 < TYPE_3 ; ) ( METHOD_4 . java.util.Collections = VAR_2 > TYPE_4 < TYPE_3 ; ) false ( METHOD_3 . account ; ) ) ( METHOD_2 . TYPE_2 , VAR_1 ( com.google.gerrit.reviewdb.client.Account new = account com.google.gerrit.reviewdb.client.Account { ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 static private 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return ( ) - > { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } ; case VAR_6 : return ( ) - > { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } ; default : return ( ) - > { } ; } } } } ; } { > - ) ( return : default ; } ; ) ( METHOD_2 . ) VAR_5 : VAR_8 ? VAR_7 ( { > - ) ( return : VAR_6 case ; } ; ) ( METHOD_2 . ) VAR_5 : VAR_4 ? VAR_3 ( { > - ) ( return : VAR_2 case { ) VAR_1 ( switch { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 
private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 ! = null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; } } ; VAR_3 return } ; ) ) ( METHOD_4 . VAR_3 , ) ( METHOD_3 . VAR_1 ( METHOD_2 . ) ) ( getAccountId . VAR_1 ( create . VAR_2 return { ) null = ! VAR_1 ( if { ) VAR_1 PatchSetApproval . TYPE_2 final ( METHOD_1 TYPE_1 private 
private java.util.Set < TYPE_1 > METHOD_1 ( java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < TYPE_1 > result = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_1 ) { TYPE_1 commit = VAR_2 . get ( cd . getId ( ) ) ; TYPE_4 . METHOD_3 ( ( commit ! = null ) , STRING_1 , cd . change ( ) . getId ( ) ) ; result . add ( commit ) ; } return result ; } } ; result return } ; ) commit ( add . result ; ) ) ( getId . ) ( change . cd , STRING_1 , ) null = ! commit ( ( METHOD_3 . TYPE_4 ; ) ) ( getId . cd ( get . VAR_2 = commit TYPE_1 { ) VAR_1 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ) ( size . VAR_1 ( METHOD_2 . TYPE_3 = result > TYPE_1 < TYPE_2 { com.google.gwtorm.server.OrmException throws ) VAR_1 > com.google.gerrit.server.query.change.ChangeData < java.util.List ( METHOD_1 > TYPE_1 < java.util.Set private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_3 ( to . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 ( METHOD_4 ; ) VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) { VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) VAR_2 , ) ( METHOD_5 . VAR_2 ( put . VAR_1 { ) ) ) VAR_3 ( METHOD_4 . ) ( METHOD_3 . ) ( get . db ( METHOD_2 . com.google.gerrit.server.query.change.ChangeData : VAR_2 PatchSetApproval . com.google.gerrit.reviewdb.client ( for ; ) ( create . TYPE_3 = VAR_1 { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) db > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_2 ( METHOD_1 > PatchSetApproval . com.google.gerrit.reviewdb.client , com.google.gerrit.reviewdb.client.PatchSet.Id < TYPE_1 private 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( TYPE_1 . METHOD_2 ( ) ) ! = null ) { table . METHOD_3 ( 0 , VAR_1 , TYPE_2 . METHOD_4 ( ) ) ; table . METHOD_5 ( ) . METHOD_6 ( 0 , VAR_1 , TYPE_3 . css ( ) . METHOD_7 ( ) ) ; } } } } ; ) ) ( METHOD_7 . ) ( css . TYPE_3 , VAR_1 , 0 ( METHOD_6 . ) ( METHOD_5 . table ; ) ) ( METHOD_4 . TYPE_2 , VAR_1 , 0 ( METHOD_3 . table { ) null = ! ) ) ( METHOD_2 . TYPE_1 ( ( if ; ) ( METHOD_1 . super { ) ( METHOD_1 void protected 
private void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( git , VAR_2 ) ; TYPE_2 res ; try { res = METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; } finally { try { VAR_1 . close ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_4 . METHOD_5 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) ; } } METHOD_6 ( res . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . res ( METHOD_6 } } ; ) VAR_3 , ) ) VAR_2 ( + STRING_1 ( ( METHOD_5 . VAR_4 { ) VAR_3 TYPE_3 ( catch } ; ) ( close . VAR_1 { try { finally } ; ) ( METHOD_4 ; ) VAR_1 ( METHOD_3 = res { try ; res TYPE_2 ; ) VAR_2 , git ( METHOD_2 . TYPE_1 = VAR_1 TYPE_1 { java.io.IOException throws ) ( METHOD_1 void private 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; if ( ( ( VAR_1 ) ! = null ) & & ( ( VAR_2 ) > = 0 ) ) { final TYPE_1 c = TYPE_2 . METHOD_3 ( VAR_2 ) ; if ( c ! = null ) { VAR_3 . put ( VAR_1 , METHOD_4 ( c ) ) ; } } super . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . super } } ; ) ) c ( METHOD_4 , VAR_1 ( put . VAR_3 { ) null = ! c ( if ; ) VAR_2 ( METHOD_3 . TYPE_2 = c TYPE_1 final { ) ) 0 = > ) VAR_2 ( ( & & ) null = ! ) VAR_1 ( ( ( if ; ) false ( METHOD_2 { ) ( METHOD_1 void public 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; ) ) ) ( value . ) revision ( apply . ) base ( METHOD_2 . ) ( get . VAR_1 ( ) > TYPE_1 , java.lang.String < java.util.Map ( ( return { try { TYPE_2 throws ) base java.lang.String ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map public 
public < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > factory ) { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 VAR_2 : VAR_3 ) { for ( TYPE_5 < ? > VAR_4 : VAR_2 . METHOD_3 ( ) ) { VAR_1 . add ( factory . METHOD_4 ( VAR_4 ) ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) ) VAR_4 ( METHOD_4 . factory ( add . VAR_1 { ) ) ( METHOD_3 . VAR_2 : VAR_4 > ? < TYPE_5 ( for { ) VAR_3 : VAR_2 TYPE_4 ( for ; ) ( METHOD_2 . TYPE_3 = VAR_1 > TYPE_1 < java.util.List { ) factory > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List > TYPE_1 < public 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , null ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e TYPE_3 ( catch } ; ) e , STRING_1 ( TYPE_2 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_2 . ) null , revision ( apply . ) ( get . VAR_1 ( id . changes return { try { TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 ! = null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 ! = VAR_1 ) { VAR_3 . METHOD_1 ( ) ; VAR_3 . close ( ) ; } } } } } } ; ) ( close . VAR_3 ; ) ( METHOD_1 . VAR_3 { ) VAR_1 = ! VAR_3 ( if { ) VAR_4 : VAR_3 TYPE_1 ( for } ; ) ( close . VAR_1 { ) null = ! VAR_1 ( if ; ) ( get . VAR_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1 = notes . getChange ( ) . METHOD_2 ( ) ; if ( ( VAR_1 ! = null ) & & ( METHOD_3 ( ) . METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_3 ( ) . getAccountId ( ) ; return id . equals ( VAR_1 . get ( ) ) ; } return false ; } } ; false return } ; ) ) ( get . VAR_1 ( equals . id return ; ) ( getAccountId . ) ( METHOD_3 = id com.google.gerrit.reviewdb.client.Account.Id { ) ) ) ( METHOD_4 . ) ( METHOD_3 ( & & ) null = ! VAR_1 ( ( if ; ) ( METHOD_2 . ) ( getChange . notes = VAR_1 com.google.gerrit.reviewdb.client.Account.Id { ) ( METHOD_1 boolean public 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , TYPE_2 VAR_2 , org.eclipse.jgit.revwalk.RevCommit VAR_3 , TYPE_3 VAR_4 , java.lang.String VAR_5 , byte [ ] VAR_6 , org.eclipse.jgit.revwalk.RevCommit base ) throws TYPE_4 , java.io.IOException { TYPE_5 VAR_7 = TYPE_6 . METHOD_2 ( VAR_4 , VAR_3 ) ; TYPE_6 . METHOD_3 ( VAR_1 , repo , rw , base , VAR_7 . METHOD_4 ( ) , VAR_2 , VAR_5 , VAR_6 ) ; return VAR_7 . METHOD_5 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_5 . VAR_7 return ; ) VAR_6 , VAR_5 , VAR_2 , ) ( METHOD_4 . VAR_7 , base , rw , repo , VAR_1 ( METHOD_3 . TYPE_6 ; ) VAR_3 , VAR_4 ( METHOD_2 . TYPE_6 = VAR_7 TYPE_5 { java.io.IOException , TYPE_4 throws ) base org.eclipse.jgit.revwalk.RevCommit , VAR_6 ] [ byte , VAR_5 java.lang.String , VAR_4 TYPE_3 , VAR_3 org.eclipse.jgit.revwalk.RevCommit , VAR_2 TYPE_2 , rw org.eclipse.jgit.revwalk.RevWalk , repo org.eclipse.jgit.lib.Repository , VAR_1 TYPE_1 ( METHOD_1 org.eclipse.jgit.lib.ObjectId static private 
public void run ( ) throws java.lang.Exception { METHOD_1 ( ) ; final TYPE_1 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) ! = null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } } } ; ) ( run . VAR_1 { else } ; ) query ( METHOD_3 . VAR_1 { ) null = ! ) query ( ( if ; ) format ( METHOD_2 . VAR_1 ; ) out , in ( create . factory = VAR_1 TYPE_1 final ; ) ( METHOD_1 { java.lang.Exception throws ) ( run void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_4 ( STRING_2 , u . METHOD_5 ( STRING_3 ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) STRING_3 ( METHOD_5 . u , STRING_2 ( METHOD_4 ; ) VAR_4 , VAR_1 ( user . util = u TYPE_2 ; ) STRING_1 , VAR_4 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_3 . ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . get ( VAR_1 ) ; boolean VAR_3 ; try { VAR_3 = METHOD_2 ( VAR_2 , null ) ; } catch ( TYPE_2 e ) { VAR_3 = false ; } return VAR_3 ? TYPE_1 . METHOD_3 ( VAR_1 ) : null ; } } ; null : ) VAR_1 ( METHOD_3 . TYPE_1 ? VAR_3 return } ; false = VAR_3 { ) e TYPE_2 ( catch } ; ) null , VAR_2 ( METHOD_2 = VAR_3 { try ; VAR_3 boolean ; ) VAR_1 ( get . TYPE_1 = VAR_2 java.lang.String final { ) VAR_1 java.lang.String final ( METHOD_1 java.lang.String public 
public void METHOD_1 ( final TYPE_1 < TYPE_2 > event ) { if ( ( VAR_1 ) == null ) { TYPE_3 . METHOD_2 ( patchSet . getId ( ) , new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( final TYPE_5 result ) { METHOD_3 ( result ) ; VAR_2 . METHOD_4 ( true ) ; } } ) ; } } } } ; ) } } ; ) true ( METHOD_4 . VAR_2 ; ) result ( METHOD_3 { ) result TYPE_5 final ( onSuccess void public { ) ( > TYPE_5 < TYPE_4 new , ) ( getId . patchSet ( METHOD_2 . TYPE_3 { ) null == ) VAR_1 ( ( if { ) event > TYPE_2 < TYPE_1 final ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ; TYPE_2 r = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; r . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . r ; ) VAR_4 ( isEqualTo . ) ) ( METHOD_4 . r ( com.google.common.truth.Truth.assertThat ; ) ) VAR_1 ( METHOD_3 , ) STRING_3 + ) ) ) ( get . project ( + STRING_2 ( ( ( put . VAR_3 = r TYPE_2 ; ) true , null , VAR_1 , VAR_2 ( METHOD_2 . TYPE_1 ; STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 < ? > in = VAR_2 ; while ( in ! = null ) { for ( final TYPE_3 VAR_3 : in . METHOD_2 ( ) ) { if ( ( VAR_3 . METHOD_3 ( VAR_4 class ) ) ! = null ) { VAR_1 . add ( new TYPE_1 ( VAR_3 ) ) ; } } in = in . METHOD_4 ( ) ; } METHOD_1 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_1 } ; ) ( METHOD_4 . in = in } } ; ) ) VAR_3 ( TYPE_1 new ( add . VAR_1 { ) null = ! ) ) class VAR_4 ( METHOD_3 . VAR_3 ( ( if { ) ) ( METHOD_2 . in : VAR_3 TYPE_3 final ( for { ) null = ! in ( while ; VAR_2 = in > ? < TYPE_2 ; ) ( > TYPE_1 < java.util.ArrayList new = VAR_1 > TYPE_1 < java.util.List final { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void private 
TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) throws java.io.IOException { TYPE_5 p = METHOD_2 ( ) ; if ( ( VAR_2 ) ! = null ) { return new TYPE_6 ( VAR_1 , VAR_2 ) ; } else { return new TYPE_7 ( VAR_1 , VAR_3 , p . METHOD_3 ( ) ) ; } } } } ; ) ) ( METHOD_3 . p , VAR_3 , VAR_1 ( TYPE_7 new return { else } ; ) VAR_2 , VAR_1 ( TYPE_6 new return { ) null = ! ) VAR_2 ( ( if ; ) ( METHOD_2 = p TYPE_5 { java.io.IOException throws ) VAR_1 > TYPE_4 , TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } } ; ) user , ) null , db , cd ( TYPE_1 new , db ( METHOD_5 return } ; ) user , ) null , db , cd ( TYPE_1 new , db ( METHOD_4 return { ) ) cfg ( METHOD_3 . TYPE_5 ( if ; ) user ( METHOD_2 . cd ; ) ) ( change.getId , ) ( getProject . change , db ( create . VAR_1 = cd com.google.gerrit.server.query.change.ChangeData { TYPE_4 , TYPE_3 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) user TYPE_2 , change com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 TYPE_1 public 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; for ( TYPE_2 ref : VAR_3 . values ( ) ) { TYPE_3 . AccountGroup VAR_4 = VAR_1 . get ( ref . METHOD_2 ( ) ) ; if ( ( VAR_4 ! = null ) & & ( ! ( VAR_4 . getName ( ) . equals ( ref . getName ( ) ) ) ) ) { VAR_2 = true ; ref . METHOD_3 ( VAR_4 . getName ( ) ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) ) ( getName . VAR_4 ( METHOD_3 . ref ; true = VAR_2 { ) ) ) ) ) ( getName . ref ( equals . ) ( getName . VAR_4 ( ! ( & & ) null = ! VAR_4 ( ( if ; ) ) ( METHOD_2 . ref ( get . VAR_1 = VAR_4 AccountGroup . TYPE_3 { ) ) ( values . VAR_3 : ref TYPE_2 ( for ; false = VAR_2 boolean { ) VAR_1 TYPE_1 ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; int VAR_1 = VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) . getAccountId ( ) . get ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { METHOD_5 ( repo , null , null , VAR_1 , null ) . insert ( ) ; } METHOD_6 ( STRING_3 ) ; METHOD_6 ( STRING_4 ) ; } } ; ) STRING_4 ( METHOD_6 ; ) STRING_3 ( METHOD_6 } ; ) ( insert . ) null , VAR_1 , null , null , repo ( METHOD_5 { ) ++ i ; INT_1 < i ; 0 = i int ( for ; ) ( get . ) ( getAccountId . ) ) STRING_2 ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_2 = VAR_1 int ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . name ( ( VAR_1 + STRING_2 ) ) . create ( ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_3 ) ; } } ; ) STRING_3 , VAR_1 ( METHOD_4 ; ) p , ) ( getProject . VAR_3 ( METHOD_3 . TYPE_3 ; ) ( METHOD_2 . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ) VAR_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( get . VAR_4 = VAR_3 TYPE_2 ; ) VAR_1 ( isEqualTo . ) name . p ( com.google.common.truth.Truth.assertThat ; ) ( get . ) ( create . ) ) STRING_2 + VAR_1 ( ( name . ) ( projects . VAR_2 = p TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { try { final TYPE_3 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) ; VAR_2 . create ( ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_3 class ) ; } catch ( TYPE_6 err ) { VAR_4 = null ; VAR_5 = null ; throw err ; } } } } ; err throw ; null = VAR_5 ; null = VAR_4 { ) err TYPE_6 ( catch } ; ) class VAR_3 , ) VAR_1 ( METHOD_5 . TYPE_5 ( METHOD_4 . ) ( create . VAR_2 ; ) ) this , VAR_1 ( > TYPE_1 < TYPE_4 new , class VAR_3 ( METHOD_3 . VAR_2 ; ) ( METHOD_2 = VAR_2 TYPE_3 final { try { TYPE_2 , java.io.IOException throws ) VAR_1 TYPE_1 final ( METHOD_1 void private 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( binder ( ) , VAR_1 ) ; bind ( VAR_2 class ) ; METHOD_3 ( VAR_3 , STRING_1 ) . to ( VAR_2 class ) ; delete ( VAR_1 ) . to ( VAR_4 class ) ; get ( VAR_5 , STRING_2 ) . to ( VAR_6 class ) ; put ( VAR_5 , STRING_2 ) . to ( VAR_7 class ) ; get ( VAR_8 , STRING_3 ) . to ( VAR_9 class ) ; put ( VAR_8 , STRING_3 ) . to ( VAR_10 class ) ; } } ; ) class VAR_10 ( to . ) STRING_3 , VAR_8 ( put ; ) class VAR_9 ( to . ) STRING_3 , VAR_8 ( get ; ) class VAR_7 ( to . ) STRING_2 , VAR_5 ( put ; ) class VAR_6 ( to . ) STRING_2 , VAR_5 ( get ; ) class VAR_4 ( to . ) VAR_1 ( delete ; ) class VAR_2 ( to . ) STRING_1 , VAR_3 ( METHOD_3 ; ) class VAR_2 ( bind ; ) VAR_1 , ) ( binder ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_4 ( ps ) ; org.junit.Assert.assertEquals ( 0 , VAR_3 . size ( ) ) ; } } ; ) ) ( size . VAR_3 , 0 ( org.junit.Assert.assertEquals ; ) ps ( METHOD_4 = VAR_3 > TYPE_2 < java.util.List ; ) ( METHOD_3 . ) STRING_1 , git ( to . VAR_1 = ps com.google.gerrit.reviewdb.client.PatchSet.Id ; ) ) ( METHOD_2 . admin , db ( create . VAR_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . create ( VAR_1 ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } } ; ) STRING_2 , VAR_1 ( METHOD_4 ; ) p , ) ( getProject . VAR_3 ( METHOD_3 . TYPE_3 ; ) ( METHOD_2 . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ) VAR_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( get . VAR_4 = VAR_3 TYPE_2 ; ) VAR_1 ( isEqualTo . ) name . p ( com.google.common.truth.Truth.assertThat ; ) ( get . ) VAR_1 ( create . ) ( projects . VAR_2 = p TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
private com.google.gerrit.reviewdb.client . AccountGroup group ( java.lang.String name ) throws java.lang.Exception { TYPE_1 args = new TYPE_1 ( ) ; args . METHOD_1 ( name ) ; VAR_1 = java.util.Collections.singleton ( admin . getId ( ) ) ; return VAR_2 . create ( args ) . METHOD_2 ( ) ; } } ; ) ( METHOD_2 . ) args ( create . VAR_2 return ; ) ) ( getId . admin ( java.util.Collections.singleton = VAR_1 ; ) name ( METHOD_1 . args ; ) ( TYPE_1 new = args TYPE_1 { java.lang.Exception throws ) name java.lang.String ( group AccountGroup . com.google.gerrit.reviewdb.client private 
private void delete ( java.lang.String path ) { METHOD_1 ( ) ; TYPE_1 . delete ( changeId . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( changeId ) ) ; } public void METHOD_3 ( TYPE_6 VAR_1 ) { } } ) ; } } ; ) } } { ) VAR_1 TYPE_6 ( METHOD_3 void public } ; ) ) changeId ( METHOD_2 . TYPE_5 ( display . TYPE_4 { ) result TYPE_3 ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , path , ) ( get . changeId ( delete . TYPE_1 ; ) ( METHOD_1 { ) path java.lang.String ( delete void private 
private com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String name , java.lang.String email ) throws TYPE_1 , TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 . Key VAR_2 = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = db . METHOD_2 ( ) ; TYPE_4 VAR_5 = VAR_4 . get ( VAR_2 ) ; if ( VAR_5 == null ) { return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; } else { return VAR_5 . getAccountId ( ) ; } } } } ; ) ( getAccountId . VAR_5 return { else } ; ) email , name , VAR_1 ( METHOD_3 . VAR_6 return { ) null == VAR_5 ( if ; ) VAR_2 ( get . VAR_4 = VAR_5 TYPE_4 ; ) ( METHOD_2 . db = VAR_4 TYPE_5 ; ) VAR_1 , VAR_3 ( Key . TYPE_4 new = VAR_2 Key . TYPE_4 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 , TYPE_1 throws ) email java.lang.String , name java.lang.String , VAR_1 java.lang.String , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 Id . com.google.gerrit.reviewdb.client.Change private 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( getName . c ( add . VAR_1 { ) ) ( METHOD_2 : c TYPE_3 final ( for ; ) STRING_1 ( add . VAR_1 ; ) ( > java.lang.String < TYPE_2 new = VAR_1 > java.lang.String < TYPE_1 final { ) ( METHOD_1 > java.lang.String < TYPE_1 protected 
private static java.lang.StringBuilder METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_1 ) ; int n = ( VAR_2 . get ( ) ) % INT_1 ; if ( n < INT_2 ) { r . append ( CHAR_1 ) ; } r . append ( n ) ; r . append ( CHAR_2 ) ; r . append ( VAR_2 . get ( ) ) ; r . append ( CHAR_2 ) ; return r ; } } ; r return ; ) CHAR_2 ( append . r ; ) ) ( get . VAR_2 ( append . r ; ) CHAR_2 ( append . r ; ) n ( append . r } ; ) CHAR_1 ( append . r { ) INT_2 < n ( if ; INT_1 % ) ) ( get . VAR_2 ( = n int ; ) VAR_1 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder { ) VAR_2 com.google.gerrit.reviewdb.client.Account.Id , VAR_1 java.lang.String ( METHOD_1 java.lang.StringBuilder static private 
private static void METHOD_1 ( final java.lang.String token , final TYPE_1 . Key id , final int line ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( token ) { public void onSuccess ( ) { TYPE_4 . display ( token , new TYPE_5 ( id , line ) ) ; } } ) ; } } ; ) } } ; ) ) line , id ( TYPE_5 new , token ( display . TYPE_4 { ) ( onSuccess void public { ) token ( TYPE_3 new ( METHOD_2 . TYPE_2 { ) line int final , id Key . TYPE_1 final , token java.lang.String final ( METHOD_1 void static private 
TYPE_1 METHOD_1 ( final TYPE_2 . Key key , final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2 = VAR_1 . getAccountId ( ) ; final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_3 . Key VAR_4 = VAR_1 . METHOD_3 ( ) ; return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } } ; ) VAR_5 , VAR_4 , VAR_3 , VAR_2 , key ( METHOD_1 return ; ) ( METHOD_3 . VAR_1 = VAR_4 Key . TYPE_3 final ; ) ( METHOD_2 . VAR_1 = VAR_3 boolean final ; ) ( getAccountId . VAR_1 = VAR_2 com.google.gerrit.reviewdb.client.Account.Id final { ) VAR_1 TYPE_1 final , key Key . TYPE_2 final ( METHOD_1 TYPE_1 
private long METHOD_1 ( java.lang.String n , java.lang.String VAR_1 , long VAR_2 ) { final long d = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 ) ; final long m ; m = TYPE_3 . METHOD_3 ( config , STRING_1 , n , VAR_1 , d , TYPE_1 ) ; return TYPE_2 . METHOD_2 ( m , TYPE_1 ) ; } } ; ) TYPE_1 , m ( METHOD_2 . TYPE_2 return ; ) TYPE_1 , d , VAR_1 , n , STRING_1 , config ( METHOD_3 . TYPE_3 = m ; m long final ; ) TYPE_2 , VAR_2 ( METHOD_2 . TYPE_1 = d long final { ) VAR_2 long , VAR_1 java.lang.String , n java.lang.String ( METHOD_1 long private 
private void add ( com.google.gerrit.reviewdb.server.ReviewDb db , java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { try { VAR_1 . add ( new TYPE_1 ( VAR_2 . getKey ( ) , TYPE_3 . METHOD_1 ( VAR_2 ) ) ) ; } catch ( TYPE_4 e ) { throw e ; } catch ( TYPE_5 e ) { METHOD_2 ( db , VAR_2 ) ; } } } } ; ) VAR_2 , db ( METHOD_2 { ) e TYPE_5 ( catch } ; e throw { ) e TYPE_4 ( catch } ; ) ) ) VAR_2 ( METHOD_1 . TYPE_3 , ) ( getKey . VAR_2 ( TYPE_1 new ( add . VAR_1 { try { ) VAR_2 TYPE_2 , VAR_1 > TYPE_1 < java.util.List , db com.google.gerrit.reviewdb.server.ReviewDb ( add void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_11 ( METHOD_7 . ) VAR_10 ( METHOD_6 . ) VAR_9 , VAR_8 ( METHOD_6 . ) VAR_7 ( to . ) VAR_6 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 get ( ) { TYPE_1 p = VAR_1 ; if ( ( VAR_2 ) & & ( p . METHOD_1 ( ) ) ) { final TYPE_1 VAR_3 ; try { VAR_3 = new TYPE_1 ( ) ; } catch ( java.io.IOException e ) { VAR_4 . error ( STRING_1 , e ) ; return p ; } p = VAR_3 ; VAR_1 = p ; } return p ; } } ; p return } ; p = VAR_1 ; VAR_3 = p } ; p return ; ) e , STRING_1 ( error . VAR_4 { ) e java.io.IOException ( catch } ; ) ( TYPE_1 new = VAR_3 { try ; VAR_3 TYPE_1 final { ) ) ) ( METHOD_1 . p ( & & ) VAR_2 ( ( if ; VAR_1 = p TYPE_1 { ) ( get TYPE_1 private 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( ) ; TYPE_4 . Result change = METHOD_3 ( git , true ) ; METHOD_3 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_4 ( change ) ; org.junit.Assert.assertEquals ( 0 , changes . size ( ) ) ; } } ; ) ) ( size . changes , 0 ( org.junit.Assert.assertEquals ; ) change ( METHOD_4 = changes > java.lang.String < java.util.Set ; ) false , git ( METHOD_3 ; ) true , git ( METHOD_3 = change Result . TYPE_4 ; ) ( METHOD_2 = git TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
private java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 notes ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > result = new TYPE_2 < > ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : VAR_1 . METHOD_2 ( db . get ( ) , notes ) ) { java.util.List < java.lang.String > VAR_2 = ps . METHOD_3 ( ) ; if ( VAR_2 ! = null ) { result . METHOD_4 ( VAR_2 ) ; } } return result ; } } ; result return } } ; ) VAR_2 ( METHOD_4 . result { ) null = ! VAR_2 ( if ; ) ( METHOD_3 . ps = VAR_2 > java.lang.String < java.util.List { ) ) notes , ) ( get . db ( METHOD_2 . VAR_1 : ps com.google.gerrit.reviewdb.client.PatchSet ( for ; ) ( > < TYPE_2 new = result > java.lang.String < java.util.Set { com.google.gwtorm.server.OrmException throws ) notes TYPE_1 ( METHOD_1 > java.lang.String < java.util.Set private 
public void add ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) ! = null ) { if ( VAR_1 instanceof TYPE_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = TYPE_3 . METHOD_1 ( ) ; } VAR_3 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ; } VAR_2 . add ( VAR_1 ) ; } } } } ; ) VAR_1 ( add . VAR_2 } ; ) ) ) VAR_1 ( ) > ? < TYPE_2 ( ( ( add . VAR_3 } ; ) ( METHOD_1 . TYPE_3 = VAR_3 { ) null == ) VAR_3 ( ( if { ) TYPE_2 instanceof VAR_1 ( if { ) null = ! ) VAR_2 ( ( if { ) VAR_1 TYPE_1 ( add void public 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_7 { final TYPE_8 result = VAR_1 . create ( VAR_2 , message ) . METHOD_1 ( ) ; if ( ( result . METHOD_2 ( ) . size ( ) ) > 0 ) { throw new TYPE_6 ( result . getChangeId ( ) ) ; } return VAR_3 . create ( result . getChangeId ( ) ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ) ( getChangeId . result ( create . VAR_3 return } ; ) ) ( getChangeId . result ( TYPE_6 new throw { ) 0 > ) ) ( size . ) ( METHOD_2 . result ( ( if ; ) ( METHOD_1 . ) message , VAR_2 ( create . VAR_1 = result TYPE_8 final { TYPE_7 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 , TYPE_3 , TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { TYPE_1 r = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; r . METHOD_3 ( ) ; r . METHOD_4 ( true ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ; TYPE_3 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_3 ( METHOD_6 . u , STRING_2 ( METHOD_5 ; ) VAR_4 , VAR_1 ( user . util = u TYPE_3 ; ) STRING_1 , VAR_4 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_2 ; ) true ( METHOD_4 . r ; ) ( METHOD_3 . r ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_2 = r TYPE_1 { ) ( METHOD_1 void public 
protected void METHOD_1 ( TYPE_1 value ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . create ( project ) ; TYPE_3 . ProjectConfig config = TYPE_4 . METHOD_2 ( VAR_1 ) ; config . getProject ( ) . METHOD_1 ( value ) ; config . commit ( VAR_1 ) ; VAR_3 . METHOD_3 ( config . getProject ( ) ) ; } } ; ) ) ( getProject . config ( METHOD_3 . VAR_3 ; ) VAR_1 ( commit . config ; ) value ( METHOD_1 . ) ( getProject . config ; ) VAR_1 ( METHOD_2 . TYPE_4 = config ProjectConfig . TYPE_3 ; ) project ( create . VAR_2 = VAR_1 TYPE_2 { java.lang.Exception throws ) value TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( final TYPE_1 . Key VAR_1 , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 , final TYPE_2 VAR_4 , final TYPE_3 < TYPE_4 > VAR_5 ) { if ( VAR_3 == null ) { VAR_5 . METHOD_2 ( new TYPE_5 ( ) ) ; return ; } TYPE_6 . METHOD_3 ( VAR_6 . create ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . to ( VAR_5 ) ; } } ; ) VAR_5 ( to . ) ) VAR_4 , VAR_3 , VAR_2 , VAR_1 ( create . VAR_6 ( METHOD_3 . TYPE_6 } ; return ; ) ) ( TYPE_5 new ( METHOD_2 . VAR_5 { ) null == VAR_3 ( if { ) VAR_5 > TYPE_4 < TYPE_3 final , VAR_4 TYPE_2 final , VAR_3 com.google.gerrit.reviewdb.client.PatchSet.Id final , VAR_2 com.google.gerrit.reviewdb.client.PatchSet.Id final , VAR_1 Key . TYPE_1 final ( METHOD_1 void public 
public static void METHOD_1 ( final TYPE_1 . NameKey project , final java.lang.String ref ) { for ( final TYPE_2 cfg : TYPE_3 . METHOD_2 ( ) ) { if ( cfg . METHOD_3 ( ref ) ) { for ( final TYPE_4 VAR_1 : cfg . METHOD_4 ( project ) ) { TYPE_3 . METHOD_5 ( project , ref , cfg , VAR_1 ) ; } } } } } } } } ; ) VAR_1 , cfg , ref , project ( METHOD_5 . TYPE_3 { ) ) project ( METHOD_4 . cfg : VAR_1 TYPE_4 final ( for { ) ) ref ( METHOD_3 . cfg ( if { ) ) ( METHOD_2 . TYPE_3 : cfg TYPE_2 final ( for { ) ref java.lang.String final , project NameKey . TYPE_1 final ( METHOD_1 void static public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_10 class ) . to ( VAR_11 class ) ; install ( VAR_12 ) ; } } ; ) VAR_12 ( install ; ) class VAR_11 ( to . ) class VAR_10 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) class Factory . VAR_9 ( factory ; ) class Factory . VAR_8 ( factory ; ) VAR_5 ( in . ) class VAR_7 ( METHOD_3 . ) class VAR_6 ( bind ; ) VAR_5 ( in . ) class VAR_4 ( bind ; ) class VAR_3 ( METHOD_3 . ) class VAR_2 ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { for ( TYPE_2 < java.lang.String , TYPE_3 < TYPE_4 < ? , ? > > > VAR_3 : VAR_4 . METHOD_2 ( VAR_1 . getName ( ) ) . METHOD_3 ( ) ) { TYPE_4 < ? , ? > VAR_5 = VAR_3 . getValue ( ) . get ( ) ; if ( VAR_2 . METHOD_4 ( VAR_5 ) ) { ( ( TYPE_5 < ? , ? > ) ( VAR_5 ) ) . METHOD_5 ( ) ; } } } } } } } } ; ) ( METHOD_5 . ) ) VAR_5 ( ) > ? , ? < TYPE_5 ( ( { ) ) VAR_5 ( METHOD_4 . VAR_2 ( if ; ) ( get . ) ( getValue . VAR_3 = VAR_5 > ? , ? < TYPE_4 { ) ) ( METHOD_3 . ) ) ( getName . VAR_1 ( METHOD_2 . VAR_4 : VAR_3 > > > ? , ? < TYPE_4 < TYPE_3 , java.lang.String < TYPE_2 ( for { ) VAR_2 ( synchronized { ) VAR_1 TYPE_1 ( METHOD_1 void public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; factory ( VAR_2 . Factory class ) ; install ( new TYPE_2 ( VAR_3 ) ) ; if ( ( ( VAR_4 ) == null ) & & ( ( base ) == null ) ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( ) ) ; } } } } ; ) ) ( TYPE_4 new ( install { else } ; ) ) ( TYPE_3 new ( install { ) ) null == ) base ( ( & & ) null == ) VAR_4 ( ( ( if ; ) ) VAR_3 ( TYPE_2 new ( install ; ) class Factory . VAR_2 ( factory ; ) ) ( METHOD_3 . TYPE_1 ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ; for ( final com.google.gerrit.reviewdb.client.Account a : out . values ( ) ) { r . add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } } ; ) r ( TYPE_1 new return } ; ) ) a ( TYPE_2 new ( add . r { ) ) ( values . out : a com.google.gerrit.reviewdb.client.Account final ( for ; ) ) ( size . out ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.List final { ) ( create TYPE_1 public 
public boolean METHOD_1 ( ) { if ( ( TYPE_1 . equals ( VAR_1 ) ) & & ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) & & ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) { return false ; } } return ( METHOD_8 ( VAR_3 ) ) & & ( METHOD_9 ( ) ) ; } } ; ) ) ( METHOD_9 ( & & ) ) VAR_3 ( METHOD_8 ( return } } ; false return { ) ) ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 ( & & ) ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 ( ( ! ( if { ) ) ) ) ( METHOD_2 . VAR_2 ( ! ( & & ) ) VAR_1 ( equals . TYPE_1 ( ( if { ) ( METHOD_1 boolean public 
public static void METHOD_1 ( boolean VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_2 , TYPE_1 < java.lang.String > VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , id , VAR_2 ) . get ( new TYPE_3 < TYPE_4 , java.lang.String > ( VAR_3 ) { public void onSuccess ( TYPE_4 VAR_4 ) { VAR_5 . onSuccess ( TYPE_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ) ; } } ) ; } } ; ) } } ; ) ) ) ( METHOD_4 . VAR_4 ( METHOD_3 . TYPE_2 ( onSuccess . VAR_5 { ) VAR_4 TYPE_4 ( onSuccess void public { ) VAR_3 ( > java.lang.String , TYPE_4 < TYPE_3 new ( get . ) VAR_2 , id , VAR_1 ( METHOD_2 . TYPE_2 { ) VAR_3 > java.lang.String < TYPE_1 , VAR_2 java.lang.String , id com.google.gerrit.reviewdb.client.PatchSet.Id , VAR_1 boolean ( METHOD_1 void static public 
private int METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > s ) { int n = ( VAR_1 . METHOD_2 ( s ) ) ? VAR_1 . METHOD_3 ( s ) : VAR_2 ; return ( VAR_3 ) > 0 ? ( TYPE_2 . METHOD_4 ( n , VAR_3 ) ) + 1 : n ; } } ; n : 1 + ) ) VAR_3 , n ( METHOD_4 . TYPE_2 ( ? 0 > ) VAR_3 ( return ; VAR_2 : ) s ( METHOD_3 . VAR_1 ? ) ) s ( METHOD_2 . VAR_1 ( = n int { ) s > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ( METHOD_1 int private 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( VAR_1 . METHOD_3 ( METHOD_2 ( ) ) ) ) || ( VAR_1 . METHOD_1 ( ) ) ) & & ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ) & & ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) & & ( ! ( METHOD_9 ( db ) ) ) ; } } ; ) ) ) db ( METHOD_9 ( ! ( & & ) ) ) ( METHOD_8 . ) ( METHOD_7 . ) ( METHOD_6 ( & & ) ) ) VAR_2 ( METHOD_5 . ) ( METHOD_4 . VAR_1 ( & & ) ) ) ( METHOD_1 . VAR_1 ( || ) ) ) ) ( METHOD_2 ( METHOD_3 . VAR_1 ( || ) ) ( METHOD_2 ( ( ( ( ( return { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
public TYPE_1 METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws TYPE_3 { final TYPE_4 . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user . get ( ) , group ) ; } } ; ) group , ) ( get . user ( TYPE_1 new return } ; ) VAR_1 ( TYPE_3 new throw { ) null == group ( if ; ) VAR_1 ( get . VAR_2 = group AccountGroup . TYPE_4 final { TYPE_3 throws ) VAR_1 Id . TYPE_2 final ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { try { final TYPE_3 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) ; VAR_2 . create ( ) . METHOD_4 ( METHOD_5 ( VAR_1 ) , VAR_3 class ) ; } catch ( TYPE_5 err ) { VAR_4 = null ; VAR_5 = null ; throw err ; } } } } ; err throw ; null = VAR_5 ; null = VAR_4 { ) err TYPE_5 ( catch } ; ) class VAR_3 , ) VAR_1 ( METHOD_5 ( METHOD_4 . ) ( create . VAR_2 ; ) ) this , VAR_1 ( > TYPE_1 < TYPE_4 new , class VAR_3 ( METHOD_3 . VAR_2 ; ) ( METHOD_2 = VAR_2 TYPE_3 final { try { TYPE_2 , java.io.IOException throws ) VAR_1 TYPE_1 final ( METHOD_1 void private 
protected TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String name ) throws java.lang.Exception { TYPE_3 create = VAR_1 . create ( name ) ; create . apply ( VAR_2 , new TYPE_4 ( ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_3 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ; } } ; ) ) ) name ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_2 . VAR_3 ( > TYPE_2 < TYPE_1 new return ; ) ) ( TYPE_4 new , VAR_2 ( apply . create ; ) name ( create . VAR_1 = create TYPE_3 { java.lang.Exception throws ) name java.lang.String ( METHOD_1 > TYPE_2 < TYPE_1 protected 
private static TYPE_1 < ? extends TYPE_2 > METHOD_1 ( java.lang.String name , TYPE_3 VAR_1 ) throws TYPE_4 { if ( TYPE_5 . METHOD_2 ( name ) ) { return null ; } TYPE_1 < ? > VAR_2 = TYPE_1 . METHOD_3 ( name , false , VAR_1 ) ; if ( ! ( VAR_3 class . METHOD_4 ( VAR_2 ) ) ) { throw new TYPE_6 ( java.lang.String.format ( STRING_1 , name , VAR_3 class . getName ( ) ) ) ; } return ( ( TYPE_1 < ? extends TYPE_2 > ) ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( ) > TYPE_2 extends ? < TYPE_1 ( ( return } ; ) ) ) ( getName . class VAR_3 , name , STRING_1 ( java.lang.String.format ( TYPE_6 new throw { ) ) ) VAR_2 ( METHOD_4 . class VAR_3 ( ! ( if ; ) VAR_1 , false , name ( METHOD_3 . TYPE_1 = VAR_2 > ? < TYPE_1 } ; null return { ) ) name ( METHOD_2 . TYPE_5 ( if { TYPE_4 throws ) VAR_1 TYPE_3 , name java.lang.String ( METHOD_1 > TYPE_2 extends ? < TYPE_1 static private 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ; for ( final TYPE_1 VAR_1 : result ) { r . add ( new TYPE_2 ( VAR_1 ) ) ; } VAR_2 . METHOD_1 ( req , new TYPE_3 ( r ) ) ; } } ; ) ) r ( TYPE_3 new , req ( METHOD_1 . VAR_2 } ; ) ) VAR_1 ( TYPE_2 new ( add . r { ) result : VAR_1 TYPE_1 final ( for ; ) ) ( size . result ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.List final { ) result > TYPE_1 < java.util.List final ( onSuccess void public 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.client . AccountGroup > schema , TYPE_3 cfg , TYPE_4 VAR_1 ) throws java.io.IOException { if ( TYPE_5 . METHOD_2 ( cfg ) ) { return new TYPE_6 ( ) ; } TYPE_7 VAR_2 = TYPE_8 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ; return TYPE_9 . METHOD_4 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_4 . TYPE_9 return ; ) schema , ) STRING_1 + ) VAR_3 ( ( , VAR_1 ( METHOD_3 . TYPE_8 = VAR_2 TYPE_7 } ; ) ( TYPE_6 new return { ) ) cfg ( METHOD_2 . TYPE_5 ( if { java.io.IOException throws ) VAR_1 TYPE_4 , cfg TYPE_3 , schema > AccountGroup . com.google.gerrit.reviewdb.client < TYPE_2 ( METHOD_1 TYPE_1 static private 
public boolean METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( METHOD_2 ( key ) ) ) + STRING_3 ) ) { TYPE_3 METHOD_3 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , key ) ; return VAR_3 . METHOD_5 ( TYPE_5 . on ( STRING_4 ) . METHOD_6 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . } } ; ) VAR_2 , ) VAR_1 , STRING_5 , VAR_4 ( METHOD_6 . ) STRING_4 ( on . TYPE_5 ( METHOD_5 . VAR_3 return ; ) key , VAR_1 ( METHOD_4 . TYPE_4 = VAR_2 java.lang.String { java.io.IOException throws ) ( METHOD_3 TYPE_3 { ) ) STRING_3 + ) ) ) key ( METHOD_2 ( + ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( ( ( TYPE_2 new return { ) key TYPE_1 final , VAR_1 java.lang.String final ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = insert ( METHOD_3 ( repo ) ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_3 ( repo ) ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } } ; ) VAR_2 , ) ( get . ) ( getId . VAR_2 ( METHOD_4 ; ) VAR_1 , ) ( get . ) ( getId . VAR_1 ( METHOD_4 ; ) STRING_2 ( METHOD_4 ; ) ) repo ( METHOD_3 ( insert = VAR_2 com.google.gerrit.reviewdb.client.Change ; ) ) repo ( METHOD_3 ( insert = VAR_1 com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 . ChangeInfo apply ( TYPE_2 req , final TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { TYPE_6 VAR_1 = req . METHOD_1 ( ) ; TYPE_7 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( VAR_1 . METHOD_4 ( VAR_3 . get ( ) ) ) ) { throw new TYPE_8 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change = METHOD_5 ( VAR_1 , input . message , VAR_2 . METHOD_6 ( ) ) ; return VAR_4 . create ( VAR_5 ) . format ( change ) ; } } ; ) change ( format . ) VAR_5 ( create . VAR_4 return ; ) ) ( METHOD_6 . VAR_2 , message . input , VAR_1 ( METHOD_5 = change com.google.gerrit.reviewdb.client.Change } ; ) STRING_1 ( TYPE_8 new throw { ) ) ) ) ( get . VAR_3 ( METHOD_4 . VAR_1 ( ! ( if ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 = VAR_2 TYPE_7 ; ) ( METHOD_1 . req = VAR_1 TYPE_6 { com.google.gwtorm.server.OrmException , TYPE_5 , TYPE_4 throws ) input TYPE_3 final , req TYPE_2 ( apply ChangeInfo . TYPE_1 public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ; } } ; ) class VAR_10 ( to . ) class VAR_9 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) class Factory . VAR_8 ( factory ; ) VAR_5 ( in . ) class VAR_7 ( METHOD_3 . ) class VAR_6 ( bind ; ) VAR_5 ( in . ) class VAR_4 ( bind ; ) class VAR_3 ( METHOD_3 . ) class VAR_2 ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ; return auth ( db . METHOD_3 ( ) . get ( key ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ) . log ( STRING_1 , e ) ; return null ; } } } } ; null return ; ) e , STRING_1 ( log . ) ( METHOD_4 { ) e com.google.gwtorm.server.OrmException ( catch } } ; ) ( close . db { finally } ; ) ) key ( get . ) ( METHOD_3 . db ( auth return ; ) VAR_1 , VAR_2 ( Key . TYPE_2 new = key Key . TYPE_2 { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { try { ) VAR_1 java.lang.String final ( METHOD_1 TYPE_1 private 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 user = VAR_1 . METHOD_1 ( ) ; if ( ( user ! = null ) & & ( user . METHOD_2 ( ) ) ) { TYPE_2 VAR_2 = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ; VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } } ; user return } ; VAR_2 return ; ) ) ( METHOD_4 . user ( METHOD_3 . VAR_2 ; ) ) ( getAccountId . ) ) user ( ) TYPE_2 ( ( ( create . VAR_3 = VAR_2 TYPE_2 { ) ) ) ( METHOD_2 . user ( & & ) null = ! user ( ( if ; ) ( METHOD_1 . VAR_1 = user TYPE_1 final { ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( null ) . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( STRING_4 , VAR_1 . METHOD_9 ( ) ) ; } } ; ) ) ( METHOD_9 . VAR_1 , STRING_4 ( METHOD_8 ; ) ( METHOD_7 ; ) ( METHOD_6 . ) null ( METHOD_5 . ) ) STRING_3 , STRING_2 , STRING_1 ( METHOD_4 . VAR_2 ( METHOD_3 . TYPE_2 ; ) ( METHOD_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public TYPE_1 run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws TYPE_2 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = getAccountId ( ) ; for ( final TYPE_3 . Key VAR_1 : VAR_2 ) { if ( ! ( me . equals ( VAR_1 . getParentKey ( ) ) ) ) throw new TYPE_2 ( new TYPE_4 ( ) ) ; } db . METHOD_1 ( ) . METHOD_2 ( VAR_2 ) ; return VAR_3 ; } } ; VAR_3 return ; ) VAR_2 ( METHOD_2 . ) ( METHOD_1 . db } ; ) ) ( TYPE_4 new ( TYPE_2 new throw ) ) ) ) ( getParentKey . VAR_1 ( equals . me ( ! ( if { ) VAR_2 : VAR_1 Key . TYPE_3 final ( for ; ) ( getAccountId = me com.google.gerrit.reviewdb.client.Account.Id final { com.google.gwtorm.server.OrmException , TYPE_2 throws ) db com.google.gerrit.reviewdb.server.ReviewDb final ( run TYPE_1 public 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { TYPE_2 VAR_1 = new TYPE_2 ( admin ) ; java.lang.String result = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_2 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_3 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_4 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_5 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_6 ) ) ; VAR_1 . close ( ) ; } } ; ) ( close . VAR_1 ; ) ) STRING_6 ( contains . result ( METHOD_3 . org.junit.Assert ; ) ) STRING_5 ( contains . result ( METHOD_3 . org.junit.Assert ; ) ) STRING_4 ( contains . result ( METHOD_3 . org.junit.Assert ; ) ) STRING_3 ( contains . result ( METHOD_3 . org.junit.Assert ; ) ) STRING_2 ( contains . result ( METHOD_3 . org.junit.Assert ; ) STRING_1 ( METHOD_2 . VAR_1 = result java.lang.String ; ) admin ( TYPE_2 new = VAR_1 TYPE_2 { java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . r ; ) ) ( METHOD_3 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ) ) ( METHOD_2 . branch ( + ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( ( delete . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.lib.ObjectId VAR_1 , int VAR_2 ) { TYPE_1 result = new TYPE_1 ( ) ; VAR_3 = psId . getParentKey ( ) . get ( ) ; result . commit = new TYPE_2 ( ) ; VAR_4 . commit = VAR_1 . name ( ) ; VAR_5 = psId . get ( ) ; VAR_6 = VAR_2 ; result . status = STRING_1 ; return result ; } } ; result return ; STRING_1 = status . result ; VAR_2 = VAR_6 ; ) ( get . psId = VAR_5 ; ) ( name . VAR_1 = commit . VAR_4 ; ) ( TYPE_2 new = commit . result ; ) ( get . ) ( getParentKey . psId = VAR_3 ; ) ( TYPE_1 new = result TYPE_1 { ) VAR_2 int , VAR_1 org.eclipse.jgit.lib.ObjectId , psId com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } } ; ) VAR_2 , ) ( get . ) ( getId . VAR_2 ( METHOD_4 ; ) VAR_1 , ) ( get . ) ( getId . VAR_1 ( METHOD_4 ; ) STRING_2 ( METHOD_4 ; ) ) null , null , null , null , repo ( METHOD_3 ( insert = VAR_2 com.google.gerrit.reviewdb.client.Change ; ) ) null , null , null , null , repo ( METHOD_3 ( insert = VAR_1 com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void delete ( TYPE_1 edit ) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit . getChange ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( change . getProject ( ) ) ; try { TYPE_2 . METHOD_2 ( repo , edit ) ; } finally { repo . close ( ) ; } VAR_2 . index ( db . get ( ) , change ) ; } } ; ) change , ) ( get . db ( index . VAR_2 } ; ) ( close . repo { finally } ; ) edit , repo ( METHOD_2 . TYPE_2 { try ; ) ) ( getProject . change ( METHOD_1 . VAR_1 = repo org.eclipse.jgit.lib.Repository ; ) ( getChange . edit = change com.google.gerrit.reviewdb.client.Change { java.io.IOException throws ) edit TYPE_1 ( delete void public 
private TYPE_1 . OrmException METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 err ) { if ( ( ( err . METHOD_2 ( ) ) == null ) & & ( ( err . METHOD_3 ( ) ) ! = null ) ) { err . METHOD_4 ( err . METHOD_3 ( ) ) ; } return schema . METHOD_5 ( ) . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_6 ( ) , err ) ; } } ; ) err , ) ( METHOD_6 . TYPE_3 , VAR_1 ( METHOD_1 . ) ( METHOD_5 . schema return } ; ) ) ( METHOD_3 . err ( METHOD_4 . err { ) ) null = ! ) ) ( METHOD_3 . err ( ( & & ) null == ) ) ( METHOD_2 . err ( ( ( if { ) err TYPE_2 final , VAR_1 java.lang.String final ( METHOD_1 OrmException . TYPE_1 private 
private static void METHOD_1 ( final java.lang.String in ) { try { TYPE_1 . METHOD_2 ( in ) ; METHOD_3 ( ( STRING_1 + in ) ) ; } catch ( TYPE_2 e ) { assertEquals ( ( STRING_2 + in ) , e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e , ) in + STRING_2 ( ( assertEquals { ) e TYPE_2 ( catch } ; ) ) in + STRING_1 ( ( METHOD_3 ; ) in ( METHOD_2 . TYPE_1 { try { ) in java.lang.String final ( METHOD_1 void static private 
private static void METHOD_1 ( byte [ ] VAR_1 , TYPE_1 p ) { while ( ( ( p . value ) < ( VAR_1 . length ) ) & & ( ( VAR_1 [ p . value ] ) == CHAR_1 ) ) { ( p . value ) ++ ; } } } } ; ++ ) value . p ( { ) ) CHAR_1 == ) ] value . p [ VAR_1 ( ( & & ) ) length . VAR_1 ( < ) value . p ( ( ( while { ) p TYPE_1 , VAR_1 ] [ byte ( METHOD_1 void static private 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; } return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_4 . ) VAR_2 ( METHOD_6 . ) ( METHOD_5 . VAR_1 return } ; ) VAR_3 ( METHOD_4 . ) ( METHOD_2 . VAR_1 return { ) ) VAR_2 ( equals . ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( if { java.io.IOException throws ) ( METHOD_1 TYPE_1 public 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { METHOD_1 ( db , VAR_1 ) ; final TYPE_2 . AccountGroup group = db . METHOD_2 ( ) . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } group . METHOD_3 ( VAR_2 ) ; db . METHOD_2 ( ) . update ( java.util.Collections.singleton ( group ) ) ; return VAR_3 ; } } ; VAR_3 return ; ) ) group ( java.util.Collections.singleton ( update . ) ( METHOD_2 . db ; ) VAR_2 ( METHOD_3 . group } ; ) ) ( TYPE_5 new ( TYPE_3 new throw { ) null == group ( if ; ) VAR_1 ( get . ) ( METHOD_2 . db = group AccountGroup . TYPE_2 final ; ) VAR_1 , db ( METHOD_1 { OrmException . TYPE_4 , TYPE_3 throws ) db ReviewDb . TYPE_2 final ( run TYPE_1 public 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . Change change = db . changes ( ) . get ( id ) ; if ( change == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1 = new TYPE_6 ( ) ; final TYPE_1 d = new TYPE_1 ( ) ; d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) ; return d ; } } ; d return ; ) change , VAR_1 , ) db ( TYPE_7 new , db ( METHOD_1 . d ; ) ( TYPE_1 new = d TYPE_1 final ; ) ( TYPE_6 new = VAR_1 TYPE_6 final } ; ) ) ( TYPE_5 new ( TYPE_3 new throw { ) null == change ( if ; ) id ( get . ) ( changes . db = change Change . TYPE_2 final { OrmException . TYPE_4 , TYPE_3 throws ) db ReviewDb . TYPE_2 final ( run TYPE_1 public 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; VAR_1 . METHOD_2 ( getChange ( ) ) ; VAR_1 . METHOD_3 ( ) ; return METHOD_4 ( ) ; } } ; ) ( METHOD_4 return ; ) ( METHOD_3 . VAR_1 ; ) ) ( getChange ( METHOD_2 . VAR_1 ; ) this ( add . VAR_1 ; ) ) ( METHOD_1 ( create . VAR_2 = VAR_1 TYPE_1 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( commit org.eclipse.jgit.lib.ObjectId public 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } else { TYPE_4 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; return VAR_5 . METHOD_4 ( VAR_3 ) ; } } } } ; ) VAR_3 ( METHOD_4 . VAR_5 return ; ) VAR_2 ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_2 . VAR_1 = VAR_5 TYPE_4 { else } ; ) VAR_4 , VAR_3 ( METHOD_4 . ) ( METHOD_2 . VAR_1 return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( equals . VAR_2 ( if { java.io.IOException throws ) VAR_2 java.lang.String , VAR_1 TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 private 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; } } ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) class VAR_2 ( to . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
private Project . NameKey METHOD_1 ( TYPE_1 p ) { java.lang.String projectName = VAR_1 . METHOD_2 ( p ) . toString ( ) ; if ( ( VAR_2 ) ! = CHAR_1 ) { projectName = projectName . METHOD_3 ( VAR_2 , CHAR_1 ) ; } if ( projectName . METHOD_4 ( TYPE_2 ) ) { int VAR_3 = ( projectName . length ( ) ) - ( TYPE_2 . length ( ) ) ; projectName = projectName . METHOD_5 ( 0 , VAR_3 ) ; } return new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; } } ; ) projectName ( com.google.gerrit.reviewdb.client.Project.NameKey new return } ; ) VAR_3 , 0 ( METHOD_5 . projectName = projectName ; ) ) ( length . TYPE_2 ( - ) ) ( length . projectName ( = VAR_3 int { ) ) TYPE_2 ( METHOD_4 . projectName ( if } ; ) CHAR_1 , VAR_2 ( METHOD_3 . projectName = projectName { ) CHAR_1 = ! ) VAR_2 ( ( if ; ) ( toString . ) p ( METHOD_2 . VAR_1 = projectName java.lang.String { ) p TYPE_1 ( METHOD_1 NameKey . Project private 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . getName ( ) , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( VAR_2 ) ; } public void METHOD_3 ( TYPE_5 VAR_3 ) { VAR_4 . METHOD_4 ( STRING_2 ) ; super . METHOD_3 ( VAR_3 ) ; } } ) ; } } ; ) } } ; ) VAR_3 ( METHOD_3 . super ; ) STRING_2 ( METHOD_4 . VAR_4 { ) VAR_3 TYPE_5 ( METHOD_3 void public } ; ) VAR_2 ( display . TYPE_4 { ) result TYPE_3 ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , ) ( getName . VAR_1 , STRING_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void private 
private static TYPE_1 . Test METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) { return VAR_2 ; } else if ( STRING_2 . equals ( VAR_1 ) ) { return VAR_3 ; } else if ( STRING_3 . equals ( VAR_1 ) ) { return VAR_4 ; } else { throw new TYPE_2 ( ( STRING_4 + VAR_1 ) ) ; } } } } ; ) ) VAR_1 + STRING_4 ( ( TYPE_2 new throw { else } ; VAR_4 return { ) ) VAR_1 ( equals . STRING_3 ( if else } ; VAR_3 return { ) ) VAR_1 ( equals . STRING_2 ( if else } ; VAR_2 return { ) ) VAR_1 ( equals . STRING_1 ( if { ) VAR_1 java.lang.String ( METHOD_1 Test . TYPE_1 static private 
private void METHOD_1 ( final TYPE_1 event ) { TYPE_2 change = VAR_1 . get ( ) ; if ( VAR_2 . METHOD_2 ( change ) ) { METHOD_3 ( change ) ; } try { METHOD_4 ( change ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_3 | java.io.IOException | TYPE_4 e ) { VAR_3 . error ( ( STRING_1 + ( VAR_4 ) ) , e ) ; } } } } ; ) e , ) ) VAR_4 ( + STRING_1 ( ( error . VAR_3 { ) e TYPE_4 | java.io.IOException | TYPE_3 | com.google.gwtorm.server.OrmException ( catch } ; ) change ( METHOD_4 { try } ; ) change ( METHOD_3 { ) ) change ( METHOD_2 . VAR_2 ( if ; ) ( get . VAR_1 = change TYPE_2 { ) event TYPE_1 final ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_3 class ) ) ; return VAR_4 . METHOD_3 ( modules ) ; } } ; ) modules ( METHOD_3 . VAR_4 return ; ) ) class VAR_3 ( METHOD_2 . VAR_1 ( modules.add ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( modules.add ; ) ( > TYPE_2 < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) ( METHOD_1 TYPE_1 private 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; VAR_1 . add ( STRING_2 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( getName . c ( add . VAR_1 { ) ) ( METHOD_2 : c TYPE_3 final ( for ; ) STRING_2 ( add . VAR_1 ; ) STRING_1 ( add . VAR_1 ; ) ( > java.lang.String < TYPE_2 new = VAR_1 > java.lang.String < TYPE_1 final { ) ( METHOD_1 > java.lang.String < TYPE_1 protected 
public java.lang.String METHOD_1 ( ) { final java.lang.String s = METHOD_2 ( ) ; if ( ( s == null ) || ( ( s . length ( ) ) == 0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1 = s . METHOD_3 ( STRING_2 ) ; if ( ( VAR_1 . length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ INT_1 ] ; } } ; ] INT_1 [ VAR_1 return } ; STRING_1 return { ) INT_1 < ) length . VAR_1 ( ( if ; ) STRING_2 ( METHOD_3 . s = VAR_1 ] [ java.lang.String final } ; STRING_1 return { ) ) 0 == ) ) ( length . s ( ( || ) null == s ( ( if ; ) ( METHOD_2 = s java.lang.String final { ) ( METHOD_1 java.lang.String public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 , STRING_6 ) , new TYPE_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_7 , STRING_8 ) ) . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . ) ) STRING_8 , STRING_7 , projectName ( METHOD_2 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ) ( TYPE_4 new , ) STRING_6 , STRING_5 ( TYPE_3 new , ) config , projectName ( TYPE_2 new ( TYPE_1 new = VAR_1 TYPE_1 ; ) STRING_4 + ) STRING_3 + STRING_2 ( ( + STRING_1 = config java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 < java.lang.String > VAR_2 , java.util.Set < java.lang.String > VAR_3 , java.util.Set < java.lang.String > VAR_4 , TYPE_2 VAR_5 ) { if ( ! ( VAR_6 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } try { METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( VAR_1 ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_7 . error ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( error . VAR_7 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_5 , VAR_4 , VAR_3 , VAR_2 , ) VAR_1 ( METHOD_5 . util , ) change ( METHOD_4 . util ( METHOD_1 { try } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_6 ( ! ( if { ) VAR_5 TYPE_2 , VAR_4 > java.lang.String < java.util.Set , VAR_3 > java.lang.String < java.util.Set , VAR_2 > java.lang.String < TYPE_1 , VAR_1 com.google.gerrit.reviewdb.client.Account.Id , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_4 ) ; org.junit.Assert . METHOD_3 ( VAR_2 . contains ( STRING_5 ) ) ; } } ; ) ) STRING_5 ( contains . VAR_2 ( METHOD_3 . org.junit.Assert ; ) STRING_4 ( METHOD_2 = VAR_2 java.lang.String ; ) ( create . ) VAR_1 , STRING_3 ( add . ) ( commit . ) STRING_2 ( branch . repo ; STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { try { if ( ( VAR_1 ) == null ) { return ; } message . insert ( 0 , STRING_1 ) ; VAR_2 . create ( project , git , VAR_3 ) . METHOD_2 ( VAR_1 , VAR_4 , VAR_5 , message . toString ( ) ) ; } finally { if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_3 ( ) ; } } } } } } ; ) ( METHOD_3 . VAR_3 { ) null = ! ) VAR_3 ( ( if { finally } ; ) ) ( toString . message , VAR_5 , VAR_4 , VAR_1 ( METHOD_2 . ) VAR_3 , git , project ( create . VAR_2 ; ) STRING_1 , 0 ( insert . message } ; return { ) null == ) VAR_1 ( ( if { try { TYPE_1 , java.io.IOException throws ) ( METHOD_1 void 
public static void METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 . METHOD_2 ( ) ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( ) ; } com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( VAR_1 ) ) ) . isEmpty ( ) ; } } ; ) ( isEmpty . ) ) ) VAR_1 ( ) > ? < TYPE_3 ( ( ( com.google.common.truth.Truth.assertThat } ; ) ( METHOD_4 . ) ) VAR_3 ( METHOD_3 . VAR_1 ( com.google.common.truth.Truth.assertThat { ) ) ( METHOD_2 . VAR_2 : VAR_3 TYPE_1 ( for { ) VAR_2 TYPE_2 , VAR_1 > TYPE_1 < java.util.Set ( METHOD_1 void static public 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) & & ( ! ( info . METHOD_5 ( ) ) ) ) { VAR_1 . append ( ( ( info . METHOD_6 ( ) ) - ( info . METHOD_7 ( ) ) ) ) ; } VAR_1 . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . VAR_1 } ; ) ) ) ) ( METHOD_7 . info ( - ) ) ( METHOD_6 . info ( ( ( append . VAR_1 { ) ) ) ) ( METHOD_5 . info ( ! ( & & ) ) ) ) ( path . info ( equals . TYPE_4 ( ! ( ( if ; ) ) ( METHOD_4 . ) ( css . TYPE_3 ( METHOD_3 . ) ( METHOD_2 . VAR_1 { ) info TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } } ; ) VAR_11 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 , VAR_7 , VAR_6 ( METHOD_6 . ) VAR_5 ( to . ) VAR_2 ( to . ) VAR_4 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_3 ( assertThat ; ) VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : break ; case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : default : revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) ; TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) ; break ; } this . VAR_15 = revision ; return this ; } } ; this return ; revision = VAR_15 . this } ; break ; ) type , STRING_1 , ) ) VAR_14 ( == revision ( ( METHOD_3 . TYPE_4 ; ) VAR_14 , revision ( METHOD_2 . TYPE_3 = revision : default : VAR_13 case : VAR_12 case : VAR_11 case : VAR_10 case : VAR_9 case : VAR_8 case : VAR_7 case : VAR_6 case : VAR_5 case : VAR_4 case : VAR_3 case ; break : VAR_2 case : VAR_1 case { ) type ( switch { ) revision TYPE_2 ( METHOD_1 TYPE_1 public 
public final java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) { VAR_1 . add ( VAR_2 . get ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( get . VAR_2 ( add . VAR_1 { ) ) ) ( METHOD_3 ( METHOD_2 . TYPE_2 : VAR_2 TYPE_1 ( for ; ) ( > < java.util.ArrayList new = VAR_1 > java.lang.String < java.util.List { ) ( METHOD_1 > java.lang.String < java.util.List final public 
public static com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , org.eclipse.jgit.lib.ObjectId revision , com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet ( id ) ; ps . METHOD_2 ( new TYPE_1 ( revision . name ( ) ) ) ; ps . METHOD_3 ( VAR_1 ) ; ps . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; return ps ; } } ; ps return ; ) ) ( METHOD_5 . TYPE_2 ( METHOD_4 . ps ; ) VAR_1 ( METHOD_3 . ps ; ) ) ) ( name . revision ( TYPE_1 new ( METHOD_2 . ps ; ) id ( com.google.gerrit.reviewdb.client.PatchSet new = ps com.google.gerrit.reviewdb.client.PatchSet { ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id , revision org.eclipse.jgit.lib.ObjectId , id com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 com.google.gerrit.reviewdb.client.PatchSet static public 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = VAR_2 . METHOD_2 ( VAR_3 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { TYPE_1 VAR_4 = repo . METHOD_3 ( ) ; return VAR_4 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e java.io.IOException ( catch } ; ) ( METHOD_5 . ) VAR_1 ( METHOD_4 . VAR_4 return ; ) ( METHOD_3 . repo = VAR_4 TYPE_1 { try } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e java.io.IOException ( catch } ; ) VAR_3 ( METHOD_2 . VAR_2 = repo { try ; repo org.eclipse.jgit.lib.Repository { com.google.gwtorm.server.OrmException throws ) VAR_1 java.lang.String ( METHOD_1 > java.lang.String < java.util.Set private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_5 . ) VAR_10 ( METHOD_6 . ) VAR_9 ( to . ) VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 , VAR_3 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 cfg ) { METHOD_2 ( TYPE_2 . METHOD_3 ( true , java.util.Collections . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) ) , VAR_3 ) ) ; TYPE_4 < TYPE_5 > factory ; if ( cfg . METHOD_6 ( STRING_1 , null , STRING_2 , false ) ) { factory = new TYPE_6 . Factory ( ) ; } else { factory = TYPE_7 . METHOD_7 ( ) ; } METHOD_8 ( new TYPE_8 ( factory ) ) ; } } ; ) ) factory ( TYPE_8 new ( METHOD_8 } ; ) ( METHOD_7 . TYPE_7 = factory { else } ; ) ( Factory . TYPE_6 new = factory { ) ) false , STRING_2 , null , STRING_1 ( METHOD_6 . cfg ( if ; factory > TYPE_5 < TYPE_4 ; ) ) VAR_3 , ) ) VAR_2 , VAR_1 ( METHOD_5 . TYPE_3 ( METHOD_4 . java.util.Collections , true ( METHOD_3 . TYPE_2 ( METHOD_2 { ) cfg TYPE_1 ( METHOD_1 void private 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } TYPE_4 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; return VAR_5 . METHOD_4 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_4 . VAR_5 return ; ) VAR_2 ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_2 . VAR_1 = VAR_5 TYPE_4 } ; ) VAR_4 , VAR_3 ( METHOD_4 . ) ( METHOD_2 . VAR_1 return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( equals . VAR_2 ( if { java.io.IOException throws ) VAR_2 java.lang.String , VAR_1 TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 private 
void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 VAR_2 , TYPE_1 < TYPE_4 < TYPE_5 > > VAR_3 , TYPE_1 < TYPE_4 < TYPE_5 > > VAR_4 , TYPE_6 VAR_5 ) { TYPE_4 < TYPE_2 > VAR_6 = VAR_1 . values ( ) ; TYPE_2 . METHOD_2 ( VAR_6 ) ; TYPE_7 cmd = new TYPE_7 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; if ( cmd . METHOD_3 ( ) ) { cmd . METHOD_4 ( ) ; TYPE_8 . get ( ) . METHOD_5 ( cmd ) ; } } } } ; ) cmd ( METHOD_5 . ) ( get . TYPE_8 ; ) ( METHOD_4 . cmd { ) ) ( METHOD_3 . cmd ( if ; ) VAR_5 , VAR_4 , VAR_3 , VAR_2 , VAR_6 , VAR_1 ( TYPE_7 new = cmd TYPE_7 ; ) VAR_6 ( METHOD_2 . TYPE_2 ; ) ( values . VAR_1 = VAR_6 > TYPE_2 < TYPE_4 { ) VAR_5 TYPE_6 , VAR_4 > > TYPE_5 < TYPE_4 < TYPE_1 , VAR_3 > > TYPE_5 < TYPE_4 < TYPE_1 , VAR_2 TYPE_3 , VAR_1 > TYPE_2 < TYPE_1 ( METHOD_1 void 
public static TYPE_1 METHOD_1 ( java.lang.String name , org.eclipse.jgit.lib.ObjectId id , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = walk . METHOD_2 ( id ) ; TYPE_3 VAR_2 = walk . METHOD_1 ( VAR_1 ) ; return new TYPE_1 ( name , VAR_1 , VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_2 . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . VAR_2 , VAR_2 , ) ( METHOD_3 . VAR_1 , VAR_1 , name ( TYPE_1 new return ; ) VAR_1 ( METHOD_1 . walk = VAR_2 TYPE_3 ; ) id ( METHOD_2 . walk = VAR_1 TYPE_3 { TYPE_2 , java.io.IOException throws ) walk org.eclipse.jgit.revwalk.RevWalk , id org.eclipse.jgit.lib.ObjectId , name java.lang.String ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ; final TYPE_4 ui = TYPE_5 . METHOD_2 ( VAR_2 class ) ; TYPE_5 . METHOD_3 ( ui ) ; TYPE_6 lib = new TYPE_6 ( new TYPE_7 < TYPE_8 > ( ) { public TYPE_8 get ( ) { return new TYPE_8 ( ui , VAR_1 ) ; } } ) ; METHOD_4 ( VAR_3 ) ; METHOD_4 ( VAR_4 ) ; TYPE_5 . METHOD_5 ( ui ) ; } } ; ) ui ( METHOD_5 . TYPE_5 ; ) VAR_4 ( METHOD_4 ; ) VAR_3 ( METHOD_4 ; ) } } ; ) VAR_1 , ui ( TYPE_8 new return { ) ( get TYPE_8 public { ) ( > TYPE_8 < TYPE_7 new ( TYPE_6 new = lib TYPE_6 ; ) ui ( METHOD_3 . TYPE_5 ; ) class VAR_2 ( METHOD_2 . TYPE_5 = ui TYPE_4 final ; ) ) STRING_1 ( TYPE_3 new ( TYPE_2 new = VAR_1 TYPE_2 final { TYPE_1 throws ) ( METHOD_1 void public 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_2 . Key key = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ; final TYPE_2 id = db . METHOD_3 ( ) . get ( key ) ; if ( id ! = null ) { return TYPE_1 . of ( id . getAccountId ( ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } finally { db . close ( ) ; } } } } ; ) ( close . db { finally } ; ) ( METHOD_4 . TYPE_1 return } ; ) ) ( getAccountId . id ( of . TYPE_1 return { ) null = ! id ( if ; ) key ( get . ) ( METHOD_3 . db = id TYPE_2 final ; ) VAR_1 , VAR_2 ( Key . TYPE_2 new = key Key . TYPE_2 final { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { java.lang.Exception throws ) VAR_1 java.lang.String ( METHOD_1 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 public 
