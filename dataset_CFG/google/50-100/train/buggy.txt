( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_2 ( false ) ) ( TYPE_2 . METHOD_3 ( false ) ) ( if ( VAR_1 . METHOD_4 ( ) ) ) ( TYPE_3 . METHOD_5 ( false ) ) ( endif ) ( VAR_2 = TYPE_1 . METHOD_6 ( new TYPE_4 ( ) { public void METHOD_7 ( TYPE_5 event ) { METHOD_8 ( ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ) ( if ( sshd ) ) ( modules.add ( new TYPE_3 ( ) ) ) ( if ( VAR_1 ) ) ( modules.add ( new TYPE_4 ( ) ) ) ( endif ) ( modules.add ( new TYPE_5 ( ) ) ) ( modules.add ( VAR_2 . METHOD_2 ( VAR_3 class ) ) ) ( endif ) ( modules.add ( new TYPE_6 ( ) ) ) ( return VAR_4 . METHOD_3 ( modules ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String token ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_1 ( token , changes , VAR_2 ) ) ( end-catch ) ( catch (TYPE_1 e) ) ( throw new TYPE_2 ( e . getMessage ( ) , e ) ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( catch (TYPE_3 e) ) ( throw new TYPE_2 ( STRING_2 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( TYPE_3 VAR_2 ) ( VAR_2 = VAR_3 ) ( VAR_2 = VAR_2 . METHOD_2 ( ) ) ( if ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) ( throw new TYPE_4 ( STRING_1 , VAR_2 ) ) ( endif ) ( VAR_1 . METHOD_4 ( ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( close ( ) ) ( VAR_1 = repo . METHOD_2 ( ) ) ( TYPE_1 ref = repo . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ( if ( ref == null ) ) ( return ; ) ( endif ) ( try ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) ( end-try ) ( VAR_3 = rw . parseCommit ( ref . METHOD_5 ( ) . METHOD_6 ( ) ) ) ( notes = TYPE_2 . METHOD_7 ( VAR_1 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( final TYPE_3 p ) ) ( return new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( ) throws java.io.IOException { try { return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; } catch ( TYPE_6 e ) { return VAR_1 ; } } } ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . Status VAR_1 , java.lang.String VAR_2 ) ) ( TYPE_1 VAR_3 = result . METHOD_2 ( ref ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( message ( VAR_3 ) ) . isEqualTo ( VAR_3 . getStatus ( ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_3 . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) ) ( rsp . METHOD_2 ( STRING_1 ) ) ( TYPE_3 in = METHOD_3 ( ) ) ( try ) ( end-try ) ( TYPE_4 out = rsp . METHOD_4 ( ) ) ( try ) ( end-try ) ( TYPE_5 . METHOD_5 ( in , out ) ) ( finally ) ( out . close ( ) ) ( end-finally ) ( finally ) ( in . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( boolean equals( final TYPE_1 VAR_1 ) ) ( if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) ) ( final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ( return TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( try ) ( end-try ) ( com.google.gerrit.reviewdb.client.Change change = getChange ( VAR_1 . getChange ( ) ) ) ( TYPE_2 event = new TYPE_2 ( change ) ) ( event . change = METHOD_2 ( change ) ) ( VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( VAR_3 = VAR_1 . METHOD_5 ( ) ) ( VAR_4 . get ( ) . METHOD_6 ( change , event , db . get ( ) ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_5 . error ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 config , java.lang.String VAR_1 ) ) ( config . METHOD_2 ( STRING_1 , null , STRING_2 , VAR_2 ) ) ( config . METHOD_3 ( STRING_1 , null , STRING_3 , STRING_4 ) ) ( config . METHOD_3 ( STRING_1 , null , STRING_5 , STRING_6 ) ) ( config . METHOD_3 ( STRING_1 , null , STRING_7 , VAR_1 ) ) ( config . METHOD_4 ( STRING_1 , STRING_8 , STRING_9 , true ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( project , STRING_1 ) ) ( METHOD_3 ( user ) ) ( VAR_1 . METHOD_4 ( VAR_2 class ) ) ( VAR_3 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( ) . get ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( STRING_1 ) ) ( final com.google.gerrit.reviewdb.client.Account.Id user = user ( STRING_2 , null ) ) ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ( final TYPE_2 r = create ( ) . METHOD_4 ( user ) ) ( METHOD_5 ( r ) ) ( assertEquals ( VAR_2 . getName ( ) , r . name ) ) ( assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ) ( TYPE_1 . METHOD_7 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( ) ) ( return java.util.Collections . METHOD_2 ( TYPE_3 . METHOD_3 ( java.util.Collections . METHOD_4 ( VAR_1 . METHOD_1 ( ) ) , new TYPE_4 < TYPE_5 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_5 VAR_2 ) { try { return METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; } } } ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 key ) ) ( if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( key ) ) && ( VAR_2 . METHOD_4 ( ( ( TYPE_2 ) ( key ) ) ) ) ) ) ( VAR_3 . METHOD_5 ( new TYPE_3 ( ) { public void run ( ) { VAR_2 . METHOD_1 ( ( ( TYPE_2 ) ( key ) ) ) ; } } ) ) ( endif ) ( VAR_4 . METHOD_1 ( key ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String projectName , java.lang.String VAR_1 ) ) ( final org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) ( try ) ( end-try ) ( org.eclipse.jgit.revwalk.RevWalk VAR_3 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = VAR_3 . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( VAR_1 ) ) ) ( return commit . METHOD_4 ( ) ; ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = null ) ( for (TYPE_3 w : this) ) ( endfor ) ( if ( w instanceof TYPE_2 ) ) ( final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ) ( if ( VAR_2 == null ) ) ( VAR_2 = d ) ( endif ) ( if ( ( VAR_3 ) == VAR_1 ) ) ( d . METHOD_1 ( ) ) ( return ; ) ( endif ) ( endif ) ( if ( VAR_2 != null ) ) ( VAR_2 . METHOD_1 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( METHOD_1 ( ) ) ( final TYPE_2 VAR_1 = factory . create ( in , out ) ) ( VAR_1 . METHOD_2 ( format ) ) ( if ( ( query ) != null ) ) ( VAR_1 . METHOD_3 ( query ) ) ( endif ) ( VAR_1 . run ( ) ) ( end-catch ) ( catch (TYPE_3 err) ) ( throw new TYPE_4 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> apply( TYPE_3 VAR_1 ) ) ( try ) ( end-try ) ( TYPE_1 < TYPE_2 > r = TYPE_1 . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getChange ( ) . getProject ( ) , VAR_3 ) ) ) ( if ( VAR_1 . METHOD_4 ( ) ) ) ( r . METHOD_5 ( TYPE_5 . METHOD_6 ( INT_1 , VAR_4 ) ) ) ( endif ) ( return r ; ) ( end-catch ) ( catch (TYPE_6 e) ) ( throw new TYPE_4 ( e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String name , final TYPE_1 value , TYPE_2 VAR_1 ) ) ( VAR_1 . METHOD_2 ( ) ) ( TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ) ( final TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ) ( METHOD_5 ( VAR_2 , new TYPE_5 ( ) { public void run ( ) { VAR_2 . set ( value ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( admin , VAR_2 ) ) ( METHOD_4 ( admin ) ) ( METHOD_5 ( VAR_1 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 , VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( admin , VAR_7 , VAR_8 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_8 ( VAR_11 ) . METHOD_8 ( VAR_12 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.String VAR_1 ) ) ( TYPE_2 p = TYPE_3 . get ( VAR_1 ) ) ( if ( ! ( TYPE_4 . METHOD_2 ( p ) ) ) ) ( throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ) ( endif ) ( java.lang.String VAR_2 = new java.lang.String ( TYPE_4 . METHOD_3 ( p ) , VAR_3 ) ) ( return new TYPE_1 ( new TYPE_1 . Id ( id , 0 ) , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ) ( throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_3 , VAR_4 , VAR_2 . getProject ( ) . getName ( ) ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . Account result ) ) ( VAR_1 . METHOD_2 ( false ) ) ( final TYPE_1 . Account me = TYPE_2 . METHOD_3 ( ) ) ( me . METHOD_4 ( result . METHOD_5 ( ) ) ) ( me . METHOD_6 ( result . METHOD_7 ( ) ) ) ( TYPE_2 . METHOD_8 ( ) ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . display ( me ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( ( VAR_1 . length ( ) ) == 0 ) ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ( return false ; ) ( endif ) ( if ( VAR_3 . isEmpty ( ) ) ) ( VAR_2 . info ( STRING_2 ) ) ( return false ; ) ( endif ) ( if ( ( ( ( VAR_3 . size ( ) ) == 1 ) && ( ( VAR_4 . size ( ) ) == 1 ) ) && ( VAR_4 . contains ( VAR_5 ) ) ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.Change> METHOD_1( TYPE_1 ctx ) ) ( java.lang.String ref = event . getRefName ( ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey ( event . METHOD_2 ( ) ) ) ( if ( ref . equals ( VAR_1 ) ) ) ( return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( project ) ) ; ) ( endif ) ( return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_5 ( new TYPE_2 . NameKey ( project , ref ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 a , TYPE_1 b ) ) ( int VAR_1 = TYPE_2 . METHOD_2 ( a . name ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ) ( if ( VAR_1 != 0 ) ) ( return VAR_1 ; ) ( endif ) ( return TYPE_2 . METHOD_2 ( a . id ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 , TYPE_2 id , java.lang.String ref ) ) ( TYPE_3 . ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ) ( TYPE_1 VAR_3 = TYPE_4 . METHOD_1 ( cfg , VAR_1 , id , ref ) ) ( METHOD_4 ( project , cfg ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) ( final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ) ( final TYPE_1 c = TYPE_2 . METHOD_2 ( STRING_1 , STRING_4 ) ) ( assertEquals ( STRING_5 , TYPE_3 . METHOD_3 ( a , b ) . toString ( ) ) ) ( assertEquals ( STRING_6 , TYPE_3 . METHOD_3 ( a , b , c ) . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( byte[] METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( byte [ ] data = new byte [ ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ] ) ( TYPE_3 in = VAR_1 . METHOD_3 ( VAR_2 ) ) ( try ) ( end-try ) ( TYPE_4 . METHOD_4 ( in , data , 0 , data . length ) ) ( finally ) ( in . close ( ) ) ( end-finally ) ( return data ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String VAR_1 , TYPE_1 VAR_2 , org.eclipse.jgit.lib.Repository repo , TYPE_2 VAR_3 , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.ObjectId VAR_4 ) ) ( try ) ( TYPE_3 VAR_5 = VAR_3 . METHOD_2 ( ) ) ( end-try ) ( return ( ( TYPE_1 ) ( VAR_2 ) ) . format ( project . get ( ) , TYPE_4 . METHOD_3 ( repo , VAR_4 ) , METHOD_4 ( VAR_1 ) , VAR_5 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 result ) ) ( if ( ( ( VAR_1 == null ) && ( ( VAR_2 ) == null ) ) || ( ( VAR_1 != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) ) ) ( display ( result ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( return TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( db . METHOD_5 ( ) . METHOD_6 ( notes . getChangeId ( ) ) , VAR_2 ) ) ; ) ( endif ) ( notes . METHOD_7 ( ) ) ( java.util.List < TYPE_1 > VAR_3 = TYPE_4 . METHOD_8 ( ) ) ( VAR_3 . METHOD_9 ( notes . METHOD_10 ( ) . values ( ) ) ) ( return TYPE_3 . METHOD_3 ( VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 < TYPE_1 > VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ) ( java.util.List < TYPE_1 > result = new java.util.ArrayList ( VAR_1 . size ( ) ) ) ( for (TYPE_1 c : VAR_1) ) ( endfor ) ( if ( TYPE_3 . METHOD_2 ( c ) . equals ( psId ) ) ) ( result . add ( c ) ) ( endif ) ( return TYPE_4 . METHOD_3 ( result ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( byte [ ] VAR_1 ) ) ( java.lang.StringBuilder r = new java.lang.StringBuilder ( ( ( VAR_1 . length ) * 2 ) ) ) ( int i = 0 ) ( for (i < ( VAR_1 . length )) ) ( i ++ ) ( endfor ) ( byte b = VAR_1 [ i ] ) ( r . append ( VAR_2 [ ( ( b > > > INT_1 ) & INT_2 ) ] ) ) ( r . append ( VAR_2 [ ( b & INT_2 ) ] ) ) ( return r . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ) ( assertEquals ( VAR_1 class , out . METHOD_4 ( ) ) ) ( assertEquals ( TYPE_2 . of ( query ( in . METHOD_5 ( 1 ) ) , in . METHOD_5 ( 0 ) ) , out . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<TYPE_1> METHOD_1( TYPE_2 VAR_1 ) ) ( java.util.Set < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ) ( VAR_2 . add ( VAR_3 . create ( STRING_1 , VAR_4 ) ) ) ( VAR_2 . add ( VAR_3 . create ( STRING_2 , VAR_5 ) ) ) ( VAR_2 . add ( VAR_3 . create ( STRING_3 , VAR_5 ) ) ) ( VAR_2 . add ( VAR_3 . create ( STRING_4 , VAR_1 . project ) ) ) ( VAR_2 . add ( VAR_3 . create ( STRING_5 , VAR_6 ) ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null ) ) ( java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( TYPE_5 . of ( STRING_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.PatchSet ps ) ) ( TYPE_2 . METHOD_2 ( ps . getId ( ) . getParentKey ( ) . equals ( cd . getId ( ) ) , STRING_1 , ps . getId ( ) , cd . getId ( ) ) ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( org.eclipse.jgit.lib.Repository VAR_1 ) ) ( java.util.List < TYPE_1 > VAR_2 = new TYPE_2 < > ( ) ) ( for (TYPE_3 VAR_3 : VAR_4) ) ( endfor ) ( VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 , VAR_5 ) ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 . ProjectConfig project , java.lang.String VAR_1 , int VAR_2 , int VAR_3 , TYPE_3 group , java.lang.String ref ) ) ( TYPE_1 VAR_4 = TYPE_4 . METHOD_2 ( project , group ) ) ( VAR_4 . METHOD_3 ( VAR_2 ) ) ( VAR_4 . METHOD_4 ( VAR_3 ) ) ( return TYPE_4 . METHOD_5 ( project , VAR_1 , VAR_4 , ref ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) ) ( TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = TYPE_4 . schema ( VAR_2 ) ) ( int VAR_3 ) ( if ( ( schema != null ) && ( schema . METHOD_2 ( VAR_4 ) ) ) ) ( VAR_3 = ( VAR_5 . METHOD_3 ( ) ) - INT_1 ) ( endif ) ( VAR_3 = VAR_5 . METHOD_4 ( ) ) ( return METHOD_1 ( schema , branch , VAR_1 , VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( void format( TYPE_1 out ) ) ( out . METHOD_1 ( TYPE_2 . METHOD_2 ( commit ) . METHOD_3 ( VAR_1 ) ) ) ( TYPE_3 VAR_2 = new TYPE_3 ( out ) ) ( VAR_2 . METHOD_4 ( repo ) ) ( VAR_2 . format ( base . METHOD_5 ( ) , commit . METHOD_5 ( ) ) ) ( VAR_2 . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) ) ( new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = new TYPE_1 ( repo ) ) ( if ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ( VAR_1 . METHOD_3 ( new TYPE_2 ( repo , VAR_2 , db ) ) ) ( endif ) ( VAR_1 . METHOD_4 ( in , out , err ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 a , TYPE_1 b ) ) ( return new TYPE_2 ( ) . append ( a . METHOD_2 ( ) , b . METHOD_2 ( ) ) . append ( b . METHOD_3 ( ) , a . METHOD_3 ( ) ) . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > p ) ( p = METHOD_2 ( STRING_1 ) ) ( assertEquals ( METHOD_2 ( STRING_2 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ) ( p = METHOD_2 ( STRING_4 ) ) ( assertEquals ( METHOD_2 ( STRING_5 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( if ( ( METHOD_2 ( ) ) && ( VAR_1 ) ) ) ( VAR_2 . METHOD_3 ( change , ctx . METHOD_4 ( ) . getAccountId ( ) , VAR_3 , VAR_4 , VAR_5 , ctx . METHOD_5 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ) ( TYPE_2 . METHOD_2 ( change , STRING_1 , changeId ) ) ( TYPE_2 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ) ( return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 < TYPE_3 > VAR_2 ) ) ( if ( ! ( TYPE_4 . getAccountId ( ) . equals ( VAR_1 . getAccountId ( ) ) ) ) ) ( VAR_2 . METHOD_2 ( new TYPE_5 ( ) ) ) ( return ; ) ( endif ) ( run ( VAR_2 , new TYPE_6 < TYPE_3 > ( ) { public TYPE_3 run ( TYPE_7 . ReviewDb db ) throws TYPE_8 . OrmException { db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) ; return VAR_3 ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( e . METHOD_2 ( ) ) ( java.lang.String t = TYPE_2 . METHOD_3 ( psId , VAR_1 . path ( ) , VAR_1 . line ( ) ) ) ( if ( ! ( TYPE_3 . METHOD_4 ( ) ) ) ) ( TYPE_3 . METHOD_5 ( t ) ) ( endif ) ( TYPE_3 . display ( t ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ) ( METHOD_4 ( ) . to ( VAR_3 class ) ) ( com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ) ( TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.PatchSet METHOD_1( TYPE_1 rsrc ) ) ( final com.google.gerrit.reviewdb.client.PatchSet VAR_1 = VAR_2 . get ( ) . patchSets ( ) . METHOD_2 ( rsrc . METHOD_3 ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3 . METHOD_4 ( false ) ; return VAR_3 ; } } ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.util.Map < TYPE_1 . Id , TYPE_2 . Id > VAR_1 = new TYPE_3 < TYPE_1 . Id , TYPE_2 . Id > ( ) ) ( for (TYPE_2 . Id VAR_2 : approvals) ) ( endfor ) ( VAR_1 . put ( VAR_2 . getParentKey ( ) , VAR_2 ) ) ( VAR_3 . METHOD_2 ( change , user . METHOD_3 ( ) , VAR_4 , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 ) ( java.lang.String VAR_2 = STRING_2 ) ( METHOD_2 ( VAR_1 , VAR_2 ) ) ( TYPE_1 e = new TYPE_1 ( VAR_1 , VAR_2 ) ) ( TYPE_2 . METHOD_3 ( e ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 ) , TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . METHOD_7 ( ) ) ) ( servlet . METHOD_8 ( VAR_4 , VAR_5 ) ) ( TYPE_2 . METHOD_9 ( VAR_5 ) . METHOD_10 ( VAR_6 , e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 b ) ) ( if ( ( ( ( b . config ) != null ) && ( ( VAR_1 ) != null ) ) && ( ( VAR_2 ) != null ) ) ) ( return new TYPE_1 ( b . view , b . config , VAR_1 , VAR_2 ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( TYPE_2 . Result r , java.lang.String VAR_1 ) ) ( TYPE_2 VAR_2 = VAR_3 . create ( db , admin . METHOD_2 ( ) , STRING_1 , STRING_2 , VAR_1 , r . getChangeId ( ) ) ) ( return VAR_2 . to ( git , STRING_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) ) ( return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final java.lang.String VAR_1 , final java.lang.String key , final java.lang.String VAR_2 ) ) ( final int n = VAR_1 . METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ) ( return ( ( VAR_1 . METHOD_3 ( 0 , n ) ) + VAR_2 ) + ( VAR_1 . METHOD_3 ( ( ( n + INT_1 ) + ( key . length ( ) ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 cm ) ) ( int VAR_1 = cm . METHOD_2 ( cm . METHOD_3 ( ) . METHOD_4 ( ) ) ) ( TYPE_2 VAR_2 = VAR_3 . METHOD_5 ( VAR_1 ) ) ( TYPE_3 VAR_4 = VAR_2 . METHOD_6 ( ) ) ( if ( cm . METHOD_7 ( ) ) ) ( endif ) ( METHOD_8 ( VAR_4 , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( change = ctx . getChange ( ) ) ( TYPE_2 update = ctx . METHOD_2 ( psId ) ) ( VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ) ( if ( VAR_1 ) ) ( change . METHOD_3 ( VAR_3 ) ) ( update . METHOD_3 ( change . getStatus ( ) ) ) ( TYPE_3 . METHOD_4 ( change ) ) ( ctx . METHOD_1 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ) ( java.lang.String [ ] VAR_3 = VAR_1 . METHOD_2 ( STRING_2 ) ) ( for (java.lang.String s : VAR_3) ) ( endfor ) ( if ( ! ( s . METHOD_3 ( ) . isEmpty ( ) ) ) ) ( VAR_2 . append ( ( ( STRING_3 + s ) + STRING_4 ) ) ) ( endif ) ( return VAR_2 . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.PatchSet METHOD_1( ) ) ( if ( ( currentPatchSetId ) != null ) ) ( int i = ( patchSets . size ( ) ) - 1 ) ( for (i >= 0) ) ( i -- ) ( endfor ) ( final TYPE_1 . PatchSet ps = patchSets . get ( i ) ) ( if ( ps . getId ( ) . equals ( currentPatchSetId ) ) ) ( return ps ; ) ( endif ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , boolean VAR_1 ) ) ( if ( VAR_2 . METHOD_2 ( false ) ) ) ( throw new java.io.IOException ( STRING_1 ) ) ( endif ) ( TYPE_1 . Result result = ( VAR_1 ) ? VAR_3 . METHOD_1 ( db , changeId ) : VAR_3 . METHOD_3 ( db , changeId ) ) ( if ( VAR_4 . METHOD_2 ( false ) ) ) ( throw new java.io.IOException ( STRING_2 ) ) ( endif ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( if ( VAR_1 . METHOD_1 ( ) ) ) ( VAR_2 . METHOD_2 ( STRING_1 ) ) ( endif ) ( VAR_2 . METHOD_2 ( STRING_2 ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( throw new TYPE_1 ( ( STRING_3 + ( e . getMessage ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean add( TYPE_1 VAR_1 , TYPE_2 w , TYPE_3 type ) ) ( TYPE_4 user = VAR_2 . create ( args . db , w . getAccountId ( ) ) ) ( try ) ( end-try ) ( if ( METHOD_1 ( user , w . METHOD_2 ( ) ) ) ) ( if ( w . METHOD_3 ( type ) ) ) ( VAR_3 . add ( w . getAccountId ( ) ) ) ( endif ) ( return true ; ) ( endif ) ( end-catch ) ( catch (TYPE_5 e) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( METHOD_2 ( 2 ) ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_3 ( ) ) ) ) . METHOD_4 ( TYPE_3 . of ( METHOD_2 ( 2 ) ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_2 ( 2 ) ) . VAR_4 ) . isEqualTo ( INT_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 info ) ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ) ( if ( TYPE_4 . equals ( info . path ( ) ) ) ) ( VAR_1 . METHOD_5 ( ) ) ( endif ) ( VAR_1 . append ( info . status ( ) ) ) ( VAR_1 . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 ctx ) ) ( com.google.gerrit.reviewdb.client.Change change = ctx . getChange ( ) ) ( TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ) ( change . METHOD_3 ( VAR_1 ) ) ( change . METHOD_4 ( ctx . METHOD_5 ( ) ) ) ( update . METHOD_3 ( VAR_1 ) ) ( METHOD_6 ( ctx , update ) ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; ) ( endif ) ( return notes . METHOD_5 ( ) . METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . append ( true ) ) ) ( METHOD_2 ( b , b . append ( false ) ) ) ( assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ! ( VAR_1 ) ) ) ( TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ) ( java.lang.String VAR_4 = VAR_2 . getName ( ) ) ( TYPE_3 VAR_5 = VAR_6 . METHOD_3 ( VAR_4 , new TYPE_4 ( ( ( STRING_1 + ( VAR_7 ) ) + STRING_2 ) ) ) ) ( VAR_2 . METHOD_4 ( VAR_4 ) ) ( VAR_2 . METHOD_5 ( VAR_5 ) ) ( VAR_2 . METHOD_6 ( false ) ) ( VAR_1 = true ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( TYPE_1 notes = METHOD_3 ( ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey name = notes . METHOD_4 ( ) ) ( TYPE_2 ctl = METHOD_5 ( notes ) ) ( ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_6 ( name ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_7 ( ctl , null ) . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ( STRING_1 + name ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . NameKey branch ) ) ( try ) ( end-try ) ( new TYPE_2 ( server , VAR_1 , branch ) . METHOD_2 ( ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_2 . error ( ( ( STRING_1 + branch ) + STRING_2 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String path , byte [ ] VAR_4 ) ) ( switch ( VAR_1 ) ) ( end-switch ) ( case VAR_5 : ) ( VAR_2 . add ( new TYPE_5 ( path ) ) ) ( break ; ) ( case VAR_6 : ) ( case VAR_7 : ) ( VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ) ( VAR_2 . METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 rsrc ) ) ( if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) ) ( return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; ) ( endif ) ( throw new TYPE_3 ( rsrc . METHOD_2 ( ) . getProject ( ) . getName ( ) ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 VAR_1 ) ) ( return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( this . VAR_2 , VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_7 ( ) ) . METHOD_6 ( this . VAR_4 , VAR_5 ) . METHOD_5 ( this . VAR_6 , VAR_7 , TYPE_3 . METHOD_8 ( ) ) . METHOD_5 ( this . psId , VAR_1 . psId , TYPE_3 . METHOD_8 ( ) . METHOD_9 ( ) ) . result ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( ) ) ( if ( VAR_3 . METHOD_2 ( ) ) ) ( org.eclipse.jgit.lib.ObjectId VAR_4 = METHOD_3 ( ) ) ( if ( VAR_4 != null ) ) ( VAR_2 . METHOD_4 ( VAR_4 ) ) ( endif ) ( endif ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 VAR_1 ) ) ( final TYPE_2 s = VAR_1 . METHOD_2 ( ) ) ( final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ) ( r . append ( STRING_1 ) ) ( r . append ( VAR_1 . METHOD_3 ( ) ) ) ( r . append ( STRING_2 ) ) ( return r . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ) ( METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ) ( METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ) ( METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 , STRING_6 , STRING_7 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , java.lang.String VAR_2 ) ) ( if ( METHOD_2 ( VAR_1 ) ) ) ( VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ) ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_5 . METHOD_6 ( new TYPE_1 ( VAR_2 ) ) , VAR_6 ) ) ( VAR_3 . METHOD_3 ( STRING_4 , VAR_1 ) ) ( endif ) ( VAR_3 . error ( STRING_5 , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String change = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ) ( java.lang.String patchSet = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ) ( java.lang.String path = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ) ( VAR_1 . METHOD_4 ( new TYPE_3 ( change , patchSet , path ) ) ) ( VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ) ( assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_7 , VAR_4 ) . to ( VAR_8 , VAR_9 ) . to ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_9 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( VAR_1 . info ( STRING_1 ) ) ( if ( ( VAR_2 ) != null ) ) ( try ) ( end-try ) ( TYPE_1 . delete ( VAR_3 ) ) ( end-catch ) ( catch (java.io.IOException err) ) ( VAR_1 . METHOD_1 ( ( STRING_2 + ( VAR_3 ) ) , err ) ) ( endif ) ( VAR_4 . METHOD_2 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 p ) ) ( METHOD_2 ( p ) ) ( java.lang.String topic = STRING_1 ) ( TYPE_3 . Result r = METHOD_3 ( ( STRING_2 + topic ) ) ) ( r . METHOD_4 ( ) ) ( r . METHOD_5 ( VAR_1 , topic ) ) ( r = METHOD_3 ( ( STRING_3 + topic ) ) ) ( r . METHOD_4 ( ) ) ( r . METHOD_5 ( VAR_1 , topic ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String token ) ) ( TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw VAR_3 . reject ( e . getMessage ( ) ) ) ( VAR_4 . put ( VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 . line ) . isEqualTo ( VAR_1 . line ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 . message ) . isEqualTo ( VAR_1 . message ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEqualTo ( VAR_4 ) ) ( TYPE_3 . METHOD_2 ( VAR_5 , VAR_6 ) ) ( if ( ( VAR_7 ) == null ) ) ( com.google.common.truth.Truth.assertThat ( VAR_8 ) . isEqualTo ( VAR_9 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) ) ( TYPE_1 ref = refs . get ( VAR_1 ) ) ( if ( ref != null ) ) ( org.eclipse.jgit.lib.ObjectId VAR_4 = ref . get ( ) ) ( if ( VAR_4 . equals ( VAR_2 ) ) ) ( ref . METHOD_2 ( VAR_4 , VAR_3 ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( TYPE_2 git , boolean VAR_1 ) ) ( TYPE_4 . METHOD_2 ( git , STRING_1 ) ) ( java.lang.String file = ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ) ( TYPE_5 VAR_3 = VAR_4 . create ( db , admin . METHOD_3 ( ) , ( STRING_5 + ( VAR_2 ) ) , file , ( STRING_6 + ( VAR_2 ) ) ) ) ( ( VAR_2 ) ++ ) ( return VAR_3 . to ( git , STRING_7 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ) ( servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( java.lang.String type = METHOD_2 ( ) . METHOD_3 ( STRING_1 , null , STRING_2 ) ) ( if ( type == null ) ) ( return VAR_1 ; ) ( endif ) ( for (TYPE_1 t : TYPE_2 . values ( )) ) ( endfor ) ( if ( type . METHOD_4 ( t . name ( ) ) ) ) ( return t ; ) ( endif ) ( throw new TYPE_3 ( ( STRING_3 + type ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ) ( walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ) ( VAR_1 = new TYPE_5 ( ) ) ( VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < TYPE_3 . Id , TYPE_4 . Id > VAR_1 ) ) ( TYPE_1 a = new TYPE_1 ( ) ) ( a . type = VAR_1 . getKey ( ) . get ( ) ) ( final TYPE_5 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . getKey ( ) ) ) ( VAR_4 = VAR_2 . METHOD_3 ( ) . getName ( ) ) ( a . value = TYPE_6 . toString ( VAR_1 . getValue ( ) . get ( ) ) ) ( return a ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ) ( rpc ( VAR_6 class ) ) ( rpc ( VAR_7 class ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( ) ) ( try ) ( end-try ) ( return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|java.io.IOException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( try ) ( com.google.gerrit.reviewdb.server.ReviewDb db = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( end-try ) ( return VAR_2 . METHOD_4 ( db , VAR_3 , project , VAR_4 ) ; ) ( end-catch ) ( catch (java.lang.Exception e) ) ( VAR_5 . error ( ( STRING_1 + project ) , e ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void patch( java.lang.String token , com.google.gerrit.reviewdb.client.PatchSet.Id base , TYPE_1 . Key id , int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) ) ( TYPE_5 . patch ( token , base , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit commit( TYPE_1 . ProjectConfig cfg ) ) ( TYPE_4 VAR_1 = new TYPE_4 ( VAR_2 , cfg . getProject ( ) . METHOD_1 ( ) , db ) ) ( util . METHOD_2 ( INT_1 ) ) ( util . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( VAR_1 . METHOD_5 ( STRING_1 ) ) ( cfg . commit ( VAR_1 ) ) ( TYPE_5 ref = db . METHOD_6 ( VAR_3 ) ) ( return util . METHOD_7 ( ) . parseCommit ( ref . METHOD_8 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( TYPE_2 . METHOD_2 ( ) ) ) ( return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; ) ( endif ) ( TYPE_1 r = new TYPE_3 ( null ) ) ( r . METHOD_4 ( true ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String message ) ) ( TYPE_1 . METHOD_2 ( id . get ( ) , message , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( id ) ) ; METHOD_4 ( ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 req ) ) ( if ( TYPE_3 . METHOD_2 ( req . METHOD_3 ( ) ) . is ( VAR_1 ) ) ) ( java.lang.String VAR_2 = TYPE_4 . toString ( req . METHOD_4 ( ) ) ) ( TYPE_5 VAR_3 = new TYPE_6 ( ) . METHOD_5 ( VAR_4 class , new TYPE_7 ( ) ) . METHOD_5 ( VAR_5 class , new TYPE_8 ( ) ) . create ( ) ) ( return VAR_3 . METHOD_6 ( VAR_2 , VAR_4 class ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( com.google.gerrit.reviewdb.client.Project VAR_1 ) ) ( final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) ( if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) ) ( return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) ) ( < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ) ( binder . bind ( key ) . METHOD_4 ( new TYPE_8 < TYPE_1 > ( VAR_1 ) ) . in ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 < TYPE_1 > VAR_1 ) ) ( java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) ( for (TYPE_1 VAR_3 : VAR_1) ) ( endfor ) ( if ( TYPE_3 . METHOD_2 ( getRefName ( ) , VAR_3 . METHOD_3 ( ) ) ) ) ( VAR_2 . add ( VAR_3 ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) ) ( TYPE_3 input = TYPE_3 . create ( ) ) ( input . message ( TYPE_4 . METHOD_2 ( msg ) ) ) ( TYPE_4 . METHOD_3 ( id , STRING_1 ) . data ( input ) . METHOD_4 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < TYPE_2 > e ) ) ( VAR_1 . METHOD_2 ( e . getValue ( ) ) ) ( VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( METHOD_4 ( view . METHOD_5 ( ) ) ) ( endif ) ( view . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 type ) ) ( TYPE_1 t = type . METHOD_2 ( ) ) ( while ( ! ( VAR_1 class . getName ( ) . equals ( t . METHOD_3 ( ) ) ) ) ) ( endwhile ) ( if ( ( TYPE_2 . METHOD_4 ( t ) . length ) > 0 ) ) ( return true ; ) ( endif ) ( t = type . METHOD_2 ( ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) ) ( try ) ( end-try ) ( METHOD_2 ( req , rsp ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( METHOD_3 ( ) . log ( STRING_1 , e ) ) ( METHOD_4 ( rsp , null , null ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( boolean VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ) ( VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ) ( VAR_2 . METHOD_4 ( VAR_1 ) ) ( java.util.List < TYPE_1 > VAR_4 = TYPE_3 . METHOD_5 ( ) ) ( while ( VAR_2 . METHOD_6 ( ) ) ) ( endwhile ) ( VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ) ( if ( VAR_4 ) ) ( bind ( VAR_5 . String class ) . METHOD_3 ( VAR_6 class ) . METHOD_2 ( VAR_7 class . getName ( ) ) ) ( bind ( VAR_8 class ) . METHOD_4 ( VAR_9 class ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( java.lang.String VAR_1 ) ) ( if ( METHOD_1 ( ) ) ) ( try ) ( end-try ) ( VAR_2 . METHOD_2 ( VAR_2 . get ( ) , new TYPE_2 ( VAR_3 ) ) ) ( VAR_4 = METHOD_3 ( ) ) ( VAR_5 . info ( STRING_1 ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( VAR_5 . error ( ( STRING_2 + STRING_3 ) , e ) ) ( endif ) ( return VAR_2 . get ( ) . create ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , admin , VAR_2 ) ) ( assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( com.google.gerrit.reviewdb.client.Change c = change ( ) ) ( if ( c == null ) ) ( VAR_1 = java.util.Collections . METHOD_2 ( ) ) ( endif ) ( if ( ( VAR_2 ) != null ) ) ( return VAR_2 . get ( c . currentPatchSetId ( ) ) ; ) ( endif ) ( VAR_1 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( db , METHOD_5 ( ) , c . currentPatchSetId ( ) ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Account METHOD_1( final java.lang.String VAR_1 ) ) ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > r = METHOD_2 ( VAR_1 ) ) ( return ( r . size ( ) ) == 1 ? VAR_2 . get ( r . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) : null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = METHOD_2 ( ( ( STRING_1 + ( VAR_1 . get ( ) ) ) + STRING_2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) ( java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_4 ( r ) ) ( org.junit.Assert . METHOD_5 ( ( ( VAR_3 . size ( ) ) == 1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ( cfg = new TYPE_3 ( ) ) ( cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ) ( VAR_2 = new TYPE_4 ( VAR_1 , cfg ) ) ( VAR_2 . METHOD_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( switch ( TYPE_2 . get ( ) ) ) ( end-switch ) ( case VAR_1 : ) ( METHOD_2 ( true ) ) ( METHOD_3 ( true ) ) ( break ; ) ( case VAR_2 : ) ( METHOD_2 ( true ) ) ( METHOD_3 ( false ) ) ( break ; ) ( case VAR_3 : ) ( case VAR_4 : ) ( default : ) ( break ; ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ) ( final TYPE_2 VAR_2 = VAR_3 . create ( VAR_1 ) ) ( return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_3 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_4 . of ( db ) ; } } ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( cd . METHOD_2 ( user ) ) ) ( return true ; ) ( endif ) ( try ) ( end-try ) ( TYPE_2 . Change c = cd . change ( db ) ) ( if ( ( c != null ) && ( VAR_1 . METHOD_3 ( c , user ) . METHOD_4 ( ) ) ) ) ( cd . METHOD_5 ( user ) ) ( return true ; ) ( endif ) ( return false ; ) ( end-catch ) ( catch (TYPE_3 e) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( TYPE_3 rsrc ) ) ( java.util.Map < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 > VAR_1 = new TYPE_5 < > ( ) ) ( for (TYPE_2 ps : rsrc . METHOD_2 ( ) . METHOD_1 ( )) ) ( endfor ) ( VAR_1 . put ( ps . getProject ( ) . METHOD_3 ( ) , ps ) ) ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 . user ( user ) . METHOD_6 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ) ) ( return VAR_1 . values ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( ) ) ( TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ) ( METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) ) ( VAR_2 . METHOD_4 ( true ) ) ( endif ) ( if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_5 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ) ) ( VAR_2 . METHOD_4 ( false ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final long VAR_1 = INT_1 ) ( final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ) ( assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 . toString ( ) ) ) ( final TYPE_1 VAR_3 = new TYPE_1 ( 0 ) ) ( VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) ) ( assertEquals ( VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( TYPE_1 . Result VAR_1 = METHOD_2 ( ) ) ( java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ) ( org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) ) ( org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project ) ) ( TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ) ( TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , VAR_3 ) ) ( try ) ( end-try ) ( if ( VAR_2 . METHOD_3 ( ) ) ) ( return VAR_2 ; ) ( endif ) ( throw new TYPE_2 ( STRING_1 ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_2 ( STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 in = new TYPE_1 ( ) ) ( in . branch = VAR_1 ) ( VAR_2 = STRING_1 ) ( in . project = project . get ( ) ) ( VAR_3 = true ) ( VAR_4 . METHOD_2 ( VAR_5 class ) ) ( TYPE_2 . ChangeInfo info = VAR_6 . changes ( ) . create ( in ) . get ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo info ) ) ( VAR_1 . METHOD_2 ( info . branch ( ) ) ) ( VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 . query ( info . METHOD_5 ( ) , info . status ( ) , info . branch ( ) , info . topic ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ) ( assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . to ( VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_9 ( VAR_10 ) . METHOD_9 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_10 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void codemirror( final java.lang.String token , final TYPE_1 base , final TYPE_2 . Key id , final TYPE_3 VAR_1 , final int line ) ) ( TYPE_4 . METHOD_1 ( new TYPE_5 ( token ) { public void onSuccess ( ) { TYPE_6 . display ( token , new TYPE_7 ( base , TYPE_1 . patchSet ( id . getParentKey ( ) ) , id . get ( ) , VAR_1 , line ) ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ) ( modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ) ( modules.add ( new TYPE_3 ( ) ) ) ( modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ) ( modules.add ( new TYPE_5 ( ) ) ) ( return VAR_1 . METHOD_3 ( modules ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . METHOD_2 ( ) ) ( endif ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_2 ( ) ) ( endif ) ( TYPE_1 . METHOD_3 ( false ) ) ( TYPE_2 . get ( ) . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( ) { for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_3 . METHOD_6 ( ) ; } } } ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String toString( ) ) ( if ( METHOD_1 ( ) ) ) ( return ( ( ( ( ( STRING_1 + ( error ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; ) ( endif ) ( return ( ( ( STRING_5 + ( VAR_3 ) ) + STRING_6 ) + ( VAR_4 ) ) + STRING_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo ) ) ) ( java.lang.String key = change . getKey ( ) . get ( ) ) ( METHOD_4 ( STRING_2 ) ) ( int i = 0 ) ( for (i <= INT_1) ) ( i ++ ) ( endfor ) ( java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) ( METHOD_4 ( VAR_1 , change ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ) ( METHOD_5 ( VAR_1 , n ) ) ( assertEquals ( ( STRING_4 + ( ( STRING_5 + STRING_6 ) + STRING_7 ) ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( ) ) ( VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ) ( VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( METHOD_7 ( ) , getRevision ( ) , METHOD_8 ( ) ) ) ) ( VAR_1 . METHOD_9 ( TYPE_5 . METHOD_4 ( ) ) ) ( return java.util.Collections . METHOD_10 ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . add ( METHOD_2 ( VAR_2 , admin , STRING_1 , 1 ) ) ) ( TYPE_1 VAR_3 = user ( VAR_4 ) ) ( TYPE_1 VAR_5 = user ( VAR_4 , admin ) ) ( METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ) ( METHOD_5 ( STRING_3 , VAR_5 . METHOD_4 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ) ( for (TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( )) ) ( endfor ) ( VAR_1 . add ( label . getName ( ) ) ) ( org.junit.Assert.assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( com.google.gerrit.reviewdb.client.Change c , TYPE_2 VAR_1 ) ) ( METHOD_2 ( ) ) ( VAR_2 = VAR_1 ) ( change = c ) ( try ) ( end-try ) ( METHOD_3 ( ) ) ( return TYPE_3 . create ( c , VAR_3 ) ; ) ( finally ) ( if ( ( rw ) != null ) ) ( rw . METHOD_4 ( ) ) ( endif ) ( if ( ( repo ) != null ) ) ( repo . close ( ) ) ( endif ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( TYPE_6 ctl = rsrc . METHOD_1 ( ) ) ( if ( ! ( ctl . METHOD_2 ( ) ) ) ) ( VAR_1 . user ( user ) . METHOD_3 ( VAR_2 ) ) ( endif ) ( VAR_3 . index ( db . get ( ) , rsrc . getChange ( ) ) ) ( return TYPE_1 . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( final java.util.List < TYPE_1 > result ) ) ( final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ) ( for (final TYPE_1 p : result) ) ( endfor ) ( r . add ( new TYPE_2 ( p ) ) ) ( VAR_1 . METHOD_1 ( req , new TYPE_3 ( r ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( java.lang.String VAR_1 ) ) ( try ) ( end-try ) ( TYPE_2 VAR_2 = METHOD_1 ( VAR_1 ) ) ( if ( VAR_2 != null ) ) ( TYPE_1 VAR_3 = new TYPE_1 ( config ) ) ( VAR_3 . METHOD_2 ( VAR_2 ) ) ( return VAR_3 ; ) ( endif ) ( return null ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_4 . error ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , e ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.PatchSet> METHOD_1( ) ) ( TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > VAR_1 = new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return METHOD_2 ( ) . METHOD_3 ( input , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ) ( return TYPE_3 . METHOD_4 ( patchSets ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 id ) ) ( if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) ( return METHOD_4 ( ) ; ) ( endif ) ( if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) ) ( return true ; ) ( endif ) ( for (final TYPE_2 t : VAR_1) ) ( endfor ) ( if ( t . METHOD_5 ( id ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_5 ( VAR_12 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> get( java.lang.String p , TYPE_3 < TYPE_1 < TYPE_2 > > m ) ) ( TYPE_1 < TYPE_2 > r = m . get ( p ) ) ( if ( r == null ) ) ( r = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) ) ( endif ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( TYPE_1 . METHOD_2 ( ) ) ) ( TYPE_2 VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ( if ( VAR_1 != null ) ) ( switch ( VAR_1 ) ) ( end-switch ) ( case VAR_2 : ) ( return STRING_1 ; ) ( case VAR_3 : ) ( case VAR_4 : ) ( return STRING_2 ; ) ( case VAR_5 : ) ( case VAR_6 : ) ( return STRING_3 ; ) ( default : ) ( return null ; ) ( endif ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 id , java.util.List < TYPE_2 > VAR_1 , final java.lang.String VAR_2 ) ) ( final java.lang.String message = ( ( id . name ( ) ) + STRING_1 ) + VAR_2 ) ( if ( VAR_3 ) ) ( VAR_1 . add ( new TYPE_2 ( message , true ) ) ) ( throw new TYPE_3 ( STRING_2 , VAR_1 ) ) ( endif ) ( VAR_1 . add ( new TYPE_2 ( ( STRING_3 + message ) , false ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( boolean VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ) ( VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ) ( VAR_2 . METHOD_4 ( VAR_1 ) ) ( java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ) ( while ( VAR_2 . METHOD_5 ( ) ) ) ( endwhile ) ( VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_1 = repo . commit ( ) . create ( ) ) ( org.eclipse.jgit.revwalk.RevCommit master = repo . commit ( ) . METHOD_2 ( VAR_1 ) . create ( ) ) ( org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_3 ( VAR_1 ) ) ) ( org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_3 ( master ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 event ) ) ( TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 . getValue ( ) ) ) ( if ( VAR_3 . equals ( VAR_4 ) ) ) ( VAR_1 . METHOD_2 ( VAR_5 ) ) ( endif ) ( if ( ( query ) == null ) ) ( VAR_1 . run ( ) ) ( query = VAR_1 ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository repo ) ) ( return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 result , java.lang.String VAR_1 , java.lang.String [ ] args ) ) ( final TYPE_2 ctx = VAR_2 . get ( ) ) ( final java.lang.String VAR_3 = METHOD_2 ( ctx ) ) ( final long VAR_4 = METHOD_3 ( ctx ) ) ( final java.lang.String VAR_5 = METHOD_4 ( VAR_1 , args ) ) ( VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , METHOD_6 ( ctx ) , ( STRING_1 + VAR_5 ) , VAR_4 , TYPE_4 . METHOD_7 ( args ) , result ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) ) ( if ( ( VAR_1 . size ( ) ) != 1 ) ) ( throw new TYPE_4 ( STRING_1 ) ) ( endif ) ( return new TYPE_5 < TYPE_2 > ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ) ( repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ) ( org.junit.Assert.assertEquals ( ( ( STRING_4 + ( VAR_1 . name ( ) ) ) + STRING_5 ) , METHOD_3 ( STRING_6 , STRING_7 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) ) ( TYPE_2 result = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ) ( org.junit.Assert.assertEquals ( TYPE_3 . METHOD_6 ( VAR_2 ) , result . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2.Result> METHOD_1( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_3 VAR_1 ) ) ( return VAR_1 . submit ( new TYPE_4 < TYPE_2 . Result > ( ) { public TYPE_2 . Result METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { return METHOD_4 ( db , id ) ; } } } ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ) ( rpc ( VAR_6 class ) ) ( rpc ( VAR_7 class ) ) ( rpc ( VAR_8 class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null , null ) ) ( java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( changeId . get ( ) , revision ) ) ( VAR_1 . METHOD_3 ( ) ) ( VAR_1 . get ( new TYPE_3 < TYPE_4 < TYPE_5 > > ( ) { public void onSuccess ( TYPE_4 < TYPE_5 > VAR_2 ) { VAR_2 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_3 , VAR_2 ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> delete( com.google.gerrit.server.query.change.ChangeData cd ) ) ( java.lang.String id = cd . getId ( ) . toString ( ) ) ( try ) ( end-try ) ( if ( cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) ) ( VAR_1 . METHOD_2 ( id ) ) ( commit ( VAR_1 ) ) ( endif ) ( VAR_2 . METHOD_2 ( id ) ) ( commit ( VAR_2 ) ) ( return TYPE_3 . METHOD_3 ( null ) ; ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) . add ( STRING_1 , STRING_2 ) . message ( STRING_3 ) . create ( ) ) ( java.lang.String VAR_2 = getChangeId ( VAR_1 ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) . add ( STRING_4 , STRING_5 ) . message ( STRING_6 ) . create ( ) ) ( java.lang.String VAR_4 = getChangeId ( VAR_3 ) ) ( TYPE_1 . METHOD_3 ( VAR_5 , STRING_7 , false ) ) ( METHOD_4 ( VAR_2 , VAR_2 ) ) ( METHOD_4 ( VAR_4 , VAR_4 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( 1 ) , 2 ) ) ( assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ) ( final TYPE_1 VAR_2 = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ) ( VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ) ( assertEquals ( VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.AccountGroup METHOD_1( final TYPE_1 . Id key ) ) ( final TYPE_1 . NameKey name = new TYPE_1 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ) ( final com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = new com.google.gerrit.reviewdb.client . AccountGroup ( name , key , null ) ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_2 ) + STRING_5 ) ) , METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( org.eclipse.jgit.revwalk.RevCommit a , org.eclipse.jgit.revwalk.RevCommit b ) ) ( if ( ( a . METHOD_2 ( ) ) != ( b . METHOD_2 ( ) ) ) ) ( return false ; ) ( endif ) ( int i = 0 ) ( for (i < ( a . METHOD_2 ( ) )) ) ( i ++ ) ( endfor ) ( if ( ( a . METHOD_3 ( i ) ) != ( b . METHOD_3 ( i ) ) ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ( VAR_3 . METHOD_3 ( VAR_2 ) ) ( if ( VAR_4 . METHOD_4 ( VAR_1 ) ) ) ( VAR_3 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_1 ) ) ) ( endif ) ( METHOD_7 ( VAR_1 ) ) ( VAR_3 . close ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ) ( VAR_3 = VAR_1 . METHOD_3 ( VAR_4 class ) ) ( VAR_5 = TYPE_3 . METHOD_4 ( VAR_1 ) ) ( VAR_6 = TYPE_3 . METHOD_5 ( VAR_1 ) ) ( VAR_7 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_8 class ) ) ) ( VAR_9 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_10 class ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = table . METHOD_2 ( ) ) ( final int VAR_2 = table . METHOD_3 ( ) ) ( int row = 0 ) ( for (row < VAR_2) ) ( row ++ ) ( endfor ) ( if ( ( METHOD_4 ( row ) ) != null ) ) ( table . METHOD_5 ( row , VAR_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( VAR_1 = new TYPE_1 ( ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . add ( VAR_1 ) ) ( add ( VAR_2 ) ) ( VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . get ( ) ) ) ) ) ( display ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( VAR_1 != null ) ) ( TYPE_1 a = VAR_2 . get ( VAR_1 . getName ( ) ) ) ( if ( VAR_3 . contains ( a ) ) ) ( VAR_2 . METHOD_1 ( a ) ) ( endif ) ( a . METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project project ) ) ( TYPE_1 < com.google.gerrit.reviewdb.client.Change > changes = null ) ( try ) ( end-try ) ( changes = db . changes ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException VAR_1) ) ( METHOD_4 ( changes ) ) ( db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( index = new TYPE_1 ( VAR_1 ) ) ( VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . METHOD_2 ( index ) ) ( VAR_3 = new TYPE_3 ( VAR_2 ) ) ( VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null ) , new TYPE_6 ( null ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( index = new TYPE_1 ( VAR_1 ) ) ( VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . METHOD_2 ( index ) ) ( VAR_3 = new TYPE_3 ( VAR_2 ) ) ( VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null , VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( TYPE_3 VAR_2 = new TYPE_3 ( STRING_2 , STRING_3 ) ) ( TYPE_3 VAR_3 = new TYPE_3 ( STRING_4 , STRING_5 ) ) ( assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) ) ( assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ) ( assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ) ( assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . METHOD_2 ( true ) ) ( VAR_1 = null ) ( endif ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_3 ( ) ) ( VAR_2 = null ) ( endif ) ( for (TYPE_1 VAR_3 : VAR_4) ) ( endfor ) ( VAR_3 . METHOD_4 ( ) ) ( VAR_4 . METHOD_5 ( ) ) ( super . METHOD_1 ( ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 VAR_1 , org.eclipse.jgit.revwalk.RevCommit edit , com.google.gerrit.reviewdb.client.PatchSet VAR_2 ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_3 = rw . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_2 . getRevision ( ) . get ( ) ) ) ) ( if ( VAR_3 . METHOD_3 ( ) . equals ( edit . METHOD_3 ( ) ) ) ) ( throw new TYPE_2 ( STRING_1 ) ) ( endif ) ( return TYPE_3 . METHOD_4 ( rw , VAR_1 , VAR_3 , edit ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( VAR_1 . METHOD_2 ( ) ) ( TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ) ( TYPE_5 VAR_4 = TYPE_6 . get ( VAR_1 ) ) ( TYPE_7 VAR_5 = VAR_4 . getProject ( ) . METHOD_4 ( ) ) ( if ( ! ( VAR_2 . METHOD_5 ( VAR_6 [ VAR_5 . METHOD_6 ( ) ] , VAR_7 ) ) ) ) ( return VAR_1 . METHOD_7 ( ) ; ) ( endif ) ( return VAR_8 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) ) ( try ) ( end-try ) ( METHOD_2 ( req , rsp ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( METHOD_3 ( ) . log ( STRING_1 , e ) ) ( METHOD_4 ( rsp , false ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( boolean VAR_1 ) ) ( if ( ! VAR_1 ) ) ( return VAR_2 . values ( ) ; ) ( endif ) ( java.util.ArrayList < TYPE_2 > plugins = new java.util.ArrayList < TYPE_2 > ( VAR_2 . values ( ) ) ) ( plugins . METHOD_2 ( VAR_3 . values ( ) ) ) ( return plugins ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ) ( com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ) ( METHOD_4 ( STRING_3 ) ) ( METHOD_4 ( STRING_4 ) ) ( METHOD_4 ( STRING_5 , VAR_3 ) ) ( METHOD_4 ( STRING_6 , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( TYPE_1 me , TYPE_2 VAR_1 , org.eclipse.jgit.revwalk.RevCommit VAR_2 , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.lib.ObjectId VAR_3 ) ) ( TYPE_3 VAR_4 = new TYPE_3 ( ) ) ( VAR_4 . METHOD_2 ( VAR_3 ) ) ( VAR_4 . METHOD_3 ( base ) ) ( VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ( VAR_4 . METHOD_6 ( METHOD_7 ( me ) ) ) ( VAR_4 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ) ( return VAR_1 . insert ( VAR_4 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) ( METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ) ( METHOD_4 ( user ) ) ( METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) ) ( TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( db , change . change ( ) ) ) ( if ( VAR_1 ) ) ( com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . isEmpty ( ) ) ( endif ) ( com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . METHOD_4 ( ) ) ( METHOD_5 ( ( ( FLOAT_1 / ( VAR_4 ) ) / ( VAR_5 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 user ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( return VAR_2 ; ) ( endif ) ( java.lang.String id = TYPE_3 . METHOD_3 ( user . METHOD_4 ( ) . METHOD_5 ( ) ) ) ( if ( id == null ) ) ( return VAR_2 ; ) ( endif ) ( try ) ( end-try ) ( return new TYPE_4 ( VAR_3 . get ( id ) ) ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( VAR_4 . METHOD_6 ( java.lang.String.format ( STRING_1 , id ) , e ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( try ) ( end-try ) ( VAR_1 . close ( ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_2 . METHOD_2 ( STRING_1 , e ) ) ( try ) ( end-try ) ( VAR_3 . close ( true ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_2 . METHOD_2 ( STRING_2 , e ) ) ( try ) ( end-try ) ( VAR_4 . close ( ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_2 . METHOD_2 ( STRING_3 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String topic = VAR_1 . METHOD_2 ( ) ) ( TYPE_1 . topic ( change.getId ( ) . get ( ) , topic , METHOD_3 ( ) , new TYPE_2 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { VAR_2 = true ; TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) ; METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_5 VAR_3 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_3 ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 VAR_1 ) ) ( int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( int VAR_3 = TYPE_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_4 ) , VAR_2 ) ) ( TYPE_4 VAR_5 = TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ) ( TYPE_5 VAR_6 = TYPE_6 . METHOD_1 ( ) . METHOD_6 ( new TYPE_7 ( VAR_5 , VAR_7 ) ) ) ( VAR_1 . METHOD_7 ( VAR_6 ) ) ( VAR_6 . close ( ) ) ( return TYPE_2 . METHOD_8 ( VAR_5 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 cm ) ) ( if ( cm . METHOD_2 ( ) ) ) ( TYPE_2 VAR_1 = cm . METHOD_3 ( ) ) ( cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ) ( cm . METHOD_4 ( VAR_1 , VAR_4 , VAR_3 . METHOD_6 ( ) ) ) ( cm . METHOD_7 ( null ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ) ( com.google.gerrit.reviewdb.client.Change change = TYPE_3 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ) ( TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ) ( return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( admin ) ) ( METHOD_4 ( VAR_1 , VAR_2 ) ) ( assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( if ( ( VAR_1 . get ( ) ) == ( rsrc . METHOD_1 ( ) ) ) ) ( throw new TYPE_6 ( STRING_1 ) ) ( endif ) ( return VAR_2 . METHOD_2 ( rsrc . METHOD_1 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.Repository METHOD_1( final TYPE_1 . NameKey name ) ) ( try ) ( end-try ) ( return VAR_1 . METHOD_1 ( name ) ; ) ( end-catch ) ( catch (TYPE_2 err) ) ( VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 p ) ) ( java.lang.String url ) ( switch ( p ) ) ( end-switch ) ( case VAR_1 : ) ( url = VAR_2 ) ( break ; ) ( case VAR_3 : ) ( url = admin . METHOD_2 ( ) ) ( break ; ) ( default : ) ( throw new TYPE_3 ( ( STRING_1 + p ) ) ) ( git = TYPE_4 . METHOD_3 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) ) ( TYPE_2 < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ) ( return VAR_2 . isEmpty ( ) ? null : VAR_2 . METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ) ( install ( TYPE_1 . METHOD_3 ( ) ) ) ( install ( new TYPE_2 ( ) ) ) ( com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ) ( install ( new TYPE_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 key ) ) ( if ( ( ( VAR_1 ) == null ) && ( ( VAR_2 ) != null ) ) ) ( throw new TYPE_3 ( STRING_1 ) ) ( endif ) ( if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) == null ) ) ) ( throw new TYPE_3 ( STRING_2 ) ) ( endif ) ( return METHOD_1 ( key , 0 , true , ( ( VAR_1 ) != null ? new TYPE_4 < TYPE_5 > ( ) : null ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) ) ( java.lang.String VAR_4 = METHOD_2 ( VAR_2 , VAR_3 , line ) ) ( VAR_1 . append ( ( ( ( ( STRING_1 + line ) + STRING_2 ) + VAR_4 ) + STRING_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 commit ) ) ( try ) ( TYPE_2 VAR_1 = TYPE_1 . METHOD_2 ( rw . METHOD_3 ( ) ) ) ( end-try ) ( VAR_1 . METHOD_4 ( ) ) ( VAR_1 . METHOD_5 ( commit ) ) ( for (org.eclipse.jgit.revwalk.RevCommit VAR_2 : VAR_3) ) ( endfor ) ( if ( VAR_1 . METHOD_6 ( VAR_1 . parseCommit ( VAR_2 ) , VAR_1 . parseCommit ( commit ) ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project ) ) ( TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ) ( TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ) ( try ) ( end-try ) ( if ( VAR_2 . METHOD_3 ( ) ) ) ( return VAR_2 ; ) ( endif ) ( throw new TYPE_2 ( STRING_1 ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_2 ( STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.lang.String VAR_1 ) ) ( < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) ) ( return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . METHOD_1 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void index( com.google.gerrit.reviewdb.client.Account.Id id ) ) ( for (TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( )) ) ( endfor ) ( TYPE_3 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( id ) ) ( if ( VAR_1 . METHOD_3 ( ) ) ) ( i . METHOD_4 ( VAR_1 . get ( ) ) ) ( endif ) ( i . delete ( id ) ) ( METHOD_5 ( id . get ( ) ) ) ( TYPE_4 . METHOD_6 ( id ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_3 git = METHOD_2 ( ) ) ( TYPE_4 . Result change = METHOD_3 ( git , true ) ) ( TYPE_4 . Result VAR_1 = METHOD_3 ( git , true ) ) ( TYPE_4 . Result VAR_2 = METHOD_3 ( git , true ) ) ( METHOD_3 ( git , false ) ) ( java.util.Set < java.lang.String > changes = METHOD_4 ( change ) ) ( METHOD_5 ( changes , VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( return TYPE_1 . create ( ) . set ( STRING_1 , false ) . set ( STRING_2 , 0 ) . set ( STRING_3 , FLOAT_1 ) . set ( STRING_4 , true ) . set ( STRING_5 , INT_1 ) . set ( STRING_6 , false ) . set ( STRING_7 , true ) . set ( STRING_8 , true ) . set ( STRING_9 , STRING_10 ) . set ( STRING_11 , TYPE_2 . METHOD_2 ( type ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_1 = getRevision ( ) ) ( if ( VAR_1 == null ) ) ( return ; ) ( endif ) ( org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) ( TYPE_2 VAR_3 = new TYPE_2 ( getChange ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) ( VAR_3 . METHOD_2 ( ) ) ( METHOD_3 ( VAR_7 , VAR_8 ) ) ( METHOD_3 ( VAR_9 , VAR_10 ) ) ( VAR_11 = VAR_12 ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( VAR_1 . METHOD_2 ( ) ) ( TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ) ( TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_5 ) ) ) ( TYPE_6 . Change change = TYPE_7 . get ( VAR_1 ) ) ( TYPE_8 . NameKey name = change . METHOD_4 ( ) ) ( if ( ! ( VAR_2 . METHOD_5 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) ) ( return VAR_1 . METHOD_6 ( ) ; ) ( endif ) ( return VAR_7 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 in ) ) ( try ) ( end-try ) ( return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( catch (TYPE_4 e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( catch (java.io.IOException e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( catch (TYPE_5 e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( final TYPE_2 s = ( ( TYPE_2 ) ( db ) ) ) ( final TYPE_3 e = new TYPE_3 ( s ) ) ( METHOD_2 ( db , s , e ) ) ( METHOD_3 ( db , s , e ) ) ( METHOD_4 ( db ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 VAR_1 ) ) ( try ) ( TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ) ( TYPE_3 in = TYPE_5 . METHOD_2 ( VAR_2 ) ) ( end-try ) ( return new TYPE_1 ( in ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ) ( catch (TYPE_7 e) ) ( throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String name = STRING_1 ) ( final java.lang.String value = STRING_2 ) ( final TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( name , value ) ) ( org.junit.Assert . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ) ( org.junit.Assert . METHOD_3 ( value , VAR_1 . getValue ( ) ) ) ( org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_3 . Result r = METHOD_2 ( ) ) ( TYPE_4 in = new TYPE_4 ( ) ) ( VAR_1 = user . email ) ( TYPE_5 VAR_2 = VAR_3 . changes ( ) . id ( r . getChangeId ( ) ) ) ( VAR_2 . METHOD_1 ( in ) ) ( org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , VAR_2 ) ) ( assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 < TYPE_2 > m ) ) ( VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) , VAR_2 . edit ( ) ) , VAR_3 , VAR_4 , VAR_5 ) ) ( VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) . to ( VAR_1 class ) ) ( bind ( new TYPE_1 < java.util.Map < java.lang.String , TYPE_2 > > ( ) { } ) . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( this . VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_1 ( ) ) ( if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) ) ( TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 . get ( ) ) ) ) ( VAR_6 . set ( VAR_7 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_8 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) ) ( TYPE_3 input = TYPE_3 . create ( ) ) ( input . METHOD_2 ( user ) ) ( TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( input , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String url( TYPE_1 info ) ) ( return info . METHOD_1 ( ) ? TYPE_2 . METHOD_2 ( base , VAR_1 , info . path ( ) ) : ( VAR_2 ) == ( VAR_3 ) ? TYPE_2 . METHOD_3 ( base , VAR_1 , info . path ( ) ) : TYPE_2 . METHOD_4 ( VAR_1 , info . path ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<TYPE_1.Key,TYPE_1.Id> METHOD_1( ) ) ( final java.util.Map < TYPE_1 . Key , TYPE_1 . Id > r = new TYPE_3 < TYPE_1 . Key , TYPE_1 . Id > ( ) ) ( for (TYPE_4 . Change c : db . changes ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) )) ) ( endfor ) ( r . put ( c . getKey ( ) , c . getId ( ) ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( TYPE_1 < TYPE_2 > in ) ) ( if ( in != null ) ) ( java.util.Collections . METHOD_1 ( TYPE_3 . METHOD_2 ( in ) , new TYPE_4 < TYPE_2 > ( ) { public int METHOD_3 ( TYPE_2 a , TYPE_2 b ) { return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; } } ) ) ( endif ) ( return in ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) ) ( if ( ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ) ) ( return false ; ) ( endif ) ( for (final TYPE_1 t : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( )) ) ( endfor ) ( if ( ! ( VAR_2 . METHOD_4 ( t ) ) ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( boolean equals( final TYPE_1 VAR_1 ) ) ( if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) ) ( final TYPE_2 < ? > VAR_2 = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ( return ( getName ( ) . equals ( VAR_2 . getName ( ) ) ) && ( METHOD_2 ( ) . equals ( VAR_2 . METHOD_2 ( ) ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) ) ( db = VAR_1 . METHOD_4 ( ) ) ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ( ( db ) instanceof TYPE_2 ) ) . METHOD_7 ( ) ) ( VAR_2 = ( ( TYPE_2 ) ( db ) ) . METHOD_8 ( ) ) ( VAR_3 = VAR_2 . METHOD_9 ( STRING_1 ) ) ( VAR_4 = VAR_2 . METHOD_9 ( STRING_2 ) ) ( VAR_5 = VAR_2 . METHOD_9 ( STRING_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . append ( ( ( java.lang.String ) ( null ) ) ) ) ) ( assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) ( METHOD_2 ( b , b . append ( STRING_2 ) ) ) ( METHOD_2 ( b , b . append ( STRING_3 ) ) ) ( assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.lib.Repository repo , TYPE_2 . Project project ) ) ( TYPE_1 result = TYPE_3 . METHOD_2 ( VAR_1 , repo , project ) ) ( if ( result != ( VAR_2 ) ) ) ( return result ; ) ( endif ) ( result = TYPE_3 . METHOD_2 ( VAR_3 , repo , project ) ) ( if ( result != ( VAR_2 ) ) ) ( return result ; ) ( endif ) ( result = TYPE_3 . METHOD_2 ( VAR_4 , repo , project ) ) ( if ( result != ( VAR_2 ) ) ) ( return result ; ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( try ) ( end-try ) ( TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( STRING_1 ) ) ( if ( VAR_3 . METHOD_4 ( ) ) ) ( return new TYPE_1 ( VAR_3 . METHOD_5 ( 1 ) ) ; ) ( endif ) ( finally ) ( VAR_2 . close ( ) ) ( end-finally ) ( return null ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String message ) ) ( TYPE_1 . METHOD_2 ( project , branch , null , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( Project.NameKey METHOD_1( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 , TYPE_1 VAR_4 ) ) ( TYPE_3 in = new TYPE_3 ( ) ) ( in . name = name ( VAR_1 ) ) ( VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null ) ( VAR_6 = VAR_4 ) ( VAR_7 = VAR_3 ) ( VAR_6 = VAR_4 ) ( return METHOD_1 ( in ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , TYPE_1 VAR_1 ) ) ( if ( VAR_2 . METHOD_2 ( false ) ) ) ( throw new java.io.IOException ( STRING_1 ) ) ( endif ) ( TYPE_1 . Result result = VAR_3 . METHOD_1 ( db , changeId , VAR_1 ) ) ( if ( VAR_4 . METHOD_2 ( false ) ) ) ( throw new java.io.IOException ( STRING_2 ) ) ( endif ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) ) ( TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ) ( VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ) ( VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.Account.Id,java.lang.String> METHOD_1( com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( java.util.Set < java.lang.String > VAR_1 = TYPE_2 . of ( TYPE_3 . getName ( ) , TYPE_4 . getName ( ) ) ) ( java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_2 = VAR_3 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( changeId ) ) ( if ( ( VAR_2 . size ( ) ) != 1 ) ) ( throw new TYPE_5 ( changeId ) ) ( endif ) ( return VAR_2 . get ( 0 ) . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( VAR_1 ) ) ( return METHOD_2 ( ) ; ) ( endif ) ( if ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) ( METHOD_4 ( ) ) ( return METHOD_2 ( ) ; ) ( endif ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ) ( end-try ) ( METHOD_1 ( repo ) ) ( VAR_1 = true ) ( end-catch ) ( catch (TYPE_2|java.io.IOException e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( return METHOD_2 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> METHOD_1( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) ) ( return VAR_2 . apply ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) ( cfg . METHOD_4 ( ) . METHOD_5 ( ) ) ( cfg . METHOD_4 ( ) . put ( VAR_3 . getName ( ) , VAR_3 ) ) ( METHOD_6 ( cfg ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.PatchSet METHOD_1( TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > db ) ) ( if ( ( VAR_1 ) == null ) ) ( com.google.gerrit.reviewdb.client.Change c = change ( db ) ) ( if ( c == null ) ) ( return null ; ) ( endif ) ( for (com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( db )) ) ( endfor ) ( if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) ) ( VAR_1 = p ) ( return p ; ) ( endif ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) ) ( VAR_1 = new TYPE_1 ( false , TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ) ( endif ) ( VAR_1 = new TYPE_1 ( false ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo get( TYPE_2 < TYPE_3 > s ) ) ( try ) ( end-try ) ( return TYPE_5 . apply ( VAR_1 . METHOD_1 ( s ) . format ( change ) ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_4 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String,java.lang.String> METHOD_1( ) ) ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < java.lang.String , java.lang.String > ( ) ) ( VAR_1 . put ( STRING_1 , VAR_2 class . getName ( ) ) ) ( VAR_1 . put ( STRING_2 , STRING_3 ) ) ( VAR_1 . put ( STRING_4 , STRING_5 ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) ) ( final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ) ( r . append ( METHOD_2 ( ) ) ) ( r . append ( change . getChangeId ( ) ) ) ( return r . toString ( ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) ) ( final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ) ( r . append ( METHOD_2 ( ) ) ) ( r . append ( change . getChangeId ( ) ) ) ( return r . toString ( ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final com.google.gerrit.reviewdb.server.ReviewDb db , final com.google.gerrit.reviewdb.client.Change change ) ) ( final java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ) ( for (com.google.gerrit.reviewdb.client . PatchSetApproval a : approvals) ) ( endfor ) ( a . METHOD_5 ( change ) ) ( db . METHOD_2 ( ) . update ( approvals ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) . METHOD_2 ( VAR_1 class , VAR_2 class ) . METHOD_3 ( VAR_3 . Factory class ) ) ) ( install ( new TYPE_1 ( ) . METHOD_2 ( VAR_4 class , VAR_5 class ) . METHOD_3 ( VAR_6 . Factory class ) ) ) ( install ( new TYPE_2 ( VAR_7 ) ) ) ( if ( ( VAR_8 ) == null ) ) ( install ( new TYPE_3 ( ) ) ) ( endif ) ( install ( new TYPE_4 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) ) ( final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ) ( try ) ( end-try ) ( return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new TYPE_3 ( change.getId ( ) , e ) ) ( catch (java.io.IOException e) ) ( throw new TYPE_3 ( change.getId ( ) , e ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 r ) ) ( try ) ( end-try ) ( TYPE_4 VAR_1 = VAR_2 . get ( ) ) ( VAR_1 . METHOD_2 ( r . METHOD_3 ( ) ) ) ( VAR_1 . METHOD_4 ( r . METHOD_5 ( ) ) ) ( return VAR_1 . apply ( change ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|java.io.IOException e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ) ( com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ) ( METHOD_4 ( STRING_3 ) ) ( METHOD_4 ( STRING_4 , VAR_3 ) ) ( METHOD_4 ( STRING_5 , VAR_4 ) ) ( METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( boolean VAR_1 ) ) ( if ( VAR_2 . METHOD_1 ( VAR_1 ) ) ) ( if ( ( ( VAR_3 ) instanceof TYPE_1 ) && ( VAR_4 . METHOD_2 ( false , true ) ) ) ) ( ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ) ( endif ) ( VAR_5 . METHOD_3 ( this ) ) ( VAR_5 . METHOD_4 ( ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ) ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ( TYPE_2 . METHOD_4 ( new TYPE_3 ( ) { public java.lang.String METHOD_5 ( TYPE_4 VAR_3 ) { return VAR_1 ; } public void METHOD_6 ( TYPE_4 VAR_3 , java.lang.String token ) { } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 , int VAR_2 ) ) ( byte [ ] VAR_3 = new TYPE_2 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( VAR_1 ) , TYPE_3 . name ( ) ) ) ( return new TYPE_4 ( VAR_3 ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( TYPE_3 . name ( ) ) . METHOD_7 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( db ) != null ) ) ( try ) ( end-try ) ( final TYPE_1 ps = METHOD_2 ( ) ) ( if ( ps != null ) ) ( for (final TYPE_2 w : METHOD_3 ( )) ) ( endfor ) ( if ( w . METHOD_4 ( ) ) ) ( add ( VAR_1 , w . getAccountId ( ) ) ) ( endif ) ( endif ) ( end-catch ) ( catch (TYPE_3.OrmException err) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 in ) ) ( try ) ( end-try ) ( return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( TYPE_2 input = TYPE_3 . METHOD_1 ( TYPE_4 . METHOD_2 ( VAR_1 , ObjectId : : getName ) ) ) ( VAR_2 = VAR_3 ) ( TYPE_5 r = VAR_4 . apply ( new TYPE_6 ( VAR_5 ) , input ) ) ( METHOD_3 ( VAR_6 , STRING_1 ) ) ( METHOD_3 ( VAR_7 , STRING_2 ) ) ( METHOD_3 ( VAR_8 , STRING_3 ) ) ( end-catch ) ( catch (TYPE_7|java.io.IOException e) ) ( throw METHOD_4 ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.util.Set<java.lang.String>> apply( TYPE_2 req ) ) ( TYPE_5 VAR_1 = req . METHOD_1 ( ) ) ( TYPE_6 notes = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( java.util.Set < java.lang.String > VAR_2 = notes . METHOD_4 ( ) ) ( if ( VAR_2 == null ) ) ( VAR_2 = java.util.Collections . METHOD_5 ( ) ) ( endif ) ( return TYPE_1 . METHOD_6 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 . NameKey branch ) ) ( final TYPE_2 r = new TYPE_2 ( ) ) ( TYPE_3 . p ( r , branch . getParentKey ( ) ) ) ( TYPE_3 . METHOD_2 ( r , branch ) ) ( TYPE_3 . a ( r , STRING_1 ) ) ( return ( VAR_1 ) + r ; ) ( CFG Exit )
( CFG Entry ) ( Account.Id METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , java.lang.String VAR_2 ) ) ( com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( db , VAR_2 ) ) ( if ( a == null ) ) ( throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ) ( endif ) ( return a . getId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.util.Map < java.lang.String , TYPE_1 > VAR_1 , final java.lang.String name , final java.lang.String value ) ) ( if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) ) ( VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 . ChangeInfo info ) ) ( info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ) ( TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ) ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ( VAR_2 . METHOD_4 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = new TYPE_3 ( ) ) ( TYPE_4 insert = METHOD_2 ( VAR_2 , VAR_1 ) ) ( try ) ( end-try ) ( VAR_3 . insert ( VAR_4 ) ) ( org.junit.Assert . METHOD_3 ( STRING_1 ) ) ( end-catch ) ( catch (TYPE_1.OrmException e) ) ( org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ) ( METHOD_6 ( insert , 1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_3 ) ) ( METHOD_4 ( VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_3 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ) ( TYPE_2 u = METHOD_2 ( c , VAR_1 ) ) ( u . METHOD_3 ( c . METHOD_4 ( ) ) ) ( u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ) ( u . commit ( ) ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 file( final java.lang.String name ) ) ( final TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ) ( try ) ( end-try ) ( final TYPE_1 e = new TYPE_1 ( name ) ) ( e . METHOD_2 ( VAR_3 ) ) ( e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ) ( VAR_1 . METHOD_5 ( ) ) ( return e ; ) ( finally ) ( VAR_1 . METHOD_6 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( java.util.List<org.eclipse.jgit.revwalk.RevCommit> METHOD_1( ) ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ) ( try ) ( end-try ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( try ) ( end-try ) ( rw . METHOD_3 ( rw . parseCommit ( repo . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) ) ) ( return TYPE_1 . METHOD_6 ( rw ) ; ) ( finally ) ( rw . METHOD_7 ( ) ) ( end-finally ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) ) ( if ( id != null ) ) ( VAR_1 = db . METHOD_2 ( ) ) ( try ) ( end-try ) ( revision = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) ) ( METHOD_3 ( ) ) ( finally ) ( VAR_1 . METHOD_4 ( ) ) ( VAR_1 = null ) ( end-finally ) ( endif ) ( revision = null ) ( METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> METHOD_1( java.lang.String VAR_1 ) ) ( final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( final TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_3 , VAR_1 ) ) ) ( if ( VAR_2 != null ) ) ( return TYPE_1 . of ( VAR_2 . getAccountId ( ) ) ; ) ( endif ) ( return TYPE_1 . METHOD_4 ( ) ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 rsrc ) ) ( TYPE_4 VAR_1 = VAR_2 . get ( ) ) ( if ( VAR_1 == null ) ) ( throw new TYPE_3 ( ) ) ( endif ) ( java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , size ) ) ( if ( TYPE_5 . METHOD_4 ( url ) ) ) ( throw new TYPE_3 ( ) ) ( endif ) ( return TYPE_6 . METHOD_5 ( url ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( int VAR_1 ) ) ( TYPE_1 t = this ) ( int VAR_2 = VAR_1 ) ( while ( ( t . METHOD_2 ( ) ) && ( 0 < VAR_1 ) ) ) ( endwhile ) ( VAR_1 -- ) ( t = ( ( TYPE_2 ) ( t ) ) . VAR_3 . METHOD_3 ( ) ) ( if ( t . METHOD_2 ( ) ) ) ( return ( ( TYPE_2 ) ( t ) ) . VAR_4 ; ) ( endif ) ( throw new TYPE_3 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void index( TYPE_1 VAR_1 ) ) ( for (TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( )) ) ( endfor ) ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( TYPE_4 < TYPE_3 > VAR_3 = VAR_2 . get ( VAR_1 ) ) ( if ( VAR_3 . METHOD_3 ( ) ) ) ( i . METHOD_4 ( VAR_3 . get ( ) ) ) ( endif ) ( i . delete ( VAR_1 ) ) ( METHOD_5 ( VAR_1 . get ( ) ) ) ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( if ( ( VAR_1 == null ) || ( ( VAR_1 . getValue ( ) ) == null ) ) ) ( throw new TYPE_3 ( STRING_1 ) ) ( endif ) ( return TYPE_4 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 . getValue ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 VAR_1 , TYPE_3 input ) ) ( TYPE_7 in = new TYPE_7 ( ) ) ( VAR_2 = id ) ( java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ) ( if ( VAR_3 . isEmpty ( ) ) ) ( return TYPE_9 . METHOD_1 ( ) ; ) ( endif ) ( if ( ( VAR_3 . size ( ) ) == 1 ) ) ( return VAR_3 . get ( 0 ) ; ) ( endif ) ( throw new TYPE_10 ( ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<com.google.gerrit.reviewdb.client.Account.Id,TYPE_1> METHOD_1( final TYPE_2 . Id VAR_1 ) ) ( final java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ) ( for (final TYPE_1 m : db . METHOD_3 ( ) . METHOD_4 ( VAR_1 )) ) ( endfor ) ( VAR_2 . put ( m . getAccountId ( ) , m ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 req ) ) ( java.lang.String VAR_1 = req . METHOD_2 ( ) ) ( if ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ( return VAR_2 ; ) ( endif ) ( return TYPE_3 . is ( CHAR_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( org.eclipse.jgit.revwalk.RevCommit c ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 ) ) ( com.google.gerrit.reviewdb.client.PatchSet ps = METHOD_3 ( c ) ) ( if ( ps != null ) ) ( try ) ( end-try ) ( METHOD_4 ( ps , VAR_1 ) ) ( return METHOD_5 ( ) . insert ( VAR_4 , VAR_1 . toString ( ) . METHOD_6 ( STRING_1 ) ) ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( throw new java.io.IOException ( e ) ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( TYPE_3 < TYPE_4 > VAR_3 = new TYPE_3 < > ( ) ) ( for (final TYPE_5 b : VAR_4) ) ( endfor ) ( if ( b . ref ( ) . contains ( VAR_1 . METHOD_2 ( ) ) ) ) ( VAR_3 . add ( new TYPE_4 ( b ) ) ) ( endif ) ( VAR_2 . METHOD_3 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 < TYPE_1 > VAR_1 , final TYPE_1 . Status status ) ) ( return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . getStatus ( ) ) == status ; } } ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change change ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 = change . currentPatchSetId ( ) ) ( TYPE_1 ps = new TYPE_1 ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , ( VAR_1 != null ? ( VAR_1 . get ( ) ) + 1 : 1 ) ) ) ) ( ps . METHOD_2 ( STRING_1 ) ) ( change . METHOD_3 ( ps ) ) ( TYPE_2 . METHOD_4 ( change ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) ) ( java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ) ( if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) ) ( org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.List<java.lang.String> METHOD_1( java.util.List < org.eclipse.jgit.lib.ObjectId > VAR_1 ) ) ( if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) ) ( return null ; ) ( endif ) ( return TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < org.eclipse.jgit.lib.ObjectId , java.lang.String > ( ) { public java.lang.String apply ( org.eclipse.jgit.lib.ObjectId id ) { return id . getName ( ) ; } } ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 ) ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_3 . METHOD_4 ( ) ) ) + ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) ) ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_6 . METHOD_4 ( ) ) ) + ( VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_1 branch = db . METHOD_2 ( VAR_1 ) ) ( if ( branch != null ) ) ( VAR_2 = VAR_3 . parseCommit ( branch . METHOD_3 ( ) ) ) ( base = TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ) ( endif ) ( if ( ( VAR_2 ) != null ) ) ( VAR_4 = TYPE_2 . METHOD_4 ( db . METHOD_6 ( ) , VAR_2 ) ) ( endif ) ( VAR_4 = TYPE_2 . METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean equals( com.google.gerrit.reviewdb.client.PatchSet p , java.lang.String id ) ) ( boolean VAR_1 = ( METHOD_1 ( ) ) == ( VAR_2 ) ) ( java.lang.String VAR_3 = ( ( p . getRevision ( ) ) != null ) ? p . getRevision ( ) . get ( ) : null ) ( return ( VAR_1 && ( id . equals ( VAR_3 ) ) ) || ( ( ( ! VAR_1 ) && ( VAR_3 != null ) ) && ( VAR_3 . METHOD_2 ( id ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String ... VAR_1 ) ) ( try ) ( end-try ) ( VAR_2 . apply ( rsrc , TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 input = new TYPE_1 ( ) ) ( java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ) ( VAR_1 . add ( STRING_1 ) ) ( VAR_3 = VAR_1 ) ( try ) ( end-try ) ( project ( ) . METHOD_3 ( input ) ) ( METHOD_4 ( STRING_2 ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ) ( METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) ) ( TYPE_2 p = new TYPE_2 ( ) ) ( try ) ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) ( end-try ) ( p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ) ( return p ; ) ( METHOD_6 ( VAR_2 ) ) ( finally ) ( VAR_1 . close ( ) ) ( METHOD_7 ( VAR_3 ) ) ( to = VAR_4 ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String master = STRING_1 ) ( org.eclipse.jgit.lib.ObjectId VAR_1 = git . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ) ( METHOD_5 ( master , STRING_3 , STRING_4 , STRING_5 ) ) ( VAR_2 . METHOD_6 ( VAR_1 ) ) ( METHOD_7 ( VAR_3 , project , STRING_6 ) ) ( TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_9 , STRING_10 ) ) ( r . METHOD_8 ( ) ) ( r . METHOD_9 ( VAR_4 , null , admin ) ) ( METHOD_10 ( master , STRING_8 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , TYPE_3 info , TYPE_4 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 , TYPE_5 < com.google.gerrit.reviewdb.client.Account.Id > VAR_3 ) ) ( return METHOD_1 ( db , update , VAR_1 , change , ps . getId ( ) , ps . METHOD_2 ( ) , info . METHOD_3 ( ) . METHOD_4 ( ) , info . METHOD_5 ( ) . METHOD_4 ( ) , VAR_2 , VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 user , TYPE_3 revision ) ) ( return new TYPE_1 ( user . METHOD_2 ( ) . METHOD_3 ( null ) , revision . METHOD_4 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Account METHOD_1( java.lang.String VAR_1 ) ) ( try ) ( end-try ) ( return VAR_2 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( switch ( VAR_3 ) ) ( end-switch ) ( case VAR_4 : ) ( case VAR_5 : ) ( case VAR_6 : ) ( if ( ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ) ) ( return METHOD_5 ( VAR_1 ) ; ) ( endif ) ( break ; ) ( default : ) ( throw e ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final int VAR_1 = 2 ) ( final int VAR_2 = INT_1 ) ( final TYPE_1 p = new TYPE_1 ( VAR_1 ) ) ( final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ) ( METHOD_2 ( p , c . getParentKey ( ) ) ) ( METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) ) ( res . METHOD_2 ( VAR_1 ) ) ( TYPE_4 . METHOD_3 ( req , res , null , c ) ) ( TYPE_4 . METHOD_4 ( null , res , msg ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( TYPE_3 < byte [ ] > VAR_1 ) ) ( java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ) ( for (byte [ ] key : VAR_1) ) ( endfor ) ( byte [ ] VAR_2 = METHOD_2 ( key ) ) ( if ( VAR_2 != null ) ) ( r . add ( new TYPE_2 ( key , VAR_2 ) ) ) ( endif ) ( return new TYPE_4 < TYPE_2 > ( r ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String changeId ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . changes ( ) . id ( changeId ) . info ( ) . VAR_2 ) . METHOD_2 ( STRING_1 ) . isEqualTo ( true ) ) ( TYPE_1 rsrc = METHOD_3 ( changeId ) ) ( TYPE_2 VAR_3 = VAR_4 . METHOD_4 ( rsrc ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_5 ( ) ) . METHOD_2 ( STRING_2 ) . METHOD_6 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_7 ( ) ) . METHOD_2 ( STRING_3 ) . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ; } public void METHOD_6 ( TYPE_6 VAR_2 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_2 ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_1 . changeId , admin ) ) ( assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( admin ) . to ( VAR_4 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 a , com.google.gerrit.reviewdb.client.Change change ) ) ( VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ) ( VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ) ( VAR_3 = change . METHOD_5 ( ) ) ( VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( VAR_1 . METHOD_3 ( ) ) ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( new TYPE_3 ( ) ) ) . METHOD_6 ( ) ) ( VAR_1 . METHOD_7 ( ) ) ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) ) ( VAR_2 . METHOD_8 ( ) ) ( VAR_3 = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 , VAR_8 ) ) ( VAR_3 . METHOD_9 ( ) ) ( VAR_2 . METHOD_10 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) ) ( res . METHOD_2 ( VAR_1 ) ) ( METHOD_3 ( res , VAR_2 ) ) ( METHOD_4 ( res ) ) ( try ) ( TYPE_3 out = TYPE_4 . METHOD_5 ( req , res ) ) ( end-try ) ( out . METHOD_6 ( message ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 event ) ) ( final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ) ( if ( ( VAR_2 ) == VAR_1 ) ) ( VAR_3 = null ) ( METHOD_3 ( ) ) ( endif ) ( if ( ( VAR_4 ) == VAR_1 ) ) ( VAR_3 = null ) ( VAR_5 = false ) ( METHOD_4 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctl , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client . PatchSetApproval a ) ) ( java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) ( TYPE_4 user = VAR_3 . create ( a . getAccountId ( ) ) ) ( TYPE_5 VAR_4 = ctl . METHOD_3 ( user ) . METHOD_4 ( VAR_2 ) ) ( a . METHOD_5 ( ( ( short ) ( VAR_4 . METHOD_6 ( a . getValue ( ) ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) ) ( TYPE_1 u = user ( ) ) ( METHOD_4 ( STRING_2 , u . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 < TYPE_2 > m ) ) ( VAR_1 . METHOD_1 ( null , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_2 ( ) ) ) ) ( VAR_1 . METHOD_3 ( m , VAR_3 , VAR_4 . get ( 0 ) , VAR_5 . get ( 0 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) ( com.google.gerrit.reviewdb.client.Change change = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ) ( METHOD_5 ( STRING_7 ) ) ( METHOD_5 ( STRING_8 , change ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( b . append ( 1 ) ) ( final TYPE_2 VAR_1 = b . METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 ) ) ( METHOD_4 ( VAR_1 , b ) ) ( METHOD_5 ( ( VAR_1 instanceof TYPE_1 ) ) ) ( assertEquals ( STRING_1 , VAR_1 . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 ) ) ( VAR_2 = VAR_1 - ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ( int i = 0 ) ( for (i < ( METHOD_2 ( ) . METHOD_4 ( ) )) ) ( i ++ ) ( endfor ) ( VAR_3 . get ( i ) . METHOD_1 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < java.lang.String , org.eclipse.jgit.revwalk.RevCommit > VAR_1 = METHOD_2 ( VAR_2 ) ) ( TYPE_2 input = new TYPE_2 ( ) ) ( VAR_3 = VAR_2 ) ( project ( ) . METHOD_1 ( input ) ) ( METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( com.google.gerrit.reviewdb.client.Change c = change ( ) ) ( try ) ( end-try ) ( VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . in ( VAR_2 class ) ) ( bind ( VAR_3 class ) ) ( bind ( VAR_4 class ) . in ( VAR_5 ) ) ( bind ( VAR_6 class ) . in ( VAR_2 class ) ) ( bind ( VAR_7 . Factory class ) . in ( VAR_5 ) ) ( factory ( VAR_8 . Factory class ) ) ( factory ( VAR_9 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<TYPE_1.Id> METHOD_1( ) ) ( final TYPE_2 r ) ( r = VAR_1 . get ( change . METHOD_2 ( ) . getParentKey ( ) ) ) ( return r != null ? r . METHOD_3 ( ) : VAR_2 . Collections < TYPE_1 . Id > METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void delete( com.google.gerrit.reviewdb.client.Change . Id id ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ) ( end-catch ) ( catch (TYPE_4|TYPE_5 e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 ) ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_4 , STRING_5 , STRING_3 , STRING_6 ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 commit ) ) ( if ( ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) ) ( return false ; ) ( endif ) ( for (TYPE_1 VAR_2 : VAR_1) ) ( endfor ) ( METHOD_2 ( VAR_2 ) ) ( if ( ( VAR_3 ) == null ) ) ( return false ; ) ( endif ) ( if ( ! ( VAR_4 . currentPatchSetId ( ) . equals ( VAR_3 ) ) ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( void set( TYPE_1 base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) ) ( this . base = base ) ( this . VAR_1 = VAR_1 ) ( this . VAR_2 = VAR_2 ) ( this . VAR_3 = VAR_3 ) ( this . VAR_4 = VAR_4 ) ( this . VAR_5 = VAR_5 ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ) ( TYPE_2 VAR_5 = util . user ( VAR_3 , VAR_4 ) ) ( METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) ( end-try ) ( java.lang.String ref = VAR_3 ) ( if ( ( repo . METHOD_3 ( ) . METHOD_4 ( ref ) ) != null ) ) ( TYPE_1 VAR_4 = repo . METHOD_5 ( ref ) ) ( VAR_4 . METHOD_6 ( true ) ) ( com.google.common.truth.Truth . METHOD_7 ( ) . METHOD_8 ( ( STRING_1 + ref ) ) . METHOD_9 ( VAR_4 . delete ( ) ) . isEqualTo ( VAR_5 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 key , int VAR_1 ) ) ( try ) ( end-try ) ( if ( ( VAR_1 == 0 ) && ( ( VAR_2 ) != null ) ) ) ( return METHOD_2 ( key ) ; ) ( endif ) ( return METHOD_3 ( key ) ; ) ( end-catch ) ( catch (TYPE_3|com.google.gwtorm.server.OrmException e) ) ( java.lang.String msg = STRING_1 ) ( VAR_3 . METHOD_4 ( ( ( msg + STRING_2 ) + ( TYPE_4 . METHOD_5 ( key . METHOD_6 ( ) ) ) ) , e ) ) ( return TYPE_1 . METHOD_7 ( msg ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ) ( org.junit.Assert . METHOD_3 ( VAR_3 ) ) ( org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ) ( org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) , VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < java.lang.String > e ) ) ( java.lang.String VAR_1 = e . getValue ( ) ) ( if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) ) ( VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ( if ( ( view ) != null ) ) ( view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( try ) ( TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ) ( TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ) ( end-try ) ( TYPE_3 . METHOD_4 ( VAR_3 ) ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw METHOD_5 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( try ) ( end-try ) ( TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) ( VAR_3 . METHOD_2 ( VAR_1 ) ) ( VAR_3 . METHOD_3 ( ) ) ( end-catch ) ( catch (java.io.IOException err) ) ( throw new TYPE_5 ( STRING_1 , err ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( repo ) == null ) ) ( this . repo = VAR_1 . METHOD_2 ( project ) ) ( VAR_2 = true ) ( VAR_3 = repo . METHOD_3 ( ) ) ( VAR_4 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_4 ( ) ) ) ( commands = new TYPE_1 ( repo ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String VAR_2 ) ) ( try ) ( end-try ) ( java.lang.String VAR_3 = java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ) ( byte [ ] VAR_4 = VAR_3 . METHOD_2 ( STRING_2 ) ) ( java.lang.String VAR_5 = TYPE_1 . METHOD_3 ( VAR_4 ) ) ( return VAR_6 . METHOD_4 ( VAR_5 ) ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( throw new TYPE_3 ( e ) ) ( catch (TYPE_4 e) ) ( throw new TYPE_3 ( e ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 < ? > c ) ) ( java.lang.String n = c . getName ( ) ) ( n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) ( while ( n . METHOD_4 ( STRING_1 ) ) ) ( endwhile ) ( n = n . METHOD_2 ( 1 ) ) ( return TYPE_2 . METHOD_5 ( n ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . ReviewDb c ) ) ( final TYPE_1 . Project p ) ( p = new TYPE_1 . Project ( VAR_1 , VAR_2 ) ) ( p . METHOD_2 ( STRING_1 ) ) ( p . METHOD_3 ( false ) ) ( c . projects ( ) . insert ( java.util.Collections.singleton ( p ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( table = new TYPE_1 ( VAR_1 ) { protected void METHOD_2 ( ) { super . METHOD_2 ( ) ; } public void METHOD_3 ( ) { super . METHOD_3 ( ) ; display ( ) ; } } ) ( super . METHOD_1 ( ) ) ( java.lang.String VAR_2 = table . METHOD_4 ( ) ) ( if ( VAR_2 != null ) ) ( METHOD_5 ( VAR_2 ) ) ( METHOD_6 ( VAR_2 ) ) ( endif ) ( add ( table ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( TYPE_3 ... VAR_1 ) ) ( return TYPE_4 . METHOD_2 ( TYPE_5 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( new TYPE_6 < TYPE_3 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_3 in ) { return VAR_2 ; } } ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . HttpServletResponse res , TYPE_2 VAR_1 ) ) ( byte [ ] VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ) ( res . METHOD_3 ( VAR_3 ) ) ( res . METHOD_4 ( STRING_1 ) ) ( res . METHOD_5 ( STRING_2 ) ) ( res . METHOD_6 ( VAR_2 . length ) ) ( TYPE_4 out = res . METHOD_7 ( ) ) ( try ) ( end-try ) ( out . METHOD_8 ( VAR_2 ) ) ( finally ) ( out . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 . PatchSet patchSet ) ) ( TYPE_1 p = new TYPE_1 ( ) ) ( p . revision = patchSet . getRevision ( ) . get ( ) ) ( VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ) ( return p ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 schema = METHOD_2 ( ) ) ( METHOD_3 ( schema . METHOD_4 ( ) ) ) ( assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ) ( assertEquals ( 2 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 ) ) ( final TYPE_2 ctx = VAR_2 . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_3 VAR_3 = new TYPE_4 ( ) . add ( VAR_1 ) ) ( try ) ( end-try ) ( ctx . METHOD_3 ( VAR_3 ) ) ( return true ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( return false ; ) ( finally ) ( try ) ( end-try ) ( ctx . close ( ) ) ( end-catch ) ( catch (TYPE_5 e) ) ( VAR_4 . METHOD_4 ( STRING_1 , e ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( java.lang.String base ) ) ( try ) ( end-try ) ( return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_4 ( ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 p ) ) ( java.lang.String url ) ( switch ( p ) ) ( end-switch ) ( case VAR_1 : ) ( url = VAR_2 ) ( break ; ) ( case VAR_3 : ) ( url = admin . METHOD_2 ( server ) ) ( break ; ) ( default : ) ( throw new TYPE_2 ( ( STRING_1 + p ) ) ) ( METHOD_3 ( TYPE_3 . METHOD_4 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void close( ) ) ( VAR_1 = null ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_1 ( ) ) ( VAR_2 = null ) ( endif ) ( if ( ( VAR_3 ) != null ) ) ( VAR_3 . METHOD_1 ( ) ) ( VAR_3 = null ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . isEqualTo ( VAR_2 ) ) ( VAR_1 . METHOD_3 ( ) ) ( TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ) ( TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_6 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , TYPE_1 id , java.lang.String ref ) ) ( TYPE_2 . ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ) ( TYPE_3 . METHOD_1 ( cfg , VAR_1 , id , ref ) ) ( METHOD_4 ( project , cfg ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_1 c , final TYPE_2 . ReviewDb db ) ) ( if ( ! ( c . METHOD_2 ( db ) ) ) ) ( throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ) ( endif ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result r = METHOD_2 ( ) ) ( TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( query ( r . getChangeId ( ) ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_4 < ? > ) ( VAR_2 ) ) ) . METHOD_4 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 ) ) ( TYPE_4 VAR_4 = METHOD_2 ( VAR_1 , VAR_3 ) ) ( TYPE_5 VAR_5 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) ( METHOD_6 ( db , VAR_2 , VAR_4 , VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_2 . Result r = METHOD_2 ( STRING_1 ) ) ( r . METHOD_3 ( ) ) ( TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_4 ( ) , VAR_3 , STRING_2 , STRING_3 , r . getChangeId ( ) ) ) ( r = VAR_1 . to ( git , ( STRING_4 + ( r . getChange ( ) . change ( ) . getId ( ) . get ( ) ) ) ) ) ( r . METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<java.lang.String> METHOD_1( java.lang.String VAR_1 ) ) ( java.util.Map < java.lang.String , TYPE_1 > VAR_2 ) ( try ) ( end-try ) ( TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 ) . METHOD_3 ( ) ) ( VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( return VAR_2 . METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( final TYPE_1 cm = VAR_1 . create ( result . change ) ) ( cm . METHOD_1 ( VAR_2 . getAccountId ( ) ) ) ( cm . METHOD_2 ( result . patchSet , result . info ) ) ( cm . METHOD_3 ( ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 = VAR_4 . getId ( ) ) ( VAR_5 . error ( ( STRING_1 + VAR_3 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( java.lang.String VAR_1 ) ) ( TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ) ( if ( VAR_2 == null ) ) ( return null ; ) ( endif ) ( VAR_2 = METHOD_2 ( VAR_2 ) ) ( if ( VAR_2 . METHOD_3 ( ) ) ) ( VAR_3 . METHOD_4 ( VAR_1 ) ) ( return null ; ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 cfg , java.lang.String VAR_1 ) ) ( java.lang.String VAR_2 = cfg . METHOD_2 ( VAR_3 , null , VAR_4 ) ) ( if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ) ( VAR_2 = VAR_5 ) ( endif ) ( VAR_2 = VAR_2 . METHOD_4 ( STRING_1 , VAR_1 ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account account ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ) ( TYPE_3 VAR_5 = VAR_6 . get ( ) ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) ) ( VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ) ( TYPE_4 VAR_7 = new TYPE_4 ( account . getId ( ) ) ) ( VAR_7 . METHOD_5 ( VAR_1 ) ) ( VAR_7 . METHOD_6 ( account ) ) ( VAR_7 . commit ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_1 = repo ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ( METHOD_4 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) ( VAR_2 . METHOD_5 ( VAR_1 ) ) ( METHOD_6 ( VAR_3 , project , STRING_6 ) ) ( TYPE_1 . Result r = METHOD_4 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ) ( r . METHOD_7 ( ) ) ( r . METHOD_8 ( VAR_4 , null , admin ) ) ( r . METHOD_9 ( TYPE_2 . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,java.lang.String> METHOD_1( java.lang.String VAR_1 , java.lang.String url ) ) ( if ( url != null ) ) ( return TYPE_1 . of ( STRING_1 , VAR_1 , STRING_2 , url ) ; ) ( endif ) ( return TYPE_1 . of ( STRING_1 , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 r , int VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) ) ( r . METHOD_2 ( VAR_1 ) ) ( TYPE_4 VAR_3 = new TYPE_4 ( r . METHOD_3 ( ) ) ) ( VAR_3 . METHOD_4 ( true ) ) ( return METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String id ) ) ( try ) ( end-try ) ( TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) ( TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ) ( VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|java.io.IOException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . get ( STRING_1 ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ) ( java.util.List < TYPE_2 > result = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_2 > > ( ) { } . METHOD_6 ( ) ) ) ( org.junit.Assert . METHOD_7 ( result . isEmpty ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<org.eclipse.jgit.lib.ObjectId,TYPE_1> METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = new TYPE_2 < org.eclipse.jgit.lib.ObjectId , TYPE_1 > ( ) ) ( for (TYPE_1 r : repo . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . values ( )) ) ( endfor ) ( if ( TYPE_3 . METHOD_4 ( r . getName ( ) ) ) ) ( VAR_1 . put ( r . METHOD_5 ( ) , r ) ) ( endif ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , TYPE_2 . METHOD_2 ( STRING_3 ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 cm ) ) ( if ( ! ( TYPE_3 . METHOD_2 ( ) ) ) ) ( return METHOD_3 ( cm ) ; ) ( endif ) ( return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_6 ( cm ) ; } } } ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 rsrc ) ) ( TYPE_4 ctl = rsrc . METHOD_1 ( ) ) ( com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . METHOD_2 ( db . get ( ) , rsrc . METHOD_3 ( ) ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = ctl . getProject ( ) . METHOD_4 ( ) ) ( return VAR_2 . apply ( project , ps . getRevision ( ) . get ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 c ) ) ( TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) , STRING_1 , c ) ) ( TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_2 + STRING_3 ) , METHOD_5 ( ) . getAccountId ( ) , c ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = VAR_2 . get ( ) ) ( if ( VAR_1 != null ) ) ( VAR_1 . close ( ) ) ( endif ) ( for (TYPE_1 VAR_3 : VAR_4) ) ( endfor ) ( if ( VAR_3 != VAR_1 ) ) ( VAR_1 . close ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( VAR_1 ) ) ( return new TYPE_2 ( ) ; ) ( endif ) ( TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ) ( switch ( VAR_2 ) ) ( end-switch ) ( case VAR_4 : ) ( return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; ) ( default : ) ( throw new TYPE_6 ( ( STRING_1 + VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.PatchSetApproval METHOD_1( TYPE_1 ctl , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ) ( TYPE_2 id = TYPE_3 . METHOD_2 ( ctl . METHOD_3 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) ) ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_3 = new com.google.gerrit.reviewdb.client . PatchSetApproval ( new TYPE_4 . Key ( VAR_1 , VAR_2 , id ) , ( ( short ) ( 0 ) ) , TYPE_5 . METHOD_5 ( ) ) ) ( VAR_3 . METHOD_6 ( ctl . getChange ( ) ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( void set( java.lang.String branch , org.eclipse.jgit.lib.ObjectId id ) ) ( final TYPE_1 u = VAR_1 . METHOD_1 ( ( ( VAR_2 ) + branch ) ) ) ( u . METHOD_2 ( true ) ) ( u . METHOD_3 ( id ) ) ( switch ( u . update ( ) ) ) ( end-switch ) ( case VAR_3 : ) ( case VAR_4 : ) ( case VAR_5 : ) ( break ; ) ( default : ) ( METHOD_4 ( ( ( ( STRING_1 + branch ) + STRING_2 ) + ( u . METHOD_5 ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String path , java.lang.String VAR_1 , int VAR_2 ) ) ( TYPE_2 req = TYPE_2 . METHOD_2 ( ) ) ( req . METHOD_3 ( path ) ) ( if ( VAR_1 != null ) ) ( req . METHOD_4 ( VAR_1 ) ) ( endif ) ( TYPE_1 res = new TYPE_1 ( ) ) ( servlet . METHOD_5 ( req , res ) ) ( org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) ) ( return res ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 ) ) ( java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ) ( TYPE_1 . METHOD_2 ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_4 ( TYPE_6 VAR_4 ) { } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 w , java.lang.String id ) ) ( java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ) ( VAR_1 . append ( STRING_1 ) ) ( VAR_1 . append ( STRING_2 ) ) ( VAR_1 . append ( id ) ) ( VAR_1 . append ( STRING_3 ) ) ( VAR_1 . append ( STRING_4 ) ) ( VAR_1 . append ( STRING_5 ) ) ( VAR_1 . append ( STRING_6 ) ) ( w . METHOD_2 ( ) . METHOD_3 ( STRING_7 , VAR_1 . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 r , final TYPE_2 VAR_1 ) ) ( for (final TYPE_3 VAR_2 : TYPE_4 . METHOD_2 ( ) . METHOD_3 ( )) ) ( endfor ) ( if ( r . METHOD_4 ( VAR_2 . METHOD_5 ( ) . getId ( ) ) ) ) ( METHOD_6 ( r , VAR_1 , VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 rsrc ) ) ( com.google.gerrit.reviewdb.client.Change change = rsrc . getChange ( ) ) ( return new TYPE_3 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ( ( ( ! ( change . METHOD_5 ( ) ) ) && ( ( change . getStatus ( ) ) != ( VAR_1 ) ) ) && ( METHOD_6 ( rsrc ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 update ) ) ( java.lang.String msg = message . getMessage ( ) ) ( if ( TYPE_2 . METHOD_2 ( msg ) . METHOD_3 ( ) ) ) ( update . METHOD_1 ( VAR_1 ) ) ( VAR_2 . METHOD_1 ( VAR_1 ) ) ( return ; ) ( endif ) ( if ( TYPE_3 . METHOD_2 ( msg ) . METHOD_3 ( ) ) ) ( update . METHOD_1 ( VAR_3 ) ) ( VAR_2 . METHOD_1 ( VAR_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String query , int VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) ) ( TYPE_3 VAR_4 = TYPE_2 . METHOD_2 ( query ) ) ( if ( VAR_1 > 0 ) ) ( VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ) ( endif ) ( TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ) ( if ( ! ( TYPE_4 . equals ( VAR_2 ) ) ) ) ( VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ) ( endif ) ( VAR_4 . METHOD_5 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> METHOD_1( TYPE_1 n ) ) ( try ) ( end-try ) ( return VAR_1 . METHOD_2 ( db . get ( ) , VAR_2 ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) ) ( return java.util.Collections . METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String VAR_1 , java.lang.String url , java.lang.String VAR_2 ) ) ( if ( ( url == null ) || ( ! ( url . contains ( VAR_1 ) ) ) ) ) ( return url ; ) ( endif ) ( return url . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 rsrc ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = rsrc . METHOD_1 ( ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc . METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) ) ( return VAR_1 . apply ( project , commit . getId ( ) . getName ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_2 u = METHOD_2 ( ) ) ( if ( u instanceof TYPE_3 ) ) ( return TYPE_4 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; ) ( endif ) ( if ( u instanceof TYPE_5 ) ) ( return VAR_2 ; ) ( endif ) ( throw new TYPE_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < TYPE_2 > e ) ) ( VAR_1 . METHOD_2 ( e . getValue ( ) ) ) ( view . METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ) ( view . METHOD_3 ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ) ( METHOD_5 ( VAR_4 ) ) ( TYPE_3 a ) ( TYPE_4 config ) ( TYPE_5 to ) ( TYPE_6 VAR_5 ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = repo . commit ( ) . create ( ) ) ( repo . METHOD_2 ( 1 ) ) ( TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , commit ) ) ( org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_4 ( commit ) ) ) ( org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_4 ( VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ( VAR_2 . info ( STRING_1 , VAR_1 ) ) ( endif ) ( if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ( METHOD_5 ( VAR_1 ) ) ( VAR_2 . info ( STRING_2 , VAR_1 ) ) ( endif ) ( VAR_2 . METHOD_6 ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( index = new TYPE_1 ( VAR_1 ) ) ( VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . METHOD_2 ( index ) ) ( VAR_3 = new TYPE_3 ( VAR_2 ) ) ( VAR_4 = new TYPE_4 ( VAR_2 , TYPE_5 . create ( 0 , 0 , INT_1 , INT_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( TYPE_2 args , java.lang.String label , int VAR_1 ) ) ( if ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) ) ( return new TYPE_3 ( args , label , VAR_1 , null ) ; ) ( endif ) ( java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( ) ) ( for (com.google.gerrit.reviewdb.client.Account.Id a : VAR_2) ) ( endfor ) ( r . add ( new TYPE_3 ( args , label , VAR_1 , a ) ) ) ( return METHOD_2 ( r ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ) ( int e = VAR_1 . METHOD_4 ( CHAR_1 ) ) ( TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) ) ( return TYPE_1 . create ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( boolean VAR_1 ) ) ( TYPE_2 r = VAR_2 . get ( ( VAR_1 ? METHOD_2 ( ) : METHOD_3 ( ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) ) ( return METHOD_5 ( ) . METHOD_6 ( r . METHOD_7 ( ) , VAR_4 class ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = new TYPE_1 ( 1 ) ) ( assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ) ( final TYPE_1 VAR_2 = new TYPE_1 ( 0 ) ) ( VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ) ( assertEquals ( VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ) ( TYPE_1 out = new TYPE_1 ( ) ) ( TYPE_2 VAR_3 = new TYPE_2 ( out ) ) ( VAR_3 . METHOD_2 ( repo ) ) ( VAR_3 . format ( VAR_1 , VAR_2 ) ) ( VAR_3 . METHOD_3 ( ) ) ( return out . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo info ) ) ( java.lang.String name = ( ( info . METHOD_2 ( ) . name ( ) ) != null ) ? info . METHOD_2 ( ) . name ( ) : TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ( VAR_1 . METHOD_5 ( name ) ) ( VAR_1 . METHOD_6 ( name ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.util.Set < TYPE_1 > VAR_1 ) ) ( if ( ( VAR_1 . size ( ) ) <= 0 ) ) ( return STRING_1 ; ) ( endif ) ( java.lang.StringBuilder out = new java.lang.StringBuilder ( ) ) ( for (TYPE_1 VAR_2 : VAR_1) ) ( endfor ) ( if ( ( out . length ( ) ) > 0 ) ) ( out . append ( STRING_2 ) ) ( endif ) ( out . append ( VAR_2 . getValue ( ) ) ) ( return ( STRING_3 + STRING_4 ) + ( out . toString ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_5 ( VAR_3 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result change = METHOD_2 ( git ) ) ( submit ( change . getChangeId ( ) ) ) ( METHOD_3 ( git , false ) ) ( com.google.common.truth.Truth.assertThat ( METHOD_4 ( ) . METHOD_5 ( 0 ) ) . isEqualTo ( change . METHOD_6 ( ) . METHOD_5 ( 0 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 . Change change , TYPE_3 user ) ) ( final TYPE_5 . NameKey VAR_1 = change . getProject ( ) ) ( try ) ( end-try ) ( return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; ) ( end-catch ) ( catch (TYPE_6 e) ) ( throw new TYPE_4 ( change.getId ( ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( final java.lang.String VAR_2 = STRING_2 ) ( final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ) ( assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) ) ( assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void submit( int id , java.lang.String commit , TYPE_1 < TYPE_2 > VAR_1 ) ) ( TYPE_3 in = TYPE_3 . create ( ) ) ( in . METHOD_1 ( true ) ) ( TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . data ( in ) . METHOD_3 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void set( com.google.gerrit.reviewdb.client.PatchSet.Id base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , boolean VAR_6 ) ) ( this . base = base ) ( this . VAR_1 = VAR_1 ) ( this . VAR_2 = VAR_2 ) ( this . VAR_3 = VAR_3 ) ( this . VAR_4 = VAR_4 ) ( this . VAR_5 = VAR_5 ) ( this . VAR_6 = VAR_6 ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) ) ( TYPE_3 in = TYPE_3 . create ( ) ) ( in . METHOD_2 ( path ) ) ( in . METHOD_3 ( VAR_1 ) ) ( TYPE_4 . edit ( id ) . METHOD_4 ( in , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( ) ) ( METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_8 ( STRING_1 , VAR_2 ) . METHOD_9 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( TYPE_3 args ) ) ( TYPE_5 user = args . METHOD_2 ( ) ) ( if ( user . METHOD_3 ( ) ) ) ( return VAR_1 . get ( args . METHOD_2 ( ) . getAccountId ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) ; ) ( endif ) ( return VAR_2 . Collections < TYPE_2 > METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( Account.Id METHOD_1( final java.lang.String VAR_1 ) ) ( final TYPE_3 . Account a = VAR_2 . METHOD_2 ( VAR_1 ) ) ( if ( a == null ) ) ( throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ) ( endif ) ( return a . getId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) ) ( org.junit.Assert.assertEquals ( VAR_1 . ref , VAR_2 . ref ) ) ( if ( ( VAR_1 . revision ) != null ) ) ( org.junit.Assert.assertEquals ( VAR_1 . revision , VAR_2 . revision ) ) ( endif ) ( org.junit.Assert.assertEquals ( VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_3 . Result r = METHOD_2 ( ) ) ( VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_3 ( ) ) ( VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_1 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( isEmpty ( ) ) ) ( return ; ) ( endif ) ( try ) ( end-try ) ( METHOD_2 ( ) ) ( if ( ! ( VAR_1 . isEmpty ( ) ) ) ) ( METHOD_3 ( ) ) ( endif ) ( METHOD_4 ( ) ) ( TYPE_1 . METHOD_1 ( VAR_2 ) ) ( TYPE_1 . METHOD_1 ( VAR_3 ) ) ( finally ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . close ( ) ) ( endif ) ( if ( ( VAR_3 ) != null ) ) ( VAR_3 . close ( ) ) ( endif ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 git , TYPE_2 VAR_1 ) ) ( TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ) ( return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> METHOD_1( com.google.gerrit.server.query.change.ChangeData cd ) ) ( TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . patchSets ( ) ) ( TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = TYPE_4 . METHOD_2 ( ) ) ( for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) ) ( endfor ) ( result . put ( ps . getId ( ) . get ( ) , ps ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ) ( METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ) ( METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( ) ) ( if ( VAR_3 . METHOD_2 ( ) ) ) ( TYPE_3 VAR_4 = new TYPE_3 ( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_5 = METHOD_3 ( VAR_4 ) ) ( if ( VAR_5 != null ) ) ( if ( VAR_4 . get ( ) ) ) ( VAR_1 . METHOD_4 ( getRefName ( ) ) ) ( endif ) ( VAR_2 . METHOD_5 ( VAR_5 ) ) ( VAR_1 . METHOD_6 ( VAR_2 ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) ) ( final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ) ( r . append ( VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) ) ( if ( VAR_1 . METHOD_4 ( ) ) ) ( r . append ( STRING_1 ) ) ( r . append ( METHOD_5 ( ) ) ) ( r . append ( STRING_2 ) ) ( endif ) ( return r . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( com.google.gerrit.reviewdb.client.Change change = TYPE_2 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ) ( TYPE_3 . METHOD_2 ( change , STRING_1 , changeId ) ) ( TYPE_3 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ) ( return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . append ( ( ( java.lang.StringBuilder ) ( null ) ) ) ) ) ( assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) ( METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_2 ) ) ) ) ( METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_3 ) ) ) ) ( assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 c = null ) ( try ) ( end-try ) ( c = METHOD_2 ( ) ) ( TYPE_2 s = VAR_1 . METHOD_3 ( ) ) ( try ) ( end-try ) ( s . METHOD_4 ( STRING_1 ) ) ( finally ) ( s . close ( ) ) ( end-finally ) ( VAR_2 = METHOD_5 ( ) ) ( finally ) ( METHOD_7 ( c ) ) ( end-finally ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_3 . METHOD_6 ( ( STRING_2 + ( url ) ) , e ) ) ( c = close ( c ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String [ ] VAR_1 ) ) ( final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( ) ) ( if ( VAR_2 == null ) ) ( VAR_3 . METHOD_3 ( STRING_1 ) ) ( TYPE_2 . METHOD_4 ( 1 ) ) ( endif ) ( VAR_4 . METHOD_3 ( ( STRING_2 + VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ) ( java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , TYPE_3 . METHOD_4 ( ) ) ) ( java.util.Set < java.lang.String > VAR_1 = TYPE_4 . of ( ( STRING_1 + ( VAR_2 ) ) ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_5 . METHOD_5 ( m ) ) . METHOD_6 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( boolean add( final TYPE_1 VAR_1 ) ) ( synchronized ( this ) ) ( if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) ) ( if ( VAR_4 . isEmpty ( ) ) ) ( TYPE_2 . METHOD_1 ( ) . METHOD_2 ( this ) ) ( endif ) ( VAR_4 . add ( VAR_1 ) ) ( return true ; ) ( endif ) ( return false ; ) ( end-synchronized ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final boolean on ) ) ( VAR_1 = on ) ( if ( VAR_1 ) ) ( final TYPE_1 p = getValue ( ) . METHOD_2 ( ) ) ( VAR_2 . METHOD_3 ( p . METHOD_4 ( ) ) ) ( endif ) ( VAR_2 . METHOD_3 ( false ) ) ( METHOD_5 ( update . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( STRING_4 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ) ( assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 , VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_6 ( VAR_12 ) . METHOD_6 ( VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , TYPE_1 req ) ) ( TYPE_2 res = new TYPE_2 ( ) ) ( servlet . METHOD_2 ( req , res ) ) ( org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) ) ( org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_1 ) ) ( VAR_2 . METHOD_3 ( VAR_3 , null , VAR_4 , VAR_5 ) ) ( com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 t ) ) ( try ) ( end-try ) ( VAR_1 [ ( ++ ( VAR_2 ) ) ] = t ) ( end-catch ) ( catch (TYPE_2 e) ) ( int VAR_3 = VAR_1 . length ) ( TYPE_1 [ ] VAR_4 = new TYPE_1 [ VAR_3 + INT_1 ] ) ( TYPE_3 . METHOD_2 ( VAR_1 , 0 , VAR_4 , 0 , VAR_3 ) ) ( VAR_1 = VAR_4 ) ( VAR_1 [ VAR_2 ] = t ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ) ( if ( c != null ) ) ( return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( java.util.Collections . METHOD_2 ( VAR_2 . create ( VAR_1 . get ( ) , c ) ) ) ; ) ( endif ) ( return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( VAR_3 . Collections < com.google.gerrit.server.query.change.ChangeData > METHOD_3 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( TYPE_3 VAR_1 ) ) ( TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ) ( if ( VAR_2 == null ) ) ( VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ) ( endif ) ( TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_5 . getName ( ) ) . METHOD_3 ( ) ) ) ( return VAR_4 . get ( ) . METHOD_4 ( VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( final com.google.gerrit.reviewdb.client.Change change = VAR_1 . change ( VAR_2 ) ) ( if ( change == null ) ) ( return false ; ) ( endif ) ( final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , change . METHOD_2 ( ) ) ) ( return VAR_3 . METHOD_3 ( ) . contains ( VAR_5 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( java.lang.String topic ) ) ( TYPE_3 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) ( com.google.common.truth.Truth.assertThat ( topic ) . METHOD_3 ( ) ) ( return VAR_1 . to ( git , ( STRING_1 + topic ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_1 VAR_2 = VAR_3 . create ( project ) ) ( try ) ( end-try ) ( TYPE_2 r = new TYPE_2 ( ) ) ( r . METHOD_2 ( VAR_2 ) ) ( VAR_4 = VAR_1 ) ( r . commit ( VAR_2 ) ) ( finally ) ( VAR_2 . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) ) ( this . rw = walk ) ( this . VAR_1 = walk . METHOD_2 ( ) ) ( try ) ( end-try ) ( revision = ( id != null ) ? walk . parseCommit ( id ) : null ) ( METHOD_3 ( ) ) ( finally ) ( walk = null ) ( VAR_1 = null ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( final com.google.gerrit.reviewdb.server.ReviewDb db ) ( try ) ( end-try ) ( db = VAR_1 . METHOD_1 ( ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( e . METHOD_2 ( ) ) ( return ; ) ( try ) ( end-try ) ( for ( ; ) ) (  ;  ) ( endfor ) ( final TYPE_1 VAR_2 = METHOD_3 ( ) ) ( if ( VAR_2 == null ) ) ( break ; ) ( endif ) ( METHOD_4 ( db , VAR_2 ) ) ( synchronized ( VAR_3 ) ) ( VAR_3 . update ( 1 ) ) ( end-synchronized ) ( finally ) ( db . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<java.lang.String> METHOD_1( TYPE_1 . ProjectConfig config ) ) ( java.util.Set < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ) ( for (TYPE_3 VAR_2 : config . METHOD_2 ( )) ) ( endfor ) ( VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 VAR_1 ) ) ( final TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ) ( try ) ( end-try ) ( TYPE_5 in = new TYPE_6 ( VAR_2 ) ) ( try ) ( end-try ) ( in = TYPE_7 . METHOD_3 ( in ) ) ( return new TYPE_1 ( in ) ; ) ( finally ) ( in . close ( ) ) ( end-finally ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_3 ( e ) ) ( catch (TYPE_8 e) ) ( throw new TYPE_3 ( e ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( java.util.List < java.lang.String > add ) ) ( TYPE_3 in = new TYPE_3 ( ) ) ( in . add = add ) ( try ) ( end-try ) ( return VAR_1 . apply ( account , in ) ; ) ( end-catch ) ( catch (TYPE_4|com.google.gwtorm.server.OrmException|java.io.IOException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( ! ( VAR_1 . isEmpty ( ) ) ) && ( ! ( METHOD_2 ( ) ) ) ) ) ( for (TYPE_1 < java.lang.String , TYPE_2 > VAR_2 : VAR_1 . METHOD_3 ( )) ) ( endfor ) ( VAR_2 . getValue ( ) . METHOD_4 ( projectName . get ( ) , VAR_2 . getKey ( ) , VAR_3 , VAR_4 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( VAR_5 ) ) ( TYPE_2 p = new TYPE_2 ( ) ) ( TYPE_3 . METHOD_4 ( VAR_1 , p ) ) ( if ( ( p . value ) >= ( VAR_1 . length ) ) ) ( VAR_6 = null ) ( return ; ) ( endif ) ( VAR_6 = TYPE_4 . METHOD_5 ( METHOD_1 ( VAR_1 , p . value ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Change update( TYPE_1 . Change c ) ) ( c . METHOD_1 ( VAR_1 ) ) ( c . METHOD_2 ( true ) ) ( if ( ! ( VAR_2 . equals ( c . currentPatchSetId ( ) ) ) ) ) ( try ) ( end-try ) ( c . METHOD_3 ( VAR_3 . get ( VAR_2 ) ) ) ( end-catch ) ( catch (TYPE_2 VAR_4) ) ( VAR_5 . error ( ( STRING_1 + VAR_2 ) , VAR_4 ) ) ( endif ) ( TYPE_3 . METHOD_4 ( c ) ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( return METHOD_2 ( VAR_1 ) ; ) ( endif ) ( switch ( status . getStatus ( ) ) ) ( end-switch ) ( case VAR_2 : ) ( return STRING_1 ; ) ( case VAR_3 : ) ( return STRING_2 ; ) ( default : ) ( return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < TYPE_3 > VAR_1 ) ) ( TYPE_1 VAR_2 = null ) ( for (TYPE_3 u : VAR_1) ) ( endfor ) ( if ( VAR_2 == null ) ) ( VAR_2 = VAR_3 ) ( endif ) ( if ( ( VAR_3 ) != VAR_2 ) ) ( throw new TYPE_4 ( STRING_1 ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( if ( ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) || ( METHOD_4 ( db ) ) ) ) ( return false ; ) ( endif ) ( if ( METHOD_5 ( ) ) ) ( return true ; ) ( endif ) ( return METHOD_6 ( ) . METHOD_1 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_3<TYPE_1,TYPE_2> METHOD_1( java.lang.String name , TYPE_4 VAR_1 , TYPE_5 < TYPE_1 > VAR_2 , TYPE_5 < TYPE_2 > VAR_3 ) ) ( TYPE_6 . METHOD_2 ( VAR_1 ) ) ( TYPE_7 m = new TYPE_7 ( this , name , VAR_1 , VAR_2 , VAR_3 ) ) ( METHOD_3 ( name , VAR_1 ) ) ( VAR_4 . put ( name , m ) ) ( return m . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( for (final TYPE_2 VAR_1 : VAR_2) ) ( endfor ) ( if ( ! ( VAR_1 instanceof TYPE_1 ) ) ) ( continue ; ) ( endif ) ( TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ) ( if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( continue ; ) ( endif ) ( return VAR_3 ; ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 . Change change ) ) ( try ) ( end-try ) ( final TYPE_4 . NameKey VAR_1 = change . METHOD_2 ( ) . getParentKey ( ) ) ( return VAR_2 . METHOD_3 ( VAR_1 ) . METHOD_1 ( change ) ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw new TYPE_3 ( change.getId ( ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 out ) ) ( out . METHOD_2 ( TYPE_2 . METHOD_3 ( commit ) . METHOD_4 ( VAR_1 ) ) ) ( TYPE_3 VAR_2 = new TYPE_3 ( out ) ) ( VAR_2 . METHOD_5 ( repo ) ) ( VAR_2 . format ( base . METHOD_6 ( ) , commit . METHOD_6 ( ) ) ) ( VAR_2 . METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( METHOD_2 ( ) ) ) ( return VAR_1 ; ) ( endif ) ( if ( ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ) ) ( return VAR_2 ; ) ( endif ) ( if ( VAR_3 . get ( ) ) ) ( return VAR_4 ; ) ( endif ) ( final long VAR_5 = METHOD_5 ( VAR_6 ) ) ( if ( VAR_5 <= 0 ) ) ( return VAR_7 ; ) ( endif ) ( if ( 0 < VAR_5 ) ) ( return VAR_8 ; ) ( endif ) ( return VAR_9 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ) ( VAR_2 = TYPE_3 . METHOD_4 ( ) ) ( if ( TYPE_4 . info ( ) . auth ( ) . METHOD_5 ( ) ) ) ( VAR_3 . METHOD_6 ( VAR_2 ) ) ( VAR_1 . add ( TYPE_2 . METHOD_7 ( ) , VAR_2 ) ) ( endif ) ( VAR_4 = TYPE_3 . METHOD_4 ( ) ) ( VAR_3 . METHOD_6 ( VAR_4 ) ) ( VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 change , java.lang.String id ) ) ( com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . get ( ) . patchSets ( ) . get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getChange ( ) . getId ( ) , TYPE_3 . METHOD_2 ( id ) ) ) ) ( if ( ps != null ) ) ( return java.util.Collections . METHOD_3 ( new TYPE_1 ( change , ps ) ) ; ) ( endif ) ( return java.util.Collections . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<com.google.gerrit.reviewdb.client.Account> METHOD_1( final TYPE_1 VAR_1 , final com.google.gerrit.reviewdb.client.Project.NameKey project , final java.util.Set < TYPE_1 > VAR_2 ) ) ( if ( TYPE_4 . equals ( VAR_1 ) ) ) ( return METHOD_2 ( project , VAR_2 ) ; ) ( endif ) ( com.google.gerrit.reviewdb.client . AccountGroup group = VAR_3 . get ( VAR_1 ) ) ( if ( group != null ) ) ( return METHOD_3 ( group , project , VAR_2 ) ; ) ( endif ) ( return java.util.Collections . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( java.lang.String VAR_1 , boolean VAR_2 ) ) ( TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 class ) ) ( return METHOD_1 ( VAR_1 , VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , VAR_7 , STRING_1 ) , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( final TYPE_3 notes , final com.google.gerrit.reviewdb.client.PatchSet patchSet ) ) ( return TYPE_4 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_3 ( notes . METHOD_4 ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_5 ( VAR_2 , notes , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_5 . METHOD_6 ( e ) ; } } } ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String projectName = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ) ( java.lang.String revision = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ) ( java.lang.String path = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ) ( VAR_1 . METHOD_4 ( new TYPE_3 ( projectName , revision , path ) ) ) ( VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2>.TYPE_3 METHOD_1( TYPE_4 . Key < TYPE_2 > VAR_1 , TYPE_5 < TYPE_2 > VAR_2 ) ) ( TYPE_6 < TYPE_2 > n = new TYPE_6 < TYPE_2 > ( VAR_2 , VAR_3 ) ) ( if ( ref . METHOD_2 ( VAR_4 , n ) ) ) ( return new TYPE_3 ( VAR_1 , n , VAR_5 ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String token ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_1 ( token , changes ) ) ( end-catch ) ( catch (TYPE_1 e) ) ( throw new TYPE_2 ( e . getMessage ( ) , e ) ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( TYPE_2 rsrc ) ) ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ) ( for (TYPE_1 c : db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . getAccountId ( ) )) ) ( endfor ) ( VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_3<TYPE_1,TYPE_2> core( final TYPE_4 < TYPE_5 < TYPE_1 , TYPE_2 > > type , final java.lang.String name ) ) ( return core ( TYPE_6 . get ( type , TYPE_7 . METHOD_1 ( name ) ) ) . name ( name ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.AccountGroup METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb c , java.lang.String name , TYPE_1 VAR_1 ) ) ( if ( VAR_1 == null ) ) ( VAR_1 = TYPE_2 . METHOD_2 ( name , VAR_2 ) ) ( endif ) ( return new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_3 . NameKey ( name ) , new TYPE_3 . Id ( c . METHOD_3 ( ) ) , VAR_1 , TYPE_4 . METHOD_4 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 notes , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 ) ) ( if ( METHOD_2 ( notes , VAR_1 , VAR_2 . getAccountId ( ) , VAR_2 . getValue ( ) ) ) ) ( return ; ) ( endif ) ( VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( void display( final TYPE_1 . Account account ) ) ( info . METHOD_1 ( 0 , VAR_1 , account . METHOD_2 ( ) ) ) ( info . METHOD_1 ( 1 , VAR_1 , account . METHOD_3 ( ) ) ) ( info . METHOD_1 ( 2 , VAR_1 , account . METHOD_4 ( ) ) ) ( info . METHOD_1 ( INT_1 , VAR_1 , TYPE_2 . METHOD_5 ( account . METHOD_6 ( ) ) ) ) ( info . METHOD_1 ( INT_2 , VAR_1 , account . getId ( ) . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_1 . METHOD_1 ( ) ) ( end-try ) ( for ( ; ) ) (  ;  ) ( endfor ) ( final TYPE_1 VAR_2 = METHOD_2 ( ) ) ( if ( VAR_2 == null ) ) ( break ; ) ( endif ) ( METHOD_3 ( db , VAR_2 ) ) ( synchronized ( VAR_3 ) ) ( VAR_3 . update ( 1 ) ) ( end-synchronized ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( e . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( notes . METHOD_2 ( ) ) ) ( org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( end-try ) ( return VAR_3 . METHOD_3 ( VAR_2 , notes , patchSet ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw TYPE_2 . METHOD_4 ( e ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( ( VAR_1 . length ( ) ) == 0 ) ) ( return false ; ) ( endif ) ( if ( VAR_2 . isEmpty ( ) ) ) ( return false ; ) ( endif ) ( if ( ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_3 . contains ( VAR_4 ) ) ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 ctx ) ) ( com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) . get ( ) ) ( com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( id ) ) ( VAR_1 . create ( VAR_2 , VAR_3 ) . index ( db , c ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( STRING_1 , VAR_1 ) ) ( com.google.common.truth.Truth.assertThat ( res ) . METHOD_3 ( 1 ) ) ( com.google.common.truth.Truth.assertThat ( res ) . METHOD_4 ( STRING_2 ) ) ( TYPE_1 d = res . get ( STRING_2 ) ) ( com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo info ) ) ( if ( ( info . status ( ) ) == ( VAR_1 ) ) ) ( TYPE_2 < TYPE_3 > VAR_2 = ( info . METHOD_2 ( ) ) ? info . METHOD_3 ( ) : VAR_3 < TYPE_3 > create ( ) ) ( VAR_2 . METHOD_4 ( STRING_1 ) ) ( if ( VAR_2 . METHOD_5 ( STRING_2 ) ) ) ( VAR_4 . METHOD_6 ( true ) ) ( VAR_4 . METHOD_7 ( VAR_2 . get ( STRING_2 ) . METHOD_8 ( ) ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ) ( for (TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( )) ) ( endfor ) ( VAR_1 . add ( label . getName ( ) ) ) ( assertEquals ( TYPE_3 . of ( STRING_1 , STRING_2 ) , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , ( INT_1 < < INT_1 ) ) ) ( TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 ) ) ( VAR_1 . METHOD_3 ( VAR_4 ) ) ( VAR_4 . close ( ) ) ( return TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result VAR_1 = METHOD_2 ( ) ) ( METHOD_2 ( ) ) ( java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) . get ( ) ) ( org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String path , java.lang.String VAR_1 ) ) ( METHOD_2 ( ) ) ( TYPE_1 . METHOD_1 ( changeId . get ( ) , path , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( changeId ) ) ; } public void METHOD_4 ( TYPE_6 VAR_2 ) { } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . NameKey branch ) ) ( TYPE_2 e = VAR_1 . get ( branch ) ) ( if ( e == null ) ) ( e = new TYPE_2 ( branch ) ) ( VAR_1 . put ( branch , e ) ) ( endif ) ( VAR_2 = true ) ( METHOD_2 ( e ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id ps ) ) ( java.lang.String url = java.lang.String.format ( STRING_1 , ps . getParentKey ( ) . get ( ) , ps . get ( ) ) ) ( return METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( url ) . METHOD_4 ( ) , VAR_2 class ) . changes ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_4 ( ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . in ( VAR_2 ) ) ( bind ( VAR_3 class ) . in ( VAR_2 ) ) ( bind ( VAR_4 class ) . to ( VAR_3 class ) ) ( install ( new TYPE_1 ( ) ) ) ( install ( new TYPE_2 ( ) ) ) ( bind ( VAR_5 class ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> create( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) ) ( if ( ( TYPE_5 . METHOD_1 ( schema ) ) == ( VAR_2 ) ) ) ( throw new TYPE_4 ( STRING_1 ) ) ( endif ) ( java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_3 = new java.util.ArrayList ( VAR_1 . size ( ) ) ) ( for (com.google.gerrit.reviewdb.client.Account.Id id : VAR_1) ) ( endfor ) ( VAR_3 . add ( new TYPE_5 ( id ) ) ) ( return TYPE_1 . METHOD_2 ( VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 user( TYPE_2 . AccountGroup ... VAR_1 ) ) ( TYPE_3 . Factory VAR_2 = new TYPE_3 . Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 , final java.lang.String ref ) { return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; } } ) ( return new TYPE_1 ( VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_2 , new TYPE_5 ( VAR_1 ) , METHOD_2 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( METHOD_2 ( ) ) ) ( METHOD_3 ( ) ) ( METHOD_4 ( ) ) ( VAR_1 . append ( STRING_1 ) ) ( VAR_1 . append ( METHOD_5 ( ) ) ) ( VAR_1 . append ( STRING_2 ) ) ( msg . METHOD_6 ( VAR_1 . toString ( ) , STRING_3 ) ) ( TYPE_2 . METHOD_1 ( msg ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String VAR_1 ) ) ( final java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ) ( if ( VAR_1 . isEmpty ( ) ) ) ( VAR_4 . METHOD_3 ( false ) ) ( endif ) ( VAR_3 . METHOD_4 ( VAR_1 ) ) ( VAR_4 . METHOD_3 ( true ) ) ( if ( ( ( VAR_5 ) == null ) || ( ( VAR_5 ) == VAR_2 ) ) ) ( METHOD_5 ( VAR_1 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) ) ( return new TYPE_1 ( args , project , change ) . METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( java.util.Map < java.lang.String , TYPE_1 > refs ) ) ( if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( TYPE_1 r = refs . get ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) . getAccountId ( ) ) ) ) ( if ( r != null ) ) ( TYPE_3 s = new TYPE_3 ( VAR_2 , r ) ) ( refs = new TYPE_4 ( refs ) ) ( refs . put ( s . getName ( ) , s ) ) ( endif ) ( endif ) ( return refs ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_3 ) ) ( METHOD_4 ( VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) { protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; } } ) ) ( bind ( VAR_2 class ) ) ( bind ( VAR_3 class ) . to ( VAR_2 class ) ) ( bind ( VAR_4 class ) . to ( VAR_5 class ) ) ( METHOD_2 ( ) . to ( VAR_5 class ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String path , java.lang.String VAR_1 ) ) ( TYPE_1 res = METHOD_2 ( path ) ) ( org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_2 ) ) ) ( java.lang.String VAR_3 = res . METHOD_4 ( ) ) ( return new java.lang.String ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) , VAR_4 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) ( TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ( endif ) ( if ( ( VAR_1 ) == null ) ) ( TYPE_2 VAR_2 = METHOD_7 ( ) ) ( if ( ! ( METHOD_8 ( ) . METHOD_9 ( ) ) ) ) ( METHOD_4 ( ) . METHOD_10 ( VAR_2 ) ) ( endif ) ( endif ) ( METHOD_11 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String msg , TYPE_1 t ) ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( if ( t != null ) ) ( VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ) ( endif ) ( VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project ) ) ( if ( ! ( METHOD_2 ( project ) ) ) ) ( return false ; ) ( endif ) ( java.lang.String [ ] projects = config . METHOD_3 ( ) ) ( if ( ( projects . length ) < 1 ) ) ( return true ; ) ( endif ) ( return new TYPE_1 ( TYPE_2 . METHOD_4 ( projects ) ) . METHOD_5 ( project ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> METHOD_1( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ) ( METHOD_3 ( VAR_4 , project , STRING_1 ) ) ( METHOD_3 ( VAR_5 , project , STRING_2 ) ) ( return METHOD_4 ( project ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) ) ( if ( path . isEmpty ( ) ) ) ( return null ; ) ( endif ) ( path = TYPE_3 . METHOD_2 ( path ) ) ( TYPE_4 . Result result = METHOD_3 ( req , path ) ) ( if ( result == null ) ) ( return null ; ) ( endif ) ( if ( ( result . METHOD_4 ( ) ) != null ) ) ( return METHOD_5 ( VAR_1 , result , path ) ; ) ( endif ) ( return METHOD_6 ( VAR_1 , result , path ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo getChange( java.lang.String changeId , TYPE_2 ... VAR_1 ) ) ( java.lang.String VAR_2 = ( ( VAR_1 . length ) > 0 ) ? STRING_1 + ( TYPE_3 . on ( STRING_2 ) . METHOD_1 ( VAR_1 ) ) : STRING_3 ) ( TYPE_4 r = VAR_3 . get ( ( ( STRING_4 + changeId ) + VAR_2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ) ( return TYPE_5 . METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 . ChangeInfo class ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( try ) ( end-try ) ( new TYPE_1 ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_2 , VAR_1 ) ) ( METHOD_4 ( STRING_3 ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( assertEquals ( ( STRING_4 + VAR_1 ) , e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) ) ( if ( err != null ) ) ( TYPE_5 . METHOD_2 ( req , err ) ) ( endif ) ( TYPE_6 . METHOD_3 ( req , res , null , null , c ) ) ( res . METHOD_4 ( VAR_1 ) ) ( TYPE_6 . METHOD_5 ( req , res , msg ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.util.List < java.lang.String > VAR_1 , java.lang.String message ) ) ( if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) ( VAR_2 . METHOD_3 ( ( message + STRING_1 ) ) ) ( VAR_2 . METHOD_3 ( TYPE_2 . on ( STRING_2 ) . METHOD_4 ( VAR_1 ) ) ) ( VAR_2 . METHOD_3 ( STRING_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( boolean VAR_1 = true ) ( for (TYPE_2 rsrc : changes . values ( )) ) ( endfor ) ( try ) ( end-try ) ( index . apply ( rsrc , new TYPE_3 ( ) ) ) ( end-catch ) ( catch (java.io.IOException|TYPE_4|com.google.gwtorm.server.OrmException|TYPE_5 e) ) ( VAR_1 = false ) ( METHOD_1 ( STRING_1 , java.lang.String.format ( STRING_2 , rsrc . getId ( ) , e . getMessage ( ) ) ) ) ( if ( ! VAR_1 ) ) ( throw METHOD_2 ( STRING_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void delete( com.google.gerrit.reviewdb.client.Change . Id id ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( schema , id ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ) ( end-catch ) ( catch (TYPE_4|TYPE_5 e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Set < TYPE_1 > VAR_3 ) ) ( TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String changeId , java.lang.String VAR_1 , TYPE_1 c , java.lang.String VAR_2 ) ) ( TYPE_2 r = VAR_3 . put ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) , c ) ) ( org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 result ) ) ( METHOD_1 ( ( VAR_1 ? 1 : 0 ) ) ) ( VAR_2 = TYPE_2 . METHOD_2 ( psId , VAR_2 . getKey ( ) . get ( ) , result ) ) ( VAR_3 . METHOD_3 ( false ) ) ( VAR_4 . METHOD_4 ( true ) ) ( VAR_5 . METHOD_4 ( true ) ) ( VAR_6 . METHOD_4 ( true ) ) ( METHOD_5 ( ) ) ( VAR_7 . onSuccess ( VAR_8 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String branch , TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ) ( VAR_2 . METHOD_3 ( ) ) ( VAR_2 . append ( STRING_1 , project . get ( ) ) ) ( VAR_2 . append ( STRING_2 , branch ) ) ( VAR_2 . append ( VAR_5 , VAR_6 ) ) ( for (TYPE_3 VAR_7 : METHOD_4 ( VAR_1 )) ) ( endfor ) ( VAR_2 . METHOD_5 ( VAR_8 , VAR_7 ) ) ( return VAR_2 . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String changeId ) ) ( TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_1 ) ) ( TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value ) . isEqualTo ( 2 ) ) ( com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( METHOD_2 ( ) ) ( add ( VAR_1 , to ) ) ( if ( ! ( VAR_2 . isEmpty ( ) ) ) ) ( METHOD_3 ( TYPE_2 . METHOD_4 ( ) , ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) ) ( return VAR_6 . create ( VAR_3 , db , VAR_1 . repo , VAR_1 . rw , VAR_7 , VAR_8 , METHOD_2 ( VAR_1 , VAR_4 ) , VAR_2 , VAR_5 , VAR_9 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ) ( METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) ) ) ( bind ( new TYPE_2 < TYPE_3 < TYPE_4 . ReviewDb > > ( ) { } ) . to ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . in ( VAR_1 ) ) ( bind ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . METHOD_2 ( VAR_2 class ) . in ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.util.Map < java.lang.String , TYPE_1 > VAR_1 , java.lang.String name , java.lang.String value ) ) ( if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) ) ( VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ) ( TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ) ( METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) ) ( TYPE_1 c = METHOD_2 ( change , user ) ) ( if ( ! ( c . METHOD_3 ( db . get ( ) ) ) ) ) ( throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ) ( endif ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Account account , java.lang.String VAR_1 ) ) ( if ( ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( TYPE_1 event = new TYPE_1 ( util . METHOD_4 ( account ) , VAR_1 ) ) ( for (TYPE_2 VAR_3 : VAR_2) ) ( endfor ) ( try ) ( end-try ) ( VAR_3 . METHOD_5 ( event ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( util . METHOD_6 ( TYPE_3 . log , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , TYPE_3 u , TYPE_4 VAR_4 ) ) ( TYPE_5 . METHOD_2 ( u ) ) ( if ( u instanceof TYPE_6 ) ) ( return VAR_1 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 , VAR_2 , VAR_3 ) ; ) ( endif ) ( if ( u instanceof TYPE_7 ) ) ( return VAR_2 ; ) ( endif ) ( throw new TYPE_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( factory ( VAR_1 . Factory class ) ) ( factory ( VAR_2 . Factory class ) ) ( factory ( VAR_3 . Factory class ) ) ( factory ( VAR_4 . Factory class ) ) ( factory ( VAR_5 . Factory class ) ) ( factory ( VAR_6 . Factory class ) ) ( factory ( VAR_7 . Factory class ) ) ( factory ( VAR_8 . Factory class ) ) ( factory ( VAR_9 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) ) ( TYPE_1 r = VAR_3 . delete ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . HttpServletResponse VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) ) ( servlet . METHOD_3 ( null , VAR_1 ) ) ( TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) ) ( VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) ) ( METHOD_6 ( new java.io.IOException ( STRING_1 ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( VAR_4 ) ) ( servlet . METHOD_9 ( null , VAR_1 ) ) ( TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) ( final TYPE_3 < java.lang.String > n = TYPE_3 . not ( p ) ) ( METHOD_3 ( ( n instanceof TYPE_4 ) ) ) ( METHOD_4 ( p , n ) ) ( METHOD_5 ( p , TYPE_3 . not ( n ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { display ( result ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.util.List < TYPE_1 > VAR_1 ) ) ( java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) ( for (TYPE_1 VAR_4 : VAR_1) ) ( endfor ) ( VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ) ( for (java.lang.String name : VAR_2) ) ( endfor ) ( VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ) ( VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( VAR_1 ) ) ( throw new TYPE_1 ( STRING_1 ) ) ( endif ) ( for (TYPE_2 VAR_2 : VAR_3) ) ( endfor ) ( TYPE_3 args = VAR_2 . args ) ( if ( VAR_4 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_3 ( ) ) ) ) ( continue ; ) ( endif ) ( com.google.gerrit.reviewdb.client.Account account = VAR_5 . get ( VAR_6 . getAccountId ( ) ) . METHOD_4 ( ) ) ( VAR_7 . METHOD_5 ( VAR_8 , VAR_4 . METHOD_3 ( ) , VAR_4 . METHOD_2 ( ) , account ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) ( com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit ) ) ) ( METHOD_5 ( STRING_7 ) ) ( METHOD_5 ( STRING_8 ) ) ( METHOD_5 ( STRING_9 , change ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 ) ) ( int VAR_2 = VAR_3 ) ( VAR_3 += VAR_1 ) ( int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ) ( VAR_6 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) ) ( VAR_7 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( 1 , VAR_2 ) ) ( final TYPE_2 VAR_3 = new TYPE_2 ( ( ( TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) + ( TYPE_1 . METHOD_2 ( INT_1 , VAR_6 ) ) ) ) ) ( TYPE_3 . METHOD_3 ( new TYPE_4 ( ) { public long METHOD_4 ( ) { return VAR_3 . METHOD_5 ( VAR_1 ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result r = METHOD_2 ( ) ) ( TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( VAR_1 . changes ( ) . query ( r . getChangeId ( ) ) . get ( ) ) ) ( org.junit.Assert . METHOD_4 ( VAR_2 ) ) ( org.junit.Assert . METHOD_4 ( VAR_3 ) ) ( org.junit.Assert . METHOD_4 ( VAR_4 ) ) ( org.junit.Assert . METHOD_4 ( VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( ( ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( try ) ( end-try ) ( TYPE_3 < TYPE_1 > r = VAR_1 . apply ( change , null ) ) ( return r . METHOD_2 ( ) ? null : r . value ( ) ; ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> METHOD_1( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ) ( METHOD_3 ( VAR_4 , project , STRING_1 ) ) ( METHOD_3 ( VAR_5 , project , STRING_2 ) ) ( return METHOD_4 ( project ) ; ) ( METHOD_5 ( VAR_6 ) ) ( VAR_7:  ) ( end-label ) ( Test = VAR_8 ) ( TYPE_3 . submit VAR_9 ) ( on ( projects ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , java.lang.String VAR_2 ) ) ( try ) ( end-try ) ( VAR_3 . projects ( ) . name ( VAR_1 . get ( ) ) . METHOD_2 ( VAR_2 ) ) ( end-catch ) ( catch (TYPE_1 e) ) ( e . METHOD_3 ( ) ) ( com.google.common.truth.Truth.assertThat ( e . getMessage ( ) ) . contains ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) ( int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , line , 0 , false ) , METHOD_7 ( ) ) ) ( METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final java.lang.String name , final java.lang.String email ) ) ( final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) ( final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) ( account . METHOD_3 ( name ) ) ( account . METHOD_4 ( email ) ) ( final TYPE_1 s = new TYPE_1 ( account , VAR_2 . Collections < TYPE_3 > METHOD_5 ( ) , VAR_2 . Collections < TYPE_4 > METHOD_5 ( ) ) ) ( return s ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) ) ( TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ) ( METHOD_2 ( VAR_4 , ( ) - > ) ( VAR_4 . set ( VAR_3 . get ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final java.util.List < TYPE_4 > VAR_3 ) ) ( VAR_4 = db . METHOD_2 ( ) ) ( try ) ( end-try ) ( return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; ) ( finally ) ( VAR_4 . METHOD_4 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 ) ) ( final java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . VAR_3 . METHOD_3 ( VAR_4 ) ) ( synchronized ( VAR_2 ) ) ( VAR_2 . add ( this ) ) ( end-synchronized ) ( final TYPE_4 VAR_5 = new TYPE_4 ( VAR_1 ) ) ( if ( METHOD_4 ( ) ) ) ( new TYPE_5 ( VAR_5 , VAR_5 . toString ( ) ) . METHOD_5 ( ) ) ( endif ) ( VAR_6 = VAR_7 . submit ( VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ) ( if ( FLOAT_1 <= ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ) ( return true ; ) ( endif ) ( VAR_2 . METHOD_4 ( STRING_2 ) ) ( VAR_2 . METHOD_4 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void delete( int id ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ) ( end-catch ) ( catch (TYPE_4|TYPE_5 e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) ) ( com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ) ( METHOD_2 ( VAR_1 , VAR_2 ) ) ( TYPE_1 VAR_3 = TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ) ( VAR_1 . METHOD_5 ( ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String err , java.lang.Exception e ) ) ( if ( VAR_1 ) ) ( if ( e == null ) ) ( VAR_2 . error ( err ) ) ( endif ) ( VAR_2 . error ( err , e ) ) ( return TYPE_2 . METHOD_2 ( ) ; ) ( endif ) ( return TYPE_2 . METHOD_3 ( err ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . close ( ) ) ( endif ) ( if ( ( rw ) != null ) ) ( rw . close ( ) ) ( endif ) ( if ( ( repo ) != null ) ) ( repo . close ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_3 VAR_1 = VAR_2 ) ( if ( VAR_1 == null ) ) ( VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , config . METHOD_4 ( ) ) ) ( VAR_2 = VAR_1 ) ( endif ) ( return VAR_4 . create ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( Account.Id getAccountId( ) ) ( com.google.gerrit.reviewdb.client.Account.Id id = get ( 0 ) . VAR_1 ) ( int i = 1 ) ( for (i < ( size ( ) )) ) ( i ++ ) ( endfor ) ( TYPE_1 . METHOD_1 ( TYPE_2 . equals ( id , get ( i ) . VAR_1 ) , STRING_1 , id , get ( i ) . VAR_1 ) ) ( return id ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String id , java.lang.String name ) ) ( TYPE_1 . METHOD_2 ( name ) ) ( java.util.List < TYPE_2 > values = new java.util.ArrayList < TYPE_2 > ( 2 ) ) ( values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) ) ( values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ) ( TYPE_1 type = new TYPE_1 ( name , values ) ) ( type . METHOD_3 ( id ) ) ( return type ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_1 i = new TYPE_1 ( ) ) ( i . i = 1 ) ( VAR_1 = 2 ) ( i . id = INT_1 ) ( VAR_2 = INT_2 ) ( VAR_3 = INT_3 ) ( VAR_4 = INT_4 ) ( i . b = true ) ( VAR_5 = false ) ( VAR_6 = true ) ( i . s = STRING_1 ) ( VAR_7 = STRING_2 ) ( VAR_8 = null ) ( i . t = VAR_9 ) ( VAR_10 = VAR_9 ) ( return i ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ) ( TYPE_2 VAR_5 = user ( VAR_1 , VAR_4 ) ) ( METHOD_3 ( VAR_5 ) ) ( METHOD_4 ( VAR_5 ) ) ( METHOD_5 ( STRING_2 , VAR_5 ) ) ( METHOD_5 ( STRING_3 , VAR_5 ) ) ( METHOD_5 ( STRING_4 , VAR_5 ) ) ( METHOD_3 ( STRING_1 , VAR_5 ) ) ( METHOD_3 ( STRING_5 , VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) ) ( if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) ) ( VAR_1 . set ( STRING_1 , VAR_2 ) ) ( endif ) ( if ( ( VAR_3 != null ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ) ) ( VAR_4 . METHOD_2 ( STRING_2 , null , STRING_3 , VAR_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String id ) ) ( try ) ( end-try ) ( TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) ( VAR_2 . METHOD_4 ( rsrc ) ) ( VAR_2 . apply ( account , new TYPE_4 ( ) ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|java.io.IOException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 event ) ) ( if ( ( VAR_1 ) == null ) ) ( TYPE_2 . METHOD_2 ( patchSet . getKey ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { METHOD_3 ( result ) ; } } ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( VAR_2 = VAR_3 ) ( VAR_4 = VAR_5 ) ( switch ( type ) ) ( end-switch ) ( case VAR_6 : ) ( case VAR_7 : ) ( VAR_8 = VAR_9 ) ( case VAR_10 : ) ( path = VAR_1 . path ) ( case VAR_11 : ) ( revision = VAR_1 . revision ) ( case VAR_12 : ) ( VAR_13 = VAR_14 ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) ) ( if ( VAR_2 != null ) ) ( VAR_1 . append ( CHAR_1 ) ) ( boolean VAR_3 = true ) ( for (final TYPE_2 VAR_4 : VAR_2) ) ( endfor ) ( if ( VAR_3 ) ) ( VAR_3 = false ) ( endif ) ( VAR_1 . append ( CHAR_2 ) ) ( VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) ( VAR_1 . append ( CHAR_3 ) ) ( endif ) ( VAR_1 . append ( VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , java.lang.String VAR_2 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ) ( endif ) ( if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ( TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ) ( endif ) ( VAR_3 . METHOD_6 ( java.lang.String.format ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) ) ( java.lang.String VAR_3 = VAR_4 . getProject ( ) . getName ( ) ) ( return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; ) ( endif ) ( com.google.gerrit.reviewdb.client.Project project = VAR_4 . getProject ( ) ) ( if ( project . METHOD_3 ( ) ) ) ( return METHOD_4 ( ) ; ) ( endif ) ( return VAR_5 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( factory ( VAR_1 . Factory class ) ) ( factory ( VAR_2 . Factory class ) ) ( factory ( VAR_3 . Factory class ) ) ( factory ( VAR_4 . Factory class ) ) ( factory ( VAR_5 . Factory class ) ) ( factory ( VAR_6 . Factory class ) ) ( factory ( VAR_7 . Factory class ) ) ( factory ( VAR_8 . Factory class ) ) ( factory ( VAR_9 . Factory class ) ) ( factory ( VAR_10 . Factory class ) ) ( factory ( VAR_11 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 m ) ) ( m . METHOD_2 ( ) ) ( m . METHOD_3 ( STRING_1 ) ) ( m . METHOD_4 ( ) ) ( m . METHOD_5 ( ) ) ( m . METHOD_2 ( ) ) ( m . METHOD_6 ( STRING_2 ) ) ( m . METHOD_6 ( STRING_3 ) ) ( m . METHOD_4 ( ) ) ( m . METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 not( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) ) ( TYPE_3 < com.google.gerrit.server.query.change.ChangeData > n = p . METHOD_1 ( 0 ) ) ( if ( n instanceof TYPE_5 ) ) ( return TYPE_6 . METHOD_2 ( ( ( TYPE_5 < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; ) ( endif ) ( TYPE_7 VAR_1 = new TYPE_7 ( ) ) ( VAR_1 . add ( new TYPE_8 ( ) , VAR_2 ) ) ( VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , n ) , VAR_3 ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 VAR_1 ) ) ( switch ( VAR_1 ) ) ( end-switch ) ( case VAR_2 : ) ( return ( ( ! ( METHOD_2 ( ) ) ) && ( ( user . METHOD_3 ( ) ) || ( METHOD_4 ( VAR_3 ) ) ) ) || ( METHOD_5 ( ) ) ; ) ( case VAR_4 : ) ( return ( ( ! ( METHOD_2 ( ) ) ) && ( METHOD_6 ( java.util.Collections . METHOD_7 ( ) ) ) ) || ( METHOD_5 ( ) ) ; ) ( throw new TYPE_2 ( ( VAR_1 + STRING_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) ) ( TYPE_2 . METHOD_4 ( true ) ) ( VAR_2 . METHOD_5 ( false ) ) ( endif ) ( if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_6 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ) ) ( TYPE_2 . METHOD_4 ( false ) ) ( VAR_2 . METHOD_5 ( true ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) ) ( res . METHOD_2 ( VAR_1 ) ) ( TYPE_5 . METHOD_3 ( req , res , null , c ) ) ( TYPE_5 . METHOD_4 ( req , res , msg ) ) ( if ( err != null ) ) ( TYPE_6 . METHOD_5 ( req , err ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( java.lang.String VAR_1 , java.lang.String VAR_2 ) ) ( java.lang.String VAR_3 = STRING_1 ) ( java.lang.String VAR_4 = STRING_2 ) ( TYPE_2 VAR_5 = VAR_6 . create ( db , admin . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_1 , VAR_2 ) ) ( TYPE_2 . Result r = VAR_5 . to ( git , STRING_3 ) ) ( r . METHOD_3 ( ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ) ( java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ) ( if ( TYPE_2 . isEmpty ( VAR_3 ) ) ) ( return false ; ) ( endif ) ( boolean VAR_4 = TYPE_3 . contains ( VAR_3 . METHOD_4 ( ) ) ) ( VAR_5 . METHOD_5 ( ( ( ( ( ( STRING_2 + VAR_2 ) + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_4 ) ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( admin ) ) ( METHOD_4 ( VAR_1 , VAR_2 ) ) ( assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 , VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String config = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 ) , new TYPE_4 ( ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = VAR_2 . create ( STRING_1 ) ) ( TYPE_2 ctl = METHOD_2 ( VAR_1 ) ) ( VAR_3 . create ( ) . METHOD_3 ( db , VAR_1 . getId ( ) ) ) ( METHOD_4 ( ctl , null , TYPE_3 . METHOD_5 ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.AccountGroup METHOD_1( final java.lang.String VAR_1 ) ) ( final TYPE_1 . ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( final TYPE_3 . NameKey VAR_2 = new TYPE_3 . NameKey ( VAR_1 ) ) ( final TYPE_1 . AccountGroup group = db . METHOD_3 ( ) . get ( VAR_2 ) ) ( if ( group != null ) ) ( return group ; ) ( endif ) ( return null ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) ( TYPE_2 . Result result = VAR_1 . to ( git , STRING_1 ) ) ( VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 , STRING_2 , STRING_3 , result . getChangeId ( ) ) ) ( return VAR_1 . to ( git , STRING_1 ) . getChangeId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.AccountGroup METHOD_1( final TYPE_2 . Id key ) ) ( final TYPE_2 . NameKey name = new TYPE_2 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ) ( final TYPE_1 . AccountGroup VAR_1 = new TYPE_1 . AccountGroup ( name , key ) ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( VAR_1 . METHOD_3 ( VAR_3 ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 me ) ( me = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) , ( ( TYPE_4 ) ( null ) ) ) ) ( me . METHOD_5 ( STRING_1 ) ) ( me . METHOD_6 ( STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + STRING_7 ) + STRING_8 ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) ) ( TYPE_2 p = new TYPE_2 ( ) ) ( try ) ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) ( end-try ) ( p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ) ( return p ; ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 . ChangeInfo info ) ) ( info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ) ( TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ) ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ( VAR_2 . METHOD_4 ( VAR_1 , diff ) ) ( VAR_3 . METHOD_5 ( info ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 user ) ) ( if ( user . METHOD_2 ( ) ) ) ( return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; ) ( endif ) ( if ( user instanceof TYPE_3 ) ) ( return STRING_1 + ( user . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; ) ( endif ) ( return user . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( for (TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( )) ) ( endfor ) ( TYPE_2 VAR_3 = METHOD_3 ( VAR_2 . getName ( ) ) ) ( if ( VAR_3 != null ) ) ( VAR_3 . METHOD_1 ( VAR_2 ) ) ( endif ) ( VAR_4 . add ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( try ) ( end-try ) ( METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( try ) ( end-try ) ( new TYPE_3 ( VAR_1 ) ) ( METHOD_5 ( STRING_1 ) ) ( end-catch ) ( catch (TYPE_4 e) ) ( assertEquals ( ( STRING_2 + ( VAR_1 . METHOD_6 ( ) ) ) , e . getMessage ( ) ) ) ( finally ) ( VAR_1 . delete ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ( cfg = new TYPE_3 ( ) ) ( cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ) ( VAR_2 = new TYPE_4 ( VAR_1 , cfg , METHOD_8 ( VAR_3 class ) ) ) ( VAR_2 . METHOD_9 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( METHOD_2 ( ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . METHOD_3 ( ) ) ( VAR_1 = null ) ( endif ) ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ( TYPE_1 . METHOD_6 ( true ) ) ( TYPE_2 . METHOD_7 ( true ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_4<TYPE_1,TYPE_3> METHOD_1( final TYPE_5 < TYPE_6 < TYPE_1 , TYPE_3 > > type , final java.lang.String name ) ) ( return METHOD_1 ( TYPE_7 . get ( type , TYPE_8 . METHOD_2 ( name ) ) ) . name ( name ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . NameKey projectName , java.lang.String VAR_1 , java.lang.String msg , java.util.List < TYPE_2 > VAR_2 , TYPE_3 < TYPE_4 > VAR_3 ) ) ( org.eclipse.jgit.lib.ObjectId base = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_1 ) ) ( VAR_4 . create ( projectName , base , VAR_2 , msg ) . to ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int row , int VAR_1 ) ) ( if ( ( VAR_1 == 1 ) || ( VAR_1 == 2 ) ) ) ( if ( ! ( STRING_1 . equals ( table . METHOD_2 ( row , VAR_1 ) ) ) ) ) ( METHOD_3 ( row , VAR_1 ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < java.lang.String > e ) ) ( java.lang.String VAR_1 = e . getValue ( ) ) ( if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) ) ( VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ( if ( ( view ) != null ) ) ( view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 , java.lang.String VAR_2 ) ) ( TYPE_2 VAR_3 = new TYPE_2 ( ( ( VAR_4 . METHOD_2 ( ) ) + VAR_1 ) ) ) ( if ( ! ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) ) ( VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . toString ( ) ) ) ( VAR_3 . METHOD_5 ( new TYPE_5 ( VAR_2 , VAR_5 ) ) ) ( endif ) ( return VAR_6 . METHOD_6 ( VAR_3 , new TYPE_6 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ( VAR_1 . METHOD_3 ( STRING_1 ) ) ( TYPE_1 in = new TYPE_1 ( ) ) ( in . account = user . email ) ( VAR_3 = STRING_2 ) ( in . ref = STRING_3 ) ( VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 in = new TYPE_1 ( ) ) ( in . name = VAR_1 ) ( VAR_2 = true ) ( VAR_3 . projects ( ) . create ( in ) ) ( METHOD_2 ( VAR_1 , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) ) ( VAR_5 . add ( new TYPE_2 ( VAR_6 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 req , final TYPE_2 VAR_1 ) ) ( TYPE_3 . METHOD_2 ( new TYPE_4 ( ) { public void run ( ) { TYPE_5 . METHOD_3 ( req . METHOD_4 ( ) , req . METHOD_5 ( ) , new TYPE_6 < TYPE_5 > ( ) { public void onSuccess ( TYPE_5 VAR_2 ) { VAR_1 . METHOD_6 ( req , new TYPE_7 ( TYPE_8 . METHOD_7 ( VAR_2 . values ( ) ) ) ) ; } } ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . ReceiveCommand cmd ) ) ( TYPE_2 ctl = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ) ( if ( ctl . METHOD_3 ( ) ) ) ( if ( ( TYPE_3 . METHOD_4 ( cmd ) ) && ( ! ( METHOD_5 ( cmd ) ) ) ) ) ( return ; ) ( endif ) ( METHOD_6 ( ctl , cmd ) ) ( cmd . METHOD_7 ( rp ) ) ( endif ) ( TYPE_3 . reject ( cmd , STRING_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData,?> METHOD_1( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String id ) ) ( if ( ( ( id . length ( ) ) == ( VAR_1 ) ) && ( schema . METHOD_2 ( VAR_2 ) ) ) ) ( return VAR_2 ; ) ( endif ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < TYPE_3 > p ) ) ( if ( p instanceof TYPE_4 < ? > ) ) ( return METHOD_2 ( p ) ; ) ( endif ) ( return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( try ) ( end-try ) ( for (com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( args , VAR_1 . getId ( ) ) , this ) , 1 ) . METHOD_4 ( )) ) ( endfor ) ( if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) ( return true ; ) ( endif ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 message( final TYPE_2 . Change c , final java.lang.String VAR_1 ) ) ( final java.lang.String VAR_2 ) ( try ) ( end-try ) ( VAR_2 = TYPE_3 . METHOD_1 ( schema ) ) ( end-catch ) ( catch (TYPE_4.OrmException e) ) ( return null ; ) ( final TYPE_1 m = new TYPE_1 ( new TYPE_1 . Key ( c . getId ( ) , VAR_2 ) , null ) ) ( m . METHOD_2 ( VAR_1 ) ) ( return m ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( org.eclipse.jgit.lib.Repository VAR_1 , org.eclipse.jgit.revwalk.RevWalk VAR_2 ) ) ( try ) ( end-try ) ( return METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( TYPE_2 VAR_4 = new TYPE_2 ( e . getMessage ( ) ) ) ( VAR_4 . METHOD_5 ( e ) ) ( throw VAR_4 ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo . METHOD_2 ( 2 ) ) ( TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , repo . commit ( ) . create ( ) ) ) ( repo . METHOD_2 ( ( - 1 ) ) ) ( TYPE_1 VAR_2 = repo . METHOD_3 ( STRING_2 , VAR_1 ) ) ( org.junit.Assert.assertEquals ( ( ( VAR_3 ) + INT_1 ) , METHOD_4 ( VAR_1 ) ) ) ( org.junit.Assert.assertEquals ( ( ( VAR_3 ) + 2 ) , METHOD_4 ( VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( ) ) ( TYPE_1 VAR_1 = repo . METHOD_2 ( ) ) ( try ) ( end-try ) ( org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) ( VAR_1 . METHOD_3 ( ) ) ( return id ; ) ( finally ) ( VAR_1 . METHOD_4 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( ) ) ( final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ) ( for (final com.google.gerrit.reviewdb.client . AccountGroup a : out . values ( )) ) ( endfor ) ( r . add ( new TYPE_2 ( a ) ) ) ( return new TYPE_1 ( r ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<java.lang.String> METHOD_1( java.util.List < TYPE_1 > VAR_1 ) ) ( java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ) ( for (TYPE_1 VAR_3 : VAR_1) ) ( endfor ) ( for (TYPE_2 VAR_4 : VAR_3 . METHOD_2 ( ) . METHOD_3 ( )) ) ( endfor ) ( java.lang.String [ ] VAR_5 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ) ( VAR_2 . add ( VAR_5 [ 0 ] ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void insert( final int row , final TYPE_1 VAR_1 ) ) ( table . METHOD_1 ( row ) ) ( METHOD_2 ( row ) ) ( final TYPE_2 VAR_2 = table . METHOD_3 ( ) ) ( VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ) ( VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_6 ( ) ) ) ( VAR_2 . METHOD_4 ( row , 2 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ) ( METHOD_7 ( row , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( TYPE_1 cm = VAR_1 . create ( ctx . getProject ( ) , psId . getParentKey ( ) ) ) ( cm . METHOD_1 ( ctx . METHOD_2 ( ) . getAccountId ( ) ) ) ( cm . METHOD_3 ( patchSet , info ) ) ( cm . METHOD_4 ( ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( VAR_2 . error ( ( STRING_1 + ( psId ) ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( METHOD_1 ( ) ) ( end-catch ) ( catch (TYPE_1 e) ) ( TYPE_2 . METHOD_2 ( 1 ) ) ( catch (TYPE_3 e) ) ( if ( VAR_1 . METHOD_3 ( ) . equals ( STRING_1 ) ) ) ( METHOD_4 ( e ) ) ( endif ) ( VAR_2 . METHOD_5 ( e . toString ( ) ) ) ( catch (java.lang.Exception e) ) ( METHOD_4 ( e ) ) ( METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 cfg , java.lang.String revision ) ) ( TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( cfg . METHOD_4 ( VAR_2 , true ) ) . METHOD_5 ( STRING_1 ) ) ( for (java.lang.String name : VAR_3 . METHOD_6 ( )) ) ( endfor ) ( VAR_1 . METHOD_7 ( name , VAR_3 . METHOD_8 ( name ) ) ) ( VAR_1 . METHOD_7 ( STRING_2 ) ) ( VAR_1 . METHOD_7 ( STRING_3 , revision ) ) ( return VAR_1 . get ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 rsrc , TYPE_3 in ) ) ( if ( ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) ) ( throw new TYPE_4 ( STRING_1 ) ) ( endif ) ( VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , rsrc . getChange ( ) . getId ( ) ) ) ( return TYPE_1 . METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.util.Set < TYPE_2 > VAR_3 ) ) ( java.lang.String [ ] VAR_4 = VAR_2 . METHOD_2 ( ) ) ( java.lang.String VAR_5 = TYPE_3 . METHOD_3 ( VAR_4 , STRING_1 ) ) ( if ( ! ( TYPE_4 . METHOD_4 ( VAR_5 ) ) ) ) ( VAR_6 . METHOD_5 ( VAR_1 , VAR_5 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String VAR_1 , java.lang.String topic ) ) ( if ( ( topic == null ) || ( topic . isEmpty ( ) ) ) ) ( topic = STRING_1 + ( TYPE_2 . METHOD_2 ( ) . toString ( ) ) ) ( VAR_2 . METHOD_3 ( STRING_2 , VAR_1 , topic ) ) ( VAR_3 . changes ( ) . id ( VAR_1 ) . topic ( topic ) ) ( endif ) ( return topic ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,?> METHOD_1( TYPE_1 req ) ) ( TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( req ) . METHOD_3 ( ) ) ( return TYPE_3 . of ( STRING_1 , VAR_3 , STRING_2 , TYPE_4 . METHOD_4 ( VAR_4 ) , STRING_3 , METHOD_5 ( req , VAR_5 , TYPE_5 . METHOD_6 ( VAR_6 ) ) , STRING_4 , METHOD_5 ( req , VAR_7 , METHOD_7 ( req ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 b ) ) ( int VAR_1 = ( TYPE_1 . index ( this ) ) - ( TYPE_1 . index ( b ) ) ) ( if ( VAR_1 == 0 ) ) ( getName ( ) . METHOD_1 ( b . getName ( ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( db . create ( ) ) ( final TYPE_2 VAR_1 = db . METHOD_2 ( ) ) ( final TYPE_2 VAR_2 = db . METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 ) ) ( assertEquals ( VAR_3 , VAR_4 ) ) ( assertEquals ( VAR_5 , VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) ) ( VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = METHOD_3 ( ctl ) ) ( end-try ) ( TYPE_1 VAR_4 = METHOD_4 ( ctl , VAR_5 . create ( db . get ( ) , ctl ) , in , repo , true ) ) ( VAR_1 . METHOD_5 ( ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ) ( METHOD_3 ( ) ) ( assertEquals ( ( STRING_1 + ( STRING_2 + STRING_4 ) ) , METHOD_2 ( STRING_1 ) ) ) ( METHOD_3 ( ) ) ( assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 cfg , java.lang.String name , int VAR_1 ) ) ( try ) ( end-try ) ( return cfg . METHOD_1 ( name , VAR_1 ) ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( VAR_2 . error ( java.lang.String.format ( STRING_1 , name , VAR_1 ) ) ) ( VAR_2 . METHOD_2 ( ( STRING_2 + ( e . getMessage ( ) ) ) , e ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 add( final TYPE_2 < TYPE_3 > VAR_1 ) ) ( final TYPE_4 < TYPE_2 < TYPE_3 > > ref = new TYPE_4 < TYPE_2 < TYPE_3 > > ( VAR_1 ) ) ( VAR_2 . add ( ref ) ) ( return new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ref . METHOD_2 ( VAR_1 , null ) ) { VAR_2 . METHOD_1 ( ref ) ; } } } ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( java.lang.String name = VAR_1 . getName ( ) ) ( VAR_3 . info ( java.lang.String.format ( STRING_1 , name , VAR_1 . METHOD_3 ( ) ) ) ) ( VAR_1 . METHOD_4 ( VAR_4 ) ) ( VAR_4 . METHOD_5 ( VAR_1 ) ) ( VAR_5 . METHOD_6 ( name ) ) ( VAR_6 . METHOD_6 ( name ) ) ( VAR_7 . add ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 VAR_1 ) ) ( TYPE_1 result = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1 . METHOD_3 ( VAR_2 ) ; } } . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { VAR_2 . display ( r . METHOD_3 ( ) ) ; VAR_3 . display ( r . METHOD_4 ( ) ) ; VAR_4 . display ( r . METHOD_5 ( ) ) ; } public void METHOD_6 ( final TYPE_4 VAR_5 ) { TYPE_5 . log ( STRING_1 , VAR_5 ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( ( VAR_1 instanceof TYPE_3 ) ) ) ( METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ) ( final TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ) ( METHOD_3 ( ( VAR_2 instanceof TYPE_5 ) ) ) ( METHOD_5 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = ( cd != null ) ? cd . reviewers ( TYPE_2 . of ( db ) ) . values ( ) : VAR_2 . METHOD_4 ( db , change.getId ( ) ) . values ( ) ) ( TYPE_3 user = ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ) ( return VAR_1 . contains ( user . getAccountId ( ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) ) ( TYPE_5 VAR_5 = METHOD_2 ( VAR_1 , VAR_3 ) ) ( TYPE_6 VAR_6 = TYPE_6 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ) ( METHOD_7 ( db , VAR_2 , VAR_5 , VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 w = METHOD_2 ( ) ) ( for (w != null) ) ( w = w . METHOD_2 ( ) ) ( endfor ) ( if ( w instanceof TYPE_2 ) ) ( ( ( TYPE_2 ) ( w ) ) . METHOD_1 ( ) ) ( break ; ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ) ( try ) ( end-try ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( try ) ( end-try ) ( org.eclipse.jgit.lib.ObjectId VAR_2 = repo . METHOD_3 ( STRING_1 ) ) ( org.eclipse.jgit.lib.ObjectId VAR_3 = repo . METHOD_3 ( STRING_2 ) ) ( return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; ) ( finally ) ( rw . METHOD_5 ( ) ) ( end-finally ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 result ) ) ( VAR_1 . METHOD_1 ( ) ) ( if ( TYPE_2 . METHOD_2 ( ) . auth ( ) . METHOD_3 ( ) ) ) ( VAR_2 = VAR_3 ) ( if ( ( VAR_4 . METHOD_4 ( ) ) == 0 ) ) ( final com.google.gerrit.reviewdb.client.Account me = TYPE_2 . METHOD_5 ( ) ) ( me . METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( me ) ) ( endif ) ( VAR_5 . METHOD_8 ( true ) ) ( METHOD_9 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_1 . change ( ) . getProject ( ) ) ( try ) ( end-try ) ( return ( ( VAR_2 . config ) == null ) || ( project == null ) ? VAR_3 : VAR_4 . METHOD_2 ( project , VAR_5 ) . METHOD_3 ( VAR_6 , VAR_3 ) ; ) ( end-catch ) ( catch (TYPE_1 e) ) ( VAR_7 . error ( ( STRING_1 + project ) ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( for (TYPE_2 VAR_1 : VAR_2 . values ( )) ) ( endfor ) ( if ( METHOD_2 ( change , VAR_1 . user , db ) ) ) ( VAR_3 . METHOD_3 ( event ) ) ( endif ) ( METHOD_4 ( event ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) ) ) ( bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ) ( bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ) ( bind ( VAR_7 class ) . to ( VAR_8 class ) ) ( install ( new TYPE_2 ( ) { protected void METHOD_1 ( ) { METHOD_4 ( ) . to ( VAR_9 class ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) ( TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ) ( METHOD_6 ( VAR_2 , cfg ) ) ( CFG Exit )
( CFG Entry ) ( void name( java.lang.String name ) ) ( TYPE_2 in = new TYPE_2 ( ) ) ( in . name = name ) ( try ) ( end-try ) ( VAR_1 . apply ( rsrc , in ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new TYPE_4 ( name , e ) ) ( catch (java.lang.Exception e) ) ( throw TYPE_5 . METHOD_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final java.lang.String VAR_1 , final java.lang.String name , final java.lang.String VAR_2 , final boolean VAR_3 ) ) ( final java.lang.String VAR_4 = get ( name ) ) ( java.lang.String VAR_5 = ui . METHOD_2 ( ( VAR_4 != null ? VAR_4 : VAR_2 ) , STRING_1 , VAR_1 ) ) ( if ( VAR_3 && ( VAR_5 == VAR_2 ) ) ) ( VAR_5 = null ) ( endif ) ( if ( ! ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_5 ) ) ) ) ( set ( name , VAR_5 ) ) ( endif ) ( return VAR_5 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 . Account > ( ) { public void onSuccess ( final TYPE_3 . Account result ) { display ( result . METHOD_3 ( ) ) ; METHOD_4 ( true ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.junit.Assert . METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ) ( org.junit.Assert . METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( VAR_2 . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ) ( TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 ) ) ( TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( int i = 1 ) ( for (i < INT_1) ) ( i ++ ) ( endfor ) ( java.lang.String p = STRING_1 + i ) ( METHOD_2 ( p ) ) ( TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) ) ( TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) ( return VAR_4 . to ( git , ref ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , STRING_1 ) ) ( try ) ( end-try ) ( METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( METHOD_3 ( VAR_2 . METHOD_5 ( ) ) ) ( final TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ) ( METHOD_6 ( VAR_4 ) ) ( assertEquals ( VAR_1 , VAR_5 ) ) ( finally ) ( VAR_2 . delete ( ) ) ( VAR_1 . delete ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( ) ) ( return new TYPE_1 < TYPE_2 > ( ) { private static final long VAR_1 = INT_1 ; public void METHOD_1 ( TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { try { TYPE_4 VAR_4 = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ; try { VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; } finally { VAR_4 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_6 ( STRING_1 , err ) ; } } } ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo ) ) ) ( TYPE_3 query = METHOD_4 ( STRING_2 ) . METHOD_5 ( INT_1 ) ) ( METHOD_6 ( query , change ) ) ( METHOD_6 ( query . METHOD_7 ( 1 ) ) ) ( METHOD_6 ( query . METHOD_7 ( INT_2 ) ) ) ( METHOD_8 ( query . METHOD_7 ( INT_3 ) ) ) ( METHOD_6 ( query . METHOD_5 ( INT_3 ) . METHOD_7 ( INT_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 i ) ) ( TYPE_6 VAR_1 = new TYPE_6 ( new TYPE_6 . Id ( user . getAccountId ( ) , VAR_2 ) , VAR_3 ) ) ( VAR_4 . apply ( new TYPE_7 ( user . METHOD_2 ( ) , VAR_1 ) , null ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<com.google.gerrit.reviewdb.client.PatchSet.Id> METHOD_1( ) ) ( java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > VAR_1 = new TYPE_1 < > ( ) ) ( for (com.google.gerrit.server.query.change.ChangeData cd : VAR_2) ) ( endfor ) ( VAR_1 . add ( cd . change ( ) . currentPatchSetId ( ) ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . delete ( ) ) . METHOD_3 ( ) ) ( TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ) ( TYPE_3 VAR_4 = VAR_5 . METHOD_9 ( VAR_3 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_10 ( ) . METHOD_11 ( ) ) . METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( Account.Id user( java.lang.String name , java.lang.String email ) ) ( final TYPE_1 s = METHOD_1 ( name , email ) ) ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( s . METHOD_5 ( ) . getId ( ) ) ) ) . METHOD_6 ( TYPE_3 . of ( s ) ) ) ( return s . METHOD_5 ( ) . getId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( TYPE_1 VAR_2 = new TYPE_1 ( ) ) ( VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) ( VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 , VAR_4 ) ) ) ( VAR_2 . METHOD_5 ( STRING_1 ) ) ( TYPE_4 VAR_5 = new TYPE_4 ( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_6 = METHOD_6 ( VAR_1 , VAR_5 ) ) ( if ( VAR_5 . get ( ) ) ) ( return null ; ) ( endif ) ( VAR_2 . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_6 ) ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 format( TYPE_1 out , TYPE_2 ctl , TYPE_3 VAR_1 ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ) ( return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , VAR_1 , psId , VAR_3 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( try ) ( end-try ) ( return TYPE_1 . METHOD_2 ( ) ; ) ( end-catch ) ( catch (TYPE_3.OrmException e) ) ( throw new TYPE_2 ( INT_1 , STRING_1 ) ) ( catch (TYPE_4 e) ) ( throw new TYPE_2 ( INT_1 , STRING_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 rsrc ) ) ( if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) ) ( return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; ) ( endif ) ( throw new TYPE_3 ( rsrc . getName ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( return new TYPE_1 ( null ) { public TYPE_2 METHOD_2 ( ) { return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; } } ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final TYPE_3 factory = TYPE_3 . METHOD_2 ( ) ) ( factory . METHOD_3 ( false ) ) ( factory . METHOD_4 ( false ) ) ( factory . METHOD_5 ( true ) ) ( factory . METHOD_6 ( true ) ) ( final TYPE_1 VAR_1 = factory . METHOD_7 ( ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( com.google.gerrit.reviewdb.client.Change change = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) ( java.lang.String key = change . getKey ( ) . get ( ) ) ( METHOD_4 ( STRING_2 ) ) ( int i = 0 ) ( for (i <= INT_1) ) ( i ++ ) ( endfor ) ( java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ) ( METHOD_4 ( VAR_1 , change ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ) ( TYPE_2 < TYPE_3 > repo = METHOD_3 ( STRING_1 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_4 ( repo ) ) ) ( com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_4 ( repo ) ) ) ( TYPE_1 . METHOD_5 ( 0 , VAR_4 ) ) ( METHOD_6 ( STRING_2 ) ) ( METHOD_6 ( STRING_3 , VAR_3 ) ) ( METHOD_6 ( STRING_4 , VAR_3 ) ) ( METHOD_6 ( STRING_5 , VAR_3 ) ) ( METHOD_6 ( STRING_6 , VAR_3 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( ) ) ( try ) ( end-try ) ( return new TYPE_2 ( server ) ; ) ( end-catch ) ( catch (TYPE_3 VAR_1) ) ( return new TYPE_1 ( ) { public void METHOD_1 ( TYPE_4 . Account account , TYPE_5 info ) throws TYPE_3 { throw VAR_1 ; } } ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change.Id METHOD_1( java.lang.String ref ) ) ( int VAR_1 = ( ref . METHOD_2 ( TYPE_1 ) ) + ( TYPE_1 . length ( ) ) ) ( int VAR_2 = TYPE_2 . METHOD_3 ( ref , VAR_1 ) ) ( java.lang.String id = ref . METHOD_4 ( VAR_1 , VAR_2 ) ) ( return new com.google.gerrit.reviewdb.client.Change . Id ( TYPE_3 . METHOD_5 ( id ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.util.List < TYPE_1 > in ) ) ( java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ) ( for (TYPE_1 m : in) ) ( endfor ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( for (TYPE_2 c : VAR_1 . METHOD_3 ( )) ) ( endfor ) ( r . add ( new TYPE_1 ( c , VAR_2 ) ) ) ( endif ) ( r . add ( m ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse res ) ) ( byte [ ] msg = TYPE_3 . message ( VAR_1 ) ) ( res . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , STRING_1 ) ) ( res . METHOD_4 ( msg . length ) ) ( try ) ( end-try ) ( TYPE_5 . METHOD_5 ( res ) ) ( finally ) ( TYPE_6 out = res . METHOD_6 ( ) ) ( try ) ( end-try ) ( out . METHOD_7 ( msg ) ) ( finally ) ( out . close ( ) ) ( end-finally ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( final java.lang.String s = METHOD_2 ( ) ) ( if ( ( s == null ) || ( ( s . length ( ) ) == 0 ) ) ) ( return STRING_1 ; ) ( endif ) ( final java.lang.String [ ] VAR_1 = s . METHOD_3 ( STRING_2 ) ) ( if ( ( VAR_1 . length ) < INT_1 ) ) ( return STRING_1 ; ) ( endif ) ( return VAR_1 [ 2 ] ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final java.lang.String VAR_1 ) ) ( final com.google.gerrit.reviewdb.client.Account.Id id ) ( try ) ( end-try ) ( id = TYPE_2 . METHOD_2 ( VAR_1 ) ) ( end-catch ) ( catch (TYPE_3 VAR_2) ) ( return null ; ) ( try ) ( end-try ) ( final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_3 ( ) ) ( try ) ( end-try ) ( return auth ( db . METHOD_4 ( ) . get ( id ) ) ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( METHOD_5 ( ) . log ( STRING_1 , e ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void close( ) ) ( try ) ( end-try ) ( TYPE_1 VAR_1 = METHOD_1 ( ) ) ( if ( VAR_1 != null ) ) ( while ( ( VAR_1 . METHOD_2 ( ) ) != ( - 1 ) ) ) ( endwhile ) ( endif ) ( finally ) ( VAR_2 . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 ) ) ( VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . add ( new TYPE_3 ( TYPE_4 . METHOD_2 ( ) ) ) ) ( VAR_3 = new TYPE_5 ( STRING_1 , STRING_1 ) ) ( VAR_2 . add ( VAR_3 ) ) ( VAR_1 . add ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.PatchSet> METHOD_1( TYPE_1 . ChangeInfo info ) ) ( TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_2 ( ) . values ( ) ) ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ( java.util.List < com.google.gerrit.reviewdb.client.PatchSet > r = new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSet > ( VAR_1 . length ( ) ) ) ( for (TYPE_3 VAR_2 : TYPE_4 . METHOD_4 ( VAR_1 )) ) ( endfor ) ( r . add ( TYPE_5 . METHOD_5 ( info , VAR_2 ) ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( java.io.IOException VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) ) ( if ( ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) || ( VAR_1 instanceof TYPE_2 ) ) ) ( return false ; ) ( endif ) ( METHOD_3 ( VAR_1 . getMessage ( ) ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_4 ( cfg . METHOD_5 ( ) ) ) ( end-catch ) ( catch (TYPE_4 e) ) ( TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ( return false ; ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 ) ( java.lang.String VAR_2 = STRING_2 ) ( TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ) ( org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( org.junit.Assert.assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) ) ( org.junit.Assert.assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) ) ( for (java.lang.String VAR_2 : TYPE_5 . METHOD_4 ( ) . METHOD_5 ( )) ) ( endfor ) ( org.junit.Assert.assertEquals ( TYPE_5 . METHOD_4 ( ) . get ( VAR_2 ) . METHOD_6 ( ) , VAR_1 . get ( VAR_2 ) . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 t ) ) ( if ( t . METHOD_2 ( ) ) ) ( return new TYPE_2 ( ( ( this . METHOD_3 ( ) ) - ( t . METHOD_3 ( ) ) ) ) ; ) ( endif ) ( return new TYPE_3 ( ( ( this . VAR_1 ) - ( t . METHOD_4 ( ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( final TYPE_2 VAR_1 , final java.lang.String query , final int VAR_2 ) ) ( final int n = ( VAR_2 <= 0 ) ? INT_1 : TYPE_3 . METHOD_2 ( VAR_2 , INT_1 ) ) ( return TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( query ) , n ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 VAR_1 , TYPE_3 input ) ) ( TYPE_7 in = new TYPE_7 ( ) ) ( VAR_2 = TYPE_8 . of ( VAR_1 . METHOD_1 ( ) . toString ( ) ) ) ( return delete . get ( ) . apply ( VAR_1 , in ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( int index , TYPE_2 VAR_1 ) ) ( int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ) ( if ( VAR_2 < 0 ) ) ( return null ; ) ( endif ) ( return METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ) ( modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ) ( modules.add ( VAR_3 . METHOD_2 ( VAR_4 class ) ) ) ( modules.add ( VAR_1 . METHOD_2 ( VAR_5 class ) ) ) ( modules.add ( TYPE_3 . METHOD_3 ( ) ) ) ( modules.add ( TYPE_4 . METHOD_3 ( ) ) ) ( return VAR_3 . METHOD_4 ( modules ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = METHOD_2 ( STRING_1 ) ) ( org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) ) ( TYPE_2 VAR_2 = METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_3 class ) ) ( TYPE_3 . METHOD_7 ( user , VAR_2 ) ) ( METHOD_8 ( STRING_2 , admin , user ) ) ( r . METHOD_9 ( ) ) ( org.junit.Assert.assertEquals ( VAR_4 , METHOD_10 ( STRING_1 ) ) ) ( METHOD_8 ( STRING_2 , admin ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ) ( id = TYPE_2 . METHOD_2 ( VAR_4 ) ) ( TYPE_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( ( STRING_1 + ( VAR_4 ) ) ) ) ( change = new com.google.gerrit.reviewdb.client.Change ( null , id , null , null , TYPE_4 . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String id ) ) ( try ) ( end-try ) ( TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) ( TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ) ( VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final java.lang.String token ) ) ( if ( TYPE_2 . METHOD_2 ( ) ) ) ( return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; ) ( endif ) ( TYPE_1 r = new TYPE_3 ( null ) ) ( r . METHOD_4 ( true ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = VAR_2 . get ( new TYPE_1 . NameKey ( STRING_1 ) ) ) ( METHOD_1 ( ( STRING_2 + ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) , VAR_1 ) ) ( METHOD_1 ( ( STRING_2 + ( VAR_1 . getName ( ) ) ) , VAR_1 ) ) ( METHOD_1 ( ( STRING_2 + ( VAR_1 . getId ( ) . get ( ) ) ) , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void index( com.google.gerrit.reviewdb.client.Account.Id id ) ) ( for (TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( )) ) ( endfor ) ( VAR_1 . METHOD_2 ( id ) ) ( TYPE_3 < TYPE_2 > VAR_2 = VAR_1 . get ( id ) ) ( if ( VAR_2 . METHOD_3 ( ) ) ) ( i . METHOD_4 ( VAR_2 . get ( ) ) ) ( endif ) ( i . delete ( id ) ) ( METHOD_5 ( id . get ( ) ) ) ( TYPE_4 . METHOD_6 ( id ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 view , java.lang.String name ) ) ( java.util.List < java.lang.String > values = view . METHOD_2 ( ) . get ( name ) ) ( return ( ! ( values . isEmpty ( ) ) ) && ( ( values . get ( 0 ) . equals ( STRING_1 ) ) || ( values . get ( 0 ) . equals ( STRING_2 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( for (java.lang.String s : new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 }) ) ( endfor ) ( VAR_1 . METHOD_3 ( s ) ) ( TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 ) ) ( TYPE_2 . METHOD_5 ( STRING_9 , STRING_10 ) ) ( TYPE_2 . METHOD_5 ( STRING_11 , STRING_12 ) ) ( TYPE_2 . METHOD_5 ( STRING_13 , STRING_10 ) ) ( TYPE_2 . METHOD_5 ( STRING_14 , STRING_12 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) ) ( if ( VAR_2 != null ) ) ( VAR_1 . append ( CHAR_1 ) ) ( boolean VAR_3 = true ) ( for (final TYPE_2 VAR_4 : VAR_2) ) ( endfor ) ( if ( VAR_3 ) ) ( VAR_3 = false ) ( endif ) ( VAR_1 . append ( CHAR_2 ) ) ( VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) ( VAR_1 . append ( CHAR_3 ) ) ( endif ) ( VAR_1 . append ( VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 a , TYPE_2 VAR_1 ) ) ( org.junit.Assert . METHOD_2 ( ( ( VAR_2 . get ( ) ) == ( VAR_3 ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . name ) ) ( org.junit.Assert.assertEquals ( a . email , VAR_1 . email ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String projectName , java.lang.String revision , java.lang.String VAR_1 ) ) ( if ( ( VAR_2 ) != null ) ) ( return METHOD_2 ( revision . METHOD_3 ( STRING_1 , METHOD_4 ( projectName ) ) . METHOD_3 ( STRING_2 , METHOD_4 ( revision ) ) . METHOD_3 ( STRING_3 , METHOD_4 ( VAR_1 ) ) . toString ( ) ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( ( STRING_2 + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<java.lang.String> METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ( VAR_2 . get ( VAR_1 ) ) == null ) ) ( TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ) ( VAR_4 . METHOD_2 ( VAR_3 ) ) ( VAR_2 . put ( VAR_1 , VAR_3 . METHOD_1 ( ) ) ) ( endif ) ( return VAR_2 . get ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( false ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; display ( result ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( for (TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( )) ) ( endfor ) ( for (TYPE_3 VAR_3 : VAR_2 . METHOD_3 ( )) ) ( endfor ) ( VAR_3 . METHOD_4 ( METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) ) ( VAR_4 . put ( VAR_1 . METHOD_7 ( ) , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( db ) != null ) ) ( try ) ( end-try ) ( final TYPE_1 ps = METHOD_2 ( ) ) ( if ( ps != null ) ) ( for (final TYPE_2 w : METHOD_3 ( )) ) ( endfor ) ( if ( w . METHOD_4 ( ) ) ) ( add ( VAR_1 , w . getAccountId ( ) ) ) ( endif ) ( endif ) ( end-catch ) ( catch (TYPE_3.OrmException err) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 , VAR_7 , VAR_4 ) . to ( VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_9 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 . NameKey project , final TYPE_2 . PatchSet ps ) ) ( final TYPE_3 r = new TYPE_3 ( ) ) ( TYPE_4 . p ( r , project ) ) ( TYPE_4 . METHOD_2 ( r , ps ) ) ( return ( VAR_1 ) + r ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_10 ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 in = new TYPE_2 ( ) ) ( VAR_2 = VAR_1 ) ( VAR_3 = VAR_4 . FALSE ) ( TYPE_3 r = VAR_5 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ) ( org.junit.Assert.assertEquals ( VAR_6 , r . METHOD_2 ( ) ) ) ( r . METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_1 . changeId , admin , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_5 ( VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 cfg , TYPE_3 VAR_1 , TYPE_4 . Factory VAR_2 , TYPE_5 < TYPE_6 > VAR_3 , TYPE_7 VAR_4 ) ) ( TYPE_1 s = new TYPE_1 ( cfg , null , VAR_1 , VAR_2 , VAR_3 , null , null , null ) ) ( for (TYPE_9 view : TYPE_10 . values ( )) ) ( endfor ) ( s . METHOD_2 ( view , VAR_4 ) ) ( return s ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( final java.lang.String VAR_2 = STRING_2 ) ( final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ) ( org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) ) ( org.junit.Assert.assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_1 VAR_1 ) ) ( TYPE_3 . line VAR_2 ) ( TYPE_4 name ) ( TYPE_5 VAR_3 ) ( VAR_4 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( java.lang.String VAR_1 = VAR_2 . METHOD_2 ( 0 , ( ( VAR_2 . METHOD_3 ( STRING_1 ) ) - 1 ) ) ) ( java.lang.String VAR_3 = VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) ( METHOD_4 ( VAR_4 , VAR_1 , VAR_3 ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final int i ) ) ( final int s = VAR_1 . get ( i ) . METHOD_2 ( ) ) ( final int e = VAR_1 . get ( ( i - 1 ) ) . METHOD_3 ( ) ) ( return ( s - e ) <= ( 2 * ( VAR_2 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ) ( try ) ( end-try ) ( return VAR_2 . get ( VAR_3 . get ( ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getParentKey ( ) , ( ( VAR_1 . get ( ) ) - 1 ) ) ) ; ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new TYPE_2 ( e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( if ( ( VAR_2 ) != null ) ) ( VAR_3 . METHOD_4 ( VAR_4 , VAR_2 . METHOD_5 ( ) ) ) ( endif ) ( VAR_5 . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( final com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ) ( final com.google.gerrit.reviewdb.client.PatchSet ps = db . patchSets ( ) . get ( psId ) ) ( if ( ps == null ) ) ( throw new TYPE_1 ( ) ) ( endif ) ( try ) ( end-try ) ( return org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ps . getRevision ( ) . get ( ) ) ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( VAR_1 . error ( ( ( STRING_1 + psId ) + STRING_2 ) ) ) ( throw new TYPE_1 ( ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String branch , java.lang.String topic ) ) ( if ( ( topic != null ) && ( ! ( topic . isEmpty ( ) ) ) ) ) ( return ( ( branch + STRING_1 ) + topic ) + STRING_2 ; ) ( endif ) ( return branch ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Set < TYPE_1 > VAR_1 ) ) ( java.util.Map < TYPE_1 , byte [ ] > VAR_2 = new TYPE_3 < > ( ) ) ( for (TYPE_1 VAR_3 : VAR_1) ) ( endfor ) ( VAR_2 . put ( VAR_3 , null ) ) ( return TYPE_4 . METHOD_1 ( repo , message , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_2 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) ) ( METHOD_3 ( db ) ) ( endif ) ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ) ( try ) ( end-try ) ( METHOD_3 ( db ) ) ( finally ) ( db . close ( ) ) ( end-finally ) ( synchronized ( VAR_3 ) ) ( VAR_3 . update ( 1 ) ) ( end-synchronized ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final int VAR_1 ) ) ( value = VAR_1 ) ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( 2 * VAR_1 ) ) + STRING_2 ) ) ) ( msg . METHOD_3 ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( void setOf( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) ) ( < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > key = ( ( TYPE_4 . Key < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > ) ( TYPE_5 . get ( TYPE_6 . METHOD_1 ( VAR_2 . DynamicSet class , VAR_1 . METHOD_2 ( ) ) ) ) ) ) ( binder . bind ( key ) . METHOD_3 ( new TYPE_7 < TYPE_1 > ( VAR_1 ) ) . in ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = TYPE_2 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ) ( TYPE_3 u = METHOD_2 ( c , VAR_1 ) ) ( u . METHOD_3 ( c . METHOD_4 ( ) ) ) ( u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ) ( u . commit ( ) ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( boolean equals( TYPE_1 VAR_1 ) ) ( if ( VAR_1 instanceof TYPE_2 ) ) ( TYPE_2 r = ( ( TYPE_2 ) ( VAR_1 ) ) ) ( return ( ( ( ( TYPE_3 . equals ( name , r . name ) ) && ( TYPE_3 . equals ( id , r . id ) ) ) && ( TYPE_3 . equals ( type , r . type ) ) ) && ( TYPE_3 . equals ( VAR_2 , VAR_3 ) ) ) && ( TYPE_3 . equals ( VAR_4 , VAR_5 ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( TYPE_3 VAR_1 = METHOD_3 ( repo , VAR_2 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( VAR_1 ) ) ( TYPE_3 VAR_4 = METHOD_3 ( repo , VAR_5 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_6 = insert ( VAR_4 ) ) ( METHOD_4 ( STRING_2 , VAR_3 ) ) ( METHOD_4 ( STRING_3 , VAR_3 ) ) ( METHOD_4 ( STRING_4 , VAR_3 ) ) ( METHOD_4 ( STRING_5 , VAR_6 ) ) ( METHOD_4 ( STRING_6 , VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 event ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( VAR_1 . METHOD_3 ( ) ) ( endif ) ( if ( ( VAR_2 . METHOD_4 ( event ) ) && ( ( VAR_3 ) > 0 ) ) ) ( TYPE_2 . METHOD_5 ( STRING_1 , VAR_3 ) ) ( VAR_3 = 0 ) ( endif ) ( if ( ( ( VAR_3 ) % INT_1 ) == 0 ) ) ( TYPE_2 . error ( STRING_2 , VAR_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ) ( int e = VAR_1 . METHOD_4 ( CHAR_1 ) ) ( TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) ) ( return new TYPE_1 ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( VAR_1 = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( STRING_1 ) ) ( name = new TYPE_1 . NameKey ( STRING_2 ) ) ( VAR_2 = METHOD_3 ( ) ) ( VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 . Repository class ) ) ( VAR_5 = TYPE_2 . METHOD_4 ( VAR_6 class ) ) ( VAR_7 = TYPE_2 . METHOD_4 ( VAR_8 . Factory class ) ) ( VAR_9 = TYPE_2 . METHOD_4 ( VAR_10 class ) ) ( VAR_11 = new java.util.ArrayList < TYPE_3 > ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse rsp ) ) ( TYPE_3 VAR_1 = VAR_2 . get ( req . METHOD_2 ( ) ) ) ( if ( VAR_1 == null ) ) ( rsp . METHOD_3 ( VAR_3 ) ) ( return ; ) ( endif ) ( switch ( VAR_1 . METHOD_4 ( ) ) ) ( end-switch ) ( case VAR_4 : ) ( METHOD_5 ( VAR_1 , req , rsp ) ) ( break ; ) ( case VAR_5 : ) ( METHOD_6 ( VAR_1 , req , rsp ) ) ( break ; ) ( default : ) ( rsp . METHOD_3 ( VAR_3 ) ) ( break ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_3 . Result r = METHOD_2 ( ) ) ( VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . revision ( r . METHOD_3 ( ) . name ( ) ) . METHOD_1 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , java.lang.Exception error ) ) ( if ( VAR_2 . METHOD_2 ( ) ) ) ( VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) . getName ( ) , error ) ) ) ( endif ) ( VAR_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_4 ( ) . getName ( ) , error . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ) ( if ( ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( VAR_2 . METHOD_5 ( ) ) ) ) ) ( return false ; ) ( endif ) ( endif ) ( return ( METHOD_6 ( VAR_3 ) ) && ( METHOD_7 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , STRING_2 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . of ( TYPE_4 . METHOD_3 ( STRING_3 ) ) , VAR_3 ) ) ( org.junit.Assert.assertEquals ( STRING_4 , VAR_2 . format ( VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( final TYPE_1 cm = VAR_1 . create ( VAR_2 ) ) ( cm . METHOD_1 ( VAR_3 . getAccountId ( ) ) ) ( cm . METHOD_2 ( VAR_4 , result . info ) ) ( cm . METHOD_3 ( ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_5 = VAR_4 . getId ( ) ) ( VAR_6 . error ( ( STRING_1 + VAR_5 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ( VAR_2 ) != ( this ) ) ) ( return VAR_2 . METHOD_1 ( VAR_1 ) ; ) ( endif ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( return VAR_3 ; ) ( endif ) ( if ( ( this ) == VAR_1 ) ) ( return VAR_4 ; ) ( endif ) ( int VAR_5 = ( this . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ) ( if ( VAR_5 != 0 ) ) ( return VAR_5 ; ) ( endif ) ( throw new TYPE_3 ( STRING_1 ) ) ( CFG Exit )
( CFG Entry ) ( C METHOD_1( C c , java.lang.String path , TYPE_2 VAR_1 , int line , java.lang.String message ) ) ( c . path = path ) ( VAR_2 = VAR_1 ) ( c . line = ( line != 0 ) ? line : null ) ( c . message = message ) ( if ( line != 0 ) ) ( TYPE_3 VAR_3 = new TYPE_3 ( ) ) ( VAR_4 = 1 ) ( VAR_5 = 1 ) ( VAR_6 = 1 ) ( VAR_7 = INT_1 ) ( VAR_8 = VAR_3 ) ( endif ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 class , VAR_2 ) ) ( bind ( VAR_3 class ) ) ( bind ( VAR_4 class ) . in ( VAR_1 class ) ) ( bind ( VAR_5 class ) . METHOD_3 ( this ) ) ( bind ( VAR_6 class ) . METHOD_3 ( config . METHOD_4 ( ) ) ) ( install ( new TYPE_1 ( ) . METHOD_5 ( VAR_7 . Factory class ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( rpc ( VAR_1 class ) ) ( rpc ( VAR_2 class ) ) ( rpc ( VAR_3 class ) ) ( install ( new TYPE_1 ( ) ) ) ( install ( new TYPE_2 ( ) ) ) ( install ( new TYPE_3 ( ) ) ) ( install ( new TYPE_4 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 rsrc ) ) ( TYPE_2 user = ( ( TYPE_2 ) ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_4 ( change , user . METHOD_5 ( ) , rsrc . METHOD_6 ( ) , message . getMessage ( ) , VAR_2 , db ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_3 . METHOD_7 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 r = VAR_2 . get ( VAR_1 ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ) ( return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } . METHOD_6 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String changeId = METHOD_2 ( STRING_1 ) . getChangeId ( ) ) ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( boolean VAR_1 = ( VAR_2 . METHOD_2 ( VAR_3 class ) ) == null ) ( boolean VAR_4 = ( ( VAR_2 . METHOD_2 ( VAR_5 class ) ) == null ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( VAR_5 class ) ) == null ) ) ( METHOD_4 ( config ( VAR_2 ) , VAR_1 , VAR_4 ) ) ( base . METHOD_1 ( ) ) ( METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ) ( if ( METHOD_2 ( ) ) ) ( VAR_1 = VAR_2 . get ( ) ) ( VAR_1 . METHOD_3 ( ctx ) ) ( return ; ) ( endif ) ( if ( c . currentPatchSetId ( ) . equals ( psId ) ) ) ( c . METHOD_4 ( METHOD_5 ( ctx ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( java.lang.String name , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , TYPE_2 VAR_5 ) ) ( TYPE_6 VAR_6 = VAR_7 . get ( ) ) ( return new TYPE_1 ( METHOD_1 ( VAR_1 ) , VAR_4 , VAR_2 , VAR_1 , VAR_3 , new TYPE_7 ( METHOD_1 ( VAR_1 ) , VAR_6 , VAR_1 ) , VAR_5 , VAR_6 . METHOD_2 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . Change change , final TYPE_2 . Id psId , final TYPE_3 . Id VAR_1 , final TYPE_4 . Id VAR_2 , final TYPE_1 . ReviewDb db , final TYPE_5 VAR_3 ) ) ( final TYPE_1 . PatchSetApproval VAR_4 = new TYPE_1 . PatchSetApproval ( new TYPE_7 . Key ( psId , VAR_1 , VAR_2 ) , ( ( short ) ( 0 ) ) ) ) ( VAR_4 . METHOD_2 ( change ) ) ( db . METHOD_3 ( ) . insert ( java.util.Collections.singleton ( VAR_4 ) , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String name = VAR_1 . getName ( ) ) ( if ( name . METHOD_2 ( STRING_1 ) ) ) ( name = name . METHOD_3 ( 0 , name . METHOD_4 ( CHAR_1 ) ) ) ( endif ) ( int VAR_2 = name . METHOD_4 ( CHAR_1 ) ) ( return 0 < VAR_2 ? name . METHOD_3 ( 0 , VAR_2 ) : name ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ( com.google.gerrit.reviewdb.client.Account.Id id = METHOD_2 ( ) . METHOD_4 ( ) . getAccountId ( ) ) ( return id . equals ( getChange ( ) . METHOD_5 ( ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ChangeInfo in = new TYPE_1 . ChangeInfo ( ) ) ( in . branch = VAR_1 ) ( VAR_2 = STRING_1 ) ( in . project = project . get ( ) ) ( TYPE_1 . ChangeInfo info = VAR_3 . changes ( ) . create ( in ) . get ( ) ) ( org.junit.Assert.assertEquals ( in . project , info . project ) ) ( org.junit.Assert.assertEquals ( in . branch , info . branch ) ) ( org.junit.Assert.assertEquals ( VAR_2 , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { } protected void METHOD_4 ( ) { TYPE_4 . METHOD_5 ( VAR_2 , true ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) ) ( TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) ( return VAR_4 . to ( git , STRING_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 cm ) ) ( return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_2 ( ) . METHOD_3 ( ) ) { cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ; } } } ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( return VAR_2 ; ) ( endif ) ( final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ) ( msg . append ( STRING_1 ) ) ( msg . append ( STRING_2 ) ) ( if ( VAR_2 ) ) ( msg . append ( STRING_3 ) ) ( endif ) ( msg . append ( STRING_4 ) ) ( msg . append ( STRING_5 ) ) ( msg . append ( STRING_6 ) ) ( return VAR_1 . METHOD_3 ( msg . toString ( ) , name ) ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( ) ) ( if ( VAR_1 ) ) ( return TYPE_1 . getRevision ( ) ; ) ( endif ) ( if ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ( return null ; ) ( endif ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_3 ( METHOD_4 ( ) ) ) ( end-try ) ( TYPE_2 ref = repo . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getRefName ( ) ) ) ( return ref != null ? ref . METHOD_7 ( ) : null ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 , 1 ) ) ( TYPE_2 update = METHOD_3 ( c , VAR_1 ) ) ( update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ) ( update . commit ( ) ) ( org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) ) ( METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ( VAR_3 . METHOD_3 ( VAR_2 ) ) ( VAR_3 . METHOD_4 ( STRING_2 , VAR_4 . METHOD_5 ( VAR_1 ) ) ) ( METHOD_6 ( VAR_1 ) ) ( VAR_3 . close ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_1 event = new TYPE_1 ( VAR_1 ) ) ( for (com.google.gerrit.reviewdb.client.Project.NameKey p : VAR_2 . METHOD_2 ( )) ) ( endfor ) ( long size = VAR_3 . get ( p ) . get ( ) ) ( event . METHOD_3 ( size , p . get ( ) ) ) ( return event ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int id , java.lang.String commit , java.lang.String base , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) ) ( TYPE_3 VAR_2 = TYPE_3 . create ( ) ) ( VAR_2 . METHOD_2 ( base ) ) ( TYPE_4 . METHOD_3 ( id , commit , STRING_1 ) . METHOD_4 ( VAR_2 , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<java.lang.String> METHOD_1( TYPE_1 req ) ) ( java.util.Set < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( java.lang.String [ ] values = req . METHOD_3 ( STRING_1 ) ) ( if ( values != null ) ) ( VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ) ( endif ) ( values = req . METHOD_3 ( STRING_2 ) ) ( if ( values != null ) ) ( VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( org.eclipse.jgit.lib.ObjectId [ ] VAR_1 , long [ ] VAR_2 , boolean [ ] VAR_3 ) ) ( java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList ( VAR_1 . length ) ) ( int i = 0 ) ( for (i < ( VAR_1 . length )) ) ( i ++ ) ( endfor ) ( VAR_4 . add ( new TYPE_1 ( VAR_1 [ i ] . name ( ) , new TYPE_2 ( VAR_2 [ i ] ) , VAR_3 [ i ] ) ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 . Id VAR_1 , final TYPE_2 . NameKey VAR_2 ) ) ( final TYPE_3 e = TYPE_4 . METHOD_2 ( ) . get ( VAR_2 ) ) ( if ( e == null ) ) ( return false ; ) ( endif ) ( final java.util.Set < TYPE_5 . Id > VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) ( return TYPE_6 . METHOD_5 ( VAR_3 , e , VAR_4 , ( ( short ) ( 1 ) ) , true ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 . getAccountId ( ) , 1 ) ) ( TYPE_2 update = METHOD_3 ( c , VAR_1 ) ) ( update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ) ( update . commit ( ) ) ( org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) ) ( METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ) ( try ) ( end-try ) ( java.lang.String line ) ( while ( ( line = VAR_1 . METHOD_1 ( ) ) != null ) ) ( endwhile ) ( VAR_2 . error ( ( STRING_2 + line ) ) ) ( finally ) ( VAR_1 . close ( ) ) ( end-finally ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_2 . METHOD_2 ( STRING_3 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( METHOD_2 ( ) ) ( METHOD_3 ( ctx ) ) ( ctx . METHOD_4 ( new TYPE_4 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_5 ( ) , commit , METHOD_6 ( ) . METHOD_7 ( ) , VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.revwalk.RevWalk VAR_1 , TYPE_2 notes , com.google.gerrit.reviewdb.client.PatchSet patchSet ) ) ( try ) ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) ( end-try ) ( return METHOD_1 ( db , VAR_1 , notes , patchSet ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_2 . error ( STRING_1 , e ) ) ( return new TYPE_1 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) ) ( TYPE_1 input = new TYPE_1 ( ) ) ( input . ref = STRING_2 ) ( VAR_4 . METHOD_3 ( VAR_5 class ) ) ( VAR_4 . METHOD_4 ( STRING_3 ) ) ( METHOD_5 ( input . ref ) . create ( input ) ) ( CFG Exit )
( CFG Entry ) ( void submit( ) ) ( TYPE_3 . Result r = METHOD_1 ( ) ) ( TYPE_4 VAR_1 = VAR_2 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_2 ( ) ) ( VAR_1 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ) ( VAR_1 . submit ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.ObjectId id ) ) ( TYPE_1 r = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> METHOD_1( ) ) ( java.util.List < com.google.gerrit.reviewdb.client.Project > VAR_1 = METHOD_2 ( ) ) ( final java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_2 = new java.util.ArrayList < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_1 . size ( ) ) ) ( for (com.google.gerrit.reviewdb.client.Project p : VAR_1) ) ( endfor ) ( VAR_2 . add ( p . METHOD_3 ( ) ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final TYPE_1 user = VAR_1 . METHOD_1 ( ) ) ( if ( user . METHOD_2 ( ) ) ) ( TYPE_2 VAR_2 = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ) ( VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) ) ( return VAR_2 ; ) ( endif ) ( return user ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( METHOD_3 ( ) ) ( TYPE_2 . METHOD_4 ( true ) ) ( VAR_2 . METHOD_5 ( cd ) ) ( VAR_2 . METHOD_6 ( id ) ) ( TYPE_2 . METHOD_7 ( ) ) ( METHOD_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( for (TYPE_1 VAR_1 : VAR_2) ) ( endfor ) ( METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ) ( VAR_2 . METHOD_1 ( ) ) ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) ) ( VAR_5 = null ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line , final boolean edit ) ) ( TYPE_3 . METHOD_2 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , ( edit ? new TYPE_6 ( id , line ) : new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,java.util.List<TYPE_1>> METHOD_1( TYPE_2 config ) ) ( java.util.Map < java.lang.String , java.util.List < TYPE_1 > > VAR_1 = TYPE_3 . METHOD_2 ( ) ) ( java.util.Set < java.lang.String > VAR_2 = config . METHOD_3 ( VAR_3 , true ) ) ( for (java.lang.String key : VAR_2) ) ( endfor ) ( if ( key . METHOD_4 ( STRING_1 ) ) ) ( java.lang.String VAR_4 = config . METHOD_5 ( VAR_3 , null , key ) ) ( VAR_1 . put ( key , METHOD_6 ( VAR_4 ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void delete( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) ) ( final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) ( if ( VAR_2 == null ) ) ( throw new TYPE_1 ( STRING_1 ) ) ( endif ) ( METHOD_3 ( VAR_2 ) ) ( if ( ! VAR_1 ) ) ( METHOD_4 ( VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final com.google.gerrit.reviewdb.client.Project p ) ) ( VAR_1 . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = TYPE_2 . METHOD_3 ( VAR_2 . get ( VAR_3 ) ) ) ( n . METHOD_1 ( p . METHOD_4 ( ) ) ) ( VAR_2 . put ( VAR_3 , java.util.Collections . METHOD_5 ( n ) ) ) ( finally ) ( VAR_1 . METHOD_7 ( ) ) ( end-finally ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_4 . METHOD_6 ( STRING_1 , e ) ) ( METHOD_8 ( p ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) ) ( VAR_1 = db . METHOD_2 ( ) ) ( try ) ( end-try ) ( revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ) ( METHOD_3 ( ) ) ( finally ) ( VAR_1 . METHOD_4 ( ) ) ( VAR_1 = null ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_5 ( VAR_11 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 , TYPE_2 VAR_2 ) ) ( TYPE_3 get = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ) ( if ( VAR_2 != null ) ) ( get . METHOD_3 ( VAR_2 ) ) ( endif ) ( return METHOD_4 ( get ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ) ( servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( repo . METHOD_2 ( ) ) , new TYPE_9 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( factory ( VAR_1 . Factory class ) ) ( factory ( VAR_2 . Factory class ) ) ( factory ( VAR_3 . Factory class ) ) ( factory ( VAR_4 . Factory class ) ) ( factory ( VAR_5 . Factory class ) ) ( factory ( VAR_6 . Factory class ) ) ( factory ( VAR_7 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 r , TYPE_2 VAR_1 , TYPE_2 d ) ) ( VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ) ( TYPE_4 cfg = VAR_1 . METHOD_3 ( ) ) ( if ( ( VAR_2 . isEmpty ( ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) ) ( VAR_2 = TYPE_3 . METHOD_2 ( d ) ) ( endif ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( org.eclipse.jgit.lib.ObjectId id ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( end-try ) ( org.eclipse.jgit.revwalk.RevCommit c = rw . parseCommit ( id ) ) ( rw . METHOD_3 ( c ) ) ( return c ; ) ( finally ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet ps ) ) ( com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , project , ps . getId ( ) . getParentKey ( ) ) ) ( TYPE_4 ctl = cd . METHOD_2 ( ) ) ( return VAR_2 . METHOD_3 ( ctl , ps ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_2 ( id ) ) ( index . METHOD_3 ( VAR_1 . get ( id ) ) ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_4 ( ( STRING_1 + VAR_3 ) ) ) ( endif ) ( VAR_4 . METHOD_5 ( ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( VAR_5 . METHOD_5 ( ) ) ( throw e ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 in = new TYPE_1 ( ) ) ( VAR_1 = VAR_2 . TRUE ) ( TYPE_2 r = VAR_3 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ) ( org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ) ( r . METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( if ( type == ( VAR_1 . METHOD_2 ( ) ) ) ) ( VAR_1 . METHOD_3 ( VAR_2 ) ) ( TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( ) ) ( endif ) ( new TYPE_2 ( STRING_1 , type , VAR_1 ) . METHOD_1 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( ) ) ( METHOD_7 ( VAR_2 , VAR_3 , VAR_4 ) ) ( VAR_5 . METHOD_8 ( ) ) ( METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ) ( assertThat ( VAR_5 ) . METHOD_9 ( STRING_1 , VAR_2 ) . METHOD_10 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_11 ( VAR_10 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 , TYPE_1 . ChangeInfo c ) ) ( TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ) ( com.google.common.truth.Truth.assertThat ( ( ( int ) ( VAR_4 ) ) ) . isEqualTo ( ( - 1 ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_2 ( 1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . name ) . isEqualTo ( STRING_2 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ) ( assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) ( METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_2 ) ) ) ) ( METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_3 ) ) ) ) ( assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , final TYPE_4 < TYPE_1 > VAR_3 ) ) ( final TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ) ( METHOD_2 ( VAR_4 , new TYPE_6 ( ) { public void run ( ) { VAR_4 . set ( VAR_3 . get ( ) ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 input = new TYPE_1 ( ) ) ( VAR_1 = VAR_2 ) ( METHOD_2 ( user ) ) ( try ) ( end-try ) ( project ( ) . METHOD_3 ( input ) ) ( org.junit.Assert . METHOD_4 ( STRING_1 ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( VAR_2 ) ) ) ( METHOD_2 ( admin ) ) ( METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void walk( final org.eclipse.jgit.revwalk.RevWalk rw , final TYPE_1 VAR_1 , final org.eclipse.jgit.revwalk.RevCommit VAR_2 , final java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_3 ) ) ( rw . METHOD_1 ( VAR_1 ) ) ( for (org.eclipse.jgit.revwalk.RevCommit VAR_4 : VAR_3) ) ( endfor ) ( try ) ( end-try ) ( rw . METHOD_2 ( VAR_4 ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( rw . METHOD_3 ( VAR_2 ) ) ( org.eclipse.jgit.revwalk.RevCommit c ) ( while ( ( c = rw . METHOD_4 ( ) ) != null ) ) ( endwhile ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result r = METHOD_2 ( ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id psId = r . METHOD_3 ( ) ) ( com.google.gerrit.reviewdb.client.Change . Id id = psId . getParentKey ( ) ) ( TYPE_2 VAR_1 = METHOD_4 ( psId , user . getId ( ) , TYPE_3 . METHOD_5 ( ) , STRING_1 ) ) ( METHOD_4 ( psId , null , VAR_1 . METHOD_6 ( ) , STRING_2 ) ) ( VAR_2 . METHOD_7 ( id ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 account = VAR_2 . METHOD_2 ( VAR_1 ) ) ( TYPE_3 < TYPE_4 > VAR_3 = account . METHOD_3 ( ) ) ( for (TYPE_4 VAR_4 : VAR_3) ) ( endfor ) ( java.lang.String key = VAR_4 . METHOD_4 ( ) . getKey ( ) . get ( ) ) ( if ( key . METHOD_5 ( TYPE_5 ) ) ) ( return new TYPE_1 ( key . METHOD_6 ( TYPE_5 . length ( ) ) ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) ) ( if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) ( for (TYPE_6 VAR_5 : VAR_4) ) ( endfor ) ( try ) ( end-try ) ( VAR_5 . METHOD_4 ( event ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( util . METHOD_5 ( TYPE_7 . log , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2.NameKey,com.google.gerrit.reviewdb.client.Change.Id> METHOD_1( ) ) ( TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_4 . create ( ) ) ( for (com.google.gerrit.server.query.change.ChangeData cd : VAR_2) ) ( endfor ) ( VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd . getId ( ) ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( long METHOD_1( TYPE_1 p ) ) ( long VAR_1 = cfg . METHOD_2 ( STRING_1 , STRING_2 , 0 ) ) ( long VAR_2 = p . METHOD_3 ( ) ) ( if ( ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) ) ( return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; ) ( endif ) ( return TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < ? > VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) ) ( TYPE_4 VAR_4 = VAR_1 . git ( ) . METHOD_2 ( ) ) ( VAR_4 . METHOD_3 ( VAR_3 ) ) ( VAR_4 . METHOD_4 ( new TYPE_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) ) ) ) ( TYPE_6 < TYPE_1 > r = VAR_4 . METHOD_5 ( ) ) ( return TYPE_7 . METHOD_6 ( r ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ( VAR_1 = ( VAR_2 ) - ( ( TYPE_1 ) ( METHOD_3 ( ) ) ) ) ) ) ( TYPE_2 . ChangeInfo info = METHOD_4 ( METHOD_5 ( VAR_3 ) ) ) ( java.lang.String message = VAR_4 . get ( VAR_5 ) . commit . message ) ( com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . Change c ) ) ( long VAR_1 = c . METHOD_2 ( ) . METHOD_3 ( ) ) ( int id = c . getId ( ) . get ( ) ) ( c . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 , id ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project ) ) ( if ( ( VAR_1 ) != null ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( project ) . run ( ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_2 . error ( STRING_1 , e ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 p ) ) ( METHOD_2 ( p ) ) ( TYPE_3 . Result r = METHOD_3 ( STRING_1 ) ) ( r . METHOD_4 ( ) ) ( r . METHOD_5 ( VAR_1 , null ) ) ( r = METHOD_3 ( STRING_2 ) ) ( r . METHOD_4 ( ) ) ( r . METHOD_5 ( VAR_1 , null ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( METHOD_2 ( ) ) ( METHOD_3 ( ) ) ( VAR_1 = VAR_2 . get ( ctx . METHOD_4 ( ) , commit , psId ) ) ( ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , METHOD_7 ( ) . METHOD_8 ( ) , VAR_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String project , java.lang.String ref , TYPE_1 VAR_1 , TYPE_2 status , TYPE_3 . Status VAR_2 ) ) ( TYPE_4 event = new TYPE_4 ( project , ref , TYPE_5 . METHOD_2 ( VAR_1 ) , status , VAR_2 ) ) ( METHOD_3 ( project , event ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final int row ) ) ( METHOD_2 ( row ) ) ( METHOD_3 ( row , 0 , TYPE_1 . METHOD_4 ( ) ) ) ( METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_1 ) ) ( METHOD_7 ( row , 0 , STRING_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( METHOD_3 ( ) ) ( VAR_1 = VAR_2 ) ( switch ( VAR_3 . METHOD_4 ( ) ) ) ( end-switch ) ( case VAR_4 : ) ( METHOD_5 ( ) ) ( break ; ) ( case VAR_5 : ) ( case VAR_6 : ) ( case VAR_7 : ) ( default : ) ( METHOD_6 ( ) ) ( METHOD_7 ( ) ) ( METHOD_8 ( ) ) ( break ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( throw new com.google.gwtorm.server.OrmException ( VAR_2 ) ) ( endif ) ( if ( isEmpty ( ) ) ) ( return ; ) ( endif ) ( try ) ( TYPE_1 VAR_3 = VAR_4 . METHOD_3 ( VAR_5 ) ) ( end-try ) ( METHOD_4 ( ) ) ( TYPE_2 . METHOD_1 ( VAR_6 ) ) ( TYPE_2 . METHOD_1 ( VAR_7 ) ) ( finally ) ( close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.server.query.change.ChangeData> METHOD_1( ) ) ( TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_3 . create ( ) ) ( for (com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( )) ) ( endfor ) ( VAR_1 . put ( cd . change ( ) . getProject ( ) , cd ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) ( throw new TYPE_2 ( STRING_1 ) ) ( endif ) ( bind ( VAR_1 class ) . to ( VAR_2 class ) ) ( bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) ) ( com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_6 class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String projectName = METHOD_2 ( VAR_1 ) . get ( ) ) ( java.util.List < TYPE_1 > VAR_2 = new TYPE_2 < > ( ) ) ( TYPE_1 VAR_3 = new TYPE_1 ( ) ) ( VAR_3 . project = projectName ) ( VAR_2 . add ( VAR_3 ) ) ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ( java.util.List < TYPE_1 > VAR_5 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 ) ) ( TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ) ( TYPE_3 VAR_4 = VAR_2 . METHOD_3 ( ) ) ( try ) ( end-try ) ( VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , new TYPE_4 ( ( ( TYPE_5 . METHOD_5 ( ) ) - ( TYPE_6 . METHOD_6 ( VAR_1 , VAR_7 ) ) ) ) ) ) ) ( finally ) ( METHOD_7 ( VAR_4 ) ) ( METHOD_8 ( VAR_2 ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) ) ( rsp . METHOD_2 ( STRING_1 ) ) ( rsp . METHOD_3 ( STRING_2 ) ) ( final TYPE_4 out = rsp . METHOD_4 ( ) ) ( out . METHOD_5 ( STRING_3 ) ) ( out . METHOD_5 ( STRING_4 ) ) ( out . METHOD_5 ( STRING_5 ) ) ( out . METHOD_5 ( STRING_6 ) ) ( out . METHOD_5 ( STRING_7 ) ) ( out . close ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ) ( METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ) ( METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ) ( METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( change , ps ) ) ) ( try ) ( end-try ) ( VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( change ) . get ( ) , VAR_4 , VAR_5 ) ) ( org.junit.Assert . METHOD_5 ( ) ) ( end-catch ) ( catch (TYPE_1 e) ) ( org.junit.Assert.assertEquals ( STRING_1 , e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( try ) ( end-try ) ( for (TYPE_1 w : VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) )) ) ( endfor ) ( add ( VAR_2 , w . getAccountId ( ) ) ) ( end-catch ) ( catch (TYPE_2.OrmException err) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) ) ( TYPE_3 in = TYPE_3 . METHOD_2 ( ) ) ( java.lang.String n = TYPE_4 . METHOD_3 ( VAR_1 ) ) ( new TYPE_5 ( ( STRING_1 + n ) ) . METHOD_4 ( ) . data ( in ) . put ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( final org.eclipse.jgit.lib.Repository repo ) ) ( TYPE_1 VAR_1 = repo . METHOD_2 ( ) ) ( try ) ( end-try ) ( org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) ( VAR_1 . METHOD_3 ( ) ) ( return id ; ) ( finally ) ( VAR_1 . METHOD_4 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 info ) ) ( VAR_1 = info . METHOD_1 ( ) ) ( java.lang.String VAR_2 = info . METHOD_2 ( ) ) ( if ( ( VAR_2 != null ) && ( ! ( STRING_1 . equals ( VAR_2 ) ) ) ) ) ( p . insert ( new TYPE_2 ( VAR_1 ) , 0 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , null ) ) ( return ( VAR_1 != null ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 . getProject ( ) . METHOD_5 ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) ) ( bind ( VAR_3 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_4 ) ) . METHOD_4 ( new TYPE_2 ( STRING_1 , null , VAR_5 , null , false , ( STRING_2 + STRING_3 ) ) ) ) ( install ( new TYPE_3 ( ) { protected void METHOD_1 ( ) { METHOD_5 ( VAR_6 , VAR_7 . String class , VAR_8 class ) . METHOD_6 ( VAR_9 class ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String toString( ) ) ( java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ) ( b . append ( STRING_1 ) ) ( if ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( b . append ( ( ( STRING_2 + ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . get ( ) ) ) + STRING_3 ) ) ) ( endif ) ( return b . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( METHOD_2 ( ) ) != null ) ) ( final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ) ( r . append ( METHOD_2 ( ) ) ) ( r . append ( change . getChangeId ( ) ) ) ( return r . toString ( ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String url , TYPE_1 VAR_1 ) ) ( TYPE_2 r = VAR_2 . get ( url ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ) ( TYPE_3 . METHOD_3 ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_4 class ) ) ) ( CFG Exit )
( CFG Entry ) ( void add( TYPE_1 . ReviewDb db , java.util.List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) ) ( try ) ( end-try ) ( VAR_1 . add ( new TYPE_2 ( VAR_2 . getKey ( ) , TYPE_4 . METHOD_1 ( VAR_2 ) ) ) ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw e ) ( catch (TYPE_6 e) ) ( METHOD_2 ( db , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( switch ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ( end-switch ) ( case VAR_2 : ) ( return TYPE_3 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; ) ( case VAR_4 : ) ( return TYPE_5 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; ) ( default : ) ( throw new TYPE_6 ( STRING_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String query , int VAR_1 , int VAR_2 , java.util.Set < TYPE_1 > VAR_3 , TYPE_2 < TYPE_3 > VAR_4 ) ) ( TYPE_4 VAR_5 = TYPE_3 . METHOD_2 ( query ) ) ( if ( VAR_2 > 0 ) ) ( VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ) ( endif ) ( TYPE_3 . METHOD_4 ( VAR_5 , VAR_3 ) ) ( if ( VAR_1 != 0 ) ) ( VAR_5 . METHOD_3 ( STRING_2 , VAR_1 ) ) ( endif ) ( VAR_5 . get ( VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( try ) ( org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) ) ) ( end-try ) ( TYPE_1 ref = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ( if ( ( ref == null ) || ( ( ref . METHOD_6 ( ) ) == null ) ) ) ( return true ; ) ( endif ) ( return ! ( ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ) ; ) ( end-catch ) ( catch (java.io.IOException VAR_3) ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_3 < TYPE_1 > view = TYPE_4 . METHOD_2 ( ) ) ( TYPE_5 res = new TYPE_5 ( ) ) ( METHOD_3 ( VAR_1 , view , res ) ) ( METHOD_4 ( ( STRING_1 + ( res . getStatus ( ) ) ) , ( ( ( res . getStatus ( ) ) < INT_1 ) || ( ( res . getStatus ( ) ) >= INT_2 ) ) ) ) ( return view . get ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . METHOD_3 ( ) ) ) ( METHOD_2 ( b , b . append ( STRING_1 ) ) ) ( METHOD_2 ( b , b . METHOD_4 ( ) ) ) ( assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_1 p = new TYPE_1 ( ) ) ( VAR_1 = VAR_2 ) ( VAR_3 = true ) ( VAR_4 = true ) ( VAR_5 = VAR_6 ) ( VAR_7 = VAR_8 ) ( VAR_9 = VAR_10 ) ( VAR_11 = null ) ( VAR_12 = VAR_13 ) ( VAR_14 = VAR_15 ) ( VAR_16 = VAR_17 ) ( VAR_18 = false ) ( VAR_19 = true ) ( VAR_20 = false ) ( VAR_21 = VAR_22 ) ( VAR_23 = true ) ( VAR_24 = false ) ( VAR_25 = true ) ( VAR_26 = false ) ( VAR_27 = VAR_28 ) ( return p ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ) ( VAR_2 = TYPE_3 . METHOD_4 ( ) ) ( if ( TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ) ) ( VAR_3 . METHOD_7 ( VAR_2 ) ) ( VAR_1 . add ( TYPE_2 . METHOD_8 ( ) , VAR_2 ) ) ( endif ) ( VAR_4 = TYPE_3 . METHOD_4 ( ) ) ( VAR_3 . METHOD_7 ( VAR_4 ) ) ( VAR_1 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ) ( TYPE_2 u = util . user ( VAR_3 ) ) ( METHOD_5 ( STRING_2 , u . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 < TYPE_1 > VAR_1 ) ) ( try ) ( end-try ) ( java.util.List < TYPE_1 > result = new TYPE_4 ( args . rw , VAR_2 , VAR_3 ) . METHOD_1 ( VAR_1 ) ) ( java.util.Collections . METHOD_1 ( result , VAR_4 ) ) ( return result ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ) ( if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( for (TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_4 ( )) ) ( endfor ) ( if ( ( cmd . METHOD_5 ( ) ) == ( VAR_4 ) ) ) ( METHOD_1 ( project , cmd , util . METHOD_6 ( VAR_2 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change change , org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( change.getId ( ) ) ) ( org.eclipse.jgit.lib.ObjectId VAR_3 = VAR_1 . METHOD_3 ( repo , VAR_2 ) ) ( VAR_1 . add ( new TYPE_3 . ReceiveCommand ( VAR_3 , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( TYPE_1 rsrc ) ) ( com.google.gerrit.reviewdb.client.Change VAR_1 = VAR_2 . get ( ) . changes ( ) . METHOD_2 ( rsrc . getChange ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_3 ) ) { change . METHOD_3 ( VAR_4 ) ; TYPE_3 . METHOD_4 ( change ) ; } return change ; } } ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) ) ( TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ) ( if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) ) ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) ( return ; ) ( endif ) ( TYPE_7 rsp = new TYPE_7 ( req , ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) ( if ( METHOD_3 ( req , rsp ) ) ) ( VAR_3 . METHOD_1 ( req , rsp ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ) ( VAR_1 . project = project . get ( ) ) ( VAR_1 . branch = STRING_1 ) ( TYPE_2 r = VAR_2 . METHOD_2 ( STRING_2 , VAR_1 ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ) ( org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , admin , VAR_2 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( admin ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ) ( if ( c == null ) ) ( throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ) ( endif ) ( return VAR_1 . create ( c ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.Change> METHOD_1( ) ) ( com.google.gerrit.reviewdb.server.ReviewDb db = null ) ( try ) ( end-try ) ( db = VAR_1 . METHOD_2 ( ) ) ( return db . changes ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; ) ( finally ) ( if ( db != null ) ) ( db . close ( ) ) ( endif ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_2 . METHOD_5 ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ) ( return java.util.Collections . METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( TYPE_1 cm = VAR_1 . create ( change.getId ( ) ) ) ( cm . METHOD_1 ( change . METHOD_2 ( ) ) ) ( cm . METHOD_3 ( patchSet , VAR_2 ) ) ( cm . METHOD_4 ( VAR_3 ) ) ( cm . METHOD_5 ( reviewers ) ) ( cm . METHOD_6 ( VAR_4 ) ) ( cm . METHOD_7 ( ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( VAR_5 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) ) ( VAR_4 . METHOD_2 ( ) ) ( VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_2 , VAR_2 ) ) ( VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_3 , VAR_3 ) ) ( VAR_4 . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<?> METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ) ( try ) ( end-try ) ( return TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new TYPE_2 ( TYPE_2 . METHOD_5 ( ) ) , rw , VAR_1 ) ; ) ( finally ) ( rw . METHOD_6 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 VAR_1 ) ) ( if ( ( format ) == ( VAR_2 ) ) ) ( TYPE_6 VAR_3 = new TYPE_6 ( ) ) ( display ( VAR_3 ) ) ( return TYPE_7 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) ; ) ( endif ) ( format = VAR_4 ) ( return display ( null ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 id ) ) ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes = METHOD_2 ( id . METHOD_3 ( ) ) ) ( if ( ( changes . size ( ) ) != 1 ) ) ( throw new TYPE_4 ( id ) ) ( endif ) ( TYPE_6 VAR_2 ) ( try ) ( end-try ) ( VAR_2 = VAR_3 . METHOD_4 ( changes . get ( 0 ) ) ) ( end-catch ) ( catch (TYPE_7 e) ) ( throw new TYPE_4 ( id ) ) ( return new TYPE_1 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> METHOD_1( ) ) ( final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ( ( reviewers . size ( ) ) + ( VAR_2 . size ( ) ) ) ) ) ( VAR_1 . METHOD_2 ( reviewers ) ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( return java.util.Collections . METHOD_3 ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 ) ) ( db . changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ) ( TYPE_2 u = VAR_2 . create ( VAR_3 . METHOD_3 ( c , VAR_4 . create ( VAR_1 ) ) ) ) ( u . METHOD_4 ( c . METHOD_5 ( ) ) ) ( u . METHOD_6 ( c . METHOD_7 ( ) . get ( ) ) ) ( u . commit ( ) ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ) ( TYPE_2 info = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_3 class ) ) ( TYPE_3 . METHOD_5 ( admin , info ) ) ( com.google.gerrit.reviewdb.client.Account account = VAR_4 . get ( admin . getId ( ) ) . METHOD_6 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_5 ) . isEqualTo ( account . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < java.lang.String > e ) ) ( java.lang.String VAR_1 = e . getValue ( ) ) ( if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) ) ( VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ( view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 to( java.lang.String ref ) ) ( TYPE_3 . add ( git , VAR_1 , VAR_2 ) ) ( changeId = TYPE_3 . METHOD_1 ( git , VAR_3 . METHOD_2 ( ) , VAR_4 ) ) ( return TYPE_3 . METHOD_3 ( git , ref ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ( VAR_2 . info ( ( STRING_1 + VAR_1 ) ) ) ( endif ) ( if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ( VAR_2 . info ( ( STRING_2 + VAR_1 ) ) ) ( endif ) ( VAR_2 . METHOD_6 ( java.lang.String.format ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ) ( install ( TYPE_1 . METHOD_3 ( ) ) ) ( com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ) ( install ( new TYPE_2 ( ) ) ) ( factory ( VAR_5 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 key , TYPE_2 value ) ) ( int size = ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ) ( for (TYPE_3 e : value . METHOD_2 ( )) ) ( endfor ) ( size += e . METHOD_1 ( ) ) ( return size ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ) ( VAR_1 . METHOD_3 ( this ) ) ( VAR_2 = new TYPE_4 ( ) ) ( VAR_2 . add ( VAR_1 ) ) ( VAR_2 . METHOD_4 ( ) ) ( db = VAR_3 . METHOD_5 ( ) ) ( VAR_4 . create ( db ) ) ( VAR_5 = VAR_6 . METHOD_6 ( TYPE_5 . METHOD_7 ( STRING_1 ) ) . getAccountId ( ) ) ( user = VAR_7 . create ( VAR_5 ) ) ( METHOD_8 ( ) ) ( METHOD_9 ( ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 VAR_1 ) ) ( if ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getRefName ( ) ) ) ) ( return METHOD_4 ( VAR_1 . commit ) ; ) ( endif ) ( return java.util.Collections . METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( ) ) ( java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ) ( VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_2 , repo ) ) ) ( VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_3 , repo ) ) ) ( return TYPE_4 . METHOD_1 ( repo , STRING_1 , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void display( final TYPE_1 result ) ) ( project = result . project ) ( VAR_1 . METHOD_1 ( project . METHOD_2 ( ) ) ) ( TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) ) ( TYPE_2 . METHOD_3 ( VAR_4 , VAR_5 ) ) ( TYPE_2 . METHOD_3 ( VAR_6 , VAR_7 ) ) ( TYPE_2 . METHOD_3 ( VAR_8 , VAR_9 ) ) ( METHOD_4 ( project . METHOD_5 ( ) ) ) ( METHOD_6 ( project . METHOD_7 ( ) ) ) ( VAR_10 . METHOD_8 ( false ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) ) ( final boolean VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( if ( ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) ) ( final java.lang.String url = METHOD_5 ( ) ) ( METHOD_6 ( VAR_2 , url , VAR_3 , false ) ) ( endif ) ( if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ) ) ( final java.lang.String url = METHOD_8 ( ) ) ( METHOD_6 ( VAR_2 , url , VAR_3 , true ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.lang.String err , java.lang.Exception e ) ) ( if ( VAR_1 ) ) ( if ( e == null ) ) ( VAR_2 . error ( err ) ) ( endif ) ( VAR_2 . error ( err , e ) ) ( return TYPE_2 . METHOD_2 ( ) ; ) ( endif ) ( return TYPE_2 . METHOD_3 ( err ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 res , java.lang.String VAR_1 , java.lang.String VAR_2 ) ) ( TYPE_1 VAR_3 = new TYPE_1 ( TYPE_3 . create ( res ) . METHOD_2 ( ) , true , VAR_2 ) ) ( if ( VAR_1 != null ) ) ( VAR_3 . METHOD_3 ( VAR_1 ) ) ( endif ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final long VAR_1 , final long VAR_2 ) ) ( if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) ) ( return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) ( endif ) ( return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( STRING_5 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_7 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 p , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( VAR_3 = VAR_4 ) ( VAR_5 = VAR_6 ) ( VAR_7 = VAR_1 ) ( VAR_8 = VAR_9 . METHOD_2 ( ) ) ( VAR_10 = ++ ( VAR_11 ) ) ( VAR_12 . METHOD_3 ( VAR_2 ) ) ( return p ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) ) ( TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ) ( VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ) ( VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( int run( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) { protected void METHOD_2 ( ) { bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) . in ( VAR_5 ) ; } } ) ) ( TYPE_7 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 class ) ) ) ( VAR_1 . METHOD_5 ( VAR_6 class ) . METHOD_6 ( ) ) ( return METHOD_7 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) ( TYPE_1 notes = VAR_2 . create ( c ) . METHOD_2 ( ) ) ( com.google.gerrit.reviewdb.client . PatchSetApproval a = VAR_3 . METHOD_3 ( db , notes , VAR_1 ) ) ( org.junit.Assert . METHOD_4 ( a . METHOD_5 ( ) ) ) ( org.junit.Assert.assertEquals ( 1 , a . getValue ( ) ) ) ( org.junit.Assert.assertEquals ( admin . id , a . getAccountId ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String name = STRING_1 ) ( final java.lang.String value = STRING_2 ) ( final TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( name , value ) ) ( METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ) ( METHOD_3 ( value , VAR_1 . getValue ( ) ) ) ( assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void add( ) ) ( java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ) ( for (TYPE_1 input : VAR_1) ) ( endfor ) ( java.lang.String VAR_2 = input . getValue ( ) . METHOD_1 ( ) ) ( if ( ! ( VAR_2 . isEmpty ( ) ) ) ) ( input . METHOD_2 ( STRING_1 ) ) ( values . add ( VAR_2 ) ) ( endif ) ( t . insert ( values ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_1 = git . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ( METHOD_5 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) ( VAR_2 . METHOD_6 ( VAR_1 ) ) ( METHOD_7 ( VAR_3 , project , STRING_6 ) ) ( TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ) ( r . METHOD_8 ( ) ) ( r . METHOD_9 ( VAR_4 , null , admin ) ) ( r . METHOD_10 ( TYPE_2 . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , true ) ) ( TYPE_1 . METHOD_2 ( VAR_2 , false ) ) ( TYPE_1 . METHOD_2 ( error , false ) ) ( VAR_3 . METHOD_2 ( false ) ) ( VAR_4 . METHOD_3 ( true ) ) ( VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_5 ) ) ) ( VAR_4 . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean equals( TYPE_1 VAR_1 ) ) ( if ( ( VAR_1 == null ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) ) ( return false ; ) ( endif ) ( TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ) ( if ( ( ( this . VAR_3 ) != ( VAR_4 ) ) || ( ( this . VAR_5 ) != ( VAR_6 ) ) ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<org.eclipse.jgit.revwalk.RevCommit> METHOD_1( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 < TYPE_2 > refs ) ) ( java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_1 = TYPE_4 . METHOD_2 ( ) ) ( for (TYPE_2 r : refs) ) ( endfor ) ( try ) ( end-try ) ( VAR_1 . add ( rw . parseCommit ( r . METHOD_3 ( ) ) ) ) ( end-catch ) ( catch (TYPE_5 VAR_2) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData METHOD_1( ) ) ( if ( ( cd ) == null ) ) ( com.google.gerrit.reviewdb.server.ReviewDb VAR_1 = db ( ) ) ( TYPE_1 . METHOD_2 ( ( VAR_1 != null ) , STRING_1 ) ) ( cd = VAR_2 . create ( VAR_1 , METHOD_3 ( ) ) ) ( endif ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( boolean equals( final TYPE_1 VAR_1 ) ) ( if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) ) ( return false ; ) ( endif ) ( return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result r = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) ) ( METHOD_4 ( user ) ) ( METHOD_5 ( r , STRING_2 ) ) ( METHOD_6 ( r ) . METHOD_7 ( STRING_2 ) ) ( METHOD_8 ( r , STRING_3 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey name ) ) ( if ( VAR_1 . isEmpty ( ) ) ) ( return true ; ) ( endif ) ( java.lang.String projectName = name . get ( ) ) ( for (java.lang.String VAR_2 : VAR_1) ) ( endfor ) ( if ( METHOD_2 ( projectName , VAR_2 ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( try ) ( end-try ) ( org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) ) ( throw new TYPE_2 ( ) ) ( endif ) ( finally ) ( rw . METHOD_3 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( ( VAR_1 . length ( ) ) == 0 ) ) ( return false ; ) ( endif ) ( if ( VAR_2 . isEmpty ( ) ) ) ( return false ; ) ( endif ) ( if ( ( ( VAR_2 . size ( ) ) == 1 ) && ( VAR_2 . contains ( VAR_3 ) ) ) ) ( return false ; ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( void update( ) ) ( try ) ( end-try ) ( schema = VAR_1 . METHOD_1 ( ) ) ( METHOD_2 ( ) ) ( METHOD_3 ( VAR_2 , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ) ( finally ) ( if ( ( schema ) != null ) ) ( schema . close ( ) ) ( schema = null ) ( endif ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , new com.google.gerrit.reviewdb.client.Account.Id ( 2 ) , new TYPE_2 . NameKey ( VAR_2 , STRING_2 ) , TYPE_3 . METHOD_2 ( ) ) ) ( VAR_1 . set ( VAR_3 , change ) ) ( VAR_1 . set ( VAR_4 , util . user ( VAR_5 ) . METHOD_3 ( change ) ) ) ( CFG Exit )
( CFG Entry ) ( void display( final java.util.List < TYPE_1 > result ) ) ( while ( 1 < ( table . METHOD_1 ( ) ) ) ) ( endwhile ) ( table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ) ( for (TYPE_1 VAR_1 : result) ) ( endfor ) ( final int row = table . METHOD_1 ( ) ) ( table . METHOD_3 ( row ) ) ( METHOD_4 ( row ) ) ( METHOD_5 ( row , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) ) ( TYPE_5 < TYPE_1 > VAR_4 = new TYPE_5 < TYPE_1 > ( VAR_5 , VAR_3 ) ) ( try ) ( end-try ) ( if ( ! ( VAR_5 ) ) ) ( TYPE_6 . METHOD_2 ( ) ) ( endif ) ( TYPE_7 req = METHOD_3 ( VAR_1 ) ) ( req . METHOD_4 ( STRING_1 , VAR_6 ) ) ( req . METHOD_5 ( VAR_2 , VAR_4 ) ) ( end-catch ) ( catch (TYPE_8 e) ) ( VAR_4 . METHOD_6 ( null , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ) ( for (TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( )) ) ( endfor ) ( VAR_1 . add ( label . getName ( ) ) ) ( assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ) ( METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ) ( assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) ) , out . METHOD_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.PatchSet ps ) ) ( TYPE_1 d = new TYPE_1 ( ) ) ( VAR_1 = c . getId ( ) . toString ( ) ) ( d . id = c . getKey ( ) . toString ( ) ) ( d . revision = ps . getRevision ( ) . get ( ) ) ( d . ref = ps . getRefName ( ) ) ( return d ; ) ( CFG Exit )
( CFG Entry ) ( byte[] METHOD_1( TYPE_1 VAR_1 ) ) ( final long VAR_2 = TYPE_2 . METHOD_2 ( ) ) ( final TYPE_3 b = new TYPE_3 ( ) ) ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( b , VAR_1 ) ) ( final byte [ ] key = b . METHOD_5 ( ) ) ( return TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_6 ( VAR_2 , key ) ) . METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( org.eclipse.jgit.lib.Repository repo , java.lang.String revision ) ) ( org.eclipse.jgit.lib.ObjectId VAR_1 = repo . METHOD_2 ( TYPE_2 . METHOD_3 ( revision , VAR_2 ) ) ) ( if ( VAR_1 == null ) ) ( throw new TYPE_1 ( ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.PatchSetApproval METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) ( TYPE_1 notes = VAR_2 . create ( c ) . METHOD_2 ( ) ) ( return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) ( METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ) ( METHOD_4 ( user ) ) ( METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( TYPE_2 VAR_4 = util . user ( VAR_1 , VAR_5 ) ) ( TYPE_2 VAR_6 = util . user ( VAR_1 , VAR_5 , VAR_3 ) ) ( METHOD_3 ( STRING_2 , VAR_4 . METHOD_4 ( ) ) ) ( METHOD_5 ( STRING_3 , VAR_6 . METHOD_4 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( java.util.List < TYPE_1 . ChangeInfo > VAR_1 = VAR_2 . changes ( ) . query ( STRING_1 ) . get ( ) ) ( org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ) ( VAR_1 = VAR_2 . changes ( ) . query ( STRING_2 ) . get ( ) ) ( org.junit.Assert . METHOD_3 ( VAR_1 . isEmpty ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , com.google.gerrit.reviewdb.client.PatchSet ps , TYPE_2 < java.lang.String > VAR_1 ) ) ( ps . METHOD_1 ( VAR_1 ) ) ( update . METHOD_1 ( VAR_1 ) ) ( db . patchSets ( ) . update ( java.util.Collections.singleton ( ps ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.server.query.change.ChangeData cd ) ) ( org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( cd . METHOD_3 ( ) . getRevision ( ) . get ( ) ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( cd . change ( ) . getProject ( ) ) ) ( org.eclipse.jgit.revwalk.RevWalk rw = TYPE_1 . METHOD_5 ( repo ) ) ( end-try ) ( org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ) ( return ( commit . METHOD_6 ( ) ) > 1 ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_2 ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( final java.lang.String name , final java.lang.String value ) ) ( final TYPE_4 VAR_1 = VAR_2 . get ( name ) ) ( if ( VAR_1 == null ) ) ( throw TYPE_5 . error ( ( ( ( STRING_1 + name ) + STRING_2 ) + value ) ) ) ( endif ) ( return VAR_1 . create ( this , value ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String changeId , int psId ) ) ( TYPE_1 VAR_1 = VAR_2 . create ( db , TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ) ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( VAR_1 . METHOD_2 ( commit . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ( if ( VAR_2 ) ) ( METHOD_6 ( ) ) ( endif ) ( java.lang.String VAR_3 = TYPE_1 . METHOD_7 ( ) ) ( if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_8 ( STRING_1 ) ) ) ) ( METHOD_9 ( VAR_3 . METHOD_10 ( INT_1 ) ) ) ( endif ) ( METHOD_11 ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) ) ( try ) ( end-try ) ( org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ) ( try ) ( end-try ) ( return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( end-catch ) ( catch (java.io.IOException e) ) ( java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) ( VAR_1 . error ( msg , e ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData METHOD_1( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) ) ( com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ) ( VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = new TYPE_1 ( server , user ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( server , user ) ) ( TYPE_3 . METHOD_2 ( user ) ) ( VAR_2 . METHOD_3 ( ) ) ( METHOD_4 ( TYPE_3 . METHOD_5 ( ( ( ( VAR_2 . METHOD_6 ( ) ) + STRING_1 ) + ( project . get ( ) ) ) ) ) ) ( VAR_2 . close ( ) ) ( VAR_3 = VAR_4 . METHOD_7 ( ) ) ( VAR_5 = new TYPE_1 ( server , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) ) ( res . METHOD_2 ( VAR_1 ) ) ( METHOD_3 ( req , res , VAR_2 ) ) ( METHOD_4 ( req , res ) ) ( TYPE_3 out = res . METHOD_5 ( ) ) ( out . METHOD_6 ( message ) ) ( out . close ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < TYPE_2 > e ) ) ( VAR_1 . METHOD_2 ( e . getValue ( ) ) ) ( view . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { boolean s = VAR_1 . METHOD_2 ( ) ; view . METHOD_4 ( VAR_2 ) . METHOD_5 ( STRING_1 , s ) ; view . METHOD_4 ( VAR_3 ) . METHOD_5 ( STRING_1 , s ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( final TYPE_1 p = new TYPE_1 ( ) ) ( p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ) ( p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ) ( db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) ) ( VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( TYPE_2 account ) ) ( try ) ( end-try ) ( return VAR_1 . METHOD_2 ( ) . apply ( account ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|TYPE_5|java.io.IOException e) ) ( throw new TYPE_4 ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 event ) ) ( for (TYPE_2 p : VAR_1 . METHOD_2 ( )) ) ( endfor ) ( TYPE_3 VAR_2 = new TYPE_3 ( p . METHOD_3 ( ) , p . getKey ( ) , 0 , null ) ) ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . toString ( ) , p . METHOD_3 ( ) , null ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ) ( servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( repo . METHOD_2 ( ) ) , new TYPE_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( METHOD_3 ( ) ) ( TYPE_1 r = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) ) ( r . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String changeId = METHOD_2 ( name ( STRING_1 ) ) . getChangeId ( ) ) ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 info = METHOD_2 ( VAR_1 , STRING_1 ) ) ( VAR_2 . METHOD_3 ( VAR_3 class ) ) ( VAR_2 . METHOD_4 ( STRING_2 ) ) ( VAR_4 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( info . id ) . get ( true ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 user ) ) ( if ( ( VAR_1 ) != null ) ) ( throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ) ( endif ) ( try ) ( end-try ) ( if ( ( change ) != null ) ) ( VAR_1 = VAR_2 . METHOD_3 ( change , user ) ) ( endif ) ( VAR_1 = VAR_2 . METHOD_3 ( VAR_3 , user ) ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 , int VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String [ ] VAR_5 ) ) ( this . VAR_6 = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) ) ( this . VAR_2 = VAR_2 ) ( this . VAR_5 = VAR_5 ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final int row , final boolean VAR_1 ) ) ( super . METHOD_1 ( row , VAR_1 ) ) ( if ( ( ! ( VAR_2 ) ) || ( STRING_1 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) ) ( VAR_3 . METHOD_3 ( METHOD_4 ( row ) . getName ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) ) ( return ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) ) ( this . VAR_1 = walk . METHOD_2 ( ) ) ( try ) ( end-try ) ( revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ) ( METHOD_3 ( ) ) ( finally ) ( VAR_1 = null ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , java.lang.String VAR_2 ) ) ( try ) ( end-try ) ( org.eclipse.jgit.lib.Repository repo = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) ( try ) ( end-try ) ( if ( VAR_2 != null ) ) ( TYPE_3 u = repo . METHOD_3 ( VAR_3 ) ) ( u . METHOD_4 ( VAR_2 ) ) ( endif ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_4 . error ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_2 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) ) ( final TYPE_3 VAR_3 = METHOD_2 ( VAR_1 ) ) ( final TYPE_3 VAR_4 = TYPE_4 . METHOD_3 ( VAR_2 ) ) ( final TYPE_3 VAR_5 = TYPE_5 . METHOD_4 ( VAR_3 ) ) ( TYPE_5 . METHOD_5 ( VAR_5 , VAR_3 ) ) ( TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 ) ) ( TYPE_5 . METHOD_7 ( VAR_5 , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String name , java.lang.String VAR_1 ) ) ( if ( VAR_1 == null ) ) ( return cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) ; ) ( endif ) ( return TYPE_1 . METHOD_2 ( cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . Key VAR_1 , TYPE_2 VAR_2 , int VAR_3 , TYPE_3 VAR_4 ) ) ( VAR_5 = VAR_1 ) ( VAR_6 = VAR_2 ) ( VAR_7 = METHOD_2 ( VAR_3 , VAR_4 ) ) ( VAR_8 . METHOD_3 ( ) ) ( VAR_9 = METHOD_4 ( ) ) ( VAR_8 . add ( VAR_9 ) ) ( VAR_8 . add ( METHOD_5 ( ) ) ) ( VAR_10 . METHOD_3 ( ) ) ( VAR_11 = METHOD_4 ( ) ) ( VAR_10 . add ( VAR_11 ) ) ( VAR_10 . add ( METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( TYPE_2 account , java.util.List < java.lang.String > add , java.util.List < java.lang.String > delete ) ) ( TYPE_5 in = new TYPE_5 ( ) ) ( in . add = add ) ( in . delete = delete ) ( try ) ( end-try ) ( return VAR_1 . apply ( account , in ) ; ) ( end-catch ) ( catch (TYPE_6|com.google.gwtorm.server.OrmException|java.io.IOException|TYPE_7 e) ) ( throw new TYPE_4 ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ) ( TYPE_2 VAR_2 = repo . METHOD_3 ( repo . file ( STRING_2 , VAR_1 ) ) ) ( org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_1 ) ) ) ( org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?>.VAR_1 METHOD_1( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ( TYPE_1 < ? > . VAR_1 b = VAR_3 . METHOD_5 ( STRING_1 ) ) ( TYPE_2 < java.lang.String > id = TYPE_3 . getChangeId ( VAR_3 , VAR_2 ) ) ( if ( id . METHOD_6 ( ) ) ) ( b . METHOD_7 ( id . get ( ) . METHOD_8 ( 1 ) ) ) ( endif ) ( b . METHOD_7 ( ) ) ( return b ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , java.lang.String key , java.lang.String [ ] values ) ) ( if ( ( values . length ) > 0 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( ) ) ( for (java.lang.String VAR_3 : values) ) ( endfor ) ( VAR_2 . add ( new TYPE_3 ( VAR_3 ) ) ) ( VAR_1 . add ( key , VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( return ( ( ( ( ( user ) instanceof TYPE_1 ) || ( user . METHOD_2 ( group . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) || ( user . METHOD_5 ( ) . METHOD_6 ( ) ) ) || ( VAR_1 . METHOD_7 ( group . METHOD_3 ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 ) ) ( super . METHOD_1 ( VAR_1 ) ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( return ; ) ( endif ) ( if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ) != null ) ) ( if ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) || ( ! ( VAR_3 . get ( ) . METHOD_6 ( ) ) ) ) ) ( VAR_1 . METHOD_7 ( new TYPE_2 ( ) ) ) ( return ; ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String url( com.google.gerrit.reviewdb.client.PatchSet.Id ps , TYPE_1 info ) ) ( return TYPE_2 . METHOD_1 ( null , ps , info . path ( ) , ( ( info . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : VAR_3 ) , info . line ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ) ( TYPE_1 update = METHOD_3 ( c , VAR_1 ) ) ( update . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) , VAR_2 ) ) ( update . commit ( ) ) ( TYPE_2 notes = METHOD_6 ( c ) ) ( TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id , TYPE_4 > VAR_3 = notes . METHOD_7 ( ) ) ( org.junit.Assert.assertEquals ( 0 , VAR_3 . METHOD_8 ( ) . size ( ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( java.lang.String msg = VAR_1 . getValue ( ) . METHOD_2 ( ) ) ( if ( METHOD_3 ( ) ) ) ( return ( msg . length ( ) ) > 0 ; ) ( endif ) ( return msg . equals ( ( ( VAR_2 . message ( ) ) != null ? VAR_2 . message ( ) . METHOD_2 ( ) : STRING_1 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> METHOD_1( java.util.Set < java.lang.String > VAR_1 ) ) ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > result = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ) ( for (java.lang.String email : VAR_1) ) ( endfor ) ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( email ) ) ( result . METHOD_3 ( VAR_2 ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) ) ( java.lang.String token = TYPE_1 . METHOD_2 ( ps ) ) ( new TYPE_2 ( token ) { public void onSuccess ( ) { TYPE_3 . display ( this . token , METHOD_3 ( ) ) ; } private TYPE_4 METHOD_3 ( ) { return new TYPE_5 ( ps ) ; } } . onSuccess ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( final TYPE_2 cm = TYPE_3 . METHOD_2 ( VAR_1 ) ) ( final TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) ) ( VAR_4 = new TYPE_4 ( ) { protected void METHOD_3 ( ) { install ( VAR_5 ) ; install ( cm ) ; install ( VAR_2 ) ; } } ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String n = VAR_1 . getName ( ) ) ( return ( ( ( n . METHOD_2 ( STRING_1 ) ) || ( n . METHOD_2 ( STRING_2 ) ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( n . METHOD_4 ( STRING_3 ) ) >= 0 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Account a ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( a . getId ( ) . get ( ) ) ) ( VAR_1 . email = a . METHOD_2 ( ) ) ( VAR_1 . name = a . METHOD_3 ( ) ) ( VAR_2 = a . METHOD_4 ( ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) ) ( VAR_1 . append ( ( STRING_1 + line ) ) ) ( try ) ( end-try ) ( final java.lang.String VAR_4 = VAR_2 . METHOD_2 ( VAR_3 , line ) ) ( VAR_1 . append ( STRING_2 ) ) ( VAR_1 . append ( VAR_4 ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( VAR_1 . append ( STRING_3 ) ) ( VAR_1 . append ( STRING_4 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( boolean VAR_1 = TYPE_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ( return ! ( ( VAR_1 || ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( 0 >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) ) ) || ( ( ( VAR_3 ) == ( VAR_5 ) ) && ( 0 >= ( VAR_2 . METHOD_4 ( ) . size ( ) ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) ) ( return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; ) ( endif ) ( return METHOD_4 ( ) . METHOD_9 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 . NameKey VAR_1 , TYPE_2 user ) ) ( final TYPE_3 VAR_2 = VAR_3 . get ( VAR_1 . getParentKey ( ) ) ) ( if ( VAR_2 == null ) ) ( return false ; ) ( endif ) ( final TYPE_4 VAR_4 = VAR_2 . METHOD_2 ( user ) ) ( return VAR_4 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ( VAR_1 . email ( ) ) != null ) ) ( return VAR_1 . email ( ) ; ) ( endif ) ( if ( ( VAR_1 . name ( ) ) != null ) ) ( return VAR_1 . name ( ) ; ) ( endif ) ( if ( ( VAR_1 . METHOD_2 ( ) ) != 0 ) ) ( return STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; ) ( endif ) ( return STRING_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 p = VAR_2 . projects ( ) . name ( VAR_1 ) . create ( ) . get ( ) ) ( com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ) ( TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ) ( TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ) ( METHOD_4 ( VAR_1 , STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String id ) ) ( try ) ( end-try ) ( TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ) ( VAR_2 . METHOD_4 ( rsrc ) ) ( VAR_2 . apply ( account , new TYPE_4 ( ) ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) ) ( try ) ( end-try ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( try ) ( end-try ) ( return rw . parseCommit ( repo . METHOD_2 ( name ) . METHOD_3 ( ) ) ; ) ( finally ) ( rw . METHOD_4 ( ) ) ( end-finally ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( java.lang.String get( ) ) ( java.lang.String VAR_1 = super . get ( ) ) ( if ( VAR_1 != null ) ) ( return VAR_1 ; ) ( endif ) ( if ( ( VAR_2 ) != null ) ) ( final TYPE_1 req ) ( try ) ( end-try ) ( req = VAR_2 . get ( ) ) ( end-catch ) ( catch (TYPE_2 VAR_3) ) ( if ( ( VAR_3 . METHOD_1 ( ) ) instanceof TYPE_3 ) ) ( return null ; ) ( endif ) ( throw VAR_3 ) ( return TYPE_4 . METHOD_2 ( req ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?,java.io.IOException> METHOD_1( TYPE_2 < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) ) ( java.util.List < TYPE_3 < ? > > VAR_2 = new java.util.ArrayList ( VAR_1 . size ( ) ) ) ( for (com.google.gerrit.reviewdb.client.Change . Id id : VAR_1) ) ( endfor ) ( VAR_2 . add ( METHOD_1 ( id ) ) ) ( return TYPE_4 . METHOD_2 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ) ( end-catch ) ( catch (TYPE_7|java.io.IOException e) ) ( throw new TYPE_5 ( e . getMessage ( ) ) ) ( return TYPE_1 . METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String topic ) ) ( TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) ( return VAR_4 . to ( git , ( STRING_1 + topic ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < TYPE_3 > VAR_1 ) ) ( return new TYPE_1 ( TYPE_4 . METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( ) , VAR_1 . get ( ) . METHOD_4 ( ) ) , ( ( int ) ( ( VAR_1 . get ( ) . METHOD_4 ( ) ) * ( VAR_1 . get ( ) . METHOD_3 ( ) ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void name( java.lang.String name ) ) ( TYPE_2 in = new TYPE_2 ( ) ) ( in . name = name ) ( try ) ( end-try ) ( VAR_1 . apply ( rsrc , in ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new TYPE_4 ( name , e ) ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ) ( modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ) ( if ( ! ( VAR_3 ) ) ) ( modules.add ( new TYPE_3 ( ) ) ) ( endif ) ( modules.add ( new TYPE_4 ( VAR_4 , VAR_1 . METHOD_2 ( VAR_5 class ) , VAR_1 . METHOD_2 ( VAR_6 class ) ) ) ) ( if ( ! ( VAR_4 ) ) ) ( modules.add ( new TYPE_5 ( ) ) ) ( endif ) ( return VAR_1 . METHOD_3 ( modules ) ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 cm , int line , int VAR_1 ) ) ( int i = 0 ) ( for (i < VAR_1) ) ( i ++ ) ( endfor ) ( cm . METHOD_2 ( line , VAR_2 , VAR_3 . diff ( ) ) ) ( return line + VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<java.lang.String> METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ) ( if ( ( VAR_4 ) == null ) ) ( try ) ( end-try ) ( VAR_3 . add ( VAR_2 . METHOD_2 ( VAR_5 , VAR_6 ) ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_3 . add ( STRING_1 ) ) ( endif ) ( VAR_3 . METHOD_3 ( METHOD_4 ( VAR_4 , VAR_2 , VAR_5 ) ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( project , METHOD_3 ( ) , message . METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( ) ) ( TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 ) ) ( TYPE_2 . Result result = VAR_1 . to ( STRING_1 ) ) ( result . METHOD_3 ( ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 ) ) ( while ( i . METHOD_2 ( ) ) ) ( endwhile ) ( final TYPE_2 c = i . METHOD_3 ( ) ) ( table . METHOD_4 ( row ) ) ( table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) ) ( METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) ) ) ( row ++ ) ( return row ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( try ) ( end-try ) ( TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ) ( try ) ( end-try ) ( VAR_3 . METHOD_2 ( VAR_1 ) ) ( VAR_3 . METHOD_3 ( ) ) ( finally ) ( VAR_3 . close ( ) ) ( end-finally ) ( end-catch ) ( catch (java.io.IOException err) ) ( throw new TYPE_5 ( STRING_1 , err ) ) ( CFG Exit )
( CFG Entry ) ( void delete( com.google.gerrit.server.query.change.ChangeData cd ) ) ( java.lang.String id = cd . getId ( ) . toString ( ) ) ( try ) ( end-try ) ( if ( cd . change ( ) . getStatus ( ) . METHOD_1 ( ) ) ) ( VAR_1 . METHOD_2 ( id ) ) ( commit ( VAR_1 ) ) ( endif ) ( VAR_2 . METHOD_2 ( id ) ) ( commit ( VAR_2 ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|TYPE_1 e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = METHOD_2 ( VAR_2 class ) ) ( bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ) ( VAR_3 = METHOD_2 ( VAR_4 class ) ) ( bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ) ( VAR_5 = METHOD_2 ( VAR_6 class ) ) ( bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ) ( bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void message( int id , java.lang.String commit , java.lang.String message , TYPE_1 < TYPE_2 > VAR_1 ) ) ( TYPE_3 input = TYPE_3 . create ( ) ) ( input . METHOD_1 ( message ) ) ( TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . METHOD_3 ( input , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ) ( try ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( end-try ) ( org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) ) ( throw new TYPE_2 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = METHOD_2 ( changeId ) ) ( if ( changes . isEmpty ( ) ) ) ( throw new TYPE_2 ( changeId ) ) ( endif ) ( return create ( db , project , changeId ) ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( final int VAR_1 ) ) ( int VAR_2 = VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) ) ( if ( VAR_2 == 0 ) ) ( throw new TYPE_1 ( STRING_1 ) ) ( endif ) ( return ( 0 < VAR_1 ) && ( VAR_1 <= VAR_2 ) ? VAR_1 : VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) ( int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , line , false ) , METHOD_7 ( ) ) ) ( METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . METHOD_3 ( STRING_1 ) ) ) ( METHOD_2 ( b , b . METHOD_4 ( INT_1 ) ) ) ( METHOD_2 ( b , b . METHOD_5 ( INT_2 ) ) ) ( METHOD_2 ( b , b . METHOD_6 ( ) ) ) ( assertEquals ( STRING_2 , b . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( STRING_1 ) ) ( final java.lang.String name = STRING_2 ) ( final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ) ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ( final TYPE_2 r = create ( ) . METHOD_4 ( user ) ) ( METHOD_5 ( r ) ) ( assertEquals ( name , r . name ) ) ( assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ) ( TYPE_1 . METHOD_7 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 ref , TYPE_3 VAR_1 , java.util.Set < java.lang.String > VAR_2 ) ) ( TYPE_1 b = new TYPE_1 ( ) ) ( b . ref = ref . getName ( ) ) ( if ( ( ref . METHOD_2 ( ) ) != null ) ) ( b . revision = ref . METHOD_2 ( ) . name ( ) ) ( endif ) ( b . METHOD_3 ( ( ( ! ( VAR_2 . contains ( ref . getName ( ) ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) ) ( return b ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> add( TYPE_3 . Key < TYPE_2 > key , TYPE_4 < TYPE_2 > VAR_1 ) ) ( TYPE_5 < TYPE_4 < TYPE_2 > > ref = new TYPE_5 < TYPE_4 < TYPE_2 > > ( VAR_1 ) ) ( VAR_2 . add ( ref ) ) ( return new TYPE_6 ( ref , key , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = null ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ( for (final TYPE_2 VAR_4 : VAR_5) ) ( endfor ) ( VAR_4 . METHOD_3 ( ) ) ( TYPE_3 . METHOD_4 ( ) ) ( if ( ( ( VAR_6 ) != null ) && ( VAR_6 . METHOD_5 ( ) ) ) ) ( TYPE_4 . METHOD_6 ( VAR_7 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( java.lang.String VAR_1 ) ) ( if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) ) ( return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; ) ( endif ) ( return TYPE_1 . METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_2 VAR_1 , TYPE_3 < TYPE_1 > VAR_2 , TYPE_4 < TYPE_1 > b ) ) ( TYPE_5 n = VAR_2 . METHOD_1 ( b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) ) ( if ( n != null ) ) ( VAR_1 . add ( n ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 revision ) ) ( switch ( type ) ) ( end-switch ) ( case VAR_1 : ) ( case VAR_2 : ) ( this . VAR_3 = revision ) ( break ; ) ( default : ) ( TYPE_3 . METHOD_2 ( ( revision == null ) , STRING_1 , type ) ) ( this . VAR_3 = revision ) ( break ; ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ) ( return ; ) ( endif ) ( TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ) ( if ( VAR_2 != null ) ) ( for (TYPE_1 d : VAR_2) ) ( endfor ) ( if ( d . METHOD_5 ( ) ) ) ( TYPE_2 . METHOD_1 ( d ) ) ( endif ) ( TYPE_2 . METHOD_6 ( d ) ) ( endif ) ( TYPE_2 . METHOD_6 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . METHOD_1 ( ctx ) ) ( return ; ) ( endif ) ( ctx . METHOD_2 ( new TYPE_2 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( patchSet . getRevision ( ) . get ( ) ) , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , patchSet . getRefName ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.StringBuilder VAR_1 , final TYPE_1 VAR_2 ) ) ( VAR_1 . append ( CHAR_1 ) ) ( VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) ) ( VAR_1 . append ( CHAR_2 ) ) ( VAR_1 . append ( VAR_2 . METHOD_3 ( ) ) ) ( VAR_1 . append ( CHAR_2 ) ) ( VAR_1 . append ( VAR_2 . METHOD_4 ( ) ) ) ( VAR_1 . append ( CHAR_2 ) ) ( VAR_1 . append ( VAR_2 . METHOD_5 ( ) ) ) ( VAR_1 . append ( CHAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo get( TYPE_2 < TYPE_3 > s ) ) ( try ) ( end-try ) ( return TYPE_5 . apply ( VAR_1 . get ( ) . METHOD_1 ( s ) . format ( change ) ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_4 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 m , final int VAR_1 ) ) ( m . METHOD_2 ( ) ) ( m . METHOD_3 ( ) ) ( m . METHOD_4 ( VAR_2 ) ) ( m . METHOD_5 ( ) ) ( m . METHOD_6 ( ) ) ( m . METHOD_3 ( ) ) ( m . METHOD_4 ( STRING_1 ) ) ( m . METHOD_7 ( STRING_2 , INT_1 ) ) ( m . append ( TYPE_2 . METHOD_8 ( VAR_1 ) ) ) ( m . METHOD_6 ( ) ) ( m . METHOD_9 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.Account> METHOD_1( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId commit ) ) ( rw . METHOD_2 ( ) ) ( TYPE_3 VAR_2 = new TYPE_3 ( null , VAR_1 ) ) ( VAR_2 . METHOD_3 ( rw , commit ) ) ( return VAR_2 . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) ) ( com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ) ( METHOD_2 ( VAR_1 , VAR_2 ) ) ( return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) ) ( METHOD_2 ( req , res , VAR_3 ) ) ( res . METHOD_3 ( VAR_4 ) ) ( TYPE_5 VAR_5 = res . METHOD_4 ( ) ) ( new TYPE_6 ( ) . METHOD_5 ( VAR_6 ) . METHOD_6 ( ) . METHOD_7 ( ) . create ( ) . METHOD_8 ( VAR_1 , VAR_2 , VAR_5 ) ) ( VAR_5 . METHOD_9 ( CHAR_1 ) ) ( VAR_5 . close ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) + STRING_5 ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) ( METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_3 , STRING_4 ) ) , TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_5 ) ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_6 , STRING_7 , STRING_4 , STRING_8 , STRING_9 , STRING_10 , STRING_5 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ChangeInfo VAR_1 = METHOD_2 ( VAR_2 ) ) ( TYPE_2 r = VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ) ( org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) ) ( org.junit.Assert . METHOD_5 ( r . METHOD_6 ( ) . contains ( STRING_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final TYPE_2 user = VAR_1 . METHOD_2 ( ) ) ( TYPE_3 VAR_2 = VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public TYPE_2 METHOD_2 ( ) { return user ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_4 ( ) { return VAR_4 . get ( ) ; } } ) ) ( try ) ( end-try ) ( return VAR_5 . METHOD_1 ( ) ; ) ( finally ) ( VAR_3 . METHOD_3 ( VAR_2 ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . Change change , final TYPE_2 event , final TYPE_1 . ReviewDb db ) ) ( for (TYPE_4 VAR_1 : VAR_2 . values ( )) ) ( endfor ) ( if ( METHOD_2 ( change , VAR_1 . user , db ) ) ) ( VAR_3 . METHOD_3 ( event ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) ) ( java.lang.String VAR_3 = VAR_1 . getKey ( ) . getParentKey ( ) . get ( ) ) ( java.lang.String VAR_4 = VAR_2 . getKey ( ) . getParentKey ( ) . get ( ) ) ( return TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_1 ( VAR_3 , VAR_4 ) . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) . result ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) ( METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ) ( METHOD_4 ( user ) ) ( com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.Change . Status status ) ) ( switch ( status ) ) ( end-switch ) ( case VAR_1 : ) ( case VAR_2 : ) ( return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; ) ( case VAR_3 : ) ( default : ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , int line , int VAR_2 , int VAR_3 , boolean edit ) ) ( VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , ( ( line - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 change( java.lang.String project , int id ) ) ( if ( project == null ) ) ( return new TYPE_1 ( STRING_1 ) . id ( java.lang.String . METHOD_1 ( id ) ) ; ) ( endif ) ( return new TYPE_1 ( STRING_1 ) . id ( project , id ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 git = METHOD_2 ( ) ) ( TYPE_2 . Result change = METHOD_3 ( git ) ) ( submit ( change . getChangeId ( ) ) ) ( METHOD_4 ( git , false ) ) ( org.junit.Assert.assertEquals ( change . METHOD_5 ( ) . METHOD_6 ( 0 ) , METHOD_7 ( ) . METHOD_6 ( 0 ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<java.lang.String> METHOD_1( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit c , boolean VAR_1 , TYPE_1 cfg ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( ) ) ( TYPE_3 VAR_3 = new TYPE_3 ( null , null , null , VAR_2 ) ) ( java.lang.String VAR_4 = TYPE_3 . METHOD_2 ( cfg ) ) ( java.util.List < TYPE_4 > m = VAR_3 . METHOD_3 ( repo , c , rw , VAR_4 , VAR_1 ) ) ( return TYPE_5 . METHOD_4 ( m ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 r , final java.lang.String n , final java.lang.String VAR_1 ) ) ( if ( ( r . length ( ) ) > 0 ) ) ( r . append ( STRING_1 ) ) ( endif ) ( r . append ( n ) ) ( r . append ( STRING_2 ) ) ( r . append ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 view ) ) ( final java.lang.String token = view . METHOD_2 ( ) ) ( if ( ! ( token . equals ( TYPE_2 . METHOD_2 ( ) ) ) ) ) ( TYPE_2 . METHOD_3 ( token , false ) ) ( if ( ( VAR_1 ) != null ) ) ( TYPE_3 . METHOD_4 ( token ) ) ( endif ) ( endif ) ( if ( view instanceof TYPE_4 ) ) ( VAR_2 = token ) ( endif ) ( super . METHOD_1 ( view ) ) ( view . METHOD_1 ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( return VAR_2 ; ) ( endif ) ( final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ) ( msg . append ( STRING_1 ) ) ( msg . append ( STRING_2 ) ) ( if ( VAR_2 ) ) ( msg . append ( STRING_3 ) ) ( endif ) ( msg . append ( STRING_4 ) ) ( msg . append ( STRING_5 ) ) ( msg . append ( STRING_6 ) ) ( return VAR_1 . METHOD_3 ( true , msg . toString ( ) , name ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( java.lang.String VAR_2 = null ) ( if ( VAR_1 != null ) ) ( VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ) ( endif ) ( if ( VAR_2 == null ) ) ( VAR_2 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) ( endif ) ( return new TYPE_1 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean apply( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String name , TYPE_1 VAR_2 ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey ( project . getName ( ) ) ) ( org.eclipse.jgit.lib.Repository db = VAR_2 . METHOD_1 ( p ) ) ( TYPE_3 git = new TYPE_3 ( db ) ) ( git . METHOD_2 ( ) . METHOD_3 ( branch ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ) ( git . close ( ) ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( table . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ( TYPE_2 . METHOD_4 ( new TYPE_3 < java.util.List < TYPE_4 . ChangeInfo > > ( ) { public void onSuccess ( final java.util.List < TYPE_4 . ChangeInfo > result ) { VAR_1 . display ( result ) ; table . METHOD_5 ( ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 user( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) ) ( return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , null , VAR_5 , VAR_6 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 < TYPE_2 > m ) ) ( VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) ) ( VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 id , final TYPE_2 < TYPE_3 > VAR_1 ) ) ( if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) ( return true ; ) ( endif ) ( if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) ) ( return true ; ) ( endif ) ( for (final TYPE_3 t : VAR_1) ) ( endfor ) ( if ( t . METHOD_4 ( id ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , java.lang.String projectName ) ) ( java.lang.String n = projectName + ( VAR_2 ) ) ( TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( n ) . METHOD_4 ( ) , VAR_4 ) ) ( org.eclipse.jgit.lib.Repository db = TYPE_3 . METHOD_5 ( VAR_3 , false ) ) ( try ) ( end-try ) ( db . create ( true ) ) ( finally ) ( db . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . change ( ) . METHOD_3 ( ) ) ) ( try ) ( end-try ) ( VAR_3 = index . METHOD_4 ( VAR_2 , VAR_4 ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( return METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 cm , int line , final TYPE_3 VAR_1 , TYPE_4 VAR_2 ) ) ( VAR_1 . METHOD_2 ( false ) ) ( TYPE_1 VAR_3 = cm . METHOD_1 ( line , VAR_1 . METHOD_3 ( ) , VAR_2 ) ) ( VAR_3 . METHOD_4 ( new TYPE_5 ( ) { public void run ( ) { VAR_1 . METHOD_2 ( true ) ; } } ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.Repository METHOD_1( java.lang.String name ) ) ( name = TYPE_1 . METHOD_2 ( VAR_1 , name ) ) ( if ( VAR_2 . METHOD_3 ( name ) ) ) ( return VAR_2 . get ( name ) ; ) ( endif ) ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ( VAR_2 . put ( name , repo ) ) ( return repo ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.lang.String VAR_1 ) ) ( java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ) ( if ( ( TYPE_2 . METHOD_2 ( VAR_1 ) ) != null ) ) ( java.lang.String [ ] VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ) ( for (java.lang.String VAR_4 : VAR_3) ) ( endfor ) ( VAR_2 . add ( TYPE_3 . METHOD_4 ( VAR_5 class , VAR_4 . METHOD_5 ( ) ) ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( < com.google.gerrit.reviewdb.server.ReviewDb > schema = METHOD_2 ( VAR_1 class ) ) ( com.google.gerrit.reviewdb.server.ReviewDb db = METHOD_2 ( VAR_2 . ReviewDb class ) ) ( TYPE_2 . METHOD_3 ( schema . METHOD_4 ( ) ) . METHOD_5 ( db ) . METHOD_6 ( ) ) ( VAR_3 = new TYPE_3 ( VAR_4 , schema ) ) ( req = METHOD_2 ( VAR_5 class ) ) ( rsp = METHOD_2 ( VAR_6 . HttpServletResponse class ) ) ( TYPE_2 . METHOD_3 ( req . METHOD_7 ( ) ) . METHOD_5 ( TYPE_4 . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 ) ( METHOD_2 ( STRING_2 , VAR_1 ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_3 ) ) ) ) ) . METHOD_4 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) . toString ( ) ) . isEqualTo ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Change change = TYPE_3 . getChange ( VAR_1 ) ) ( com.google.gerrit.reviewdb.client.PatchSet ps = TYPE_3 . METHOD_2 ( VAR_1 ) ) ( TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_3 ) ) ) ( TYPE_5 VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ( try ) ( end-try ) ( return VAR_4 . get ( change , ps ) ; ) ( end-catch ) ( catch (TYPE_6 e) ) ( throw new TYPE_7 ( e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit parseCommit( org.eclipse.jgit.lib.ObjectId id ) ) ( if ( id instanceof org.eclipse.jgit.revwalk.RevCommit ) ) ( return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; ) ( endif ) ( org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( try ) ( end-try ) ( org.eclipse.jgit.revwalk.RevCommit commit = walk . parseCommit ( id ) ) ( walk . METHOD_1 ( commit ) ) ( return commit ; ) ( finally ) ( walk . METHOD_2 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 event ) ) ( new TYPE_2 ( patchSet . getId ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { VAR_1 . update ( result ) ; } public void METHOD_2 ( TYPE_5 VAR_2 ) { b . METHOD_3 ( true ) ; } } ) . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 project , java.lang.String path , final TYPE_3 VAR_1 , byte [ ] VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 ) ) ( return TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) . METHOD_3 ( VAR_3 . toString ( ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( path , VAR_4 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( final TYPE_2 index ) ) ( TYPE_3 VAR_1 = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ) ( VAR_1 . METHOD_2 ( 2 ) ) ( TYPE_6 VAR_3 = TYPE_6 . METHOD_3 ( ) ) ( java.util.List < com.google.gerrit.reviewdb.client.Account.Id > VAR_4 ) ( try ) ( end-try ) ( VAR_4 = METHOD_4 ( VAR_1 ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_5 . error ( STRING_1 , e ) ) ( return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; ) ( return METHOD_5 ( index , VAR_4 , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) ) ( try ) ( end-try ) ( org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ) ( try ) ( end-try ) ( return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) ) ; ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( end-catch ) ( catch (java.io.IOException e) ) ( java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) ( VAR_1 . error ( msg , e ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final java.lang.String token , final java.lang.String VAR_1 ) ) ( if ( token . METHOD_2 ( STRING_1 ) ) ) ( return TYPE_1 . METHOD_3 ( group . METHOD_4 ( ) , VAR_1 ) ; ) ( endif ) ( return TYPE_1 . METHOD_3 ( group . METHOD_5 ( ) , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 rsrc ) ) ( if ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ( return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; ) ( endif ) ( return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( account ) ; return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } } ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( final java.lang.String VAR_2 = STRING_2 ) ( final TYPE_1 p = new TYPE_1 ( VAR_1 ) ) ( final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ) ( METHOD_2 ( p , c . getParentKey ( ) ) ) ( METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) != ( c . METHOD_4 ( ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) ) ( java.lang.String name = METHOD_1 ( VAR_1 ) ) ( return new TYPE_1 ( name , VAR_4 , VAR_3 . user , VAR_1 , VAR_2 , new TYPE_6 ( name ) , VAR_5 , VAR_6 , METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_7 class , null ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( for (com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( VAR_2 )) ) ( endfor ) ( final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , p . getAccountId ( ) ) ) ( if ( VAR_3 . METHOD_2 ( ) . contains ( VAR_5 ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void set( TYPE_1 info ) ) ( VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( info . METHOD_3 ( ) ) ) ) ( if ( ( info . message ( ) ) != null ) ) ( java.lang.String msg = info . message ( ) . METHOD_4 ( ) ) ( VAR_2 . METHOD_1 ( msg ) ) ( message . METHOD_5 ( VAR_3 . apply ( new TYPE_3 ( ) . append ( msg ) . METHOD_6 ( ) ) ) ) ( endif ) ( this . VAR_4 = info ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , METHOD_2 ( STRING_3 ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) ( r . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 a , final TYPE_1 b ) ) ( if ( a == b ) ) ( return true ; ) ( endif ) ( if ( ( a == null ) || ( b == null ) ) ) ( return false ; ) ( endif ) ( return a . equals ( b ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 key , TYPE_3 args ) ) ( if ( VAR_1 ) ) ( try ) ( end-try ) ( return VAR_2 . get ( key , VAR_3 . create ( key , args ) ) ; ) ( end-catch ) ( catch (TYPE_4|TYPE_5 e) ) ( VAR_4 . METHOD_2 ( ( STRING_1 + key ) , e ) ) ( return new TYPE_1 ( VAR_5 ) ; ) ( endif ) ( return new TYPE_1 ( VAR_6 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( TYPE_1 . HttpServletResponse VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) ) ( servlet . METHOD_4 ( null , VAR_1 ) ) ( TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( ) ) ( VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) ) ( servlet . METHOD_4 ( null , VAR_1 ) ) ( TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( VAR_1 ) ) ( java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , VAR_1 ) ) ( java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ) ( for (java.lang.String VAR_3 : VAR_1) ) ( endfor ) ( VAR_2 . add ( ( STRING_1 + VAR_3 ) ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) ) ( java.lang.String VAR_4 = ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) ( if ( VAR_2 > 0 ) ) ( return ( TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ( VAR_2 + 1 ) ) ) + VAR_4 ; ) ( endif ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final org.eclipse.jgit.lib.ObjectId VAR_1 ) ) ( if ( ( ( path ) == null ) || ( VAR_1 == null ) ) ) ( return null ; ) ( endif ) ( final org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ) ( final TYPE_5 VAR_3 = rw . METHOD_2 ( VAR_1 ) ) ( return TYPE_1 . METHOD_3 ( VAR_2 , path , VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ) ( VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , TYPE_1 req ) ) ( TYPE_2 res = new TYPE_2 ( ) ) ( servlet . METHOD_2 ( req , res ) ) ( assertEquals ( VAR_2 , res . getStatus ( ) ) ) ( assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) ( TYPE_3 < TYPE_4 > VAR_2 = java.util.Collections . METHOD_3 ( ) ) ( java.util.Set < TYPE_5 > VAR_3 = TYPE_6 . of ( VAR_4 ) ) ( return new TYPE_1 ( account , VAR_3 , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_2 , INT_1 ) ) ( VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_1 . METHOD_5 ( VAR_3 . ReviewDb class ) ) ) ( TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ( TYPE_1 . METHOD_8 ( VAR_1 ) ) ( VAR_4 . METHOD_9 ( STRING_1 , STRING_2 , INT_1 ) ) ( TYPE_1 . METHOD_10 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ( for (TYPE_4 VAR_3 : VAR_4) ) ( endfor ) ( try ) ( end-try ) ( TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 . METHOD_5 ( ) ) . METHOD_6 ( ) , STRING_1 , VAR_3 ) ) ( end-catch ) ( catch (TYPE_7 e) ) ( throw new TYPE_8 ( e ) ) ( VAR_1 . add ( VAR_3 ) ) ( return VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final org.eclipse.jgit.lib.Repository repo , final TYPE_2 VAR_1 , final boolean VAR_2 ) ) ( TYPE_1 m ) ( if ( VAR_2 ) ) ( m = TYPE_3 . METHOD_2 ( repo , true ) ) ( endif ) ( m = TYPE_4 . METHOD_2 ( repo ) ) ( m . METHOD_3 ( new TYPE_5 ( ) { protected TYPE_2 METHOD_4 ( ) { return VAR_1 ; } public void METHOD_5 ( ) { } public void METHOD_6 ( ) { } } ) ) ( return m ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . METHOD_5 ( ) ) ( METHOD_6 ( ) ) ( TYPE_2 . ChangeInfo info = METHOD_7 ( METHOD_8 ( VAR_1 ) ) ) ( java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ) ( com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_9 ( ) . METHOD_10 ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) ) ( METHOD_2 ( new TYPE_1 < java.lang.String > ( ) { public java.lang.String METHOD_3 ( ) throws java.lang.Exception { log . METHOD_4 ( STRING_1 , VAR_2 , VAR_1 ) ; client ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; log . METHOD_4 ( STRING_2 , VAR_2 , VAR_1 ) ; return VAR_1 ; } } ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String apply( TYPE_1 rsrc , TYPE_2 input ) ) ( final java.lang.String VAR_1 = ( VAR_2 ) ? STRING_1 : STRING_2 ) ( return java.lang.String.format ( STRING_3 , VAR_1 , ( TYPE_3 . METHOD_1 ( input . message ) ? TYPE_4 . METHOD_2 ( user . get ( ) . METHOD_3 ( ) , STRING_4 ) : input . message ) , rsrc . getName ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 t , TYPE_2 VAR_1 ) ) ( if ( t . METHOD_2 ( ) ) ) ( return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; ) ( endif ) ( if ( ! ( t . METHOD_3 ( ) ) ) ) ( return false ; ) ( endif ) ( return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 rp ) ) ( VAR_1 = rp . METHOD_2 ( ) ) ( if ( ( VAR_1 ) == null ) ) ( try ) ( end-try ) ( VAR_1 = rp . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( TYPE_2 VAR_3 = new TYPE_2 ( e . getMessage ( ) ) ) ( VAR_3 . METHOD_6 ( e ) ) ( throw VAR_3 ) ( endif ) ( rp . METHOD_7 ( VAR_1 , rp . METHOD_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 req , TYPE_3 . HttpServletResponse res , java.lang.String VAR_1 , java.util.Map < java.lang.String , ? > VAR_2 ) ) ( req . METHOD_2 ( VAR_3 , true ) ) ( return VAR_4 . METHOD_3 ( res , VAR_1 , METHOD_4 ( req , res , VAR_2 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 . Factory class ) . to ( VAR_2 . Factory class ) ) ( bind ( new TYPE_1 < TYPE_2 < TYPE_3 > > ( ) { } ) . to ( VAR_3 class ) ) ( bind ( VAR_4 class ) . METHOD_2 ( VAR_5 class ) ) ( METHOD_3 ( ) . to ( VAR_6 class ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 id ) ) ( if ( id . METHOD_2 ( VAR_1 ) ) ) ( return METHOD_3 ( ) ; ) ( endif ) ( if ( id . METHOD_2 ( VAR_2 ) ) ) ( return true ; ) ( endif ) ( if ( id . METHOD_2 ( VAR_3 ) ) ) ( return true ; ) ( endif ) ( if ( id . METHOD_2 ( VAR_4 ) ) ) ( return true ; ) ( endif ) ( for (final TYPE_2 p : VAR_5) ) ( endfor ) ( if ( p . METHOD_4 ( id ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository VAR_1 , TYPE_1 VAR_2 ) ) ( METHOD_2 ( VAR_2 ) ) ( TYPE_4 < TYPE_5 > VAR_3 = METHOD_3 ( VAR_2 ) ) ( if ( VAR_3 . METHOD_4 ( ) ) ) ( throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_2 . getId ( ) ) ) ) ( endif ) ( com.google.gerrit.reviewdb.client.PatchSet VAR_4 = METHOD_5 ( VAR_2 ) ) ( org.eclipse.jgit.lib.ObjectId VAR_5 = TYPE_6 . METHOD_6 ( VAR_4 ) ) ( METHOD_7 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , TYPE_7 . METHOD_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_2 , VAR_3 ) ) ( METHOD_4 ( VAR_1 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_2 , VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . to ( VAR_2 class ) ) ( install ( new TYPE_1 ( ) ) ) ( install ( new TYPE_1 ( ) ) ) ( install ( new TYPE_1 ( ) ) ) ( install ( new TYPE_1 ( ) ) ) ( install ( new TYPE_1 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( int i = 1 ) ( for (i < INT_1) ) ( i ++ ) ( endfor ) ( java.lang.String p = STRING_1 + i ) ( TYPE_2 . METHOD_2 ( VAR_1 , p ) ) ( TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( db . create ( ) ) ( final TYPE_2 VAR_1 = METHOD_2 ( ) ) ( final TYPE_2 VAR_2 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 ) ) ( assertEquals ( VAR_3 , VAR_4 ) ) ( assertEquals ( VAR_5 , VAR_6 ) ) ( assertEquals ( VAR_7 , VAR_8 ) ) ( assertEquals ( VAR_9 , VAR_10 ) ) ( assertEquals ( VAR_11 , VAR_12 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_2<TYPE_1> METHOD_1( java.lang.String name , TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) ) ( TYPE_5 . METHOD_2 ( VAR_1 ) ) ( TYPE_6 < TYPE_1 > m = new TYPE_6 ( this , name , VAR_1 , VAR_2 ) ) ( METHOD_3 ( name , VAR_1 ) ) ( VAR_3 . put ( name , m ) ) ( return m . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean equals( final TYPE_1 VAR_1 ) ) ( return ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) && ( METHOD_2 ( ) . equals ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . METHOD_2 ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void delete( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) ) ( final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) ( if ( VAR_2 == null ) ) ( throw new TYPE_1 ( STRING_1 ) ) ( endif ) ( METHOD_3 ( VAR_2 ) ) ( if ( ! VAR_1 ) ) ( METHOD_4 ( project . METHOD_2 ( ) , VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ) ( TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ) ( METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) ( com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit ) ) ) ( METHOD_5 ( STRING_7 ) ) ( METHOD_5 ( STRING_8 , change ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( final int VAR_1 ) ) ( for (final TYPE_1 s : VAR_2) ) ( endfor ) ( boolean VAR_3 = false ) ( if ( VAR_1 <= ( VAR_4 ) ) ) ( ( VAR_4 ) ++ ) ( endif ) ( if ( VAR_1 < ( VAR_5 ) ) ) ( ( VAR_5 ) ++ ) ( endif ) ( return table . METHOD_1 ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 ctl , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_2 VAR_2 ) ) ( if ( ! ( VAR_3 . isEmpty ( ) ) ) ) ( VAR_4 . get ( ) . apply ( new TYPE_3 ( new TYPE_4 ( ctl ) , db . patchSets ( ) . get ( VAR_1 ) ) , VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 user ) ) ( java.lang.String project = VAR_2 . getProject ( ) . getName ( ) ) ( java.lang.String VAR_3 = ( TYPE_4 . METHOD_2 ( user . METHOD_3 ( ) ) ) ? STRING_1 : user . METHOD_3 ( ) ) ( VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_1 , VAR_3 , project ) ) ) ( throw new TYPE_3 ( VAR_1 , project ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) ) ( com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ) ( VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( TYPE_2 rsrc ) ) ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ) ( for (TYPE_1 c : db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . METHOD_6 ( ) )) ) ( endfor ) ( VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.lib.Repository repo ) ) ( if ( ( ( change ) != null ) && ( VAR_1 ) ) ) ( TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ) ( if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( new TYPE_3 ( repo ) , VAR_3 ) ) ) ) ) ( return METHOD_4 ( repo ) ; ) ( endif ) ( endif ) ( return super . METHOD_1 ( repo ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.Map < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < > ( ) ) ( java.lang.String VAR_2 = STRING_1 ) ( VAR_1 . put ( STRING_2 , VAR_2 ) ) ( java.lang.String query = VAR_3 . METHOD_2 ( VAR_1 ) ) ( org.junit.Assert . METHOD_3 ( query . contains ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( TYPE_1 [ ] VAR_1 , TYPE_2 < org.eclipse.jgit.lib.Repository > repo , org.eclipse.jgit.revwalk.RevCommit ... VAR_2 ) ) ( final TYPE_3 VAR_3 = repo . METHOD_2 ( VAR_1 ) ) ( org.eclipse.jgit.revwalk.RevCommit c = ( VAR_2 == null ) ? repo . commit ( VAR_3 ) : repo . commit ( VAR_3 , VAR_2 ) ) ( repo . METHOD_3 ( c ) ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < TYPE_2 . NameKey > VAR_1 ) ) ( METHOD_2 ( STRING_1 ) ) ( TYPE_3 VAR_2 = VAR_3 . get ( ) ) ( try ) ( end-try ) ( VAR_2 . METHOD_1 ( db , VAR_1 , VAR_4 , VAR_5 ) ) ( METHOD_2 ( STRING_2 ) ) ( end-catch ) ( catch (TYPE_4 e) ) ( METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . Id VAR_1 ) ) ( if ( ( VAR_2 ) != null ) ) ( for (final TYPE_2 p : VAR_2) ) ( endfor ) ( p . METHOD_2 ( VAR_1 ) ) ( if ( p . METHOD_3 ( ) ) ) ( p . METHOD_1 ( ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( METHOD_2 ( VAR_1 ) ) ) ( TYPE_1 . info ( STRING_1 ) ) ( bind ( VAR_2 class ) . to ( VAR_3 class ) . in ( VAR_4 ) ) ( bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( new TYPE_3 ( VAR_1 , VAR_6 ) ) ) ( install ( new TYPE_4 ( VAR_1 , VAR_6 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 type ) ) ( type = type . METHOD_2 ( ) ) ( while ( ! ( VAR_1 class . getName ( ) . equals ( type . METHOD_3 ( ) ) ) ) ) ( endwhile ) ( if ( ( TYPE_2 . METHOD_4 ( type ) . length ) > 0 ) ) ( return true ; ) ( endif ) ( type = type . METHOD_2 ( ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) ) ( return new TYPE_1 ( ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) ) ; ) ( endif ) ( if ( VAR_3 . METHOD_4 ( ) ) ) ( return METHOD_5 ( ) ; ) ( endif ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( true ) ) ( METHOD_3 ( ) ) ( TYPE_1 . Result r = METHOD_4 ( ) ) ( revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) ) ( METHOD_6 ( r , ( - 2 ) ) ) ( r = METHOD_7 ( r . getChangeId ( ) ) ) ( METHOD_6 ( r , ( - 2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . Result r ) ) ( revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) ( revision ( r ) . submit ( ) ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( project ) ) ( try ) ( end-try ) ( com.google.common.truth.Truth.assertThat ( repo . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) . isEqualTo ( r . METHOD_7 ( ) ) ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) ) ) ) ( assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_5 ) + STRING_6 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) + ( VAR_1 ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . to ( VAR_2 class ) ) ( factory ( VAR_3 . Factory class ) ) ( factory ( VAR_4 . Factory class ) ) ( factory ( VAR_5 . Factory class ) ) ( factory ( VAR_6 . Factory class ) ) ( factory ( VAR_7 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . Id VAR_2 ) ) ( java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) ( for (TYPE_1 VAR_4 : VAR_1) ) ( endfor ) ( if ( ( TYPE_4 . METHOD_2 ( getRefName ( ) , VAR_4 . METHOD_3 ( ) ) ) && ( VAR_4 . METHOD_4 ( ) . equals ( VAR_2 ) ) ) ) ( VAR_3 . add ( VAR_4 ) ) ( endif ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( ) ) ( int VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_3 . METHOD_2 ( ) ) ) ( if ( VAR_4 . METHOD_3 ( ) ) ) ( VAR_1 += VAR_4 . METHOD_2 ( ) ) ( endif ) ( if ( VAR_5 . METHOD_3 ( ) ) ) ( VAR_1 += VAR_5 . METHOD_2 ( ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( final TYPE_2 set ) ) ( final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( set . METHOD_2 ( ) ) ) ( java.util.Collections . METHOD_1 ( VAR_1 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; } } ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , TYPE_1 < java.lang.String > c , TYPE_1 < java.lang.String > p ) ) ( assertEquals ( ( VAR_1 + STRING_1 ) , 1 , p . METHOD_2 ( ) ) ) ( METHOD_3 ( ( VAR_1 + STRING_1 ) , c , p . METHOD_4 ( 0 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( VAR_1 ) ) ( return new TYPE_2 ( ) ; ) ( endif ) ( TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ) ( switch ( VAR_2 ) ) ( end-switch ) ( case VAR_4 : ) ( return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; ) ( case VAR_6 : ) ( return new TYPE_6 ( ) ; ) ( default : ) ( throw new TYPE_7 ( ( STRING_1 + VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ) ( TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 class ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_4 ( ) ) ( TYPE_4 VAR_4 = VAR_1 . METHOD_3 ( VAR_3 class ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) ) ( VAR_1 . append ( CHAR_1 ) ) ( boolean VAR_3 = true ) ( for (final TYPE_2 VAR_4 : VAR_2) ) ( endfor ) ( if ( VAR_3 ) ) ( VAR_3 = false ) ( endif ) ( VAR_1 . append ( CHAR_2 ) ) ( if ( VAR_4 != null ) ) ( VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) ( endif ) ( VAR_1 . append ( VAR_6 ) ) ( VAR_1 . append ( CHAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( Project.NameKey METHOD_1( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 ) ) ( TYPE_2 in = new TYPE_2 ( ) ) ( in . name = ( VAR_4 ) + VAR_1 ) ( VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null ) ( VAR_6 = VAR_3 ) ( return METHOD_1 ( in ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String changeId ) ) ( TYPE_1 r = VAR_1 . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_2 ( ) . label ( STRING_3 , 2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) ( r . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( final java.lang.String VAR_2 = STRING_2 ) ( final TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ) ( assertEquals ( STRING_3 , VAR_3 . toString ( ) ) ) ( final TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( STRING_4 ) , STRING_4 ) ) ( VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) ) ( assertEquals ( VAR_3 , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( PatchSet.Id METHOD_1( ) ) ( try ) ( end-try ) ( if ( magicBranch . edit ) ) ( return METHOD_2 ( ) ; ) ( endif ) ( if ( VAR_1 == ( TYPE_2 . METHOD_3 ( ) ) ) ) ( return METHOD_4 ( db ) ; ) ( endif ) ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_5 ( ) ) ( try ) ( end-try ) ( return METHOD_4 ( db ) ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( finally ) ( synchronized ( VAR_3 ) ) ( VAR_3 . update ( 1 ) ) ( end-synchronized ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String changeId , int psId ) ) ( TYPE_1 VAR_1 = VAR_2 . create ( TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ) ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo getChange( TYPE_2 . Result VAR_1 ) ) ( TYPE_3 r = VAR_2 . get ( ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) + STRING_2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_1 ( ) ) ) ( return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 . ChangeInfo class ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ) ( if ( sshd ) ) ( modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ) ( if ( ! ( VAR_3 ) ) ) ( modules.add ( new TYPE_3 ( ) ) ) ( endif ) ( if ( VAR_4 ) ) ( modules.add ( new TYPE_4 ( ) ) ) ( endif ) ( modules.add ( new TYPE_5 ( ) ) ) ( endif ) ( modules.add ( new TYPE_6 ( ) ) ) ( return VAR_1 . METHOD_3 ( modules ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ) ( com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ) ( TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ) ( return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( admin , VAR_2 ) ) ( METHOD_4 ( admin ) ) ( METHOD_5 ( VAR_1 , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 , admin , VAR_3 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_11 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( TYPE_1 VAR_2 = new TYPE_1 ( ) ) ( TYPE_4 in = new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 , STRING_1 ) , STRING_2 ) ) ) ( try ) ( end-try ) ( VAR_2 . METHOD_2 ( in ) ) ( finally ) ( in . close ( ) ) ( end-finally ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) ) ( TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 ) ) ( try ) ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_3 ( ) , VAR_1 . METHOD_2 ( ) , TYPE_7 . METHOD_4 ( ) ) ) ( end-try ) ( u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ) ( return VAR_4 . change ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) ) ( if ( ! ( id . equals ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ) ) ) ) ) ( TYPE_2 p = new TYPE_2 ( ) ) ( p . METHOD_3 ( walk . METHOD_4 ( ) , walk . METHOD_5 ( id ) ) ) ( return p ; ) ( endif ) ( return new TYPE_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 format( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ) ( TYPE_4 ctl = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ) ( return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , ctl , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) ) ( try ) ( end-try ) ( TYPE_5 VAR_1 = new TYPE_5 ( ) ) ( int i = 0 ) ( for (i < ( p . METHOD_2 ( ) )) ) ( i ++ ) ( endfor ) ( VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , p . METHOD_4 ( i ) ) , VAR_2 ) ) ( return VAR_1 ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw new TYPE_4 ( ( STRING_1 + p ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( final TYPE_1 p = VAR_1 . METHOD_2 ( ) ) ( TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ) ( VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ) ( VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_3 VAR_1 = VAR_2 ) ( if ( VAR_1 == null ) ) ( VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , METHOD_4 ( ) . METHOD_5 ( ) ) ) ( VAR_2 = VAR_1 ) ( endif ) ( return VAR_4 . create ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<java.lang.String> METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ) ( com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( psId . getParentKey ( ) ) ) ( if ( c == null ) ) ( return null ; ) ( endif ) ( TYPE_1 notes = VAR_1 . create ( db , c ) ) ( com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ) ( return ps != null ? ps . METHOD_2 ( ) : null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( byte [ ] VAR_1 , int VAR_2 ) ) ( TYPE_7 VAR_3 = new TYPE_7 ( VAR_1 ) ) ( TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( STRING_1 ) ) ( TYPE_8 VAR_5 = TYPE_8 . METHOD_2 ( VAR_6 ) ) ( VAR_5 . METHOD_3 ( VAR_3 ) ) ( VAR_4 . METHOD_3 ( VAR_2 , key . get ( ) , VAR_5 ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) ) ( try ) ( end-try ) ( return this . apply ( new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 , VAR_3 . get ( ) ) ) ) ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw new TYPE_3 ( VAR_1 . get ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( TYPE_1 . equals ( TYPE_2 . METHOD_2 ( VAR_1 . getValue ( VAR_1 . METHOD_3 ( ) ) ) ) ) ) ( VAR_2 . METHOD_4 ( false ) ) ( final TYPE_3 VAR_3 = new TYPE_3 ( ) ) ( VAR_3 . METHOD_5 ( VAR_4 . FALSE ) ) ( TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 ) ) ( endif ) ( VAR_2 . METHOD_4 ( VAR_1 . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_1 VAR_1 ) ) ( try ) ( end-try ) ( final java.util.List < ? > VAR_2 = VAR_3 . METHOD_2 ( ( ( java.lang.String ) ( VAR_1 ) ) ) ) ( return ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ? VAR_2 : null ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ) ( r . METHOD_2 ( ) ) ( final java.lang.String VAR_3 = STRING_3 ) ( TYPE_2 in = new TYPE_2 ( ) ) ( VAR_4 = VAR_1 ) ( r = VAR_2 . put ( ( STRING_2 + VAR_3 ) , in ) ) ( com.google.gerrit.reviewdb.client.Project project = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_3 ) ) . getProject ( ) ) ( org.junit.Assert.assertEquals ( VAR_4 , project . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Change update( TYPE_1 . Change change ) ) ( if ( ( ( change . getStatus ( ) ) == ( VAR_1 ) ) && ( change . currentPatchSetId ( ) . equals ( VAR_2 ) ) ) ) ( change . METHOD_1 ( VAR_3 ) ) ( TYPE_2 . METHOD_2 ( change ) ) ( return change ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.lang.String path , TYPE_2 < TYPE_1 > VAR_1 ) ) ( int i = 0 ) ( for (i < ( VAR_1 . length ( ) )) ) ( i ++ ) ( endfor ) ( VAR_1 . get ( i ) . METHOD_2 ( path ) ) ( return TYPE_3 . METHOD_3 ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.AccountGroup METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ) ( if ( VAR_2 == null ) ) ( VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ) ( endif ) ( TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) ) ) ( return VAR_4 . get ( VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> get( ) ) ( TYPE_3 < TYPE_2 > m = new TYPE_3 < TYPE_2 > ( ) ) ( java.util.List < TYPE_4 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_1 ( type ) ) ( if ( VAR_1 != null ) ) ( for (TYPE_4 < TYPE_2 > b : VAR_1) ) ( endfor ) ( m . put ( STRING_1 , b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) ) ( endif ) ( return m ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_1 > ( this , new TYPE_3 < TYPE_1 > ( ) { public void onSuccess ( final TYPE_1 result ) { VAR_2 . display ( result , VAR_1 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_3 ( ) ; } } } ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.lib.Repository repo ) ) ( if ( VAR_1 ) ) ( TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ) ( TYPE_3 refs = ( ( this . refs ) != null ) ? this . refs : new TYPE_4 ( repo ) ) ( if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( refs ) ) ) ) ) ( return METHOD_4 ( repo ) ; ) ( endif ) ( endif ) ( return super . METHOD_1 ( repo ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String path , boolean VAR_1 ) ) ( try ) ( end-try ) ( TYPE_2 < TYPE_3 , TYPE_4 > view ) ( if ( VAR_1 ) ) ( view = VAR_2 ) ( endif ) ( view = VAR_3 ) ( view . apply ( VAR_4 . get ( ) . METHOD_2 ( revision , TYPE_5 . METHOD_3 ( path ) ) , new TYPE_4 ( ) ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 group ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( ) ) ( if ( ( TYPE_3 . METHOD_2 ( group ) ) && ( ( ( TYPE_4 ) ( group ) ) . METHOD_3 ( ) ) ) ) ( VAR_2 = true ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) ) ( assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( java.lang.String name , TYPE_1 VAR_1 , TYPE_2 . ChangeInfo VAR_2 , TYPE_3 VAR_3 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_2 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_5 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_6 ) . isEqualTo ( 1 ) ) ( if ( name . equals ( STRING_1 ) ) ) ( return false ; ) ( endif ) ( if ( name . equals ( STRING_2 ) ) ) ( VAR_1 . label = STRING_3 ) ( endif ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) ( TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( endif ) ( if ( ( VAR_2 ) == null ) ) ( TYPE_2 VAR_3 = METHOD_5 ( ) ) ( if ( ! ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ) ( VAR_1 . METHOD_8 ( VAR_3 , VAR_4 . METHOD_9 ( ) ) ) ( endif ) ( endif ) ( METHOD_10 ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( java.lang.String [ ] projects = config . METHOD_2 ( ) ) ( boolean VAR_1 = ( projects . length ) == 1 ) ( if ( VAR_1 ) ) ( java.lang.String VAR_2 = projects [ 0 ] ) ( if ( ( TYPE_1 . METHOD_3 ( VAR_2 ) ) != ( VAR_3 ) ) ) ( VAR_1 = false ) ( endif ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String name , TYPE_1 value , TYPE_2 VAR_1 ) ) ( VAR_1 . METHOD_2 ( ) ) ( TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ) ( TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ) ( METHOD_5 ( VAR_2 , ( ) - > ) ( VAR_2 . set ( value ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 . Account account ) ) ( if ( account != null ) ) ( java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ) ( if ( ( account . METHOD_3 ( ) ) != null ) ) ( result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ) ( endif ) ( return result ; ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int changeId , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) ) ( TYPE_3 VAR_2 = new TYPE_3 ( ( ( ( VAR_3 ) + changeId ) + STRING_1 ) ) ) ( TYPE_4 msg = new TYPE_4 ( ) ) ( msg . METHOD_2 ( message ) ) ( VAR_2 . METHOD_3 ( msg , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 in = new TYPE_2 ( ) ) ( VAR_2 = VAR_1 ) ( try ) ( end-try ) ( VAR_3 . apply ( rsrc , in ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . ReviewDb db , final TYPE_1 . Change change ) ) ( final java.util.List < TYPE_1 . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ) ( for (TYPE_1 . PatchSetApproval a : approvals) ) ( endfor ) ( a . METHOD_5 ( change ) ) ( db . METHOD_2 ( ) . update ( approvals ) ) ( CFG Exit )
( CFG Entry ) ( void display( final TYPE_1 VAR_1 ) ) ( METHOD_1 ( ) ) ( final TYPE_2 . PatchSet VAR_2 = VAR_1 . METHOD_2 ( ) ) ( currentPatchSetId = VAR_2 . METHOD_3 ( ) ) ( for (final TYPE_2 . PatchSet ps : VAR_1 . METHOD_4 ( )) ) ( endfor ) ( if ( ps == VAR_2 ) ) ( add ( new TYPE_3 ( VAR_3 , VAR_1 , VAR_1 . METHOD_5 ( ) ) ) ) ( endif ) ( add ( new TYPE_3 ( VAR_3 , VAR_1 , ps ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 . Id id , TYPE_2 . ReviewDb db ) ) ( TYPE_2 . PatchSet ps = db . patchSets ( ) . get ( id ) ) ( if ( ps == null ) ) ( throw new TYPE_3 . OrmException ( ( ( STRING_1 + id ) + STRING_2 ) ) ) ( endif ) ( return ps . METHOD_2 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo info ) ) ( java.lang.String VAR_1 ) ( if ( info . METHOD_2 ( ) . equals ( info . METHOD_3 ( ) ) ) ) ( VAR_1 = TYPE_2 . METHOD_4 ( ) ) ( endif ) ( VAR_1 = TYPE_2 . METHOD_5 ( ) ) ( VAR_2 . METHOD_6 ( VAR_1 ) ) ( VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( info . METHOD_3 ( ) ) ) ) ( METHOD_8 ( ( ( FLOAT_1 - ( VAR_4 ) ) - ( METHOD_9 ( VAR_5 ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 group ) ) ( if ( group != null ) ) ( TYPE_1 ref = VAR_1 . get ( group . METHOD_2 ( ) ) ) ( if ( ref != null ) ) ( return ref ; ) ( endif ) ( VAR_1 . put ( group . METHOD_2 ( ) , group ) ) ( endif ) ( return group ; ) ( CFG Exit )
( CFG Entry ) ( void codemirror( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line , final boolean edit ) ) ( TYPE_3 . METHOD_1 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , ( edit ? new TYPE_6 ( VAR_1 , id , line ) : new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = METHOD_2 ( VAR_2 class ) ) ( bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ) ( VAR_3 = METHOD_2 ( VAR_4 class ) ) ( bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ) ( VAR_5 = METHOD_2 ( VAR_6 class ) ) ( bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ) ( bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( com.google.gerrit.reviewdb.client.Project.NameKey name ) ) ( TYPE_1 repo = VAR_1 . get ( name . get ( ) . METHOD_1 ( ) ) ) ( if ( repo != null ) ) ( return repo ; ) ( endif ) ( throw new TYPE_2 ( name . get ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 p , TYPE_2 < TYPE_3 . PatchSetApproval > VAR_1 ) ) ( if ( ! ( VAR_1 . isEmpty ( ) ) ) ) ( p . approvals = new java.util.ArrayList < TYPE_4 > ( VAR_1 . size ( ) ) ) ( for (TYPE_3 . PatchSetApproval a : VAR_1) ) ( endfor ) ( if ( ( a . getValue ( ) ) != 0 ) ) ( VAR_2 . add ( METHOD_2 ( a ) ) ) ( endif ) ( if ( VAR_2 . isEmpty ( ) ) ) ( p . approvals = null ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( long METHOD_1( TYPE_1 p ) ) ( long VAR_1 = METHOD_2 ( ) ) ( long VAR_2 = p . METHOD_2 ( ) ) ( if ( ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) ) ( return TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; ) ( endif ) ( return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . NameKey project , final java.lang.String ref , final TYPE_2 VAR_1 ) ) ( synchronized ( VAR_2 ) ) ( TYPE_3 e = VAR_2 . get ( VAR_1 ) ) ( if ( e == null ) ) ( e = new TYPE_3 ( this , project . get ( ) , VAR_3 , VAR_1 ) ) ( VAR_4 . METHOD_1 ( e , VAR_5 , VAR_6 ) ) ( VAR_2 . put ( VAR_1 , e ) ) ( endif ) ( e . METHOD_2 ( ref ) ) ( end-synchronized ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 user , TYPE_3 revision ) ) ( return new TYPE_1 ( user . METHOD_2 ( ) , revision . METHOD_3 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = new TYPE_2 ( ) ) ( TYPE_3 update = METHOD_2 ( VAR_2 , VAR_1 ) ) ( try ) ( end-try ) ( VAR_3 . update ( VAR_4 ) ) ( org.junit.Assert . METHOD_3 ( STRING_1 ) ) ( end-catch ) ( catch (TYPE_4.OrmException e) ) ( org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ) ( METHOD_6 ( update , 1 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) ) ( java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ) ( for (TYPE_1 VAR_3 : VAR_4 . get ( ) . METHOD_2 ( project . getName ( ) , VAR_1 , file )) ) ( endfor ) ( if ( ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . name ) ) ) && ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . url ) ) ) ) ) ( VAR_2 . add ( VAR_3 ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_1 VAR_1 ) ) ( VAR_2 . get ( ) . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 , VAR_11 ) . METHOD_6 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_2 . of ( STRING_1 , TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) ) ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_6 , VAR_7 . Collections < java.lang.String , java.util.ArrayList < TYPE_4 > > METHOD_4 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( final org.eclipse.jgit.lib.Repository repo ) ) ( TYPE_1 VAR_1 = repo . METHOD_2 ( ) ) ( org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ) ( VAR_1 . METHOD_3 ( ) ) ( return id ; ) ( METHOD_4 ( INT_1 ) ) ( TYPE_2 . a VAR_3 ) ( TYPE_3 to ) ( TYPE_4 revision ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 res , final boolean VAR_1 ) ) ( final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ) ( final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ) ( if ( ( VAR_3 ) != null ) ) ( VAR_4 . METHOD_3 ( key ) ) ( endif ) ( key = VAR_4 . METHOD_4 ( id ) ) ( VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 , null ) ) ( METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( ) ) ( java.util.Map < java.lang.String , TYPE_2 > VAR_1 = VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) ( for (TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( )) ) ( endfor ) ( TYPE_2 VAR_4 = VAR_3 . getValue ( ) ) ( if ( ( VAR_4 . type ) == null ) ) ( VAR_4 . type = VAR_5 ) ( endif ) ( VAR_4 . name = VAR_3 . getKey ( ) ) ( return VAR_1 . values ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ) ( bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ) ( factory ( VAR_7 . Factory class ) ) ( factory ( VAR_8 . Factory class ) ) ( com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ) ( install ( VAR_11 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ) ( if ( VAR_2 == null ) ) ( return null ; ) ( endif ) ( for (TYPE_2 VAR_3 : VAR_2) ) ( endfor ) ( if ( VAR_3 . getName ( ) . METHOD_3 ( STRING_1 ) ) ) ( return VAR_3 . getValue ( ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( VAR_1 ) ) ( java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , VAR_2 ) ) ( java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ) ( for (java.lang.String VAR_4 : VAR_1) ) ( endfor ) ( VAR_3 . add ( ( STRING_1 + VAR_4 ) ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 revision( java.lang.String id ) ) ( try ) ( end-try ) ( return VAR_1 . create ( VAR_2 . METHOD_1 ( change , TYPE_3 . METHOD_2 ( id ) ) ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . ReviewDb db ) ) ( VAR_1 . METHOD_2 ( db . METHOD_3 ( ) . METHOD_4 ( changeId ) . METHOD_5 ( ) ) ) ( for (final TYPE_3 m : VAR_1 . METHOD_6 ( )) ) ( endfor ) ( VAR_2 . METHOD_7 ( m . METHOD_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . Factory VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 user , TYPE_3 < TYPE_4 > VAR_2 , java.lang.String VAR_3 ) ) ( METHOD_1 ( VAR_1 , project , user , VAR_2 , VAR_3 , VAR_4 , TYPE_7 . of ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) ) ( TYPE_2 r = VAR_3 . get ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ) ( return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 class ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 run( TYPE_2 . ReviewDb db ) ) ( TYPE_4 . Id VAR_1 = getAccountId ( ) ) ( if ( ! ( VAR_2 . getAccountId ( ) . equals ( getAccountId ( ) ) ) ) ) ( throw new TYPE_5 ( ( ( ( ( STRING_1 + ( VAR_2 . getAccountId ( ) ) ) + STRING_2 ) + STRING_3 ) + ( getAccountId ( ) ) ) ) ) ( endif ) ( db . METHOD_1 ( ) . METHOD_2 ( java.util.Collections.singleton ( VAR_2 ) ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( ) ) ( final TYPE_3 p = VAR_1 . METHOD_2 ( ) ) ( final java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( 2 ) ) ( TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_3 ) ) ( TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_4 ) ) ( return java.util.Collections . METHOD_4 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( Account.Id METHOD_1( final java.lang.String VAR_1 ) ) ( try ) ( end-try ) ( final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( final TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ) ( return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ) ( com.google.gerrit.extensions.registration.DynamicSet < TYPE_2 > VAR_3 = com.google.gerrit.extensions.registration.DynamicSet . METHOD_3 ( ) ) ( VAR_3 . add ( VAR_1 ) ) ( VAR_4 = new TYPE_3 ( null , VAR_3 , null , null , null ) ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 result ) ) ( if ( METHOD_1 ( ) ) ) ( if ( ( ( result . length ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ) ) ( TYPE_3 . ChangeInfo c = result . get ( 0 ) ) ( com.google.gerrit.reviewdb.client.Change . Id id = c . METHOD_3 ( ) ) ( TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ) ( endif ) ( display ( result ) ) ( this . display ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void index( TYPE_1 VAR_1 ) ) ( for (TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( )) ) ( endfor ) ( TYPE_4 < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ) ( if ( VAR_2 . METHOD_3 ( ) ) ) ( i . METHOD_4 ( VAR_2 . get ( ) ) ) ( endif ) ( i . delete ( VAR_1 ) ) ( METHOD_5 ( VAR_1 . get ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) ) ( new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> get( ) ) ( java.util.Set < java.lang.String > VAR_1 = cfg . METHOD_1 ( VAR_2 ) ) ( java.util.List < TYPE_1 > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . size ( ) ) ) ( for (java.lang.String name : VAR_1) ) ( endfor ) ( VAR_3 . add ( TYPE_3 . METHOD_3 ( cfg , name ) ) ) ( return TYPE_4 . METHOD_4 ( VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<TYPE_1> METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( METHOD_2 ( ) ) ( if ( VAR_1 ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( VAR_3 ) ) ( end-try ) ( return TYPE_2 . METHOD_1 ( repo , TYPE_2 . METHOD_4 ( repo ) ) ; ) ( endif ) ( return TYPE_1 . METHOD_5 ( db . METHOD_6 ( ) . METHOD_1 ( ) . METHOD_7 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1[] METHOD_1( ) ) ( if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . get ( STRING_1 ) ) == null ) ) ) ( return new TYPE_1 [ 0 ] ; ) ( endif ) ( return VAR_1 . get ( STRING_1 ) . METHOD_2 ( new TYPE_1 [ 0 ] ) ; ) ( CFG Exit )
( CFG Entry ) ( void run( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) ) ( for (final TYPE_1 t : TYPE_3 . METHOD_1 ( ) . METHOD_2 ( )) ) ( endfor ) ( if ( ! ( VAR_2 . METHOD_3 ( t ) ) ) ) ( VAR_2 . METHOD_4 ( VAR_1 , false ) ) ( return ; ) ( endif ) ( VAR_2 . METHOD_4 ( VAR_1 , true ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.Repository METHOD_1( java.lang.String name ) ) ( if ( VAR_1 . METHOD_2 ( name ) ) ) ( return VAR_1 . get ( name ) ; ) ( endif ) ( name = TYPE_1 . METHOD_3 ( VAR_2 , name ) ) ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ( VAR_1 . put ( name , repo ) ) ( return repo ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( final TYPE_2 ctx = VAR_2 . METHOD_2 ( VAR_3 , null ) ) ( final TYPE_2 VAR_4 = VAR_2 . set ( ctx ) ) ( try ) ( end-try ) ( VAR_5 . METHOD_3 ( ) ) ( finally ) ( VAR_2 . set ( VAR_4 ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final java.lang.String VAR_1 ) ) ( try ) ( end-try ) ( final TYPE_2 . ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( final java.util.List < TYPE_3 > VAR_2 = db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ) ( return ! ( VAR_2 . isEmpty ( ) ) ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( end-catch ) ( catch (TYPE_4.OrmException e) ) ( throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void p( final TYPE_1 r , final TYPE_2 . NameKey project ) ) ( java.lang.String n = project . get ( ) ) ( if ( ! ( n . METHOD_1 ( STRING_1 ) ) ) ) ( n += STRING_1 ) ( endif ) ( TYPE_3 . METHOD_2 ( r , STRING_2 , n ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 . Id VAR_1 ) ) ( final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ) ( if ( group == null ) ) ( throw new TYPE_3 ( VAR_1 ) ) ( endif ) ( return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1.ChangeInfo> METHOD_1( TYPE_2 query , com.google.gerrit.reviewdb.client.Change ... changes ) ) ( java.util.List < TYPE_1 . ChangeInfo > result = query . get ( ) ) ( TYPE_3 < TYPE_4 > VAR_1 = TYPE_5 . METHOD_2 ( result ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( query . METHOD_4 ( ) ) . METHOD_5 ( TYPE_5 . METHOD_2 ( changes ) ) . METHOD_6 ( ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( VAR_1 ) ) ( throw new TYPE_1 ( STRING_1 ) ) ( endif ) ( for (TYPE_2 VAR_2 : VAR_3) ) ( endfor ) ( TYPE_3 args = VAR_2 . args ) ( com.google.gerrit.reviewdb.client.Account account = VAR_4 . get ( VAR_5 . getAccountId ( ) ) . METHOD_2 ( ) ) ( VAR_6 . METHOD_3 ( VAR_7 , VAR_8 . METHOD_4 ( ) , VAR_8 . METHOD_5 ( ) , account ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String[] METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey p ) ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( p ) ) ( try ) ( end-try ) ( TYPE_2 VAR_2 = new TYPE_2 ( repo . METHOD_3 ( ) , STRING_1 ) ) ( return VAR_2 . METHOD_4 ( new TYPE_3 ( ) { public boolean METHOD_5 ( TYPE_2 VAR_3 , java.lang.String name ) { return name . METHOD_6 ( STRING_2 ) ; } } ) ; ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) ) ( com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) ( cd . METHOD_2 ( user ) ) ( if ( TYPE_5 . METHOD_3 ( cfg ) ) ) ( return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; ) ( endif ) ( return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( ) ) ( synchronized ( this ) ) ( boolean VAR_2 = ! ( VAR_3 . isEmpty ( ) ) ) ( for (TYPE_1 p : VAR_3 . values ( )) ) ( endfor ) ( p . METHOD_1 ( ) ) ( VAR_3 . METHOD_3 ( ) ) ( VAR_4 . METHOD_3 ( ) ) ( if ( VAR_2 ) ) ( TYPE_2 . METHOD_4 ( ) ) ( METHOD_5 ( ) ) ( endif ) ( end-synchronized ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 VAR_1 ) ) ( TYPE_3 info = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( project , revision , file ) ) ( TYPE_1 VAR_2 = new TYPE_1 ( ) ) ( VAR_2 . name = info . name ) ( VAR_3 = VAR_4 ) ( VAR_2 . url = info . url ) ( VAR_5 = VAR_6 ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void rpc( final java.lang.String name , TYPE_1 < ? extends TYPE_2 > VAR_1 ) ) ( final TYPE_3 . Key < TYPE_4 > VAR_2 = TYPE_5 . get ( VAR_3 class , TYPE_6 . create ( ) ) ) ( final TYPE_7 VAR_4 = new TYPE_7 ( VAR_1 ) ) ( METHOD_1 ( ( ( VAR_5 ) + name ) ) . METHOD_2 ( VAR_2 ) ) ( bind ( VAR_2 ) . METHOD_3 ( VAR_4 ) . in ( VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String name = name ( STRING_1 ) ) ( com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ) ( VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ) ( VAR_4 . METHOD_3 ( name , STRING_3 , new java.lang.String [ ] { } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id psId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 , java.lang.String line ) ) ( if ( VAR_1 == null ) ) ( throw METHOD_2 ( STRING_1 , psId . get ( ) ) ) ( endif ) ( if ( line . METHOD_3 ( STRING_2 ) ) ) ( METHOD_4 ( psId , VAR_1 , line ) ) ( endif ) ( METHOD_5 ( psId , VAR_1 , VAR_2 , line ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 res , final boolean VAR_1 ) ) ( final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ) ( final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ) ( if ( ( VAR_3 ) != null ) ) ( VAR_4 . METHOD_3 ( key ) ) ( endif ) ( key = VAR_4 . METHOD_4 ( id ) ) ( VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) ) ( METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 rsrc ) ) ( try ) ( end-try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( rsrc . METHOD_3 ( ) ) ) ( try ) ( end-try ) ( if ( ! ( repo . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . isEmpty ( ) ) ) ) ( throw new TYPE_2 ( java.lang.String.format ( STRING_1 , rsrc . getName ( ) ) ) ) ( endif ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_2 ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final boolean VAR_1 ) ) ( try ) ( end-try ) ( for (TYPE_1 . PatchSetApproval VAR_2 : VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) )) ) ( endfor ) ( if ( ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) ) ( continue ; ) ( endif ) ( add ( VAR_4 , VAR_2 . getAccountId ( ) ) ) ( end-catch ) ( catch (TYPE_2.OrmException err) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( if ( ! ( VAR_1 . METHOD_1 ( ) ) ) ) ( throw new TYPE_4 ( ) ) ( endif ) ( try ) ( end-try ) ( VAR_2 . METHOD_2 ( db . get ( ) , rsrc . getId ( ) ) ) ( end-catch ) ( catch (TYPE_6 e) ) ( throw new TYPE_4 ( TYPE_7 . METHOD_3 ( rsrc . getId ( ) . toString ( ) ) ) ) ( return TYPE_1 . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; if ( p == null ) { p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) ; } result . METHOD_6 ( p ) ; TYPE_6 . METHOD_7 ( p ) ; } } ) ) ( close ( ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( return VAR_2 ; ) ( endif ) ( if ( VAR_3 . equals ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 ) ) ) ( return VAR_4 ; ) ( endif ) ( return ( VAR_3 . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 . METHOD_3 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData METHOD_1( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) ) ( com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ) ( VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < java.lang.String > e ) ) ( java.lang.String VAR_1 = e . getValue ( ) ) ( if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) ) ( VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ( view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 view ) ) ( VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( java.lang.String token = view . METHOD_2 ( ) ) ( if ( ! ( token . equals ( VAR_1 ) ) ) ) ( TYPE_2 . METHOD_3 ( token , false ) ) ( TYPE_3 . METHOD_4 ( token ) ) ( endif ) ( if ( view instanceof TYPE_4 ) ) ( VAR_2 = token ) ( endif ) ( super . METHOD_1 ( view ) ) ( view . METHOD_1 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . NameKey VAR_1 , TYPE_2 event ) ) ( for (TYPE_3 VAR_2 : VAR_3 . values ( )) ) ( endfor ) ( if ( METHOD_2 ( VAR_1 , VAR_2 . user ) ) ) ( VAR_4 . METHOD_3 ( event ) ) ( endif ) ( METHOD_4 ( event ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List METHOD_1( ) ) ( java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ) ( TYPE_2 t = this ) ( while ( t . METHOD_2 ( ) ) ) ( endwhile ) ( VAR_1 . add ( ( ( TYPE_3 ) ( t ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( ) ) ) ( t = ( ( TYPE_3 ) ( t ) ) . METHOD_5 ( ) . METHOD_4 ( ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) ) ( try ) ( end-try ) ( METHOD_2 ( ) ) ( for (com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_3 ( VAR_1 )) ) ( endfor ) ( METHOD_4 ( cd . change ( ) ) ) ( db . close ( ) ) ( db = null ) ( end-catch ) ( catch (java.io.IOException|com.google.gwtorm.server.OrmException e) ) ( METHOD_5 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ) ( assertThat ( VAR_5 ) . METHOD_12 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_3 , STRING_1 ) ) ( TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , VAR_3 , STRING_1 ) . METHOD_4 ( ) ) ( TYPE_2 d = util . user ( VAR_4 , VAR_3 ) ) ( METHOD_5 ( STRING_2 , d . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ( VAR_1 . METHOD_3 ( STRING_1 ) ) ( TYPE_1 in = new TYPE_1 ( ) ) ( in . account = user . email ) ( VAR_3 = STRING_2 ) ( VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( com.google.gerrit.reviewdb.client.Change c = change ( ) ) ( VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) ) ( TYPE_3 input = TYPE_3 . create ( ) ) ( input . METHOD_2 ( user ) ) ( TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( user , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ) ( org.junit.Assert.assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ) ( org.junit.Assert.assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( AccountGroup.Id METHOD_1( ) ) ( if ( ! ( user . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( throw new TYPE_2 ( java.lang.String.format ( STRING_1 , user . METHOD_4 ( ) ) ) ) ( endif ) ( final TYPE_4 VAR_1 = VAR_2 . create ( ) ) ( final TYPE_5 . Id me = user . getAccountId ( ) ) ( return VAR_1 . METHOD_5 ( VAR_3 , null , false , null , java.util.Collections.singleton ( me ) , null ) ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Map < TYPE_1 , byte [ ] > VAR_1 ) ) ( try ) ( TYPE_3 git = new TYPE_3 ( repo ) ) ( end-try ) ( if ( VAR_1 != null ) ) ( TYPE_4 . METHOD_2 ( git , VAR_1 ) ) ( endif ) ( return git . commit ( ) . METHOD_3 ( message ) . METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) ) ( bind ( VAR_2 class ) . to ( VAR_1 class ) ) ( bind ( VAR_3 class ) ) ( bind ( VAR_4 class ) ) ( bind ( VAR_5 class ) ) ( bind ( VAR_6 class ) ) ( install ( new TYPE_1 ( ) { protected void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_5 class ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( long VAR_1 , long VAR_2 ) ) ( if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) ) ( return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) ( endif ) ( return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result VAR_1 = METHOD_2 ( ) ) ( METHOD_2 ( ) ) ( java.util.List < TYPE_2 . ChangeInfo > VAR_2 = query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 VAR_1 ) ) ( diff = VAR_1 ) ( VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ) ( TYPE_3 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 ) ) ( if ( VAR_3 . METHOD_4 ( ) ) ) ( if ( ( VAR_2 . METHOD_5 ( VAR_5 ) ) > 0 ) ) ( VAR_6 . onSuccess ( null ) ) ( endif ) ( METHOD_6 ( VAR_1 , VAR_6 ) ) ( endif ) ( VAR_6 . onSuccess ( null ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( final TYPE_2 . Id VAR_1 ) ) ( final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ) ( for (final TYPE_3 e : VAR_2) ) ( endfor ) ( r . add ( e . METHOD_2 ( VAR_1 ) ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( void put( int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) ) ( if ( TYPE_3 . equals ( path ) ) ) ( TYPE_4 . METHOD_1 ( id , VAR_1 , VAR_2 ) ) ( endif ) ( TYPE_4 . METHOD_2 ( id , path ) . put ( VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( if ( ! ( patchSet . METHOD_2 ( ) ) ) ) ( throw new TYPE_3 ( STRING_1 ) ) ( endif ) ( patchSet . METHOD_3 ( false ) ) ( if ( ! ( VAR_1 ) ) ) ( TYPE_4 . METHOD_4 ( change ) ) ( ctx . METHOD_5 ( ) ) ( endif ) ( ctx . METHOD_6 ( ) . patchSets ( ) . update ( java.util.Collections.singleton ( patchSet ) ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ) ( java.lang.String line ) ( while ( ( line = VAR_1 . METHOD_1 ( ) ) != null ) ) ( endwhile ) ( VAR_2 . error ( ( STRING_2 + line ) ) ) ( VAR_1 . close ( ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_2 . METHOD_2 ( STRING_3 , e ) ) ( CFG Exit )
( CFG Entry ) ( boolean isEmpty( ) ) ( return ( ( ( ( ( ( ( approvals . isEmpty ( ) ) && ( ( VAR_1 ) == null ) ) && ( VAR_2 . isEmpty ( ) ) ) && ( reviewers . isEmpty ( ) ) ) && ( ( status ) == null ) ) && ( ( VAR_3 ) == null ) ) && ( ( VAR_4 ) == null ) ) && ( ( VAR_5 ) == null ) ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( int VAR_3 = VAR_1 . METHOD_1 ( ) ) ( if ( VAR_3 == ( - 1 ) ) ) ( return VAR_2 . equals ( STRING_1 ) ? INT_1 : INT_2 ; ) ( endif ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?extendsTYPE_1<?,java.lang.String,TYPE_2<java.lang.String>>,java.lang.String,TYPE_2<java.lang.String>> METHOD_1( TYPE_3 . Result r ) ) ( return com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < java.lang.String > ) ( VAR_1 . changes ( ) . id ( r . getChange ( ) . getId ( ) . get ( ) ) . METHOD_2 ( ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse rsp , TYPE_3 VAR_1 ) ) ( java.lang.String VAR_2 = ( VAR_1 != null ) ? VAR_1 . METHOD_2 ( ) : STRING_1 ) ( TYPE_4 c = new TYPE_4 ( VAR_3 , VAR_2 ) ) ( c . METHOD_3 ( STRING_2 ) ) ( c . METHOD_4 ( false ) ) ( c . METHOD_5 ( TYPE_5 . METHOD_6 ( req ) ) ) ( c . METHOD_7 ( ( VAR_1 != null ? - 1 : 0 ) ) ) ( rsp . METHOD_8 ( c ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String,TYPE_2> METHOD_1( java.lang.String query ) ) ( TYPE_4 VAR_1 = null ) ( TYPE_5 VAR_2 = null ) ( try ) ( end-try ) ( VAR_1 = VAR_3 . METHOD_2 ( ) ) ( VAR_2 = VAR_1 . METHOD_3 ( ) ) ( return METHOD_4 ( VAR_2 , query ) ; ) ( finally ) ( METHOD_5 ( VAR_2 ) ) ( METHOD_6 ( VAR_1 ) ) ( end-finally ) ( end-catch ) ( catch (TYPE_6 e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ( final TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 ) ) ( org.junit.Assert . METHOD_4 ( VAR_3 ) ) ( org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) ) ( finally ) ( TYPE_3 . delete ( VAR_1 ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) ) ( TYPE_5 p = METHOD_2 ( ) ) ( if ( ( VAR_2 ) != null ) ) ( return new TYPE_6 ( VAR_1 , VAR_2 . METHOD_3 ( STRING_1 ) , false ) ; ) ( endif ) ( return new TYPE_6 ( VAR_1 , METHOD_4 ( STRING_2 ) , true ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( if ( ( ! ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) || ( METHOD_7 ( db ) ) ) ) ( return false ; ) ( endif ) ( if ( METHOD_8 ( ) ) ) ( return true ; ) ( endif ) ( return VAR_1 . METHOD_1 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_2 t = METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( t ) ) ( assertEquals ( VAR_1 , t . METHOD_4 ( ) ) ) ( assertEquals ( 1 , t . METHOD_5 ( ) ) ) ( TYPE_3 . METHOD_6 ( t . METHOD_7 ( 0 ) , STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 . METHOD_4 ( ) ) || ( TYPE_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( VAR_1 . METHOD_7 ( name ) ) ( TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , cfg ) ) ( VAR_2 . METHOD_8 ( ) ) ( VAR_2 . METHOD_7 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < java.lang.String , java.lang.String > config , TYPE_3 req ) ) ( TYPE_4 VAR_1 = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ( TYPE_6 . METHOD_4 ( VAR_1 , config , req ) ) ( TYPE_6 . METHOD_5 ( VAR_1 , config ) ) ( return VAR_1 . create ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String changeId = METHOD_2 ( ) ) ( TYPE_3 . ChangeInfo c = METHOD_3 ( ( STRING_1 + changeId ) ) ) ( org.junit.Assert . METHOD_4 ( VAR_1 ) ) ( org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ) ( org.junit.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) ) ( TYPE_1 ref = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 , changeId ) ) ) ( if ( ref == null ) ) ( return ! ( VAR_3 . METHOD_4 ( VAR_2 ) ) ; ) ( endif ) ( return ref . METHOD_5 ( ) . equals ( VAR_3 . get ( VAR_2 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String> METHOD_1( ) ) ( final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ) ( VAR_1 . add ( STRING_1 ) ) ( VAR_1 . add ( STRING_2 ) ) ( VAR_1 . add ( STRING_3 ) ) ( for (final TYPE_3 c : METHOD_2 ( )) ) ( endfor ) ( VAR_1 . add ( c . getName ( ) ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<java.lang.String> METHOD_1( TYPE_1 db ) ) ( TYPE_3 s = db . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_4 VAR_1 = s . METHOD_3 ( STRING_1 ) ) ( try ) ( end-try ) ( TYPE_5 < java.lang.String > VAR_2 = new TYPE_5 < java.lang.String > ( ) ) ( while ( VAR_1 . METHOD_4 ( ) ) ) ( endwhile ) ( VAR_2 . add ( VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ) ( return VAR_2 ; ) ( finally ) ( VAR_1 . close ( ) ) ( end-finally ) ( finally ) ( s . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ) ( com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ) ( METHOD_4 ( STRING_3 ) ) ( METHOD_4 ( STRING_4 , VAR_3 ) ) ( METHOD_4 ( STRING_5 , VAR_4 ) ) ( METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , boolean VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) ) ( new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_2 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . toString ( ) ) ( if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ) ( return VAR_2 . METHOD_4 ( 0 , VAR_2 . METHOD_5 ( CHAR_1 ) ) ; ) ( endif ) ( if ( VAR_3 . METHOD_6 ( VAR_1 ) ) ) ( return VAR_3 . METHOD_7 ( VAR_1 ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) ) ( try ) ( end-try ) ( if ( ! ( path . equals ( STRING_1 ) ) ) ) ( diff . METHOD_2 ( TYPE_3 . create ( path ) ) ) ( endif ) ( diff . METHOD_3 ( repo ) ) ( diff . METHOD_4 ( true ) ) ( diff . format ( VAR_1 , VAR_2 ) ) ( finally ) ( diff . METHOD_5 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( if ( ( VAR_1 ) == null ) ) ( return ; ) ( endif ) ( METHOD_2 ( ctx . getProject ( ) , VAR_2 , VAR_3 , VAR_1 ) ) ( VAR_4 . METHOD_3 ( VAR_2 , VAR_5 , VAR_6 , ctx . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 . getMessage ( ) , VAR_7 , VAR_8 , ctx . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_1 . get ( VAR_1 class , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ) ( if ( ( VAR_3 ) == null ) ) ( METHOD_5 ( STRING_2 ) . METHOD_6 ( new TYPE_3 ( VAR_4 , VAR_5 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . in ( VAR_2 ) ) ( bind ( VAR_3 class ) . in ( VAR_2 ) ) ( bind ( VAR_4 class ) . to ( VAR_3 class ) ) ( install ( new TYPE_1 ( ) ) ) ( install ( new TYPE_2 ( ) ) ) ( TYPE_3 . METHOD_2 ( binder ( ) , VAR_5 ) ) ( METHOD_3 ( VAR_6 , STRING_1 ) . to ( VAR_7 class ) ) ( get ( VAR_5 ) . to ( VAR_8 class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) ) ) ( bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ) ( bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ) ( bind ( VAR_7 class ) . METHOD_3 ( VAR_8 class ) . in ( VAR_6 ) ) ( bind ( VAR_9 . String class ) . METHOD_2 ( VAR_10 class ) . METHOD_3 ( VAR_11 class ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( VAR_1 . get ( ) . METHOD_2 ( ) ) ) ( TYPE_1 ctl = VAR_1 . get ( ) . METHOD_3 ( ) ) ( return ( ctl . METHOD_4 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) || ( ctl . METHOD_5 ( ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String to ) ) ( final TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ) ( final TYPE_2 e = new TYPE_2 ( s ) ) ( try ) ( end-try ) ( s . METHOD_1 ( e , VAR_1 , to ) ) ( finally ) ( e . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 format( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ) ( TYPE_4 ctl = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ) ( return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , cd . notes ( ) , ctl . METHOD_4 ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( try ) ( end-try ) ( VAR_2 . METHOD_2 ( TYPE_5 ) ) ( return ; ) ( end-catch ) ( catch (TYPE_3 VAR_3) ) ( if ( VAR_4 . METHOD_3 ( VAR_1 , repo , commit ) ) ) ( return ; ) ( endif ) ( throw new TYPE_3 ( java.lang.String.format ( STRING_1 , TYPE_5 . METHOD_4 ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 id ) ) ( TYPE_2 p = VAR_2 . METHOD_1 ( VAR_3 , id ) ) ( for (TYPE_6 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( )) ) ( endfor ) ( if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) ) ( return new TYPE_1 ( VAR_1 , p . METHOD_3 ( ) ) ; ) ( endif ) ( throw new TYPE_4 ( id ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( STRING_1 ) ) ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ( final TYPE_2 r = create ( ) . METHOD_4 ( null ) ) ( METHOD_5 ( r ) ) ( assertEquals ( VAR_2 . getName ( ) , r . name ) ) ( assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ) ( TYPE_1 . METHOD_7 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( java.lang.String VAR_1 ) ) ( if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) ) ( return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; ) ( endif ) ( return TYPE_1 . METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 err = new TYPE_1 ( name ) ) ( METHOD_2 ( ) . METHOD_3 ( err ) ) ( METHOD_4 ( ) ) ( try ) ( end-try ) ( new TYPE_2 ( VAR_1 , VAR_2 , name ) . METHOD_5 ( ) ) ( METHOD_6 ( STRING_1 ) ) ( end-catch ) ( catch (TYPE_1 VAR_3) ) ( METHOD_7 ( err , VAR_3 ) ) ( METHOD_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> METHOD_1( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_2 VAR_1 ) ) ( return VAR_1 . submit ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( db , id ) ; } return null ; } } ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( ) ) ( VAR_1 . add ( METHOD_3 ( STRING_1 , null ) ) ) ( changeId = VAR_1 . get ( 0 ) . getChangeId ( ) ) ( VAR_1 . add ( METHOD_3 ( STRING_2 , changeId ) ) ) ( VAR_1 . add ( METHOD_3 ( STRING_3 , changeId ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String,TYPE_2> METHOD_1( java.util.List < TYPE_2 > plugins ) ) ( TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . create ( ) ) ( for (TYPE_2 VAR_2 : plugins) ) ( endfor ) ( VAR_1 . put ( TYPE_4 . METHOD_2 ( VAR_2 ) , VAR_2 ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ) ( METHOD_3 ( VAR_3 ) ) ( assertEquals ( VAR_1 , VAR_4 ) ) ( assertEquals ( new TYPE_1 ( VAR_1 , STRING_1 ) , VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) ) ( return METHOD_2 ( ) . METHOD_3 ( ) ; ) ( endif ) ( if ( ( METHOD_2 ( ) . METHOD_4 ( ) ) != ( - 1 ) ) ) ( return TYPE_1 . toString ( METHOD_2 ( ) . METHOD_4 ( ) ) ; ) ( endif ) ( return STRING_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 git = METHOD_2 ( ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ) ( TYPE_2 . Result change = METHOD_4 ( git ) ) ( submit ( change . getChangeId ( ) ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ) ( org.junit.Assert.assertEquals ( change . METHOD_5 ( ) , VAR_2 . getId ( ) ) ) ( org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_6 ( 0 ) ) ) ( METHOD_7 ( change . getChangeId ( ) , 1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.util.List < TYPE_1 > VAR_1 ) ) ( TYPE_1 VAR_2 = VAR_3 ) ( int i = ( VAR_1 . size ( ) ) - 1 ) ( for (i >= 0) ) ( i -- ) ( endfor ) ( VAR_2 = new TYPE_2 ( VAR_1 . get ( i ) , VAR_2 ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 event ) ) ( final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ) ( if ( ( VAR_2 ) == VAR_1 ) ) ( METHOD_3 ( ) ) ( endif ) ( if ( ( VAR_3 ) == VAR_1 ) ) ( VAR_4 = false ) ( METHOD_4 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( return METHOD_2 ( VAR_1 ) ; ) ( endif ) ( switch ( status ) ) ( end-switch ) ( case VAR_2 : ) ( return STRING_1 ; ) ( case VAR_3 : ) ( return STRING_2 ; ) ( default : ) ( return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( boolean VAR_1 ) ) ( if ( ! VAR_1 ) ) ( return VAR_2 . values ( ) ; ) ( endif ) ( java.util.List < TYPE_2 > plugins = new java.util.ArrayList ( VAR_2 . values ( ) ) ) ( plugins . METHOD_2 ( VAR_3 . values ( ) ) ) ( return plugins ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ) ( return ; ) ( endif ) ( TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ) ( if ( VAR_2 != null ) ) ( for (TYPE_1 d : VAR_2) ) ( endfor ) ( if ( d . METHOD_5 ( ) ) ) ( TYPE_2 . METHOD_1 ( d ) ) ( endif ) ( TYPE_2 . METHOD_6 ( d ) ) ( endif ) ( TYPE_2 . METHOD_6 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int id , java.lang.String commit , java.lang.String VAR_1 , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) ) ( TYPE_3 VAR_3 = TYPE_3 . create ( ) ) ( VAR_3 . METHOD_2 ( message ) ) ( VAR_3 . METHOD_3 ( VAR_1 ) ) ( TYPE_4 . METHOD_4 ( id , commit , STRING_1 ) . METHOD_5 ( VAR_3 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String name = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ( java.util.Map < java.lang.String , TYPE_1 > res = METHOD_5 ( STRING_1 , VAR_1 ) ) ( com.google.common.truth.Truth.assertThat ( res ) . METHOD_6 ( 1 ) ) ( com.google.common.truth.Truth.assertThat ( res ) . METHOD_7 ( name ) ) ( TYPE_1 d = res . get ( name ) ) ( com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( name ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = null ) ( for (TYPE_3 w : this) ) ( endfor ) ( if ( w instanceof TYPE_2 ) ) ( final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ) ( if ( VAR_2 == null ) ) ( VAR_2 = d ) ( endif ) ( if ( ( d . METHOD_2 ( ) ) == VAR_1 ) ) ( d . METHOD_1 ( ) ) ( return ; ) ( endif ) ( endif ) ( if ( VAR_2 != null ) ) ( VAR_2 . METHOD_1 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_3<TYPE_2,TYPE_1> METHOD_1( java.lang.String name , TYPE_4 < TYPE_2 > VAR_1 , long VAR_2 ) ) ( TYPE_5 db = new TYPE_5 ( VAR_3 , name ) . METHOD_2 ( ) ) ( java.lang.String url = STRING_1 + ( db . METHOD_3 ( ) . toString ( ) ) ) ( return new TYPE_3 < TYPE_2 , TYPE_1 > ( url , VAR_1 , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 git , TYPE_2 VAR_1 ) ) ( TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ) ( return VAR_2 . METHOD_2 ( git , STRING_1 ) . getChangeId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change change ) ) ( org.eclipse.jgit.lib.Repository repo ) ( try ) ( end-try ) ( repo = VAR_1 . METHOD_2 ( change . getProject ( ) ) ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new TYPE_2 ( change . getProject ( ) , e ) ) ( try ) ( end-try ) ( return new TYPE_1 ( repo , change ) ; ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final boolean VAR_1 ) ) ( if ( ( db ) != null ) ) ( try ) ( end-try ) ( for (TYPE_2 VAR_2 : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) )) ) ( endfor ) ( if ( ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) ) ( continue ; ) ( endif ) ( add ( VAR_3 , VAR_2 . getAccountId ( ) ) ) ( end-catch ) ( catch (TYPE_3.OrmException err) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ) ( if ( ( METHOD_2 ( VAR_1 ) ) != ( - 1 ) ) ) ( if ( ! ( VAR_1 . equals ( VAR_2 ) ) ) ) ( METHOD_3 ( ) ) ( TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ) ( VAR_3 . METHOD_4 ( true ) ) ( VAR_3 . METHOD_5 ( true ) ) ( VAR_2 = VAR_1 ) ( endif ) ( endif ) ( TYPE_2 . display ( TYPE_3 . METHOD_6 ( VAR_1 . getParentKey ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_2 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { METHOD_2 ( ) ; } } } ) ( for (final TYPE_3 p : VAR_3) ) ( endfor ) ( p . METHOD_3 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , java.lang.String name ) ) ( TYPE_2 VAR_2 = TYPE_3 . create ( VAR_3 , name , 0 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( VAR_4 , STRING_1 , VAR_2 ) ) ) ) ( METHOD_3 ( ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + name ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( value ( ) ) <= ( ( short ) ( 0 ) ) ) ) ( return ( ( label ( ) ) + CHAR_1 ) + ( value ( ) ) ; ) ( endif ) ( return ( ( label ( ) ) + STRING_1 ) + ( value ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_1 , STRING_2 , STRING_2 , STRING_3 , STRING_3 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 } ) ( int i = 0 ) ( for (i < ( VAR_1 . length )) ) ( i += 2 ) ( endfor ) ( assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) , VAR_1 [ ( i + 1 ) ] ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client . AccountGroup group ) ) ( try ) ( end-try ) ( METHOD_1 ( TYPE_1 . METHOD_2 ( group ) , METHOD_3 ( group , null ) ) . get ( ) ) ( end-catch ) ( catch (TYPE_2|TYPE_3 e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String changeId , java.lang.String VAR_1 , TYPE_2 c ) ) ( TYPE_3 r = VAR_2 . put ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) , c ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ) ( return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 group ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) ( end-try ) ( VAR_3 . METHOD_1 ( repo , TYPE_2 . METHOD_3 ( db , group . getId ( ) ) ) ) ( TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( repo , group . METHOD_5 ( ) ) ) ( TYPE_4 < TYPE_1 > result = VAR_4 . METHOD_6 ( ) ) ( com.google.common.truth.Truth.assertThat ( result ) . METHOD_7 ( ) ) ( return result . get ( ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 < TYPE_1 > VAR_1 ) ) ( try ) ( end-try ) ( return new TYPE_4 ( args . rw , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , args . repo ) . METHOD_1 ( VAR_1 ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<TYPE_1> METHOD_1( ) ) ( java.util.Set < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( for (com.google.gerrit.reviewdb.client.Project.NameKey n : METHOD_3 ( )) ) ( endfor ) ( TYPE_3 p = VAR_2 . METHOD_4 ( n ) ) ( if ( p != null ) ) ( VAR_1 . METHOD_5 ( p . METHOD_6 ( ) . METHOD_7 ( ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( METHOD_2 ( ) ) ( endif ) ( TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_5 ( true ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ) ( if ( METHOD_2 ( ) ) ) ( VAR_1 = VAR_2 . get ( ) ) ( VAR_1 . METHOD_3 ( ctx ) ) ( return ; ) ( endif ) ( if ( c . currentPatchSetId ( ) . equals ( psId ) ) ) ( c . METHOD_4 ( METHOD_5 ( ctx ) ) ) ( endif ) ( ctx . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( endif ) ( VAR_1 . METHOD_4 ( rsrc ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = add ( TYPE_2 . METHOD_2 ( ) , user ) ) ( TYPE_1 VAR_2 = add ( TYPE_2 . METHOD_3 ( ) , METHOD_4 ( STRING_1 ) ) ) ( TYPE_3 VAR_3 = VAR_4 . create ( ) . METHOD_5 ( user ) . METHOD_6 ( VAR_5 ) ) ( METHOD_7 ( VAR_3 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_6 , STRING_2 , ( ( STRING_3 + ( TYPE_4 . METHOD_10 ( VAR_2 . METHOD_9 ( ) ) ) ) + STRING_4 ) , STRING_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ) ( VAR_3 = VAR_4 ) ( METHOD_3 ( false ) ) ( VAR_3 = VAR_5 ) ( if ( ( VAR_6 ) != null ) ) ( VAR_6 . METHOD_1 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 VAR_1 ) ) ( diff = VAR_1 ) ( if ( VAR_2 . METHOD_1 ( ) ) ) ( VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ) ( if ( ( VAR_3 . METHOD_3 ( VAR_4 ) ) > 0 ) ) ( VAR_5 . onSuccess ( null ) ) ( endif ) ( METHOD_4 ( VAR_1 , VAR_5 ) ) ( endif ) ( VAR_5 . onSuccess ( null ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( TYPE_1 ctx ) ) ( change = new com.google.gerrit.reviewdb.client.Change ( TYPE_2 . METHOD_2 ( commit ) , changeId , ctx . METHOD_3 ( ) . getAccountId ( ) , new TYPE_3 . NameKey ( ctx . getProject ( ) , VAR_1 ) , ctx . METHOD_4 ( ) ) ) ( change . METHOD_5 ( TYPE_4 . METHOD_6 ( status , VAR_2 ) ) ) ( change . METHOD_7 ( topic ) ) ( return change ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 group , boolean create ) ) ( METHOD_2 ( ) ) ( for (TYPE_1 r : VAR_1) ) ( endfor ) ( if ( TYPE_3 . METHOD_3 ( r , group ) ) ) ( return r ; ) ( endif ) ( if ( create ) ) ( TYPE_1 r = new TYPE_1 ( group ) ) ( VAR_1 . add ( r ) ) ( return r ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( ( ! ( VAR_1 ) ) && ( ( METHOD_2 ( ) ) != null ) ) && ( STRING_1 . equals ( super . METHOD_3 ( ) ) ) ) ) ( super . METHOD_4 ( METHOD_2 ( ) ) ) ( VAR_1 = true ) ( if ( ( METHOD_5 ( ) ) != null ) ) ( METHOD_6 ( METHOD_5 ( ) ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> METHOD_1( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.util.Set < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) ) ( java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ) ( for (com.google.gerrit.reviewdb.client.Change . Id id : VAR_1) ) ( endfor ) ( r . add ( new TYPE_4 ( schema , id ) ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( VAR_1 ) ) ( end-try ) ( com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_4 ( VAR_1 ) ) ( end-try ) ( com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 , boolean VAR_2 ) ) ( if ( VAR_1 == null ) ) ( return VAR_3 ; ) ( endif ) ( if ( VAR_2 ) ) ( return TYPE_1 . METHOD_2 ( VAR_1 ) ; ) ( endif ) ( if ( VAR_1 . equals ( STRING_1 ) ) ) ( return VAR_3 ; ) ( endif ) ( if ( VAR_1 . equals ( STRING_2 ) ) ) ( return VAR_4 ; ) ( endif ) ( throw new com.google.gwtorm.server.OrmException ( ( STRING_3 + VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ) ( servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( VAR_1 < TYPE_9 > METHOD_3 ( ) ) , new TYPE_10 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 t , TYPE_2 VAR_1 ) ) ( t = t . METHOD_2 ( ) ) ( if ( t . METHOD_3 ( ) ) ) ( ( ( TYPE_3 ) ( t ) ) . bind ( this , VAR_1 ) ) ( return true ; ) ( endif ) ( return TYPE_4 . METHOD_4 ( this , t ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( if ( VAR_2 ) ) ( TYPE_5 VAR_3 = new TYPE_5 ( VAR_4 ) ) ( VAR_3 . METHOD_2 ( false ) ) ( VAR_3 . METHOD_3 ( VAR_1 ) ) ( while ( ( VAR_3 . METHOD_4 ( ) ) && ( ! ( METHOD_5 ( ) ) ) ) ) ( endwhile ) ( METHOD_6 ( VAR_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo change , TYPE_1 . ChangeInfo VAR_1 , TYPE_2 VAR_2 ) ) ( if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( TYPE_3 event = new TYPE_3 ( change , VAR_1 , VAR_2 ) ) ( for (TYPE_4 VAR_4 : VAR_3) ) ( endfor ) ( try ) ( end-try ) ( VAR_4 . METHOD_4 ( event ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( util . METHOD_5 ( TYPE_5 . log , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String> METHOD_1( TYPE_2 < TYPE_3 > m ) ) ( TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < java.lang.String > ( m . METHOD_2 ( ) ) ) ( for (java.lang.String id : VAR_2) ) ( endfor ) ( VAR_1 . METHOD_3 ( id ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 r = label ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) ( if ( ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( r . isEmpty ( ) ) ) ) ( return false ; ) ( endif ) ( return r . contains ( VAR_1 . value ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 . PatchSet patchSet ) ) ( TYPE_1 p = new TYPE_1 ( ) ) ( p . revision = patchSet . getRevision ( ) . get ( ) ) ( VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ) ( p . ref = patchSet . getRefName ( ) ) ( VAR_2 = METHOD_3 ( patchSet . METHOD_4 ( ) ) ) ( VAR_3 = ( patchSet . METHOD_5 ( ) . METHOD_6 ( ) ) / INT_1 ) ( return p ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , com.google.gerrit.server.query.change.ChangeData cd , TYPE_1 < TYPE_2 > VAR_2 ) ) ( java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ( com.google.gerrit.reviewdb.client.Account.Id VAR_4 = cd . change ( ) . METHOD_4 ( ) ) ( for (TYPE_2 cm : VAR_3) ) ( endfor ) ( if ( VAR_1 . equals ( cm . METHOD_5 ( ) ) ) ) ( return true ; ) ( endif ) ( if ( VAR_4 . equals ( cm . METHOD_5 ( ) ) ) ) ( return false ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 ) ) ( try ) ( end-try ) ( METHOD_1 ( util . METHOD_2 ( change ) , util . METHOD_3 ( change . getProject ( ) , patchSet ) , util . METHOD_4 ( VAR_1 ) , VAR_2 ) ) ( end-catch ) ( catch (TYPE_2|TYPE_3|java.io.IOException|com.google.gwtorm.server.OrmException e) ) ( VAR_3 . error ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ) ( TYPE_1 update = METHOD_3 ( c , VAR_1 ) ) ( TYPE_2 < java.lang.String > VAR_2 = new TYPE_2 < > ( ) ) ( VAR_2 . add ( STRING_1 ) ) ( VAR_2 . add ( STRING_2 ) ) ( update . METHOD_4 ( VAR_2 ) ) ( update . commit ( ) ) ( TYPE_3 notes = METHOD_5 ( c ) ) ( org.junit.Assert.assertEquals ( VAR_2 , notes . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 close( java.lang.String VAR_1 ) ) ( TYPE_2 . METHOD_1 ( ( ( TYPE_3 . contains ( VAR_1 ) ) && ( ! ( TYPE_4 . equals ( VAR_1 ) ) ) ) , STRING_1 , VAR_1 ) ) ( METHOD_2 ( ) ) ( VAR_2 . append ( STRING_2 ) . append ( VAR_1 ) . append ( CHAR_1 ) ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 + STRING_2 ) ( repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ) ( java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_7 + STRING_7 ) + STRING_8 ) ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_9 + STRING_10 ) + STRING_11 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( PatchSet.Id METHOD_1( ) ) ( try ) ( end-try ) ( if ( VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ) ) ( return METHOD_3 ( db ) ; ) ( endif ) ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ) ( try ) ( end-try ) ( return METHOD_3 ( db ) ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( finally ) ( synchronized ( VAR_3 ) ) ( VAR_4 . update ( 1 ) ) ( end-synchronized ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( java.lang.String VAR_1 ) ) ( try ) ( end-try ) ( TYPE_3 VAR_2 = VAR_3 . get ( TYPE_4 . create ( VAR_4 , VAR_1 ) ) ) ( if ( VAR_2 == null ) ) ( return TYPE_1 . METHOD_2 ( ) ; ) ( endif ) ( return METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; ) ( end-catch ) ( catch (java.io.IOException|TYPE_5 e) ) ( VAR_5 . METHOD_5 ( ( STRING_1 + VAR_1 ) , e ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 config , TYPE_2 VAR_1 ) ) ( TYPE_4 . sshd ( config , VAR_1 ) ) ( TYPE_4 . METHOD_2 ( config , VAR_1 ) ) ( TYPE_4 . user ( config , VAR_1 ) ) ( TYPE_4 . auth ( config , VAR_1 ) ) ( TYPE_4 . METHOD_3 ( config , VAR_1 ) ) ( TYPE_4 . repo ( config , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 input = new TYPE_1 ( ) ) ( java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ) ( VAR_1 . add ( STRING_1 ) ) ( VAR_3 = VAR_1 ) ( try ) ( end-try ) ( project ( ) . METHOD_3 ( input ) ) ( org.junit.Assert . METHOD_4 ( STRING_2 ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ) ( METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( com.google.gerrit.reviewdb.client.Project.NameKey name ) ) ( TYPE_4 VAR_1 = VAR_2 . METHOD_1 ( name ) ) ( if ( ! ( VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( throw new TYPE_3 ( name ) ) ( endif ) ( return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final boolean on ) ) ( VAR_1 = on ) ( if ( VAR_1 ) ) ( VAR_2 . METHOD_2 ( getValue ( ) . METHOD_3 ( ) ) ) ( endif ) ( VAR_2 . METHOD_2 ( false ) ) ( METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id ps = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ) ( java.util.List < TYPE_2 > VAR_3 = METHOD_4 ( ps ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEmpty ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) ) ( TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ) ( if ( VAR_3 == null ) ) ( throw new TYPE_5 ( STRING_1 ) ) ( endif ) ( bind ( TYPE_6 . key ( VAR_1 , VAR_3 . name ( ) , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( e . METHOD_2 ( ) ) ( TYPE_2 . METHOD_3 ( VAR_1 . line ( ) ) ) ( java.lang.String token = TYPE_3 . METHOD_4 ( psId , VAR_1 . path ( ) ) ) ( if ( ! ( TYPE_4 . METHOD_5 ( ) ) ) ) ( TYPE_4 . METHOD_6 ( token ) ) ( endif ) ( TYPE_4 . display ( token ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( VAR_1 . METHOD_2 ( VAR_2 , VAR_3 . getAccountId ( ) ) ) ( return VAR_4 . create ( VAR_2 . getParentKey ( ) ) . METHOD_1 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ) ( try ) ( end-try ) ( TYPE_2 . Key key = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ) ( return VAR_4 . get ( key , new TYPE_3 ( key , VAR_5 , project , repo ) ) ; ) ( end-catch ) ( catch (TYPE_4 e) ) ( VAR_6 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) ) ( return VAR_7 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 ) ) ( bind ( VAR_4 class ) . METHOD_3 ( VAR_5 ) ) ( bind ( TYPE_1 . get ( VAR_6 class , TYPE_2 . METHOD_4 ( STRING_1 ) ) ) . METHOD_5 ( VAR_7 class ) . in ( VAR_8 ) ) ( METHOD_6 ( ) . to ( VAR_7 class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( TYPE_1 . Result r = METHOD_3 ( ) ) ( TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ) ( TYPE_3 in = new TYPE_3 ( ) ) ( VAR_2 = VAR_3 . toString ( ) ) ( VAR_4 = true ) ( in . label ( STRING_1 , INT_1 ) ) ( VAR_5 . METHOD_5 ( VAR_6 class ) ) ( VAR_5 . METHOD_6 ( STRING_2 ) ) ( revision . METHOD_7 ( in ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ) ( TYPE_2 u = user ( VAR_4 ) ) ( METHOD_4 ( u ) ) ( METHOD_5 ( STRING_3 , u ) ) ( METHOD_5 ( STRING_4 , u ) ) ( METHOD_5 ( STRING_5 , u ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result VAR_1 = METHOD_2 ( ) ) ( TYPE_1 . Result VAR_2 = METHOD_2 ( ) ) ( java.util.List < TYPE_2 . ChangeInfo > VAR_3 = VAR_4 . changes ( ) . query ( STRING_1 ) . get ( ) ) ( org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) ) ( org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( if ( VAR_1 . METHOD_1 ( ) ) ) ( return ; ) ( endif ) ( TYPE_1 VAR_2 = cm . METHOD_2 ( ) ) ( int size = ( ( VAR_2 . METHOD_3 ( ) ) - ( VAR_2 . METHOD_4 ( ) ) ) + 1 ) ( if ( ( cm . METHOD_5 ( ) ) == size ) ) ( return ; ) ( endif ) ( cm . METHOD_6 ( size ) ) ( VAR_3 . METHOD_7 ( VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( final TYPE_1 cm = VAR_1 . create ( id ) ) ( cm . METHOD_1 ( user . getAccountId ( ) ) ) ( cm . METHOD_2 ( VAR_2 , result . info ) ) ( cm . METHOD_3 ( ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 = VAR_2 . getId ( ) ) ( VAR_4 . error ( ( STRING_1 + VAR_3 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 ) ) ( METHOD_2 ( res , VAR_1 . type ) ) ( try ) ( TYPE_4 VAR_2 = METHOD_3 ( req , res , null ) ) ( TYPE_5 out = TYPE_6 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ( end-try ) ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . id ) . METHOD_8 ( out ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_3 ) ) ( METHOD_4 ( VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_7 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) ) ( TYPE_5 VAR_4 = VAR_5 . get ( ( ( TYPE_6 ) ( VAR_1 ) ) ) ) ( if ( ! ( VAR_4 . METHOD_2 ( VAR_6 ) ) ) ) ( VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_6 ) ) ( return ; ) ( endif ) ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) ) ( if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( TYPE_4 event = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 ) ) ( for (TYPE_5 VAR_5 : VAR_4) ) ( endfor ) ( try ) ( end-try ) ( VAR_5 . METHOD_4 ( event ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( util . METHOD_5 ( TYPE_6 . log , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String changeId ) ) ( TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 , changeId ) ) ( return VAR_4 . to ( git , ref ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 req ) ) ( java.lang.String VAR_1 = req . METHOD_2 ( VAR_2 ) ) ( if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( TYPE_3 ) ) ) ) ) ( return null ; ) ( endif ) ( return new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( TYPE_3 . length ( ) ) ) , TYPE_5 . METHOD_6 ( req ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 rsrc ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_1 ( rsrc ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new TYPE_2 ( e . getMessage ( ) ) ) ( try ) ( end-try ) ( VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) . getProject ( ) ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new TYPE_2 ( e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 . Result result = TYPE_2 . METHOD_2 ( repo , VAR_1 ) ) ( org.junit.Assert.assertEquals ( INT_1 , result . METHOD_3 ( ) . getStatus ( ) ) ) ( return result . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result VAR_1 = METHOD_2 ( ) ) ( TYPE_1 . Result VAR_2 = METHOD_2 ( ) ) ( java.util.List < TYPE_2 . ChangeInfo > VAR_3 = query ( STRING_1 ) ) ( org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) ) ( org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final java.lang.String token ) ) ( if ( TYPE_1 . METHOD_2 ( STRING_1 , token ) ) ) ( return TYPE_2 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( token ) ) ; ) ( endif ) ( if ( TYPE_1 . METHOD_2 ( STRING_3 , token ) ) ) ( return TYPE_2 . METHOD_3 ( STRING_4 , TYPE_1 . METHOD_4 ( token ) ) ; ) ( endif ) ( if ( TYPE_1 . METHOD_2 ( STRING_5 , token ) ) ) ( return TYPE_2 . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( token ) ) ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) ) ( try ) ( TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ) ( TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ) ( end-try ) ( VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 branch , org.eclipse.jgit.revwalk.RevWalk rw ) ) ( final TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ) ( final TYPE_5 b = VAR_1 . METHOD_3 ( ) ) ( b . METHOD_4 ( new byte [ 0 ] , VAR_2 , rw . METHOD_5 ( ) , rw . METHOD_6 ( branch . METHOD_7 ( ) ) ) ) ( b . METHOD_8 ( ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( if ( ( VAR_1 ) == null ) ) ( throw new TYPE_5 ( STRING_1 ) ) ( endif ) ( try ) ( end-try ) ( VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) ( end-catch ) ( catch (TYPE_7|java.io.IOException e) ) ( throw new TYPE_5 ( e . getMessage ( ) ) ) ( return TYPE_1 . METHOD_6 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( TYPE_1 res = METHOD_3 ( STRING_1 ) ) ( org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( METHOD_4 ( STRING_2 ) ) ) + STRING_4 ) , res . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( ) ) ( if ( ! ( VAR_1 ) ) ) ( VAR_1 = true ) ( final com.google.gerrit.reviewdb.server.ReviewDb c = METHOD_1 ( ) ) ( try ) ( end-try ) ( try ) ( end-try ) ( VAR_2 . create ( c ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ) ( catch (TYPE_2 e) ) ( throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ) ( finally ) ( c . close ( ) ) ( end-finally ) ( endif ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ) ( VAR_1 . project = project . get ( ) ) ( TYPE_2 r = VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ) ( org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( return true ; ) ( endif ) ( if ( ! ( VAR_2 . METHOD_1 ( ) ) ) ) ( return false ; ) ( endif ) ( com.google.gerrit.reviewdb.client.Project.NameKey r = VAR_2 . METHOD_2 ( ) ) ( if ( r . get ( ) . METHOD_3 ( VAR_3 ) ) ) ( VAR_1 = r ) ( return true ; ) ( endif ) ( VAR_2 = VAR_4 . Collections < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_4 ( ) . METHOD_5 ( ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 , int VAR_2 ) ) ( if ( ( VAR_1 . size ( ) ) > VAR_2 ) ) ( return METHOD_2 ( repo , db , branch , VAR_1 ) ; ) ( endif ) ( return METHOD_3 ( branch , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 VAR_1 , TYPE_3 input ) ) ( TYPE_7 in = new TYPE_7 ( ) ) ( VAR_2 = id ) ( java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ) ( if ( ( VAR_3 . size ( ) ) == 1 ) ) ( return VAR_3 . get ( 0 ) ; ) ( endif ) ( throw new TYPE_9 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( final TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ( TYPE_3 . METHOD_5 ( VAR_2 ) ) ( final TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ) ( org.junit.Assert . METHOD_6 ( VAR_4 ) ) ( org.junit.Assert.assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_5 ) ) ( finally ) ( TYPE_3 . delete ( VAR_2 ) ) ( TYPE_3 . delete ( VAR_1 ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( ) ) ( java.util.Map < java.lang.String , TYPE_2 > VAR_1 = ( ( java.util.Map < java.lang.String , TYPE_2 > ) ( VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) ) ) ( for (TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( )) ) ( endfor ) ( TYPE_2 VAR_4 = VAR_3 . getValue ( ) ) ( VAR_4 . name = VAR_3 . getKey ( ) ) ( return VAR_1 . values ( ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ) ( if ( c == null ) ) ( return false ; ) ( endif ) ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ) ( for (com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) . values ( )) ) ( endfor ) ( if ( ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 ) ) ( java.lang.String s = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ) ( if ( ( s != null ) && ( ! ( s . isEmpty ( ) ) ) ) ) ( try ) ( end-try ) ( VAR_3 = TYPE_2 . METHOD_3 ( s ) ) ( end-catch ) ( catch (TYPE_3 err) ) ( VAR_3 = INT_1 ) ( endif ) ( METHOD_4 ( new TYPE_4 ( ) { public void run ( ) throws java.lang.Exception { METHOD_5 ( ) ; VAR_4 this . display ( ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) . append ( TYPE_2 . ps ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . commit ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_7 ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_8 ( ) ) . METHOD_6 ( ) . METHOD_9 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Change update( TYPE_1 . Change change ) ) ( if ( change . getStatus ( ) . METHOD_1 ( ) ) ) ( if ( ( VAR_1 ) != null ) ) ( change . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? null : VAR_1 ) ) ) ( endif ) ( change . METHOD_3 ( VAR_2 ) ) ( change . METHOD_4 ( result . info ) ) ( TYPE_2 . METHOD_5 ( change ) ) ( return change ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_1 ( ) ) ( if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) ) ( TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 , VAR_6 ) ) ) ( VAR_7 . set ( VAR_8 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_9 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 rsp , TYPE_3 VAR_1 ) ) ( TYPE_5 s = ( user . get ( ) . METHOD_2 ( ) ) ? VAR_2 . get ( ) : null ) ( TYPE_6 . METHOD_3 ( ( ( TYPE_7 ) ( req ) ) , ( ( TYPE_8 . HttpServletResponse ) ( rsp ) ) , s ) ) ( VAR_1 . METHOD_1 ( req , rsp ) ) ( CFG Exit )
( CFG Entry ) ( AccountGroup.Id METHOD_1( ) ) ( final TYPE_3 VAR_1 = VAR_2 . create ( ) ) ( final com.google.gerrit.reviewdb.client.Account.Id me = user . getAccountId ( ) ) ( return VAR_1 . METHOD_2 ( VAR_3 , null , VAR_4 , null , java.util.Collections.singleton ( me ) , null ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) ) ( VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_4 . METHOD_3 ( ctl . getProject ( ) . METHOD_4 ( ) ) ) ( end-try ) ( TYPE_1 VAR_5 = METHOD_5 ( ctl , VAR_6 . create ( db . get ( ) , ctl ) , in , repo ) ) ( VAR_1 . METHOD_6 ( ) ) ( return VAR_5 ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( METHOD_2 ( VAR_1 , ( ( short ) ( 1 ) ) ) ) ) ( return true ; ) ( endif ) ( if ( ( getRefName ( ) . equals ( TYPE_1 . METHOD_3 ( 0 , ( ( TYPE_1 . length ( ) ) - 1 ) ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 project , TYPE_3 input ) ) ( if ( ( ( input == null ) || ( ( VAR_1 ) == null ) ) || ( VAR_1 . isEmpty ( ) ) ) ) ( throw new TYPE_5 ( STRING_1 ) ) ( endif ) ( VAR_2 . create ( project ) . refs ( VAR_1 ) . delete ( ) ) ( return TYPE_1 . METHOD_1 ( ) ; ) ( METHOD_2 ( 2 ) ) ( TYPE_6 VAR_3 ) ( CFG Exit )
( CFG Entry ) ( void plugins( TYPE_1 w ) ) ( java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_1 ( ) ) ( for (TYPE_3 u : plugins) ) ( endfor ) ( VAR_1 . add ( java.lang.String.format ( STRING_1 , u . METHOD_2 ( ) , u . METHOD_3 ( ) ) ) ) ( if ( ! ( VAR_1 . isEmpty ( ) ) ) ) ( w . METHOD_4 ( ( ( VAR_2 ) + STRING_2 ) ) ) ( METHOD_5 ( VAR_1 , w ) ) ( w . METHOD_4 ( STRING_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( config . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ) ( TYPE_1 . METHOD_2 ( config . METHOD_5 ( ) ) . METHOD_4 ( VAR_1 ) ) ( TYPE_1 . METHOD_2 ( config . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) ) ( TYPE_1 . METHOD_2 ( config . METHOD_7 ( ) ) . METHOD_4 ( VAR_2 ) ) ( TYPE_1 . METHOD_2 ( config . METHOD_8 ( ) ) . METHOD_4 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( java.lang.String VAR_1 , TYPE_2 ... VAR_2 ) ) ( TYPE_3 < TYPE_2 > VAR_3 = new TYPE_3 < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ) ( VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ) ( return new TYPE_5 < TYPE_2 > ( VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 event ) ) ( if ( event instanceof TYPE_2 ) ) ( TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event ) ) ) ( VAR_2 . put ( VAR_3 , VAR_4 ) ) ( endif ) ( if ( event instanceof TYPE_3 ) ) ( TYPE_3 e = ( ( TYPE_3 ) ( event ) ) ) ( TYPE_4 r = VAR_5 ) ( VAR_6 . put ( ( ( ( r . project ) + STRING_1 ) + ( VAR_7 ) ) , VAR_8 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( 0 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) ) ( assertEquals ( INT_1 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 ) ) ) ) ) ( assertEquals ( INT_2 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( ( INT_3 | INT_4 ) , 1 ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ) ( org.junit.Assert . METHOD_3 ( VAR_3 ) ) ( org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ) ( org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) . METHOD_4 ( ) , VAR_5 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id,com.google.gerrit.reviewdb.client.PatchSet> METHOD_1( TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > in ) ) ( java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > out = new TYPE_2 ( new TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id > ( ) { public int METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id a , com.google.gerrit.reviewdb.client.PatchSet.Id b ) { return TYPE_4 . METHOD_3 ( a , b ) . result ( ) ; } } ) ) ( for (com.google.gerrit.reviewdb.client.PatchSet ps : in) ) ( endfor ) ( out . put ( ps . getId ( ) , ps ) ) ( return out ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( project , VAR_1 , VAR_2 , STRING_1 ) ) ( org.eclipse.jgit.lib.ObjectId id = repo . branch ( STRING_2 ) . commit ( ) . create ( ) ) ( TYPE_2 VAR_3 = METHOD_3 ( ) ) ( org.eclipse.jgit.revwalk.RevWalk rw = repo . METHOD_4 ( ) ) ( org.junit.Assert . METHOD_5 ( VAR_3 . METHOD_6 ( db , rw , rw . parseCommit ( id ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( change = ctx . getChange ( ) ) ( TYPE_2 update = ctx . METHOD_2 ( ) ) ( VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ) ( if ( VAR_1 ) ) ( change . METHOD_3 ( VAR_3 ) ) ( update . METHOD_3 ( change . getStatus ( ) ) ) ( TYPE_3 . METHOD_4 ( change ) ) ( ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData METHOD_1( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) ) ( com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , id ) ) ( VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change . Id id , boolean VAR_1 ) ) ( if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( id . get ( ) , VAR_1 ) ) ( if ( VAR_3 . add ( VAR_2 ) ) ) ( VAR_4 . METHOD_3 ( VAR_2 ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 ) ) ( java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ) ( TYPE_1 . delete ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_3 ( TYPE_6 VAR_4 ) { } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( ) ) ( final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ) ( for (final TYPE_2 c : VAR_1) ) ( endfor ) ( if ( c . METHOD_2 ( ) ) ) ( r . METHOD_3 ( c . METHOD_4 ( ) ) ) ( endif ) ( r . add ( c ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( byte[] METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( byte [ ] data = new byte [ VAR_2 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) ] ) ( TYPE_3 in = VAR_1 . METHOD_4 ( VAR_2 ) ) ( try ) ( end-try ) ( TYPE_4 . METHOD_5 ( in , data , 0 , data . length ) ) ( finally ) ( in . close ( ) ) ( end-finally ) ( return data ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 format( TYPE_2 user , TYPE_1 out , TYPE_3 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ) ( return format ( user , out , VAR_1 , cd , VAR_2 . METHOD_1 ( db . get ( ) , cd . notes ( ) , VAR_1 . user ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( try ) ( end-try ) ( METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ) ( METHOD_3 ( VAR_3 ) ) ( assertEquals ( VAR_1 , VAR_4 ) ) ( finally ) ( VAR_1 . delete ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( server , admin ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( METHOD_2 ( VAR_2 . get ( ) ) ) ( VAR_1 . close ( ) ) ( TYPE_2 VAR_3 = VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_3 ( VAR_2 . get ( ) ) . get ( ) ) ( TYPE_3 . METHOD_4 ( VAR_6 . get ( VAR_2 ) . getProject ( ) , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 t , TYPE_2 VAR_1 ) ) ( if ( t . METHOD_2 ( ) ) ) ( return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; ) ( endif ) ( if ( ! ( t . METHOD_3 ( ) ) ) ) ( return false ; ) ( endif ) ( return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( factory ( VAR_1 . Factory class ) ) ( factory ( VAR_2 class ) ) ( bind ( VAR_3 class ) ) ( com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ) ( TYPE_1 . METHOD_2 ( binder ( ) , VAR_6 class ) ) ( TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , org.eclipse.jgit.lib.Repository repo , TYPE_8 VAR_6 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_7 , java.util.Set < TYPE_9 > VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 , TYPE_12 < TYPE_13 , com.google.gerrit.reviewdb.client.Account.Id > VAR_11 , TYPE_14 VAR_12 , boolean VAR_13 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( int VAR_1 = VAR_2 . METHOD_2 ( ) ) ( if ( 0 <= VAR_1 ) ) ( java.lang.String n = VAR_2 . getValue ( VAR_1 ) ) ( VAR_2 . METHOD_3 ( false ) ) ( TYPE_2 . display ( TYPE_3 . METHOD_4 ( changeId , n ) , new TYPE_4 ( changeId , n ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.PatchSet METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( com.google.gerrit.reviewdb.client.Change c = change ( ) ) ( if ( c == null ) ) ( return null ; ) ( endif ) ( for (com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( )) ) ( endfor ) ( if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) ) ( VAR_1 = p ) ( return p ; ) ( endif ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( VAR_2 . get ( ) ) ) + STRING_2 ) , METHOD_2 ( project . get ( ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ) ( r . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( rpc ( VAR_1 class ) ) ( rpc ( VAR_2 class ) ) ( rpc ( VAR_3 class ) ) ( rpc ( VAR_4 class ) ) ( rpc ( VAR_5 class ) ) ( rpc ( VAR_6 class ) ) ( rpc ( VAR_7 class ) ) ( rpc ( VAR_8 class ) ) ( rpc ( VAR_9 class ) ) ( install ( new TYPE_1 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( java.lang.String cmd = STRING_1 + VAR_2 ) ( TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( ) ) ( try ) ( end-try ) ( TYPE_4 . METHOD_5 ( VAR_1 , cmd , VAR_3 ) ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_4 . error ( java.lang.String.format ( ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , VAR_1 , e , cmd , VAR_3 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final TYPE_1 VAR_1 ) ) ( if ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) ) ( return true ; ) ( endif ) ( try ) ( end-try ) ( return VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_3 . METHOD_4 ( STRING_1 , e ) ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change update( com.google.gerrit.reviewdb.client.Change c ) ) ( c . METHOD_1 ( VAR_1 ) ) ( c . METHOD_2 ( VAR_2 ) ) ( if ( ! ( VAR_3 . equals ( c . currentPatchSetId ( ) ) ) ) ) ( try ) ( end-try ) ( c . METHOD_3 ( VAR_4 . get ( db , VAR_3 ) ) ) ( end-catch ) ( catch (TYPE_1 VAR_5) ) ( METHOD_4 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ) ( endif ) ( TYPE_2 . METHOD_5 ( c ) ) ( return c ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) ) ( final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ) ( try ) ( end-try ) ( return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new TYPE_3 ( change.getId ( ) , e ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( com.google.gerrit.reviewdb.client.Project VAR_1 ) ) ( final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ) ( if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) ) ( return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( ) ) ( VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( ) ) ( VAR_2 = VAR_2 . METHOD_5 ( 0 , ( ( VAR_2 . length ( ) ) - INT_1 ) ) ) ( VAR_3 = TYPE_2 . METHOD_6 ( VAR_2 , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 . ProjectConfig config , TYPE_4 VAR_2 , boolean VAR_3 ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = config . commit ( VAR_2 ) ) ( VAR_4 . METHOD_2 ( config . getProject ( ) . METHOD_3 ( ) , VAR_5 , base , commit . getId ( ) , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ( VAR_6 . METHOD_7 ( config . getProject ( ) ) ) ( return VAR_7 . create ( projectName ) . METHOD_8 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = group ( STRING_1 ) ) ( VAR_2 = group ( STRING_2 ) ) ( VAR_3 = group ( STRING_3 ) ) ( METHOD_2 ( INT_1 ) ) ( TYPE_1 VAR_4 ) ( TYPE_2 to ) ( TYPE_3 revision ) ( VAR_5 = user ( STRING_4 , STRING_5 , VAR_1 ) ) ( VAR_6 = user ( STRING_6 , STRING_7 , VAR_2 ) ) ( VAR_7 = user ( STRING_8 , STRING_9 , VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( java.util.List < TYPE_2 > VAR_1 ) ) ( TYPE_1 < TYPE_2 > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ) ( if ( ! ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) ) ( VAR_2 = VAR_2 . METHOD_4 ( new TYPE_5 ( VAR_3 ) ) ) ( endif ) ( if ( ! ( TYPE_4 . METHOD_3 ( VAR_4 ) ) ) ) ( VAR_2 = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_4 ) ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey n , java.lang.String VAR_1 ) ) ( if ( TYPE_1 . equals ( VAR_1 ) ) ) ( return STRING_1 + ( n . toString ( ) ) ; ) ( endif ) ( return ( ( STRING_1 + ( n . toString ( ) ) ) + STRING_2 ) + VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = new java.util.ArrayList < TYPE_1 > ( values . size ( ) ) ) ( for (TYPE_2 VAR_2 : values) ) ( endfor ) ( VAR_1 . add ( TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) ) ) ) ( java.util.Collections . METHOD_3 ( VAR_1 ) ) ( java.util.Collections . METHOD_4 ( VAR_1 ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > projects ) ) ( for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) ) ( endfor ) ( try ) ( end-try ) ( VAR_1 . METHOD_2 ( project , true ) ) ( end-catch ) ( catch (TYPE_3 VAR_2) ) ( METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . project ( ) ) ) + STRING_2 ) + STRING_3 ) ) ) ( METHOD_4 ( VAR_2 . project ( ) ) ) ( catch (java.io.IOException e) ) ( throw new TYPE_2 ( ( STRING_4 + project ) , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 revision ) ) ( switch ( type ) ) ( end-switch ) ( case VAR_1 : ) ( case VAR_2 : ) ( case VAR_3 : ) ( case VAR_4 : ) ( throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ) ( case VAR_5 : ) ( case VAR_6 : ) ( case VAR_7 : ) ( case VAR_8 : ) ( case VAR_9 : ) ( case VAR_10 : ) ( case VAR_11 : ) ( case VAR_12 : ) ( case VAR_13 : ) ( default : ) ( this . revision = TYPE_4 . METHOD_2 ( revision ) ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 key , TYPE_2 value ) ) ( int size = ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) ( for (java.lang.String p : value . METHOD_2 ( )) ) ( endfor ) ( size += p . length ( ) ) ( size += ( value . METHOD_2 ( ) . size ( ) ) - 1 ) ( return size ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . Account result ) ) ( final TYPE_1 . Account me = TYPE_2 . METHOD_2 ( ) ) ( me . METHOD_3 ( result . METHOD_4 ( ) ) ) ( me . METHOD_5 ( result . METHOD_6 ( ) ) ) ( me . METHOD_7 ( result . METHOD_8 ( ) ) ) ( TYPE_2 . METHOD_9 ( ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . display ( me ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , TYPE_1 VAR_2 ) ) ( if ( VAR_1 != null ) ) ( for (TYPE_3 < TYPE_1 > VAR_3 : TYPE_4 . METHOD_2 ( )) ) ( endfor ) ( if ( VAR_3 . METHOD_3 ( VAR_1 ) ) ) ( final byte [ ] VAR_4 = METHOD_4 ( VAR_3 , VAR_1 ) ) ( if ( ! ( METHOD_5 ( VAR_3 , VAR_2 , VAR_4 ) ) ) ) ( db . delete ( VAR_4 ) ) ( endif ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( Project.NameKey projectName( org.eclipse.jgit.lib.Repository repo ) ) ( TYPE_1 VAR_1 = repo . METHOD_1 ( ) . METHOD_2 ( ) ) ( if ( VAR_1 . METHOD_3 ( VAR_2 ) ) ) ( java.lang.String p = VAR_2 . METHOD_4 ( VAR_1 ) . toString ( ) ) ( java.lang.String n = p . METHOD_5 ( 0 , ( ( p . length ( ) ) - ( STRING_1 . length ( ) ) ) ) ) ( return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; ) ( endif ) ( VAR_3 . METHOD_6 ( ( STRING_2 + VAR_1 ) ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ) ( try ) ( end-try ) ( return VAR_3 . get ( new TYPE_3 . Key ( project , repo , VAR_1 , VAR_2 , VAR_4 ) ) ; ) ( end-catch ) ( catch (TYPE_4 e) ) ( VAR_5 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ) ( return VAR_6 ; ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( if ( ! ( VAR_1 . METHOD_1 ( ) ) ) ) ( int VAR_2 = ( TYPE_1 . METHOD_2 ( ) ) - ( ( TYPE_2 . METHOD_3 ( ) ) + INT_1 ) ) ( VAR_3 . METHOD_4 ( VAR_2 ) ) ( VAR_4 . METHOD_4 ( VAR_2 ) ) ( endif ) ( METHOD_5 ( diff ) ) ( VAR_5 . METHOD_5 ( VAR_6 , VAR_1 . METHOD_6 ( ) ) ) ( VAR_7 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , diff ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) == 0 ) ) ( VAR_2 . METHOD_2 ( VAR_3 . get ( 0 ) ) ) ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ( VAR_1 = VAR_2 . METHOD_5 ( ) ) ( VAR_4 = VAR_2 . METHOD_6 ( ) ) ( METHOD_3 ( ) . METHOD_7 ( VAR_2 ) ) ( METHOD_3 ( ) . METHOD_8 ( ) . METHOD_9 ( ( ( VAR_1 ) * ( VAR_3 . size ( ) ) ) , VAR_5 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final int row ) ) ( for (final TYPE_1 s : VAR_1) ) ( endfor ) ( if ( row < ( VAR_2 ) ) ) ( ( VAR_2 ) -- ) ( endif ) ( if ( row < ( VAR_3 ) ) ) ( ( VAR_3 ) -- ) ( endif ) ( super . METHOD_1 ( row ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) ) ( try ) ( end-try ) ( for (com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_2 ( VAR_1 )) ) ( endfor ) ( METHOD_3 ( cd . change ( ) ) ) ( end-catch ) ( catch (java.io.IOException|com.google.gwtorm.server.OrmException e) ) ( METHOD_4 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ) ( TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_4 ) ) ( try ) ( end-try ) ( if ( VAR_3 . METHOD_3 ( ) ) ) ( return VAR_3 ; ) ( endif ) ( throw new TYPE_2 ( STRING_1 ) ) ( end-catch ) ( catch (java.io.IOException VAR_5) ) ( throw new TYPE_2 ( STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 format( TYPE_1 out , TYPE_2 ctl , TYPE_3 VAR_1 ) ) ( com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ) ( return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , ctl , psId , VAR_3 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 . get ( ) ) ) ) ( VAR_3 . METHOD_3 ( ) ) ( VAR_3 . add ( VAR_1 ) ) ( endif ) ( METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( ) ) ( int VAR_1 = 0 ) ( if ( ( VAR_2 ) != null ) ) ( for (TYPE_1 r : VAR_2 . METHOD_2 ( )) ) ( endfor ) ( VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , r ) ) ) ( VAR_1 = VAR_2 . METHOD_4 ( ) . size ( ) ) ( VAR_2 . METHOD_5 ( ) ) ( VAR_2 = null ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 out , java.lang.String path , byte [ ] data ) ) ( TYPE_3 < TYPE_1 > VAR_1 = ( ( TYPE_3 < TYPE_1 > ) ( format ) ) ) ( VAR_1 . METHOD_1 ( out , path , VAR_2 , new TYPE_4 ( VAR_3 , data ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) ) ( if ( err != null ) ) ( TYPE_5 . METHOD_2 ( req , err ) ) ( endif ) ( TYPE_6 . METHOD_3 ( req , res , null , c ) ) ( res . METHOD_4 ( VAR_1 ) ) ( TYPE_6 . METHOD_5 ( req , res , msg ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( VAR_1 . get ( ) . METHOD_2 ( ) ) ) ( return ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_4 ) ) ) && ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( VAR_5 ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( java.lang.String VAR_1 ) ) ( final TYPE_4 ctx = VAR_2 . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_5 schema = VAR_2 . METHOD_3 ( ctx ) ) ( VAR_2 . METHOD_4 ( schema , ctx , VAR_1 , false ) ) ( return true ; ) ( finally ) ( try ) ( end-try ) ( ctx . close ( ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( VAR_3 . METHOD_5 ( STRING_1 , e ) ) ( end-finally ) ( end-catch ) ( catch (TYPE_6 e) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 < TYPE_2 > m ) ) ( VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 ) ) ( VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) ) ( VAR_2 . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = new TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_3 ) ) ( n . add ( VAR_1 ) ) ( VAR_3 = java.util.Collections . METHOD_3 ( n ) ) ( finally ) ( VAR_2 . METHOD_4 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 ctx ) ) ( final TYPE_4 VAR_1 = new TYPE_4 ( ) ) ( final TYPE_5 < TYPE_6 > res ) ( final TYPE_7 VAR_2 = ctx . METHOD_2 ( STRING_1 ) ) ( TYPE_8 VAR_3 = VAR_2 . get ( STRING_2 ) ) ( if ( ( VAR_3 != null ) && ( VAR_3 . contains ( STRING_3 ) ) ) ) ( return new TYPE_9 ( VAR_2 ) ; ) ( endif ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( final TYPE_1 cm ) ( cm = VAR_1 . create ( change ) ) ( cm . METHOD_1 ( me ) ) ( cm . METHOD_2 ( ps , info ) ) ( cm . METHOD_3 ( reviewers ) ) ( cm . METHOD_4 ( VAR_2 ) ) ( cm . METHOD_5 ( ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ) ( VAR_3 . METHOD_4 ( VAR_1 ) ) ( view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2.NameKey,com.google.gerrit.server.query.change.ChangeData> METHOD_1( ) ) ( TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_4 . create ( ) ) ( for (com.google.gerrit.server.query.change.ChangeData cd : VAR_2) ) ( endfor ) ( VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) ) ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ( final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ) ( for (final TYPE_1 VAR_5 : VAR_4) ) ( endfor ) ( final boolean VAR_6 = VAR_4 . METHOD_4 ( ) . equals ( VAR_5 ) ) ( METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 cfg ) ) ( return TYPE_1 . create ( cfg . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_3 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_4 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_5 , VAR_1 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) ) ( java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( INT_1 ) ) ( for (final com.google.gerrit.reviewdb.client.Change . Status e : TYPE_3 . values ( )) ) ( endfor ) ( if ( e . METHOD_2 ( ) ) ) ( r . add ( new TYPE_4 ( e ) ) ) ( endif ) ( return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) ) ( TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( db , c ) ) . values ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 VAR_1 ) ) ( final TYPE_2 r = VAR_1 . METHOD_2 ( ) ) ( final TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ) ( if ( VAR_2 == null ) ) ( return null ; ) ( endif ) ( return TYPE_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 git = METHOD_2 ( ) ) ( TYPE_2 . Result change = METHOD_3 ( git ) ) ( submit ( change . getChangeId ( ) ) ) ( METHOD_4 ( git , false ) ) ( com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( 0 ) ) . isEqualTo ( change . METHOD_7 ( ) . METHOD_6 ( 0 ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) ( end-try ) ( return METHOD_1 ( repo , changeId ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( boolean VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_2 ) ) ( return VAR_1 ? TYPE_2 . METHOD_2 ( id . getParentKey ( ) , VAR_2 ) : TYPE_3 . revision ( id ) . view ( STRING_1 ) . id ( VAR_2 ) . view ( STRING_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.reviewdb.client.Change> submit( TYPE_1 rsrc , TYPE_2 VAR_1 , boolean VAR_2 ) ) ( java.lang.String topic = rsrc . getChange ( ) . METHOD_1 ( ) ) ( if ( ( VAR_3 ) && ( ! ( TYPE_4 . METHOD_2 ( topic ) ) ) ) ) ( return METHOD_3 ( rsrc , VAR_1 , VAR_2 , topic ) ; ) ( endif ) ( return TYPE_5 . METHOD_4 ( METHOD_5 ( rsrc , VAR_1 , VAR_2 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) ) ( com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) ( cd . METHOD_2 ( user ) ) ( if ( TYPE_5 . METHOD_3 ( cfg ) ) ) ( return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; ) ( endif ) ( return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) ) ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ( final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ) ( int i = 0 ) ( for (final TYPE_1 VAR_5 : VAR_4) ) ( endfor ) ( final boolean VAR_6 = ( ++ i ) == ( VAR_4 . size ( ) ) ) ( METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( db . create ( ) ) ( final TYPE_2 VAR_1 = db . METHOD_2 ( ) ) ( final TYPE_2 VAR_2 = db . METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 ) ) ( assertEquals ( VAR_3 , VAR_4 ) ) ( assertEquals ( VAR_5 , VAR_6 ) ) ( assertEquals ( VAR_7 , VAR_8 ) ) ( assertEquals ( VAR_9 , VAR_10 ) ) ( assertEquals ( VAR_11 , VAR_12 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) ( VAR_3 = TYPE_2 . METHOD_4 ( cfg . METHOD_5 ( ) . get ( STRING_1 ) ) ) ( VAR_3 . METHOD_6 ( false ) ) ( VAR_3 . METHOD_7 ( false ) ) ( VAR_3 . METHOD_8 ( false ) ) ( VAR_3 . METHOD_9 ( false ) ) ( VAR_3 . METHOD_10 ( false ) ) ( VAR_3 . METHOD_11 ( ( ( short ) ( - 1 ) ) ) ) ( METHOD_12 ( cfg ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String error , boolean VAR_1 , java.lang.Exception e ) ) ( if ( VAR_1 ) ) ( this . VAR_1 . update ( 1 ) ) ( endif ) ( if ( e != null ) ) ( VAR_2 . METHOD_2 ( error , e ) ) ( endif ) ( VAR_2 . METHOD_2 ( error ) ) ( if ( ( VAR_3 ) != null ) ) ( VAR_3 . METHOD_3 ( error ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_3 git = METHOD_2 ( false ) ) ( TYPE_4 . Result change = METHOD_3 ( git ) ) ( submit ( change . getChangeId ( ) ) ) ( org.junit.Assert.assertEquals ( change . METHOD_4 ( ) , METHOD_5 ( ) . getId ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ) ( if ( VAR_1 != null ) ) ( TYPE_5 b = VAR_2 . METHOD_3 ( ) ) ( b . METHOD_4 ( new byte [ 0 ] , VAR_3 , VAR_4 , VAR_1 ) ) ( b . METHOD_5 ( ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 ) ) ( for (TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_2 ( )) ) ( endfor ) ( if ( ( cmd . METHOD_3 ( ) ) == ( VAR_2 ) ) ) ( METHOD_1 ( project , cmd . getRefName ( ) , cmd . METHOD_4 ( ) , cmd . METHOD_5 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 . Change change , TYPE_2 user , TYPE_1 . ReviewDb db ) ) ( final TYPE_4 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ) ( if ( VAR_1 == null ) ) ( return false ; ) ( endif ) ( final TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( user ) ) ( return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String projectName , java.lang.String VAR_1 ) ) ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) ( try ) ( end-try ) ( com.google.common.truth.Truth.assertThat ( repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) . isEqualTo ( VAR_1 ) ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 user ) ) ( if ( ( VAR_1 ) != null ) ) ( throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ) ( endif ) ( try ) ( end-try ) ( if ( ( change ) != null ) ) ( VAR_1 = VAR_2 . METHOD_3 ( change , user ) ) ( endif ) ( VAR_1 = VAR_2 . METHOD_3 ( project , VAR_3 , user ) ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( TYPE_3 VAR_2 = TYPE_4 . get ( VAR_1 ) ) ( org.eclipse.jgit.lib.Repository VAR_3 = TYPE_5 . get ( VAR_1 ) ) ( TYPE_6 VAR_4 = ( ( TYPE_6 ) ( VAR_5 ) ) ) ( try ) ( end-try ) ( return new TYPE_1 ( VAR_6 , VAR_3 , VAR_2 ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_7 ( e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( boolean VAR_1 ) ) ( java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ) ( java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ) ( TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( com.google.gerrit.reviewdb.client.Change c = change ( ) ) ( if ( c == null ) ) ( return java.util.Collections . METHOD_2 ( ) ; ) ( endif ) ( VAR_1 = new TYPE_1 < > ( ) ) ( for (TYPE_2 VAR_2 : VAR_3 . METHOD_3 ( db , notes )) ) ( endfor ) ( VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) ( TYPE_2 < TYPE_3 > edit = VAR_3 . METHOD_4 ( change ) ) ( try ) ( end-try ) ( VAR_4 . METHOD_5 ( edit . get ( ) . getChange ( ) . getProject ( ) , edit . get ( ) . getRevision ( ) . get ( ) , VAR_5 ) ) ( org.junit.Assert . METHOD_6 ( STRING_1 ) ) ( end-catch ) ( catch (TYPE_4 VAR_6) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ) ( if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) ) ) ( VAR_2 = new TYPE_1 ( args , getChangeId ( ) , VAR_1 ) ) ( VAR_2 . METHOD_3 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final java.lang.String VAR_1 ) ) ( final TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ) ( try ) ( end-try ) ( final TYPE_1 VAR_3 = METHOD_3 ( STRING_1 ) ) ( assertEquals ( 0 , METHOD_4 ( VAR_4 , VAR_3 , VAR_2 . METHOD_5 ( ) ) ) ) ( return METHOD_6 ( VAR_2 ) ; ) ( finally ) ( VAR_2 . delete ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) ( METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ) ( METHOD_4 ( user ) ) ( com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ) ( METHOD_2 ( STRING_2 ) ) ( METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ) ( METHOD_2 ( STRING_3 ) ) ( METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 . Key key , final TYPE_1 VAR_1 ) ) ( final com.google.gerrit.reviewdb.client.Account.Id VAR_2 = VAR_1 . getAccountId ( ) ) ( final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ) ( final TYPE_3 . Key VAR_4 = VAR_1 . METHOD_3 ( ) ) ( final java.lang.String VAR_5 = VAR_1 . METHOD_4 ( ) ) ( return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( change . getProject ( ) ) ) ( org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( end-try ) ( return VAR_3 . METHOD_2 ( VAR_2 , patchSet ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( throw TYPE_2 . METHOD_3 ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 diff( java.lang.String base ) ) ( try ) ( end-try ) ( return VAR_1 . get ( ) . METHOD_1 ( base ) . apply ( file ) . value ( ) ; ) ( end-catch ) ( catch (java.io.IOException|TYPE_3|com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 VAR_1 ) ) ( com.google.gerrit.reviewdb.client . AccountGroup group = VAR_1 . METHOD_1 ( ) ) ( if ( group == null ) ) ( throw new TYPE_3 ( ) ) ( endif ) ( try ) ( end-try ) ( TYPE_4 c = VAR_2 . METHOD_2 ( group . METHOD_3 ( ) ) ) ( return VAR_3 . METHOD_4 ( VAR_4 ) . format ( c . METHOD_5 ( ) ) ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw new TYPE_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( ui . METHOD_1 ( STRING_1 ) ) ( METHOD_2 ( ) ) ( if ( ( auth . METHOD_3 ( STRING_2 ) ) == null ) ) ( auth . METHOD_4 ( STRING_2 , TYPE_1 . METHOD_5 ( ) ) ) ( endif ) ( if ( ( auth . METHOD_3 ( STRING_3 ) ) == null ) ) ( auth . METHOD_4 ( STRING_3 , TYPE_1 . METHOD_5 ( ) ) ) ( endif ) ( METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( TYPE_2 u = util . user ( VAR_1 , STRING_2 , VAR_3 ) ) ( TYPE_2 d = util . user ( VAR_1 , STRING_3 , VAR_3 ) ) ( METHOD_3 ( STRING_4 , u . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ) ( METHOD_6 ( STRING_6 , d . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ) ( VAR_3 . METHOD_4 ( VAR_1 ) ) ( if ( ( view ) != null ) ) ( view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , TYPE_2 rsrc ) ) ( TYPE_3 VAR_2 = rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) ( for (java.lang.String name : TYPE_4 . METHOD_4 ( )) ) ( endfor ) ( if ( ( METHOD_5 ( name ) ) && ( VAR_2 . METHOD_6 ( name ) ) ) ) ( VAR_1 . put ( name , new TYPE_5 ( VAR_2 . METHOD_7 ( name ) ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( byte [ ] VAR_1 , TYPE_1 . ReviewDb db ) ) ( if ( ( VAR_2 ) == 0 ) ) ( VAR_3 = db . METHOD_2 ( ) ) ( VAR_2 = VAR_4 ) ( endif ) ( TYPE_3 . METHOD_3 ( VAR_1 , 0 , VAR_3 ) ) ( TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , ( ( VAR_2 ) -- ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = change . getProject ( ) ) ( org.eclipse.jgit.lib.ObjectId a = null ) ( if ( ( patchSet . getRevision ( ) ) == null ) ) ( throw new TYPE_2 ( ( STRING_1 + ( patchSet . getId ( ) ) ) ) ) ( endif ) ( org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId . METHOD_1 ( patchSet . getRevision ( ) . get ( ) ) ) ( TYPE_3 VAR_1 = VAR_2 ) ( return get ( new TYPE_4 ( a , b , VAR_1 ) , project ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = new TYPE_2 < java.lang.String , TYPE_1 > ( ) ) ( if ( ( VAR_2 ) != null ) ) ( for (final TYPE_1 t : VAR_2) ) ( endfor ) ( VAR_1 . put ( t . getId ( ) , t ) ) ( endif ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 git = METHOD_2 ( ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ) ( TYPE_2 . Result change = METHOD_4 ( git ) ) ( submit ( change . getChangeId ( ) ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_5 ( ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_6 ( 0 ) ) . isEqualTo ( VAR_1 ) ) ( METHOD_7 ( change . getChangeId ( ) , 1 ) ) ( CFG Exit )
( CFG Entry ) ( Account.Id METHOD_1( java.lang.String VAR_1 ) ) ( try ) ( end-try ) ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ) ( return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project project ) ) ( java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = VAR_1 . get ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ( METHOD_4 ( changes ) ) ( db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ) ( db . METHOD_6 ( ) . delete ( db . METHOD_6 ( ) . METHOD_7 ( project . METHOD_3 ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final com.google.gerrit.reviewdb.client.Account account ) ) ( if ( account != null ) ) ( java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ) ( if ( ( account . METHOD_3 ( ) ) != null ) ) ( result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ) ( endif ) ( return result ; ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( TYPE_1 . Id id , java.lang.String VAR_1 ) ) ( try ) ( end-try ) ( final TYPE_1 key = new TYPE_1 ( id , TYPE_3 . METHOD_1 ( VAR_1 ) ) ) ( TYPE_3 . METHOD_2 ( key ) ) ( return key ; ) ( end-catch ) ( catch (TYPE_4 e) ) ( throw new TYPE_2 ( ) ) ( catch (TYPE_5 e) ) ( throw new TYPE_2 ( ) ) ( catch (TYPE_6 e) ) ( VAR_2 . error ( STRING_1 , e ) ) ( throw new TYPE_2 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( for (TYPE_2 VAR_1 : VAR_2) ) ( endfor ) ( if ( METHOD_2 ( change , VAR_1 . METHOD_3 ( ) , db ) ) ) ( VAR_1 . METHOD_4 ( event ) ) ( endif ) ( METHOD_5 ( event ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( TYPE_1 user = VAR_1 . METHOD_2 ( ) ) ( TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( user . METHOD_6 ( ) . contains ( getChange ( ) . getId ( ) ) ) ) ( METHOD_7 ( VAR_2 , user ) ) ( return VAR_2 . METHOD_8 ( ) . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( int id , java.lang.String VAR_1 , int n , boolean e ) ) ( TYPE_1 api = TYPE_2 . change ( id ) . view ( STRING_1 ) . METHOD_2 ( STRING_2 , n ) . METHOD_2 ( STRING_3 , e ) ) ( if ( VAR_1 != null ) ) ( api . METHOD_2 ( STRING_4 , VAR_1 ) ) ( endif ) ( return api ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) ) ( try ) ( end-try ) ( final TYPE_3 . ReviewDb db = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ( try ) ( end-try ) ( VAR_1 . onSuccess ( db . METHOD_1 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ( finally ) ( db . close ( ) ) ( end-finally ) ( end-catch ) ( catch (TYPE_5.OrmException e) ) ( VAR_1 . METHOD_6 ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( change , METHOD_3 ( changeId ) ) ) . isEqualTo ( VAR_2 ) ) ( TYPE_1 < TYPE_2 > edit = VAR_3 . METHOD_4 ( change ) ) ( METHOD_5 ( FLOAT_1 ) ) ( TYPE_3 VAR_4 ) ( TYPE_4 VAR_5 ) ( METHOD_6 ( VAR_6 ) ) ( VAR_7 . METHOD_7 ( VAR_8 class ) ) ( VAR_7 . METHOD_8 ( STRING_1 ) ) ( VAR_1 . METHOD_9 ( edit . get ( ) , edit . get ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( VAR_1 ) ) ( VAR_2 . METHOD_2 ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ) ( VAR_4 . run ( new TYPE_2 ( ) { public void METHOD_4 ( java.lang.String msg ) { VAR_2 . METHOD_2 ( msg ) ; VAR_2 . METHOD_5 ( ) ; } } ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo format( TYPE_2 rsrc ) ) ( com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , rsrc . METHOD_1 ( ) ) ) ( return format ( cd , TYPE_3 . of ( rsrc . METHOD_2 ( ) . getId ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , java.lang.String name ) ) ( TYPE_1 a = new TYPE_1 ( ) ) ( a . METHOD_2 ( VAR_1 ) ) ( a . METHOD_3 ( TYPE_2 . METHOD_4 ( name ) ) ) ( TYPE_3 VAR_2 = a . METHOD_5 ( ) ) ( VAR_3 . METHOD_6 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 VAR_1 ) ) ( final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ) ( if ( group == null ) ) ( throw new TYPE_3 ( VAR_1 ) ) ( endif ) ( return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.StringBuilder out , int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) ) ( if ( VAR_3 instanceof TYPE_3 ) ) ( TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_3 ) ) ) ( out . append ( STRING_1 ) . append ( VAR_5 ) . append ( STRING_2 ) . append ( VAR_6 ) . append ( STRING_3 ) ) ( endif ) ( if ( ( VAR_7 ) != null ) ) ( METHOD_2 ( out , VAR_1 , VAR_2 , VAR_3 ) ) ( endif ) ( METHOD_3 ( out , VAR_1 , VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 rsrc , com.google.gerrit.reviewdb.client.Change . Id id ) ) ( com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ) ( if ( c == null ) ) ( return null ; ) ( endif ) ( return rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( c ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo apply( TYPE_2 req , TYPE_3 input ) ) ( TYPE_6 VAR_1 = req . METHOD_1 ( ) ) ( if ( ! ( VAR_1 . METHOD_2 ( VAR_2 . get ( ) ) ) ) ) ( throw new TYPE_7 ( STRING_1 ) ) ( endif ) ( com.google.gerrit.reviewdb.client.Change change = METHOD_3 ( VAR_1 , input . message , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ( return VAR_3 . create ( VAR_4 ) . format ( change ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( TYPE_2 VAR_1 = null ) ( TYPE_3 . NameKey VAR_2 = new TYPE_3 . NameKey ( STRING_1 ) ) ( TYPE_4 VAR_3 = null ) ( TYPE_5 . Project project = new TYPE_5 . Project ( ) ) ( project . METHOD_2 ( VAR_4 . get ( ) ) ) ( TYPE_1 ps = new TYPE_1 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , project , VAR_6 ) ) ( ps . METHOD_3 ( VAR_7 ) ) ( return ps ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . append ( CHAR_1 ) ) ) ( METHOD_2 ( b , b . append ( CHAR_2 ) ) ) ( assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 key = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( java.lang.String VAR_1 = new TYPE_3 ( ) . create ( ) . METHOD_3 ( key ) ) ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( VAR_3 ) , VAR_1 ) ) . METHOD_7 ( new TYPE_5 ( VAR_4 , VAR_5 ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_6 . METHOD_8 ( VAR_3 , key ) ) . METHOD_9 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ( METHOD_4 ( VAR_1 ) ) ( assertEquals ( STRING_1 , VAR_1 . getName ( ) ) ) ( assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ) ( assertEquals ( STRING_3 , VAR_1 . METHOD_6 ( ) ) ) ( METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ) ( METHOD_9 ( VAR_1 , 2 , 1 , 0 , ( - 1 ) , ( - 2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String changeId = METHOD_2 ( admin ) ) ( java.util.List < TYPE_2 > reviewers = METHOD_3 ( changeId , STRING_1 , INT_1 ) ) ( org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_1 ) ) ( reviewers = METHOD_3 ( changeId , STRING_1 , INT_2 ) ) ( org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_2 ) ) ( reviewers = METHOD_3 ( changeId , STRING_2 , INT_3 ) ) ( org.junit.Assert.assertEquals ( reviewers . size ( ) , 1 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final java.lang.String name , final java.lang.String email ) ) ( final TYPE_2 . Id VAR_1 = new TYPE_2 . Id ( INT_1 ) ) ( final TYPE_3 . Account account = new TYPE_3 . Account ( VAR_1 ) ) ( account . METHOD_2 ( name ) ) ( account . METHOD_3 ( email ) ) ( final TYPE_1 s = new TYPE_1 ( account , VAR_2 . Collections < TYPE_4 . Id > METHOD_4 ( ) , VAR_2 . Collections < TYPE_5 > METHOD_4 ( ) ) ) ( return s ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( change = ctx . getChange ( ) ) ( TYPE_2 update = ctx . METHOD_2 ( psId ) ) ( VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ) ( if ( VAR_1 ) ) ( change . METHOD_3 ( VAR_3 ) ) ( update . METHOD_3 ( change . getStatus ( ) ) ) ( TYPE_3 . METHOD_4 ( change ) ) ( ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( org.eclipse.jgit.revwalk.RevWalk walk , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_3 = walk . parseCommit ( VAR_2 . getId ( ) ) ) ( if ( ( VAR_3 . METHOD_2 ( ) ) > 0 ) ) ( return TYPE_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . contains ( VAR_1 . getId ( ) ) ; ) ( endif ) ( return VAR_1 == ( VAR_4 ) ; ) ( CFG Exit )
( CFG Entry ) ( void display( TYPE_1 . ChangeInfo info , java.lang.String revision , boolean VAR_1 ) ) ( this . revision = revision ) ( boolean VAR_2 = TYPE_2 . METHOD_1 ( ) ) ( TYPE_3 VAR_3 = info . revision ( revision ) ) ( TYPE_4 commit = VAR_3 . commit ( ) ) ( changeId = info . METHOD_2 ( ) ) ( project = info . project ( ) ) ( VAR_4 = commit . METHOD_3 ( ) ) ( message = commit . message ( ) ) ( METHOD_4 ( info , VAR_2 ) ) ( METHOD_5 ( info , VAR_3 , VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( VAR_1 . METHOD_2 ( STRING_1 , 2 ) ) ( java.lang.String VAR_2 = ( ( METHOD_3 ( ) ) + STRING_2 ) + ( METHOD_4 ( ) ) ) ( VAR_1 . update ( 1 ) ) ( VAR_3 . METHOD_5 ( METHOD_3 ( ) , VAR_4 , VAR_5 ) ) ( VAR_1 . update ( 1 ) ) ( VAR_3 . METHOD_6 ( METHOD_3 ( ) , ( ( VAR_6 ) + STRING_3 ) , VAR_2 ) ) ( VAR_1 . METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> apply( TYPE_2 rsrc , TYPE_3 in ) ) ( if ( ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) ) ( throw new TYPE_4 ( STRING_1 ) ) ( endif ) ( try ) ( end-try ) ( VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , change.getId ( ) ) ) ( end-catch ) ( catch (TYPE_5 e) ) ( return TYPE_1 . METHOD_3 ( ) ; ) ( return TYPE_1 . METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) ) ( TYPE_1 . Result change = METHOD_3 ( ) ) ( TYPE_1 . Result VAR_2 = METHOD_3 ( ) ) ( METHOD_4 ( VAR_2 . getChangeId ( ) ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 . getId ( ) ) . isEqualTo ( VAR_1 . getId ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void add( ) ) ( java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ) ( for (TYPE_1 input : VAR_1) ) ( endfor ) ( java.lang.String VAR_2 = input . getValue ( ) . METHOD_1 ( ) ) ( if ( ! ( VAR_2 . isEmpty ( ) ) ) ) ( input . METHOD_2 ( STRING_1 ) ) ( values . add ( VAR_2 ) ) ( endif ) ( insert ( values ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 . Key key ) ) ( try ) ( end-try ) ( TYPE_3 VAR_1 = new TYPE_3 ( key . repo , key . path ) ) ( try ) ( end-try ) ( VAR_1 . METHOD_2 ( null , VAR_2 ) ) ( return TYPE_2 . METHOD_3 ( VAR_1 ) ; ) ( finally ) ( VAR_1 . METHOD_4 ( ) ) ( end-finally ) ( finally ) ( key . repo = null ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( while ( true ) ) ( endwhile ) ( if ( VAR_1 ) ) ( break ; ) ( endif ) ( VAR_2 . METHOD_1 ( ) ) ( VAR_3 . METHOD_1 ( ) ) ( synchronized ( this ) ) ( try ) ( end-try ) ( METHOD_2 ( INT_1 ) ) ( end-catch ) ( catch (TYPE_1 e) ) ( VAR_4 . METHOD_3 ( STRING_1 , e ) ) ( end-synchronized ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 info , boolean r ) ) ( TYPE_2 api = TYPE_3 . revision ( VAR_1 ) . view ( STRING_1 ) . id ( info . path ( ) ) . view ( STRING_2 ) ) ( if ( r ) ) ( api . put ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ) ( endif ) ( api . delete ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 config , java.lang.String VAR_1 , java.lang.String VAR_2 ) ) ( return new TYPE_3 ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( config ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.Project.NameKey,com.google.gerrit.reviewdb.client.Change.Id> METHOD_1( ) ) ( TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_3 . create ( ) ) ( for (com.google.gerrit.server.query.change.ChangeData cd : VAR_2) ) ( endfor ) ( VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , TYPE_8 VAR_6 , org.eclipse.jgit.lib.Repository repo , TYPE_9 VAR_7 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_8 , java.util.Set < TYPE_10 > VAR_9 , TYPE_11 VAR_10 , TYPE_12 VAR_11 , TYPE_13 < TYPE_14 , com.google.gerrit.reviewdb.client.Account.Id > VAR_12 , TYPE_15 VAR_13 , boolean VAR_14 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( byte [ ] VAR_1 ) ) ( byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new java.lang.String ( VAR_1 , VAR_3 ) ) ) ( TYPE_1 p = new TYPE_1 ( ) ) ( p . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ) ( org.junit.Assert.assertEquals ( TYPE_3 . of ( ) , p . METHOD_5 ( ) ) ) ( return p ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) ) ( java.util.List < TYPE_1 > result = new TYPE_2 < > ( ) ) ( TYPE_3 VAR_2 = VAR_3 . create ( true ) ) ( for (com.google.gerrit.reviewdb.client.Account.Id VAR_4 : VAR_1) ) ( endfor ) ( result . add ( VAR_2 . get ( VAR_4 ) ) ) ( VAR_2 . METHOD_2 ( ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) ) ( final java.lang.String name = VAR_1 . METHOD_2 ( ) ) ( final java.lang.String t = METHOD_3 ( ) ) ( final java.lang.String VAR_3 = METHOD_4 ( ) ) ( final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ) ( r . append ( STRING_1 ) ) ( if ( VAR_1 . METHOD_5 ( ) ) ) ( r . append ( ( STRING_2 + VAR_3 ) ) ) ( r . append ( STRING_3 ) ) ( endif ) ( return r . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . ReviewDb db , final TYPE_2 . Id VAR_1 ) ) ( try ) ( end-try ) ( if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) ) ) ( throw new TYPE_3 ( new TYPE_4 ( ) ) ) ( endif ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw new TYPE_3 ( new TYPE_4 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( index = new TYPE_1 ( VAR_1 ) ) ( VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . METHOD_2 ( index ) ) ( VAR_3 = new TYPE_3 ( VAR_2 ) ) ( VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 config , TYPE_3 VAR_1 ) ) ( if ( ( VAR_2 ) != null ) ) ( return VAR_2 ; ) ( endif ) ( int VAR_3 = config . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) ) ( if ( VAR_3 <= 0 ) ) ( VAR_3 = config . METHOD_2 ( STRING_3 , null , STRING_4 , 0 ) ) ( endif ) ( if ( VAR_3 <= 0 ) ) ( VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ( endif ) ( return TYPE_5 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_3 , STRING_5 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( VAR_1 . METHOD_2 ( ) ) ( TYPE_3 VAR_2 = VAR_3 ) ( int VAR_4 ) ( VAR_2 = VAR_2 . METHOD_3 ( ) ) ( if ( ! ( VAR_2 . METHOD_4 ( ) ) ) ) ( throw new TYPE_4 ( this , 1 , STRING_1 , VAR_2 ) ) ( endif ) ( VAR_4 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ) ( VAR_5 . METHOD_6 ( VAR_4 ) ) ( return VAR_6 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 } ) ( java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , true ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( try ) ( end-try ) ( new TYPE_1 ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) ) ( METHOD_4 ( STRING_4 ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( assertEquals ( ( STRING_5 + VAR_1 ) , e . getMessage ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Key<TYPE_2> METHOD_1( ) ) ( new TYPE_2 ( ) { private static final long VAR_1 = INT_1 ; VAR_2 ( TYPE_3 VAR_3 ) { } protected void METHOD_2 ( final TYPE_4 req , final TYPE_5 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) ; METHOD_7 ( VAR_4 ) ; TYPE_7 VAR_5 ; TYPE_8 VAR_6 ; TYPE_9 . to VAR_7 ; } } ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( if ( ! ( patchSet . METHOD_2 ( ) ) ) ) ( throw new TYPE_3 ( STRING_1 ) ) ( endif ) ( VAR_1 . METHOD_3 ( ctx . METHOD_4 ( ) , ctx . METHOD_5 ( psId ) , patchSet ) ) ( if ( ! ( VAR_2 ) ) ) ( ctx . METHOD_6 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( index = new TYPE_1 ( VAR_1 ) ) ( VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . METHOD_2 ( index ) ) ( VAR_3 = new TYPE_3 ( VAR_2 ) ) ( VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) , new TYPE_6 ( null ) ) ) ( CFG Exit )
( CFG Entry ) ( void add( final TYPE_1 r ) ) ( final java.lang.String n = r . METHOD_1 ( ) ) ( METHOD_2 ( n ) ) ( if ( ( VAR_1 . put ( n , r ) ) != null ) ) ( throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ) ( endif ) ( VAR_2 . add ( n ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.OrmException METHOD_1( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_2 err ) ) ( if ( ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ) ) ( err . METHOD_4 ( err . METHOD_3 ( ) ) ) ( endif ) ( return new TYPE_1 . OrmException ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , err ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( TYPE_2 VAR_2 = VAR_3 . projects ( ) . name ( VAR_1 ) . create ( ) ) ( TYPE_3 p = VAR_2 . get ( ) ) ( org.junit.Assert.assertEquals ( VAR_1 , p . name ) ) ( TYPE_4 VAR_4 = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) ( org.junit.Assert . METHOD_2 ( VAR_4 ) ) ( TYPE_5 . METHOD_3 ( VAR_4 . getProject ( ) , p ) ) ( METHOD_4 ( VAR_1 , STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( Account.Id METHOD_1( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) ) ( final com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( VAR_2 ) ) ( if ( a == null ) ) ( throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ) ( endif ) ( return a . getId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( java.util.List < TYPE_1 > VAR_1 ) ) ( java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ) ( for (TYPE_1 VAR_4 : VAR_1) ) ( endfor ) ( VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ) ( for (java.lang.String name : VAR_2) ) ( endfor ) ( VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ) ( VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ) ( return ! ( VAR_2 . isEmpty ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , boolean edit ) ) ( VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , org.eclipse.jgit.revwalk.RevCommit commit , TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 , TYPE_3 info , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) ) ( METHOD_1 ( db , change , null , ps , commit , VAR_1 , VAR_2 , info , reviewers ) ) ( CFG Exit )
( CFG Entry ) ( byte[] METHOD_1( final TYPE_1 p ) ) ( final TYPE_2 in = p . METHOD_2 ( ) . METHOD_3 ( p . getName ( ) ) ) ( TYPE_3 VAR_1 = new TYPE_3 ( ) ) ( try ) ( end-try ) ( TYPE_4 . METHOD_4 ( in , VAR_1 ) ) ( finally ) ( in . close ( ) ) ( VAR_1 . close ( ) ) ( end-finally ) ( return VAR_1 . METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ) ( TYPE_2 u = util . user ( VAR_3 , VAR_4 ) ) ( METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( index = new TYPE_1 ( VAR_1 ) ) ( VAR_2 = new TYPE_2 ( ) ) ( VAR_2 . METHOD_2 ( index ) ) ( VAR_3 = new TYPE_3 ( VAR_2 ) ) ( VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 . get ( ) ) instanceof TYPE_2 ) ) ( endif ) ( if ( ! ( VAR_2 ) ) ) ( throw new TYPE_1 ( 1 , STRING_1 ) ) ( endif ) ( if ( ! ( VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( throw new TYPE_1 ( 1 , STRING_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( boolean VAR_1 ) ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ) ( endif ) ( TYPE_1 . METHOD_1 ( VAR_3 , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_4 VAR_4 ) { } public void onSuccess ( TYPE_3 result ) { } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( METHOD_3 ( ) ) ( TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ReviewDb METHOD_1( ) ) ( if ( ( db ) == null ) ) ( try ) ( end-try ) ( db = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ( end-catch ) ( catch (TYPE_3.OrmException e) ) ( throw new TYPE_2 ( 1 , STRING_1 , e ) ) ( endif ) ( return db ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ) ( TYPE_2 u = util . user ( VAR_3 , VAR_5 ) ) ( METHOD_6 ( STRING_2 , u . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String diff( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) ) ( TYPE_2 VAR_3 = VAR_4 ) ( TYPE_3 VAR_5 = VAR_3 . diff ( VAR_6 , VAR_1 , VAR_2 ) ) ( TYPE_4 VAR_7 = new TYPE_4 ( ) ) ( TYPE_5 VAR_8 = new TYPE_5 ( VAR_7 ) ) ( VAR_8 . format ( VAR_5 , VAR_1 , VAR_2 ) ) ( return VAR_7 . toString ( VAR_9 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) ) ( java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( ) ) ( for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : VAR_3 . METHOD_3 ( )) ) ( endfor ) ( TYPE_3 e = VAR_3 . get ( projectName ) ) ( if ( e == null ) ) ( continue ; ) ( endif ) ( if ( VAR_1 . equals ( e . getProject ( ) . METHOD_4 ( VAR_4 ) ) ) ) ( VAR_2 . add ( VAR_5 . format ( e . getProject ( ) ) ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( insert ( VAR_4 , VAR_1 ) ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( ) ) ( TYPE_4 result = client . METHOD_7 ( VAR_2 ) ) ( if ( ! ( result . METHOD_8 ( ) ) ) ) ( throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_9 ( ) . getId ( ) , VAR_3 , result . METHOD_10 ( ) ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 = notes . getChange ( ) . METHOD_2 ( ) ) ( if ( ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ( com.google.gerrit.reviewdb.client.Account.Id id = METHOD_3 ( ) . getAccountId ( ) ) ( return id . equals ( VAR_1 ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 change( TYPE_2 notes ) ) ( com.google.gerrit.reviewdb.client.Change change = notes . getChange ( ) ) ( TYPE_3 . METHOD_1 ( METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) . equals ( change . getProject ( ) ) , STRING_1 ) ) ( return METHOD_2 ( ) . METHOD_4 ( notes ) . METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , java.lang.String path , TYPE_3 VAR_2 , byte [ ] VAR_3 ) ) ( final org.eclipse.jgit.lib.ObjectId VAR_4 = ( VAR_1 == ( VAR_5 ) ) ? VAR_2 . insert ( VAR_6 , VAR_3 ) : TYPE_5 . METHOD_2 ( repo , rw , base , path ) ) ( return new TYPE_1 ( path ) { public void apply ( TYPE_6 VAR_7 ) { VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; } } ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 a , TYPE_2 . Change change ) ) ( VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ) ( VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ) ( VAR_3 = change . METHOD_5 ( ) ) ( VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ) ( a . status = change . getStatus ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String projectName , java.lang.String VAR_1 ) ) ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ) ( try ) ( end-try ) ( org.junit.Assert.assertEquals ( VAR_1 , repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) ) ( finally ) ( repo . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ) ( METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ) ( METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , java.lang.String id ) ) ( final TYPE_4 user = VAR_2 . get ( ) ) ( if ( user instanceof TYPE_5 ) ) ( throw new TYPE_6 ( STRING_1 ) ) ( endif ) ( if ( ! ( user instanceof TYPE_7 ) ) ) ( throw new TYPE_3 ( id ) ) ( endif ) ( return TYPE_8 . METHOD_1 ( id , VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( void delete( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) ) ( final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ) ( if ( VAR_2 == null ) ) ( throw new TYPE_1 ( STRING_1 ) ) ( endif ) ( METHOD_3 ( VAR_2 ) ) ( if ( ! VAR_1 ) ) ( METHOD_4 ( VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals( com.google.gerrit.reviewdb.server.ReviewDb db , final TYPE_2 rsrc ) ) ( return TYPE_3 . METHOD_1 ( db . METHOD_2 ( ) . METHOD_3 ( rsrc . getChange ( ) . getId ( ) ) , new TYPE_4 < com.google.gerrit.reviewdb.client . PatchSetApproval > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client . PatchSetApproval input ) { return input . getAccountId ( ) . equals ( rsrc . METHOD_4 ( ) . getAccountId ( ) ) ; } } ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 type ) ) ( res . METHOD_2 ( type . METHOD_3 ( ) ) ) ( res . METHOD_4 ( TYPE_4 . name ( ) ) ) ( res . METHOD_5 ( VAR_1 , STRING_1 ) ) ( res . METHOD_5 ( VAR_2 , STRING_2 ) ) ( METHOD_6 ( req , res ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( METHOD_2 ( ) ) ( endif ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_3 ( VAR_2 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { if ( METHOD_4 ( ) ) { display ( r ) ; } } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( for (final TYPE_1 < ? , ? > TYPE_2 : VAR_2) ) ( endfor ) ( VAR_1 . METHOD_2 ( new TYPE_3 ( ) { public void run ( ) { TYPE_2 . METHOD_1 ( ) ; } } ) ) ( VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { TYPE_2 . METHOD_4 ( VAR_3 ) ; } } , INT_1 , VAR_4 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String file , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) ) ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > set = VAR_2 . get ( file ) ) ( if ( set != null ) ) ( set . METHOD_2 ( VAR_1 ) ) ( endif ) ( VAR_2 . put ( file , TYPE_1 . METHOD_3 ( VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( db ) != null ) ) ( try ) ( end-try ) ( for (TYPE_2 w : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) )) ) ( endfor ) ( add ( VAR_1 , w . getAccountId ( ) ) ) ( end-catch ) ( catch (TYPE_3.OrmException err) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( ) ) ( TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ) ( VAR_2 . run ( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_3 ) ( if ( ref == null ) ) ( VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ) ( VAR_4 = VAR_5 . get ( ) ) ( endif ) ( VAR_3 = ref . METHOD_4 ( ) ) ( VAR_4 = METHOD_5 ( rw , VAR_3 ) ) ( return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) && ( ! ( METHOD_7 ( db ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String p ) ) ( TYPE_1 in = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( p ) ) ( if ( in != null ) ) ( METHOD_4 ( in , ( STRING_1 + p ) ) ) ( endif ) ( VAR_2 . error ( ( STRING_2 + p ) ) ) ( CFG Exit )
( CFG Entry ) ( int length( ) ) ( int VAR_1 = 0 ) ( TYPE_1 t = this ) ( while ( t . METHOD_1 ( ) ) ) ( endwhile ) ( VAR_1 ++ ) ( t = ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) . METHOD_3 ( ) ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 . Change change , TYPE_2 . PatchSet patchSet ) ) ( TYPE_3 VAR_2 = VAR_3 . get ( change , patchSet ) ) ( for (TYPE_4 patch : VAR_2 . METHOD_2 ( )) ) ( endfor ) ( if ( ( VAR_4 ) == null ) ) ( VAR_4 = new java.util.ArrayList < TYPE_5 > ( ) ) ( endif ) ( TYPE_5 p = new TYPE_5 ( ) ) ( p . file = patch . METHOD_3 ( ) ) ( p . type = patch . METHOD_4 ( ) ) ( VAR_4 . add ( p ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( boolean VAR_1 ) ) ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( commit . METHOD_2 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) ) ) ) ) ( VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) ) ( VAR_5 . METHOD_2 ( VAR_1 ) ) ( VAR_6 . METHOD_2 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( TYPE_1 . ChangeInfo info = METHOD_3 ( METHOD_4 ( VAR_1 ) ) ) ( java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ) ( com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void topic( java.lang.String topic ) ) ( TYPE_2 in = new TYPE_2 ( ) ) ( in . topic = topic ) ( try ) ( end-try ) ( VAR_1 . apply ( change , in ) ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|java.io.IOException|TYPE_3 e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( try ) ( end-try ) ( for (com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( db , VAR_1 . getId ( ) ) , this ) ) . METHOD_4 ( )) ) ( endfor ) ( if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) ( return true ; ) ( endif ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw new com.google.gwtorm.server.OrmException ( e ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 user( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) ) ( return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , VAR_5 , null , VAR_6 , VAR_7 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.Map < java.lang.String , TYPE_1 . Result > VAR_1 = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) ( METHOD_3 ( VAR_2 , VAR_3 , STRING_5 , project ) ) ( TYPE_2 in = METHOD_4 ( VAR_4 ) ) ( in . branch = STRING_3 ) ( VAR_5 = VAR_1 . get ( STRING_1 ) . getChangeId ( ) ) ( METHOD_5 ( in , VAR_6 class , ( STRING_6 + ( VAR_5 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . Id VAR_2 ) ) ( java.util.List < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( ) ) ( for (TYPE_1 VAR_3 : VAR_1) ) ( endfor ) ( if ( ( TYPE_4 . METHOD_2 ( change . METHOD_3 ( ) . get ( ) , VAR_3 . METHOD_4 ( ) ) ) && ( VAR_2 . equals ( VAR_3 . METHOD_5 ( ) ) ) ) ) ( result . add ( VAR_3 ) ) ( endif ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) ) ( java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ) ( if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) ) ( org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) ) ( METHOD_4 ( STRING_1 ) ) ( METHOD_4 ( STRING_2 ) ) ( java.util.Set < java.lang.String > s = VAR_1 . METHOD_3 ( db ) ) ( assertEquals ( 1 , s . size ( ) ) ) ( METHOD_2 ( s . contains ( STRING_3 ) ) ) ( METHOD_5 ( s . contains ( STRING_4 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 s ) ) ( TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ( s . METHOD_3 ( ) . METHOD_4 ( ) ? s . METHOD_3 ( ) . get ( ) : TYPE_4 . METHOD_2 ( s . METHOD_5 ( ) . getId ( ) ) ) ) ) ( return new TYPE_1 ( VAR_1 , TYPE_4 . METHOD_6 ( VAR_1 , s ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( VAR_1 ) ) ( return true ; ) ( endif ) ( TYPE_1 ui = null ) ( if ( TYPE_2 . METHOD_2 ( ) ) ) ( ui = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ( endif ) ( if ( ui == null ) ) ( ui = TYPE_2 . METHOD_6 ( ) . METHOD_5 ( ) ) ( endif ) ( return ui == ( VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> METHOD_1( TYPE_2 < ? extends TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_1 ) ) ( java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( VAR_1 ) ) ( java.util.Collections . METHOD_1 ( r , VAR_2 ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 ctx ) ) ( user = ctx . METHOD_2 ( ) . METHOD_3 ( ) ) ( notes = ctx . METHOD_4 ( ) ) ( ps = VAR_1 . get ( ctx . METHOD_5 ( ) , ctx . METHOD_4 ( ) , psId ) ) ( boolean VAR_2 = false ) ( VAR_2 |= METHOD_6 ( ctx ) ) ( VAR_2 |= METHOD_7 ( ctx ) ) ( VAR_2 |= METHOD_8 ( ctx ) ) ( if ( VAR_2 ) ) ( ctx . METHOD_9 ( ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 p ) ) ( java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ) ( for (TYPE_2 c : p . METHOD_3 ( )) ) ( endfor ) ( if ( c . METHOD_4 ( ) ) ) ( VAR_1 . add ( VAR_2 . format ( c . getProject ( ) ) ) ) ( VAR_1 . METHOD_5 ( METHOD_1 ( c ) ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( METHOD_2 ( ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . METHOD_3 ( ) ) ( VAR_1 = null ) ( endif ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ( VAR_2 = null ) ( endif ) ( if ( ( VAR_3 ) != null ) ) ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ( VAR_3 = null ) ( endif ) ( TYPE_1 . METHOD_6 ( true ) ) ( TYPE_2 . METHOD_7 ( true ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ) ( com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ) ( METHOD_4 ( STRING_3 ) ) ( METHOD_4 ( STRING_4 ) ) ( METHOD_4 ( STRING_5 , VAR_3 ) ) ( METHOD_4 ( STRING_6 , VAR_4 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( r . METHOD_3 ( ) ) ( r . METHOD_4 ( true ) ) ( TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ) ( TYPE_3 u = util . user ( VAR_1 , VAR_4 ) ) ( METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.PatchSet patchSet , TYPE_1 . NameKey VAR_1 , org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( try ) ( end-try ) ( TYPE_2 . METHOD_2 ( patchSet , VAR_1 , git , rw , db ) ) ( return true ; ) ( end-catch ) ( catch (TYPE_3 e) ) ( return false ; ) ( catch (com.google.gwtorm.server.OrmException|java.io.IOException e) ) ( VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , patchSet . getId ( ) , VAR_1 ) , e ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( boolean VAR_1 ) ) ( if ( VAR_1 ) ) ( METHOD_2 ( res . METHOD_3 ( ) . close ( ) ) ) ( METHOD_4 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ) ( endif ) ( METHOD_2 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ) ( METHOD_4 ( res . METHOD_3 ( ) . close ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void delete( com.google.gerrit.server.query.change.ChangeData cd ) ) ( java.lang.String id = cd . getId ( ) . toString ( ) ) ( try ) ( end-try ) ( if ( cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) ) ( VAR_1 . METHOD_2 ( id ) ) ( commit ( VAR_1 ) ) ( endif ) ( VAR_2 . METHOD_2 ( id ) ) ( commit ( VAR_2 ) ) ( end-catch ) ( catch (TYPE_1 e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_1 . Factory VAR_1 ) ) ( TYPE_2 . METHOD_2 ( ( ( db ) != null ) , STRING_1 ) ) ( if ( ( update ) == null ) ) ( update = VAR_1 . create ( db , METHOD_3 ( ) , VAR_2 , VAR_3 ) . METHOD_4 ( repo , rw , VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 . create ( ) ) ) ( endif ) ( return update ; ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( final TYPE_1 result ) ) ( VAR_1 . METHOD_1 ( false ) ) ( final TYPE_2 . Account me = TYPE_3 . METHOD_2 ( ) ) ( me . METHOD_3 ( VAR_2 ) ) ( me . METHOD_4 ( VAR_3 ) ) ( me . METHOD_5 ( info ) ) ( TYPE_3 . METHOD_6 ( ) ) ( VAR_4 . display ( me ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ) ( java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ) ( int i = 1 ) ( for (i < ( args . length )) ) ( i ++ ) ( endfor ) ( VAR_2 = ( VAR_2 + STRING_1 ) + ( args [ i ] ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ) ( assertEquals ( ( STRING_4 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_4 ) ) ) ( assertEquals ( ( STRING_6 + ( STRING_2 + STRING_7 ) ) , METHOD_2 ( STRING_6 ) ) ) ( assertEquals ( ( STRING_8 + ( STRING_2 + STRING_9 ) ) , METHOD_2 ( STRING_8 ) ) ) ( assertEquals ( ( STRING_10 + ( STRING_2 + STRING_11 ) ) , METHOD_2 ( STRING_10 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( VAR_1 . isEmpty ( ) ) ) ( METHOD_2 ( ) ) ( endif ) ( final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_3 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ) { METHOD_2 ( ) ; } } } ) ( for (final TYPE_3 p : VAR_1) ) ( endfor ) ( p . METHOD_3 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; } } ) ) ( rpc ( VAR_4 class ) ) ( rpc ( VAR_5 class ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> METHOD_1( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) ) ( return VAR_2 . apply ( VAR_1 , rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.Repository METHOD_1( final TYPE_1 . Change change ) ) ( TYPE_2 . NameKey name = change . getProject ( ) ) ( try ) ( end-try ) ( return VAR_1 . METHOD_1 ( name . get ( ) ) ; ) ( end-catch ) ( catch (TYPE_3 err) ) ( VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.PatchSet.Id,com.google.gerrit.reviewdb.client.PatchSetApproval> METHOD_1( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = TYPE_3 . create ( ) ) ( for (com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : TYPE_4 . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) )) ) ( endfor ) ( VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 cm , int line , int VAR_1 ) ) ( int i = 0 ) ( for (i < VAR_1) ) ( i ++ ) ( endfor ) ( cm . METHOD_2 ( ( line + i ) , VAR_2 , VAR_3 . diff ( ) ) ) ( return line + VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 VAR_1 ) ) ( boolean VAR_2 = VAR_1 . METHOD_1 ( STRING_1 ) ) ( display ( VAR_3 , VAR_4 . METHOD_2 ( ) , ( ( VAR_5 . METHOD_3 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_4 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_5 ( ) ) || VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) ) ( VAR_1 . append ( CHAR_1 ) ) ( boolean VAR_3 = true ) ( for (final TYPE_2 VAR_4 : VAR_2) ) ( endfor ) ( if ( VAR_3 ) ) ( VAR_3 = false ) ( endif ) ( VAR_1 . append ( CHAR_2 ) ) ( if ( VAR_4 != null ) ) ( VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ) ( endif ) ( VAR_1 . append ( VAR_6 ) ) ( VAR_1 . append ( CHAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( TYPE_2 c = METHOD_2 ( branch ) ) ( if ( c != null ) ) ( ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) ) ( METHOD_5 ( branch , c ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; result . METHOD_4 ( p ) ; TYPE_6 . METHOD_5 ( p ) ; } } ) ) ( close ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 schema = METHOD_2 ( ) ) ( METHOD_3 ( schema . METHOD_4 ( ) ) ) ( assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ) ( assertEquals ( 1 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( java.lang.String changeId ) ) ( java.util.Collections . METHOD_2 ( VAR_1 ) ) ( TYPE_3 VAR_2 = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ) ( return VAR_2 . to ( git , STRING_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ) ( METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ) ( assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 1 ) ) , in . METHOD_6 ( 0 ) ) , out . METHOD_7 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( TYPE_2 in = new TYPE_2 ( ) ) ( in . revision = revision ) ( VAR_1 . projects ( ) . name ( project . getProject ( ) . METHOD_1 ( ) . get ( ) ) . branch ( name ) . create ( in ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw METHOD_2 ( e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( final TYPE_3 < TYPE_4 . ReviewDb > VAR_2 = VAR_1 . METHOD_3 ( ) ) ( final TYPE_5 VAR_3 = VAR_1 . METHOD_4 ( ) ) ( final TYPE_6 config = VAR_1 . METHOD_5 ( ) ) ( return new TYPE_7 ( VAR_2 , VAR_3 , config ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String err , java.lang.Exception e ) ) ( if ( VAR_1 ) ) ( if ( e == null ) ) ( VAR_2 . error ( err ) ) ( endif ) ( VAR_2 . error ( err , e ) ) ( return TYPE_2 . METHOD_2 ( ) ; ) ( endif ) ( return TYPE_1 . error ( err ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ) ( modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ) ( modules.add ( new TYPE_3 ( ) ) ) ( modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ) ( if ( ( VAR_5 ) == ( VAR_6 ) ) ) ( modules.add ( new TYPE_5 ( ) ) ) ( endif ) ( return VAR_1 . METHOD_3 ( modules ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final short VAR_2 , final short VAR_3 ) ) ( final int n = VAR_1 . METHOD_2 ( ) ) ( int i = 0 ) ( for (i < n) ) ( i ++ ) ( endfor ) ( if ( ( TYPE_2 . METHOD_3 ( VAR_1 . getValue ( i ) ) ) == VAR_3 ) ) ( VAR_1 . METHOD_4 ( i ) ) ( return ; ) ( endif ) ( if ( VAR_3 != VAR_2 ) ) ( METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 ) ) ( final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ) ( if ( ( METHOD_2 ( ) ) && ( user . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ( new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ) ( endif ) ( VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 rsrc ) ) ( TYPE_1 msg = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( rsrc . getChange ( ) . getId ( ) ) . METHOD_7 ( ) ) , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . METHOD_8 ( ) ) == null ; } } ) , null ) ) ( return msg ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final org.eclipse.jgit.lib.Repository VAR_1 ) ) ( TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( if ( ! ( METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) ) ) ( throw new TYPE_1 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) ) ( endif ) ( METHOD_6 ( VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) ( try ) ( end-try ) ( TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ) ( TYPE_4 VAR_4 = VAR_3 . METHOD_4 ( ) ) ( return VAR_4 . getValue ( VAR_5 ) ; ) ( finally ) ( VAR_2 . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 . METHOD_1 ( ) ) ( if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( VAR_4 ) ) ) ( TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 ) ) ( VAR_7 . set ( VAR_8 . create ( null , VAR_5 ) . METHOD_3 ( INT_1 , VAR_9 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( endif ) ( VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) ) ( return false ; ) ( endif ) ( if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_4 ( db , cd ) ) ) ) ) ( return false ; ) ( endif ) ( return METHOD_5 ( ) . METHOD_1 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 type( TYPE_2 VAR_1 , java.lang.String VAR_2 ) ) ( if ( ( VAR_1 . METHOD_1 ( VAR_2 ) ) != null ) ) ( return VAR_1 . METHOD_1 ( VAR_2 ) ; ) ( endif ) ( for (TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( )) ) ( endfor ) ( if ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) ( return VAR_3 ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String[] METHOD_1( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String name ) ) ( java.lang.String [ ] VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , name ) ) ( if ( VAR_3 != null ) ) ( return VAR_3 ; ) ( endif ) ( return super . METHOD_1 ( VAR_1 , VAR_2 , name ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( file . set ( id , VAR_1 ) ) ( file . METHOD_2 ( VAR_2 ) ) ( file . METHOD_3 ( VAR_2 . isEmpty ( ) ) ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ( VAR_4 . METHOD_3 ( false ) ) ( TYPE_1 . get ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_1 . METHOD_6 ( true ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 . Change c ) ) ( final TYPE_3 commit = VAR_1 . get ( c . getId ( ) ) ) ( final TYPE_4 s = ( commit != null ) ? VAR_2 : null ) ( boolean VAR_3 = false ) ( if ( ( s != null ) && ( ( ( s . equals ( VAR_4 ) ) || ( s . equals ( VAR_5 ) ) ) || ( s . equals ( VAR_6 ) ) ) ) ) ( VAR_3 = true ) ( endif ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey name , java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) ) ( TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( name . get ( ) ) ) ( if ( VAR_4 != null ) ) ( TYPE_2 VAR_6 = VAR_7 ) ( if ( VAR_6 != null ) ) ( TYPE_3 VAR_8 = VAR_6 . METHOD_3 ( ) ) ( if ( VAR_8 != null ) ) ( VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) ( endif ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) ) ( final TYPE_5 group = VAR_3 . get ( VAR_2 ) ) ( if ( group == null ) ) ( throw new TYPE_4 ( VAR_2 ) ) ( endif ) ( return new TYPE_1 ( VAR_1 , group ) ; ) ( CFG Exit )
( CFG Entry ) ( void status( int VAR_1 ) ) ( if ( VAR_1 == ( VAR_2 ) ) ) ( java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ) ( VAR_3 . append ( VAR_4 ) ) ( VAR_3 . append ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) ) ) ( METHOD_1 ( VAR_6 , VAR_3 . toString ( ) ) ) ( endif ) ( if ( METHOD_2 ( VAR_6 ) ) ) ( METHOD_1 ( VAR_6 , null ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ) ( long VAR_2 = ( VAR_1 . METHOD_3 ( ) ) + 1 ) ( TYPE_2 result = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 , VAR_1 . METHOD_6 ( ) ) ) ( org.junit.Assert.assertEquals ( TYPE_3 . METHOD_7 ( STRING_1 ) , result . METHOD_8 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) ) ( this . VAR_1 = walk . METHOD_2 ( ) ) ( try ) ( end-try ) ( revision = ( id != null ) ? walk . parseCommit ( id ) : null ) ( METHOD_3 ( ) ) ( finally ) ( VAR_1 = null ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String name ) ) ( try ) ( end-try ) ( TYPE_2 p = METHOD_2 ( name ) ) ( return VAR_1 . get ( p , METHOD_3 ( name , p ) ) ; ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( boolean VAR_1 ) ) ( VAR_2 = VAR_1 ) ( TYPE_1 . METHOD_1 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ) ) ( TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ) ( if ( VAR_1 ) ) ( VAR_5 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ) ( endif ) ( VAR_5 . METHOD_7 ( VAR_6 . METHOD_6 ( ) ) ) ( VAR_3 . METHOD_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 . NameKey branch ) ) ( final TYPE_4 p = VAR_1 . get ( branch . getParentKey ( ) ) ) ( if ( p == null ) ) ( throw new TYPE_3 ( branch . getParentKey ( ) ) ) ( endif ) ( return p . METHOD_1 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1[] METHOD_1( TYPE_2 cfg ) ) ( TYPE_1 c = new TYPE_3 ( ) ) ( c . METHOD_2 ( null ) ) ( c . METHOD_3 ( cfg . METHOD_4 ( STRING_1 , null , STRING_2 , INT_1 ) ) ) ( c . METHOD_5 ( false ) ) ( return new TYPE_1 [ ] { c } ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) ) ( TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( db , change . change ( ) , user ( admin ) ) ) ( com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) . isEmpty ( ) ) . isEqualTo ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = null ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ( for (final TYPE_2 VAR_4 : VAR_5) ) ( endfor ) ( VAR_4 . METHOD_3 ( ) ) ( TYPE_3 . METHOD_4 ( ) ) ( if ( ( VAR_6 ) != null ) ) ( VAR_6 . METHOD_3 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( db , TYPE_1 . of ( user . email , admin . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ) ( com.google.common.truth.Truth.assertThat ( reviewers ) . METHOD_4 ( user . id ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( STRING_1 , new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } . METHOD_3 ( ) ) ) ( org.junit.Assert.assertEquals ( 1 , res . size ( ) ) ) ( TYPE_1 d = res . get ( STRING_2 ) ) ( METHOD_4 ( STRING_3 , d ) ) ( org.junit.Assert.assertEquals ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , d . name ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( VAR_1 = METHOD_2 ( VAR_2 class ) ) ( bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ) ( VAR_3 = METHOD_2 ( VAR_4 class ) ) ( bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ) ( VAR_5 = METHOD_2 ( VAR_6 class ) ) ( bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ) ( bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final java.lang.String email ) ) ( try ) ( end-try ) ( final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( java.util.List < com.google.gerrit.reviewdb.client.Account > VAR_1 = db . METHOD_3 ( ) . METHOD_1 ( email ) . METHOD_4 ( ) ) ( return ( VAR_1 . size ( ) ) == 1 ? auth ( VAR_1 . get ( 0 ) ) : null ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( METHOD_5 ( ) . log ( STRING_1 , e ) ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 info ) ) ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ) ( if ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) ) ( VAR_1 . append ( info . status ( ) ) ) ( endif ) ( VAR_1 . METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.lib.ObjectId VAR_1 , TYPE_1 VAR_2 ) ) ( TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ) ( TYPE_4 out = new TYPE_4 ( VAR_3 ) ) ( try ) ( end-try ) ( git . METHOD_3 ( VAR_1 ) . METHOD_4 ( out ) ) ( finally ) ( out . close ( ) ) ( end-finally ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) ) ( try ) ( end-try ) ( if ( ! ( path . isEmpty ( ) ) ) ) ( diff . METHOD_2 ( TYPE_3 . create ( path ) ) ) ( endif ) ( diff . METHOD_3 ( repo ) ) ( diff . METHOD_4 ( true ) ) ( diff . format ( VAR_1 , VAR_2 ) ) ( finally ) ( diff . METHOD_5 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo METHOD_1( final TYPE_2 . Change VAR_1 , java.util.Map < TYPE_3 . Id , TYPE_4 . Id > VAR_2 ) ) ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( TYPE_1 . ChangeInfo VAR_4 ) ( if ( VAR_2 == null ) ) ( VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 ) ) ( endif ) ( VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 , VAR_2 . get ( VAR_1 . getId ( ) ) ) ) ( VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 ) ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 ) ( java.lang.String VAR_2 = ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ) ( org.junit.Assert.assertEquals ( VAR_5 . format ( null , null , null , null , cfg , VAR_1 ) , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Project.NameKey p , boolean VAR_1 ) ) ( org.eclipse.jgit.lib.Repository repo = ( VAR_1 ) ? VAR_2 . METHOD_2 ( p ) : VAR_2 . METHOD_3 ( p ) ) ( TYPE_2 VAR_3 = repo . METHOD_4 ( ) ) ( return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_5 ( ) ) , VAR_3 , new TYPE_3 ( ) , true ) ; ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 info ) ) ( if ( info . METHOD_1 ( ) ) ) ( TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) , STRING_1 ) ) ( endif ) ( if ( info . METHOD_3 ( ) ) ) ( TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) , STRING_2 ) ) ( endif ) ( if ( info . METHOD_4 ( ) ) ) ( TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) , STRING_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b . isEmpty ( ) ) ) ( METHOD_3 ( b . METHOD_4 ( ) ) ) ( assertEquals ( STRING_1 , b . METHOD_5 ( ) ) ) ( b . append ( STRING_2 ) ) ( METHOD_2 ( b . METHOD_4 ( ) ) ) ( assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 in , TYPE_2 < ? extends TYPE_3 > VAR_1 ) ) ( VAR_2 . projects ( ) . create ( in ) ) ( org.junit.Assert . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( VAR_1 ) ) ( METHOD_5 ( INT_1 ) ) ( TYPE_4 VAR_4 ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > patchSets , final com.google.gerrit.reviewdb.client.Change change ) ) ( for (com.google.gerrit.reviewdb.client.PatchSet patchSet : patchSets) ) ( endfor ) ( db . METHOD_2 ( ) . delete ( db . METHOD_2 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ) ( db . METHOD_4 ( ) . delete ( db . METHOD_4 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ) ( db . patchSets ( ) . delete ( java.util.Collections.singleton ( patchSet ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 ... VAR_1 ) ) ( TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ) ( METHOD_3 ( VAR_3 ) ) ( VAR_4 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ) ( VAR_5 . METHOD_6 ( ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String toString( ) ) ( java.lang.String VAR_1 = TYPE_1 . METHOD_1 ( user ) ) ( if ( ( VAR_1 . METHOD_2 ( CHAR_1 ) ) < 0 ) ) ( return ( ( VAR_2 ) + STRING_1 ) + VAR_1 ; ) ( endif ) ( return ( ( ( VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res ) ) ( TYPE_3 VAR_1 = METHOD_2 ( req ) ) ( res . METHOD_3 ( VAR_2 ) ) ( res . METHOD_4 ( STRING_1 ) ) ( res . METHOD_5 ( ( ( int ) ( VAR_1 . length ( ) ) ) ) ) ( TYPE_4 out = res . METHOD_6 ( ) ) ( TYPE_5 in = new TYPE_6 ( VAR_1 ) ) ( try ) ( end-try ) ( TYPE_7 . METHOD_7 ( in , out ) ) ( finally ) ( in . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String VAR_1 , final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) ) ( final java.lang.StringBuilder url = new java.lang.StringBuilder ( ) ) ( url . append ( req . METHOD_2 ( ) ) ) ( url . append ( CHAR_1 ) ) ( url . append ( CHAR_2 ) ) ( url . append ( VAR_1 ) ) ( rsp . METHOD_3 ( url . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 . METHOD_2 ( ( ( VAR_2 ) != null ) , STRING_1 ) ) ( int VAR_3 = ( VAR_2 . isEmpty ( ) ) ? 1 : ( VAR_2 . size ( ) ) + 1 ) ( TYPE_1 . Id VAR_4 = new TYPE_1 . Id ( VAR_5 , VAR_3 ) ) ( TYPE_1 key = new TYPE_3 ( ) . create ( VAR_4 , VAR_1 ) ) ( VAR_2 . add ( TYPE_4 . of ( key ) ) ) ( return key ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) ) ( METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ) ( TYPE_1 u = user ( ) ) ( METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ) ( METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_5 ) . METHOD_6 ( ) ) ) ( METHOD_7 ( STRING_6 , u . METHOD_5 ( STRING_7 ) . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( VAR_2 ) ) ( end-try ) ( com.google.common.truth.Truth.assertThat ( repo ) . METHOD_5 ( ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( project , STRING_1 ) ) ( java.lang.String master = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ) ( METHOD_3 ( STRING_1 ) ) ( METHOD_5 ( user ) ) ( TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_3 , STRING_4 , false ) , TYPE_3 . branch ( STRING_2 , master , false ) ) , METHOD_7 ( ) . get ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . Result r , int VAR_1 ) ) ( TYPE_2 . ChangeInfo c = get ( r . getChangeId ( ) , VAR_2 ) ) ( TYPE_3 VAR_3 = VAR_4 . get ( STRING_1 ) ) ( org.junit.Assert.assertEquals ( 1 , VAR_5 . size ( ) ) ) ( org.junit.Assert.assertEquals ( STRING_2 , VAR_5 . get ( 0 ) . name ) ) ( org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( 0 ) . value . METHOD_2 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) ) ( for (TYPE_3 VAR_3 : VAR_2) ) ( endfor ) ( if ( ( VAR_4 ) == ( TYPE_4 . METHOD_2 ( VAR_5 ) ) ) ) ( if ( ( VAR_6 ) == null ) ) ( VAR_6 = new java.util.ArrayList < > ( ) ) ( endif ) ( VAR_6 . add ( METHOD_3 ( VAR_3 ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( int VAR_1 = ( TYPE_1 . METHOD_1 ( ) ) - ( ( TYPE_2 . METHOD_2 ( ) ) + INT_1 ) ) ( VAR_2 . METHOD_3 ( VAR_1 ) ) ( VAR_3 . METHOD_3 ( VAR_1 ) ) ( METHOD_4 ( diff ) ) ( VAR_4 . METHOD_4 ( VAR_5 ) ) ( if ( VAR_6 . METHOD_5 ( ) ) ) ( VAR_4 . METHOD_6 ( true ) ) ( endif ) ( VAR_7 . METHOD_4 ( VAR_6 . METHOD_7 ( ) , diff ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 notes , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 ... VAR_3 ) ) ( java.util.List < TYPE_3 > VAR_4 = new java.util.ArrayList ( ( 1 + ( VAR_3 . length ) ) ) ) ( VAR_4 . add ( VAR_2 ) ) ( VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_5 . METHOD_4 ( METHOD_5 ( notes ) , VAR_1 ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_4 ) . METHOD_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( 0 <= ( VAR_1 ) ) && ( ( VAR_1 ) < ( table . METHOD_2 ( ) ) ) ) ) ( final TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ) ( if ( VAR_2 != null ) ) ( METHOD_4 ( VAR_2 ) ) ( endif ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.Result METHOD_1( ) ) ( TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ) ( VAR_2 . run ( ) ) ( org.eclipse.jgit.lib.ObjectId VAR_3 ) ( if ( ref == null ) ) ( VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ) ( VAR_4 = VAR_5 . get ( ) ) ( endif ) ( VAR_3 = ref . METHOD_4 ( ) ) ( VAR_4 = METHOD_5 ( VAR_3 ) ) ( return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) ) ( TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ) ( if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) ) ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) ( return ; ) ( endif ) ( TYPE_7 rsp = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) ( if ( METHOD_3 ( req , rsp ) ) ) ( VAR_3 . METHOD_1 ( req , rsp ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 VAR_1 , TYPE_3 input ) ) ( TYPE_7 in = new TYPE_7 ( ) ) ( VAR_2 = id ) ( java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ) ( if ( ( VAR_3 . size ( ) ) == 1 ) ) ( return VAR_3 . get ( 0 ) ; ) ( endif ) ( throw new TYPE_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 a = new TYPE_1 ( VAR_1 , STRING_2 ) ) ( assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData METHOD_1( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) ) ( com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , id ) ) ( VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData METHOD_1( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) ) ( com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , id ) ) ( VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 p = new TYPE_1 ( ) ) ( p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ) ( p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ) ( db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) ) ( VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( admin . email ) ) + STRING_2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ) ( TYPE_2 VAR_3 = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ) ( TYPE_3 . METHOD_6 ( new TYPE_4 ( admin . id ) , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.lib.ObjectId METHOD_1( ) ) ( TYPE_3 < TYPE_4 > edit = VAR_1 . METHOD_2 ( change ) ) ( if ( edit . METHOD_3 ( ) ) ) ( return edit . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; ) ( endif ) ( throw new TYPE_2 ( change.getId ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( com.google.gerrit.reviewdb.client.Project.NameKey name , org.eclipse.jgit.lib.Repository VAR_1 , TYPE_2 user , TYPE_3 VAR_2 ) ) ( TYPE_1 VAR_3 = factory . create ( name , VAR_1 , VAR_2 ) ) ( VAR_3 . METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( user ) ) ) ( VAR_3 . METHOD_1 ( ) . METHOD_4 ( VAR_4 ) ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( ) ) ( java.util.Map < TYPE_2 , byte [ ] > VAR_1 = new TYPE_3 < > ( ) ) ( VAR_1 . put ( new TYPE_2 ( repo . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) , null ) ) ( return TYPE_4 . METHOD_4 ( repo , STRING_2 , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( db . create ( ) ) ( final TYPE_2 config = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , VAR_2 , 1 , 2 ) ) ( METHOD_3 ( VAR_1 , VAR_3 , ( - 1 ) , 1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) ) ) ) ( assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ) ( try ) ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) ( end-try ) ( org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ) ( if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , repo , commit ) ) ) ) ( throw new TYPE_2 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String msg , TYPE_1 t ) ) ( if ( VAR_1 . METHOD_2 ( ) ) ) ( if ( t != null ) ) ( VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ) ( endif ) ( VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> get( final TYPE_3 < TYPE_4 > VAR_1 ) ) ( final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ) ( for (final TYPE_4 key : VAR_1) ) ( endfor ) ( final TYPE_2 VAR_2 = get ( key ) ) ( if ( VAR_2 != null ) ) ( r . add ( VAR_2 ) ) ( endif ) ( return new TYPE_5 < TYPE_2 > ( r ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 ) ) ( final int n = VAR_1 . METHOD_2 ( ) ) ( int i = 0 ) ( for (i < n) ) ( i ++ ) ( endfor ) ( if ( VAR_1 . getValue ( i ) . equals ( VAR_3 ) ) ) ( VAR_1 . METHOD_3 ( i ) ) ( return ; ) ( endif ) ( if ( VAR_3 != VAR_2 ) ) ( METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ) ( VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change . Id id ) ) ( com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( id ) ) ( if ( c == null ) ) ( c = db . changes ( ) . get ( id ) ) ( endif ) ( TYPE_2 notes = VAR_2 . METHOD_2 ( c ) ) ( TYPE_1 ctx = new TYPE_1 ( VAR_3 . METHOD_3 ( notes , user ) , new TYPE_3 ( db ) ) ) ( if ( VAR_4 . METHOD_4 ( ) ) ) ( ctx . METHOD_5 ( ) . METHOD_6 ( ) ) ( endif ) ( return ctx ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) != null ) ) ( TYPE_1 . METHOD_2 ( this , VAR_1 ) ) ( endif ) ( TYPE_1 . METHOD_3 ( this ) ) ( TYPE_2 . METHOD_4 ( new TYPE_3 ( this ) ) ) ( TYPE_1 . METHOD_5 ( null ) ) ( METHOD_6 ( ) ) ( if ( ( VAR_2 ) != null ) ) ( TYPE_4 . set ( VAR_2 ) ) ( VAR_3 = true ) ( endif ) ( TYPE_4 . METHOD_7 ( ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<java.lang.String> METHOD_1( ) ) ( java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( ) ) ( java.lang.String [ ] VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ) ( if ( VAR_2 != null ) ) ( for (java.lang.String VAR_3 : VAR_2) ) ( endfor ) ( java.lang.String VAR_4 = VAR_3 . METHOD_5 ( 0 , ( ( VAR_3 . length ( ) ) - ( TYPE_3 . length ( ) ) ) ) ) ( VAR_1 . add ( VAR_4 ) ) ( endif ) ( return VAR_1 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) ) ( TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = TYPE_4 . schema ( VAR_2 ) ) ( if ( schema . METHOD_2 ( VAR_3 ) ) ) ( return query ( TYPE_4 . METHOD_3 ( branch , TYPE_4 . METHOD_4 ( schema , VAR_1 ) ) ) ; ) ( endif ) ( return METHOD_1 ( schema , branch , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int line ) ) ( int VAR_1 = METHOD_2 ( ) ) ( if ( ( METHOD_3 ( ( VAR_1 - INT_1 ) ) ) < line ) ) ( METHOD_4 ( ( ( METHOD_5 ( line , STRING_1 ) ) - ( FLOAT_1 * VAR_1 ) ) ) ) ( endif ) ( METHOD_6 ( TYPE_1 . create ( line ) ) ) ( CFG Exit )
( CFG Entry ) ( void update( ) ) ( try ) ( end-try ) ( schema = VAR_1 . METHOD_1 ( ) ) ( METHOD_2 ( ) ) ( METHOD_3 ( VAR_2 , rw , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ) ( finally ) ( if ( ( schema ) != null ) ) ( schema . close ( ) ) ( schema = null ) ( endif ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( final com.google.gerrit.reviewdb.client.Change . Status status ) ) ( if ( status == null ) ) ( return STRING_1 ; ) ( endif ) ( switch ( status ) ) ( end-switch ) ( case VAR_1 : ) ( return TYPE_1 . METHOD_2 ( ) ; ) ( case VAR_2 : ) ( return TYPE_1 . METHOD_3 ( ) ; ) ( case VAR_3 : ) ( return TYPE_1 . METHOD_4 ( ) ; ) ( case VAR_4 : ) ( return TYPE_1 . METHOD_5 ( ) ; ) ( case VAR_5 : ) ( return TYPE_1 . METHOD_6 ( ) ; ) ( default : ) ( return status . name ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse rsp ) ) ( byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ) ( rsp . METHOD_3 ( VAR_3 , INT_1 ) ) ( rsp . METHOD_4 ( VAR_4 , STRING_1 ) ) ( rsp . METHOD_4 ( VAR_5 , STRING_2 ) ) ( rsp . METHOD_5 ( STRING_3 ) ) ( rsp . METHOD_6 ( VAR_2 . length ) ) ( final TYPE_3 out = rsp . METHOD_7 ( ) ) ( try ) ( end-try ) ( out . METHOD_8 ( VAR_2 ) ) ( finally ) ( out . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . Id me , final TYPE_2 . ReviewDb db ) ) ( final TYPE_3 c = server . METHOD_2 ( ) ) ( final TYPE_2 . Account a = TYPE_4 . METHOD_3 ( ) . get ( me , db ) ) ( if ( ( a != null ) && ( ( a . METHOD_4 ( ) ) != null ) ) ) ( c . METHOD_5 ( a . METHOD_4 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( db , java.util.Collections.singleton ( user . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ) ( com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String name = name ( STRING_1 ) ) ( com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) ) ( org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ) ( VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ) ( VAR_4 . METHOD_3 ( name , STRING_2 , new java.lang.String [ ] { } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) ) ( TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ) ( TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ) ( try ) ( end-try ) ( VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ) ( finally ) ( METHOD_5 ( VAR_4 ) ) ( METHOD_6 ( VAR_2 ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( ! ( METHOD_2 ( ) ) ) ) ( return false ; ) ( endif ) ( if ( METHOD_3 ( ) ) ) ( return true ; ) ( endif ) ( switch ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ( end-switch ) ( case VAR_1 : ) ( return false ; ) ( case VAR_2 : ) ( case VAR_3 : ) ( case VAR_4 : ) ( case VAR_5 : ) ( case VAR_6 : ) ( default : ) ( return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( switch ( status ) ) ( end-switch ) ( case VAR_1 : ) ( return new TYPE_2 ( project , STRING_1 ) ; ) ( case VAR_2 : ) ( return new TYPE_3 ( project , STRING_1 ) ; ) ( case VAR_3 : ) ( case VAR_4 : ) ( default : ) ( return new TYPE_4 ( project , STRING_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change change ) ) ( return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) , null ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ) ( if ( VAR_1 == null ) ) ( return false ; ) ( endif ) ( TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ) ( return VAR_3 . METHOD_2 ( db , change ) . METHOD_3 ( db ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) ) ( final org.eclipse.jgit.lib.Repository git ) ( try ) ( end-try ) ( git = VAR_1 . METHOD_2 ( project ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( return ; ) ( try ) ( end-try ) ( TYPE_4 notes = VAR_2 . create ( db , git ) ) ( notes . create ( changes , null , STRING_1 , VAR_3 ) ) ( finally ) ( git . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( endif ) ( VAR_1 . METHOD_4 ( rsrc ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) ) ( TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 ) ) ( try ) ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , TYPE_7 . METHOD_4 ( ) ) ) ( end-try ) ( u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ) ( return VAR_4 . change ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 notes , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 , int value ) ) ( if ( METHOD_2 ( notes , VAR_1 , VAR_2 , value ) ) ) ( return true ; ) ( endif ) ( return VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( TYPE_2 req , org.eclipse.jgit.lib.Repository repo ) ) ( TYPE_5 VAR_1 = TYPE_6 . METHOD_1 ( req ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ( throw new TYPE_3 ( ) ) ( endif ) ( TYPE_1 VAR_2 = new TYPE_1 ( repo ) ) ( VAR_2 . METHOD_3 ( VAR_3 ) ) ( if ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) ( VAR_2 . METHOD_5 ( new TYPE_7 ( repo , VAR_1 , db . get ( ) ) ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) ) ( if ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) ) ( return false ; ) ( endif ) ( if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) >= ( VAR_4 ) ) ) ( METHOD_5 ( VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void bind( TYPE_1 t , TYPE_2 VAR_1 ) ) ( if ( t . METHOD_1 ( ) ) ) ( TYPE_3 VAR_2 = ( ( TYPE_3 ) ( t ) ) ) ( if ( ( VAR_3 ) >= ( this . VAR_4 ) ) ) ( VAR_5 = this ) ( if ( ( VAR_3 ) < ( VAR_6 ) ) ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( endif ) ( return ; ) ( endif ) ( endif ) ( VAR_7 = t ) ( if ( ( VAR_4 ) < ( VAR_6 ) ) ) ( VAR_1 . METHOD_2 ( this ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 in = new TYPE_1 ( ) ) ( in . name = VAR_1 ) ( VAR_2 = true ) ( VAR_3 . projects ( ) . create ( in ) ) ( METHOD_2 ( VAR_1 , STRING_2 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . METHOD_5 ( ) ) ( return VAR_1 . contains ( METHOD_2 ( ) . getAccountId ( ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = new TYPE_1 ( ) ) ( endif ) ( VAR_1 . METHOD_2 ( ) ) ( VAR_1 . METHOD_3 ( new TYPE_2 ( ) { public void run ( ) { VAR_2 this . METHOD_4 ( ) ; } } , INT_1 , ( ( VAR_3 ) * INT_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( ! ( METHOD_2 ( ) ) ) ) ( return false ; ) ( endif ) ( if ( METHOD_3 ( ) ) ) ( return true ; ) ( endif ) ( switch ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ( end-switch ) ( case VAR_1 : ) ( return false ; ) ( case VAR_2 : ) ( case VAR_3 : ) ( case VAR_4 : ) ( case VAR_5 : ) ( case VAR_6 : ) ( default : ) ( return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( endif ) ( VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) ) ( return TYPE_1 . METHOD_3 ( STRING_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.server.query.change.ChangeData change( java.lang.String ... VAR_1 ) ) ( TYPE_1 . METHOD_1 ( VAR_1 ) ) ( com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ) ) ( cd . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) ( return cd ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 cfg = new TYPE_1 ( ) ) ( cfg . METHOD_2 ( STRING_1 , null , STRING_2 , INT_1 ) ) ( cfg . METHOD_2 ( STRING_1 , null , STRING_3 , ( ( int ) ( FLOAT_1 ) ) ) ) ( bind ( VAR_1 class ) . METHOD_3 ( new TYPE_2 ( null , null , null , null , null , null , cfg ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( java.util.List < TYPE_2 > VAR_1 ) ) ( if ( VAR_1 . isEmpty ( ) ) ) ( return null ; ) ( endif ) ( return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this : : METHOD_4 ) . collect ( TYPE_3 . METHOD_5 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result r = METHOD_2 ( ) ) ( TYPE_2 in = new TYPE_2 ( ) ) ( VAR_1 = user . email ) ( VAR_2 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( in ) ) ( com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( METHOD_3 ( r . getChangeId ( ) ) ) ) ) . METHOD_4 ( TYPE_4 . of ( user . id ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 + STRING_2 ) ( repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ) ( java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ) ( org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ) ) ( org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_9 + STRING_10 ) ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . in ( VAR_2 class ) ) ( bind ( VAR_3 . ReviewDb class ) . METHOD_2 ( VAR_4 class ) ) ( bind ( VAR_5 class ) . in ( VAR_6 ) ) ( bind ( VAR_7 class ) ) ( bind ( VAR_8 . Factory class ) . in ( VAR_6 ) ) ( bind ( VAR_9 . Factory class ) . in ( VAR_6 ) ) ( bind ( VAR_10 . Factory class ) . in ( VAR_6 ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , final TYPE_1 VAR_1 ) ) ( return db . changes ( ) . METHOD_2 ( change.getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_3 ( ) ) { change . METHOD_4 ( VAR_2 ) ; change . METHOD_5 ( VAR_1 ) ; return change ; } return null ; } } ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final TYPE_4 VAR_1 = METHOD_2 ( ) ) ( VAR_1 . put ( VAR_2 , VAR_3 ) ) ( VAR_1 . put ( VAR_4 , VAR_5 ) ) ( if ( STRING_1 . equals ( VAR_3 ) ) ) ( return METHOD_3 ( VAR_1 ) ; ) ( endif ) ( if ( ( VAR_6 ) != null ) ) ( VAR_1 . put ( VAR_7 , VAR_6 ) ) ( VAR_1 . put ( VAR_8 , VAR_9 ) ) ( endif ) ( return new TYPE_5 ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Change . Id changeId ) ) ( com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ) ( if ( c == null ) ) ( throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ) ( endif ) ( return VAR_1 . create ( db . get ( ) , c ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final TYPE_2 < ? > VAR_2 , final java.lang.String name ) ) ( final TYPE_3 in = TYPE_4 . METHOD_2 ( VAR_2 , name ) ) ( if ( in != null ) ) ( TYPE_5 VAR_3 = TYPE_6 . METHOD_3 ( in , INT_1 ) ) ( TYPE_4 . METHOD_4 ( VAR_1 , VAR_3 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 e ) ) ( TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 p ) { TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) ; } } ) ) ( close ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( boolean VAR_1 ) ) ( java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ) ( java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ) ( TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 , false ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( ) ) ( TYPE_1 res = METHOD_3 ( STRING_1 ) ) ( org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( id ( STRING_4 ) ) ) + STRING_5 ) , res . METHOD_4 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( getValue ( ) ) < 0 ) ) ( return TYPE_1 . toString ( getValue ( ) ) ; ) ( endif ) ( if ( ( getValue ( ) ) == 0 ) ) ( return STRING_1 ; ) ( endif ) ( return STRING_2 + ( TYPE_1 . toString ( getValue ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 < ? > c ) ) ( java.lang.String n = c . getName ( ) ) ( n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) ( while ( n . METHOD_4 ( STRING_1 ) ) ) ( endwhile ) ( n = n . METHOD_2 ( 1 ) ) ( return TYPE_2 . METHOD_5 ( n ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 p = VAR_1 . METHOD_2 ( ) ) ( TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ) ( endif ) ( if ( ( VAR_3 ) != null ) ) ( VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 VAR_1 , final boolean VAR_2 , final TYPE_3 VAR_3 , final java.util.List < TYPE_4 > VAR_4 ) ) ( VAR_5 = db . METHOD_2 ( ) ) ( try ) ( end-try ) ( return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; ) ( finally ) ( VAR_5 . METHOD_4 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 , boolean VAR_2 ) ) ( while ( i . METHOD_2 ( ) ) ) ( endwhile ) ( final TYPE_2 c = i . METHOD_3 ( ) ) ( if ( ( c . METHOD_4 ( ) ) == ( VAR_3 ) ) ) ( METHOD_5 ( row ) ) ( endif ) ( METHOD_6 ( row ) ) ( METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) , VAR_2 ) ) ( row ++ ) ( return row ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String input ) ) ( java.lang.String VAR_1 = VAR_2 . METHOD_1 ( input , VAR_3 ) ) ( if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) ) ( throw new TYPE_2 ( ( ( ( STRING_1 + ( toString ( ) ) ) + STRING_2 ) + VAR_1 ) ) ) ( endif ) ( java.lang.String result = new TYPE_3 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_3 , VAR_1 ) . append ( TYPE_4 . METHOD_5 ( input ) ) . METHOD_6 ( ) . METHOD_7 ( ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) ) ( int VAR_3 = VAR_1 . METHOD_2 ( ) ) ( return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 . NameKey ( VAR_2 . getName ( ) ) ) . METHOD_5 ( new TYPE_4 . Id ( VAR_3 ) ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) . METHOD_10 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2> METHOD_1( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) ) ( if ( ( VAR_1 . size ( ) ) != 1 ) ) ( throw new TYPE_4 ( STRING_1 ) ) ( endif ) ( return new TYPE_5 < TYPE_2 > ( getName ( ) , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String apply( TYPE_1 rsrc ) ) ( TYPE_3 VAR_1 = VAR_2 . get ( ) ) ( if ( VAR_1 == null ) ) ( throw new TYPE_2 ( ) ) ( endif ) ( java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) ) ) ( if ( TYPE_4 . METHOD_3 ( url ) ) ) ( throw new TYPE_2 ( ) ) ( endif ) ( return url ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.String VAR_1 , int VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) ) ( new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 , STRING_5 ) . METHOD_5 ( STRING_6 , VAR_2 ) . METHOD_6 ( STRING_7 ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.util.List<TYPE_2>> apply( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) ) ( java.util.List < TYPE_1 < TYPE_2 > > result = TYPE_3 . METHOD_1 ( changes . size ( ) ) ) ( for (com.google.gerrit.reviewdb.client.Change c : changes) ) ( endfor ) ( result . add ( VAR_1 . submit ( new TYPE_4 ( event , c . METHOD_2 ( ) , c . getId ( ) ) ) ) ) ( return TYPE_5 . METHOD_3 ( result ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 file , java.lang.String name , TYPE_2 VAR_1 ) ) ( VAR_1 . METHOD_2 ( new TYPE_3 ( name ) ) ) ( TYPE_4 input = new TYPE_4 ( file ) ) ( TYPE_5 . METHOD_3 ( input , VAR_1 ) ) ( input . close ( ) ) ( VAR_1 . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 . Id me = TYPE_2 . getAccountId ( ) ) ( final java.util.Set < TYPE_3 . Id > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( me ) ) ( final TYPE_4 VAR_2 = VAR_3 . get ( change . METHOD_4 ( ) . getParentKey ( ) ) ) ( METHOD_1 ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ) ( METHOD_1 ( VAR_1 , VAR_3 . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ) ( com.google.gerrit.reviewdb.client.Change change = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ) ( METHOD_5 ( STRING_7 ) ) ( METHOD_5 ( STRING_8 ) ) ( METHOD_5 ( STRING_9 , change ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_5 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_6 , VAR_7 ) . METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ) ( TYPE_2 r = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ) ( org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) ) ( r . METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( TYPE_1 < TYPE_2 > result ) ) ( final java.util.List < TYPE_3 > r = new java.util.ArrayList < TYPE_3 > ( result . length ( ) ) ) ( for (final TYPE_2 VAR_1 : TYPE_4 . METHOD_1 ( result )) ) ( endfor ) ( r . add ( new TYPE_3 ( VAR_1 ) ) ) ( VAR_2 . METHOD_2 ( req , new TYPE_5 ( r ) ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 git , TYPE_2 VAR_1 , java.lang.String changeId ) ) ( TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) , changeId ) ) ( return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 apply( TYPE_2 rsrc ) ) ( org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_1 ( VAR_2 ) ) ( try ) ( end-try ) ( TYPE_4 p = TYPE_4 . METHOD_2 ( ) ) ( p . METHOD_3 ( git ) ) ( return new TYPE_1 ( null , p , git ) ; ) ( finally ) ( git . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) ) ( TYPE_3 input = TYPE_3 . create ( ) ) ( input . message ( TYPE_4 . METHOD_2 ( msg ) ) ) ( TYPE_4 . METHOD_3 ( id , STRING_1 ) . METHOD_4 ( input , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void display( java.util.List < java.util.List < java.lang.String > > values ) ) ( int row = 2 ) ( for (row < ( table . METHOD_1 ( ) )) ) ( row ++ ) ( endfor ) ( table . METHOD_2 ( ( row -- ) ) ) ( int row = 2 ) ( for (java.util.List < java.lang.String > VAR_1 : values) ) ( endfor ) ( METHOD_3 ( row , VAR_1 ) ) ( row ++ ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 run( final TYPE_2 . ReviewDb db ) ) ( final TYPE_2 . Change change = db . changes ( ) . get ( id ) ) ( if ( change == null ) ) ( throw new TYPE_3 ( new TYPE_5 ( ) ) ) ( endif ) ( final TYPE_6 VAR_1 = new TYPE_6 ( db ) ) ( final TYPE_1 d = new TYPE_1 ( ) ) ( d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) ) ( return d ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( TYPE_2 VAR_1 = null ) ( TYPE_3 VAR_2 = null ) ( try ) ( end-try ) ( VAR_1 = VAR_3 . METHOD_2 ( ) ) ( VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( null , null , TYPE_4 . METHOD_5 ( ) , null ) ) ( return VAR_2 . METHOD_6 ( ) ; ) ( finally ) ( METHOD_7 ( VAR_2 ) ) ( METHOD_8 ( VAR_1 ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ) ( if ( ( VAR_3 . size ( ) ) > 0 ) ) ( java.util.Set < TYPE_3 > VAR_4 = new TYPE_4 < TYPE_3 > ( VAR_2 . METHOD_2 ( ) ) ) ( for (TYPE_3 s : VAR_2 . METHOD_2 ( )) ) ( endfor ) ( if ( VAR_3 . contains ( s . METHOD_3 ( ) ) ) ) ( VAR_4 . METHOD_4 ( s ) ) ( endif ) ( VAR_2 . METHOD_5 ( VAR_4 ) ) ( endif ) ( VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> get( ) ) ( if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 ) ) ) ) ( return METHOD_2 ( ) ; ) ( endif ) ( if ( VAR_2 ) ) ( return METHOD_3 ( ( ( user ) != null ? VAR_3 . create ( user ) : VAR_4 . get ( ) ) ) ; ) ( endif ) ( if ( ( user ) != null ) ) ( return VAR_5 . get ( ) . apply ( new TYPE_4 ( VAR_3 . create ( user ) ) ) ; ) ( endif ) ( return METHOD_4 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.reviewdb.client.AccountGroup> METHOD_1( ) ) ( try ) ( end-try ) ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( return java.util.Collections . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( ) . METHOD_5 ( ) ) ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_1 . METHOD_6 ( STRING_1 , e ) ) ( return java.util.Collections . METHOD_7 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.server.query.change.ChangeData VAR_2 , int VAR_3 ) ) ( java.lang.String branch = VAR_2 . change ( ) . METHOD_1 ( ) . get ( ) ) ( java.lang.String VAR_4 = TYPE_2 . METHOD_2 ( VAR_2 . getId ( ) . get ( ) , VAR_3 , branch ) ) ( return get ( VAR_4 , VAR_1 , branch , VAR_2 . METHOD_3 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) . METHOD_3 ( true ) ) ( TYPE_1 u = user ( ) ) ( METHOD_4 ( STRING_3 , u . METHOD_5 ( ) ) ) ( METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_4 ) . METHOD_5 ( ) ) ) ( METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_5 ) . METHOD_5 ( ) ) ) ( METHOD_4 ( STRING_6 , u . METHOD_6 ( STRING_7 ) . METHOD_5 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( boolean equals( final TYPE_1 VAR_1 ) ) ( if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) ) ( return false ; ) ( endif ) ( return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final TYPE_2 . Change change ) ) ( try ) ( end-try ) ( final TYPE_4 . NameKey VAR_1 = change . getProject ( ) ) ( return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_1 ( change ) ; ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw new TYPE_3 ( change.getId ( ) , e ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3 . METHOD_3 ( STRING_1 ) ; } } ) ) ( return ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ) != ( - 1 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) ) ( assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_2 ) ) ) ( assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_4 ) ) ) ( assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_5 ) ) ) ( assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ) ( assertEquals ( STRING_8 , TYPE_1 . METHOD_2 ( STRING_9 ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 in ) ) ( try ) ( end-try ) ( return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException|TYPE_4|java.io.IOException e) ) ( throw new TYPE_3 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<com.google.gerrit.server.query.change.ChangeData> METHOD_1( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) ) ( return query ( TYPE_3 . METHOD_2 ( TYPE_4 . ref ( branch ) , TYPE_4 . project ( branch . getParentKey ( ) ) , TYPE_3 . not ( TYPE_4 . status ( VAR_2 ) ) , TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_4 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( java.util.Set < TYPE_1 > VAR_1 ) ) ( boolean VAR_2 = ( ( VAR_3 . equals ( VAR_1 ) ) && ( ( token ) != null ) ) && ( ( VAR_4 ) != null ) ) ( if ( VAR_2 ) ) ( try ) ( end-try ) ( VAR_5 = VAR_4 . METHOD_2 ( ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( VAR_6 . error ( STRING_1 , e ) ) ( METHOD_3 ( ) ) ( VAR_2 = false ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ) ( METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ) ( METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 , STRING_4 ) ) ) ) ( METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 in = new TYPE_1 ( ) ) ( in . name = VAR_1 ) ( VAR_2 = true ) ( VAR_3 = TYPE_2 . METHOD_2 ( INT_1 ) ) ( VAR_3 . add ( STRING_2 ) ) ( VAR_3 . add ( STRING_3 ) ) ( VAR_3 . add ( STRING_4 ) ) ( VAR_4 . projects ( ) . create ( in ) ) ( METHOD_3 ( VAR_1 , STRING_2 ) ) ( METHOD_4 ( VAR_1 , STRING_2 , STRING_3 , STRING_5 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result VAR_1 = METHOD_2 ( ) ) ( METHOD_2 ( ) ) ( java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ) ( org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) ( final TYPE_1 n = VAR_1 . METHOD_3 ( ) ) ( METHOD_4 ( VAR_1 , n ) ) ( assertEquals ( ( ( ( ( ( VAR_2 ) + ( TYPE_2 . METHOD_5 ( STRING_2 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( VAR_3 ) ) + STRING_4 ) , n . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( ( cd . METHOD_2 ( ) ) != null ) ) ( return cd . METHOD_2 ( ) ; ) ( endif ) ( com.google.gerrit.reviewdb.client.PatchSet ps = cd . METHOD_3 ( ) ) ( if ( ps == null ) ) ( return TYPE_2 . of ( ) ; ) ( endif ) ( cd . METHOD_4 ( new TYPE_3 ( cd ) . METHOD_5 ( ps ) . METHOD_6 ( true ) . METHOD_7 ( true ) . METHOD_8 ( ) ) ) ( return cd . METHOD_2 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx , TYPE_2 msg ) ) ( com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ) ( com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) ) ( METHOD_3 ( STRING_1 , c . getId ( ) ) ) ( c . METHOD_4 ( VAR_1 ) ) ( c . METHOD_5 ( VAR_2 ) ) ( ctx . METHOD_6 ( ) ) ( if ( msg != null ) ) ( VAR_3 . METHOD_7 ( db , ctx . METHOD_8 ( msg . METHOD_9 ( ) ) , msg ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( long VAR_1 , TYPE_2 VAR_2 ) ) ( if ( ! ( METHOD_1 ( ) ) ) ) ( VAR_3 . METHOD_2 ( VAR_4 , ( ( int ) ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) ) ( set ( null ) ) ( endif ) ( return super . get ( VAR_1 , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( java.lang.String VAR_1 ) ) ( TYPE_2 res = new TYPE_2 ( ) ) ( METHOD_2 ( VAR_1 , VAR_2 < TYPE_3 > METHOD_3 ( ) , res ) ) ( assertEquals ( INT_1 , res . getStatus ( ) ) ) ( return res . METHOD_4 ( VAR_3 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result change = METHOD_2 ( git , true ) ) ( TYPE_1 . Result VAR_1 = METHOD_2 ( git , true ) ) ( TYPE_1 . Result VAR_2 = METHOD_2 ( git , true ) ) ( METHOD_2 ( git , false ) ) ( java.util.Set < java.lang.String > changes = METHOD_3 ( change ) ) ( METHOD_4 ( changes , VAR_1 , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , final java.lang.String name , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) ) ( TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ) ( if ( VAR_3 == null ) ) ( throw new TYPE_5 ( STRING_1 ) ) ( endif ) ( bind ( TYPE_6 . key ( VAR_1 , name , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 result ) ) ( VAR_1 = new TYPE_2 ( this , base , revision , path , result . METHOD_2 ( ) , METHOD_3 ( ) . METHOD_4 ( ) ) ) ( METHOD_5 ( result . METHOD_6 ( ) ) ) ( display ( VAR_2 ) ) ( VAR_3 . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> METHOD_1( final com.google.gerrit.reviewdb.client.Change change , TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final TYPE_3 VAR_3 , final org.eclipse.jgit.lib.Repository VAR_4 , final org.eclipse.jgit.lib.Repository VAR_5 ) ) ( return VAR_1 . submit ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_2 ( ) throws java.lang.Exception { METHOD_3 ( change , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; return null ; } } ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . in ( VAR_2 class ) ) ( bind ( VAR_3 class ) ) ( bind ( VAR_4 class ) . in ( VAR_5 ) ) ( bind ( VAR_6 class ) . in ( VAR_2 class ) ) ( bind ( VAR_7 . Factory class ) . in ( VAR_5 ) ) ( bind ( VAR_8 . Factory class ) . in ( VAR_5 ) ) ( factory ( VAR_9 . Factory class ) ) ( factory ( VAR_10 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String VAR_1 , java.lang.String to ) ) ( final TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ) ( final TYPE_2 e = new TYPE_2 ( s ) ) ( try ) ( end-try ) ( s . METHOD_2 ( e , table , VAR_1 , to ) ) ( finally ) ( e . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( TYPE_1 input = new TYPE_1 ( ) ) ( input . ref = VAR_1 ) ( try ) ( end-try ) ( VAR_2 . apply ( new TYPE_2 ( project . METHOD_1 ( ) , project . METHOD_2 ( ) ) , input ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( throw METHOD_3 ( e ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( final int VAR_1 ) ) ( for (final TYPE_1 s : VAR_2) ) ( endfor ) ( boolean VAR_3 = false ) ( if ( VAR_1 <= ( VAR_4 ) ) ) ( ( VAR_4 ) ++ ) ( endif ) ( if ( VAR_1 < ( VAR_5 ) ) ) ( ( VAR_5 ) ++ ) ( endif ) ( return super . METHOD_1 ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_3 < TYPE_1 > VAR_1 ) ) ( TYPE_4 req = new TYPE_4 ( VAR_2 , url . toString ( ) ) ) ( req . METHOD_2 ( STRING_1 , VAR_3 ) ) ( req . METHOD_3 ( new TYPE_5 < TYPE_1 > ( true , VAR_1 ) ) ) ( try ) ( end-try ) ( TYPE_6 . METHOD_4 ( ) ) ( req . METHOD_1 ( ) ) ( end-catch ) ( catch (TYPE_7 e) ) ( TYPE_6 . METHOD_5 ( ) ) ( VAR_1 . METHOD_6 ( e ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( if ( ( VAR_1 . email ( ) ) != null ) ) ( return VAR_1 . email ( ) ; ) ( endif ) ( if ( ( VAR_1 . name ( ) ) != null ) ) ( return VAR_1 . name ( ) ; ) ( endif ) ( return STRING_1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( com.google.gerrit.reviewdb.client.Change VAR_1 = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) ( com.google.gerrit.reviewdb.client.Change VAR_2 = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ) ( METHOD_4 ( STRING_2 ) ) ( METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ) ( METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( TYPE_2 VAR_1 ) ) ( final TYPE_3 ref = TYPE_4 . METHOD_1 ( VAR_1 ) ) ( if ( ref != null ) ) ( return new TYPE_5 ( ) { public java.lang.String getName ( ) { return ref . getName ( ) ; } public TYPE_6 METHOD_2 ( ) { return ref . METHOD_3 ( ) ; } public java.lang.String METHOD_4 ( ) { return null ; } public java.lang.String METHOD_5 ( ) { return null ; } } ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) ) ( VAR_1 . append ( ( STRING_1 + line ) ) ) ( try ) ( end-try ) ( final java.lang.String VAR_4 = VAR_2 . METHOD_2 ( VAR_3 , line ) ) ( VAR_1 . append ( STRING_2 ) ) ( VAR_1 . append ( VAR_4 ) ) ( end-catch ) ( catch (TYPE_2 e) ) ( VAR_1 . append ( STRING_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 config , TYPE_2 VAR_1 ) ) ( TYPE_4 . sshd ( config , VAR_1 ) ) ( TYPE_4 . METHOD_2 ( config , VAR_1 ) ) ( TYPE_4 . user ( config , VAR_1 ) ) ( TYPE_4 . auth ( config , VAR_1 ) ) ( TYPE_4 . METHOD_3 ( config , VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final byte [ ] VAR_1 , final TYPE_1 out ) ) ( final byte [ ] VAR_2 = out . METHOD_2 ( ) ) ( int i = 0 ) ( for (i < ( VAR_1 . length )) ) ( i ++ ) ( endfor ) ( assertEquals ( VAR_1 [ i ] , VAR_2 [ i ] ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<java.lang.String> METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ) ( com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( psId . getParentKey ( ) ) ) ( if ( c == null ) ) ( return null ; ) ( endif ) ( TYPE_1 notes = VAR_1 . create ( c ) ) ( com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ) ( return ps != null ? ps . METHOD_2 ( ) : null ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( while ( ( ( VAR_1 ) == null ) && ( VAR_2 . METHOD_1 ( ) ) ) ) ( endwhile ) ( TYPE_1 < TYPE_2 > p = VAR_2 . METHOD_2 ( ) . get ( ) ) ( if ( p != null ) ) ( try ) ( end-try ) ( VAR_1 = p . get ( ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_3 . error ( ( ( STRING_1 + p ) + STRING_2 ) , e ) ) ( endif ) ( return ( VAR_1 ) != null ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_2 ( db , null ) ) ) ) ) ( return false ; ) ( endif ) ( return METHOD_3 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 event ) ) ( TYPE_2 VAR_1 = event . METHOD_2 ( ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 ) ( if ( VAR_1 instanceof TYPE_3 ) ) ( VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ( endif ) ( VAR_2 = TYPE_3 . METHOD_4 ( ) ) ( if ( VAR_2 != null ) ) ( METHOD_5 ( true ) ) ( METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 , VAR_3 ) ) ) ( endif ) ( METHOD_5 ( false ) ) ( super . METHOD_1 ( event ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) ) ( final TYPE_2 VAR_2 = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ) ( return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ) ( assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) ) ( TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ) ( if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) ) ( VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) ( return ; ) ( endif ) ( TYPE_7 rsp = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ) ( if ( METHOD_3 ( req , rsp ) ) ) ( VAR_3 . METHOD_1 ( req , VAR_2 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( ) ) ( VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ) ( VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( base , revision , path ) ) ) ( VAR_1 . METHOD_7 ( TYPE_5 . METHOD_4 ( ) ) ) ( return java.util.Collections . METHOD_8 ( VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String> apply( TYPE_2 rsrc , TYPE_3 input ) ) ( try ) ( end-try ) ( if ( rsrc . METHOD_1 ( ) ) ) ( throw new TYPE_5 ( STRING_1 ) ) ( endif ) ( if ( ! ( METHOD_2 ( rsrc ) ) ) ) ( VAR_1 . METHOD_3 ( rsrc ) ) ( endif ) ( return TYPE_1 . METHOD_4 ( STRING_2 ) ; ) ( end-catch ) ( catch (TYPE_6 e) ) ( throw new TYPE_7 ( e . getMessage ( ) ) ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_4 ( STRING_3 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 run( final TYPE_2 . ReviewDb db ) ) ( final TYPE_2 . AccountGroup group = db . METHOD_1 ( ) . get ( VAR_1 ) ) ( METHOD_2 ( db , group ) ) ( group . METHOD_3 ( VAR_2 ) ) ( db . METHOD_1 ( ) . update ( java.util.Collections.singleton ( group ) ) ) ( VAR_3 . METHOD_4 ( VAR_1 ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req ) ) ( if ( ( ! ( STRING_1 . equals ( req . METHOD_2 ( ) ) ) ) && ( ! ( STRING_2 . equals ( req . METHOD_2 ( ) ) ) ) ) ) ( throw new TYPE_2 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , STRING_1 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_7 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( int index , TYPE_2 VAR_1 ) ) ( int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ) ( if ( VAR_2 < 0 ) ) ( return null ; ) ( endif ) ( TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ) ( return VAR_4 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) ) ( try ) ( end-try ) ( return new TYPE_3 ( ) . METHOD_2 ( new TYPE_4 . Key ( project , repo , VAR_1 , VAR_2 , VAR_3 ) ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( VAR_4 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ) ( return VAR_5 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 ctx ) ) ( METHOD_2 ( ctx ) ) ( VAR_1 = VAR_2 . get ( ctx . METHOD_3 ( ) , commit , patchSet . getId ( ) ) ) ( change . METHOD_4 ( VAR_1 ) ) ( if ( ! ( VAR_3 ) ) ) ( return ; ) ( endif ) ( ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , patchSet . getRefName ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 , int VAR_2 ) ) ( METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) ( if ( VAR_1 < VAR_2 ) ) ( int VAR_3 = VAR_2 - VAR_1 ) ( METHOD_4 ( VAR_3 ) ) ( endif ) ( if ( VAR_1 > VAR_2 ) ) ( int VAR_4 = VAR_1 - VAR_2 ) ( METHOD_5 ( VAR_4 ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 rsrc , java.lang.String VAR_1 ) ) ( TYPE_4 VAR_2 = new TYPE_4 ( ) ) ( VAR_3 = VAR_1 ) ( VAR_4 = VAR_5 ) ( VAR_6 = true ) ( VAR_7 = VAR_8 ) ( return VAR_9 . METHOD_2 ( rsrc , VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 type ) ) ( return new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( type . getName ( ) ) , TYPE_4 . METHOD_2 ( type . getId ( ) ) , TYPE_4 . METHOD_2 ( type . METHOD_3 ( ) ) , new TYPE_5 ( type . METHOD_4 ( ) . getValue ( ) ) , new TYPE_5 ( type . METHOD_5 ( ) . getValue ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 event ) ) ( final TYPE_2 VAR_1 = table . METHOD_2 ( event ) ) ( if ( VAR_1 == null ) ) ( return ; ) ( endif ) ( if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) ) ( METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ( endif ) ( if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) ) ( endif ) ( if ( ( METHOD_6 ( VAR_1 . METHOD_5 ( ) ) ) != null ) ) ( METHOD_7 ( VAR_1 . METHOD_5 ( ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res ) ) ( java.lang.String name = METHOD_2 ( TYPE_3 . METHOD_3 ( req ) , TYPE_4 . METHOD_4 ( req ) , req , res ) ) ( if ( name == null ) ) ( return ; ) ( endif ) ( TYPE_5 out = METHOD_5 ( req , res ) ) ( out . METHOD_6 ( TYPE_6 . METHOD_7 ( name ) ) ) ( out . close ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , TYPE_3 < java.lang.String > VAR_2 , TYPE_3 < java.lang.String > VAR_3 , TYPE_3 < java.lang.String > VAR_4 ) ) ( TYPE_4 e = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ( if ( ! ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( for (TYPE_5 VAR_6 : VAR_5) ) ( endfor ) ( VAR_6 . METHOD_4 ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 s , java.lang.String changeId , int VAR_1 ) ) ( TYPE_2 r = s . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_3 ( ) . label ( STRING_3 , 2 ) ) ) ( org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) ) ( r . METHOD_4 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) ) ( TYPE_5 group = ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_1 ( ) ) != null ) ) ? VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) : null ) ( return new TYPE_6 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) , group ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 cm ) ) ( if ( cm . METHOD_2 ( ) ) ) ( TYPE_2 VAR_1 = cm . METHOD_3 ( ) ) ( cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ) ( cm . METHOD_6 ( null ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final TYPE_2 VAR_1 ) ( if ( ( VAR_2 ) == null ) ) ( VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ) ( endif ) ( VAR_1 = VAR_2 ) ( return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_4 . create ( VAR_5 , new TYPE_3 < TYPE_2 > ( ) { public TYPE_2 get ( ) { return VAR_1 ; } } , VAR_6 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<java.lang.String> METHOD_1( java.lang.String VAR_1 ) ) ( java.util.Set < java.lang.String > VAR_2 = new TYPE_1 < java.lang.String > ( ) ) ( for (TYPE_2 VAR_3 : METHOD_2 ( )) ) ( endfor ) ( TYPE_3 VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ) ( if ( VAR_4 != null ) ) ( VAR_2 . add ( VAR_3 . METHOD_4 ( ) ) ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String config = STRING_1 + ( STRING_2 + STRING_3 ) ) ( TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_4 ) , new TYPE_4 ( new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_5 . NameKey ( STRING_5 ) , new TYPE_5 . Id ( 1 ) , new TYPE_6 ( STRING_4 ) ) ) ) ) ( com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ) ( assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_4 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ) ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out ) ( out = METHOD_3 ( in ) ) ( METHOD_4 ( ( ( out instanceof TYPE_2 ) || ( out instanceof TYPE_3 ) ) ) ) ( VAR_1 . METHOD_5 ( null ) ) ( out = METHOD_3 ( in ) ) ( METHOD_4 ( ( out instanceof TYPE_4 ) ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( TYPE_2 VAR_1 ) ) ( java.util.List < TYPE_1 > VAR_2 = new TYPE_4 < > ( ) ) ( for (TYPE_5 VAR_3 : VAR_4) ) ( endfor ) ( try ) ( end-try ) ( VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 ) ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_2 . METHOD_2 ( e . METHOD_3 ( ) ) ) ( throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 . METHOD_6 ( project ) ) ) ) ) ( VAR_4 = VAR_2 . METHOD_7 ( ) . parseCommit ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( STRING_1 ) . METHOD_10 ( ) ) ) ( VAR_5 = admin . getId ( ) ) ( VAR_6 = VAR_7 . get ( ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) ) ( try ) ( org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ) ( end-try ) ( return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; ) ( end-catch ) ( catch (java.io.IOException e) ) ( java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ) ( VAR_1 . error ( msg , e ) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( METHOD_2 ( ) ) != null ) ) ( try ) ( end-try ) ( return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( endif ) ( return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 . ReviewDb db , final TYPE_1 . PatchSet ps ) ) ( patchSet = ps ) ( info = db . METHOD_2 ( ) . get ( patchSet . getKey ( ) ) ) ( VAR_1 = db . METHOD_3 ( ) . METHOD_4 ( patchSet . getKey ( ) ) . METHOD_5 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 cfg , java.lang.String revision , TYPE_3 out ) ) ( return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( METHOD_8 ( cfg , revision ) ) . METHOD_9 ( true ) . METHOD_10 ( out ) . get ( ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) ) ( if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( TYPE_6 event = new TYPE_6 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) ( for (TYPE_7 VAR_5 : VAR_4) ) ( endfor ) ( try ) ( end-try ) ( VAR_5 . METHOD_4 ( event ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( util . METHOD_5 ( TYPE_8 . log , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( VAR_1 . METHOD_2 ( ) ) ( TYPE_3 VAR_2 ) ( TYPE_4 VAR_3 ) ( VAR_2 = VAR_4 . METHOD_3 ( ) ) ( if ( ! ( VAR_2 . METHOD_4 ( ) ) ) ) ( return VAR_1 . METHOD_5 ( ) ; ) ( endif ) ( VAR_3 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_6 ( ) ) ( VAR_5 = this . VAR_6 ) ( return VAR_3 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ) ( final TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ( VAR_1 . add ( file ( STRING_4 ) ) ) ( METHOD_5 ( VAR_1 . commit ( ) ) ) ( assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 VAR_3 ) ) ( if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ) ( for (TYPE_6 VAR_5 : VAR_4) ) ( endfor ) ( try ) ( end-try ) ( VAR_5 . METHOD_4 ( event ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( util . METHOD_5 ( TYPE_7 . log , e ) ) ( CFG Exit )
( CFG Entry ) ( double METHOD_1( double VAR_1 ) ) ( int line = VAR_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) ( TYPE_1 p = VAR_3 . METHOD_1 ( VAR_4 , line ) ) ( double VAR_5 = VAR_2 . METHOD_3 ( VAR_6 , STRING_1 ) ) ( double VAR_7 = VAR_8 . METHOD_3 ( VAR_9 , STRING_1 ) ) ( return TYPE_2 . METHOD_4 ( 0 , ( VAR_7 + ( VAR_1 - VAR_5 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( int insert( final java.util.List < TYPE_1 > in , int row ) ) ( TYPE_2 < TYPE_1 > VAR_1 = in . METHOD_1 ( ) ) ( for (VAR_1 . METHOD_2 ( )) ) (  ;  ) ( endfor ) ( final TYPE_1 c = VAR_1 . METHOD_3 ( ) ) ( table . METHOD_4 ( row ) ) ( table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) ) ( METHOD_7 ( row , VAR_3 , c , ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ) ( row ++ ) ( return row ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ) ( if ( VAR_1 == null ) ) ( return false ; ) ( endif ) ( TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ) ( return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; ) ( CFG Exit )
( CFG Entry ) ( void set( TYPE_1 VAR_1 ) ) ( set ( ( ( VAR_1 . css ( ) ) != null ? VAR_1 . css ( ) : VAR_2 ) , ( ( VAR_1 . METHOD_1 ( ) ) != null ? VAR_1 . METHOD_1 ( ) : VAR_3 ) , ( ( VAR_1 . METHOD_2 ( ) ) != null ? VAR_1 . METHOD_2 ( ) : VAR_4 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 , int value ) ) ( while ( true ) ) ( endwhile ) ( if ( ( value & ( ~ INT_1 ) ) == 0 ) ) ( VAR_1 . METHOD_2 ( value ) ) ( return ; ) ( endif ) ( VAR_1 . METHOD_2 ( ( ( value & INT_1 ) | INT_2 ) ) ) ( value >>>= INT_3 ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) ) ( res . METHOD_2 ( VAR_1 ) ) ( TYPE_4 . METHOD_3 ( req , res , c ) ) ( TYPE_4 . METHOD_4 ( null , res , msg ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( STRING_1 ) ) ( final java.lang.String name = STRING_2 ) ( final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ) ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ( final TYPE_2 r = create ( ) . METHOD_4 ( user ) ) ( METHOD_5 ( r ) ) ( assertEquals ( ( name + STRING_3 ) , r . name ) ) ( assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ) ( TYPE_1 . METHOD_7 ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( void onSuccess( final TYPE_1 result ) ) ( VAR_1 = result . config ) ( if ( ( result . account ) != null ) ) ( VAR_2 = result . account ) ( TYPE_2 VAR_3 ) ( TYPE_3 VAR_4 ) ( VAR_5 = VAR_6 ) ( endif ) ( if ( ( VAR_7 ) != null ) ) ( VAR_8 = VAR_7 ) ( METHOD_1 ( INT_1 ) ) ( TYPE_4 VAR_9 ) ( diff ( VAR_10 ) ) ( endif ) ( METHOD_2 ( ) ) ( CFG Exit )
( CFG Entry ) ( long METHOD_1( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String path , TYPE_3 t ) ) ( if ( ! ( TYPE_4 . METHOD_2 ( VAR_2 ) ) ) ) ( return 0 ; ) ( endif ) ( try ) ( TYPE_5 VAR_3 = TYPE_5 . METHOD_3 ( VAR_1 , path , t ) ) ( end-try ) ( return VAR_3 != null ? repo . METHOD_4 ( VAR_3 . METHOD_5 ( 0 ) , VAR_4 ) . METHOD_6 ( ) : 0 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( int VAR_1 ) ) ( int VAR_2 = VAR_3 ) ( VAR_3 += VAR_1 ) ( int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ) ( VAR_6 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ) ( VAR_7 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( VAR_1 ) == null ) ) ( if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) ) ( VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ) ( endif ) ( VAR_1 = new TYPE_1 ( ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 VAR_1 ) ) ( final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ) ( if ( METHOD_2 ( ) ) ) ( new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_3 ( ) ) ( endif ) ( VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.Change METHOD_1( ) ) ( if ( ( project ) == null ) ) ( notes = VAR_1 . METHOD_2 ( db , VAR_2 ) ) ( endif ) ( notes = VAR_1 . create ( db , project , VAR_2 ) ) ( change = notes . getChange ( ) ) ( if ( ( change ) == null ) ) ( throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + ( VAR_2 ) ) ) ) ( endif ) ( METHOD_3 ( null ) ) ( return change ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 class , VAR_2 ) ) ( METHOD_2 ( VAR_3 class , VAR_4 ) ) ( METHOD_3 ( ) ) ( METHOD_4 ( ) ) ( bind ( VAR_5 class ) . to ( VAR_6 class ) . in ( VAR_7 ) ) ( bind ( VAR_8 class ) . METHOD_5 ( VAR_9 class ) ) ( bind ( VAR_10 class ) . to ( VAR_11 class ) ) ( install ( new TYPE_1 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<java.lang.String,java.lang.String> METHOD_1( java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_1 ) ) ( TYPE_1 < java.lang.String , java.lang.String > result = new TYPE_2 < > ( ) ) ( for (java.lang.String key : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) )) ) ( endfor ) ( result . put ( key , java.lang.String . METHOD_5 ( STRING_1 , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( key ) ) ) ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . Result r = METHOD_2 ( ) ) ( METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) ) ( METHOD_4 ( user ) ) ( com.google.common.truth.Truth.assertThat ( METHOD_5 ( r , user . email ) . VAR_3 ) . isEqualTo ( user . getId ( ) . get ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) ( TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ( endif ) ( if ( ( VAR_1 ) == null ) ) ( METHOD_7 ( ) ) ( endif ) ( METHOD_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( projects ) == null ) ) ( METHOD_2 ( ) ) ( endif ) ( TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_5 ( true ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ) ( TYPE_3 VAR_1 = METHOD_3 ( repo ) ) ( insert ( VAR_1 ) ) ( java.lang.String VAR_2 = VAR_1 . METHOD_4 ( ) . getRevision ( ) . get ( ) ) ( METHOD_5 ( STRING_2 ) ) ( int i = 0 ) ( for (i <= INT_1) ) ( i ++ ) ( endfor ) ( java.lang.String VAR_3 = VAR_2 . METHOD_6 ( 0 , ( INT_2 - i ) ) ) ( METHOD_5 ( VAR_3 , VAR_1 . getChange ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 cfg = VAR_1 . METHOD_2 ( TYPE_2 . get ( VAR_2 class , VAR_3 class ) ) ) ( boolean VAR_4 = cfg . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( VAR_5 class ) . METHOD_4 ( ) ) ) ( int VAR_6 = cfg . METHOD_5 ( STRING_1 , STRING_3 , VAR_7 ) ) ( if ( VAR_4 && ( ( VAR_8 ) > VAR_6 ) ) ) ( VAR_9 . METHOD_6 ( ( ( STRING_4 + VAR_6 ) + STRING_5 ) ) ) ( VAR_8 = VAR_6 ) ( endif ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) ) ( return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; ) ( endif ) ( return METHOD_4 ( ) . METHOD_9 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 file( final java.lang.String name ) ) ( TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ) ( final TYPE_1 e = new TYPE_1 ( name ) ) ( e . METHOD_2 ( VAR_3 ) ) ( e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ) ( VAR_1 . METHOD_5 ( ) ) ( return e ; ) ( METHOD_6 ( INT_1 ) ) ( TYPE_4 . a VAR_5 ) ( TYPE_5 to ) ( TYPE_6 revision ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ProjectConfig VAR_1 ) ) ( TYPE_2 VAR_2 = VAR_3 . create ( VAR_1 . getProject ( ) . METHOD_2 ( ) , user ) ) ( VAR_1 . commit ( VAR_2 ) ) ( VAR_4 . METHOD_3 ( VAR_1 . getProject ( ) . METHOD_2 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 event ) ) ( synchronized ( VAR_1 ) ) ( if ( ! ( VAR_2 . METHOD_1 ( event ) ) ) ) ( VAR_3 = true ) ( endif ) ( if ( ( ( VAR_4 ) == null ) && ( ! ( VAR_5 ) ) ) ) ( VAR_4 = VAR_6 . submit ( VAR_7 ) ) ( endif ) ( end-synchronized ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ) ( METHOD_3 ( VAR_4 ) ) ( VAR_5 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 ) ) ( TYPE_4 e = new TYPE_4 ( change , revision , VAR_1 , VAR_2 ) ) ( if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( return ; ) ( endif ) ( for (TYPE_5 VAR_4 : VAR_3) ) ( endfor ) ( VAR_4 . METHOD_4 ( e ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( cd . METHOD_2 ( user ) ) ) ( return true ; ) ( endif ) ( try ) ( end-try ) ( com.google.gerrit.reviewdb.client.Change c = cd . change ( db ) ) ( if ( c == null ) ) ( return false ; ) ( endif ) ( TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( c , user ) ) ( if ( VAR_1 . METHOD_4 ( db . get ( ) ) ) ) ( cd . METHOD_5 ( VAR_1 ) ) ( return true ; ) ( endif ) ( end-catch ) ( catch (TYPE_2 e) ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ( install ( new TYPE_2 ( VAR_2 ) ) ) ( bind ( VAR_3 class ) . to ( VAR_4 class ) ) ( METHOD_4 ( ) . to ( VAR_4 class ) ) ( if ( VAR_5 ) ) ( METHOD_4 ( ) . to ( VAR_6 class ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.List<TYPE_1> METHOD_1( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ) ( final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ) ( for (final TYPE_2 e : VAR_2) ) ( endfor ) ( r . add ( e . METHOD_2 ( VAR_1 ) ) ) ( return r ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) ) ( if ( p instanceof TYPE_3 < ? > ) ) ( return TYPE_4 . METHOD_2 ( p ) ; ) ( endif ) ( return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ) ( TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ) ( METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ) ( assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 ) . to ( VAR_7 , VAR_4 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_11 ( VAR_11 ) . METHOD_11 ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 t , TYPE_2 VAR_1 ) ) ( if ( t . METHOD_2 ( ) ) ) ( return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; ) ( endif ) ( if ( ! ( t . METHOD_3 ( ) ) ) ) ( return false ; ) ( endif ) ( return VAR_2 . equals ( ( ( TYPE_4 ) ( t ) ) . VAR_2 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id , java.lang.String VAR_1 ) ) ( org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ) ( rw . METHOD_2 ( commit ) ) ( this . commit = commit ) ( VAR_2 = commit . METHOD_3 ( ) ) ( this . VAR_1 = VAR_1 ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 t ) ) ( if ( ! ( t . METHOD_2 ( ) ) ) ) ( return false ; ) ( endif ) ( if ( t . equals ( VAR_1 ) ) ) ( return true ; ) ( endif ) ( return ( ( ( TYPE_2 ) ( t ) ) . name ( ) . length ( ) ) == 1 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( project , STRING_1 ) ) ( METHOD_3 ( STRING_1 ) ) ( java.lang.String VAR_1 = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ) ( METHOD_5 ( user ) ) ( TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_2 , VAR_1 , false ) ) , METHOD_7 ( ) . get ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.reviewdb.client.Account.Id key ) ) ( final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) ( try ) ( end-try ) ( final TYPE_1 VAR_1 = METHOD_1 ( db , key ) ) ( java.lang.String user = VAR_1 . METHOD_3 ( ) ) ( if ( user != null ) ) ( VAR_2 . put ( user , TYPE_2 . of ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) ) ( endif ) ( return VAR_1 ; ) ( finally ) ( db . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo get( TYPE_2 < TYPE_3 > s ) ) ( try ) ( end-try ) ( TYPE_5 u = user . get ( ) ) ( if ( u . METHOD_1 ( ) ) ) ( ( ( TYPE_6 ) ( u ) ) . METHOD_2 ( ) ) ( endif ) ( return VAR_1 . get ( ) . METHOD_3 ( s ) . format ( change ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_4 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( ) ) ( final TYPE_2 VAR_1 ) ( if ( ( VAR_2 ) == null ) ) ( VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ) ( endif ) ( VAR_1 = VAR_2 ) ( TYPE_3 VAR_4 = VAR_5 . get ( ) ) ( if ( VAR_4 instanceof TYPE_4 ) ) ( VAR_4 = null ) ( endif ) ( return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_6 . METHOD_3 ( VAR_1 , VAR_7 , VAR_4 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void add( final TYPE_1 s ) ) ( final java.lang.String n = s . METHOD_1 ( ) ) ( METHOD_2 ( n ) ) ( if ( ( VAR_1 . put ( n , s ) ) != null ) ) ( throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ) ( endif ) ( VAR_2 . add ( n ) ) ( CFG Exit )
( CFG Entry ) ( java.util.List<com.google.gerrit.server.query.change.ChangeData> METHOD_1( java.lang.String VAR_1 ) ) ( if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . schema ( VAR_2 ) . METHOD_3 ( VAR_3 ) ) ) ) ) ( return java.util.Collections . METHOD_4 ( ) ; ) ( endif ) ( return query ( new TYPE_3 ( VAR_1 ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 p ) ) ( long VAR_1 = p . METHOD_2 ( schema ) ) ( long VAR_2 = p . METHOD_3 ( schema ) ) ( return TYPE_4 . METHOD_4 ( p . METHOD_5 ( ) . getName ( ) , ( VAR_1 != ( VAR_3 ) ? VAR_1 : null ) , ( VAR_2 != ( VAR_4 ) ? VAR_2 : null ) , false , false ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 label , TYPE_2 status ) ) ( if ( ( status . METHOD_2 ( ) ) && ( ( status . METHOD_3 ( ) ) == 1 ) ) ) ( TYPE_2 VAR_1 = status . METHOD_4 ( 0 ) ) ( if ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ) ( VAR_2 = new com.google.gerrit.reviewdb.client.Account.Id ( ( ( TYPE_5 ) ( VAR_1 . METHOD_4 ( 0 ) ) ) . METHOD_6 ( ) ) ) ( endif ) ( throw new TYPE_3 ( label ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 get( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository VAR_3 , com.google.gerrit.server.query.change.ChangeData VAR_4 , int VAR_5 ) ) ( com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_4 . change ( ) . getProject ( ) ) ( java.lang.String branch = VAR_4 . change ( ) . METHOD_1 ( ) . get ( ) ) ( java.lang.String VAR_6 = TYPE_4 . METHOD_2 ( VAR_4 . getId ( ) . get ( ) , VAR_5 , branch ) ) ( return get ( VAR_1 , VAR_2 , VAR_6 , VAR_3 , project , branch , VAR_4 . METHOD_3 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( ) ) ( return ( ( ( ( ( ( VAR_1 ) >= 0 ) && ( ( VAR_2 ) >= 0 ) ) && ( ( VAR_3 ) >= 0 ) ) && ( ( VAR_4 ) >= 0 ) ) && ( ( VAR_1 ) <= ( VAR_3 ) ) ) && ( ( ( VAR_1 ) != ( VAR_3 ) ) || ( ( VAR_2 ) <= ( VAR_4 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<?> METHOD_1( final int id ) ) ( TYPE_1 < ? > result = null ) ( for (final TYPE_2 e : VAR_1) ) ( endfor ) ( final TYPE_1 < ? > t = e . METHOD_1 ( id ) ) ( if ( t != null ) ) ( if ( result != null ) ) ( return null ; ) ( endif ) ( result = t ) ( endif ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final TYPE_1 b = new TYPE_1 ( ) ) ( METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ) ( assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ) ( METHOD_2 ( b , b . append ( new TYPE_2 ( ) { public java.lang.String toString ( ) { return STRING_2 ; } } ) ) ) ( assertEquals ( STRING_2 , b . METHOD_3 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1<TYPE_2,com.google.gerrit.reviewdb.client.PatchSet> METHOD_1( com.google.gerrit.server.query.change.ChangeData cd ) ) ( TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . METHOD_2 ( ) ) ( TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = TYPE_4 . METHOD_3 ( ) ) ( for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) ) ( endfor ) ( result . put ( ps . getId ( ) . get ( ) , ps ) ) ( return result ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( if ( ( VAR_1 ) != null ) ) ( VAR_1 . METHOD_2 ( ) ) ( VAR_1 = null ) ( endif ) ( if ( ( VAR_2 ) != null ) ) ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ( VAR_2 = null ) ( endif ) ( if ( ( VAR_3 ) != null ) ) ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ( VAR_3 = null ) ( endif ) ( TYPE_1 . METHOD_5 ( true ) ) ( VAR_4 = null ) ( VAR_5 = null ) ( VAR_6 = null ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 ctx ) ) ( com.google.gerrit.reviewdb.client.Change change = ctx . getChange ( ) ) ( if ( ( change . getStatus ( ) ) == ( VAR_1 ) ) ) ( throw new TYPE_2 ( STRING_1 ) ) ( endif ) ( TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ) ( change . METHOD_3 ( VAR_2 ) ) ( change . METHOD_4 ( ctx . METHOD_5 ( ) ) ) ( update . METHOD_3 ( VAR_2 ) ) ( METHOD_6 ( ctx , update ) ) ( return true ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) ) ( TYPE_2 p = new TYPE_2 ( ) ) ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) ( try ) ( end-try ) ( p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ) ( return p ; ) ( finally ) ( VAR_1 . METHOD_6 ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 create( TYPE_2 req , org.eclipse.jgit.lib.Repository db ) ) ( final TYPE_4 VAR_1 = ( ( TYPE_4 ) ( req . METHOD_1 ( VAR_2 ) ) ) ) ( if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ( throw new TYPE_3 ( ) ) ( endif ) ( TYPE_5 VAR_3 = factory . create ( VAR_1 , db , TYPE_6 . of ( ) ) ) ( TYPE_1 rp = VAR_3 . METHOD_4 ( ) ) ( req . METHOD_5 ( VAR_4 , VAR_3 ) ) ( return rp ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 account , TYPE_3 VAR_1 ) ) ( try ) ( end-try ) ( return VAR_2 . create ( VAR_3 . METHOD_2 ( account , VAR_1 ) ) ; ) ( end-catch ) ( catch (TYPE_6|com.google.gwtorm.server.OrmException|java.io.IOException e) ) ( throw new TYPE_5 ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( boolean VAR_1 , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) ) ( TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( changeId . get ( ) ) ) ( TYPE_5 . METHOD_3 ( VAR_3 , TYPE_6 . of ( VAR_4 , VAR_5 , VAR_6 ) ) ) ( if ( ! VAR_1 ) ) ( VAR_3 . METHOD_4 ( ) ) ( endif ) ( VAR_3 . get ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( int METHOD_1( TYPE_1 VAR_1 , int VAR_2 ) ) ( try ) ( end-try ) ( TYPE_2 VAR_3 = TYPE_3 . get ( VAR_1 ) ) ( TYPE_4 VAR_4 = TYPE_5 . get ( VAR_1 ) ) ( com.google.gerrit.server.query.change.ChangeData VAR_5 = TYPE_6 . get ( VAR_1 ) ) ( org.eclipse.jgit.lib.Repository VAR_6 = TYPE_7 . get ( VAR_1 ) ) ( return new TYPE_8 ( VAR_6 , VAR_5 , VAR_2 ) . METHOD_1 ( VAR_3 , VAR_4 ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( VAR_7 . error ( STRING_1 , e ) ) ( return 0 ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( java.lang.StringBuilder m = new java.lang.StringBuilder ( ) ) ( m . append ( METHOD_2 ( ) ) ) ( if ( user . METHOD_3 ( ) ) ) ( TYPE_1 u = user . METHOD_4 ( ) ) ( if ( u . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ( m . append ( STRING_1 ) . append ( u . METHOD_5 ( ) . METHOD_6 ( ) . get ( ) ) . append ( STRING_2 ) ) ( endif ) ( endif ) ( return m . toString ( ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 edit , boolean VAR_1 ) ) ( TYPE_1 out = new TYPE_1 ( ) ) ( out . commit = TYPE_3 . METHOD_2 ( edit . METHOD_3 ( ) ) ) ( VAR_2 = edit . METHOD_4 ( ) . getRevision ( ) . get ( ) ) ( VAR_3 = TYPE_3 . METHOD_5 ( edit ) ) ( if ( VAR_1 ) ) ( VAR_4 = METHOD_6 ( edit ) ) ( endif ) ( return out ; ) ( CFG Exit )
( CFG Entry ) ( long METHOD_1( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String value ) ) ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData , ? > VAR_1 = schema . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) ) ( if ( VAR_1 == ( TYPE_4 ) ) ) ( return TYPE_5 . METHOD_1 ( value ) ; ) ( endif ) ( return TYPE_6 . METHOD_3 ( value ) ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 c ) ) ( java.lang.String url = c . METHOD_2 ( ) . METHOD_3 ( ) ) ( for (TYPE_1 d : VAR_1) ) ( endfor ) ( if ( d . METHOD_4 ( url , c ) ) ) ( return d . METHOD_5 ( c ) ; ) ( endif ) ( throw new TYPE_3 . OrmException ( ( STRING_1 + url ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final java.lang.String token ) ) ( TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ) ( try ) ( end-try ) ( TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ) ( TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ) ( end-catch ) ( catch (TYPE_5 e) ) ( throw VAR_3 . reject ( e . getMessage ( ) ) ) ( VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_3 . Result r = METHOD_2 ( ) ) ( TYPE_4 in = new TYPE_4 ( ) ) ( VAR_1 = user . email ) ( TYPE_5 VAR_2 = VAR_3 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) ) ( VAR_2 . METHOD_1 ( in ) ) ( org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( TYPE_1 cm = VAR_1 . create ( change ) ) ( cm . METHOD_1 ( change . METHOD_2 ( ) ) ) ( cm . METHOD_3 ( patchSet , VAR_2 ) ) ( cm . METHOD_4 ( reviewers ) ) ( cm . METHOD_5 ( VAR_3 ) ) ( cm . METHOD_6 ( ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( VAR_4 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) ( CFG Exit )
( CFG Entry ) ( boolean equals( final TYPE_1 VAR_1 ) ) ( if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) ) ( final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ( return ( TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( ( METHOD_3 ( ) ) == ( p . METHOD_3 ( ) ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( final int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ) ( VAR_4 . METHOD_3 ( ( 0 <= VAR_1 ? VAR_1 : 0 ) ) ) ( display ( TYPE_1 . METHOD_4 ( ) ) ) ( display ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) ) ( TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( c ) ) . values ( ) ) ( com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ) ( CFG Exit )
( CFG Entry ) ( org.eclipse.jgit.revwalk.RevCommit METHOD_1( ) ) ( java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ) ( for (java.lang.String VAR_2 : TYPE_4 . METHOD_2 ( )) ) ( endfor ) ( VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 ) ) ) ( VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , STRING_1 ) ) ) ( return TYPE_5 . METHOD_1 ( repo , STRING_2 , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ) ( METHOD_3 ( VAR_1 . changeId , VAR_3 ) ) ( assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) ( METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ) ( METHOD_4 ( user ) ) ( METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository repo ) ) ( return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( TYPE_1 . ProjectConfig config , java.util.Set < java.lang.String > VAR_1 , TYPE_2 VAR_2 ) ) ( for (TYPE_4 VAR_3 : VAR_2 . METHOD_2 ( )) ) ( endfor ) ( for (TYPE_5 VAR_4 : VAR_3 . METHOD_3 ( )) ) ( endfor ) ( METHOD_4 ( VAR_4 ) ) ( boolean VAR_5 = ! ( VAR_2 . equals ( config . METHOD_5 ( VAR_2 . getName ( ) ) ) ) ) ( config . METHOD_1 ( VAR_2 ) ) ( VAR_1 . METHOD_6 ( VAR_2 . getName ( ) ) ) ( return VAR_5 ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( factory ( VAR_1 . Factory class ) ) ( factory ( VAR_2 . Factory class ) ) ( factory ( VAR_3 . Factory class ) ) ( factory ( VAR_4 . Factory class ) ) ( factory ( VAR_5 . Factory class ) ) ( factory ( VAR_6 . Factory class ) ) ( factory ( VAR_7 . Factory class ) ) ( factory ( VAR_8 . Factory class ) ) ( factory ( VAR_9 . Factory class ) ) ( factory ( VAR_10 . Factory class ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) ( java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , false ) ) ( com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( ) ) ( if ( ( METHOD_2 ( ) ) != null ) ) ( try ) ( end-try ) ( return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; ) ( end-catch ) ( catch (TYPE_2 e) ) ( endif ) ( return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( for (com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( )) ) ( endfor ) ( final TYPE_1 VAR_2 = VAR_3 . create ( VAR_4 , p . getAccountId ( ) ) ) ( if ( VAR_2 . METHOD_2 ( ) . contains ( VAR_5 ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) ) ) ( METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( STRING_2 ) . METHOD_9 ( ) , TYPE_1 . METHOD_3 ( STRING_3 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( if ( ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == null ) || ( ( VAR_2 ) != ( VAR_1 ) ) ) ) ) ( TYPE_2 VAR_3 = VAR_4 . create ( VAR_5 , VAR_1 , rw , db , VAR_6 , VAR_7 , VAR_8 ) ) ( try ) ( end-try ) ( VAR_3 . update ( ) ) ( end-catch ) ( catch (TYPE_3 e) ) ( VAR_9 . error ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) ) ( < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ) ( binder . bind ( key ) . METHOD_4 ( new TYPE_8 < TYPE_1 > ( VAR_1 , key ) ) . in ( VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_1 < java.lang.String > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) ) ( for (java.lang.String VAR_3 : VAR_1) ) ( endfor ) ( com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_3 ) ) . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) ) ( com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_2 + VAR_2 ) ) . METHOD_4 ( ( ( TYPE_1 < ? > ) ( VAR_2 ) ) ) . isEmpty ( ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( java.util.List < TYPE_1 > VAR_1 , TYPE_2 ui , com.google.gerrit.reviewdb.server.ReviewDb db ) ) ( for (TYPE_1 VAR_2 : VAR_1) ) ( endfor ) ( ui . message ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) ) ( VAR_2 . METHOD_3 ( db ) ) ( TYPE_4 s = ( ( TYPE_4 ) ( db ) ) ) ( TYPE_5 e = new TYPE_5 ( s ) ) ( try ) ( end-try ) ( s . METHOD_1 ( e ) ) ( finally ) ( e . close ( ) ) ( end-finally ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( final java.lang.String name , java.lang.String value ) ) ( if ( ( value != null ) && ( ( value . length ( ) ) > 0 ) ) ) ( final java.lang.String e = METHOD_2 ( name ) ) ( return METHOD_3 ( name , ( ( e . length ( ) ) > 0 ? ( e + STRING_1 ) + value : e ) ) ; ) ( endif ) ( return this ; ) ( CFG Exit )
( CFG Entry ) ( java.util.Map<java.lang.String,TYPE_1> METHOD_1( ) ) ( try ) ( end-try ) ( return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_2 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( super . METHOD_1 ( ) ) ( if ( ( VAR_1 ) == null ) ) ( VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ) ( endif ) ( CFG Exit )
( CFG Entry ) ( java.util.Set<java.lang.String> METHOD_1( ) ) ( try ) ( end-try ) ( return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_1 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1.ChangeInfo get( TYPE_2 < TYPE_3 > s ) ) ( try ) ( end-try ) ( TYPE_5 u = user . get ( ) ) ( if ( u . METHOD_1 ( ) ) ) ( u . METHOD_2 ( ) . METHOD_3 ( ) ) ( endif ) ( return VAR_1 . create ( s ) . format ( change ) ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new TYPE_4 ( STRING_1 , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( java.lang.String VAR_1 = STRING_1 ) ( java.lang.String VAR_2 = STRING_2 ) ( TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ) ( assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) ) ( assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.PatchSetApproval METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ) ( TYPE_1 notes = VAR_2 . create ( db , c ) . METHOD_2 ( ) ) ( return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . values ( ) ) ( TYPE_2 user = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ) ( return VAR_1 . contains ( user . getAccountId ( ) ) ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( walk . METHOD_2 ( walk . parseCommit ( VAR_1 ) ) ) ( for (org.eclipse.jgit.revwalk.RevCommit commit : walk) ) ( endfor ) ( walk . METHOD_3 ( commit ) ) ( METHOD_4 ( commit ) ) ( METHOD_5 ( ) ) ( for (TYPE_2 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_2 : approvals . METHOD_6 ( ) . values ( )) ) ( endfor ) ( java.util.Collections . METHOD_7 ( ( ( java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > ) ( VAR_2 ) ) , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) ) ( if ( ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) ) ( return false ; ) ( endif ) ( return ( VAR_1 . METHOD_1 ( ) ) && ( METHOD_4 ( ) . getProject ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; ) ( CFG Exit )
( CFG Entry ) ( boolean equals( final TYPE_1 VAR_1 ) ) ( if ( ! ( VAR_1 instanceof TYPE_2 ) ) ) ( return false ; ) ( endif ) ( final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ) ( if ( ( ! ( name . equals ( VAR_2 . name ) ) ) || ( ( VAR_3 ) != ( VAR_4 ) ) ) ) ( return false ; ) ( endif ) ( return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( VAR_2 . METHOD_1 ( ) ) ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( false ) ) ( VAR_1 . METHOD_3 ( false ) ) ( VAR_2 . METHOD_3 ( false ) ) ( super . METHOD_1 ( ) ) ( TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; display ( result ) ; } } ) ) ( CFG Exit )
( CFG Entry ) ( java.lang.String format( ) ) ( if ( ( value ) == ( ( short ) ( 0 ) ) ) ) ( return CHAR_1 + ( name ) ; ) ( endif ) ( if ( ( value ) == ( ( short ) ( 1 ) ) ) ) ( return name ; ) ( endif ) ( if ( ( value ) < 0 ) ) ( return ( name ) + ( value ) ; ) ( endif ) ( return ( ( name ) + CHAR_2 ) + ( value ) ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path , TYPE_1 < TYPE_2 > VAR_1 ) ) ( if ( ( id . get ( ) ) != 0 ) ) ( throw new TYPE_3 ( STRING_1 ) ) ( endif ) ( TYPE_4 . METHOD_2 ( id . getParentKey ( ) . get ( ) , path ) . view ( STRING_2 ) . get ( VAR_1 ) ) ( CFG Exit )
( CFG Entry ) ( boolean METHOD_1( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) ) ( com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ) ( if ( c == null ) ) ( return false ; ) ( endif ) ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ) ( for (com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( )) ) ( endfor ) ( if ( ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ) ) ( return true ; ) ( endif ) ( return false ; ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( final java.lang.String VAR_1 = STRING_1 ) ( TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ) ( TYPE_2 VAR_3 = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 class ) ) ( com.google.common.truth.Truth.assertThat ( VAR_3 . name ) . isEqualTo ( VAR_1 ) ) ( com.google.gerrit.reviewdb.client . AccountGroup group = VAR_5 . get ( new TYPE_3 . NameKey ( VAR_1 ) ) ) ( com.google.common.truth.Truth.assertThat ( group ) . METHOD_5 ( ) ) ( TYPE_4 . METHOD_6 ( group , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) ( TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_2 ) ) ( TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ) ( TYPE_2 d = util . user ( VAR_1 , VAR_3 ) ) ( METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ) ( METHOD_4 ( STRING_5 , d . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_3 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 ) ) ( METHOD_1 ( VAR_1 , VAR_2 . name ( ) , ( VAR_3 != null ? VAR_3 . name ( ) : STRING_1 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) ) ( TYPE_5 < TYPE_1 > VAR_3 = new TYPE_5 < TYPE_1 > ( VAR_4 , VAR_2 ) ) ( try ) ( end-try ) ( if ( ! ( VAR_4 ) ) ) ( TYPE_6 . METHOD_2 ( ) ) ( endif ) ( METHOD_3 ( VAR_1 ) . METHOD_4 ( null , VAR_3 ) ) ( end-catch ) ( catch (TYPE_7 e) ) ( VAR_3 . METHOD_5 ( null , e ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( com.google.gerrit.server.query.change.ChangeData cd ) ) ( try ) ( end-try ) ( TYPE_1 result = new TYPE_1 ( ) ) ( for (TYPE_2 < com.google.gerrit.server.query.change.ChangeData > VAR_1 : schema . METHOD_2 ( cd , VAR_2 )) ) ( endfor ) ( if ( ( VAR_1 . METHOD_3 ( ) ) != null ) ) ( add ( result , VAR_1 ) ) ( endif ) ( return result ; ) ( end-catch ) ( catch (com.google.gwtorm.server.OrmException e) ) ( throw new java.io.IOException ( e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( final TYPE_1 result , final TYPE_2 . Id VAR_1 , final TYPE_3 . Id VAR_2 , final TYPE_4 . ReviewDb db , final TYPE_5 VAR_3 ) ) ( METHOD_1 ( result . change , VAR_4 . getId ( ) , VAR_1 , VAR_2 , db , VAR_3 ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) ) ( assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_3 ) ) ) ( assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_5 ) ) ) ( assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) ( METHOD_3 ( VAR_1 , VAR_2 , STRING_5 , project ) ) ( TYPE_1 in = METHOD_4 ( VAR_3 ) ) ( in . branch = STRING_1 ) ( METHOD_5 ( in , VAR_4 class , STRING_6 ) ) ( CFG Exit )
( CFG Entry ) ( void run( ) ) ( try ) ( end-try ) ( final TYPE_1 cm ) ( cm = VAR_1 . create ( change ) ) ( cm . METHOD_1 ( me ) ) ( cm . METHOD_2 ( ps , info ) ) ( cm . METHOD_3 ( reviewers ) ) ( cm . METHOD_4 ( VAR_2 ) ) ( cm . METHOD_5 ( ) ) ( end-catch ) ( catch (java.lang.Exception e) ) ( VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ) ( CFG Exit )
( CFG Entry ) ( void METHOD_1( ) ) ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( VAR_1 . METHOD_3 ( VAR_2 ) ( new TYPE_2 ( VAR_3 , false ) ) ) ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ( METHOD_6 ( ) ) ( VAR_4 . METHOD_7 ( cd ) ) ( VAR_4 . METHOD_7 ( cd ) ) ( METHOD_8 ( ) ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( TYPE_2 VAR_1 ) ) ( switch ( VAR_1 ) ) ( end-switch ) ( case VAR_2 : ) ( return new TYPE_1 ( ) { public void run ( ) { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } } ; ) ( case VAR_6 : ) ( return new TYPE_1 ( ) { public void run ( ) { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } } ; ) ( default : ) ( return new TYPE_1 ( ) { public void run ( ) { } } ; ) ( CFG Exit )
( CFG Entry ) ( com.google.gerrit.reviewdb.client.PatchSet patch( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) ) ( if ( ( ( VAR_1 ) != null ) && ( VAR_1 . getId ( ) . equals ( psId ) ) ) ) ( return VAR_1 ; ) ( endif ) ( for (com.google.gerrit.reviewdb.client.PatchSet ps : METHOD_1 ( )) ) ( endfor ) ( if ( ps . getId ( ) . equals ( psId ) ) ) ( return ps ; ) ( endif ) ( return null ; ) ( CFG Exit )
( CFG Entry ) ( java.lang.String METHOD_1( TYPE_1 VAR_1 ) ) ( java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ) ( java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ) ( if ( ( args . length ) > 1 ) ) ( return ( VAR_2 + STRING_1 ) + ( args [ 1 ] ) ; ) ( endif ) ( return VAR_2 ; ) ( CFG Exit )
( CFG Entry ) ( TYPE_1 METHOD_1( java.lang.String name , java.lang.String email ) ) ( final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ) ( final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) ( account . METHOD_3 ( name ) ) ( account . METHOD_4 ( email ) ) ( return new TYPE_1 ( new TYPE_3 ( VAR_2 ) , account , java.util.Collections . METHOD_5 ( ) , java.util.Collections . METHOD_5 ( ) , new TYPE_4 < > ( ) ) ; ) ( CFG Exit )
