private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { db . create ( ) ; TYPE_2 . ProjectConfig c = new TYPE_2 . ProjectConfig ( VAR_1 ) ; org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( VAR_1 ) ; try { c . METHOD_3 ( repo ) ; return new TYPE_1 ( TYPE_3 . METHOD_4 ( c . METHOD_5 ( ) . values ( ) ) ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) ) ) ( values . ) ( METHOD_5 . c ( METHOD_4 . TYPE_3 ( TYPE_1 new return ; ) repo ( METHOD_3 . c { try ; ) VAR_1 ( METHOD_2 . VAR_2 = repo org.eclipse.jgit.lib.Repository ; ) VAR_1 ( ProjectConfig . TYPE_2 new = c ProjectConfig . TYPE_2 ; ) ( create . db { java.lang.Exception throws ) ( METHOD_1 TYPE_1 private 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , com.google.gwtorm.server.OrmException { TYPE_5 user = VAR_1 . METHOD_2 ( ) ; try { user . METHOD_3 ( ) ; TYPE_6 change = changes . METHOD_1 ( VAR_2 , id ) ; if ( user . METHOD_4 ( ) . contains ( change . getChange ( ) . getId ( ) ) ) { return new TYPE_7 ( user , change ) ; } throw new TYPE_4 ( id ) ; } finally { user . METHOD_5 ( ) ; } } } } ; ) ( METHOD_5 . user { finally } ; ) id ( TYPE_4 new throw } ; ) change , user ( TYPE_7 new return { ) ) ) ( getId . ) ( getChange . change ( contains . ) ( METHOD_4 . user ( if ; ) id , VAR_2 ( METHOD_1 . changes = change TYPE_6 ; ) ( METHOD_3 . user { try ; ) ( METHOD_2 . VAR_1 = user TYPE_5 { com.google.gwtorm.server.OrmException , TYPE_4 throws ) id TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
private java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) ! = null ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( STRING_1 ) ; return r . toString ( ) ; } return null ; } } ; null return } ; ) ( toString . r return ; ) STRING_1 ( append . r ; ) ) ( METHOD_2 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final { ) null = ! ) ) ( METHOD_2 ( ( if { ) ( METHOD_1 java.lang.String private 
public synchronized void METHOD_1 ( TYPE_1 config ) throws TYPE_2 { super . METHOD_1 ( config ) ; java.lang.String path = config . METHOD_2 ( ) . METHOD_3 ( ) ; base = ( TYPE_3 . METHOD_4 ( path ) ) + STRING_1 ; for ( TYPE_4 VAR_1 : VAR_2 ) { TYPE_5 VAR_3 = METHOD_5 ( VAR_1 ) ; if ( VAR_3 ! = null ) { plugins . put ( VAR_1 . getName ( ) , VAR_3 ) ; } } VAR_2 = null ; } } ; null = VAR_2 } } ; ) VAR_3 , ) ( getName . VAR_1 ( put . plugins { ) null = ! VAR_3 ( if ; ) VAR_1 ( METHOD_5 = VAR_3 TYPE_5 { ) VAR_2 : VAR_1 TYPE_4 ( for ; STRING_1 + ) ) path ( METHOD_4 . TYPE_3 ( = base ; ) ( METHOD_3 . ) ( METHOD_2 . config = path java.lang.String ; ) config ( METHOD_1 . super { TYPE_2 throws ) config TYPE_1 ( METHOD_1 void synchronized public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } } } ; ) e , ) ( change.getId ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; ) e , ) ( change.getId ( TYPE_3 new throw { ) e TYPE_4 ( catch } ; ) change ( METHOD_1 . ) user , VAR_1 ( METHOD_1 . VAR_2 return { try ; ) ( getProject . change = VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey final { com.google.gwtorm.server.OrmException , TYPE_3 throws ) user TYPE_2 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 public 
public java.lang.String toString ( ) { final java.lang.String VAR_1 = getValue ( ) ; if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + VAR_1 ; } else { return ( ( ( METHOD_2 ( ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ; } } } } ; STRING_3 + ) VAR_1 + ) STRING_2 + ) ) ( METHOD_2 ( ( ( return { else } ; VAR_1 + ) STRING_1 + ) ) ( METHOD_2 ( ( return { ) ) VAR_1 ( METHOD_1 . TYPE_1 ( if ; ) ( getValue = VAR_1 java.lang.String final { ) ( toString java.lang.String public 
private < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 r , TYPE_3 < TYPE_1 > VAR_1 ) throws java.lang.Exception { r . METHOD_2 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( r . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( true ) ; return METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) ; } } ; ) VAR_1 , VAR_2 ( METHOD_6 . ) ( METHOD_5 return ; ) true ( METHOD_4 . VAR_2 ; ) ) ( METHOD_3 . r ( TYPE_4 new = VAR_2 TYPE_4 ; ) ( METHOD_2 . r { java.lang.Exception throws ) VAR_1 > TYPE_1 < TYPE_3 , r TYPE_2 ( METHOD_1 TYPE_1 > TYPE_1 < private 
java.util.List < TYPE_1 > METHOD_1 ( ) { if ( VAR_1 ) { return METHOD_2 ( ) ; } java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_3 ( ) ; for ( TYPE_3 s : METHOD_4 ( ) ) { VAR_2 . METHOD_5 ( s . METHOD_2 ( ) ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ) ( METHOD_2 . s ( METHOD_5 . VAR_2 { ) ) ( METHOD_4 : s TYPE_3 ( for ; ) ( METHOD_3 . TYPE_2 = VAR_2 > TYPE_1 < java.util.List } ; ) ( METHOD_2 return { ) VAR_1 ( if { ) ( METHOD_1 > TYPE_1 < java.util.List 
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) ! = null ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_2 = new TYPE_2 ( new TYPE_3 . Factory ( ) . METHOD_2 ( ) ) ; for ( TYPE_4 < ? , ? > p : VAR_3 . values ( ) ) { p . bind ( VAR_2 . METHOD_3 ( p . getName ( ) ) ) ; } } } } } } ; ) ) ) ( getName . p ( METHOD_3 . VAR_2 ( bind . p { ) ) ( values . VAR_3 : p > ? , ? < TYPE_4 ( for ; ) ) ( METHOD_2 . ) ( Factory . TYPE_3 new ( TYPE_2 new = VAR_2 } ; ) STRING_1 ( TYPE_1 new throw { ) null = ! ) VAR_2 ( ( if { ) VAR_1 ( synchronized { ) ( METHOD_1 void public 
private void METHOD_1 ( ) throws TYPE_1 { TYPE_2 ctl = VAR_1 . get ( ) . METHOD_2 ( ) ; if ( ! ( ctl . METHOD_3 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) ) { throw new TYPE_1 ( java.lang.String.format ( STRING_2 , VAR_1 . get ( ) . METHOD_4 ( ) , new TYPE_3 ( ) . METHOD_5 ( ) ) ) ; } } } } ; ) ) ) ( METHOD_5 . ) ( TYPE_3 new , ) ( METHOD_4 . ) ( get . VAR_1 , STRING_2 ( java.lang.String.format ( TYPE_1 new throw { ) ) ) ) ) VAR_3 ( + ) STRING_1 + ) VAR_2 ( ( ( ( METHOD_3 . ctl ( ! ( if ; ) ( METHOD_2 . ) ( get . VAR_1 = ctl TYPE_2 { TYPE_1 throws ) ( METHOD_1 void private 
public TYPE_1 run ( TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . AccountGroup group = db . METHOD_1 ( ) . get ( VAR_1 ) ; METHOD_2 ( db , group ) ; final TYPE_1 d = new TYPE_1 ( ) ; final boolean VAR_2 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( group . getId ( ) ) ; d . METHOD_5 ( db , new TYPE_6 ( db ) , group , VAR_2 ) ; return d ; } } ; d return ; ) VAR_2 , group , ) db ( TYPE_6 new , db ( METHOD_5 . d ; ) ) ( getId . group ( METHOD_4 . ) ( METHOD_3 . TYPE_5 = VAR_2 boolean final ; ) ( TYPE_1 new = d TYPE_1 final ; ) group , db ( METHOD_2 ; ) VAR_1 ( get . ) ( METHOD_1 . db = group AccountGroup . TYPE_2 final { OrmException . TYPE_4 , TYPE_3 throws ) db ReviewDb . TYPE_2 ( run TYPE_1 public 
protected TYPE_1 . Result METHOD_1 ( java.lang.String changeId , java.lang.String ref ) throws java.io.IOException , TYPE_2 { java.util.Collections . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ; return VAR_2 . to ( git , ref ) ; } } ; ) ref , git ( to . VAR_2 return ; ) changeId , ) ) VAR_1 ( METHOD_4 . TYPE_4 ( java.lang.String new , VAR_5 , VAR_4 , ) ( METHOD_3 . admin , db ( create . VAR_3 = VAR_2 TYPE_3 ; ) VAR_1 ( METHOD_2 . java.util.Collections { TYPE_2 , java.io.IOException throws ) ref java.lang.String , changeId java.lang.String ( METHOD_1 Result . TYPE_1 protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i < = INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } } } ; ) change , VAR_1 ( METHOD_4 ; ) ) i - INT_2 ( , 0 ( METHOD_5 . key = VAR_1 java.lang.String { ) ++ i ; INT_1 = < i ; 0 = i int ( for ; ) STRING_2 ( METHOD_4 ; ) ( get . ) ( getKey . change = key java.lang.String ; ) ) null , null , null , null , repo ( METHOD_3 ( insert = change com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public final int METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { final java.lang.String n = VAR_1 . METHOD_2 ( 0 ) ; final TYPE_3 . AccountGroup group = VAR_2 . get ( new TYPE_4 . NameKey ( n ) ) ; if ( group == null ) { throw new TYPE_2 ( VAR_3 , ( ( STRING_1 + n ) + STRING_2 ) ) ; } VAR_4 . METHOD_3 ( group . getId ( ) ) ; return 1 ; } } ; 1 return ; ) ) ( getId . group ( METHOD_3 . VAR_4 } ; ) ) STRING_2 + ) n + STRING_1 ( ( , VAR_3 ( TYPE_2 new throw { ) null == group ( if ; ) ) n ( NameKey . TYPE_4 new ( get . VAR_2 = group AccountGroup . TYPE_3 final ; ) 0 ( METHOD_2 . VAR_1 = n java.lang.String final { TYPE_2 throws ) VAR_1 TYPE_1 final ( METHOD_1 int final public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_6 ) ; } } ; ) VAR_6 ( isEqualTo . ) ) ( url . ) ( METHOD_3 . ) ( METHOD_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_6 , VAR_5 , VAR_4 , VAR_3 ( METHOD_4 . VAR_2 ; ) VAR_1 ( isEqualTo . ) ) ( url . ) ( METHOD_3 . ) ( METHOD_2 ( com.google.common.truth.Truth.assertThat { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . ) VAR_10 ( METHOD_6 . ) VAR_9 , VAR_8 ( METHOD_5 . ) VAR_7 , VAR_6 ( METHOD_5 . ) VAR_3 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_3 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 , VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) { try { METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 e ) { TYPE_2 [ ] VAR_1 = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ; java.lang.String VAR_2 = TYPE_5 . toString ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) ; } } } } ; ) STRING_3 ( contains . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) STRING_2 ( METHOD_7 . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_1 ( toString . TYPE_5 = VAR_2 java.lang.String ; ) ] 1 [ ) ( METHOD_5 . ) ( METHOD_6 . TYPE_4 , ) ( METHOD_5 . e ( METHOD_4 . TYPE_3 = VAR_1 ] [ TYPE_2 { ) e TYPE_1 ( catch } ; ) STRING_1 ( METHOD_3 . org.junit.Assert ; ) ( METHOD_2 { try { ) ( METHOD_1 void private 
void display ( final java.util.List < TYPE_1 . Branch > result ) { VAR_1 = false ; while ( 1 < ( table . METHOD_1 ( ) ) ) table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ; for ( final TYPE_1 . Branch VAR_2 : result ) { final int row = table . METHOD_1 ( ) ; table . METHOD_3 ( row ) ; METHOD_4 ( row ) ; METHOD_5 ( row , VAR_2 ) ; } } } } ; ) VAR_2 , row ( METHOD_5 ; ) row ( METHOD_4 ; ) row ( METHOD_3 . table ; ) ( METHOD_1 . table = row int final { ) result : VAR_2 Branch . TYPE_1 final ( for ; ) ) 1 - ) ) ( METHOD_1 . table ( ( ( METHOD_2 . table ) ) ) ( METHOD_1 . table ( < 1 ( while ; false = VAR_1 { ) result > Branch . TYPE_1 < java.util.List final ( display void 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { public void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; } } ) ; install ( new TYPE_2 ( VAR_2 ) ) ; if ( ( ( VAR_3 ) == null ) & & ( ( base ) == null ) ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( ) ) ; } } } } ; ) ) ( TYPE_4 new ( install { else } ; ) ) ( TYPE_3 new ( install { ) ) null == ) base ( ( & & ) null == ) VAR_3 ( ( ( if ; ) ) VAR_2 ( TYPE_2 new ( install ; ) } } ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void public { ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 project ) { for ( TYPE_2 p : project . METHOD_2 ( ) ) { TYPE_3 cfg = VAR_2 . METHOD_3 ( p , VAR_3 ) ; if ( cfg . METHOD_4 ( VAR_4 ) . contains ( VAR_1 ) ) { return new TYPE_4 ( cfg ) . METHOD_1 ( VAR_1 ) ; } } return new TYPE_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_1 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_1 . ) ) VAR_3 ( METHOD_5 . VAR_2 ( TYPE_4 new return } } ; ) VAR_1 ( METHOD_1 . ) cfg ( TYPE_4 new return { ) ) VAR_1 ( contains . ) VAR_4 ( METHOD_4 . cfg ( if ; ) VAR_3 , p ( METHOD_3 . VAR_2 = cfg TYPE_3 { ) ) ( METHOD_2 . project : p TYPE_2 ( for { ) project TYPE_2 , VAR_1 java.lang.String ( METHOD_1 TYPE_1 private 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( project , branch , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_5 ; ) ) ) ( METHOD_4 . result ( METHOD_3 . TYPE_5 ( display . TYPE_4 { ) result ChangeInfo . TYPE_3 ( onSuccess void public { ) ( > ChangeInfo . TYPE_3 < TYPE_2 new , base , message , branch , project ( METHOD_2 . TYPE_1 { ) message java.lang.String ( METHOD_1 void 
TYPE_1 METHOD_1 ( java.lang.String name ) { try { TYPE_2 p = METHOD_2 ( name ) ; return VAR_1 . get ( p , METHOD_3 ( p ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) ; return null ; } } } } ; null return ; ) e , ) name , STRING_1 ( java.lang.String.format ( METHOD_4 . VAR_2 { ) e TYPE_3 ( catch } ; ) ) p ( METHOD_3 , p ( get . VAR_1 return ; ) name ( METHOD_2 = p TYPE_2 { try { ) name java.lang.String ( METHOD_1 TYPE_1 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; TYPE_2 < java.lang.String > VAR_4 = VAR_5 . get ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_2 ( ) . METHOD_6 ( ) ; while ( VAR_4 . METHOD_7 ( ) ) { VAR_3 . add ( VAR_4 . METHOD_5 ( ) ) ; } org.junit.Assert.assertEquals ( VAR_3 , TYPE_3 . METHOD_8 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( METHOD_8 . TYPE_3 , VAR_3 ( org.junit.Assert.assertEquals } ; ) ) ( METHOD_5 . VAR_4 ( add . VAR_3 { ) ) ( METHOD_7 . VAR_4 ( while ; ) ( METHOD_6 . ) ( METHOD_2 . ) ( METHOD_5 . ) ( METHOD_4 . ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( get . VAR_5 = VAR_4 > java.lang.String < TYPE_2 ; ) ( > < java.util.ArrayList new = VAR_3 > java.lang.String < java.util.List { java.lang.Exception throws ) VAR_2 ... java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = factory . create ( user . id ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 event ) { if ( event instanceof TYPE_5 ) { TYPE_5 VAR_4 = ( ( TYPE_5 ) ( event ) ) ; VAR_1 . put ( VAR_5 , VAR_6 ) ; } } } , VAR_2 ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; } } ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = project ; ) VAR_2 , } } } ; ) VAR_6 , VAR_5 ( put . VAR_1 ; ) ) event ( ) TYPE_5 ( ( = VAR_4 TYPE_5 { ) TYPE_5 instanceof event ( if { ) event TYPE_4 ( METHOD_4 void public { ) ( TYPE_3 new ( METHOD_3 . VAR_3 ; ) id . user ( create . factory = VAR_2 TYPE_2 ; ) ( METHOD_2 . TYPE_1 = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } return new TYPE_1 ( VAR_1 , id . get ( ) ) ; } } ; ) ) ( get . id , VAR_1 ( TYPE_1 new return } ; ) STRING_1 ( TYPE_5 new throw { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( ! ( if { com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 throws ) id TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
static boolean METHOD_1 ( final int VAR_1 ) { switch ( VAR_1 ) { case CHAR_1 : case CHAR_2 : case CHAR_3 : case CHAR_4 : case CHAR_5 : case CHAR_6 : case CHAR_7 : return false ; default : if ( ( ( ( CHAR_8 < = VAR_1 ) & & ( VAR_1 < = CHAR_9 ) ) || ( ( CHAR_10 < = VAR_1 ) & & ( VAR_1 < = CHAR_11 ) ) ) || ( ( CHAR_12 < = VAR_1 ) & & ( VAR_1 < = CHAR_13 ) ) ) { return false ; } else { return true ; } } } } } } ; true return { else } ; false return { ) ) ) CHAR_13 = < VAR_1 ( & & ) VAR_1 = < CHAR_12 ( ( || ) ) ) CHAR_11 = < VAR_1 ( & & ) VAR_1 = < CHAR_10 ( ( || ) ) CHAR_9 = < VAR_1 ( & & ) VAR_1 = < CHAR_8 ( ( ( ( if : default ; false return : CHAR_7 case : CHAR_6 case : CHAR_5 case : CHAR_4 case : CHAR_3 case : CHAR_2 case : CHAR_1 case { ) VAR_1 ( switch { ) VAR_1 int final ( METHOD_1 boolean static 
protected void METHOD_1 ( java.lang.String changeId ) throws java.io.IOException { TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( 2 ) ; com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ; } } ; ) ) ( getId . admin ( isEqualTo . ) ) VAR_5 . ) 0 ( get . VAR_4 ( com.google.gerrit.reviewdb.client.Account.Id new ( com.google.common.truth.Truth.assertThat ; ) 2 ( isEqualTo . ) ) ( METHOD_3 . value . ) 0 ( get . VAR_4 ( com.google.common.truth.Truth.assertThat ; ) 1 ( METHOD_2 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) STRING_1 ( get . VAR_3 = VAR_2 TYPE_2 ; ) VAR_1 , changeId ( getChange = c ChangeInfo . TYPE_1 { java.io.IOException throws ) changeId java.lang.String ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 0 ) , INT_1 ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . out , ) ) 1 ( METHOD_6 . in , ) INT_1 , ) 0 ( METHOD_6 . in ( query ( of . TYPE_2 ( assertEquals ; ) ) ( METHOD_5 . out , class VAR_1 ( METHOD_4 ; ) in ( METHOD_3 = out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) STRING_1 ( METHOD_2 = in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 . OrmException { final TYPE_3 VAR_1 = VAR_2 . create ( ) ; final TYPE_4 . Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_2 ( VAR_3 , null , null , me ) ; } } ; ) me , null , null , VAR_3 ( METHOD_2 . VAR_1 return ; ) ( getAccountId . user = me Id . TYPE_4 final ; ) ( create . VAR_2 = VAR_1 TYPE_3 final { OrmException . TYPE_2 , TYPE_1 throws ) ( METHOD_1 Id . AccountGroup public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . create ( ( VAR_1 + STRING_2 ) ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_3 ) ; } } ; ) STRING_3 , VAR_1 ( METHOD_4 ; ) p , ) ( getProject . VAR_3 ( METHOD_3 . TYPE_3 ; ) ( METHOD_2 . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ) VAR_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( get . VAR_4 = VAR_3 TYPE_2 ; ) VAR_1 ( isEqualTo . ) name . p ( com.google.common.truth.Truth.assertThat ; ) ( get . ) ) STRING_2 + VAR_1 ( ( create . ) ( projects . VAR_2 = p TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
private static void METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String path , byte [ ] VAR_4 ) throws TYPE_4 , java.io.IOException { switch ( VAR_1 ) { case VAR_5 : VAR_2 . add ( new TYPE_5 ( path ) ) ; break ; case VAR_6 : case VAR_7 : VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ; break ; } VAR_2 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . VAR_2 } ; break ; ) ) VAR_4 , VAR_3 , path , base , rw , repo , VAR_1 ( METHOD_2 . TYPE_6 ( add . VAR_2 : VAR_7 case : VAR_6 case ; break ; ) ) path ( TYPE_5 new ( add . VAR_2 : VAR_5 case { ) VAR_1 ( switch { java.io.IOException , TYPE_4 throws ) VAR_4 ] [ byte , path java.lang.String , VAR_3 TYPE_3 , VAR_2 TYPE_2 , base org.eclipse.jgit.revwalk.RevCommit , rw org.eclipse.jgit.revwalk.RevWalk , repo org.eclipse.jgit.lib.Repository , VAR_1 TYPE_1 ( METHOD_1 void static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_3 , VAR_11 ) . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . ) VAR_11 , VAR_3 ( METHOD_6 . ) VAR_10 ( METHOD_5 . ) VAR_9 , VAR_8 ( METHOD_5 . ) VAR_7 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_6 ( assertThat ; ) VAR_5 , VAR_4 , changeId . VAR_1 , VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1 = VAR_2 . create ( cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ; if ( ( VAR_1 . status ) ! = ( VAR_3 ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; } return VAR_1 . type ; } } ; type . VAR_1 return } ; ) ) VAR_1 + STRING_1 ( ( com.google.gwtorm.server.OrmException new throw { ) ) VAR_3 ( = ! ) status . VAR_1 ( ( if ; ) ( METHOD_1 . ) patchSet ( METHOD_2 . ) cd ( create . VAR_2 = VAR_1 TYPE_2 { com.google.gwtorm.server.OrmException throws ) patchSet com.google.gerrit.reviewdb.client.PatchSet , cd com.google.gerrit.server.query.change.ChangeData ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) + STRING_2 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) ) ; } } ; ) ) ) STRING_7 + ) STRING_6 + ) STRING_5 + ) STRING_4 + ) STRING_2 + ) ) VAR_2 ( + ) ) VAR_1 ( + ) STRING_2 + STRING_1 ( ( ( ( ( ( ( ( ( METHOD_2 , ) ) VAR_2 ( + ) ) VAR_1 ( + ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) throws java.lang.Exception { try { METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 e ) { TYPE_2 [ ] VAR_1 = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ; java.lang.String VAR_2 = TYPE_5 . toString ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) ; } } } } ; ) STRING_3 ( contains . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) STRING_2 ( METHOD_7 . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_1 ( toString . TYPE_5 = VAR_2 java.lang.String ; ) ] 1 [ ) ( METHOD_5 . ) ( METHOD_6 . TYPE_4 , ) ( METHOD_5 . e ( METHOD_4 . TYPE_3 = VAR_1 ] [ TYPE_2 { ) e TYPE_1 ( catch } ; ) STRING_1 ( METHOD_3 . org.junit.Assert ; ) ( METHOD_2 { try { java.lang.Exception throws ) ( METHOD_1 void private 
private static java.lang.String METHOD_1 ( final TYPE_1 me ) { if ( me == null ) { return STRING_1 ; } try { final TYPE_2 VAR_1 = new TYPE_2 ( me ) ; try { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; java.lang.String VAR_4 = VAR_3 . getValue ( VAR_5 ) ; return VAR_4 ! = null ? VAR_4 : STRING_1 ; } finally { VAR_1 . close ( ) ; } } catch ( java.io.IOException e ) { return STRING_1 ; } } } } ; STRING_1 return { ) e java.io.IOException ( catch } } ; ) ( close . VAR_1 { finally } ; STRING_1 : VAR_4 ? null = ! VAR_4 return ; ) VAR_5 ( getValue . VAR_3 = VAR_4 java.lang.String ; ) ( METHOD_3 . VAR_2 = VAR_3 TYPE_4 ; ) ( METHOD_2 . VAR_1 = VAR_2 TYPE_3 { try ; ) me ( TYPE_2 new = VAR_1 TYPE_2 final { try } ; STRING_1 return { ) null == me ( if { ) me TYPE_1 final ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; repo . branch ( STRING_2 ) . commit ( ) . edit ( new TYPE_2 ( STRING_3 ) { public void apply ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; } } ) . create ( ) ; java.lang.String VAR_4 = METHOD_5 ( STRING_4 , STRING_5 ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_4 ) ; } } ; ) VAR_4 , STRING_1 ( org.junit.Assert.assertEquals ; ) STRING_5 , STRING_4 ( METHOD_5 = VAR_4 java.lang.String ; ) ( create . ) } } ; ) VAR_1 ( METHOD_4 . VAR_2 ; ) VAR_3 ( METHOD_3 . VAR_2 { ) VAR_2 TYPE_3 ( apply void public { ) STRING_3 ( TYPE_2 new ( edit . ) ( commit . ) STRING_2 ( branch . repo ; ) STRING_1 ( METHOD_2 . repo = VAR_1 TYPE_1 final { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 > > ( ) { public void onSuccess ( final java.util.List < TYPE_3 > result ) { VAR_1 . display ( result ) ; } } ) ; } } ; ) } } ; ) result ( display . VAR_1 { ) result > TYPE_3 < java.util.List final ( onSuccess void public { ) ( > > TYPE_3 < java.util.List < TYPE_2 new ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
public void put ( final TYPE_1 key , TYPE_2 VAR_1 ) { final TYPE_3 < TYPE_2 > VAR_2 = new TYPE_3 < > ( VAR_1 ) ; VAR_3 = TYPE_4 . METHOD_1 ( ) ; VAR_4 . put ( key , VAR_2 ) ; VAR_5 . METHOD_2 ( new TYPE_5 ( ) { public void run ( ) { VAR_6 . put ( key , VAR_2 ) ; } } ) ; } } ; ) } } ; ) VAR_2 , key ( put . VAR_6 { ) ( run void public { ) ( TYPE_5 new ( METHOD_2 . VAR_5 ; ) VAR_2 , key ( put . VAR_4 ; ) ( METHOD_1 . TYPE_4 = VAR_3 ; ) VAR_1 ( > < TYPE_3 new = VAR_2 > TYPE_2 < TYPE_3 final { ) VAR_1 TYPE_2 , key TYPE_1 final ( put void public 
public void onSuccess ( TYPE_1 info ) { if ( info . METHOD_1 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) ) ; } if ( info . METHOD_3 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) ) ; } if ( info . METHOD_4 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) ) ; } } } } ; ) ) ( Factory . TYPE_5 new , VAR_2 ( METHOD_2 . ) ( get . TYPE_2 { ) ) ( METHOD_4 . info ( if } ; ) ) ( Factory . TYPE_4 new , VAR_1 ( METHOD_2 . ) ( get . TYPE_2 { ) ) ( METHOD_3 . info ( if } ; ) ) ( Factory . TYPE_3 new , VAR_1 ( METHOD_2 . ) ( get . TYPE_2 { ) ) ( METHOD_1 . info ( if { ) info TYPE_1 ( onSuccess void public 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) throws java.io.IOException { METHOD_2 ( res , VAR_3 ) ; res . METHOD_3 ( VAR_4 ) ; try ( TYPE_5 VAR_5 = TYPE_6 . METHOD_4 ( req , res ) ) { METHOD_5 ( req ) . create ( ) . METHOD_6 ( VAR_1 , VAR_2 , VAR_5 ) ; VAR_5 . METHOD_7 ( CHAR_1 ) ; } } } } ; ) CHAR_1 ( METHOD_7 . VAR_5 ; ) VAR_5 , VAR_2 , VAR_1 ( METHOD_6 . ) ( create . ) req ( METHOD_5 { ) ) res , req ( METHOD_4 . TYPE_6 = VAR_5 TYPE_5 ( try ; ) VAR_4 ( METHOD_3 . res ; ) VAR_3 , res ( METHOD_2 { java.io.IOException throws ) VAR_2 TYPE_4 , VAR_1 TYPE_3 , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ; } } ; ) STRING_6 , STRING_5 , STRING_2 , ) STRING_4 + ) VAR_4 ( ( , ) STRING_3 + ) VAR_4 ( ( , ) STRING_4 + ) VAR_3 ( ( , ) STRING_3 + ) VAR_3 ( ( ( METHOD_5 ; ) user ( METHOD_4 ; ) STRING_2 , VAR_2 , VAR_1 ( METHOD_3 ; ) VAR_2 , VAR_1 , STRING_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) ) & & ( ! ( METHOD_4 ( ) ) ) ) { return VAR_2 ; } else if ( VAR_3 . get ( ) ) { return VAR_4 ; } final long VAR_5 = METHOD_5 ( VAR_6 ) ; if ( VAR_5 < = 0 ) { return VAR_7 ; } else { return VAR_8 ; } } } } ; VAR_8 return { else } ; VAR_7 return { ) 0 = < VAR_5 ( if ; ) VAR_6 ( METHOD_5 = VAR_5 long final } ; VAR_4 return { ) ) ( get . VAR_3 ( if else } ; VAR_2 return { ) ) ) ) ( METHOD_4 ( ! ( & & ) ) ( METHOD_3 ( ( if else } ; VAR_1 return { ) ) ( METHOD_2 ( if { ) ( METHOD_1 TYPE_1 public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ; return new TYPE_3 ( key , VAR_4 , project , repo ) . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { VAR_5 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) ; return VAR_6 ; } } } } ; VAR_6 return ; ) e , ) project + ) STRING_2 + ) ) ) ( name . VAR_2 ( + STRING_1 ( ( ( ( METHOD_3 . VAR_5 { ) e java.io.IOException ( catch } ; ) ( METHOD_2 . ) repo , project , VAR_4 , key ( TYPE_3 new return ; ) VAR_3 , VAR_2 , VAR_1 ( Key . TYPE_2 new = key Key . TYPE_2 { try { ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 org.eclipse.jgit.lib.ObjectId , repo org.eclipse.jgit.lib.Repository , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 . get ( ) ) ; TYPE_2 r = METHOD_3 ( STRING_2 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) ; java.util.Map < java.lang.String , TYPE_3 > result = TYPE_4 . METHOD_5 ( r ) ; TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_4 , VAR_1 , project ) , result . values ( ) ) ; } } ; ) ) ( values . result , ) project , VAR_1 , VAR_4 ( METHOD_7 . TYPE_6 ( METHOD_6 . TYPE_5 ; ) r ( METHOD_5 . TYPE_4 = result > TYPE_3 , java.lang.String < java.util.Map ; ) ) ( METHOD_4 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) STRING_2 ( METHOD_3 = r TYPE_2 ; ) ) ( get . VAR_1 , VAR_2 ( METHOD_2 . TYPE_1 ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( ! ( METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( METHOD_4 ( db ) ) ) || ( ! ( METHOD_5 ( VAR_1 . METHOD_6 ( db , notes ) , db ) ) ) ) { return false ; } if ( METHOD_7 ( ) ) { return true ; } return METHOD_2 ( ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ( METHOD_2 return } ; true return { ) ) ( METHOD_7 ( if } ; false return { ) ) ) ) db , ) notes , db ( METHOD_6 . VAR_1 ( METHOD_5 ( ! ( || ) ) ) db ( METHOD_4 ( || ) ) ) ( METHOD_3 . ) ( METHOD_2 ( ! ( ( ( if { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 . Collections < java.lang.String , java.util.ArrayList < TYPE_2 > > METHOD_3 ( ) ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , TYPE_3 . of ( STRING_1 , TYPE_4 . METHOD_4 ( VAR_5 , VAR_6 ) ) ) ; } } ; ) ) ) VAR_6 , VAR_5 ( METHOD_4 . TYPE_4 , STRING_1 ( of . TYPE_3 , VAR_4 , VAR_1 ( METHOD_2 . TYPE_1 ; ) ) ( METHOD_3 > > TYPE_2 < java.util.ArrayList , java.lang.String < Collections . VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final TYPE_2 . Id id = res . getAccountId ( ) ; final TYPE_3 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) ! = null ) { VAR_4 . METHOD_3 ( key ) ; key = null ; VAR_3 = null ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; } } ; ) ( METHOD_6 ; ) VAR_2 , VAR_1 , id , key ( METHOD_5 . VAR_4 = VAR_3 ; ) id ( METHOD_4 . VAR_4 = key } ; null = VAR_3 ; null = key ; ) key ( METHOD_3 . VAR_4 { ) null = ! ) VAR_3 ( ( if ; ) ( METHOD_2 . res = VAR_2 Key . TYPE_3 final ; ) ( getAccountId . res = id Id . TYPE_2 final { ) VAR_1 boolean final , res TYPE_1 final ( METHOD_1 void public 
public void run ( ) { try { VAR_1 . get ( ) ; } catch ( TYPE_1 e ) { METHOD_1 ( project , e ) ; } catch ( TYPE_2 e ) { VAR_2 . set ( false ) ; } catch ( TYPE_3 e ) { METHOD_2 ( project , e ) ; } catch ( TYPE_4 e ) { METHOD_2 ( project , e ) ; } finally { VAR_3 . update ( 1 ) ; } } } } ; ) 1 ( update . VAR_3 { finally } ; ) e , project ( METHOD_2 { ) e TYPE_4 ( catch } ; ) e , project ( METHOD_2 { ) e TYPE_3 ( catch } ; ) false ( set . VAR_2 { ) e TYPE_2 ( catch } ; ) e , project ( METHOD_1 { ) e TYPE_1 ( catch } ; ) ( get . VAR_1 { try { ) ( run void public 
public void METHOD_1 ( TYPE_1 event ) { event . METHOD_2 ( ) ; event . METHOD_3 ( ) ; METHOD_4 ( ) ; if ( TYPE_2 . METHOD_5 ( ) ) { TYPE_3 VAR_1 = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ; VAR_1 . METHOD_8 ( VAR_2 ) ; TYPE_4 . METHOD_9 ( VAR_1 , new TYPE_5 < TYPE_6 > ( ) { public void METHOD_10 ( TYPE_7 VAR_3 ) { } public void onSuccess ( TYPE_6 result ) { } } ) ; } } } } ; ) } } { ) result TYPE_6 ( onSuccess void public } { ) VAR_3 TYPE_7 ( METHOD_10 void public { ) ( > TYPE_6 < TYPE_5 new , VAR_1 ( METHOD_9 . TYPE_4 ; ) VAR_2 ( METHOD_8 . VAR_1 ; ) ( METHOD_7 . ) ( METHOD_6 . TYPE_2 = VAR_1 TYPE_3 { ) ) ( METHOD_5 . TYPE_2 ( if ; ) ( METHOD_4 ; ) ( METHOD_3 . event ; ) ( METHOD_2 . event { ) event TYPE_1 ( METHOD_1 void public 
private java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 . ChangeInfo change ) { java.util.Set < TYPE_1 > result = new TYPE_3 < TYPE_1 > ( change . METHOD_2 ( ) . length ( ) ) ; for ( int i = 0 ; i < ( change . METHOD_2 ( ) . length ( ) ) ; i ++ ) { result . add ( change . METHOD_2 ( ) . get ( i ) . METHOD_3 ( ) ) ; } return result ; } } ; result return } ; ) ) ( METHOD_3 . ) i ( get . ) ( METHOD_2 . change ( add . result { ) ++ i ; ) ) ( length . ) ( METHOD_2 . change ( < i ; 0 = i int ( for ; ) ) ( length . ) ( METHOD_2 . change ( > TYPE_1 < TYPE_3 new = result > TYPE_1 < java.util.Set { ) change ChangeInfo . TYPE_2 ( METHOD_1 > TYPE_1 < java.util.Set private 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 = METHOD_2 ( VAR_2 , STRING_1 , 1 ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_3 = METHOD_2 ( VAR_2 , STRING_2 , 1 ) ; org.junit.Assert.assertEquals ( TYPE_1 . create ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) , VAR_4 . METHOD_4 ( change , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) ) ; } } ; ) ) ) VAR_3 , VAR_1 ( METHOD_3 . TYPE_2 , change ( METHOD_4 . VAR_4 , ) ) VAR_3 , VAR_1 ( METHOD_3 . TYPE_2 , ) ( METHOD_3 . TYPE_2 , ) ( METHOD_3 . TYPE_2 ( create . TYPE_1 ( org.junit.Assert.assertEquals ; ) 1 , STRING_2 , VAR_2 ( METHOD_2 = VAR_3 PatchSetApproval . com.google.gerrit.reviewdb.client ; ) 1 , STRING_1 , VAR_2 ( METHOD_2 = VAR_1 PatchSetApproval . com.google.gerrit.reviewdb.client { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > r ) throws TYPE_3 { if ( ( r . METHOD_2 ( ) . METHOD_3 ( ) ) == 0 ) { return TYPE_4 . METHOD_4 ( r . METHOD_5 ( ) . getName ( ) , TYPE_5 . METHOD_6 ( r . METHOD_7 ( ) ) , VAR_1 , true , true ) ; } throw new TYPE_3 ( ( STRING_1 + r ) ) ; } } ; ) ) r + STRING_1 ( ( TYPE_3 new throw } ; ) true , true , VAR_1 , ) ) ( METHOD_7 . r ( METHOD_6 . TYPE_5 , ) ( getName . ) ( METHOD_5 . r ( METHOD_4 . TYPE_4 return { ) 0 == ) ) ( METHOD_3 . ) ( METHOD_2 . r ( ( if { TYPE_3 throws ) r > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final TYPE_1 e = TYPE_1 . METHOD_2 ( name ) ; METHOD_3 ( e . METHOD_4 ( ) ) ; assertEquals ( name , e . METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 , e . METHOD_7 ( ) ) ; METHOD_6 ( VAR_2 , e . METHOD_8 ( ) ) ; METHOD_9 ( e . METHOD_10 ( ) . isEmpty ( ) ) ; } } ; ) ) ( isEmpty . ) ( METHOD_10 . e ( METHOD_9 ; ) ) ( METHOD_8 . e , VAR_2 ( METHOD_6 ; ) ) ( METHOD_7 . e , VAR_1 ( METHOD_6 ; ) ) ( METHOD_5 . e , name ( assertEquals ; ) ) ( METHOD_4 . e ( METHOD_3 ; ) name ( METHOD_2 . TYPE_1 = e TYPE_1 final ; STRING_1 = name java.lang.String final { ) ( METHOD_1 void public 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { int n = ( VAR_2 . METHOD_2 ( ) ) - 1 ; TYPE_1 . METHOD_3 ( ( ( VAR_1 . size ( ) ) < = n ) , STRING_1 , n ) ; return query ( TYPE_2 . METHOD_4 ( TYPE_3 . project ( project ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_3 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; } } ; ) ) ) ) VAR_1 , ) VAR_3 ( schema . TYPE_3 ( METHOD_6 . TYPE_3 ( METHOD_5 . TYPE_2 , ) project ( project . TYPE_3 ( METHOD_4 . TYPE_2 ( query return ; ) n , STRING_1 , ) n = < ) ) ( size . VAR_1 ( ( ( METHOD_3 . TYPE_1 ; 1 - ) ) ( METHOD_2 . VAR_2 ( = n int { com.google.gwtorm.server.OrmException throws ) VAR_1 > java.lang.String < java.util.List , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < java.util.List public 
private java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { java.util.List < java.lang.String > r = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 w : db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , psId ) ) { r . add ( w . getKey ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } return r ; } } ; r return } ; ) ) ( METHOD_6 . ) ( METHOD_5 . ) ( getKey . w ( add . r { ) ) psId , VAR_1 ( METHOD_4 . ) ( METHOD_3 . ) ( get . db : w TYPE_2 ( for ; ) ( METHOD_2 . TYPE_1 = r > java.lang.String < java.util.List { com.google.gwtorm.server.OrmException throws ) psId com.google.gerrit.reviewdb.client.PatchSet.Id , VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 > java.lang.String < java.util.List private 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 args , java.util.Set < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { r . add ( new TYPE_4 ( args , id ) ) ; } return r ; } } ; r return } ; ) ) id , args ( TYPE_4 new ( add . r { ) VAR_1 : id Id . com.google.gerrit.reviewdb.client.Change ( for ; ) ) ( size . VAR_1 ( METHOD_2 . TYPE_3 = r > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List { ) VAR_1 > Id . com.google.gerrit.reviewdb.client.Change < java.util.Set , args TYPE_2 ( METHOD_1 > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List static private 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; java.util.Set < java.lang.String > VAR_1 = TYPE_1 . METHOD_3 ( new java.lang.String [ ] { STRING_1 , STRING_2 } ) ; java.util.List < TYPE_2 > m = TYPE_3 . METHOD_4 ( repo , c , VAR_1 ) ; org.junit.Assert.assertEquals ( 0 , m . size ( ) ) ; } } ; ) ) ( size . m , 0 ( org.junit.Assert.assertEquals ; ) VAR_1 , c , repo ( METHOD_4 . TYPE_3 = m > TYPE_2 < java.util.List ; ) } STRING_2 , STRING_1 { ] [ java.lang.String new ( METHOD_3 . TYPE_1 = VAR_1 > java.lang.String < java.util.Set ; ) ( METHOD_2 = c org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( ) { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 ( || ) ) ) ( METHOD_2 . ) ( METHOD_4 ( || ) ) ) ( METHOD_2 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( return { ) ( METHOD_1 boolean public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; factory ( VAR_5 . Factory class ) ; } } ; ) class Factory . VAR_5 ( factory ; ) class VAR_4 ( to . ) class VAR_3 ( bind ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) class VAR_2 ( to . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , java.io.IOException { TYPE_2 p = VAR_2 . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_6 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; } } throw new TYPE_4 ( id ) ; } } ; ) id ( TYPE_4 new throw } } ; ) ) ( METHOD_2 . p , VAR_1 ( TYPE_1 new return { ) ) ) ( METHOD_5 . ) ( getProject . VAR_4 ( equals . ) ( METHOD_5 . VAR_1 ( if { ) ) ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 . p : VAR_4 TYPE_6 ( for ; ) id , VAR_3 ( METHOD_1 . VAR_2 = p TYPE_2 { java.io.IOException , TYPE_5 , TYPE_4 throws ) id TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c ) ; java.util.Set < java.lang.String > VAR_1 = TYPE_3 . of ( STRING_1 , STRING_2 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_5 . ) ) m ( METHOD_4 . TYPE_4 ( com.google.common.truth.Truth.assertThat ; ) STRING_2 , STRING_1 ( of . TYPE_3 = VAR_1 > java.lang.String < java.util.Set ; ) c , repo ( METHOD_3 . TYPE_2 = m > TYPE_1 < java.util.List ; ) ( METHOD_2 = c org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 message ( TYPE_2 ctx , com.google.gerrit.reviewdb.client.PatchSet.Id psId , java.lang.String VAR_1 ) { TYPE_3 . METHOD_1 ( psId ) ; java.lang.String VAR_2 ; try { VAR_2 = TYPE_4 . METHOD_2 ( ctx . METHOD_3 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return null ; } TYPE_1 m = new TYPE_1 ( new TYPE_1 . Key ( psId . getParentKey ( ) , VAR_2 ) , ctx . METHOD_4 ( ) . getAccountId ( ) , ctx . METHOD_5 ( ) , psId ) ; m . METHOD_6 ( VAR_1 ) ; return m ; } } ; m return ; ) VAR_1 ( METHOD_6 . m ; ) psId , ) ( METHOD_5 . ctx , ) ( getAccountId . ) ( METHOD_4 . ctx , ) VAR_2 , ) ( getParentKey . psId ( Key . TYPE_1 new ( TYPE_1 new = m TYPE_1 } ; null return { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ( METHOD_3 . ctx ( METHOD_2 . TYPE_4 = VAR_2 { try ; VAR_2 java.lang.String ; ) psId ( METHOD_1 . TYPE_3 { ) VAR_1 java.lang.String , psId com.google.gerrit.reviewdb.client.PatchSet.Id , ctx TYPE_2 ( message TYPE_1 private 
protected synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) || ( ( METHOD_3 ( ) ) & & ( VAR_3 . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_6 ( ) ; } else { VAR_4 = VAR_5 . submit ( VAR_2 ) ; } } } } ; ) VAR_2 ( submit . VAR_5 = VAR_4 { else } ; ) ( METHOD_6 . ) ) ( toString . VAR_2 , VAR_2 ( TYPE_3 new { ) ) ) ) ( METHOD_5 . ) ( METHOD_4 . ) ( get . VAR_3 ( & & ) ) ( METHOD_3 ( ( || ) ) ( METHOD_2 ( ( if ; ) VAR_1 ( TYPE_2 new = VAR_2 TYPE_2 final { ) VAR_1 TYPE_1 final ( METHOD_1 void synchronized protected 
protected void METHOD_1 ( TYPE_1 commit ) throws java.io.IOException , TYPE_2 { if ( ( ( commit . getMessage ( ) ) == null ) || ( STRING_1 . equals ( commit . getMessage ( ) ) ) ) { commit . METHOD_2 ( STRING_2 ) ; } METHOD_3 ( VAR_1 , cfg ) ; } } ; ) cfg , VAR_1 ( METHOD_3 } ; ) STRING_2 ( METHOD_2 . commit { ) ) ) ) ( getMessage . commit ( equals . STRING_1 ( || ) null == ) ) ( getMessage . commit ( ( ( if { TYPE_2 , java.io.IOException throws ) commit TYPE_1 ( METHOD_1 void protected 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . get ( STRING_1 ) ) == null ) ) { return new TYPE_1 [ 0 ] ; } return VAR_1 . get ( STRING_1 ) . METHOD_2 ( new TYPE_1 [ 0 ] ) ; } } ; ) ] 0 [ TYPE_1 new ( METHOD_2 . ) STRING_1 ( get . VAR_1 return } ; ] 0 [ TYPE_1 new return { ) ) null == ) ) STRING_1 ( get . VAR_1 ( ( || ) null == ) VAR_1 ( ( ( if { ) ( METHOD_1 ] [ TYPE_1 public 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . topic ( psId . getParentKey ( ) . get ( ) , input . getValue ( ) . METHOD_2 ( ) , new TYPE_3 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( psId ) ) ; } } ) ; METHOD_4 ( null ) ; } } ; ) null ( METHOD_4 ; ) } } ; ) ) psId ( METHOD_3 . TYPE_5 ( display . TYPE_4 { ) result java.lang.String ( onSuccess void public { ) ( > java.lang.String < TYPE_3 new , ) ( METHOD_2 . ) ( getValue . input , ) ( get . ) ( getParentKey . psId ( topic . TYPE_2 { ) e TYPE_1 ( METHOD_1 void 
static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 . length ( ) ) < = ( VAR_2 ) ) { return VAR_1 ; } else { int VAR_3 = VAR_1 . METHOD_2 ( CHAR_1 ) ; return VAR_3 > = 0 ? STRING_1 + ( VAR_1 . METHOD_3 ( VAR_3 ) ) : VAR_1 ; } } } } ; VAR_1 : ) ) VAR_3 ( METHOD_3 . VAR_1 ( + STRING_1 ? 0 = > VAR_3 return ; ) CHAR_1 ( METHOD_2 . VAR_1 = VAR_3 int { else } ; VAR_1 return { ) ) VAR_2 ( = < ) ) ( length . VAR_1 ( ( if { ) VAR_1 java.lang.String ( METHOD_1 java.lang.String static 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_2 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 ) ; try { org.eclipse.jgit.lib.ObjectId VAR_4 = METHOD_3 ( rw , VAR_1 , VAR_2 ) ; if ( VAR_4 == null ) { return null ; } VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_3 ; } } ; VAR_3 return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_4 ( catch } ; ) ) VAR_4 ( METHOD_5 . TYPE_3 ( METHOD_4 . VAR_3 } ; null return { ) null == VAR_4 ( if ; ) VAR_2 , VAR_1 , rw ( METHOD_3 = VAR_4 org.eclipse.jgit.lib.ObjectId { try ; ) STRING_1 ( METHOD_2 . VAR_3 ; ) ( TYPE_1 new = VAR_3 TYPE_1 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 TYPE_2 , rw org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 TYPE_1 protected 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { TYPE_1 id = TYPE_2 . METHOD_1 ( cd ) ; try { TYPE_3 . METHOD_2 ( VAR_1 . delete ( id ) , VAR_2 . delete ( id ) ) . get ( ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } catch ( TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_5 ( catch } ; ) e ( java.io.IOException new throw { ) e TYPE_4 ( catch } ; ) ( get . ) ) id ( delete . VAR_2 , ) id ( delete . VAR_1 ( METHOD_2 . TYPE_3 { try ; ) cd ( METHOD_1 . TYPE_2 = id TYPE_1 { java.io.IOException throws ) cd com.google.gerrit.server.query.change.ChangeData ( delete void public 
public void close ( ) throws TYPE_1 . OrmException { VAR_1 . METHOD_1 ( ) ; try { if ( ( log ) ! = null ) { try { log . close ( ) ; } catch ( java.io.IOException err ) { throw new TYPE_1 . OrmException ( STRING_1 , err ) ; } finally { log = null ; } } } finally { VAR_1 . METHOD_2 ( ) ; } } } } ; ) ( METHOD_2 . VAR_1 { finally } } } ; null = log { finally } ; ) err , STRING_1 ( OrmException . TYPE_1 new throw { ) err java.io.IOException ( catch } ; ) ( close . log { try { ) null = ! ) log ( ( if { try ; ) ( METHOD_1 . VAR_1 { OrmException . TYPE_1 throws ) ( close void public 
public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 , TYPE_4 input ) throws TYPE_5 , TYPE_6 , TYPE_7 , TYPE_8 , TYPE_9 , java.io.IOException { if ( VAR_1 . METHOD_1 ( ) ) { TYPE_10 in = new TYPE_10 ( ) ; VAR_2 = ( input ! = null ) ? VAR_3 : null ; return VAR_4 . get ( ) . apply ( VAR_1 , in ) ; } throw new TYPE_7 ( ) ; } } ; ) ( TYPE_7 new throw } ; ) in , VAR_1 ( apply . ) ( get . VAR_4 return ; null : VAR_3 ? ) null = ! input ( = VAR_2 ; ) ( TYPE_10 new = in TYPE_10 { ) ) ( METHOD_1 . VAR_1 ( if { java.io.IOException , TYPE_9 , TYPE_8 , TYPE_7 , TYPE_6 , TYPE_5 throws ) input TYPE_4 , VAR_1 TYPE_3 ( apply > TYPE_2 < TYPE_1 public 
public TYPE_1 get ( ) { if ( ! ( VAR_1 ) ) { synchronized ( VAR_2 ) { if ( ( ! ( VAR_2 . METHOD_1 ( ) ) ) & & ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_3 ( ) , getName ( ) ) ) ; } VAR_1 = true ; } } return VAR_2 ; } } ; VAR_2 return } } ; true = VAR_1 } ; ) ) ) ( getName , ) ( METHOD_3 . VAR_2 , STRING_1 ( java.lang.String.format ( TYPE_2 new throw { ) ) ) ) ( METHOD_2 . VAR_2 ( ! ( & & ) ) ) ( METHOD_1 . VAR_2 ( ! ( ( if { ) VAR_2 ( synchronized { ) ) VAR_1 ( ! ( if { ) ( get TYPE_1 public 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) & & ( user . get ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } } } ; ) ) VAR_2 ( submit . VAR_4 ( set . VAR_3 { else } ; ) ( METHOD_5 . ) ) ( toString . VAR_2 , VAR_2 ( TYPE_3 new { ) ) ) ( METHOD_4 . ) ( METHOD_3 . ) ( get . user ( & & ) ) ( METHOD_2 ( ( if ; ) VAR_1 ( TYPE_2 new = VAR_2 TYPE_2 final { ) VAR_1 TYPE_1 final ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ; if ( VAR_2 ! = null ) { VAR_3 . METHOD_3 ( new TYPE_4 ( STRING_2 , STRING_3 ) ) ; VAR_3 . METHOD_4 ( new TYPE_5 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) , TYPE_7 . name ( ) ) ) ; } return METHOD_7 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_7 return } ; ) ) ) ( name . TYPE_7 , ) VAR_2 ( METHOD_6 . ) ( METHOD_5 . TYPE_6 ( TYPE_5 new ( METHOD_4 . VAR_3 ; ) ) STRING_3 , STRING_2 ( TYPE_4 new ( METHOD_3 . VAR_3 { ) null = ! VAR_2 ( if ; ) ) VAR_1 + ) STRING_1 + ) url ( ( ( ( METHOD_2 . TYPE_3 = VAR_3 TYPE_3 { java.io.IOException throws ) VAR_2 TYPE_2 , VAR_1 java.lang.String ( METHOD_1 TYPE_1 public 
public static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( INT_1 ) ; for ( final com.google.gerrit.reviewdb.client.Change . Status e : TYPE_3 . values ( ) ) { if ( e . METHOD_2 ( ) ) { r . add ( new TYPE_4 ( VAR_1 , e ) ) ; } } return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; } } ; ) r ( METHOD_3 : ) 0 ( get . r ? 1 == ) ) ( size . r ( return } } ; ) ) e , VAR_1 ( TYPE_4 new ( add . r { ) ) ( METHOD_2 . e ( if { ) ) ( values . TYPE_3 : e Status . com.google.gerrit.reviewdb.client.Change final ( for ; ) INT_1 ( > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.ArrayList new = r > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List { ) VAR_1 > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_2 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 static public 
private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( admin ) ; VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . submit ( ) ; VAR_4 . METHOD_6 ( ) ; return VAR_1 ; } } ; VAR_1 return ; ) ( METHOD_6 . VAR_4 ; ) ( submit . ) STRING_1 ( revision . ) changeId . VAR_1 ( id . ) ( changes . VAR_3 ; ) ) ( METHOD_5 . TYPE_2 ( METHOD_4 . ) STRING_1 ( revision . ) changeId . VAR_1 ( id . ) ( changes . VAR_3 ; ) admin ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_4 ( input ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_8 ( ) ; } } ; ) ( METHOD_8 } ; ) ) ) STRING_1 ( of . TYPE_4 ( METHOD_7 ( isEqualTo . ) ( METHOD_6 . ) e ( com.google.common.truth.Truth.assertThat { ) e TYPE_3 ( catch } ; ) STRING_2 ( METHOD_5 ; ) input ( METHOD_4 . ) ( project { try ; VAR_1 = VAR_3 ; ) VAR_2 ( METHOD_3 . VAR_1 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < java.util.List ; ) ( TYPE_1 new = input TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( ) { com.google.gerrit.reviewdb.client.PatchSet.Id id = ( VAR_1 . METHOD_2 ( ) ) ? VAR_2 . METHOD_3 ( ) : VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_3 ( ) . METHOD_4 ( TYPE_4 . edit ( ) ) , ( STRING_1 + ( TYPE_5 . METHOD_5 ( id , path ) ) ) ) ; VAR_3 . METHOD_6 ( TYPE_6 . edit ( ) ) ; return VAR_3 ; } } ; VAR_3 return ; ) ) ( edit . TYPE_6 ( METHOD_6 . VAR_3 ; ) ) ) ) path , id ( METHOD_5 . TYPE_5 ( + STRING_1 ( , ) ) ( edit . TYPE_4 ( METHOD_4 . ) ( TYPE_3 new ( TYPE_2 new = VAR_3 TYPE_2 ; ) ( METHOD_3 . VAR_1 : ) ( METHOD_3 . VAR_2 ? ) ) ( METHOD_2 . VAR_1 ( = id com.google.gerrit.reviewdb.client.PatchSet.Id { ) ( METHOD_1 TYPE_1 private 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet p : VAR_1 . METHOD_2 ( ) ) { if ( ( ( p . getRevision ( ) ) ! = null ) & & ( ( p . getRevision ( ) . get ( ) ) ! = null ) ) { final org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( p . getRevision ( ) . get ( ) ) ; if ( ( VAR_2 . METHOD_4 ( id ) ) == 0 ) { return true ; } } } return false ; } } ; false return } } } ; true return { ) 0 == ) ) id ( METHOD_4 . VAR_2 ( ( if ; ) ) ( get . ) ( getRevision . p ( METHOD_3 . org.eclipse.jgit.lib.ObjectId = id org.eclipse.jgit.lib.ObjectId final { ) ) null = ! ) ) ( get . ) ( getRevision . p ( ( & & ) null = ! ) ) ( getRevision . p ( ( ( if { ) ) ( METHOD_2 . VAR_1 : p com.google.gerrit.reviewdb.client.PatchSet ( for { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
private static java.lang.String METHOD_1 ( TYPE_1 < TYPE_2 < ? , ? > > e ) { if ( STRING_1 . equals ( e . METHOD_2 ( ) ) ) { return e . METHOD_3 ( ) ; } else { return java.lang.String.format ( STRING_2 , e . METHOD_2 ( ) , e . METHOD_3 ( ) ) ; } } } } ; ) ) ( METHOD_3 . e , ) ( METHOD_2 . e , STRING_2 ( java.lang.String.format return { else } ; ) ( METHOD_3 . e return { ) ) ) ( METHOD_2 . e ( equals . STRING_1 ( if { ) e > > ? , ? < TYPE_2 < TYPE_1 ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_5 ( 0 ) ) . isEqualTo ( VAR_1 ) ; METHOD_6 ( change . getChangeId ( ) , 1 ) ; } } ; ) 1 , ) ( getChangeId . change ( METHOD_6 ; ) VAR_1 ( isEqualTo . ) ) 0 ( METHOD_5 . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ) ( METHOD_4 . change ( isEqualTo . ) ) ( getId . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 = VAR_2 org.eclipse.jgit.revwalk.RevCommit ; ) ) ( getChangeId . change ( submit ; ) git ( METHOD_3 = change Result . TYPE_1 ; ) ( METHOD_2 = VAR_1 org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
public static com.google.gerrit.reviewdb.client.Change METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 user ) { com.google.gerrit.reviewdb.client.Change . Id changeId = new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ; com.google.gerrit.reviewdb.client.Change c = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , changeId , user . METHOD_2 ( ) . getId ( ) , new TYPE_2 . NameKey ( project , STRING_2 ) , TYPE_3 . METHOD_3 ( ) ) ; TYPE_4 . METHOD_4 ( c ) ; return c ; } } ; c return ; ) c ( METHOD_4 . TYPE_4 ; ) ) ( METHOD_3 . TYPE_3 , ) STRING_2 , project ( NameKey . TYPE_2 new , ) ( getId . ) ( METHOD_2 . user , changeId , ) STRING_1 ( Key . com.google.gerrit.reviewdb.client.Change new ( com.google.gerrit.reviewdb.client.Change new = c com.google.gerrit.reviewdb.client.Change ; ) 1 ( Id . com.google.gerrit.reviewdb.client.Change new = changeId Id . com.google.gerrit.reviewdb.client.Change { ) user TYPE_1 , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 com.google.gerrit.reviewdb.client.Change static public 
private static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user . METHOD_2 ( ) ) { return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; } if ( user instanceof TYPE_3 ) { return STRING_1 + ( ( ( TYPE_3 ) ( user ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; } return user . toString ( ) ; } } ; ) ( toString . user return } ; ) ) ( toString . ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . ) ) user ( ) TYPE_3 ( ( ( + STRING_1 return { ) TYPE_3 instanceof user ( if } ; ) ( toString . ) ( getAccountId . ) ) user ( ) TYPE_2 ( ( return { ) ) ( METHOD_2 . user ( if { ) user TYPE_1 ( METHOD_1 java.lang.String static private 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 index = VAR_2 . METHOD_2 ( ) ; TYPE_5 VAR_3 = new TYPE_5 ( ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in , index , VAR_1 , VAR_3 ) ; if ( ( in == out ) || ( out instanceof TYPE_6 ) ) { return new TYPE_7 ( index , out , VAR_1 ) ; } else if ( out == null ) { return in ; } else { return out ; } } } } ; out return { else } ; in return { ) null == out ( if else } ; ) VAR_1 , out , index ( TYPE_7 new return { ) ) TYPE_6 instanceof out ( || ) out == in ( ( if ; ) VAR_3 , VAR_1 , index , in ( METHOD_3 = out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) ( TYPE_5 new = VAR_3 TYPE_5 ; ) ( METHOD_2 . VAR_2 = index TYPE_4 { TYPE_3 throws ) VAR_1 TYPE_2 , in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 public 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; ) e , STRING_1 ( TYPE_3 new throw { ) e TYPE_4 ( catch } ; ) e , STRING_1 ( TYPE_3 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_3 . ) in , change ( apply . ) ( get . VAR_2 ( id . VAR_1 return { try { TYPE_3 throws ) in TYPE_2 ( METHOD_1 TYPE_1 public 
private PatchSet . Id METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( commit , VAR_2 ) ; int s = VAR_1 . METHOD_3 ( CHAR_1 ) ; java.lang.String VAR_3 = ( s < 0 ) ? VAR_1 : VAR_1 . METHOD_4 ( 0 , s ) ; TYPE_2 psId = TYPE_3 . METHOD_5 ( VAR_3 ) ; if ( psId == null ) { throw METHOD_6 ( VAR_2 , VAR_3 ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , psId ) ; } } ; ) psId , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new return } ; ) VAR_3 , VAR_2 ( METHOD_6 throw { ) null == psId ( if ; ) VAR_3 ( METHOD_5 . TYPE_3 = psId TYPE_2 ; ) s , 0 ( METHOD_4 . VAR_1 : VAR_1 ? ) 0 < s ( = VAR_3 java.lang.String ; ) CHAR_1 ( METHOD_3 . VAR_1 = s int ; ) VAR_2 , commit ( METHOD_2 = VAR_1 java.lang.String { TYPE_1 throws ) commit org.eclipse.jgit.revwalk.RevCommit ( METHOD_1 Id . PatchSet private 
public static TYPE_1 create ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return new TYPE_2 ( TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_2 , STRING_2 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_3 , STRING_3 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_4 , STRING_4 , VAR_6 ) ) ; } } ; ) ) VAR_6 , STRING_4 , VAR_4 ( METHOD_1 . TYPE_1 , ) VAR_5 , STRING_3 , VAR_3 ( METHOD_1 . TYPE_1 , ) VAR_5 , STRING_2 , VAR_2 ( METHOD_1 . TYPE_1 , ) VAR_5 , STRING_1 , VAR_1 ( METHOD_1 . TYPE_1 ( TYPE_2 new return { ) VAR_4 int , VAR_3 int , VAR_2 int , VAR_1 int ( create TYPE_1 static public 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4 . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user . get ( ) , group ) ; } } ; ) group , ) ( get . user ( TYPE_1 new return } ; ) VAR_1 ( TYPE_3 new throw { ) null == group ( if ; ) VAR_1 ( get . VAR_2 = group AccountGroup . TYPE_4 final { TYPE_3 throws ) VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 public 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { java.util.Map < java.lang.String , TYPE_3 > VAR_2 = new TYPE_4 < > ( ) ; METHOD_2 ( VAR_2 ) ; VAR_2 . put ( STRING_1 , VAR_1 ) ; TYPE_5 VAR_3 = VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ; TYPE_1 result = VAR_5 . METHOD_4 ( VAR_3 , VAR_6 class ) ; return result ; } } ; result return ; ) class VAR_6 , VAR_3 ( METHOD_4 . VAR_5 = result TYPE_1 ; ) VAR_2 , STRING_2 ( METHOD_3 . VAR_4 = VAR_3 TYPE_5 ; ) VAR_1 , STRING_1 ( put . VAR_2 ; ) VAR_2 ( METHOD_2 ; ) ( > < TYPE_4 new = VAR_2 > TYPE_3 , java.lang.String < java.util.Map { TYPE_2 throws ) VAR_1 int ( METHOD_1 TYPE_1 public 
public TYPE_1 < TYPE_2 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { try { return METHOD_1 ( VAR_1 . METHOD_2 ( change , user . get ( ) ) ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_4 ( catch } ; ) ) ) ( get . user , change ( METHOD_2 . VAR_1 ( METHOD_1 return { try { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 throws ) change com.google.gerrit.reviewdb.client.Change ( METHOD_1 > TYPE_2 < TYPE_1 public 
public void METHOD_1 ( ) { final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . METHOD_3 ( a , b ) ; assertEquals ( 2 , n . METHOD_4 ( ) ) ; METHOD_5 ( a , n . METHOD_6 ( 0 ) ) ; METHOD_5 ( b , n . METHOD_6 ( 1 ) ) ; } } ; ) ) 1 ( METHOD_6 . n , b ( METHOD_5 ; ) ) 0 ( METHOD_6 . n , a ( METHOD_5 ; ) ) ( METHOD_4 . n , 2 ( assertEquals ; ) b , a ( METHOD_3 . TYPE_3 = n > java.lang.String < TYPE_3 final ; ) STRING_3 , STRING_1 ( METHOD_2 . TYPE_2 = b TYPE_1 final ; ) STRING_2 , STRING_1 ( METHOD_2 . TYPE_2 = a TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_2 , STRING_3 ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_4 , STRING_5 ) ; org.junit.Assert.assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . ) ) VAR_2 , VAR_3 ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 , STRING_7 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_5 . ) ) VAR_3 , VAR_2 ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 , STRING_6 ( org.junit.Assert.assertEquals ; ) STRING_5 , STRING_4 ( TYPE_3 new = VAR_3 TYPE_3 ; ) STRING_3 , STRING_2 ( TYPE_3 new = VAR_2 TYPE_3 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new TYPE_3 ( STRING_2 ) ) ) ; METHOD_2 ( b , b . append ( new TYPE_1 ( ) . append ( STRING_3 ) ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_4 ( assertEquals ; ) ) ) STRING_3 ( append . ) ( TYPE_1 new ( append . b , b ( METHOD_2 ; ) ) ) STRING_2 ( TYPE_3 new ( append . b , b ( METHOD_2 ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) ) ) null ( ) TYPE_2 ( ( ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
private java.lang.String METHOD_1 ( final TYPE_1 . Change change ) { if ( ( change ! = null ) & & ( ( VAR_1 . get ( ) ) ! = null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_1 . get ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } } ; null return } ; ) ( toString . r return ; ) ) ( getChangeId . change ( append . r ; ) ) ( get . VAR_1 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final { ) ) null = ! ) ) ( get . VAR_1 ( ( & & ) null = ! change ( ( if { ) change Change . TYPE_1 final ( METHOD_1 java.lang.String private 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 . METHOD_4 ( ) ) { return new TYPE_1 ( VAR_2 . group ( 1 ) , STRING_2 , VAR_1 ) ; } else { throw new TYPE_4 ( ( STRING_3 + VAR_1 ) ) ; } } } } ; ) ) VAR_1 + STRING_3 ( ( TYPE_4 new throw { else } ; ) VAR_1 , STRING_2 , ) 1 ( group . VAR_2 ( TYPE_1 new return { ) ) ( METHOD_4 . VAR_2 ( if ; ) VAR_1 ( METHOD_3 . VAR_3 = VAR_2 TYPE_3 ; ) STRING_1 , VAR_1 ( METHOD_2 . TYPE_2 { ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( req , res , VAR_2 ) ; METHOD_4 ( res ) ; try ( TYPE_3 out = TYPE_4 . METHOD_5 ( req , res ) ) { out . METHOD_6 ( message ) ; } } } } ; ) message ( METHOD_6 . out { ) ) res , req ( METHOD_5 . TYPE_4 = out TYPE_3 ( try ; ) res ( METHOD_4 ; ) VAR_2 , res , req ( METHOD_3 ; ) VAR_1 ( METHOD_2 . res { java.io.IOException throws ) message java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
private java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_1 n ) { try { return VAR_1 . METHOD_2 ( db . get ( ) , n . notes , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) ; return java.util.Collections . METHOD_3 ( ) ; } } } } ; ) ( METHOD_3 . java.util.Collections return ; ) e , ) ) VAR_2 ( + STRING_1 ( ( error . VAR_3 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_2 , notes . n , ) ( get . db ( METHOD_2 . VAR_1 return { try { ) n TYPE_1 ( METHOD_1 > PatchSetApproval . com.google.gerrit.reviewdb.client < java.util.List private 
public void METHOD_1 ( ) { final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; final TYPE_3 n = TYPE_3 . METHOD_3 ( a , b ) ; assertEquals ( 2 , n . METHOD_4 ( ) ) ; METHOD_5 ( a , n . METHOD_6 ( 0 ) ) ; METHOD_5 ( b , n . METHOD_6 ( 1 ) ) ; } } ; ) ) 1 ( METHOD_6 . n , b ( METHOD_5 ; ) ) 0 ( METHOD_6 . n , a ( METHOD_5 ; ) ) ( METHOD_4 . n , 2 ( assertEquals ; ) b , a ( METHOD_3 . TYPE_3 = n TYPE_3 final ; ) STRING_3 , STRING_1 ( METHOD_2 . TYPE_2 = b TYPE_1 final ; ) STRING_2 , STRING_1 ( METHOD_2 . TYPE_2 = a TYPE_1 final { ) ( METHOD_1 void public 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . get ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ; TYPE_4 VAR_7 = new TYPE_4 ( null , account . getId ( ) ) ; VAR_7 . METHOD_5 ( VAR_1 ) ; VAR_7 . METHOD_6 ( account ) ; VAR_7 . commit ( VAR_2 ) ; } } ; ) VAR_2 ( commit . VAR_7 ; ) account ( METHOD_6 . VAR_7 ; ) VAR_1 ( METHOD_5 . VAR_7 ; ) ) ( getId . account , null ( TYPE_4 new = VAR_7 TYPE_4 ; ) VAR_5 ( METHOD_4 . ) ( METHOD_2 . VAR_2 ; ) VAR_5 ( METHOD_3 . ) ( METHOD_2 . VAR_2 ; ) ( get . VAR_6 = VAR_5 TYPE_3 ; ) VAR_1 , VAR_4 , VAR_3 ( TYPE_2 new = VAR_2 TYPE_2 { TYPE_1 , java.io.IOException throws ) account com.google.gerrit.reviewdb.client.Account , VAR_1 org.eclipse.jgit.lib.Repository ( METHOD_1 void private 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( id ) ; java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } throw new TYPE_9 ( ) ; } } ; ) ( TYPE_9 new throw } ; ) 0 ( get . VAR_3 return { ) 1 == ) ) ( size . VAR_3 ( ( if ; ) in , VAR_1 ( apply . ) ( get . put = VAR_3 > TYPE_1 < java.util.List ; ) id ( of . TYPE_8 = VAR_2 ; ) ( TYPE_7 new = in TYPE_7 { com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 throws ) input TYPE_3 , VAR_1 TYPE_2 ( apply TYPE_1 public 
TYPE_1 METHOD_1 ( ) { TYPE_2 factory = new TYPE_2 ( ) ; factory . METHOD_2 ( new TYPE_3 ( url ) . METHOD_3 ( true ) . METHOD_4 ( ( ! ( VAR_1 ) ) ) . METHOD_5 ( INT_1 , VAR_2 ) . METHOD_1 ( ) ) ; return ( ( TYPE_1 ) ( factory . METHOD_6 ( ) ) ) ; } } ; ) ) ) ( METHOD_6 . factory ( ) TYPE_1 ( ( return ; ) ) ( METHOD_1 . ) VAR_2 , INT_1 ( METHOD_5 . ) ) ) VAR_1 ( ! ( ( METHOD_4 . ) true ( METHOD_3 . ) url ( TYPE_3 new ( METHOD_2 . factory ; ) ( TYPE_2 new = factory TYPE_2 { ) ( METHOD_1 TYPE_1 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ; METHOD_7 ( ) ; assertEquals ( STRING_5 , STRING_4 , VAR_1 . METHOD_8 ( ) . METHOD_9 ( ) ) ; } } ; ) ) ( METHOD_9 . ) ( METHOD_8 . VAR_1 , STRING_4 , STRING_5 ( assertEquals ; ) ( METHOD_7 ; ) ( METHOD_6 . ) STRING_4 ( METHOD_5 . ) ) STRING_3 , STRING_2 , STRING_1 ( METHOD_4 . VAR_2 ( METHOD_3 . TYPE_2 ; ) ( METHOD_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( new TYPE_3 ( ) ) ; if ( VAR_2 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; modules.add ( new TYPE_6 ( ) ) ; } return VAR_1 . METHOD_2 ( modules ) ; } } ; ) modules ( METHOD_2 . VAR_1 return } ; ) ) ( TYPE_6 new ( modules.add ; ) ) ( TYPE_5 new ( modules.add { else } ; ) ) ( TYPE_4 new ( modules.add { ) VAR_2 ( if ; ) ) ( TYPE_3 new ( modules.add ; ) ( > TYPE_2 < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) VAR_1 TYPE_1 final ( METHOD_1 TYPE_1 private 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return METHOD_2 ( repo , db , rw , commit , repo . METHOD_3 ( ) . values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_4 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } } } ; false return ; ) e , msg ( error . VAR_1 ; ) ) ( METHOD_4 . ) ( getProject , ) ( name . commit , STRING_1 ( java.lang.String.format = msg java.lang.String { ) e java.io.IOException ( catch } ; ) ) ( values . ) ( METHOD_3 . repo , commit , rw , db , repo ( METHOD_2 return { ) ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk ( try { ) commit org.eclipse.jgit.revwalk.RevCommit , repo org.eclipse.jgit.lib.Repository , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 < TYPE_4 > VAR_3 = new TYPE_3 < TYPE_4 > ( ) ; for ( final TYPE_5 b : VAR_4 ) { if ( ( b . ref ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) > = 0 ) { VAR_3 . add ( new TYPE_4 ( b ) ) ; } } VAR_2 . METHOD_4 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( TYPE_6 new , VAR_1 ( METHOD_4 . VAR_2 } } ; ) ) b ( TYPE_4 new ( add . VAR_3 { ) 0 = > ) ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . ) ( ref . b ( ( if { ) VAR_4 : b TYPE_5 final ( for ; ) ( > TYPE_4 < TYPE_3 new = VAR_3 > TYPE_4 < TYPE_3 { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( INT_1 ) ) ; METHOD_2 ( b , b . append ( 2 ) ) ; METHOD_2 ( b , b . append ( ( - INT_2 ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) ) INT_2 - ( ( append . b , b ( METHOD_2 ; ) ) 2 ( append . b , b ( METHOD_2 ; ) ) INT_1 ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public java.lang.String format ( java.lang.String projectName , TYPE_1 cfg , java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = new TYPE_3 ( ) ; if ( ! ( cfg . METHOD_1 ( VAR_3 , false ) ) ) { VAR_2 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( METHOD_4 ( projectName ) ) ; byte [ ] b = VAR_2 . METHOD_5 ( VAR_1 , TYPE_4 . name ( ) ) ; return new java.lang.String ( b , TYPE_4 ) ; } } ; ) TYPE_4 , b ( java.lang.String new return ; ) ) ( name . TYPE_4 , VAR_1 ( METHOD_5 . VAR_2 = b ] [ byte ; ) ) projectName ( METHOD_4 ( METHOD_3 . VAR_2 } ; ) ( METHOD_2 . VAR_2 { ) ) ) false , VAR_3 ( METHOD_1 . cfg ( ! ( if ; ) ( TYPE_3 new = VAR_2 TYPE_3 { TYPE_2 throws ) VAR_1 java.lang.String , cfg TYPE_1 , projectName java.lang.String ( format java.lang.String public 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) { return new TYPE_1 ( db , repo , rp . METHOD_3 ( ) ) ; } else { return new TYPE_1 ( project . METHOD_4 ( ) ) ; } } } } ; ) ) ( METHOD_4 . project ( TYPE_1 new return { else } ; ) ) ( METHOD_3 . rp , repo , db ( TYPE_1 new return { ) ) ) ( METHOD_2 . TYPE_2 ( == VAR_1 ( if { java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public void delete ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { METHOD_1 ( ps . getId ( ) , update ) ; TYPE_2 . METHOD_2 ( ps . METHOD_3 ( ) , STRING_1 , ps . getId ( ) ) ; update . METHOD_4 ( VAR_1 ) ; if ( ( TYPE_3 . of ( update . getChange ( ) ) ) == ( VAR_2 ) ) { db . patchSets ( ) . delete ( java.util.Collections.singleton ( ps ) ) ; } } } } ; ) ) ps ( java.util.Collections.singleton ( delete . ) ( patchSets . db { ) ) VAR_2 ( == ) ) ) ( getChange . update ( of . TYPE_3 ( ( if ; ) VAR_1 ( METHOD_4 . update ; ) ) ( getId . ps , STRING_1 , ) ( METHOD_3 . ps ( METHOD_2 . TYPE_2 ; ) update , ) ( getId . ps ( METHOD_1 { com.google.gwtorm.server.OrmException throws ) ps com.google.gerrit.reviewdb.client.PatchSet , update TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( delete void public 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( base , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) ! = null ) ) ; VAR_1 . METHOD_2 ( m , VAR_6 , ( VAR_7 ! = null ? VAR_7 . get ( 0 ) : null ) , ( VAR_8 ! = null ? VAR_8 . get ( 0 ) : null ) ) ; } } ; ) ) null : ) 0 ( get . VAR_8 ? null = ! VAR_8 ( , ) null : ) 0 ( get . VAR_7 ? null = ! VAR_7 ( , VAR_6 , m ( METHOD_2 . VAR_1 ; ) ) null = ! ) edit ( ( , VAR_5 , VAR_4 , VAR_3 , ) ) ( METHOD_1 . VAR_2 , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new , base ( set . VAR_1 { ) m > TYPE_2 < TYPE_1 ( onSuccess void public 
protected void METHOD_1 ( TYPE_1 id , TYPE_2 < java.lang.String > VAR_1 ) throws java.lang.Exception { TYPE_3 . ProjectConfig cfg = VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; for ( java.lang.String VAR_4 : VAR_1 ) { TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) ; TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) ; } METHOD_5 ( VAR_3 , cfg ) ; } } ; ) cfg , VAR_3 ( METHOD_5 } ; ) id , VAR_4 , cfg ( METHOD_4 . TYPE_4 ; ) id , VAR_4 , cfg ( METHOD_4 . TYPE_4 { ) VAR_1 : VAR_4 java.lang.String ( for ; ) ( METHOD_3 . ) VAR_3 ( METHOD_2 . VAR_2 = cfg ProjectConfig . TYPE_3 { java.lang.Exception throws ) VAR_1 > java.lang.String < TYPE_2 , id TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) ; TYPE_1 input = new TYPE_1 ( ) ; input . ref = STRING_2 ; input . message = STRING_3 ; VAR_4 . METHOD_3 ( VAR_5 class ) ; VAR_4 . METHOD_4 ( ( ( STRING_4 + ( VAR_3 ) ) + STRING_5 ) ) ; METHOD_5 ( input . ref ) . create ( input ) ; } } ; ) input ( create . ) ref . input ( METHOD_5 ; ) ) STRING_5 + ) ) VAR_3 ( + STRING_4 ( ( ( METHOD_4 . VAR_4 ; ) class VAR_5 ( METHOD_3 . VAR_4 ; STRING_3 = message . input ; STRING_2 = ref . input ; ) ( TYPE_1 new = input TYPE_1 ; ) ) STRING_1 + ) VAR_3 ( ( , VAR_2 , VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; rpc ( VAR_5 class ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; rpc ( VAR_8 class ) ; rpc ( VAR_9 class ) ; rpc ( VAR_10 class ) ; rpc ( VAR_11 class ) ; rpc ( VAR_12 class ) ; } } ; ) class VAR_12 ( rpc ; ) class VAR_11 ( rpc ; ) class VAR_10 ( rpc ; ) class VAR_9 ( rpc ; ) class VAR_8 ( rpc ; ) class VAR_7 ( rpc ; ) class VAR_6 ( rpc ; ) class VAR_5 ( rpc ; ) class VAR_4 ( rpc ; ) class VAR_3 ( rpc ; ) class VAR_2 ( rpc ; ) class VAR_1 ( METHOD_3 . ) STRING_1 ( METHOD_2 { ) ( METHOD_1 void protected 
public static void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , VAR_1 ) . METHOD_2 ( STRING_3 , VAR_2 ) . METHOD_3 ( STRING_4 , STRING_5 ) . METHOD_4 ( STRING_6 ) . METHOD_5 ( ) . get ( TYPE_4 . METHOD_6 ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( METHOD_6 . TYPE_4 ( get . ) ( METHOD_5 . ) STRING_6 ( METHOD_4 . ) STRING_5 , STRING_4 ( METHOD_3 . ) VAR_2 , STRING_3 ( METHOD_2 . ) VAR_1 , STRING_2 ( METHOD_2 . ) STRING_1 ( TYPE_3 new { ) VAR_3 > TYPE_2 < TYPE_1 , VAR_2 int , VAR_1 java.lang.String ( METHOD_1 void static public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) STRING_2 ( METHOD_5 . u , STRING_3 ( METHOD_4 ; ) VAR_4 , VAR_1 ( user . util = u TYPE_2 ; ) STRING_2 , VAR_4 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_3 . ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
private java.lang.String METHOD_1 ( final byte [ ] b ) { final java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( b . length ) ; i ++ ) { final int u = ( ( b [ i ] ) > > INT_1 ) & INT_2 ; final int VAR_2 = ( b [ i ] ) & INT_2 ; VAR_1 . append ( VAR_3 [ u ] ) ; VAR_1 . append ( VAR_3 [ VAR_2 ] ) ; } return VAR_1 . toString ( ) ; } } ; ) ( toString . VAR_1 return } ; ) ] VAR_2 [ VAR_3 ( append . VAR_1 ; ) ] u [ VAR_3 ( append . VAR_1 ; INT_2 & ) ] i [ b ( = VAR_2 int final ; INT_2 & ) INT_1 > > ) ] i [ b ( ( = u int final { ) ++ i ; ) length . b ( < i ; 0 = i int ( for ; ) ( java.lang.StringBuilder new = VAR_1 java.lang.StringBuilder final { ) b ] [ byte final ( METHOD_1 java.lang.String private 
private static java.lang.String METHOD_1 ( java.lang.String name ) { java.util.List < java.lang.String > values = TYPE_1 . METHOD_2 ( ) . get ( name ) ; if ( values == null ) { return null ; } else { return values . get ( ( ( values . size ( ) ) - 1 ) ) ; } } } } ; ) ) 1 - ) ) ( size . values ( ( ( get . values return { else } ; null return { ) null == values ( if ; ) name ( get . ) ( METHOD_2 . TYPE_1 = values > java.lang.String < java.util.List { ) name java.lang.String ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; TYPE_1 . ChangeInfo c = get ( changeId ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_4 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) . isEqualTo ( STRING_1 ) ; } } ; ) STRING_1 ( isEqualTo . ) message . ) ( METHOD_6 . ) ( METHOD_5 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) 1 ( METHOD_4 . ) ) ) VAR_1 ( ) > ? < TYPE_2 ( ( ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_3 . ) ) ) VAR_1 ( ) > ? < TYPE_2 ( ( ( com.google.common.truth.Truth.assertThat ; ) changeId ( get = c ChangeInfo . TYPE_1 ; ) ( getChangeId . ) ( METHOD_2 = changeId java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
private static void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_1 . get ( STRING_1 ) ; final java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_3 = new TYPE_3 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; VAR_1 . add ( VAR_3 ) ; final TYPE_5 VAR_4 = new TYPE_5 ( TYPE_6 . METHOD_5 ( ) ) ; VAR_4 . METHOD_4 ( STRING_3 ) ; VAR_1 . add ( VAR_4 ) ; } } ; ) VAR_4 ( add . VAR_1 ; ) STRING_3 ( METHOD_4 . VAR_4 ; ) ) ( METHOD_5 . TYPE_6 ( TYPE_5 new = VAR_4 TYPE_5 final ; ) VAR_3 ( add . VAR_1 ; ) STRING_2 ( METHOD_4 . VAR_3 ; ) ) VAR_2 ( METHOD_3 . TYPE_4 ( TYPE_3 new = VAR_3 TYPE_3 final ; ) ( METHOD_2 . TYPE_2 = VAR_2 java.lang.String final ; ) STRING_1 ( get . TYPE_1 = VAR_1 TYPE_1 final { ) ( METHOD_1 void static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ; repo = new TYPE_4 < TYPE_1 > ( r ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 , ) ) ( METHOD_2 . repo ( TYPE_6 new ( TYPE_5 new = servlet ; ) r ( > TYPE_1 < TYPE_4 new = repo ; ) ) STRING_1 ( TYPE_3 new ( TYPE_2 new = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( int index , TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( index , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , VAR_1 , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) , null ) ; return VAR_4 ; } } ; VAR_4 return ; ) null , ) ) ( METHOD_5 . TYPE_4 ( METHOD_4 . TYPE_3 , VAR_1 , VAR_2 ( METHOD_3 = VAR_4 TYPE_1 } ; null return { ) 0 < VAR_2 ( if ; ) VAR_3 , index ( METHOD_2 = VAR_2 int { ) VAR_1 TYPE_2 , index int ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.ObjectId VAR_1 = getRevision ( ) ; if ( VAR_1 == null ) { return ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; try ( TYPE_2 VAR_3 = new TYPE_2 ( getChangeId ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) { VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_7 , VAR_8 ) ; METHOD_3 ( VAR_9 , VAR_10 ) ; VAR_11 = VAR_12 ; } finally { walk . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . walk { finally } ; VAR_12 = VAR_11 ; ) VAR_10 , VAR_9 ( METHOD_3 ; ) VAR_8 , VAR_7 ( METHOD_3 ; ) ( METHOD_2 . VAR_3 { ) ) VAR_6 , VAR_5 , VAR_4 , VAR_1 , walk , ) ( getChangeId ( TYPE_2 new = VAR_3 TYPE_2 ( try ; ) VAR_2 ( org.eclipse.jgit.revwalk.RevWalk new = walk org.eclipse.jgit.revwalk.RevWalk } ; return { ) null == VAR_1 ( if ; ) ( getRevision = VAR_1 org.eclipse.jgit.lib.ObjectId { TYPE_1 , java.io.IOException throws ) ( METHOD_1 void protected 
private TYPE_1 METHOD_1 ( TYPE_2 user , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( user , cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ; if ( ( VAR_1 . status ) ! = ( VAR_3 ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; } return VAR_1 . type ; } } ; type . VAR_1 return } ; ) ) VAR_1 + STRING_1 ( ( com.google.gwtorm.server.OrmException new throw { ) ) VAR_3 ( = ! ) status . VAR_1 ( ( if ; ) ( METHOD_1 . ) patchSet ( METHOD_2 . ) cd , user ( create . VAR_2 = VAR_1 TYPE_3 { com.google.gwtorm.server.OrmException throws ) patchSet com.google.gerrit.reviewdb.client.PatchSet , cd com.google.gerrit.server.query.change.ChangeData , user TYPE_2 ( METHOD_1 TYPE_1 private 
private java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( final TYPE_3 . Id VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.Map < TYPE_1 , TYPE_2 > VAR_2 = TYPE_4 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_3 : db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) { VAR_2 . put ( VAR_3 . METHOD_5 ( ) , VAR_3 ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) VAR_3 , ) ( METHOD_5 . VAR_3 ( put . VAR_2 { ) ) VAR_1 ( METHOD_4 . ) ( METHOD_3 . db : VAR_3 TYPE_2 final ( for ; ) ( METHOD_2 . TYPE_4 = VAR_2 > TYPE_2 , TYPE_1 < java.util.Map final { com.google.gwtorm.server.OrmException throws ) VAR_1 Id . TYPE_3 final ( METHOD_1 > TYPE_2 , TYPE_1 < java.util.Map private 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; } } ; ) ) ( of . TYPE_6 , ) ( of . TYPE_6 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( METHOD_1 . TYPE_5 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_3 , ) ( of . TYPE_3 , null , ) ( change.getId , null ( TYPE_2 new return { ) change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 static 
private java.util.Map < com.google.gerrit.reviewdb.client.Change . Key , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( TYPE_1 . NameKey branch ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Change . Key , com.google.gerrit.reviewdb.client.Change . Id > r = new TYPE_2 < > ( ) ; for ( com.google.gerrit.reviewdb.client.Change c : db . changes ( ) . METHOD_2 ( branch ) ) { r . put ( c . getKey ( ) , c . getId ( ) ) ; } return r ; } } ; r return } ; ) ) ( getId . c , ) ( getKey . c ( put . r { ) ) branch ( METHOD_2 . ) ( changes . db : c com.google.gerrit.reviewdb.client.Change ( for ; ) ( > < TYPE_2 new = r > Id . com.google.gerrit.reviewdb.client.Change , Key . com.google.gerrit.reviewdb.client.Change < java.util.Map final { com.google.gwtorm.server.OrmException throws ) branch NameKey . TYPE_1 ( METHOD_1 > Id . com.google.gerrit.reviewdb.client.Change , Key . com.google.gerrit.reviewdb.client.Change < java.util.Map private 
public java.util.Map < TYPE_1 , java.util.Set < TYPE_2 > > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws java.io.IOException , TYPE_3 { try ( org.eclipse.jgit.lib.Repository git = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 ) ) { VAR_4 . METHOD_3 ( git ) ; return VAR_4 . METHOD_1 ( ) ; } } } } ; ) ( METHOD_1 . VAR_4 return ; ) git ( METHOD_3 . VAR_4 { ) ) VAR_1 ( TYPE_4 new = VAR_4 TYPE_4 ; ) VAR_3 ( METHOD_2 . VAR_2 = git org.eclipse.jgit.lib.Repository ( try { TYPE_3 , java.io.IOException throws ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 > > TYPE_2 < java.util.Set , TYPE_1 < java.util.Map public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) . to ( VAR_1 class ) ; bind ( VAR_3 class ) . to ( VAR_1 class ) ; bind ( VAR_4 class ) . to ( VAR_1 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_1 class ) ; METHOD_2 ( ) . to ( VAR_1 class ) ; } } ; ) class VAR_1 ( to . ) ( METHOD_2 ; ) class VAR_1 ( to . ) class VAR_5 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) class VAR_1 ( to . ) class VAR_4 ( bind ; ) class VAR_1 ( to . ) class VAR_3 ( bind ; ) class VAR_1 ( to . ) class VAR_2 ( bind ; ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
protected org.eclipse.jgit.lib.ObjectId METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision ) == null ) { return null ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ; if ( VAR_2 ! = null ) { return VAR_2 . METHOD_1 ( 0 ) ; } return null ; } } ; null return } ; ) 0 ( METHOD_1 . VAR_2 return { ) null = ! VAR_2 ( if ; ) ) ( METHOD_3 . revision , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 = VAR_2 TYPE_1 } ; null return { ) null == ) revision ( ( if { java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 org.eclipse.jgit.lib.ObjectId protected 
public TYPE_1 . PatchSet METHOD_1 ( ) { if ( ( currentPatchSetId ) ! = null ) { for ( int i = ( patchSets . size ( ) ) - 1 ; i > = 0 ; i -- ) { final TYPE_1 . PatchSet ps = patchSets . get ( i ) ; if ( ps . getKey ( ) . equals ( currentPatchSetId ) ) { return ps ; } } } return null ; } } ; null return } } } ; ps return { ) ) currentPatchSetId ( equals . ) ( getKey . ps ( if ; ) i ( get . patchSets = ps PatchSet . TYPE_1 final { ) -- i ; 0 = > i ; 1 - ) ) ( size . patchSets ( = i int ( for { ) null = ! ) currentPatchSetId ( ( if { ) ( METHOD_1 PatchSet . TYPE_1 public 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( new TYPE_2 ( INT_1 ) ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_2 , INT_1 ) ) ) ; assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_3 , INT_1 ) ) ) ; } } ; ) ) ) INT_1 , STRING_3 ( METHOD_3 . TYPE_2 ( METHOD_2 . TYPE_1 , STRING_3 ( assertEquals ; ) ) ) INT_1 , STRING_2 ( TYPE_2 new ( METHOD_2 . TYPE_1 , STRING_2 ( assertEquals ; ) ) ) INT_1 ( TYPE_2 new ( METHOD_2 . TYPE_1 , STRING_1 ( assertEquals { ) ( METHOD_1 void public 
private TYPE_1 < TYPE_2 > [ ] METHOD_1 ( final TYPE_3 r ) throws TYPE_4 , TYPE_5 { final TYPE_1 < TYPE_2 > [ ] p = new TYPE_1 [ r . METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( p . length ) ; i ++ ) { p [ i ] = METHOD_3 ( r . METHOD_4 ( i ) ) ; } return p ; } } ; p return } ; ) ) i ( METHOD_4 . r ( METHOD_3 = ] i [ p { ) ++ i ; ) length . p ( < i ; 0 = i int ( for ; ] ) ( METHOD_2 . r [ TYPE_1 new = p ] [ > TYPE_2 < TYPE_1 final { TYPE_5 , TYPE_4 throws ) r TYPE_3 final ( METHOD_1 ] [ > TYPE_2 < TYPE_1 private 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } try { METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( change . getProject ( ) , patchSet ) , util . METHOD_6 ( VAR_1 ) , VAR_2 , VAR_3 ) ; } catch ( TYPE_3 | TYPE_4 | java.io.IOException | com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( error . VAR_5 { ) e com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_4 | TYPE_3 ( catch } ; ) VAR_3 , VAR_2 , ) VAR_1 ( METHOD_6 . util , ) patchSet , ) ( getProject . change ( METHOD_5 . util , ) change ( METHOD_4 . util ( METHOD_1 { try } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_4 ( ! ( if { ) VAR_3 TYPE_2 , VAR_2 TYPE_1 , VAR_1 com.google.gerrit.reviewdb.client.Account.Id , patchSet com.google.gerrit.reviewdb.client.PatchSet , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 void public 
public void run ( ) { synchronized ( VAR_1 ) { for ( final TYPE_1 < TYPE_2 > i = VAR_1 . METHOD_1 ( ) ; i . METHOD_2 ( ) ; ) { try { i . METHOD_3 ( ) . run ( ) ; } catch ( TYPE_3 err ) { VAR_2 . error ( STRING_1 , err ) ; } i . METHOD_4 ( ) ; } } } } } } ; ) ( METHOD_4 . i } ; ) err , STRING_1 ( error . VAR_2 { ) err TYPE_3 ( catch } ; ) ( run . ) ( METHOD_3 . i { try { ) ; ) ( METHOD_2 . i ; ) ( METHOD_1 . VAR_1 = i > TYPE_2 < TYPE_1 final ( for { ) VAR_1 ( synchronized { ) ( run void public 
public void METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { TYPE_2 c = METHOD_2 ( branch , null ) ; ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) ; METHOD_5 ( branch , c ) ; } } ; ) c , branch ( METHOD_5 ; ) ) ) ( get . branch , c , ) 0 ( METHOD_4 . c ( ReceiveCommand . TYPE_3 new ( METHOD_3 . ctx ; ) null , branch ( METHOD_2 = c TYPE_2 { java.lang.Exception throws ) ctx TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_4 ( input ) ; org.junit.Assert . METHOD_5 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_8 ( ) ; } } ; ) ( METHOD_8 } ; ) ) ) STRING_1 ( of . TYPE_4 ( METHOD_7 ( isEqualTo . ) ( METHOD_6 . ) e ( com.google.common.truth.Truth.assertThat { ) e TYPE_3 ( catch } ; ) STRING_2 ( METHOD_5 . org.junit.Assert ; ) input ( METHOD_4 . ) ( project { try ; VAR_1 = VAR_3 ; ) VAR_2 ( METHOD_3 . VAR_1 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < java.util.List ; ) ( TYPE_1 new = input TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) ; return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . VAR_5 ) ; } } ; ) VAR_5 . ) VAR_4 , ) STRING_3 + ) VAR_1 + STRING_2 ( ( ( METHOD_3 . api ( METHOD_2 . TYPE_4 return ; ) STRING_1 , class VAR_3 ( get . VAR_2 = api > TYPE_3 < TYPE_2 { java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 > TYPE_1 < java.util.List public 
private TYPE_1 METHOD_1 ( TYPE_2 . NameKey projectName ) { try { final org.eclipse.jgit.lib.Repository r = VAR_1 . METHOD_2 ( projectName . get ( ) ) ; try { return r . METHOD_3 ( VAR_2 ) ; } finally { r . close ( ) ; } } catch ( java.io.IOException VAR_3 ) { return null ; } } } } ; null return { ) VAR_3 java.io.IOException ( catch } } ; ) ( close . r { finally } ; ) VAR_2 ( METHOD_3 . r return { try ; ) ) ( get . projectName ( METHOD_2 . VAR_1 = r org.eclipse.jgit.lib.Repository final { try { ) projectName NameKey . TYPE_2 ( METHOD_1 TYPE_1 private 
public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 . Key key ) throws java.io.IOException { try ( TYPE_3 VAR_1 = new TYPE_3 ( key . repo , key . path ) ) { VAR_1 . METHOD_2 ( null , VAR_2 ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; } finally { key . repo = null ; } } } } ; null = repo . key { finally } ; ) VAR_1 ( METHOD_3 . TYPE_2 return ; ) VAR_2 , null ( METHOD_2 . VAR_1 { ) ) path . key , repo . key ( TYPE_3 new = VAR_1 TYPE_3 ( try { java.io.IOException throws ) key Key . TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List static public 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) & & ( getValue ( ) . equals ( p . getValue ( ) ) ) ; } return false ; } } ; false return } ; ) ) ) ( getValue . p ( equals . ) ( getValue ( & & ) ) ) ( METHOD_2 . p ( equals . ) ( METHOD_2 ( return ; ) ) VAR_1 ( ) > ? < TYPE_2 ( ( = p > ? < TYPE_2 final { ) ) ) ( METHOD_1 . VAR_1 ( == ) ) ( METHOD_1 ( ( if { ) VAR_1 TYPE_1 final ( equals boolean public 
private void METHOD_1 ( int VAR_1 ) { if ( VAR_1 < ( ( VAR_2 ) - 1 ) ) { VAR_3 . info ( STRING_1 ) ; try { TYPE_1 . METHOD_2 ( VAR_4 ) ; } catch ( TYPE_2 VAR_5 ) { return ; } } else { VAR_3 . error ( ( ( STRING_2 + ( VAR_2 ) ) + STRING_3 ) ) ; METHOD_3 ( false ) ; } } } } ; ) false ( METHOD_3 ; ) ) STRING_3 + ) ) VAR_2 ( + STRING_2 ( ( ( error . VAR_3 { else } } ; return { ) VAR_5 TYPE_2 ( catch } ; ) VAR_4 ( METHOD_2 . TYPE_1 { try ; ) STRING_1 ( info . VAR_3 { ) ) 1 - ) VAR_2 ( ( < VAR_1 ( if { ) VAR_1 int ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 { TYPE_3 cm = VAR_1 . create ( ctx . getProject ( ) , change.getId ( ) ) ; cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) ; cm . METHOD_4 ( patchSet , VAR_2 ) ; cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ; cm . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . cm ; ) ) ( METHOD_8 . VAR_3 ( METHOD_7 . cm ; ) ) ( METHOD_6 . VAR_3 ( METHOD_5 . cm ; ) VAR_2 , patchSet ( METHOD_4 . cm ; ) ) ( getAccountId . ) ( METHOD_3 . ctx ( METHOD_2 . cm ; ) ) ( change.getId , ) ( getProject . ctx ( create . VAR_1 = cm TYPE_3 { TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( final TYPE_1 . Change change ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( new TYPE_3 ( ) { public void METHOD_6 ( ) { METHOD_7 ( change ) ; } } ) ; METHOD_8 ( VAR_4 ) . METHOD_9 ( true ) ; } } ; ) true ( METHOD_9 . ) VAR_4 ( METHOD_8 ; ) } } ; ) change ( METHOD_7 { ) ( METHOD_6 void public { ) ( TYPE_3 new ( METHOD_5 . VAR_1 ; ) true ( METHOD_4 . VAR_1 ; ) VAR_3 ( METHOD_3 . VAR_1 ; ) ) ) VAR_2 ( METHOD_2 ( ) TYPE_2 ( ( = VAR_1 TYPE_2 { ) change Change . TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( ) ; TYPE_1 . Result r = METHOD_4 ( ) ; revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) ; r = METHOD_6 ( r . getChangeId ( ) ) ; METHOD_7 ( r , ( - 2 ) ) ; } } ; ) ) 2 - ( , r ( METHOD_7 ; ) ) ( getChangeId . r ( METHOD_6 = r ; ) ) ( reject . TYPE_2 ( METHOD_5 . ) r ( revision ; ) ( METHOD_4 = r Result . TYPE_1 ; ) ( METHOD_3 ; ) true ( METHOD_2 . VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( java.lang.String name , boolean create ) { for ( TYPE_1 p : METHOD_2 ( ) ) { if ( p . getName ( ) . METHOD_3 ( name ) ) { return p ; } } if ( create ) { TYPE_1 p = new TYPE_1 ( name ) ; VAR_1 . add ( p ) ; return p ; } else { return null ; } } } } ; null return { else } ; p return ; ) p ( add . VAR_1 ; ) name ( TYPE_1 new = p TYPE_1 { ) create ( if } } ; p return { ) ) name ( METHOD_3 . ) ( getName . p ( if { ) ) ( METHOD_2 : p TYPE_1 ( for { ) create boolean , name java.lang.String ( METHOD_1 TYPE_1 public 
public static java.lang.String METHOD_1 ( TYPE_1 req , java.lang.String VAR_1 ) { if ( TYPE_2 . equals ( VAR_1 ) ) { java.lang.String user = TYPE_3 . METHOD_2 ( req . METHOD_1 ( ) ) ; if ( user ! = null ) { return user ; } java.lang.String auth = req . METHOD_3 ( TYPE_2 ) ; return TYPE_4 . METHOD_4 ( auth ) ; } else { return TYPE_3 . METHOD_2 ( req . METHOD_3 ( VAR_1 ) ) ; } } } } ; ) ) VAR_1 ( METHOD_3 . req ( METHOD_2 . TYPE_3 return { else } ; ) auth ( METHOD_4 . TYPE_4 return ; ) TYPE_2 ( METHOD_3 . req = auth java.lang.String } ; user return { ) null = ! user ( if ; ) ) ( METHOD_1 . req ( METHOD_2 . TYPE_3 = user java.lang.String { ) ) VAR_1 ( equals . TYPE_2 ( if { ) VAR_1 java.lang.String , req TYPE_1 ( METHOD_1 java.lang.String static public 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_1 . OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { TYPE_2 . Change c = cd . change ( db ) ; if ( ( c ! = null ) & & ( VAR_1 . METHOD_3 ( c ) . METHOD_4 ( user ) . METHOD_5 ( ) ) ) { cd . METHOD_6 ( user ) ; return true ; } else { return false ; } } catch ( TYPE_3 e ) { return false ; } } } } ; false return { ) e TYPE_3 ( catch } } ; false return { else } ; true return ; ) user ( METHOD_6 . cd { ) ) ) ( METHOD_5 . ) user ( METHOD_4 . ) c ( METHOD_3 . VAR_1 ( & & ) null = ! c ( ( if ; ) db ( change . cd = c Change . TYPE_2 { try } ; true return { ) ) user ( METHOD_2 . cd ( if { OrmException . TYPE_1 throws ) cd com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 . NameKey > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 . NameKey > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . change ( ) . METHOD_2 ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( METHOD_2 . ) ( change . cd , ) ( getProject . ) ( change . cd ( put . VAR_1 { ) VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( create . TYPE_3 = VAR_1 > NameKey . TYPE_2 , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > NameKey . TYPE_2 , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 public 
private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 w ) { final TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 class ) ; if ( VAR_2 ! = null ) { w . METHOD_3 ( ) ; w . METHOD_3 ( ( ( STRING_1 + ( METHOD_4 ( ) ) ) + STRING_2 ) ) ; w . METHOD_5 ( ) ; w . METHOD_3 ( ( ( STRING_3 + ( VAR_2 . value ( ) ) ) + STRING_4 ) ) ; w . METHOD_6 ( ) ; w . METHOD_3 ( STRING_5 ) ; } } } } ; ) STRING_5 ( METHOD_3 . w ; ) ( METHOD_6 . w ; ) ) STRING_4 + ) ) ) ( value . VAR_2 ( + STRING_3 ( ( ( METHOD_3 . w ; ) ( METHOD_5 . w ; ) ) STRING_2 + ) ) ) ( METHOD_4 ( + STRING_1 ( ( ( METHOD_3 . w ; ) ( METHOD_3 . w { ) null = ! VAR_2 ( if ; ) class VAR_4 ( METHOD_2 . VAR_3 = VAR_2 TYPE_3 final { ) w TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 void private 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { org.junit.Assert.assertEquals ( VAR_1 . line , VAR_2 . line ) ; org.junit.Assert.assertEquals ( VAR_1 . message , VAR_2 . message ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_4 ) ; if ( ( VAR_5 ) == null ) { org.junit.Assert.assertEquals ( VAR_6 , VAR_7 ) ; } } } } ; ) VAR_7 , VAR_6 ( org.junit.Assert.assertEquals { ) null == ) VAR_5 ( ( if ; ) VAR_4 , VAR_3 ( org.junit.Assert.assertEquals ; ) message . VAR_2 , message . VAR_1 ( org.junit.Assert.assertEquals ; ) line . VAR_2 , line . VAR_1 ( org.junit.Assert.assertEquals { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void static private 
protected byte [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision ) == null ) { return new byte [ ] { } ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ; if ( VAR_2 ! = null ) { TYPE_2 VAR_4 = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ; return VAR_4 . METHOD_6 ( VAR_6 ) ; } else { return new byte [ ] { } ; } } } } ; } { ] [ byte new return { else } ; ) VAR_6 ( METHOD_6 . VAR_4 return ; ) VAR_5 , ) 0 ( METHOD_5 . VAR_2 ( METHOD_4 . VAR_3 = VAR_4 TYPE_2 { ) null = ! VAR_2 ( if ; ) ) ( METHOD_3 . revision , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 = VAR_2 TYPE_1 } ; } { ] [ byte new return { ) null == ) revision ( ( if { java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 ] [ byte protected 
public synchronized void METHOD_1 ( int VAR_1 ) { int VAR_2 = - 1 ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( ( VAR_3 . get ( i ) . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) { VAR_2 = i ; break ; } } if ( VAR_2 > = 0 ) { VAR_3 . METHOD_4 ( VAR_2 ) ; } } } } ; ) VAR_2 ( METHOD_4 . VAR_3 { ) 0 = > VAR_2 ( if } } ; break ; i = VAR_2 { ) VAR_1 == ) ) ( METHOD_3 . ) ( METHOD_2 . ) i ( get . VAR_3 ( ( if { ) ++ i ; ) ) ( size . VAR_3 ( < i ; 0 = i int ( for ; 1 - = VAR_2 int { ) VAR_1 int ( METHOD_1 void synchronized public 
public void onSuccess ( final TYPE_1 result ) { if ( METHOD_1 ( ) ) { METHOD_2 ( 1 ) ; } VAR_1 = result ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_4 ( true ) ; VAR_4 . METHOD_4 ( true ) ; VAR_5 . METHOD_4 ( true ) ; METHOD_5 ( ) ; VAR_6 . onSuccess ( VAR_7 ) ; } } ; ) VAR_7 ( onSuccess . VAR_6 ; ) ( METHOD_5 ; ) true ( METHOD_4 . VAR_5 ; ) true ( METHOD_4 . VAR_4 ; ) true ( METHOD_4 . VAR_3 ; ) false ( METHOD_3 . VAR_2 ; result = VAR_1 } ; ) 1 ( METHOD_2 { ) ) ( METHOD_1 ( if { ) result TYPE_1 final ( onSuccess void public 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; } else { return TYPE_3 . METHOD_3 ( notes . METHOD_5 ( ) . METHOD_6 ( ) . values ( ) ) ; } } } } ; ) ) ( values . ) ( METHOD_6 . ) ( METHOD_5 . notes ( METHOD_3 . TYPE_3 return { else } ; ) ) ) ( getChangeId . notes ( METHOD_1 . ) ( METHOD_4 . db ( METHOD_3 . TYPE_3 return { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { com.google.gwtorm.server.OrmException throws ) notes TYPE_2 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 > TYPE_1 < java.util.List public 
public static TYPE_1 revision ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { int VAR_1 = id . getParentKey ( ) . get ( ) ; java.lang.String revision = TYPE_2 . get ( id ) ; if ( revision ! = null ) { return TYPE_3 . revision ( VAR_1 , revision ) ; } return TYPE_3 . change ( VAR_1 ) . view ( STRING_1 ) . id ( id . get ( ) ) ; } } ; ) ) ( get . id ( id . ) STRING_1 ( view . ) VAR_1 ( change . TYPE_3 return } ; ) revision , VAR_1 ( revision . TYPE_3 return { ) null = ! revision ( if ; ) id ( get . TYPE_2 = revision java.lang.String ; ) ( get . ) ( getParentKey . id = VAR_1 int { ) id com.google.gerrit.reviewdb.client.PatchSet.Id ( revision TYPE_1 static public 
private void METHOD_1 ( TYPE_1 c ) { TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) ! = null ) ) ; TYPE_2 . METHOD_2 ( ( ( c . getStatus ( ) ) == ( VAR_1 ) ) , ( STRING_1 + STRING_2 ) ) ; TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_3 + STRING_4 ) , METHOD_5 ( ) . getAccountId ( ) , c ) ; } } ; ) c , ) ( getAccountId . ) ( METHOD_5 , ) STRING_4 + STRING_3 ( , ) ) ( getAccountId . ) ( METHOD_5 ( equals . ) ( METHOD_4 . c ( METHOD_2 . TYPE_2 ; ) ) STRING_2 + STRING_1 ( , ) ) VAR_1 ( == ) ) ( getStatus . c ( ( ( METHOD_2 . TYPE_2 ; ) ) null = ! ) ) ( METHOD_3 . c ( ( ( METHOD_2 . TYPE_2 { ) c TYPE_1 ( METHOD_1 void private 
protected byte [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision ) == null ) { return new byte [ ] { } ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ; if ( VAR_2 ! = null ) { TYPE_2 VAR_4 = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ; return VAR_4 . METHOD_6 ( VAR_6 ) ; } return new byte [ ] { } ; } } ; } { ] [ byte new return } ; ) VAR_6 ( METHOD_6 . VAR_4 return ; ) VAR_5 , ) 0 ( METHOD_5 . VAR_2 ( METHOD_4 . VAR_3 = VAR_4 TYPE_2 { ) null = ! VAR_2 ( if ; ) ) ( METHOD_3 . revision , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 = VAR_2 TYPE_1 } ; } { ] [ byte new return { ) null == ) revision ( ( if { java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 ] [ byte protected 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 . METHOD_2 ( name ) ; java.util.List < TYPE_2 > values = new java.util.ArrayList < TYPE_2 > ( 2 ) ; values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) ; values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ; TYPE_1 type = new TYPE_1 ( name , values ) ; return type ; } } ; type return ; ) values , name ( TYPE_1 new = type TYPE_1 ; ) ) STRING_2 , ) ) 1 ( ) short ( ( ( TYPE_2 new ( add . values ; ) ) STRING_1 , ) ) 0 ( ) short ( ( ( TYPE_2 new ( add . values ; ) 2 ( > TYPE_2 < java.util.ArrayList new = values > TYPE_2 < java.util.List ; ) name ( METHOD_2 . TYPE_1 { ) name java.lang.String ( METHOD_1 TYPE_1 static public 
private java.lang.String METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; if ( VAR_2 == null ) { return null ; } return METHOD_2 ( projectName , VAR_1 , VAR_4 . create ( VAR_2 ) . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . ) VAR_2 ( create . VAR_4 , VAR_1 , projectName ( METHOD_2 return } ; null return { ) null == VAR_2 ( if ; ) ) projectName ( com.google.gerrit.reviewdb.client.Project.NameKey new ( get . VAR_3 = VAR_2 TYPE_1 { ) VAR_1 java.lang.String , projectName java.lang.String ( METHOD_1 java.lang.String private 
public void run ( ) throws java.lang.Exception { METHOD_1 ( VAR_1 ) ; if ( ( ( VAR_1 . METHOD_2 ( ) ) ! = null ) & & ( ! ( VAR_1 . METHOD_3 ( ) . isEmpty ( ) ) ) ) { throw new TYPE_1 ( 1 , STRING_1 ) ; } final TYPE_2 VAR_2 = METHOD_4 ( out ) ; try { VAR_1 . display ( VAR_2 ) ; } finally { VAR_2 . METHOD_5 ( ) ; } } } } ; ) ( METHOD_5 . VAR_2 { finally } ; ) VAR_2 ( display . VAR_1 { try ; ) out ( METHOD_4 = VAR_2 TYPE_2 final } ; ) STRING_1 , 1 ( TYPE_1 new throw { ) ) ) ) ( isEmpty . ) ( METHOD_3 . VAR_1 ( ! ( & & ) null = ! ) ) ( METHOD_2 . VAR_1 ( ( ( if ; ) VAR_1 ( METHOD_1 { java.lang.Exception throws ) ( run void public 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( err == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( err ) ; } } } } ; ) err ( METHOD_3 . TYPE_2 return { else } ; ) ( METHOD_2 . TYPE_2 return } ; ) e , err ( error . VAR_2 { else } ; ) err ( error . VAR_2 { ) null == err ( if { ) VAR_1 ( if { ) e java.lang.Exception , err java.lang.String ( METHOD_1 > TYPE_1 < java.util.List private 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_3 . METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db . close ( ) ; } } synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } return null ; } } ; null return } ; ) 1 ( update . VAR_3 { ) VAR_3 ( synchronized } } ; ) ( close . db { finally } ; ) db ( METHOD_3 { try ; ) ( METHOD_4 . VAR_2 = db com.google.gerrit.reviewdb.server.ReviewDb { else } ; ) db ( METHOD_3 { ) ) ) ( METHOD_2 . TYPE_3 ( == VAR_1 ( if { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; } } ; ) ) ( of . TYPE_6 , ) ( of . TYPE_6 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( METHOD_1 . TYPE_5 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_3 , ) ( of . TYPE_3 , null , ) ( change.getId ( TYPE_2 new return { ) change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 static 
private TYPE_1 METHOD_1 ( final TYPE_2 . HttpServletResponse rsp , final java.lang.String VAR_1 ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { TYPE_3 . Key key = new TYPE_3 . Key ( VAR_2 , VAR_1 ) ; return auth ( db . METHOD_3 ( ) . get ( key ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ) . log ( STRING_1 , e ) ; return null ; } } } } ; null return ; ) e , STRING_1 ( log . ) ( METHOD_4 { ) e com.google.gwtorm.server.OrmException ( catch } } ; ) ( close . db { finally } ; ) ) key ( get . ) ( METHOD_3 . db ( auth return ; ) VAR_1 , VAR_2 ( Key . TYPE_3 new = key Key . TYPE_3 { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { try { ) VAR_1 java.lang.String final , rsp HttpServletResponse . TYPE_2 final ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( ) { approvals = TYPE_1 . of ( ) ; reviewers = TYPE_2 . of ( ) ; VAR_1 = TYPE_3 . of ( ) ; VAR_2 = TYPE_1 . of ( ) ; VAR_3 = TYPE_1 . of ( ) ; VAR_4 = TYPE_1 . of ( ) ; } } ; ) ( of . TYPE_1 = VAR_4 ; ) ( of . TYPE_1 = VAR_3 ; ) ( of . TYPE_1 = VAR_2 ; ) ( of . TYPE_3 = VAR_1 ; ) ( of . TYPE_2 = reviewers ; ) ( of . TYPE_1 = approvals { ) ( METHOD_1 void private 
private void METHOD_1 ( ) { final java.util.Set < TYPE_1 . Id > VAR_1 = user . METHOD_2 ( ) ; final TYPE_2 VAR_2 = VAR_3 . get ( change . METHOD_3 ( ) . getParentKey ( ) ) ; METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) ) ; METHOD_1 ( VAR_1 , VAR_3 . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . VAR_3 , VAR_1 ( METHOD_1 ; ) ) ( METHOD_4 . VAR_2 , VAR_1 ( METHOD_1 ; ) ) ( getParentKey . ) ( METHOD_3 . change ( get . VAR_3 = VAR_2 TYPE_2 final ; ) ( METHOD_2 . user = VAR_1 > Id . TYPE_1 < java.util.Set final { ) ( METHOD_1 void private 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) { VAR_3 . METHOD_2 ( 0 , 0 , new TYPE_2 ( VAR_1 , INT_1 ) ) ; VAR_3 . METHOD_3 ( 0 , 1 , VAR_2 ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 . email ( ) ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_1 . name ( ) ) ; } } ; ) ) ( name . VAR_1 , STRING_2 ( METHOD_5 . ) ( METHOD_4 . VAR_4 ; ) ) ( email . VAR_1 , STRING_1 ( METHOD_5 . ) ( METHOD_4 . VAR_4 ; ) VAR_2 , 1 , 0 ( METHOD_3 . VAR_3 ; ) ) INT_1 , VAR_1 ( TYPE_2 new , 0 , 0 ( METHOD_2 . VAR_3 { ) VAR_2 java.lang.String final , VAR_1 TYPE_1 final ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 . OrmException , TYPE_2 { METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) ; METHOD_4 ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; java.util.Set < java.lang.String > s = VAR_1 . METHOD_3 ( db ) ; assertEquals ( 1 , s . size ( ) ) ; METHOD_5 ( s . contains ( STRING_3 ) ) ; METHOD_2 ( s . contains ( STRING_4 ) ) ; } } ; ) ) STRING_4 ( contains . s ( METHOD_2 ; ) ) STRING_3 ( contains . s ( METHOD_5 ; ) ) ( size . s , 1 ( assertEquals ; ) db ( METHOD_3 . VAR_1 = s > java.lang.String < java.util.Set ; ) STRING_2 ( METHOD_4 ; ) STRING_1 ( METHOD_4 ; ) ) ( isEmpty . ) db ( METHOD_3 . VAR_1 ( METHOD_2 { TYPE_2 , OrmException . TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 , int row , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { METHOD_2 ( row ) ; } else if ( ( VAR_2 == ( VAR_4 ) ) || ( VAR_2 == ( VAR_5 ) ) ) { } else if ( ( METHOD_3 ( row ) ) ! = null ) { METHOD_4 ( row ) ; } } } } ; ) row ( METHOD_4 { ) null = ! ) ) row ( METHOD_3 ( ( if else } { ) ) ) VAR_5 ( == VAR_2 ( || ) ) VAR_4 ( == VAR_2 ( ( if else } ; ) row ( METHOD_2 { ) ) VAR_3 ( == VAR_2 ( if { ) VAR_2 int , row int , VAR_1 TYPE_1 ( METHOD_1 void public 
void set ( TYPE_1 . ChangeInfo info ) { this . changeId = info . METHOD_1 ( ) ; this . VAR_1 = ( info . METHOD_2 ( ) ) & & ( info . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ) ; METHOD_5 ( info . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( changeId ) ; VAR_3 . METHOD_8 ( VAR_1 ) ; if ( ! ( VAR_1 ) ) { VAR_4 . METHOD_9 ( null ) ; } } } } ; ) null ( METHOD_9 . VAR_4 { ) ) VAR_1 ( ! ( if ; ) VAR_1 ( METHOD_8 . VAR_3 ; ) changeId ( METHOD_7 . VAR_2 ; ) ) ( METHOD_6 . info ( METHOD_5 ; ) ) STRING_1 ( METHOD_4 . ) ( METHOD_3 . info ( & & ) ) ( METHOD_2 . info ( = VAR_1 . this ; ) ( METHOD_1 . info = changeId . this { ) info ChangeInfo . TYPE_1 ( set void 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; } else { return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; } } } } ; ) VAR_3 ( METHOD_4 . ) VAR_2 ( METHOD_6 . ) ( METHOD_5 . VAR_1 return { else } ; ) VAR_3 ( METHOD_4 . ) ( METHOD_2 . VAR_1 return { ) ) VAR_2 ( equals . ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( if { java.io.IOException throws ) ( METHOD_1 TYPE_1 public 
private java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( revision . get ( ) ) > 0 ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( TYPE_4 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_8 ( VAR_1 ) ; } else { return java.util.Collections . METHOD_9 ( ) ; } } } } ; ) ( METHOD_9 . java.util.Collections return { else } ; ) VAR_1 ( METHOD_8 . java.util.Collections return ; ) ) ( METHOD_4 . TYPE_4 ( METHOD_7 . VAR_1 ; ) ) ( METHOD_6 ( METHOD_5 . VAR_1 ; ) ) ) ( METHOD_4 . TYPE_3 ( METHOD_3 . ) ( TYPE_2 new ( METHOD_2 . VAR_1 ; ) ( TYPE_1 new = VAR_1 TYPE_1 { ) 0 > ) ) ( get . revision ( ( if { ) ( METHOD_1 > TYPE_1 < java.util.List private 
public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_3 < ? extends TYPE_2 < TYPE_1 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) == 1 ) { return TYPE_4 . METHOD_2 ( VAR_1 ) ; } return new TYPE_5 < TYPE_1 > ( VAR_1 ) ; } } ; ) VAR_1 ( > TYPE_1 < TYPE_5 new return } ; ) VAR_1 ( METHOD_2 . TYPE_4 return { ) 1 == ) ) ( size . VAR_1 ( ( if { ) VAR_1 > > TYPE_1 < TYPE_2 extends ? < TYPE_3 final ( METHOD_1 > TYPE_1 < TYPE_2 > TYPE_1 < static public 
protected TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; } } ; } } ; ) db ( of . TYPE_3 return { ) ( METHOD_3 > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_4 public } ; VAR_2 return { ) ( METHOD_2 TYPE_2 public { ) ( TYPE_1 new return ; ) VAR_1 , ) db ( of . TYPE_3 ( create . VAR_3 = VAR_2 TYPE_2 final { ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 protected 
public java.util.Set < java.lang.String > METHOD_1 ( ) throws TYPE_1 { try { return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; ) ) ) ) ( value . ) revision ( apply . ) true ( METHOD_3 . ) ( get . VAR_1 ( ) > java.lang.String < TYPE_3 ( ( ( METHOD_2 . TYPE_2 return { try { TYPE_1 throws ) ( METHOD_1 > java.lang.String < java.util.Set public 
public static void query ( TYPE_1 < TYPE_2 < TYPE_3 > > VAR_1 , java.lang.String ... VAR_2 ) { assert ( VAR_2 . length ) > = 2 ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_4 ) ; for ( java.lang.String VAR_5 : VAR_2 ) { VAR_3 . METHOD_1 ( STRING_1 , TYPE_5 . METHOD_2 ( VAR_5 ) ) ; } TYPE_3 . METHOD_3 ( VAR_3 , VAR_6 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_4 . VAR_3 ; ) VAR_6 , VAR_3 ( METHOD_3 . TYPE_3 } ; ) ) VAR_5 ( METHOD_2 . TYPE_5 , STRING_1 ( METHOD_1 . VAR_3 { ) VAR_2 : VAR_5 java.lang.String ( for ; ) VAR_4 ( TYPE_4 new = VAR_3 TYPE_4 ; 2 = > ) length . VAR_2 ( assert { ) VAR_2 ... java.lang.String , VAR_1 > > TYPE_3 < TYPE_2 < TYPE_1 ( query void static public 
private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > in ) { java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ; for ( TYPE_1 m : in ) { if ( m . METHOD_2 ( ) ) { r . METHOD_3 ( m . METHOD_4 ( ) ) ; } else { r . add ( m ) ; } } return r ; } } ; r return } } ; ) m ( add . r { else } ; ) ) ( METHOD_4 . m ( METHOD_3 . r { ) ) ( METHOD_2 . m ( if { ) in : m TYPE_1 ( for ; ) ) ( size . in ( > TYPE_1 < java.util.ArrayList new = r > TYPE_1 < java.util.ArrayList { ) in > TYPE_1 < java.util.List ( METHOD_1 > TYPE_1 < java.util.List static private 
public void run ( ) { TYPE_1 VAR_1 = cm . METHOD_1 ( ) . METHOD_2 ( ) ; int line = ( cm . METHOD_3 ( VAR_1 ) ) + 1 ; TYPE_2 . METHOD_4 ( line ) ; java.lang.String token = TYPE_3 . METHOD_5 ( revision , path ) ; if ( ! ( TYPE_4 . METHOD_6 ( ) ) ) { TYPE_4 . METHOD_7 ( token ) ; } else { TYPE_4 . display ( token ) ; } } } } ; ) token ( display . TYPE_4 { else } ; ) token ( METHOD_7 . TYPE_4 { ) ) ) ( METHOD_6 . TYPE_4 ( ! ( if ; ) path , revision ( METHOD_5 . TYPE_3 = token java.lang.String ; ) line ( METHOD_4 . TYPE_2 ; 1 + ) ) VAR_1 ( METHOD_3 . cm ( = line int ; ) ( METHOD_2 . ) ( METHOD_1 . cm = VAR_1 TYPE_1 { ) ( run void public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 , null , VAR_4 , VAR_5 ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_5 ) ; } } ; ) VAR_5 ( isEqualTo . ) ) ( METHOD_3 . ) ( http . ) ( METHOD_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_5 , VAR_4 , null , VAR_3 ( METHOD_4 . VAR_2 ; ) VAR_1 ( isEqualTo . ) ) ( METHOD_3 . ) ( http . ) ( METHOD_2 ( com.google.common.truth.Truth.assertThat { java.lang.Exception throws ) ( METHOD_1 void public 
java.lang.String METHOD_1 ( final java.lang.String s ) { if ( ( s == null ) || ( ( s . length ( ) ) < INT_1 ) ) { return null ; } return ( ( s . METHOD_2 ( 0 , INT_2 ) ) + STRING_1 ) + ( s . METHOD_2 ( ( ( s . length ( ) ) - INT_3 ) ) ) ; } } ; ) ) ) INT_3 - ) ) ( length . s ( ( ( METHOD_2 . s ( + ) STRING_1 + ) ) INT_2 , 0 ( METHOD_2 . s ( ( return } ; null return { ) ) INT_1 < ) ) ( length . s ( ( || ) null == s ( ( if { ) s java.lang.String final ( METHOD_1 java.lang.String 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } super . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) ; TYPE_1 . METHOD_5 ( VAR_4 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_6 ( final TYPE_3 result ) { display ( result ) ; } } ) ; } } ; ) } } ; ) result ( display { ) result TYPE_3 final ( METHOD_6 void protected { ) this ( > TYPE_3 < TYPE_2 new , VAR_4 ( METHOD_5 . TYPE_1 ; ) ) VAR_3 ( METHOD_4 . VAR_2 ( METHOD_3 . VAR_1 ; ) ( METHOD_1 . super } ; ) ( METHOD_2 { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 a = new TYPE_1 ( VAR_1 , STRING_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_4 . a , ) STRING_4 + ) VAR_1 + STRING_3 ( ( ( org.junit.Assert.assertEquals ; ) ) ( METHOD_3 . ) ( METHOD_2 . a , VAR_1 ( org.junit.Assert.assertEquals ; ) STRING_2 , VAR_1 ( TYPE_1 new = a TYPE_1 ; STRING_1 = VAR_1 java.lang.String { ) ( METHOD_1 void public 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( getId . cd , ) ( getProject . ) ( change . cd ( put . VAR_1 { ) ) ( values . VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( create . TYPE_3 = VAR_1 > Id . com.google.gerrit.reviewdb.client.Change , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_2 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > Id . com.google.gerrit.reviewdb.client.Change , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 public 
private void METHOD_1 ( java.lang.String changeId , TYPE_1 VAR_1 ) throws java.lang.Exception { switch ( VAR_1 ) { case VAR_2 : METHOD_2 ( changeId ) ; return ; case VAR_3 : METHOD_3 ( changeId ) ; return ; case VAR_4 : METHOD_4 ( changeId ) ; return ; case VAR_5 : METHOD_5 ( changeId ) ; return ; case VAR_6 : METHOD_6 ( changeId ) ; return ; default : org.junit.Assert . METHOD_7 ( ( STRING_1 + VAR_1 ) ) ; } } } } ; ) ) VAR_1 + STRING_1 ( ( METHOD_7 . org.junit.Assert : default ; return ; ) changeId ( METHOD_6 : VAR_6 case ; return ; ) changeId ( METHOD_5 : VAR_5 case ; return ; ) changeId ( METHOD_4 : VAR_4 case ; return ; ) changeId ( METHOD_3 : VAR_3 case ; return ; ) changeId ( METHOD_2 : VAR_2 case { ) VAR_1 ( switch { java.lang.Exception throws ) VAR_1 TYPE_1 , changeId java.lang.String ( METHOD_1 void private 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return ; } TYPE_2 change = VAR_2 . get ( ) ; try { METHOD_3 ( VAR_3 ) ; METHOD_4 ( change ) ; } catch ( TYPE_3 | com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { VAR_4 . error ( STRING_1 , e ) ; throw new TYPE_5 ( e ) ; } } } } ; ) e ( TYPE_5 new throw ; ) e , STRING_1 ( error . VAR_4 { ) e java.io.IOException | TYPE_4 | com.google.gwtorm.server.OrmException | TYPE_3 ( catch } ; ) change ( METHOD_4 ; ) VAR_3 ( METHOD_3 { try ; ) ( get . VAR_2 = change TYPE_2 } ; return { ) ) ) VAR_1 ( METHOD_2 ( ! ( if { ) VAR_1 TYPE_1 final ( METHOD_1 void private 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) ; if ( VAR_2 . METHOD_4 ( ) ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_3 class ) ; } else { METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_4 class ) ; } METHOD_5 ( STRING_1 ) . METHOD_6 ( VAR_5 class ) ; } } ; ) class VAR_5 ( METHOD_6 . ) STRING_1 ( METHOD_5 } ; ) class VAR_4 ( METHOD_3 . ) STRING_1 ( METHOD_2 { else } ; ) class VAR_3 ( METHOD_3 . ) STRING_1 ( METHOD_2 { ) ) ( METHOD_4 . VAR_2 ( if ; ) class VAR_1 ( METHOD_3 . ) STRING_1 ( METHOD_2 ; ) ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
void close ( ) { try { VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_1 ( STRING_1 , e ) ; } try { VAR_3 . close ( true ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_1 ( STRING_2 , e ) ; } try { VAR_4 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_1 ( STRING_3 , e ) ; } } } } ; ) e , STRING_3 ( METHOD_1 . VAR_2 { ) e java.io.IOException ( catch } ; ) ( close . VAR_4 { try } ; ) e , STRING_2 ( METHOD_1 . VAR_2 { ) e java.io.IOException ( catch } ; ) true ( close . VAR_3 { try } ; ) e , STRING_1 ( METHOD_1 . VAR_2 { ) e java.io.IOException ( catch } ; ) ( close . VAR_1 { try { ) ( close void 
private boolean METHOD_1 ( final int i ) { final TYPE_1 s = VAR_1 . get ( i ) ; final TYPE_1 e = VAR_1 . get ( ( i - 1 ) ) ; return ( ( s . METHOD_2 ( ) ) - ( e . METHOD_3 ( ) ) ) < = ( 2 * ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( * 2 ( = < ) ) ) ( METHOD_3 . e ( - ) ) ( METHOD_2 . s ( ( return ; ) ) 1 - i ( ( get . VAR_1 = e TYPE_1 final ; ) i ( get . VAR_1 = s TYPE_1 final { ) i int final ( METHOD_1 boolean private 
private static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ( VAR_2 . getChange ( ) . getStatus ( ) ) ! = ( VAR_3 ) ) { return false ; } for ( final TYPE_1 t : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ! ( VAR_2 . METHOD_4 ( t ) ) ) { return false ; } } return true ; } } ; true return } } ; false return { ) ) ) t ( METHOD_4 . VAR_2 ( ! ( if { ) ) ( METHOD_3 . ) ( METHOD_2 . TYPE_3 : t TYPE_1 final ( for } ; false return { ) ) VAR_3 ( = ! ) ) ( getStatus . ) ( getChange . VAR_2 ( ( if { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 boolean static private 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( INT_1 ) ) ; METHOD_2 ( b , b . append ( INT_2 ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) INT_2 ( append . b , b ( METHOD_2 ; ) ) INT_1 ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 err ) { TYPE_2 . METHOD_2 ( true , VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( err ) ) { new TYPE_3 ( err . getMessage ( ) ) . METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ; } else { super . METHOD_1 ( err ) ; } } } } ; ) err ( METHOD_1 . super { else } ; ) ) id ( METHOD_5 . TYPE_5 ( display . TYPE_4 ; ) ( METHOD_4 . ) ) ( getMessage . err ( TYPE_3 new { ) ) err ( METHOD_3 . TYPE_3 ( if ; ) VAR_1 , true ( METHOD_2 . TYPE_2 { ) err TYPE_1 ( METHOD_1 void public 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { VAR_1 . METHOD_1 ( ) ; final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ; for ( final TYPE_1 p : result ) { r . add ( new TYPE_2 ( p ) ) ; VAR_1 . put ( p . getName ( ) , p . METHOD_2 ( ) ) ; } VAR_2 . METHOD_3 ( req , new TYPE_3 ( r ) ) ; } } ; ) ) r ( TYPE_3 new , req ( METHOD_3 . VAR_2 } ; ) ) ( METHOD_2 . p , ) ( getName . p ( put . VAR_1 ; ) ) p ( TYPE_2 new ( add . r { ) result : p TYPE_1 final ( for ; ) ) ( size . result ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.ArrayList final ; ) ( METHOD_1 . VAR_1 { ) result > TYPE_1 < java.util.List final ( onSuccess void public 
private void METHOD_1 ( ) { for ( java.lang.String name : ( ( java.util.List < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_2 ( VAR_2 ) . apply ( new TYPE_1 ( ) ) ) ) ) { VAR_3 . METHOD_3 ( name ) ; VAR_3 . METHOD_3 ( CHAR_1 ) ; } VAR_3 . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . VAR_3 } ; ) CHAR_1 ( METHOD_3 . VAR_3 ; ) name ( METHOD_3 . VAR_3 { ) ) ) ) ) ( TYPE_1 new ( apply . ) VAR_2 ( METHOD_2 . ) ( get . VAR_1 ( ) > java.lang.String < java.util.List ( ( : name java.lang.String ( for { ) ( METHOD_1 void private 
private static void METHOD_1 ( final java.lang.String name , final java.lang.String value , final TYPE_1 r ) { assertEquals ( VAR_1 , r . METHOD_2 ( ) ) ; assertEquals ( name , r . METHOD_3 ( ) ) ; assertEquals ( 1 , r . METHOD_4 ( ) ) ; final TYPE_1 c = r . METHOD_5 ( 0 ) ; assertEquals ( VAR_2 , c . METHOD_2 ( ) ) ; assertEquals ( value , c . METHOD_3 ( ) ) ; assertEquals ( 0 , c . METHOD_4 ( ) ) ; } } ; ) ) ( METHOD_4 . c , 0 ( assertEquals ; ) ) ( METHOD_3 . c , value ( assertEquals ; ) ) ( METHOD_2 . c , VAR_2 ( assertEquals ; ) 0 ( METHOD_5 . r = c TYPE_1 final ; ) ) ( METHOD_4 . r , 1 ( assertEquals ; ) ) ( METHOD_3 . r , name ( assertEquals ; ) ) ( METHOD_2 . r , VAR_1 ( assertEquals { ) r TYPE_1 final , value java.lang.String final , name java.lang.String final ( METHOD_1 void static private 
private static boolean METHOD_1 ( ) { final java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; java.lang.String value = TYPE_1 . METHOD_2 ( STRING_4 ) ; return ( value ! = null ) & & ( TYPE_2 . METHOD_3 ( VAR_1 ) . contains ( value . METHOD_4 ( ) ) ) ; } } ; ) ) ) ( METHOD_4 . value ( contains . ) VAR_1 ( METHOD_3 . TYPE_2 ( & & ) null = ! value ( return ; ) STRING_4 ( METHOD_2 . TYPE_1 = value java.lang.String ; } STRING_3 , STRING_2 , STRING_1 { ] [ java.lang.String new = VAR_1 ] [ java.lang.String final { ) ( METHOD_1 boolean static private 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 VAR_1 ) { if ( ( req . METHOD_2 ( ) . length ( ) ) > = ( TYPE_3 . info ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( req , VAR_1 ) ; } else { java.util.List < TYPE_4 > VAR_2 = java.util.Collections . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( req , new TYPE_5 ( VAR_2 ) ) ; } } } } ; ) ) VAR_2 ( TYPE_5 new , req ( METHOD_7 . VAR_1 ; ) ( METHOD_6 . java.util.Collections = VAR_2 > TYPE_4 < java.util.List { else } ; ) VAR_1 , req ( METHOD_5 { ) ) ) ( METHOD_4 . ) ( METHOD_3 . ) ( info . TYPE_3 ( = > ) ) ( length . ) ( METHOD_2 . req ( ( if { ) VAR_1 TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_1 res = METHOD_5 ( STRING_1 ) ; org.junit.Assert.assertEquals ( ( name + STRING_2 ) , new java.lang.String ( res . METHOD_6 ( ) , VAR_1 ) ) ; } } ; ) ) VAR_1 , ) ( METHOD_6 . res ( java.lang.String new , ) STRING_2 + name ( ( org.junit.Assert.assertEquals ; ) STRING_1 ( METHOD_5 = res TYPE_1 ; ) ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 . repo = name java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db . close ( ) ; } } return null ; } } ; null return } } ; ) ( close . db { finally } ; ) db ( METHOD_3 { try ; ) ( METHOD_4 . VAR_2 = db com.google.gerrit.reviewdb.server.ReviewDb { else } ; ) db ( METHOD_3 { ) ) ) ( METHOD_2 . TYPE_2 ( == VAR_1 ( if { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( METHOD_1 TYPE_1 public 
protected java.lang.String METHOD_1 ( ) { java.lang.StringBuilder m = new java.lang.StringBuilder ( VAR_1 ) ; java.lang.String [ ] VAR_2 = METHOD_2 ( ) ; if ( VAR_2 ! = null ) { m . append ( TYPE_1 . on ( STRING_1 ) . METHOD_3 ( VAR_2 ) ) ; } return m . toString ( ) ; } } ; ) ( toString . m return } ; ) ) VAR_2 ( METHOD_3 . ) STRING_1 ( on . TYPE_1 ( append . m { ) null = ! VAR_2 ( if ; ) ( METHOD_2 = VAR_2 ] [ java.lang.String ; ) VAR_1 ( java.lang.StringBuilder new = m java.lang.StringBuilder { ) ( METHOD_1 java.lang.String protected 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , org.eclipse.jgit.revwalk.RevCommit VAR_2 , TYPE_1 VAR_3 ) throws TYPE_2 , java.io.IOException { TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = VAR_4 . METHOD_4 ( VAR_1 ) ; if ( org.eclipse.jgit.lib.ObjectId . equals ( VAR_5 , VAR_2 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_5 ; } } ; VAR_5 return } ; ) STRING_1 ( TYPE_2 new throw { ) ) ) ( METHOD_2 . VAR_2 , VAR_5 ( equals . org.eclipse.jgit.lib.ObjectId ( if ; ) VAR_1 ( METHOD_4 . VAR_4 = VAR_5 org.eclipse.jgit.lib.ObjectId ; ) VAR_3 ( METHOD_3 . VAR_4 ; ) ) ( METHOD_2 . VAR_2 ( TYPE_3 new = VAR_4 TYPE_3 { java.io.IOException , TYPE_2 throws ) VAR_3 TYPE_1 , VAR_2 org.eclipse.jgit.revwalk.RevCommit , VAR_1 org.eclipse.jgit.lib.Repository ( METHOD_1 org.eclipse.jgit.lib.ObjectId static private 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . METHOD_4 ( STRING_1 ) ) ; METHOD_2 ( b , b . METHOD_5 ( STRING_2 ) ) ; METHOD_2 ( b , b . append ( STRING_3 ) ) ; METHOD_2 ( b , b . METHOD_6 ( ) ) ; assertEquals ( STRING_4 , b . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . b , STRING_4 ( assertEquals ; ) ) ( METHOD_6 . b , b ( METHOD_2 ; ) ) STRING_3 ( append . b , b ( METHOD_2 ; ) ) STRING_2 ( METHOD_5 . b , b ( METHOD_2 ; ) ) STRING_1 ( METHOD_4 . b , b ( METHOD_2 ; ) ) ( METHOD_3 . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
protected void run ( ) throws TYPE_1 { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) { VAR_2 . METHOD_1 ( true ) ; } else { try { VAR_2 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_2 e ) { throw METHOD_3 ( e . getMessage ( ) ) ; } catch ( TYPE_3 e ) { throw METHOD_3 ( e . getMessage ( ) ) ; } } } } } } ; ) ) ( getMessage . e ( METHOD_3 throw { ) e TYPE_3 ( catch } ; ) ) ( getMessage . e ( METHOD_3 throw { ) e TYPE_2 ( catch } ; ) VAR_1 ( METHOD_2 . VAR_2 { try { else } ; ) true ( METHOD_1 . VAR_2 { ) ) ) ( isEmpty . VAR_1 ( || ) null == ) VAR_1 ( ( ( if { TYPE_1 throws ) ( run void protected 
private boolean METHOD_1 ( TYPE_1 VAR_1 , int i ) { if ( ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) , VAR_2 ) ) & & ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_4 ( i ) , VAR_3 ) ) ) { ( VAR_4 ) ++ ; return true ; } else { return false ; } } } } ; false return { else } ; true return ; ++ ) VAR_4 ( { ) ) ) VAR_3 , ) i ( METHOD_4 . VAR_1 ( METHOD_2 . TYPE_2 ( & & ) ) VAR_2 , ) i ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 ( ( if { ) i int , VAR_1 TYPE_1 ( METHOD_1 boolean private 
private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > schema , TYPE_4 cfg , TYPE_5 VAR_1 ) throws java.io.IOException { if ( TYPE_6 . METHOD_2 ( cfg ) ) { return new TYPE_7 ( ) ; } TYPE_8 VAR_2 = TYPE_9 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ; return TYPE_10 . METHOD_4 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_4 . TYPE_10 return ; ) schema , ) STRING_1 + ) VAR_3 ( ( , VAR_1 ( METHOD_3 . TYPE_9 = VAR_2 TYPE_8 } ; ) ( TYPE_7 new return { ) ) cfg ( METHOD_2 . TYPE_6 ( if { java.io.IOException throws ) VAR_1 TYPE_5 , cfg TYPE_4 , schema > TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) , new TYPE_3 ( STRING_4 , STRING_5 ) ) ) ; METHOD_5 ( VAR_1 , n ) ; assertEquals ( ( STRING_6 + ( ( STRING_7 + STRING_8 ) + STRING_9 ) ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) ) STRING_9 + ) STRING_8 + STRING_7 ( ( + STRING_6 ( ( assertEquals ; ) n , VAR_1 ( METHOD_5 ; ) ) ) STRING_5 , STRING_4 ( TYPE_3 new , ) STRING_3 , STRING_2 ( TYPE_3 new ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 = n TYPE_1 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
private void METHOD_1 ( final TYPE_1 . ReviewDb c ) throws TYPE_2 . OrmException { final TYPE_1 . Project VAR_1 ; VAR_1 = new TYPE_1 . Project ( new TYPE_3 . NameKey ( STRING_1 ) , VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( false ) ; c . projects ( ) . insert ( java.util.Collections.singleton ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( java.util.Collections.singleton ( insert . ) ( projects . c ; ) false ( METHOD_4 . VAR_1 ; ) VAR_3 ( METHOD_3 . VAR_1 ; ) STRING_2 ( METHOD_2 . VAR_1 ; ) VAR_2 , ) STRING_1 ( NameKey . TYPE_3 new ( Project . TYPE_1 new = VAR_1 ; VAR_1 Project . TYPE_1 final { OrmException . TYPE_2 throws ) c ReviewDb . TYPE_1 final ( METHOD_1 void private 
private static java.lang.String METHOD_1 ( java.lang.String token ) { if ( token == null ) { token = STRING_1 ; } else if ( token . METHOD_2 ( STRING_2 ) ) { token = token . METHOD_3 ( 1 ) ; } return TYPE_1 . METHOD_4 ( ( STRING_3 + token ) ) ; } } ; ) ) token + STRING_3 ( ( METHOD_4 . TYPE_1 return } ; ) 1 ( METHOD_3 . token = token { ) ) STRING_2 ( METHOD_2 . token ( if else } ; STRING_1 = token { ) null == token ( if { ) token java.lang.String ( METHOD_1 java.lang.String static private 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . get ( ) ; VAR_3 = true ; } try { TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( project ) ; TYPE_2 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) ; return VAR_4 ; } catch ( TYPE_3 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_3 ( catch } ; VAR_4 return ; ) ) VAR_6 ( METHOD_4 . VAR_5 ( METHOD_3 . TYPE_2 ; ) project ( METHOD_2 . VAR_1 = VAR_4 TYPE_1 { try } ; true = VAR_3 ; ) ( get . VAR_2 = VAR_1 { ) null == ) VAR_1 ( ( if { java.io.IOException throws ) project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { if ( ( info ) == null ) { METHOD_2 ( ) ; } super . METHOD_1 ( ) ; display ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) ; TYPE_2 . METHOD_6 ( new TYPE_3 < TYPE_4 . Account > ( this ) { protected void METHOD_7 ( final TYPE_4 . Account result ) { display ( result ) ; } } ) ; } } ; ) } } ; ) result ( display { ) result Account . TYPE_4 final ( METHOD_7 void protected { ) this ( > Account . TYPE_4 < TYPE_3 new ( METHOD_6 . TYPE_2 ; ) ) VAR_3 ( METHOD_5 . VAR_2 ( METHOD_4 . VAR_1 ; ) ) ( METHOD_3 . TYPE_1 ( display ; ) ( METHOD_1 . super } ; ) ( METHOD_2 { ) null == ) info ( ( if { ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) & & ( ! ( METHOD_8 ( db ) ) ) ; } } ; ) ) ) db ( METHOD_8 ( ! ( & & ) ) ) ( METHOD_1 . ) ( METHOD_3 ( || ) ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 ( || ) ) ) ( METHOD_2 . ) ( METHOD_4 ( || ) ) ) ( METHOD_2 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( ( ( return { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 ! = null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 ! = VAR_1 ) { VAR_3 . close ( ) ; } } } } } } ; ) ( close . VAR_3 { ) VAR_1 = ! VAR_3 ( if { ) VAR_4 : VAR_3 TYPE_1 ( for } ; ) ( close . VAR_1 { ) null = ! VAR_1 ( if ; ) ( get . VAR_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . toString ( ) ; if ( TYPE_5 . METHOD_3 ( VAR_3 ) ) { return METHOD_4 ( name , VAR_1 , VAR_2 ) ; } else if ( VAR_4 . METHOD_5 ( VAR_1 ) ) { return METHOD_6 ( VAR_1 , VAR_2 ) ; } else { throw new TYPE_4 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ) ; } } } } ; ) ) ) ( METHOD_2 . VAR_1 , STRING_1 ( java.lang.String.format ( TYPE_4 new throw { else } ; ) VAR_2 , VAR_1 ( METHOD_6 return { ) ) VAR_1 ( METHOD_5 . VAR_4 ( if else } ; ) VAR_2 , VAR_1 , name ( METHOD_4 return { ) ) VAR_3 ( METHOD_3 . TYPE_5 ( if ; ) ( toString . ) ( METHOD_2 . VAR_1 = VAR_3 java.lang.String { TYPE_4 throws ) VAR_2 TYPE_3 , VAR_1 TYPE_2 , name java.lang.String ( METHOD_1 TYPE_1 private 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 ; try { VAR_1 = TYPE_2 . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { if ( ( e instanceof TYPE_3 ) & & ( TYPE_4 . equals ( e . getMessage ( ) ) ) ) { return null ; } else { TYPE_5 VAR_2 = new TYPE_5 ( STRING_1 ) ; VAR_2 . METHOD_3 ( e ) ; throw VAR_2 ; } } return VAR_1 ; } } ; VAR_1 return } } ; VAR_2 throw ; ) e ( METHOD_3 . VAR_2 ; ) STRING_1 ( TYPE_5 new = VAR_2 TYPE_5 { else } ; null return { ) ) ) ) ( getMessage . e ( equals . TYPE_4 ( & & ) TYPE_3 instanceof e ( ( if { ) e java.io.IOException ( catch } ; ) ( METHOD_2 . TYPE_2 = VAR_1 { try ; VAR_1 TYPE_1 { ) ( METHOD_1 TYPE_1 private 
public TYPE_1 < TYPE_2 > get ( ) { TYPE_3 < TYPE_2 > m = new TYPE_3 < TYPE_2 > ( ) ; java.util.List < TYPE_4 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_1 ( type ) ; if ( VAR_1 ! = null ) { for ( TYPE_4 < TYPE_2 > b : VAR_1 ) { if ( ( b . getKey ( ) . METHOD_2 ( ) ) ! = null ) { m . put ( STRING_1 , b . getKey ( ) , b . METHOD_3 ( ) ) ; } } } return m ; } } ; m return } } } ; ) ) ( METHOD_3 . b , ) ( getKey . b , STRING_1 ( put . m { ) null = ! ) ) ( METHOD_2 . ) ( getKey . b ( ( if { ) VAR_1 : b > TYPE_2 < TYPE_4 ( for { ) null = ! VAR_1 ( if ; ) type ( METHOD_1 . VAR_2 = VAR_1 > > TYPE_2 < TYPE_4 < java.util.List ; ) ( > TYPE_2 < TYPE_3 new = m > TYPE_2 < TYPE_3 { ) ( get > TYPE_2 < TYPE_1 public 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException , TYPE_3 { if ( ( VAR_1 ) == null ) { TYPE_4 . METHOD_2 ( res ) ; res . METHOD_3 ( VAR_2 ) ; return ; } VAR_1 . METHOD_4 ( req , res , VAR_3 ) ; } } ; ) VAR_3 , res , req ( METHOD_4 . VAR_1 } ; return ; ) VAR_2 ( METHOD_3 . res ; ) res ( METHOD_2 . TYPE_4 { ) null == ) VAR_1 ( ( if { TYPE_3 , java.io.IOException throws ) res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } } ; ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_7 . ) VAR_8 ( METHOD_6 . ) VAR_7 , VAR_6 ( METHOD_6 . ) VAR_5 ( to . ) VAR_4 ( to . ) VAR_2 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_3 ( assertThat ; ) VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 . METHOD_2 ( ) ) { return VAR_2 . METHOD_3 ( getRefName ( ) ) ; } else { return new TYPE_1 ( VAR_2 , getRefName ( ) , VAR_4 ) ; } } } } ; ) VAR_4 , ) ( getRefName , VAR_2 ( TYPE_1 new return { else } ; ) ) ( getRefName ( METHOD_3 . VAR_2 return { ) ) ( METHOD_2 . VAR_4 ( if ; ) VAR_1 ( METHOD_1 . VAR_3 = VAR_2 TYPE_3 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; b . append ( ( ( STRING_1 + ( config . size ( ) ) ) + STRING_2 ) ) ; for ( TYPE_1 c : config ) { b . append ( STRING_3 ) ; b . append ( c . toString ( ) ) ; b . append ( STRING_4 ) ; } b . append ( STRING_5 ) ; return b . toString ( ) ; } } ; ) ( toString . b return ; ) STRING_5 ( append . b } ; ) STRING_4 ( append . b ; ) ) ( toString . c ( append . b ; ) STRING_3 ( append . b { ) config : c TYPE_1 ( for ; ) ) STRING_2 + ) ) ) ( size . config ( + STRING_1 ( ( ( append . b ; ) ( java.lang.StringBuilder new = b java.lang.StringBuilder { ) ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { if ( ( VAR_2 . contains ( VAR_3 ) ) || ( VAR_2 . contains ( VAR_4 ) ) ) { commands . add ( VAR_5 new TYPE_1 ( ) ) ; if ( ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ! = null ) & & ( TYPE_3 . METHOD_4 ( ) ) ) { commands . add ( VAR_5 new TYPE_4 ( METHOD_5 ( ) ) ) ; } } } } } } } } ; ) ) ) ( METHOD_5 ( TYPE_4 new VAR_5 ( add . commands { ) ) ) ( METHOD_4 . TYPE_3 ( & & ) null = ! ) ) ( METHOD_3 . ) ( METHOD_2 . TYPE_2 ( ( ( if ; ) ) ( TYPE_1 new VAR_5 ( add . commands { ) ) ) VAR_4 ( contains . VAR_2 ( || ) ) VAR_3 ( contains . VAR_2 ( ( if { ) ) ) ( isEmpty . VAR_1 ( ! ( if { ) ( METHOD_1 void public 
private < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , VAR_1 . METHOD_3 ( ) ) ; if ( VAR_3 ! = null ) { return VAR_1 . METHOD_4 ( VAR_3 ) ; } else { VAR_5 . error ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_1 . METHOD_3 ( ) . getName ( ) ) ) ) ; return false ; } } } } ; false return ; ) ) ) ) ( getName . ) ( METHOD_3 . VAR_1 ( + ) STRING_2 + ) VAR_2 + STRING_1 ( ( ( ( error . VAR_5 { else } ; ) VAR_3 ( METHOD_4 . VAR_1 return { ) null = ! VAR_3 ( if ; ) ) ( METHOD_3 . VAR_1 , VAR_2 ( METHOD_2 . VAR_4 = VAR_3 TYPE_1 { java.io.IOException throws ) VAR_2 java.lang.String , VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 boolean > TYPE_1 < private 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_5 , VAR_4 , STRING_3 ) ; TYPE_2 u = util . user ( VAR_3 ) ; METHOD_4 ( STRING_4 , ( ( u . METHOD_5 ( ) ) == ( VAR_6 ) ) ) ; METHOD_4 ( STRING_5 , u . METHOD_6 ( STRING_6 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_6 ( METHOD_6 . u , STRING_5 ( METHOD_4 ; ) ) ) VAR_6 ( == ) ) ( METHOD_5 . u ( ( , STRING_4 ( METHOD_4 ; ) VAR_3 ( user . util = u TYPE_2 ; ) STRING_3 , VAR_4 , VAR_5 , VAR_3 ( METHOD_2 . TYPE_1 ; ) STRING_2 , VAR_4 , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 ; ) STRING_1 , VAR_2 , VAR_1 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = VAR_3 . set ( VAR_4 ) ; java.lang.String message ; try { message = VAR_5 . get ( ) . getMessage ( ) ; } finally { VAR_3 . set ( VAR_2 ) ; } err . METHOD_2 ( TYPE_3 . METHOD_3 ( message . toString ( ) ) ) ; err . METHOD_4 ( ) ; in . close ( ) ; out . close ( ) ; err . close ( ) ; VAR_6 . METHOD_5 ( INT_1 ) ; } } ; ) INT_1 ( METHOD_5 . VAR_6 ; ) ( close . err ; ) ( close . out ; ) ( close . in ; ) ( METHOD_4 . err ; ) ) ) ( toString . message ( METHOD_3 . TYPE_3 ( METHOD_2 . err } ; ) VAR_2 ( set . VAR_3 { finally } ; ) ( getMessage . ) ( get . VAR_5 = message { try ; message java.lang.String ; ) VAR_4 ( set . VAR_3 = VAR_2 TYPE_2 { java.io.IOException throws ) VAR_1 TYPE_1 final ( METHOD_1 void public 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args , java.lang.String label ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( ( 2 * ( VAR_1 ) ) ) ; for ( int i = 1 ; i < = ( VAR_1 ) ; i ++ ) { r . add ( TYPE_4 . METHOD_3 ( args , label , i ) ) ; r . add ( TYPE_4 . METHOD_3 ( args , label , ( - i ) ) ) ; } return not ( METHOD_4 ( r ) ) ; } } ; ) ) r ( METHOD_4 ( not return } ; ) ) ) i - ( , label , args ( METHOD_3 . TYPE_4 ( add . r ; ) ) i , label , args ( METHOD_3 . TYPE_4 ( add . r { ) ++ i ; ) VAR_1 ( = < i ; 1 = i int ( for ; ) ) ) VAR_1 ( * 2 ( ( METHOD_2 . TYPE_3 = r > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List { ) label java.lang.String , args TYPE_2 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 static private 
public final void METHOD_1 ( TYPE_1 p ) { VAR_1 = METHOD_2 ( ) ; VAR_2 = METHOD_3 ( ) ; VAR_3 = METHOD_4 ( ) ; VAR_4 = METHOD_5 ( ) ; VAR_5 = METHOD_6 ( ) ; VAR_6 = METHOD_7 ( ) ; VAR_7 = METHOD_8 ( ) ; VAR_8 = METHOD_9 ( ) ; VAR_9 = METHOD_10 ( ) ; VAR_10 = METHOD_11 ( ) ; VAR_11 = METHOD_12 ( ) ; VAR_12 = METHOD_13 ( ) ; } } ; ) ( METHOD_13 = VAR_12 ; ) ( METHOD_12 = VAR_11 ; ) ( METHOD_11 = VAR_10 ; ) ( METHOD_10 = VAR_9 ; ) ( METHOD_9 = VAR_8 ; ) ( METHOD_8 = VAR_7 ; ) ( METHOD_7 = VAR_6 ; ) ( METHOD_6 = VAR_5 ; ) ( METHOD_5 = VAR_4 ; ) ( METHOD_4 = VAR_3 ; ) ( METHOD_3 = VAR_2 ; ) ( METHOD_2 = VAR_1 { ) p TYPE_1 ( METHOD_1 void final public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_3 ( query ( STRING_1 ) ) . changeId ) . isEqualTo ( r . getChangeId ( ) ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( query ( STRING_1 ) . isEmpty ( ) ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) ) ( isEmpty . ) STRING_1 ( query ( com.google.common.truth.Truth.assertThat ; ) user ( METHOD_4 ; ) ) ( getChangeId . r ( isEqualTo . ) changeId . ) ) STRING_1 ( query ( METHOD_3 . TYPE_2 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return VAR_1 . METHOD_1 ( name ) ; } catch ( TYPE_1 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } } } ; null return ; ) err , ) ) ) ( get . name ( + STRING_1 ( ( METHOD_2 . VAR_2 { ) err TYPE_1 ( catch } ; ) name ( METHOD_1 . VAR_1 return { try { ) name com.google.gerrit.reviewdb.client.Project.NameKey final ( METHOD_1 org.eclipse.jgit.lib.Repository private 
