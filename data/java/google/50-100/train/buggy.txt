public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( false ) ; TYPE_2 . METHOD_3 ( false ) ; if ( VAR_1 . METHOD_4 ( ) ) { TYPE_3 . METHOD_5 ( false ) ; } VAR_2 = TYPE_1 . METHOD_6 ( new TYPE_4 ( ) { public void METHOD_7 ( TYPE_5 event ) { METHOD_8 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_8 { ) event TYPE_5 ( METHOD_7 void public { ) ( TYPE_4 new ( METHOD_6 . TYPE_1 = VAR_2 } ; ) false ( METHOD_5 . TYPE_3 { ) ) ( METHOD_4 . VAR_1 ( if ; ) false ( METHOD_3 . TYPE_2 ; ) false ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; if ( sshd ) { modules.add ( new TYPE_3 ( ) ) ; if ( VAR_1 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; modules.add ( VAR_2 . METHOD_2 ( VAR_3 class ) ) ; } } else { modules.add ( new TYPE_6 ( ) ) ; } return VAR_4 . METHOD_3 ( modules ) ; } } ; ) modules ( METHOD_3 . VAR_4 return } ; ) ) ( TYPE_6 new ( modules.add { else } } ; ) ) class VAR_3 ( METHOD_2 . VAR_2 ( modules.add ; ) ) ( TYPE_5 new ( modules.add { else } ; ) ) ( TYPE_4 new ( modules.add { ) VAR_1 ( if ; ) ) ( TYPE_3 new ( modules.add { ) sshd ( if ; ) ( > TYPE_2 < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) ( METHOD_1 TYPE_1 private 
void METHOD_1 ( java.lang.String token ) { try { VAR_1 . METHOD_1 ( token , changes , VAR_2 ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( e . getMessage ( ) , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( STRING_2 , e ) ; } } } } ; ) e , STRING_2 ( TYPE_2 new throw { ) e TYPE_3 ( catch } ; ) e , STRING_1 ( TYPE_2 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) e , ) ( getMessage . e ( TYPE_2 new throw { ) e TYPE_1 ( catch } ; ) VAR_2 , changes , token ( METHOD_1 . VAR_1 { try { ) token java.lang.String ( METHOD_1 void 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; VAR_2 = VAR_3 ; VAR_2 = VAR_2 . METHOD_2 ( ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { throw new TYPE_4 ( STRING_1 , VAR_2 ) ; } else { VAR_1 . METHOD_4 ( ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) ) ( METHOD_5 . ) ) VAR_2 ( ) TYPE_5 ( ( ( METHOD_4 . VAR_1 { else } ; ) VAR_2 , STRING_1 ( TYPE_4 new throw { ) ) ) ( METHOD_3 . VAR_2 ( ! ( if ; ) ( METHOD_2 . VAR_2 = VAR_2 ; VAR_3 = VAR_2 ; VAR_2 TYPE_3 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( ) throws java.io.IOException { close ( ) ; VAR_1 = repo . METHOD_2 ( ) ; TYPE_1 ref = repo . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; if ( ref == null ) { return ; } try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) { VAR_3 = rw . parseCommit ( ref . METHOD_5 ( ) . METHOD_6 ( ) ) ; notes = TYPE_2 . METHOD_7 ( VAR_1 , VAR_3 ) ; } } } } ; ) VAR_3 , VAR_1 ( METHOD_7 . TYPE_2 = notes ; ) ) ( METHOD_6 . ) ( METHOD_5 . ref ( parseCommit . rw = VAR_3 { ) ) VAR_1 ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk ( try } ; return { ) null == ref ( if ; ) VAR_2 ( METHOD_4 . ) ( METHOD_3 . repo = ref TYPE_1 ; ) ( METHOD_2 . repo = VAR_1 ; ) ( close { java.io.IOException throws ) ( METHOD_1 void private 
private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 p ) { return new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( ) throws java.io.IOException { try { return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; } catch ( TYPE_6 e ) { return VAR_1 ; } } } ; } } ; } } } ; VAR_1 return { ) e TYPE_6 ( catch } ; ) ) p ( METHOD_5 . TYPE_5 , ) ) ( toString . p ( METHOD_4 . TYPE_4 , ) p ( METHOD_3 ( TYPE_2 new return { try { java.io.IOException throws ) ( METHOD_2 TYPE_2 public { ) ( > TYPE_2 < TYPE_1 new return { ) p TYPE_3 final ( METHOD_1 > TYPE_2 < TYPE_1 private 
private void METHOD_1 ( TYPE_1 . Status VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = result . METHOD_2 ( ref ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( message ( VAR_3 ) ) . isEqualTo ( VAR_3 . getStatus ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_3 . getMessage ( ) ) ; } } ; ) ) ( getMessage . VAR_3 ( isEqualTo . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ) ( getStatus . VAR_3 ( isEqualTo . ) ) VAR_3 ( message ( METHOD_3 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ref ( METHOD_2 . result = VAR_3 TYPE_1 { ) VAR_2 java.lang.String , VAR_1 Status . TYPE_1 ( METHOD_1 void private 
protected void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { rsp . METHOD_2 ( STRING_1 ) ; TYPE_3 in = METHOD_3 ( ) ; try { TYPE_4 out = rsp . METHOD_4 ( ) ; try { TYPE_5 . METHOD_5 ( in , out ) ; } finally { out . close ( ) ; } } finally { in . close ( ) ; } } } } ; ) ( close . in { finally } } ; ) ( close . out { finally } ; ) out , in ( METHOD_5 . TYPE_5 { try ; ) ( METHOD_4 . rsp = out TYPE_4 { try ; ) ( METHOD_3 = in TYPE_3 ; ) STRING_1 ( METHOD_2 . rsp { java.io.IOException throws ) rsp HttpServletResponse . TYPE_2 final , req TYPE_1 final ( METHOD_1 void protected 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ; } return false ; } } ; false return } ; ) ) ( METHOD_2 . p ( equals . ) ( METHOD_2 . TYPE_2 return ; ) ) VAR_1 ( ) > ? < TYPE_2 ( ( = p > ? < TYPE_2 final { ) ) ) ( METHOD_1 . VAR_1 ( == ) ) ( METHOD_1 ( ( if { ) VAR_1 TYPE_1 final ( equals boolean public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { try { com.google.gerrit.reviewdb.client.Change change = getChange ( VAR_1 . getChange ( ) ) ; TYPE_2 event = new TYPE_2 ( change ) ; event . change = METHOD_2 ( change ) ; VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = VAR_1 . METHOD_5 ( ) ; VAR_4 . get ( ) . METHOD_6 ( change , event , db . get ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( error . VAR_5 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ( get . db , event , change ( METHOD_6 . ) ( get . VAR_4 ; ) ( METHOD_5 . VAR_1 = VAR_3 ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 = VAR_2 ; ) change ( METHOD_2 = change . event ; ) change ( TYPE_2 new = event TYPE_2 ; ) ) ( getChange . VAR_1 ( getChange = change com.google.gerrit.reviewdb.client.Change { try { ) VAR_1 TYPE_1 ( METHOD_1 void public 
static void METHOD_1 ( TYPE_1 config , java.lang.String VAR_1 ) { config . METHOD_2 ( STRING_1 , null , STRING_2 , VAR_2 ) ; config . METHOD_3 ( STRING_1 , null , STRING_3 , STRING_4 ) ; config . METHOD_3 ( STRING_1 , null , STRING_5 , STRING_6 ) ; config . METHOD_3 ( STRING_1 , null , STRING_7 , VAR_1 ) ; config . METHOD_4 ( STRING_1 , STRING_8 , STRING_9 , true ) ; } } ; ) true , STRING_9 , STRING_8 , STRING_1 ( METHOD_4 . config ; ) VAR_1 , STRING_7 , null , STRING_1 ( METHOD_3 . config ; ) STRING_6 , STRING_5 , null , STRING_1 ( METHOD_3 . config ; ) STRING_4 , STRING_3 , null , STRING_1 ( METHOD_3 . config ; ) VAR_2 , STRING_2 , null , STRING_1 ( METHOD_2 . config { ) VAR_1 java.lang.String , config TYPE_1 ( METHOD_1 void static 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 ) ; METHOD_3 ( user ) ; VAR_1 . METHOD_4 ( VAR_2 class ) ; VAR_3 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( ) . get ( ) ; } } ; ) ( get . ) ( METHOD_5 . ) ) ( get . project ( name . ) ( projects . VAR_3 ; ) class VAR_2 ( METHOD_4 . VAR_1 ; ) user ( METHOD_3 ; ) STRING_1 , project ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( STRING_2 , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; METHOD_5 ( r ) ; assertEquals ( VAR_2 . getName ( ) , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_7 . TYPE_1 ; ) email . r , ) ( METHOD_6 . VAR_2 ( assertEquals ; ) name . r , ) ( getName . VAR_2 ( assertEquals ; ) r ( METHOD_5 ; ) user ( METHOD_4 . ) ( create = r TYPE_2 final ; ) VAR_1 ( METHOD_3 . TYPE_1 ; ) null , STRING_2 ( user = user com.google.gerrit.reviewdb.client.Account.Id final ; ) STRING_1 ( METHOD_2 { ) ( METHOD_1 void public 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return java.util.Collections . METHOD_2 ( TYPE_3 . METHOD_3 ( java.util.Collections . METHOD_4 ( VAR_1 . METHOD_1 ( ) ) , new TYPE_4 < TYPE_5 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_5 VAR_2 ) { try { return METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; } } } ) ) ; } } ; ) ) } } } ; ) e , ) STRING_2 + ) VAR_2 + STRING_1 ( ( ( TYPE_6 new throw { ) e java.io.IOException ( catch } ; ) VAR_2 ( METHOD_5 return { try { ) VAR_2 TYPE_5 ( apply TYPE_2 public { ) ( > TYPE_2 , TYPE_5 < TYPE_4 new , ) ) ( METHOD_1 . VAR_1 ( METHOD_4 . java.util.Collections ( METHOD_3 . TYPE_3 ( METHOD_2 . java.util.Collections return { ) ( METHOD_1 > TYPE_2 < TYPE_1 public 
public void METHOD_1 ( final TYPE_1 key ) { if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( key ) ) & & ( VAR_2 . METHOD_4 ( ( ( TYPE_2 ) ( key ) ) ) ) ) { VAR_3 . METHOD_5 ( new TYPE_3 ( ) { public void run ( ) { VAR_2 . METHOD_1 ( ( ( TYPE_2 ) ( key ) ) ) ; } } ) ; } VAR_4 . METHOD_1 ( key ) ; } } ; ) key ( METHOD_1 . VAR_4 } ; ) } } ; ) ) ) key ( ) TYPE_2 ( ( ( METHOD_1 . VAR_2 { ) ( run void public { ) ( TYPE_3 new ( METHOD_5 . VAR_3 { ) ) ) ) ) key ( ) TYPE_2 ( ( ( METHOD_4 . VAR_2 ( & & ) ) key ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( ( if { ) key TYPE_1 final ( METHOD_1 void public 
public java.lang.String METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException { final org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { org.eclipse.jgit.revwalk.RevWalk VAR_3 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; org.eclipse.jgit.revwalk.RevCommit commit = VAR_3 . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( VAR_1 ) ) ; return commit . METHOD_4 ( ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) ( METHOD_4 . commit return ; ) ) VAR_1 ( METHOD_3 . org.eclipse.jgit.lib.ObjectId ( parseCommit . VAR_3 = commit org.eclipse.jgit.revwalk.RevCommit ; ) repo ( org.eclipse.jgit.revwalk.RevWalk new = VAR_3 org.eclipse.jgit.revwalk.RevWalk { try ; ) ) projectName ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_2 . VAR_2 = repo org.eclipse.jgit.lib.Repository final { java.io.IOException throws ) VAR_1 java.lang.String , projectName java.lang.String ( METHOD_1 java.lang.String public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; for ( TYPE_3 w : this ) { if ( w instanceof TYPE_2 ) { final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ; if ( VAR_2 == null ) { VAR_2 = d ; } if ( ( VAR_3 ) == VAR_1 ) { d . METHOD_1 ( ) ; return ; } } } if ( VAR_2 ! = null ) { VAR_2 . METHOD_1 ( ) ; } } } } ; ) ( METHOD_1 . VAR_2 { ) null = ! VAR_2 ( if } } } ; return ; ) ( METHOD_1 . d { ) VAR_1 == ) VAR_3 ( ( if } ; d = VAR_2 { ) null == VAR_2 ( if ; ) ) w ( ) TYPE_2 ( ( = d TYPE_2 final { ) TYPE_2 instanceof w ( if { ) this : w TYPE_3 ( for ; null = VAR_2 TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ; } } ; ) } } ; ) VAR_2 ( METHOD_8 . super ; ) true ( METHOD_9 { ) VAR_2 TYPE_6 ( METHOD_8 void public } ; ) ) ) ( METHOD_7 . result ( METHOD_6 . TYPE_5 ( display . TYPE_4 ; ) ( METHOD_5 ; true = VAR_1 { ) result ChangeInfo . TYPE_3 ( onSuccess void public { ) ( > ChangeInfo . TYPE_3 < TYPE_2 new , ) ( METHOD_4 , ) ( METHOD_3 , revision , ) ( get . id ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
protected void run ( ) throws TYPE_1 { try { METHOD_1 ( ) ; final TYPE_2 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) ! = null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } catch ( TYPE_3 err ) { throw new TYPE_4 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; } } } } ; ) ) ) ) ( getMessage . err ( + STRING_1 ( ( TYPE_4 new throw { ) err TYPE_3 ( catch } } ; ) ( run . VAR_1 { else } ; ) query ( METHOD_3 . VAR_1 { ) null = ! ) query ( ( if ; ) format ( METHOD_2 . VAR_1 ; ) out , in ( create . factory = VAR_1 TYPE_2 final ; ) ( METHOD_1 { try { TYPE_1 throws ) ( run void protected 
public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 ) throws TYPE_4 , com.google.gwtorm.server.OrmException { try { TYPE_1 < TYPE_2 > r = TYPE_1 . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getChange ( ) . getProject ( ) , VAR_3 ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { r . METHOD_5 ( TYPE_5 . METHOD_6 ( INT_1 , VAR_4 ) ) ; } return r ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e ( TYPE_4 new throw { ) e TYPE_6 ( catch } ; r return } ; ) ) VAR_4 , INT_1 ( METHOD_6 . TYPE_5 ( METHOD_5 . r { ) ) ( METHOD_4 . VAR_1 ( if ; ) ) VAR_3 , ) ( getProject . ) ( getChange . VAR_1 , ) ( METHOD_3 . VAR_1 ( METHOD_2 . VAR_2 ( METHOD_1 . TYPE_1 = r > TYPE_2 < TYPE_1 { try { com.google.gwtorm.server.OrmException , TYPE_4 throws ) VAR_1 TYPE_3 ( apply > TYPE_2 < TYPE_1 public 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , final TYPE_1 value , TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ; final TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ; METHOD_5 ( VAR_2 , new TYPE_5 ( ) { public void run ( ) { VAR_2 . set ( value ) ; } } ) ; } } ; ) } } ; ) value ( set . VAR_2 { ) ( run void public { ) ( TYPE_5 new , VAR_2 ( METHOD_5 ; ) VAR_1 , type , name ( METHOD_4 = VAR_2 > TYPE_1 < TYPE_4 final ; ) ) ) ( METHOD_3 . value ( ) > TYPE_1 < TYPE_3 ( ( = type > TYPE_1 < TYPE_3 ; ) ( METHOD_2 . VAR_1 { ) VAR_1 TYPE_2 , value TYPE_1 final , name java.lang.String ( METHOD_1 void > TYPE_1 < public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin , VAR_2 ) ; METHOD_4 ( admin ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 , VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( admin , VAR_7 , VAR_8 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_8 ( VAR_11 ) . METHOD_8 ( VAR_12 ) ; } } ; ) VAR_12 ( METHOD_8 . ) VAR_11 ( METHOD_8 . ) VAR_10 ( METHOD_7 . ) VAR_9 , VAR_8 , VAR_7 , admin ( METHOD_7 . ) VAR_6 ( to . ) VAR_3 , VAR_5 ( to . ) VAR_1 , STRING_1 ( METHOD_6 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_1 ( METHOD_5 ; ) admin ( METHOD_4 ; ) VAR_2 , admin ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 p = TYPE_3 . get ( VAR_1 ) ; if ( ! ( TYPE_4 . METHOD_2 ( p ) ) ) { throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } java.lang.String VAR_2 = new java.lang.String ( TYPE_4 . METHOD_3 ( p ) , VAR_3 ) ; return new TYPE_1 ( new TYPE_1 . Id ( id , 0 ) , VAR_2 ) ; } } ; ) VAR_2 , ) 0 , id ( Id . TYPE_1 new ( TYPE_1 new return ; ) VAR_3 , ) p ( METHOD_3 . TYPE_4 ( java.lang.String new = VAR_2 java.lang.String } ; ) ) VAR_1 , STRING_1 ( java.lang.String.format ( java.io.IOException new throw { ) ) ) p ( METHOD_2 . TYPE_4 ( ! ( if ; ) VAR_1 ( get . TYPE_3 = p TYPE_2 { java.io.IOException throws ) VAR_1 java.lang.String , id com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 private 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_3 { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_3 , VAR_4 , VAR_2 . getProject ( ) . getName ( ) ) ) ; } } } } ; ) ) ) ( getName . ) ( getProject . VAR_2 , VAR_4 , VAR_3 , STRING_1 ( java.lang.String.format ( TYPE_3 new throw { ) ) ) VAR_2 ( METHOD_2 . VAR_1 ( ! ( if { TYPE_3 throws ) VAR_4 java.lang.String , VAR_3 java.lang.String , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void static private 
void METHOD_1 ( final TYPE_1 . Account result ) { VAR_1 . METHOD_2 ( false ) ; final TYPE_1 . Account me = TYPE_2 . METHOD_3 ( ) ; me . METHOD_4 ( result . METHOD_5 ( ) ) ; me . METHOD_6 ( result . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( ) ; if ( ( VAR_2 ) ! = null ) { VAR_2 . display ( me ) ; } } } } ; ) me ( display . VAR_2 { ) null = ! ) VAR_2 ( ( if ; ) ( METHOD_8 . TYPE_2 ; ) ) ( METHOD_7 . result ( METHOD_6 . me ; ) ) ( METHOD_5 . result ( METHOD_4 . me ; ) ( METHOD_3 . TYPE_2 = me Account . TYPE_1 final ; ) false ( METHOD_2 . VAR_1 { ) result Account . TYPE_1 final ( METHOD_1 void 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; return false ; } if ( VAR_3 . isEmpty ( ) ) { VAR_2 . info ( STRING_2 ) ; return false ; } if ( ( ( ( VAR_3 . size ( ) ) == 1 ) & & ( ( VAR_4 . size ( ) ) == 1 ) ) & & ( VAR_4 . contains ( VAR_5 ) ) ) { return false ; } return true ; } } ; true return } ; false return { ) ) ) VAR_5 ( contains . VAR_4 ( & & ) ) 1 == ) ) ( size . VAR_4 ( ( & & ) 1 == ) ) ( size . VAR_3 ( ( ( ( if } ; false return ; ) STRING_2 ( info . VAR_2 { ) ) ( isEmpty . VAR_3 ( if } ; false return ; ) STRING_1 ( METHOD_2 . VAR_2 { ) 0 == ) ) ( length . VAR_1 ( ( if { ) ( METHOD_1 boolean protected 
protected java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { java.lang.String ref = event . getRefName ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey ( event . METHOD_2 ( ) ) ; if ( ref . equals ( VAR_1 ) ) { return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( project ) ) ; } else { return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_5 ( new TYPE_2 . NameKey ( project , ref ) ) ) ; } } } } ; ) ) ) ref , project ( NameKey . TYPE_2 new ( METHOD_5 . ) ( get . VAR_2 ( METHOD_3 . com.google.gerrit.server.query.change.ChangeData return { else } ; ) ) project ( METHOD_4 . ) ( get . VAR_2 ( METHOD_3 . com.google.gerrit.server.query.change.ChangeData return { ) ) VAR_1 ( equals . ref ( if ; ) ) ( METHOD_2 . event ( com.google.gerrit.reviewdb.client.Project.NameKey new = project com.google.gerrit.reviewdb.client.Project.NameKey ; ) ( getRefName . event = ref java.lang.String { com.google.gwtorm.server.OrmException throws ) ctx TYPE_1 ( METHOD_1 > com.google.gerrit.reviewdb.client.Change < java.util.List protected 
public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { int VAR_1 = TYPE_2 . METHOD_2 ( a . name ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; if ( VAR_1 ! = 0 ) { return VAR_1 ; } return TYPE_2 . METHOD_2 ( a . id ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; } } ; ) ) name . b ( METHOD_2 . TYPE_2 ( METHOD_3 . ) id . a ( METHOD_2 . TYPE_2 return } ; VAR_1 return { ) 0 = ! VAR_1 ( if ; ) ) name . b ( METHOD_2 . TYPE_2 ( METHOD_3 . ) name . a ( METHOD_2 . TYPE_2 = VAR_1 int { ) b TYPE_1 , a TYPE_1 ( METHOD_1 int public 
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 id , java.lang.String ref ) throws java.lang.Exception { TYPE_3 . ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_1 ( cfg , VAR_1 , id , ref ) ; METHOD_4 ( project , cfg ) ; return VAR_3 ; } } ; VAR_3 return ; ) cfg , project ( METHOD_4 ; ) ref , id , VAR_1 , cfg ( METHOD_1 . TYPE_4 = VAR_3 TYPE_1 ; ) ( METHOD_3 . ) project ( METHOD_2 . VAR_2 = cfg ProjectConfig . TYPE_3 { java.lang.Exception throws ) ref java.lang.String , id TYPE_2 , VAR_1 java.lang.String ( METHOD_1 TYPE_1 protected 
public void METHOD_1 ( ) { final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; final TYPE_1 c = TYPE_2 . METHOD_2 ( STRING_1 , STRING_4 ) ; assertEquals ( STRING_5 , TYPE_3 . METHOD_3 ( a , b ) . toString ( ) ) ; assertEquals ( STRING_6 , TYPE_3 . METHOD_3 ( a , b , c ) . toString ( ) ) ; } } ; ) ) ( toString . ) c , b , a ( METHOD_3 . TYPE_3 , STRING_6 ( assertEquals ; ) ) ( toString . ) b , a ( METHOD_3 . TYPE_3 , STRING_5 ( assertEquals ; ) STRING_4 , STRING_1 ( METHOD_2 . TYPE_2 = c TYPE_1 final ; ) STRING_3 , STRING_1 ( METHOD_2 . TYPE_2 = b TYPE_1 final ; ) STRING_2 , STRING_1 ( METHOD_2 . TYPE_2 = a TYPE_1 final { ) ( METHOD_1 void public 
private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data = new byte [ ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ] ; TYPE_3 in = VAR_1 . METHOD_3 ( VAR_2 ) ; try { TYPE_4 . METHOD_4 ( in , data , 0 , data . length ) ; } finally { in . close ( ) ; } return data ; } } ; data return } ; ) ( close . in { finally } ; ) length . data , 0 , data , in ( METHOD_4 . TYPE_4 { try ; ) VAR_2 ( METHOD_3 . VAR_1 = in TYPE_3 ; ] ) ) ) ( METHOD_2 . VAR_2 ( ) int ( ( [ byte new = data ] [ byte { java.io.IOException throws ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 ] [ byte static private 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , org.eclipse.jgit.lib.Repository repo , TYPE_2 VAR_3 , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.ObjectId VAR_4 ) throws java.io.IOException { try ( TYPE_3 VAR_5 = VAR_3 . METHOD_2 ( ) ) { return ( ( TYPE_1 ) ( VAR_2 ) ) . format ( project . get ( ) , TYPE_4 . METHOD_3 ( repo , VAR_4 ) , METHOD_4 ( VAR_1 ) , VAR_5 ) ; } } } } ; ) VAR_5 , ) VAR_1 ( METHOD_4 , ) VAR_4 , repo ( METHOD_3 . TYPE_4 , ) ( get . project ( format . ) ) VAR_2 ( ) TYPE_1 ( ( return { ) ) ( METHOD_2 . VAR_3 = VAR_5 TYPE_3 ( try { java.io.IOException throws ) VAR_4 org.eclipse.jgit.lib.ObjectId , project com.google.gerrit.reviewdb.client.Project.NameKey , VAR_3 TYPE_2 , repo org.eclipse.jgit.lib.Repository , VAR_2 TYPE_1 , VAR_1 java.lang.String ( METHOD_1 java.lang.String private 
protected void METHOD_1 ( final TYPE_1 result ) { if ( ( ( VAR_1 == null ) & & ( ( VAR_2 ) == null ) ) || ( ( VAR_1 ! = null ) & & ( VAR_1 . equals ( VAR_2 ) ) ) ) { display ( result ) ; } } } } ; ) result ( display { ) ) ) ) VAR_2 ( equals . VAR_1 ( & & ) null = ! VAR_1 ( ( || ) ) null == ) VAR_2 ( ( & & ) null == VAR_1 ( ( ( if { ) result TYPE_1 final ( METHOD_1 void protected 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( db . METHOD_5 ( ) . METHOD_6 ( notes . getChangeId ( ) ) , VAR_2 ) ) ; } notes . METHOD_7 ( ) ; java.util.List < TYPE_1 > VAR_3 = TYPE_4 . METHOD_8 ( ) ; VAR_3 . METHOD_9 ( notes . METHOD_10 ( ) . values ( ) ) ; return TYPE_3 . METHOD_3 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_3 . TYPE_3 return ; ) ) ( values . ) ( METHOD_10 . notes ( METHOD_9 . VAR_3 ; ) ( METHOD_8 . TYPE_4 = VAR_3 > TYPE_1 < java.util.List ; ) ( METHOD_7 . notes } ; ) ) VAR_2 , ) ) ( getChangeId . notes ( METHOD_6 . ) ( METHOD_5 . db ( METHOD_4 . TYPE_3 ( METHOD_3 . TYPE_3 return { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { com.google.gwtorm.server.OrmException throws ) notes TYPE_2 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 > TYPE_1 < java.util.List public 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { java.util.List < TYPE_1 > result = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_1 c : VAR_1 ) { if ( TYPE_3 . METHOD_2 ( c ) . equals ( psId ) ) { result . add ( c ) ; } } return TYPE_4 . METHOD_3 ( result ) ; } } ; ) result ( METHOD_3 . TYPE_4 return } } ; ) c ( add . result { ) ) psId ( equals . ) c ( METHOD_2 . TYPE_3 ( if { ) VAR_1 : c TYPE_1 ( for ; ) ) ( size . VAR_1 ( java.util.ArrayList new = result > TYPE_1 < java.util.List { ) psId com.google.gerrit.reviewdb.client.PatchSet.Id , VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List static private 
private static java.lang.String METHOD_1 ( byte [ ] VAR_1 ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ( ( VAR_1 . length ) * 2 ) ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { byte b = VAR_1 [ i ] ; r . append ( VAR_2 [ ( ( b > > > INT_1 ) & INT_2 ) ] ) ; r . append ( VAR_2 [ ( b & INT_2 ) ] ) ; } return r . toString ( ) ; } } ; ) ( toString . r return } ; ) ] ) INT_2 & b ( [ VAR_2 ( append . r ; ) ] ) INT_2 & ) INT_1 > > > b ( ( [ VAR_2 ( append . r ; ] i [ VAR_1 = b byte { ) ++ i ; ) length . VAR_1 ( < i ; 0 = i int ( for ; ) ) 2 * ) length . VAR_1 ( ( ( java.lang.StringBuilder new = r java.lang.StringBuilder { ) VAR_1 ] [ byte ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; assertEquals ( VAR_1 class , out . METHOD_4 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( in . METHOD_5 ( 1 ) ) , in . METHOD_5 ( 0 ) ) , out . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . out , ) ) 0 ( METHOD_5 . in , ) ) 1 ( METHOD_5 . in ( query ( of . TYPE_2 ( assertEquals ; ) ) ( METHOD_4 . out , class VAR_1 ( assertEquals ; ) in ( METHOD_3 = out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) STRING_1 ( METHOD_2 = in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . add ( VAR_3 . create ( STRING_1 , VAR_4 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_2 , VAR_5 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_3 , VAR_5 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_4 , VAR_1 . project ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_5 , VAR_6 ) ) ; return VAR_2 ; } } ; VAR_2 return ; ) ) VAR_6 , STRING_5 ( create . VAR_3 ( add . VAR_2 ; ) ) project . VAR_1 , STRING_4 ( create . VAR_3 ( add . VAR_2 ; ) ) VAR_5 , STRING_3 ( create . VAR_3 ( add . VAR_2 ; ) ) VAR_5 , STRING_2 ( create . VAR_3 ( add . VAR_2 ; ) ) VAR_4 , STRING_1 ( create . VAR_3 ( add . VAR_2 ; ) ( METHOD_2 . TYPE_3 = VAR_2 > TYPE_1 < java.util.Set { ) VAR_1 TYPE_2 ( METHOD_1 > TYPE_1 < java.util.Set public 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null ) ; java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( TYPE_5 . of ( STRING_1 ) ) ; } } ; ) ) STRING_1 ( of . TYPE_5 ( METHOD_5 . ) ) m ( METHOD_4 . TYPE_4 ( com.google.common.truth.Truth.assertThat ; ) VAR_3 , c , repo ( METHOD_3 . VAR_1 = m > TYPE_3 < java.util.List ; ) null , null , ) VAR_2 ( TYPE_2 new , null ( TYPE_1 new = VAR_1 TYPE_1 ; ) ( METHOD_2 = c org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) ) ) ) ( METHOD_6 . VAR_1 ( ) > ? < TYPE_1 ( ( ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_5 . ) ) VAR_2 ( METHOD_4 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey ; ) STRING_1 , ) ( METHOD_3 . VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_2 . METHOD_2 ( ps . getId ( ) . getParentKey ( ) . equals ( cd . getId ( ) ) , STRING_1 , ps . getId ( ) , cd . getId ( ) ) ; return this ; } } ; this return ; ) ) ( getId . cd , ) ( getId . ps , STRING_1 , ) ) ( getId . cd ( equals . ) ( getParentKey . ) ( getId . ps ( METHOD_2 . TYPE_2 { ) ps com.google.gerrit.reviewdb.client.PatchSet ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) ) VAR_3 ( + ) ) ) STRING_4 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_3 ( METHOD_5 . TYPE_2 ( + ) ) VAR_2 ( + STRING_2 ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 ) throws java.io.IOException { java.util.List < TYPE_1 > VAR_2 = new TYPE_2 < > ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 , VAR_5 ) ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ) VAR_5 , VAR_1 ( METHOD_1 . VAR_3 ( METHOD_2 . VAR_2 { ) VAR_4 : VAR_3 TYPE_3 ( for ; ) ( > < TYPE_2 new = VAR_2 > TYPE_1 < java.util.List { java.io.IOException throws ) VAR_1 org.eclipse.jgit.lib.Repository ( METHOD_1 > TYPE_1 < java.util.List private 
public static TYPE_1 METHOD_1 ( TYPE_2 . ProjectConfig project , java.lang.String VAR_1 , int VAR_2 , int VAR_3 , TYPE_3 group , java.lang.String ref ) { TYPE_1 VAR_4 = TYPE_4 . METHOD_2 ( project , group ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; return TYPE_4 . METHOD_5 ( project , VAR_1 , VAR_4 , ref ) ; } } ; ) ref , VAR_4 , VAR_1 , project ( METHOD_5 . TYPE_4 return ; ) VAR_3 ( METHOD_4 . VAR_4 ; ) VAR_2 ( METHOD_3 . VAR_4 ; ) group , project ( METHOD_2 . TYPE_4 = VAR_4 TYPE_1 { ) ref java.lang.String , group TYPE_3 , VAR_3 int , VAR_2 int , VAR_1 java.lang.String , project ProjectConfig . TYPE_2 ( METHOD_1 TYPE_1 static public 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = TYPE_4 . schema ( VAR_2 ) ; int VAR_3 ; if ( ( schema ! = null ) & & ( schema . METHOD_2 ( VAR_4 ) ) ) { VAR_3 = ( VAR_5 . METHOD_3 ( ) ) - INT_1 ; } else { VAR_3 = VAR_5 . METHOD_4 ( ) ; } return METHOD_1 ( schema , branch , VAR_1 , VAR_3 ) ; } } ; ) VAR_3 , VAR_1 , branch , schema ( METHOD_1 return } ; ) ( METHOD_4 . VAR_5 = VAR_3 { else } ; INT_1 - ) ) ( METHOD_3 . VAR_5 ( = VAR_3 { ) ) ) VAR_4 ( METHOD_2 . schema ( & & ) null = ! schema ( ( if ; VAR_3 int ; ) VAR_2 ( schema . TYPE_4 = schema > com.google.gerrit.server.query.change.ChangeData < TYPE_3 { com.google.gwtorm.server.OrmException throws ) VAR_1 > java.lang.String < java.util.List , branch NameKey . TYPE_2 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 public 
private void format ( TYPE_1 out ) throws java.io.IOException { out . METHOD_1 ( TYPE_2 . METHOD_2 ( commit ) . METHOD_3 ( VAR_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( out ) ; VAR_2 . METHOD_4 ( repo ) ; VAR_2 . format ( base . METHOD_5 ( ) , commit . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . VAR_2 ; ) ) ( METHOD_5 . commit , ) ( METHOD_5 . base ( format . VAR_2 ; ) repo ( METHOD_4 . VAR_2 ; ) out ( TYPE_3 new = VAR_2 TYPE_3 ; ) ) VAR_1 ( METHOD_3 . ) commit ( METHOD_2 . TYPE_2 ( METHOD_1 . out { java.io.IOException throws ) out TYPE_1 ( format void private 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_6 . TYPE_5 ( METHOD_5 . ) STRING_4 ( METHOD_4 . ) ) ) ) STRING_3 , STRING_2 ( METHOD_3 . ) ) ( get . project ( METHOD_2 . TYPE_4 ( + STRING_1 ( ( TYPE_3 new { ) VAR_1 > TYPE_2 < TYPE_1 , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void static public 
protected void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = new TYPE_1 ( repo ) ; if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( new TYPE_2 ( repo , VAR_2 , db ) ) ; } VAR_1 . METHOD_4 ( in , out , err ) ; } } ; ) err , out , in ( METHOD_4 . VAR_1 } ; ) ) db , VAR_2 , repo ( TYPE_2 new ( METHOD_3 . VAR_1 { ) ) ) ( METHOD_2 . VAR_2 ( ! ( if ; ) repo ( TYPE_1 new = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void protected 
public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { return new TYPE_2 ( ) . append ( a . METHOD_2 ( ) , b . METHOD_2 ( ) ) . append ( b . METHOD_3 ( ) , a . METHOD_3 ( ) ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) ) ( METHOD_3 . a , ) ( METHOD_3 . b ( append . ) ) ( METHOD_2 . b , ) ( METHOD_2 . a ( append . ) ( TYPE_2 new return { ) b TYPE_1 , a TYPE_1 ( METHOD_1 int public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > p ; p = METHOD_2 ( STRING_1 ) ; assertEquals ( METHOD_2 ( STRING_2 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ; p = METHOD_2 ( STRING_4 ) ; assertEquals ( METHOD_2 ( STRING_5 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ; } } ; ) ) STRING_3 , p ( METHOD_3 . TYPE_2 , ) STRING_5 ( METHOD_2 ( assertEquals ; ) STRING_4 ( METHOD_2 = p ; ) ) STRING_3 , p ( METHOD_3 . TYPE_2 , ) STRING_2 ( METHOD_2 ( assertEquals ; ) STRING_1 ( METHOD_2 = p ; p > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { if ( ( METHOD_2 ( ) ) & & ( VAR_1 ) ) { VAR_2 . METHOD_3 ( change , ctx . METHOD_4 ( ) . getAccountId ( ) , VAR_3 , VAR_4 , VAR_5 , ctx . METHOD_5 ( ) ) ; } } } } ; ) ) ( METHOD_5 . ctx , VAR_5 , VAR_4 , VAR_3 , ) ( getAccountId . ) ( METHOD_4 . ctx , change ( METHOD_3 . VAR_2 { ) ) VAR_1 ( & & ) ) ( METHOD_2 ( ( if { com.google.gwtorm.server.OrmException throws ) ctx TYPE_1 ( METHOD_1 void public 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_2 ( change , STRING_1 , changeId ) ; TYPE_2 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) change , project , args ( TYPE_1 new return ; ) ) ( getProject . change , changeId , project , ) STRING_3 + STRING_2 ( , ) project ( equals . ) ( getProject . change ( METHOD_3 . TYPE_2 ; ) changeId , STRING_1 , change ( METHOD_2 . TYPE_2 ; ) changeId ( get . ) ( changes . ) db ( METHOD_1 . TYPE_1 = change com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) changeId Id . com.google.gerrit.reviewdb.client.Change , project com.google.gerrit.reviewdb.client.Project.NameKey , db com.google.gerrit.reviewdb.server.ReviewDb ( create TYPE_1 public 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < TYPE_3 > VAR_2 ) { if ( ! ( TYPE_4 . getAccountId ( ) . equals ( VAR_1 . getAccountId ( ) ) ) ) { VAR_2 . METHOD_2 ( new TYPE_5 ( ) ) ; return ; } run ( VAR_2 , new TYPE_6 < TYPE_3 > ( ) { public TYPE_3 run ( TYPE_7 . ReviewDb db ) throws TYPE_8 . OrmException { db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) ; return VAR_3 ; } } ) ; } } ; ) } } ; VAR_3 return ; ) ) VAR_1 ( java.util.Collections.singleton ( update . ) ( METHOD_3 . db { OrmException . TYPE_8 throws ) db ReviewDb . TYPE_7 ( run TYPE_3 public { ) ( > TYPE_3 < TYPE_6 new , VAR_2 ( run } ; return ; ) ) ( TYPE_5 new ( METHOD_2 . VAR_2 { ) ) ) ) ( getAccountId . VAR_1 ( equals . ) ( getAccountId . TYPE_4 ( ! ( if { ) VAR_2 > TYPE_3 < TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 void public 
void METHOD_1 ( TYPE_1 e ) { e . METHOD_2 ( ) ; java.lang.String t = TYPE_2 . METHOD_3 ( psId , VAR_1 . path ( ) , VAR_1 . line ( ) ) ; if ( ! ( TYPE_3 . METHOD_4 ( ) ) ) { TYPE_3 . METHOD_5 ( t ) ; } else { TYPE_3 . display ( t ) ; } } } } ; ) t ( display . TYPE_3 { else } ; ) t ( METHOD_5 . TYPE_3 { ) ) ) ( METHOD_4 . TYPE_3 ( ! ( if ; ) ) ( line . VAR_1 , ) ( path . VAR_1 , psId ( METHOD_3 . TYPE_2 = t java.lang.String ; ) ( METHOD_2 . e { ) e TYPE_1 ( METHOD_1 void 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; METHOD_4 ( ) . to ( VAR_3 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ; TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ; } } ; ) class VAR_7 ( to . ) class VAR_6 , ) ( binder ( bind . TYPE_1 ; ) class VAR_5 ( to . ) class VAR_4 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) class VAR_3 ( to . ) ( METHOD_4 ; ) class VAR_3 ( METHOD_3 . ) class VAR_2 ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
private com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet VAR_1 = VAR_2 . get ( ) . patchSets ( ) . METHOD_2 ( rsrc . METHOD_3 ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3 . METHOD_4 ( false ) ; return VAR_3 ; } } ) ; return VAR_1 ; } } ; VAR_1 return ; ) } } ; VAR_3 return ; ) false ( METHOD_4 . VAR_3 { ) VAR_3 com.google.gerrit.reviewdb.client.PatchSet ( update com.google.gerrit.reviewdb.client.PatchSet public { ) ( > com.google.gerrit.reviewdb.client.PatchSet < TYPE_2 new , ) ( getId . ) ( METHOD_3 . rsrc ( METHOD_2 . ) ( patchSets . ) ( get . VAR_2 = VAR_1 com.google.gerrit.reviewdb.client.PatchSet final { com.google.gwtorm.server.OrmException throws ) rsrc TYPE_1 ( METHOD_1 com.google.gerrit.reviewdb.client.PatchSet private 
private void METHOD_1 ( ) { final java.util.Map < TYPE_1 . Id , TYPE_2 . Id > VAR_1 = new TYPE_3 < TYPE_1 . Id , TYPE_2 . Id > ( ) ; for ( TYPE_2 . Id VAR_2 : approvals ) { VAR_1 . put ( VAR_2 . getParentKey ( ) , VAR_2 ) ; } VAR_3 . METHOD_2 ( change , user . METHOD_3 ( ) , VAR_4 , VAR_1 ) ; } } ; ) VAR_1 , VAR_4 , ) ( METHOD_3 . user , change ( METHOD_2 . VAR_3 } ; ) VAR_2 , ) ( getParentKey . VAR_2 ( put . VAR_1 { ) approvals : VAR_2 Id . TYPE_2 ( for ; ) ( > Id . TYPE_2 , Id . TYPE_1 < TYPE_3 new = VAR_1 > Id . TYPE_2 , Id . TYPE_1 < java.util.Map final { ) ( METHOD_1 void private 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) & & ( ! ( METHOD_5 ( db ) ) ) ; } } ; ) ) ) db ( METHOD_5 ( ! ( & & ) ) ) ( METHOD_1 . ) ( METHOD_3 ( || ) ) ) ( METHOD_4 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( return { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 e = new TYPE_1 ( VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_3 ( e ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 ) , TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . METHOD_7 ( ) ) ; servlet . METHOD_8 ( VAR_4 , VAR_5 ) ; TYPE_2 . METHOD_9 ( VAR_5 ) . METHOD_10 ( VAR_6 , e . getMessage ( ) ) ; } } ; ) ) ( getMessage . e , VAR_6 ( METHOD_10 . ) VAR_5 ( METHOD_9 . TYPE_2 ; ) VAR_5 , VAR_4 ( METHOD_8 . servlet ; ) ) ( METHOD_7 . TYPE_3 , ) VAR_2 ( METHOD_6 . TYPE_3 , ) VAR_1 ( METHOD_6 . TYPE_3 ( METHOD_5 . ) VAR_3 ( METHOD_4 . ) e ( METHOD_3 . TYPE_2 ; ) VAR_2 , VAR_1 ( TYPE_1 new = e TYPE_1 ; ) VAR_2 , VAR_1 ( METHOD_2 ; STRING_2 = VAR_2 java.lang.String ; STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 b ) { if ( ( ( ( b . config ) ! = null ) & & ( ( VAR_1 ) ! = null ) ) & & ( ( VAR_2 ) ! = null ) ) { return new TYPE_1 ( b . view , b . config , VAR_1 , VAR_2 ) ; } return null ; } } ; null return } ; ) VAR_2 , VAR_1 , config . b , view . b ( TYPE_1 new return { ) ) null = ! ) VAR_2 ( ( & & ) ) null = ! ) VAR_1 ( ( & & ) null = ! ) config . b ( ( ( ( if { ) b TYPE_2 ( METHOD_1 TYPE_1 static private 
private TYPE_1 . Result METHOD_1 ( TYPE_2 . Result r , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_3 { TYPE_2 VAR_2 = VAR_3 . create ( db , admin . METHOD_2 ( ) , STRING_1 , STRING_2 , VAR_1 , r . getChangeId ( ) ) ; return VAR_2 . to ( git , STRING_3 ) ; } } ; ) STRING_3 , git ( to . VAR_2 return ; ) ) ( getChangeId . r , VAR_1 , STRING_2 , STRING_1 , ) ( METHOD_2 . admin , db ( create . VAR_3 = VAR_2 TYPE_2 { TYPE_3 , java.io.IOException throws ) VAR_1 java.lang.String , r Result . TYPE_2 ( METHOD_1 Result . TYPE_1 private 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) ( METHOD_6 ( || ) ) ) ( METHOD_5 . ) ( METHOD_4 ( || ) ) ) cd , db ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( return { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
private static java.lang.String METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String key , final java.lang.String VAR_2 ) { final int n = VAR_1 . METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; return ( ( VAR_1 . METHOD_3 ( 0 , n ) ) + VAR_2 ) + ( VAR_1 . METHOD_3 ( ( ( n + INT_1 ) + ( key . length ( ) ) ) ) ) ; } } ; ) ) ) ) ) ( length . key ( + ) INT_1 + n ( ( ( METHOD_3 . VAR_1 ( + ) VAR_2 + ) ) n , 0 ( METHOD_3 . VAR_1 ( ( return ; ) ) STRING_2 + ) key + STRING_1 ( ( ( METHOD_2 . VAR_1 = n int final { ) VAR_2 java.lang.String final , key java.lang.String final , VAR_1 java.lang.String final ( METHOD_1 java.lang.String static private 
private void METHOD_1 ( TYPE_1 cm ) { int VAR_1 = cm . METHOD_2 ( cm . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_5 ( VAR_1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_6 ( ) ; if ( cm . METHOD_7 ( ) ) { } else { METHOD_8 ( VAR_4 , VAR_1 ) ; } } } } ; ) VAR_1 , VAR_4 ( METHOD_8 { else } { ) ) ( METHOD_7 . cm ( if ; ) ( METHOD_6 . VAR_2 = VAR_4 TYPE_3 ; ) VAR_1 ( METHOD_5 . VAR_3 = VAR_2 TYPE_2 ; ) ) ( METHOD_4 . ) ( METHOD_3 . cm ( METHOD_2 . cm = VAR_1 int { ) cm TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 ctx ) { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_1 ( ) ; } } } } ; ) ( METHOD_1 . ctx ; ) change ( METHOD_4 . TYPE_3 ; ) ) ( getStatus . change ( METHOD_3 . update ; ) VAR_3 ( METHOD_3 . change { ) VAR_1 ( if ; ) VAR_2 ( == ) ) ( getStatus . change ( = VAR_1 ; ) psId ( METHOD_2 . ctx = update TYPE_2 ; ) ( getChange . ctx = change { ) ctx TYPE_1 ( METHOD_1 void private 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; java.lang.String [ ] VAR_3 = VAR_1 . METHOD_2 ( STRING_2 ) ; for ( java.lang.String s : VAR_3 ) { if ( ! ( s . METHOD_3 ( ) . isEmpty ( ) ) ) { VAR_2 . append ( ( ( STRING_3 + s ) + STRING_4 ) ) ; } } return VAR_2 . toString ( ) ; } } ; ) ( toString . VAR_2 return } } ; ) ) STRING_4 + ) s + STRING_3 ( ( ( append . VAR_2 { ) ) ) ( isEmpty . ) ( METHOD_3 . s ( ! ( if { ) VAR_3 : s java.lang.String ( for ; ) STRING_2 ( METHOD_2 . VAR_1 = VAR_3 ] [ java.lang.String ; ) STRING_1 ( TYPE_1 new = VAR_2 TYPE_1 { ) VAR_1 java.lang.String ( METHOD_1 java.lang.String static public 
public TYPE_1 . PatchSet METHOD_1 ( ) { if ( ( currentPatchSetId ) ! = null ) { for ( int i = ( patchSets . size ( ) ) - 1 ; i > = 0 ; i -- ) { final TYPE_1 . PatchSet ps = patchSets . get ( i ) ; if ( ps . getId ( ) . equals ( currentPatchSetId ) ) { return ps ; } } } return null ; } } ; null return } } } ; ps return { ) ) currentPatchSetId ( equals . ) ( getId . ps ( if ; ) i ( get . patchSets = ps PatchSet . TYPE_1 final { ) -- i ; 0 = > i ; 1 - ) ) ( size . patchSets ( = i int ( for { ) null = ! ) currentPatchSetId ( ( if { ) ( METHOD_1 PatchSet . TYPE_1 public 
private TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , boolean VAR_1 ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_2 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1 . Result result = ( VAR_1 ) ? VAR_3 . METHOD_1 ( db , changeId ) : VAR_3 . METHOD_3 ( db , changeId ) ; if ( VAR_4 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } } ; result return } ; ) STRING_2 ( java.io.IOException new throw { ) ) false ( METHOD_2 . VAR_4 ( if ; ) changeId , db ( METHOD_3 . VAR_3 : ) changeId , db ( METHOD_1 . VAR_3 ? ) VAR_1 ( = result Result . TYPE_1 } ; ) STRING_1 ( java.io.IOException new throw { ) ) false ( METHOD_2 . VAR_2 ( if { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_2 throws ) VAR_1 boolean , changeId Id . com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 Result . TYPE_1 private 
protected void run ( ) throws TYPE_1 { try { if ( VAR_1 . METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( STRING_1 ) ; } else { VAR_2 . METHOD_2 ( STRING_2 ) ; } } catch ( TYPE_2 e ) { throw new TYPE_1 ( ( STRING_3 + ( e . getMessage ( ) ) ) ) ; } } } } ; ) ) ) ) ( getMessage . e ( + STRING_3 ( ( TYPE_1 new throw { ) e TYPE_2 ( catch } } ; ) STRING_2 ( METHOD_2 . VAR_2 { else } ; ) STRING_1 ( METHOD_2 . VAR_2 { ) ) ( METHOD_1 . VAR_1 ( if { try { TYPE_1 throws ) ( run void protected 
private boolean add ( TYPE_1 VAR_1 , TYPE_2 w , TYPE_3 type ) throws com.google.gwtorm.server.OrmException { TYPE_4 user = VAR_2 . create ( args . db , w . getAccountId ( ) ) ; try { if ( METHOD_1 ( user , w . METHOD_2 ( ) ) ) { if ( w . METHOD_3 ( type ) ) { VAR_3 . add ( w . getAccountId ( ) ) ; } return true ; } } catch ( TYPE_5 e ) { } return false ; } } ; false return } { ) e TYPE_5 ( catch } } ; true return } ; ) ) ( getAccountId . w ( add . VAR_3 { ) ) type ( METHOD_3 . w ( if { ) ) ) ( METHOD_2 . w , user ( METHOD_1 ( if { try ; ) ) ( getAccountId . w , db . args ( create . VAR_2 = user TYPE_4 { com.google.gwtorm.server.OrmException throws ) type TYPE_3 , w TYPE_2 , VAR_1 TYPE_1 ( add boolean private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( METHOD_2 ( 2 ) ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_3 ( ) ) ) ) . METHOD_4 ( TYPE_3 . of ( METHOD_2 ( 2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_2 ( 2 ) ) . VAR_4 ) . isEqualTo ( INT_1 ) ; } } ; ) INT_1 ( isEqualTo . ) VAR_4 . ) ) 2 ( METHOD_2 ( get . VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ) ) 2 ( METHOD_2 ( of . TYPE_3 ( METHOD_4 . ) ) ) ) ( METHOD_3 . VAR_3 ( ) > ? < TYPE_2 ( ( ( com.google.common.truth.Truth.assertThat ; ) ) 2 ( METHOD_2 ( isEqualTo . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_1 , changeId ( get = c ChangeInfo . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( TYPE_4 . equals ( info . path ( ) ) ) { VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . append ( info . status ( ) ) ; } VAR_1 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . VAR_1 } ; ) ) ( status . info ( append . VAR_1 { else } ; ) ( METHOD_5 . VAR_1 { ) ) ) ( path . info ( equals . TYPE_4 ( if ; ) ) ( METHOD_4 . ) ( css . TYPE_3 ( METHOD_3 . ) ( METHOD_2 . VAR_1 { ) info TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void private 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx . getChange ( ) ; TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ; change . METHOD_3 ( VAR_1 ) ; change . METHOD_4 ( ctx . METHOD_5 ( ) ) ; update . METHOD_3 ( VAR_1 ) ; METHOD_6 ( ctx , update ) ; return true ; } } ; true return ; ) update , ctx ( METHOD_6 ; ) VAR_1 ( METHOD_3 . update ; ) ) ( METHOD_5 . ctx ( METHOD_4 . change ; ) VAR_1 ( METHOD_3 . change ; ) ) ( currentPatchSetId . change ( METHOD_2 . ctx = update TYPE_3 ; ) ( getChange . ctx = change com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 boolean public 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; } else { return notes . METHOD_5 ( ) . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . ) ( METHOD_5 . notes return { else } ; ) ) ) ( getChangeId . notes ( METHOD_1 . ) ( METHOD_4 . db ( METHOD_3 . TYPE_3 return { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { com.google.gwtorm.server.OrmException throws ) notes TYPE_2 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 > TYPE_1 < java.util.List public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( true ) ) ; METHOD_2 ( b , b . append ( false ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) false ( append . b , b ( METHOD_2 ; ) ) true ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_2 . getName ( ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_3 ( VAR_4 , new TYPE_4 ( ( ( STRING_1 + ( VAR_7 ) ) + STRING_2 ) ) ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_2 . METHOD_6 ( false ) ; VAR_1 = true ; } } } } ; true = VAR_1 ; ) false ( METHOD_6 . VAR_2 ; ) VAR_5 ( METHOD_5 . VAR_2 ; ) VAR_4 ( METHOD_4 . VAR_2 ; ) ) ) STRING_2 + ) ) VAR_7 ( + STRING_1 ( ( ( TYPE_4 new , VAR_4 ( METHOD_3 . VAR_6 = VAR_5 TYPE_3 ; ) ( getName . VAR_2 = VAR_4 java.lang.String ; ) VAR_3 ( METHOD_2 . TYPE_2 = VAR_2 TYPE_1 { ) ) VAR_1 ( ! ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 notes = METHOD_3 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey name = notes . METHOD_4 ( ) ; TYPE_2 ctl = METHOD_5 ( notes ) ; ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_6 ( name ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_7 ( ctl , null ) . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ( STRING_1 + name ) ) ) ; } } ; ) ) ) name + STRING_1 ( ( METHOD_10 . TYPE_4 ( METHOD_9 . ) ) ( METHOD_8 . ) null , ctl ( METHOD_7 . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) name ( METHOD_6 . ) ) VAR_1 ( ) TYPE_3 ( ( ; ) notes ( METHOD_5 = ctl TYPE_2 ; ) ( METHOD_4 . notes = name com.google.gerrit.reviewdb.client.Project.NameKey ; ) ( METHOD_3 = notes TYPE_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( final TYPE_1 . NameKey branch ) { try { new TYPE_2 ( server , VAR_1 , branch ) . METHOD_2 ( ) ; } catch ( TYPE_3 e ) { VAR_2 . error ( ( ( STRING_1 + branch ) + STRING_2 ) , e ) ; } } } } ; ) e , ) STRING_2 + ) branch + STRING_1 ( ( ( error . VAR_2 { ) e TYPE_3 ( catch } ; ) ( METHOD_2 . ) branch , VAR_1 , server ( TYPE_2 new { try { ) branch NameKey . TYPE_1 final ( METHOD_1 void private 
private static void METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String path , byte [ ] VAR_4 ) throws TYPE_4 , java.io.IOException { switch ( VAR_1 ) { case VAR_5 : VAR_2 . add ( new TYPE_5 ( path ) ) ; break ; case VAR_6 : case VAR_7 : VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ; } VAR_2 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . VAR_2 } ; ) ) VAR_4 , VAR_3 , path , base , rw , repo , VAR_1 ( METHOD_2 . TYPE_6 ( add . VAR_2 : VAR_7 case : VAR_6 case ; break ; ) ) path ( TYPE_5 new ( add . VAR_2 : VAR_5 case { ) VAR_1 ( switch { java.io.IOException , TYPE_4 throws ) VAR_4 ] [ byte , path java.lang.String , VAR_3 TYPE_3 , VAR_2 TYPE_2 , base org.eclipse.jgit.revwalk.RevCommit , rw org.eclipse.jgit.revwalk.RevWalk , repo org.eclipse.jgit.lib.Repository , VAR_1 TYPE_1 ( METHOD_1 void static private 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) { return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } throw new TYPE_3 ( rsrc . METHOD_2 ( ) . getProject ( ) . getName ( ) ) ; } } ; ) ) ( getName . ) ( getProject . ) ( METHOD_2 . rsrc ( TYPE_3 new throw } ; ) ) ( getProject . ) ( METHOD_2 . rsrc ( format . VAR_2 return { ) ) ) ( METHOD_1 . rsrc ( || ) VAR_1 ( ( if { TYPE_3 throws ) rsrc TYPE_2 ( apply TYPE_1 public 
public int METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( this . VAR_2 , VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_7 ( ) ) . METHOD_6 ( this . VAR_4 , VAR_5 ) . METHOD_5 ( this . VAR_6 , VAR_7 , TYPE_3 . METHOD_8 ( ) ) . METHOD_5 ( this . psId , VAR_1 . psId , TYPE_3 . METHOD_8 ( ) . METHOD_9 ( ) ) . result ( ) ; } } ; ) ( result . ) ) ( METHOD_9 . ) ( METHOD_8 . TYPE_3 , psId . VAR_1 , psId . this ( METHOD_5 . ) ) ( METHOD_8 . TYPE_3 , VAR_7 , VAR_6 . this ( METHOD_5 . ) VAR_5 , VAR_4 . this ( METHOD_6 . ) ) ( METHOD_7 , ) ( METHOD_7 ( METHOD_6 . ) VAR_3 , VAR_2 . this ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 , ) ( METHOD_4 . this ( METHOD_3 . ) ( METHOD_2 . TYPE_2 return { ) VAR_1 TYPE_1 ( METHOD_1 int public 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; if ( VAR_3 . METHOD_2 ( ) ) { org.eclipse.jgit.lib.ObjectId VAR_4 = METHOD_3 ( ) ; if ( VAR_4 ! = null ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } } VAR_1 . METHOD_2 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_2 . VAR_1 } } ; ) VAR_4 ( METHOD_4 . VAR_2 { ) null = ! VAR_4 ( if ; ) ( METHOD_3 = VAR_4 org.eclipse.jgit.lib.ObjectId { ) ) ( METHOD_2 . VAR_3 ( if ; ) ( TYPE_2 new = VAR_2 TYPE_2 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_1 ( METHOD_1 void public 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 s = VAR_1 . METHOD_2 ( ) ; final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( STRING_1 ) ; r . append ( VAR_1 . METHOD_3 ( ) ) ; r . append ( STRING_2 ) ; return r . toString ( ) ; } } ; ) ( toString . r return ; ) STRING_2 ( append . r ; ) ) ( METHOD_3 . VAR_1 ( append . r ; ) STRING_1 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final ; ) ( METHOD_2 . VAR_1 = s TYPE_2 final { ) VAR_1 TYPE_1 final ( METHOD_1 java.lang.String public 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 , STRING_6 , STRING_7 ) ) ) ; } } ; ) ) ) STRING_7 , STRING_6 , STRING_5 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_3 ; ) ) ) STRING_4 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_5 ; ) ) ) STRING_3 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_5 ; ) ) ) STRING_2 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_3 ; ) STRING_1 ( METHOD_2 . TYPE_2 = p TYPE_1 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( METHOD_2 ( VAR_1 ) ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_5 . METHOD_6 ( new TYPE_1 ( VAR_2 ) ) , VAR_6 ) ; VAR_3 . METHOD_3 ( STRING_4 , VAR_1 ) ; } else { VAR_3 . error ( STRING_5 , VAR_1 ) ; } } } } ; ) VAR_1 , STRING_5 ( error . VAR_3 { else } ; ) VAR_1 , STRING_4 ( METHOD_3 . VAR_3 ; ) VAR_6 , ) ) VAR_2 ( TYPE_1 new ( METHOD_6 . VAR_5 , ) STRING_3 + ) VAR_1 + STRING_2 ( ( ( METHOD_5 . ) ( METHOD_4 . VAR_4 ; ) VAR_1 , STRING_1 ( METHOD_3 . VAR_3 { ) ) VAR_1 ( METHOD_2 ( if { java.io.IOException throws ) VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String change = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ; java.lang.String patchSet = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ; java.lang.String path = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( change , patchSet , path ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ; } } ; ) ) path ( METHOD_6 . TYPE_4 ( METHOD_5 . VAR_1 ; ) ) path , patchSet , change ( TYPE_3 new ( METHOD_4 . VAR_1 ; ) ) INT_1 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = path java.lang.String ; ) ) 2 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = patchSet java.lang.String ; ) ) 1 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = change java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_7 , VAR_4 ) . to ( VAR_8 , VAR_9 ) . to ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_9 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_9 . ) VAR_12 ( METHOD_10 . ) VAR_11 ( METHOD_10 . ) VAR_10 ( to . ) VAR_9 , VAR_8 ( to . ) VAR_4 , VAR_7 ( METHOD_9 . ) VAR_2 , STRING_2 ( METHOD_8 . ) VAR_6 ( assertThat ; ) VAR_5 , VAR_4 , STRING_1 , VAR_2 ( METHOD_7 ; ) VAR_3 ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void run ( ) { VAR_1 . info ( STRING_1 ) ; if ( ( VAR_2 ) ! = null ) { try { TYPE_1 . delete ( VAR_3 ) ; } catch ( java.io.IOException err ) { VAR_1 . METHOD_1 ( ( STRING_2 + ( VAR_3 ) ) , err ) ; } } VAR_4 . METHOD_2 ( ) ; } } ; ) ( METHOD_2 . VAR_4 } } ; ) err , ) ) VAR_3 ( + STRING_2 ( ( METHOD_1 . VAR_1 { ) err java.io.IOException ( catch } ; ) VAR_3 ( delete . TYPE_1 { try { ) null = ! ) VAR_2 ( ( if ; ) STRING_1 ( info . VAR_1 { ) ( run void public 
private void METHOD_1 ( TYPE_1 p ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { METHOD_2 ( p ) ; java.lang.String topic = STRING_1 ; TYPE_3 . Result r = METHOD_3 ( ( STRING_2 + topic ) ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , topic ) ; r = METHOD_3 ( ( STRING_3 + topic ) ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , topic ) ; } } ; ) topic , VAR_1 ( METHOD_5 . r ; ) ( METHOD_4 . r ; ) ) topic + STRING_3 ( ( METHOD_3 = r ; ) topic , VAR_1 ( METHOD_5 . r ; ) ( METHOD_4 . r ; ) ) topic + STRING_2 ( ( METHOD_3 = r Result . TYPE_3 ; STRING_1 = topic java.lang.String ; ) p ( METHOD_2 { TYPE_2 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) p TYPE_1 ( METHOD_1 void private 
void METHOD_1 ( final java.lang.String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ; } } ; ) ) ( getValue . VAR_1 , ) ( METHOD_4 . VAR_1 ( put . VAR_4 } ; ) ) ( getMessage . e ( reject . VAR_3 throw { ) e TYPE_5 ( catch } ; ) ) ( getValue . VAR_1 , ) ( METHOD_4 . VAR_1 , VAR_2 ( METHOD_5 . TYPE_4 ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . TYPE_3 { try ; ) token ( METHOD_2 . TYPE_2 = VAR_1 TYPE_2 { TYPE_1 throws ) token java.lang.String final ( METHOD_1 void 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { com.google.common.truth.Truth.assertThat ( VAR_2 . line ) . isEqualTo ( VAR_1 . line ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . message ) . isEqualTo ( VAR_1 . message ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEqualTo ( VAR_4 ) ; TYPE_3 . METHOD_2 ( VAR_5 , VAR_6 ) ; if ( ( VAR_7 ) == null ) { com.google.common.truth.Truth.assertThat ( VAR_8 ) . isEqualTo ( VAR_9 ) ; } } } } ; ) VAR_9 ( isEqualTo . ) VAR_8 ( com.google.common.truth.Truth.assertThat { ) null == ) VAR_7 ( ( if ; ) VAR_6 , VAR_5 ( METHOD_2 . TYPE_3 ; ) VAR_4 ( isEqualTo . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) message . VAR_1 ( isEqualTo . ) message . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) line . VAR_1 ( isEqualTo . ) line . VAR_2 ( com.google.common.truth.Truth.assertThat { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void static private 
void METHOD_1 ( java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) { TYPE_1 ref = refs . get ( VAR_1 ) ; if ( ref ! = null ) { org.eclipse.jgit.lib.ObjectId VAR_4 = ref . get ( ) ; if ( VAR_4 . equals ( VAR_2 ) ) { ref . METHOD_2 ( VAR_4 , VAR_3 ) ; } } } } } } ; ) VAR_3 , VAR_4 ( METHOD_2 . ref { ) ) VAR_2 ( equals . VAR_4 ( if ; ) ( get . ref = VAR_4 org.eclipse.jgit.lib.ObjectId { ) null = ! ref ( if ; ) VAR_1 ( get . refs = ref TYPE_1 { ) VAR_3 org.eclipse.jgit.lib.ObjectId , VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 java.lang.String ( METHOD_1 void 
private TYPE_1 . Result METHOD_1 ( TYPE_2 git , boolean VAR_1 ) throws java.io.IOException , TYPE_3 { TYPE_4 . METHOD_2 ( git , STRING_1 ) ; java.lang.String file = ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ; TYPE_5 VAR_3 = VAR_4 . create ( db , admin . METHOD_3 ( ) , ( STRING_5 + ( VAR_2 ) ) , file , ( STRING_6 + ( VAR_2 ) ) ) ; ( VAR_2 ) ++ ; return VAR_3 . to ( git , STRING_7 ) ; } } ; ) STRING_7 , git ( to . VAR_3 return ; ++ ) VAR_2 ( ; ) ) ) VAR_2 ( + STRING_6 ( , file , ) ) VAR_2 ( + STRING_5 ( , ) ( METHOD_3 . admin , db ( create . VAR_4 = VAR_3 TYPE_5 ; STRING_4 + ) ) VAR_2 ( + STRING_3 ( : STRING_2 ? ) VAR_1 ( = file java.lang.String ; ) STRING_1 , git ( METHOD_2 . TYPE_4 { TYPE_3 , java.io.IOException throws ) VAR_1 boolean , git TYPE_2 ( METHOD_1 Result . TYPE_1 private 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( ) ) ; } } ; ) ) ( TYPE_8 new , ) ( TYPE_7 new , ) ) ( METHOD_2 . repo ( TYPE_6 new ( TYPE_5 new = servlet ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void protected 
private TYPE_1 METHOD_1 ( ) { java.lang.String type = METHOD_2 ( ) . METHOD_3 ( STRING_1 , null , STRING_2 ) ; if ( type == null ) { return VAR_1 ; } for ( TYPE_1 t : TYPE_2 . values ( ) ) { if ( type . METHOD_4 ( t . name ( ) ) ) { return t ; } } throw new TYPE_3 ( ( STRING_3 + type ) ) ; } } ; ) ) type + STRING_3 ( ( TYPE_3 new throw } } ; t return { ) ) ) ( name . t ( METHOD_4 . type ( if { ) ) ( values . TYPE_2 : t TYPE_1 ( for } ; VAR_1 return { ) null == type ( if ; ) STRING_2 , null , STRING_1 ( METHOD_3 . ) ( METHOD_2 = type java.lang.String { ) ( METHOD_1 TYPE_1 private 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; VAR_1 = new TYPE_5 ( ) ; VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ; } } ; INT_1 / ) ) ( METHOD_4 . ) ( METHOD_3 . repo ( = VAR_2 ; ) ( TYPE_5 new = VAR_1 ; ) ) ( METHOD_2 . repo ( org.eclipse.jgit.revwalk.RevWalk new = walk ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void protected 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 . Id , TYPE_4 . Id > VAR_1 ) { TYPE_1 a = new TYPE_1 ( ) ; a . type = VAR_1 . getKey ( ) . get ( ) ; final TYPE_5 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . getKey ( ) ) ; VAR_4 = VAR_2 . METHOD_3 ( ) . getName ( ) ; a . value = TYPE_6 . toString ( VAR_1 . getValue ( ) . get ( ) ) ; return a ; } } ; a return ; ) ) ( get . ) ( getValue . VAR_1 ( toString . TYPE_6 = value . a ; ) ( getName . ) ( METHOD_3 . VAR_2 = VAR_4 ; ) ) ( getKey . VAR_1 ( METHOD_2 . VAR_3 = VAR_2 TYPE_5 final ; ) ( get . ) ( getKey . VAR_1 = type . a ; ) ( TYPE_1 new = a TYPE_1 { ) VAR_1 > Id . TYPE_4 , Id . TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 private 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; } } ; ) class VAR_7 ( rpc ; ) class VAR_6 ( rpc ; ) } } ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_2 void protected { ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; ) ) ) ( value . ) revision ( apply . ) ( get . VAR_1 ( ) > TYPE_1 , java.lang.String < java.util.Map ( ( return { try { TYPE_2 throws ) ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map public 
public TYPE_1 METHOD_1 ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { return VAR_2 . METHOD_4 ( db , VAR_3 , project , VAR_4 ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_1 + project ) , e ) ; return false ; } } } } ; false return ; ) e , ) project + STRING_1 ( ( error . VAR_5 { ) e java.lang.Exception ( catch } ; ) VAR_4 , project , VAR_3 , db ( METHOD_4 . VAR_2 return { ) ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = db com.google.gerrit.reviewdb.server.ReviewDb ( try { ) ( METHOD_1 TYPE_1 public 
public static void patch ( java.lang.String token , com.google.gerrit.reviewdb.client.PatchSet.Id base , TYPE_1 . Key id , int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 . patch ( token , base , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ; } } ; ) null , VAR_4 , VAR_3 , VAR_2 , VAR_1 , id , base , token ( patch . TYPE_5 { ) VAR_4 TYPE_4 , VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 int , id Key . TYPE_1 , base com.google.gerrit.reviewdb.client.PatchSet.Id , token java.lang.String ( patch void static public 
private org.eclipse.jgit.revwalk.RevCommit commit ( TYPE_1 . ProjectConfig cfg ) throws java.io.IOException , TYPE_2 , TYPE_3 { TYPE_4 VAR_1 = new TYPE_4 ( VAR_2 , cfg . getProject ( ) . METHOD_1 ( ) , db ) ; util . METHOD_2 ( INT_1 ) ; util . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; cfg . commit ( VAR_1 ) ; TYPE_5 ref = db . METHOD_6 ( VAR_3 ) ; return util . METHOD_7 ( ) . parseCommit ( ref . METHOD_8 ( ) ) ; } } ; ) ) ( METHOD_8 . ref ( parseCommit . ) ( METHOD_7 . util return ; ) VAR_3 ( METHOD_6 . db = ref TYPE_5 ; ) VAR_1 ( commit . cfg ; ) STRING_1 ( METHOD_5 . VAR_1 ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . util ; ) INT_1 ( METHOD_2 . util ; ) db , ) ( METHOD_1 . ) ( getProject . cfg , VAR_2 ( TYPE_4 new = VAR_1 TYPE_4 { TYPE_3 , TYPE_2 , java.io.IOException throws ) cfg ProjectConfig . TYPE_1 ( commit org.eclipse.jgit.revwalk.RevCommit private 
private static TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; } else { TYPE_1 r = new TYPE_3 ( null ) ; r . METHOD_4 ( true ) ; return r ; } } } } ; r return ; ) true ( METHOD_4 . r ; ) null ( TYPE_3 new = r TYPE_1 { else } ; ) ) ( getId . ) ( METHOD_3 . TYPE_2 ( TYPE_3 new return { ) ) ( METHOD_2 . TYPE_2 ( if { ) ( METHOD_1 TYPE_1 static private 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( id . get ( ) , message , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( id ) ) ; METHOD_4 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_4 ; ) ) id ( METHOD_3 . TYPE_5 ( display . TYPE_4 { ) result ChangeInfo . TYPE_3 ( onSuccess void public { ) ( > ChangeInfo . TYPE_3 < TYPE_2 new , message , ) ( get . id ( METHOD_2 . TYPE_1 { ) message java.lang.String ( METHOD_1 void 
private TYPE_1 METHOD_1 ( TYPE_2 req ) throws java.io.IOException { if ( TYPE_3 . METHOD_2 ( req . METHOD_3 ( ) ) . is ( VAR_1 ) ) { java.lang.String VAR_2 = TYPE_4 . toString ( req . METHOD_4 ( ) ) ; TYPE_5 VAR_3 = new TYPE_6 ( ) . METHOD_5 ( VAR_4 class , new TYPE_7 ( ) ) . METHOD_5 ( VAR_5 class , new TYPE_8 ( ) ) . create ( ) ; return VAR_3 . METHOD_6 ( VAR_2 , VAR_4 class ) ; } return null ; } } ; null return } ; ) class VAR_4 , VAR_2 ( METHOD_6 . VAR_3 return ; ) ( create . ) ) ( TYPE_8 new , class VAR_5 ( METHOD_5 . ) ) ( TYPE_7 new , class VAR_4 ( METHOD_5 . ) ( TYPE_6 new = VAR_3 TYPE_5 ; ) ) ( METHOD_4 . req ( toString . TYPE_4 = VAR_2 java.lang.String { ) ) VAR_1 ( is . ) ) ( METHOD_3 . req ( METHOD_2 . TYPE_3 ( if { java.io.IOException throws ) req TYPE_2 ( METHOD_1 TYPE_1 private 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) { return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; } else { return VAR_2 ; } } } } ; VAR_2 return { else } ; ) ) ( length . TYPE_3 ( METHOD_7 . VAR_2 return { ) ) TYPE_3 ( METHOD_6 . VAR_2 ( if ; ) ) ) ( METHOD_5 . VAR_1 ( METHOD_4 . TYPE_2 , ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_1 = VAR_2 java.lang.String final { ) VAR_1 com.google.gerrit.reviewdb.client.Project ( METHOD_1 java.lang.String static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ; } } ; ) VAR_12 ( METHOD_7 . ) VAR_11 ( METHOD_7 . ) VAR_10 ( METHOD_6 . ) VAR_9 , VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_2 ( to . ) VAR_5 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public static < TYPE_1 > void METHOD_1 ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_4 ( new TYPE_8 < TYPE_1 > ( VAR_1 ) ) . in ( VAR_3 ) ; } } ; ) VAR_3 ( in . ) ) VAR_1 ( > TYPE_1 < TYPE_8 new ( METHOD_4 . ) key ( bind . binder ; ) ) ) ) ) ( METHOD_3 . VAR_1 , class VAR_2 ( METHOD_2 . TYPE_7 ( get . TYPE_6 ( ) > > TYPE_1 < TYPE_5 < Key . TYPE_4 ( ( = key > > TYPE_1 < TYPE_5 < Key . TYPE_4 { ) VAR_1 > TYPE_1 < TYPE_3 , binder TYPE_2 ( METHOD_1 void > TYPE_1 < static public 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( TYPE_3 . METHOD_2 ( getRefName ( ) , VAR_3 . METHOD_3 ( ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) VAR_3 ( add . VAR_2 { ) ) ) ( METHOD_3 . VAR_3 , ) ( getRefName ( METHOD_2 . TYPE_3 ( if { ) VAR_1 : VAR_3 TYPE_1 ( for ; ) ) ( size . VAR_1 ( > TYPE_1 < java.util.ArrayList new = VAR_2 > TYPE_1 < java.util.List { ) VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
public static void METHOD_1 ( int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . message ( TYPE_4 . METHOD_2 ( msg ) ) ; TYPE_4 . METHOD_3 ( id , STRING_1 ) . data ( input ) . METHOD_4 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_4 . ) input ( data . ) STRING_1 , id ( METHOD_3 . TYPE_4 ; ) ) msg ( METHOD_2 . TYPE_4 ( message . input ; ) ( create . TYPE_3 = input TYPE_3 { ) VAR_1 > ChangeInfo . TYPE_2 < TYPE_1 , msg java.lang.String , id int ( METHOD_1 void static public 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_1 . METHOD_2 ( ) ) { METHOD_4 ( view . METHOD_5 ( ) ) ; } view . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . VAR_1 ( METHOD_6 . view } ; ) ) ( METHOD_5 . view ( METHOD_4 { ) ) ( METHOD_2 . VAR_1 ( if ; ) ) ( METHOD_2 . VAR_1 ( METHOD_3 . VAR_2 ; ) ) ( getValue . e ( METHOD_2 . VAR_1 { ) e > TYPE_2 < TYPE_1 ( METHOD_1 void 
private static boolean METHOD_1 ( TYPE_1 type ) { TYPE_1 t = type . METHOD_2 ( ) ; while ( ! ( VAR_1 class . getName ( ) . equals ( t . METHOD_3 ( ) ) ) ) { if ( ( TYPE_2 . METHOD_4 ( t ) . length ) > 0 ) { return true ; } t = type . METHOD_2 ( ) ; } return false ; } } ; false return } ; ) ( METHOD_2 . type = t } ; true return { ) 0 > ) length . ) t ( METHOD_4 . TYPE_2 ( ( if { ) ) ) ) ( METHOD_3 . t ( equals . ) ( getName . class VAR_1 ( ! ( while ; ) ( METHOD_2 . type = t TYPE_1 { ) type TYPE_1 ( METHOD_1 boolean static private 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { try { METHOD_2 ( req , rsp ) ; } catch ( java.lang.Exception e ) { METHOD_3 ( ) . log ( STRING_1 , e ) ; METHOD_4 ( rsp , null , null ) ; } } } } ; ) null , null , rsp ( METHOD_4 ; ) e , STRING_1 ( log . ) ( METHOD_3 { ) e java.lang.Exception ( catch } ; ) rsp , req ( METHOD_2 { try { java.io.IOException throws ) rsp HttpServletResponse . TYPE_2 final , req TYPE_1 final ( METHOD_1 void public 
public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = TYPE_3 . METHOD_5 ( ) ; while ( VAR_2 . METHOD_6 ( ) ) { VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) ) VAR_2 ( TYPE_1 new ( add . VAR_4 { ) ) ( METHOD_6 . VAR_2 ( while ; ) ( METHOD_5 . TYPE_3 = VAR_4 > TYPE_1 < java.util.List ; ) VAR_1 ( METHOD_4 . VAR_2 ; ) ) ( METHOD_3 . revision ( METHOD_2 . VAR_2 ; ) VAR_3 ( TYPE_2 new = VAR_2 TYPE_2 { java.io.IOException throws ) VAR_1 boolean ( METHOD_1 > TYPE_1 < java.util.List public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ; if ( VAR_4 ) { bind ( VAR_5 . String class ) . METHOD_3 ( VAR_6 class ) . METHOD_2 ( VAR_7 class . getName ( ) ) ; bind ( VAR_8 class ) . METHOD_4 ( VAR_9 class ) ; } } } } ; ) class VAR_9 ( METHOD_4 . ) class VAR_8 ( bind ; ) ) ( getName . class VAR_7 ( METHOD_2 . ) class VAR_6 ( METHOD_3 . ) class String . VAR_5 ( bind { ) VAR_4 ( if ; ) ) VAR_3 , VAR_2 ( TYPE_1 new ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
public TYPE_1 create ( java.lang.String VAR_1 ) { if ( METHOD_1 ( ) ) { try { VAR_2 . METHOD_2 ( VAR_2 . get ( ) , new TYPE_2 ( VAR_3 ) ) ; VAR_4 = METHOD_3 ( ) ; VAR_5 . info ( STRING_1 ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_2 + STRING_3 ) , e ) ; } } return VAR_2 . get ( ) . create ( VAR_1 ) ; } } ; ) VAR_1 ( create . ) ( get . VAR_2 return } } ; ) e , ) STRING_3 + STRING_2 ( ( error . VAR_5 { ) e java.lang.Exception ( catch } ; ) STRING_1 ( info . VAR_5 ; ) ( METHOD_3 = VAR_4 ; ) ) VAR_3 ( TYPE_2 new , ) ( get . VAR_2 ( METHOD_2 . VAR_2 { try { ) ) ( METHOD_1 ( if { ) VAR_1 java.lang.String ( create TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , admin , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_2 ) ; } } ; ) VAR_2 ( to . ) VAR_9 ( METHOD_6 . ) VAR_8 ( to . ) admin , VAR_7 , VAR_6 , VAR_5 , VAR_4 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_3 ( assertThat ; ) VAR_2 , admin , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { VAR_1 = java.util.Collections . METHOD_2 ( ) ; } else if ( ( VAR_2 ) ! = null ) { return VAR_2 . get ( c . currentPatchSetId ( ) ) ; } else { VAR_1 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( db , METHOD_5 ( ) , c . currentPatchSetId ( ) ) ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) ) ) ( currentPatchSetId . c , ) ( METHOD_5 , db ( METHOD_4 . VAR_3 ( METHOD_3 . TYPE_1 = VAR_1 { else } ; ) ) ( currentPatchSetId . c ( get . VAR_2 return { ) null = ! ) VAR_2 ( ( if else } ; ) ( METHOD_2 . java.util.Collections = VAR_1 { ) null == c ( if ; ) ( change = c com.google.gerrit.reviewdb.client.Change { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > PatchSetApproval . com.google.gerrit.reviewdb.client < java.util.List public 
public com.google.gerrit.reviewdb.client.Account METHOD_1 ( final java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > r = METHOD_2 ( VAR_1 ) ; return ( r . size ( ) ) == 1 ? VAR_2 . get ( r . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) : null ; } } ; null : ) ( METHOD_5 . ) ) ( METHOD_4 . ) ( METHOD_3 . r ( get . VAR_2 ? 1 == ) ) ( size . r ( return ; ) VAR_1 ( METHOD_2 = r > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set { com.google.gwtorm.server.OrmException throws ) VAR_1 java.lang.String final ( METHOD_1 com.google.gerrit.reviewdb.client.Account public 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 r = METHOD_2 ( ( ( STRING_1 + ( VAR_1 . get ( ) ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_4 ( r ) ; org.junit.Assert . METHOD_5 ( ( ( VAR_3 . size ( ) ) == 1 ) ) ; } } ; ) ) 1 == ) ) ( size . VAR_3 ( ( ( METHOD_5 . org.junit.Assert ; ) r ( METHOD_4 . TYPE_3 = VAR_3 > TYPE_2 < java.util.List ; ) ) ( METHOD_3 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) STRING_2 + ) ) ) ( get . VAR_1 ( + STRING_1 ( ( ( METHOD_2 = r TYPE_1 { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ; cfg = new TYPE_3 ( ) ; cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ; VAR_2 = new TYPE_4 ( VAR_1 , cfg ) ; VAR_2 . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . VAR_2 ; ) cfg , VAR_1 ( TYPE_4 new = VAR_2 ; ) STRING_1 , STRING_3 , null , STRING_2 ( METHOD_7 . cfg ; ) ( TYPE_3 new = cfg ; ) ( METHOD_6 . ) ( METHOD_5 . ) STRING_1 ( METHOD_4 . VAR_1 ; ) ) ( METHOD_3 . ) ( METHOD_2 . TYPE_2 ( TYPE_1 new = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) { switch ( TYPE_2 . get ( ) ) { case VAR_1 : METHOD_2 ( true ) ; METHOD_3 ( true ) ; break ; case VAR_2 : METHOD_2 ( true ) ; METHOD_3 ( false ) ; break ; case VAR_3 : case VAR_4 : default : break ; } return this ; } } ; this return } ; break : default : VAR_4 case : VAR_3 case ; break ; ) false ( METHOD_3 ; ) true ( METHOD_2 : VAR_2 case ; break ; ) true ( METHOD_3 ; ) true ( METHOD_2 : VAR_1 case { ) ) ( get . TYPE_2 ( switch { ) ( METHOD_1 TYPE_1 public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_3 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_4 . of ( db ) ; } } ; } } ; } } ; ) db ( of . TYPE_4 return { ) ( METHOD_3 > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_3 public } ; VAR_2 return { ) ( METHOD_2 TYPE_2 public { ) ( TYPE_1 new return ; ) VAR_1 ( create . VAR_3 = VAR_2 TYPE_2 final { ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 private 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_1 . OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { TYPE_2 . Change c = cd . change ( db ) ; if ( ( c ! = null ) & & ( VAR_1 . METHOD_3 ( c , user ) . METHOD_4 ( ) ) ) { cd . METHOD_5 ( user ) ; return true ; } else { return false ; } } catch ( TYPE_3 e ) { return false ; } } } } ; false return { ) e TYPE_3 ( catch } } ; false return { else } ; true return ; ) user ( METHOD_5 . cd { ) ) ) ( METHOD_4 . ) user , c ( METHOD_3 . VAR_1 ( & & ) null = ! c ( ( if ; ) db ( change . cd = c Change . TYPE_2 { try } ; true return { ) ) user ( METHOD_2 . cd ( if { OrmException . TYPE_1 throws ) cd com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 rsrc ) throws TYPE_4 { java.util.Map < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 > VAR_1 = new TYPE_5 < > ( ) ; for ( TYPE_2 ps : rsrc . METHOD_2 ( ) . METHOD_1 ( ) ) { VAR_1 . put ( ps . getProject ( ) . METHOD_3 ( ) , ps ) ; } VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 . user ( user ) . METHOD_6 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ) ; return VAR_1 . values ( ) ; } } ; ) ( values . VAR_1 return ; ) ) ) ( METHOD_4 . VAR_1 , VAR_3 ( METHOD_6 . ) user ( user . VAR_2 ( METHOD_5 . ) ( METHOD_4 . VAR_1 } ; ) ps , ) ( METHOD_3 . ) ( getProject . ps ( put . VAR_1 { ) ) ( METHOD_1 . ) ( METHOD_2 . rsrc : ps TYPE_2 ( for ; ) ( > < TYPE_5 new = VAR_1 > TYPE_2 , com.google.gerrit.reviewdb.client.Project.NameKey < java.util.Map { TYPE_4 throws ) rsrc TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 private 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_3 ( METHOD_6 . u , STRING_2 ( METHOD_5 ; ) VAR_3 , VAR_1 ( user . util = u TYPE_2 ; ) ( METHOD_4 . ) STRING_1 , VAR_4 , VAR_2 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) & & ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) { VAR_2 . METHOD_4 ( true ) ; } else if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_5 ( ) ) ) ) & & ( TYPE_2 . METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( false ) ; } } } } ; ) false ( METHOD_4 . VAR_2 { ) ) ) ( METHOD_3 . TYPE_2 ( & & ) ) ) ) ( METHOD_5 . VAR_1 ( * FLOAT_1 ( > ) ) ( METHOD_2 . VAR_1 ( ( ( if else } ; ) true ( METHOD_4 . VAR_2 { ) ) ) ) ( METHOD_3 . TYPE_2 ( ! ( & & ) 0 == ) ) ( METHOD_2 . VAR_1 ( ( ( if { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 . toString ( ) ) ; final TYPE_1 VAR_3 = new TYPE_1 ( 0 ) ; VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) ; assertEquals ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( assertEquals ; ) ) ( toString . VAR_2 ( METHOD_2 . VAR_3 ; ) 0 ( TYPE_1 new = VAR_3 TYPE_1 final ; ) ) ( toString . VAR_2 , ) VAR_1 + STRING_1 ( ( assertEquals ; ) VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 final ; INT_1 = VAR_1 long final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ; org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ; } } ; ) changeId . ) VAR_2 ( METHOD_4 . TYPE_3 , ) ( getChangeId . VAR_1 ( org.junit.Assert.assertEquals ; ) ) ( size . VAR_2 , 1 ( org.junit.Assert.assertEquals ; ) ( get . ) 1 ( METHOD_3 . ) ( query . ) ( changes . VAR_3 = VAR_2 > ChangeInfo . TYPE_2 < java.util.List ; ) ( METHOD_2 = VAR_1 Result . TYPE_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , VAR_3 ) ; try { if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } } } ; ) STRING_2 ( TYPE_2 new throw { ) e java.io.IOException ( catch } } ; ) STRING_1 ( TYPE_2 new throw { else } ; VAR_2 return { ) ) ( METHOD_3 . VAR_2 ( if { try ; ) VAR_3 , VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 ; ) ) ( get . project ( METHOD_2 . TYPE_4 = VAR_1 TYPE_3 { TYPE_2 throws ) project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . branch = VAR_1 ; VAR_2 = STRING_1 ; in . project = project . get ( ) ; VAR_3 = true ; VAR_4 . METHOD_2 ( VAR_5 class ) ; TYPE_2 . ChangeInfo info = VAR_6 . changes ( ) . create ( in ) . get ( ) ; } } ; ) ( get . ) in ( create . ) ( changes . VAR_6 = info ChangeInfo . TYPE_2 ; ) class VAR_5 ( METHOD_2 . VAR_4 ; true = VAR_3 ; ) ( get . project = project . in ; STRING_1 = VAR_2 ; VAR_1 = branch . in ; ) ( TYPE_1 new = in TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { VAR_1 . METHOD_2 ( info . branch ( ) ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 . query ( info . METHOD_5 ( ) , info . status ( ) , info . branch ( ) , info . topic ( ) ) ) ) ; } } ; ) ) ) ) ( topic . info , ) ( branch . info , ) ( status . info , ) ( METHOD_5 . info ( query . TYPE_3 ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 ; ) ) ( branch . info ( METHOD_2 . VAR_1 { ) info ChangeInfo . TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . to ( VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_9 ( VAR_10 ) . METHOD_9 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_10 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_10 . ) VAR_12 ( METHOD_10 . ) VAR_11 ( METHOD_9 . ) VAR_10 ( METHOD_9 . ) VAR_9 ( to . ) VAR_4 , VAR_8 , VAR_7 ( to . ) VAR_2 , STRING_2 ( METHOD_8 . ) VAR_6 ( assertThat ; ) VAR_5 , VAR_4 , STRING_1 , VAR_2 ( METHOD_7 ; ) VAR_3 ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static void codemirror ( final java.lang.String token , final TYPE_1 base , final TYPE_2 . Key id , final TYPE_3 VAR_1 , final int line ) { TYPE_4 . METHOD_1 ( new TYPE_5 ( token ) { public void onSuccess ( ) { TYPE_6 . display ( token , new TYPE_7 ( base , TYPE_1 . patchSet ( id . getParentKey ( ) ) , id . get ( ) , VAR_1 , line ) ) ; } } ) ; } } ; ) } } ; ) ) line , VAR_1 , ) ( get . id , ) ) ( getParentKey . id ( patchSet . TYPE_1 , base ( TYPE_7 new , token ( display . TYPE_6 { ) ( onSuccess void public { ) token ( TYPE_5 new ( METHOD_1 . TYPE_4 { ) line int final , VAR_1 TYPE_3 final , id Key . TYPE_2 final , base TYPE_1 final , token java.lang.String final ( codemirror void static private 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( new TYPE_3 ( ) ) ; modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ; modules.add ( new TYPE_5 ( ) ) ; return VAR_1 . METHOD_3 ( modules ) ; } } ; ) modules ( METHOD_3 . VAR_1 return ; ) ) ( TYPE_5 new ( modules.add ; ) ) ) class VAR_4 ( METHOD_2 . VAR_1 , ) class VAR_3 ( METHOD_2 . VAR_1 , false ( TYPE_4 new ( modules.add ; ) ) ( TYPE_3 new ( modules.add ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( modules.add ; ) ( > < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_2 ( ) ; } if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( false ) ; TYPE_2 . get ( ) . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( ) { for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_3 . METHOD_6 ( ) ; } } } ) ; } } ; ) } } } ; ) ( METHOD_6 . VAR_3 { ) VAR_4 : VAR_3 TYPE_4 ( for { ) ( METHOD_5 void public { ) ( TYPE_3 new ( METHOD_4 . ) ( get . TYPE_2 ; ) false ( METHOD_3 . TYPE_1 } ; ) ( METHOD_2 . VAR_2 { ) null = ! ) VAR_2 ( ( if } ; ) ( METHOD_2 . VAR_1 { ) null = ! ) VAR_1 ( ( if ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
public java.lang.String toString ( ) { if ( METHOD_1 ( ) ) { return ( ( ( ( ( STRING_1 + ( error ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; } else { return ( ( ( STRING_5 + ( VAR_3 ) ) + STRING_6 ) + ( VAR_4 ) ) + STRING_4 ; } } } } ; STRING_4 + ) ) VAR_4 ( + ) STRING_6 + ) ) VAR_3 ( + STRING_5 ( ( ( return { else } ; STRING_4 + ) ) VAR_2 ( + ) STRING_3 + ) ) VAR_1 ( + ) STRING_2 + ) ) error ( + STRING_1 ( ( ( ( ( return { ) ) ( METHOD_1 ( if { ) ( toString java.lang.String public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo ) ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i < = INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } } } ; ) change , VAR_1 ( METHOD_4 ; ) ) i - INT_2 ( , 0 ( METHOD_5 . key = VAR_1 java.lang.String { ) ++ i ; INT_1 = < i ; 0 = i int ( for ; ) STRING_2 ( METHOD_4 ; ) ( get . ) ( getKey . change = key java.lang.String ; ) ) repo ( METHOD_3 ( insert = change com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ; METHOD_5 ( VAR_1 , n ) ; assertEquals ( ( STRING_4 + ( ( STRING_5 + STRING_6 ) + STRING_7 ) ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) ) STRING_7 + ) STRING_6 + STRING_5 ( ( + STRING_4 ( ( assertEquals ; ) n , VAR_1 ( METHOD_5 ; ) ) ) STRING_3 , STRING_2 ( TYPE_3 new ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 = n TYPE_1 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( METHOD_7 ( ) , getRevision ( ) , METHOD_8 ( ) ) ) ; VAR_1 . METHOD_9 ( TYPE_5 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_10 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_10 . java.util.Collections return ; ) ) ( METHOD_4 . TYPE_5 ( METHOD_9 . VAR_1 ; ) ) ) ( METHOD_8 , ) ( getRevision , ) ( METHOD_7 ( METHOD_6 . TYPE_4 ( METHOD_5 . VAR_1 ; ) ) ) ( METHOD_4 . TYPE_3 ( METHOD_3 . ) ( TYPE_2 new ( METHOD_2 . VAR_1 ; ) ( TYPE_1 new = VAR_1 TYPE_1 { ) ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) { VAR_1 . add ( METHOD_2 ( VAR_2 , admin , STRING_1 , 1 ) ) ; TYPE_1 VAR_3 = user ( VAR_4 ) ; TYPE_1 VAR_5 = user ( VAR_4 , admin ) ; METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ; METHOD_5 ( STRING_3 , VAR_5 . METHOD_4 ( ) ) ; } } ; ) ) ( METHOD_4 . VAR_5 , STRING_3 ( METHOD_5 ; ) ) ( METHOD_4 . VAR_3 , STRING_2 ( METHOD_3 ; ) admin , VAR_4 ( user = VAR_5 TYPE_1 ; ) VAR_4 ( user = VAR_3 TYPE_1 ; ) ) 1 , STRING_1 , admin , VAR_2 ( METHOD_2 ( add . VAR_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } org.junit.Assert.assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ; } } ; ) VAR_1 , ) STRING_1 ( of . TYPE_3 ( org.junit.Assert.assertEquals } ; ) ) ( getName . label ( add . VAR_1 { ) ) ( METHOD_3 . ) ( METHOD_3 : label TYPE_2 ( for ; ) ( METHOD_2 . TYPE_1 = VAR_1 > java.lang.String < java.util.List { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_2 VAR_1 ) { METHOD_2 ( ) ; VAR_2 = VAR_1 ; change = c ; try { METHOD_3 ( ) ; return TYPE_3 . create ( c , VAR_3 ) ; } finally { if ( ( rw ) ! = null ) { rw . METHOD_4 ( ) ; } if ( ( repo ) ! = null ) { repo . close ( ) ; } } } } } } ; ) ( close . repo { ) null = ! ) repo ( ( if } ; ) ( METHOD_4 . rw { ) null = ! ) rw ( ( if { finally } ; ) VAR_3 , c ( create . TYPE_3 return ; ) ( METHOD_3 { try ; c = change ; VAR_1 = VAR_2 ; ) ( METHOD_2 { ) VAR_1 TYPE_2 , c com.google.gerrit.reviewdb.client.Change ( METHOD_1 Result . TYPE_1 public 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_6 ctl = rsrc . METHOD_1 ( ) ; if ( ! ( ctl . METHOD_2 ( ) ) ) { VAR_1 . user ( user ) . METHOD_3 ( VAR_2 ) ; } VAR_3 . index ( db . get ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . TYPE_1 return ; ) ) ( getChange . rsrc , ) ( get . db ( index . VAR_3 } ; ) VAR_2 ( METHOD_3 . ) user ( user . VAR_1 { ) ) ) ( METHOD_2 . ctl ( ! ( if ; ) ( METHOD_1 . rsrc = ctl TYPE_6 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > ? < TYPE_1 public 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ; for ( final TYPE_1 p : result ) { r . add ( new TYPE_2 ( p ) ) ; } VAR_1 . METHOD_1 ( req , new TYPE_3 ( r ) ) ; } } ; ) ) r ( TYPE_3 new , req ( METHOD_1 . VAR_1 } ; ) ) p ( TYPE_2 new ( add . r { ) result : p TYPE_1 final ( for ; ) ) ( size . result ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.ArrayList final { ) result > TYPE_1 < java.util.List final ( onSuccess void public 
public TYPE_1 get ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2 = METHOD_1 ( VAR_1 ) ; if ( VAR_2 ! = null ) { TYPE_1 VAR_3 = new TYPE_1 ( config ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; return VAR_3 ; } else { return null ; } } catch ( java.io.IOException e ) { VAR_4 . error ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , e ) ; return null ; } } } } ; null return ; ) e , ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( error . VAR_4 { ) e java.io.IOException ( catch } } ; null return { else } ; VAR_3 return ; ) VAR_2 ( METHOD_2 . VAR_3 ; ) config ( TYPE_1 new = VAR_3 TYPE_1 { ) null = ! VAR_2 ( if ; ) VAR_1 ( METHOD_1 = VAR_2 TYPE_2 { try { ) VAR_1 java.lang.String ( get TYPE_1 public 
public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > VAR_1 = new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return METHOD_2 ( ) . METHOD_3 ( input , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ; return TYPE_3 . METHOD_4 ( patchSets ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . ) VAR_1 ( METHOD_5 . ) ) ( patchSets ( METHOD_4 . TYPE_3 return ; } } } ; false return { ) e com.google.gwtorm.server.OrmException ( catch } ; ) db , input ( METHOD_3 . ) ( METHOD_2 return { try { ) input com.google.gerrit.reviewdb.client.PatchSet ( apply boolean public { ) ( > com.google.gerrit.reviewdb.client.PatchSet < TYPE_2 new = VAR_1 > com.google.gerrit.reviewdb.client.PatchSet < TYPE_2 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > com.google.gerrit.reviewdb.client.PatchSet < TYPE_1 public 
private boolean METHOD_1 ( final TYPE_1 id ) { if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) { return METHOD_4 ( ) ; } if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) { return true ; } for ( final TYPE_2 t : VAR_1 ) { if ( t . METHOD_5 ( id ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) id ( METHOD_5 . t ( if { ) VAR_1 : t TYPE_2 final ( for } ; true return { ) ) STRING_2 ( METHOD_3 . ) ( METHOD_2 . id ( if } ; ) ( METHOD_4 return { ) ) STRING_1 ( METHOD_3 . ) ( METHOD_2 . id ( if { ) id TYPE_1 final ( METHOD_1 boolean private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_5 ( VAR_12 ) ; } } ; ) VAR_12 ( METHOD_5 . ) VAR_11 ( METHOD_5 . ) VAR_10 ( METHOD_6 . ) VAR_9 , VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_2 ( to . ) VAR_5 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 < TYPE_2 > get ( java.lang.String p , TYPE_3 < TYPE_1 < TYPE_2 > > m ) { TYPE_1 < TYPE_2 > r = m . get ( p ) ; if ( r == null ) { r = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) ; } return r ; } } ; r return } ; ) ( METHOD_2 . ) ( METHOD_1 . TYPE_1 = r { ) null == r ( if ; ) p ( get . m = r > TYPE_2 < TYPE_1 { ) m > > TYPE_2 < TYPE_1 < TYPE_3 , p java.lang.String ( get > TYPE_2 < TYPE_1 private 
private static java.lang.String METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; if ( VAR_1 ! = null ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : case VAR_4 : return STRING_2 ; case VAR_5 : case VAR_6 : return STRING_3 ; default : return null ; } } } return null ; } } ; null return } } } ; null return : default ; STRING_3 return : VAR_6 case : VAR_5 case ; STRING_2 return : VAR_4 case : VAR_3 case ; STRING_1 return : VAR_2 case { ) VAR_1 ( switch { ) null = ! VAR_1 ( if ; ) ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . TYPE_1 = VAR_1 TYPE_2 { ) ) ( METHOD_2 . TYPE_1 ( if { ) ( METHOD_1 java.lang.String static private 
private void METHOD_1 ( final TYPE_1 id , java.util.List < TYPE_2 > VAR_1 , final java.lang.String VAR_2 ) throws TYPE_3 { final java.lang.String message = ( ( id . name ( ) ) + STRING_1 ) + VAR_2 ; if ( VAR_3 ) { VAR_1 . add ( new TYPE_2 ( message , true ) ) ; throw new TYPE_3 ( STRING_2 , VAR_1 ) ; } else { VAR_1 . add ( new TYPE_2 ( ( STRING_3 + message ) , false ) ) ; } } } } ; ) ) false , ) message + STRING_3 ( ( TYPE_2 new ( add . VAR_1 { else } ; ) VAR_1 , STRING_2 ( TYPE_3 new throw ; ) ) true , message ( TYPE_2 new ( add . VAR_1 { ) VAR_3 ( if ; VAR_2 + ) STRING_1 + ) ) ( name . id ( ( = message java.lang.String final { TYPE_3 throws ) VAR_2 java.lang.String final , VAR_1 > TYPE_2 < java.util.List , id TYPE_1 final ( METHOD_1 void private 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ; } } } } ; ) } } ; ) ( METHOD_7 . VAR_2 ; ) true ( METHOD_6 . VAR_2 ; ) ( METHOD_5 . event { ) event TYPE_4 final ( METHOD_4 void public { ) ) ( METHOD_3 . TYPE_3 , CHAR_1 , 0 ( TYPE_2 new ( METHOD_2 . TYPE_1 = VAR_1 { ) null == ) VAR_1 ( ( if ; ) ( METHOD_1 . super { ) ( METHOD_1 void protected 
public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; while ( VAR_2 . METHOD_5 ( ) ) { VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) ) VAR_2 ( TYPE_1 new ( add . VAR_4 { ) ) ( METHOD_5 . VAR_2 ( while ; ) ( > < java.util.ArrayList new = VAR_4 > TYPE_1 < java.util.List ; ) VAR_1 ( METHOD_4 . VAR_2 ; ) ) ( METHOD_3 . revision ( METHOD_2 . VAR_2 ; ) VAR_3 ( TYPE_2 new = VAR_2 TYPE_2 { java.io.IOException throws ) VAR_1 boolean ( METHOD_1 > TYPE_1 < java.util.List public 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = repo . commit ( ) . create ( ) ; org.eclipse.jgit.revwalk.RevCommit master = repo . commit ( ) . METHOD_2 ( VAR_1 ) . create ( ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_3 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_3 ( master ) ) ; } } ; ) ) master ( METHOD_3 , ) 2 + ) VAR_2 ( ( ( org.junit.Assert.assertEquals ; ) ) VAR_1 ( METHOD_3 , ) 1 + ) VAR_2 ( ( ( org.junit.Assert.assertEquals ; ) ( create . ) VAR_1 ( METHOD_2 . ) ( commit . repo = master org.eclipse.jgit.revwalk.RevCommit ; ) ( create . ) ( commit . repo = VAR_1 org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 . getValue ( ) ) ; if ( VAR_3 . equals ( VAR_4 ) ) { VAR_1 . METHOD_2 ( VAR_5 ) ; } else if ( ( query ) == null ) { VAR_1 . run ( ) ; query = VAR_1 ; } } } } ; VAR_1 = query ; ) ( run . VAR_1 { ) null == ) query ( ( if else } ; ) VAR_5 ( METHOD_2 . VAR_1 { ) ) VAR_4 ( equals . VAR_3 ( if ; ) ) ( getValue . VAR_2 ( TYPE_2 new = VAR_1 TYPE_2 { ) event TYPE_1 ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository repo ) { return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; } } ; ) ) ) VAR_6 ( TYPE_12 new , ) VAR_7 ( TYPE_11 new , ) VAR_6 , repo , VAR_1 ( TYPE_10 new , ) VAR_2 , VAR_5 , VAR_4 , VAR_1 ( TYPE_9 new , ) VAR_1 ( TYPE_8 new , ) VAR_4 , VAR_1 ( TYPE_7 new , ) VAR_3 , VAR_1 ( TYPE_6 new , ) VAR_1 ( TYPE_5 new ( of . TYPE_4 ( TYPE_1 new return { ) repo org.eclipse.jgit.lib.Repository , VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
void METHOD_1 ( TYPE_1 result , java.lang.String VAR_1 , java.lang.String [ ] args ) { final TYPE_2 ctx = VAR_2 . get ( ) ; final java.lang.String VAR_3 = METHOD_2 ( ctx ) ; final long VAR_4 = METHOD_3 ( ctx ) ; final java.lang.String VAR_5 = METHOD_4 ( VAR_1 , args ) ; VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , METHOD_6 ( ctx ) , ( STRING_1 + VAR_5 ) , VAR_4 , TYPE_4 . METHOD_7 ( args ) , result ) ) ; } } ; ) ) result , ) args ( METHOD_7 . TYPE_4 , VAR_4 , ) VAR_5 + STRING_1 ( , ) ctx ( METHOD_6 , VAR_3 ( TYPE_3 new ( METHOD_5 . VAR_6 ; ) args , VAR_1 ( METHOD_4 = VAR_5 java.lang.String final ; ) ctx ( METHOD_3 = VAR_4 long final ; ) ctx ( METHOD_2 = VAR_3 java.lang.String final ; ) ( get . VAR_2 = ctx TYPE_2 final { ) args ] [ java.lang.String , VAR_1 java.lang.String , result TYPE_1 ( METHOD_1 void 
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) ! = 1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 < TYPE_2 > ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( > TYPE_2 < TYPE_5 new return } ; ) STRING_1 ( TYPE_4 new throw { ) 1 = ! ) ) ( size . VAR_1 ( ( if { ) VAR_1 > > TYPE_2 < TYPE_1 extends ? < TYPE_3 final ( METHOD_1 > TYPE_2 < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ; org.junit.Assert.assertEquals ( ( ( STRING_4 + ( VAR_1 . name ( ) ) ) + STRING_5 ) , METHOD_3 ( STRING_6 , STRING_7 ) ) ; } } ; ) ) STRING_7 , STRING_6 ( METHOD_3 , ) STRING_5 + ) ) ) ( name . VAR_1 ( + STRING_4 ( ( ( org.junit.Assert.assertEquals ; ) ( create . ) VAR_1 , STRING_3 ( add . ) ( commit . ) STRING_2 ( branch . repo ; ) STRING_1 ( METHOD_2 . repo = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { TYPE_2 result = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_3 . METHOD_6 ( VAR_2 ) , result . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . result , ) VAR_2 ( METHOD_6 . TYPE_3 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_5 . VAR_1 , ) ( METHOD_4 . VAR_1 , ) ( METHOD_3 . VAR_1 ( METHOD_2 . VAR_3 = result TYPE_2 { java.lang.Exception throws ) VAR_2 ... java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
public final TYPE_1 < TYPE_2 . Result > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_3 VAR_1 ) { return VAR_1 . submit ( new TYPE_4 < TYPE_2 . Result > ( ) { public TYPE_2 . Result METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { return METHOD_4 ( db , id ) ; } } } ) ; } } ; ) } } } ; ) id , db ( METHOD_4 return { ) ) ( METHOD_3 . VAR_2 = db com.google.gerrit.reviewdb.server.ReviewDb ( try { java.lang.Exception throws ) ( METHOD_2 Result . TYPE_2 public { ) ( > Result . TYPE_2 < TYPE_4 new ( submit . VAR_1 return { ) VAR_1 TYPE_3 , id Id . com.google.gerrit.reviewdb.client.Change final ( METHOD_1 > Result . TYPE_2 < TYPE_1 final public 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; rpc ( VAR_8 class ) ; } } ; ) class VAR_8 ( rpc ; ) class VAR_7 ( rpc ; ) class VAR_6 ( rpc ; ) } } ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_2 void protected { ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null , null ) ; java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_1 ) ; } } ; ) STRING_1 ( METHOD_5 . ) ) m ( METHOD_4 . TYPE_4 ( com.google.common.truth.Truth.assertThat ; ) VAR_3 , c , repo ( METHOD_3 . VAR_1 = m > TYPE_3 < java.util.List ; ) null , null , null , ) VAR_2 ( TYPE_2 new , null ( TYPE_1 new = VAR_1 TYPE_1 ; ) ( METHOD_2 = c org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( changeId . get ( ) , revision ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . get ( new TYPE_3 < TYPE_4 < TYPE_5 > > ( ) { public void onSuccess ( TYPE_4 < TYPE_5 > VAR_2 ) { VAR_2 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_3 , VAR_2 ) ; } } ) ; } } ; ) } } ; ) VAR_2 , VAR_3 ( METHOD_5 ; ) STRING_1 ( METHOD_4 . VAR_2 { ) VAR_2 > TYPE_5 < TYPE_4 ( onSuccess void public { ) ( > > TYPE_5 < TYPE_4 < TYPE_3 new ( get . VAR_1 ; ) ( METHOD_3 . VAR_1 ; ) revision , ) ( get . changeId ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void 
public TYPE_1 < TYPE_2 > delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } return TYPE_3 . METHOD_3 ( null ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_4 ( catch } ; ) null ( METHOD_3 . TYPE_3 return } ; ) VAR_2 ( commit ; ) id ( METHOD_2 . VAR_2 { else } ; ) VAR_1 ( commit ; ) id ( METHOD_2 . VAR_1 { ) ) ( METHOD_1 . ) ( getStatus . ) ( getChange . cd ( if { try ; ) ( toString . ) ( getId . cd = id java.lang.String { java.io.IOException throws ) cd com.google.gerrit.server.query.change.ChangeData ( delete > TYPE_2 < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) . add ( STRING_1 , STRING_2 ) . message ( STRING_3 ) . create ( ) ; java.lang.String VAR_2 = getChangeId ( VAR_1 ) ; org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) . add ( STRING_4 , STRING_5 ) . message ( STRING_6 ) . create ( ) ; java.lang.String VAR_4 = getChangeId ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_5 , STRING_7 , false ) ; METHOD_4 ( VAR_2 , VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_4 , VAR_2 ) ; } } ; ) VAR_2 , VAR_4 , VAR_4 ( METHOD_4 ; ) VAR_2 , VAR_2 ( METHOD_4 ; ) false , STRING_7 , VAR_5 ( METHOD_3 . TYPE_1 ; ) VAR_3 ( getChangeId = VAR_4 java.lang.String ; ) ( create . ) STRING_6 ( message . ) STRING_5 , STRING_4 ( add . ) ( METHOD_2 = VAR_3 org.eclipse.jgit.revwalk.RevCommit ; ) VAR_1 ( getChangeId = VAR_2 java.lang.String ; ) ( create . ) STRING_3 ( message . ) STRING_2 , STRING_1 ( add . ) ( METHOD_2 = VAR_1 org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( 1 ) , 2 ) ; assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ; final TYPE_1 VAR_2 = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ; VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ; assertEquals ( VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 ( assertEquals ; ) ) ( toString . VAR_1 ( METHOD_2 . VAR_2 ; ) 0 , ) 0 ( TYPE_2 new ( TYPE_1 new = VAR_2 TYPE_1 final ; ) ) ( toString . VAR_1 , STRING_1 ( assertEquals ; ) 2 , ) 1 ( TYPE_2 new ( TYPE_1 new = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
public com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( final TYPE_1 . Id key ) { final TYPE_1 . NameKey name = new TYPE_1 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ; final com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = new com.google.gerrit.reviewdb.client . AccountGroup ( name , key , null ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; } } ; VAR_1 return ; ) VAR_2 ( METHOD_2 . VAR_1 ; ) null , key , name ( AccountGroup . com.google.gerrit.reviewdb.client new = VAR_1 AccountGroup . com.google.gerrit.reviewdb.client final ; ) ) ) ) ( toString . key ( + STRING_1 ( ( NameKey . TYPE_1 new = name NameKey . TYPE_1 final { ) key Id . TYPE_1 final ( METHOD_1 AccountGroup . com.google.gerrit.reviewdb.client public 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_2 ) + STRING_5 ) ) , METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) ; } } ; ) ) ) ) STRING_4 + ) STRING_3 + STRING_2 ( ( + STRING_1 ( ( METHOD_2 , ) ) STRING_5 + ) STRING_2 + ) STRING_4 + ) STRING_3 + STRING_2 ( ( ( ( + STRING_1 ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit a , org.eclipse.jgit.revwalk.RevCommit b ) { if ( ( a . METHOD_2 ( ) ) ! = ( b . METHOD_2 ( ) ) ) { return false ; } for ( int i = 0 ; i < ( a . METHOD_2 ( ) ) ; i ++ ) { if ( ( a . METHOD_3 ( i ) ) ! = ( b . METHOD_3 ( i ) ) ) { return false ; } } return true ; } } ; true return } } ; false return { ) ) ) i ( METHOD_3 . b ( = ! ) ) i ( METHOD_3 . a ( ( if { ) ++ i ; ) ) ( METHOD_2 . a ( < i ; 0 = i int ( for } ; false return { ) ) ) ( METHOD_2 . b ( = ! ) ) ( METHOD_2 . a ( ( if { ) b org.eclipse.jgit.revwalk.RevCommit , a org.eclipse.jgit.revwalk.RevCommit ( METHOD_1 boolean static 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; if ( VAR_4 . METHOD_4 ( VAR_1 ) ) { VAR_3 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_1 ) ) ; } METHOD_7 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; } } ; ) VAR_2 ( close . VAR_3 ; ) VAR_1 ( METHOD_7 } ; ) ) VAR_1 ( METHOD_6 . VAR_4 , STRING_2 ( METHOD_5 . VAR_3 { ) ) VAR_1 ( METHOD_4 . VAR_4 ( if ; ) VAR_2 ( METHOD_3 . VAR_3 ; ) ) ( METHOD_2 . VAR_1 ( + STRING_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 class ) ; VAR_5 = TYPE_3 . METHOD_4 ( VAR_1 ) ; VAR_6 = TYPE_3 . METHOD_5 ( VAR_1 ) ; VAR_7 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_8 class ) ) ; VAR_9 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_10 class ) ) ; } } ; ) ) class VAR_10 , VAR_1 ( METHOD_7 . TYPE_2 ( METHOD_6 . VAR_9 ; ) ) class VAR_8 , VAR_1 ( METHOD_7 . TYPE_2 ( METHOD_6 . VAR_7 ; ) VAR_1 ( METHOD_5 . TYPE_3 = VAR_6 ; ) VAR_1 ( METHOD_4 . TYPE_3 = VAR_5 ; ) class VAR_4 ( METHOD_3 . VAR_1 = VAR_3 ; ) VAR_1 ( METHOD_2 . TYPE_2 = VAR_2 { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = table . METHOD_2 ( ) ; final int VAR_2 = table . METHOD_3 ( ) ; for ( int row = 0 ; row < VAR_2 ; row ++ ) { if ( ( METHOD_4 ( row ) ) ! = null ) { table . METHOD_5 ( row , VAR_3 ) ; } } } } } } ; ) VAR_3 , row ( METHOD_5 . table { ) null = ! ) ) row ( METHOD_4 ( ( if { ) ++ row ; VAR_2 < row ; 0 = row int ( for ; ) ( METHOD_3 . table = VAR_2 int final ; ) ( METHOD_2 . table = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( VAR_1 ) ; add ( VAR_2 ) ; VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . get ( ) ) ) ) ; display ( ) ; } } ; ) ( display ; ) ) ) ) ( get . ) ( METHOD_3 ( + STRING_1 ( ( METHOD_2 . VAR_1 ; ) VAR_2 ( add ; ) VAR_1 ( add . VAR_2 ; ) ( TYPE_2 new = VAR_2 TYPE_2 ; ) ( TYPE_1 new = VAR_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void protected 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 ! = null ) { TYPE_1 a = VAR_2 . get ( VAR_1 . getName ( ) ) ; if ( VAR_3 . contains ( a ) ) { VAR_2 . METHOD_1 ( a ) ; } else { a . METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) ; } } } } } } ; ) ) ( > TYPE_2 < java.util.ArrayList new ( METHOD_2 . a { else } ; ) a ( METHOD_1 . VAR_2 { ) ) a ( contains . VAR_3 ( if ; ) ) ( getName . VAR_1 ( get . VAR_2 = a TYPE_1 { ) null = ! VAR_1 ( if { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { TYPE_1 < com.google.gerrit.reviewdb.client.Change > changes = null ; try { changes = db . changes ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException VAR_1 ) { } METHOD_4 ( changes ) ; db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ; } } ; ) ) ) ( METHOD_3 . project ( METHOD_2 . ) ( METHOD_5 . db ( delete . ) ( METHOD_5 . db ; ) changes ( METHOD_4 } { ) VAR_1 com.google.gwtorm.server.OrmException ( catch } ; ) ) ( METHOD_3 . project ( METHOD_2 . ) ( changes . db = changes { try ; null = changes > com.google.gerrit.reviewdb.client.Change < TYPE_1 { com.google.gwtorm.server.OrmException throws ) project com.google.gerrit.reviewdb.client.Project ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null ) , new TYPE_6 ( null ) ) ; } } ; ) ) null ( TYPE_6 new , ) null ( TYPE_5 new , null , VAR_2 ( TYPE_4 new = VAR_4 ; ) VAR_2 ( TYPE_3 new = VAR_3 ; ) index ( METHOD_2 . VAR_2 ; ) ( TYPE_2 new = VAR_2 ; ) VAR_1 ( TYPE_1 new = index ; ) ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null , VAR_2 ) ) ; } } ; ) ) VAR_2 , null ( TYPE_5 new , VAR_2 ( TYPE_4 new = VAR_4 ; ) VAR_2 ( TYPE_3 new = VAR_3 ; ) index ( METHOD_2 . VAR_2 ; ) ( TYPE_2 new = VAR_2 ; ) VAR_1 ( TYPE_1 new = index { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_2 , STRING_3 ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_4 , STRING_5 ) ; assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) ; assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . ) ) VAR_2 , VAR_3 ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 , STRING_7 ( assertEquals ; ) ) ( METHOD_5 . ) ) VAR_3 , VAR_2 ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 , STRING_6 ( assertEquals ; ) STRING_5 , STRING_4 ( TYPE_3 new = VAR_3 TYPE_3 ; ) STRING_3 , STRING_2 ( TYPE_3 new = VAR_2 TYPE_3 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ; assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ; assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ; } } ; ) ) ( toString . ) STRING_8 , STRING_7 ( METHOD_2 . TYPE_1 , STRING_6 ( assertEquals ; ) ) ( toString . ) STRING_5 , STRING_2 ( METHOD_2 . TYPE_1 , STRING_4 ( assertEquals ; ) ) ( toString . ) STRING_3 , STRING_2 ( METHOD_2 . TYPE_1 , STRING_1 ( assertEquals { ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_2 ( true ) ; VAR_1 = null ; } if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; } for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_4 ( ) ; } VAR_4 . METHOD_5 ( ) ; super . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . super ; ) ( METHOD_5 . VAR_4 } ; ) ( METHOD_4 . VAR_3 { ) VAR_4 : VAR_3 TYPE_1 ( for } ; null = VAR_2 ; ) ( METHOD_3 . VAR_2 { ) null = ! ) VAR_2 ( ( if } ; null = VAR_1 ; ) true ( METHOD_2 . VAR_1 { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void protected 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 VAR_1 , org.eclipse.jgit.revwalk.RevCommit edit , com.google.gerrit.reviewdb.client.PatchSet VAR_2 ) throws TYPE_2 , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit VAR_3 = rw . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_2 . getRevision ( ) . get ( ) ) ) ; if ( VAR_3 . METHOD_3 ( ) . equals ( edit . METHOD_3 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3 . METHOD_4 ( rw , VAR_1 , VAR_3 , edit ) ; } } ; ) edit , VAR_3 , VAR_1 , rw ( METHOD_4 . TYPE_3 return } ; ) STRING_1 ( TYPE_2 new throw { ) ) ) ( METHOD_3 . edit ( equals . ) ( METHOD_3 . VAR_3 ( if ; ) ) ) ( get . ) ( getRevision . VAR_2 ( METHOD_2 . org.eclipse.jgit.lib.ObjectId ( parseCommit . rw = VAR_3 org.eclipse.jgit.revwalk.RevCommit { java.io.IOException , TYPE_2 throws ) VAR_2 com.google.gerrit.reviewdb.client.PatchSet , edit org.eclipse.jgit.revwalk.RevCommit , VAR_1 TYPE_1 , rw org.eclipse.jgit.revwalk.RevWalk , repo org.eclipse.jgit.lib.Repository ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit private 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = TYPE_6 . get ( VAR_1 ) ; TYPE_7 VAR_5 = VAR_4 . getProject ( ) . METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( VAR_6 [ VAR_5 . METHOD_6 ( ) ] , VAR_7 ) ) ) { return VAR_1 . METHOD_7 ( ) ; } return VAR_8 ; } } ; VAR_8 return } ; ) ( METHOD_7 . VAR_1 return { ) ) ) VAR_7 , ] ) ( METHOD_6 . VAR_5 [ VAR_6 ( METHOD_5 . VAR_2 ( ! ( if ; ) ( METHOD_4 . ) ( getProject . VAR_4 = VAR_5 TYPE_7 ; ) VAR_1 ( get . TYPE_6 = VAR_4 TYPE_5 ; ) ( METHOD_3 . VAR_3 = VAR_2 TYPE_4 ; ) ( METHOD_2 . VAR_1 { TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { try { METHOD_2 ( req , rsp ) ; } catch ( java.lang.Exception e ) { METHOD_3 ( ) . log ( STRING_1 , e ) ; METHOD_4 ( rsp , false ) ; } } } } ; ) false , rsp ( METHOD_4 ; ) e , STRING_1 ( log . ) ( METHOD_3 { ) e java.lang.Exception ( catch } ; ) rsp , req ( METHOD_2 { try { java.io.IOException throws ) rsp HttpServletResponse . TYPE_2 final , req TYPE_1 final ( METHOD_1 void public 
public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2 . values ( ) ; } else { java.util.ArrayList < TYPE_2 > plugins = new java.util.ArrayList < TYPE_2 > ( VAR_2 . values ( ) ) ; plugins . METHOD_2 ( VAR_3 . values ( ) ) ; return plugins ; } } } } ; plugins return ; ) ) ( values . VAR_3 ( METHOD_2 . plugins ; ) ) ( values . VAR_2 ( > TYPE_2 < java.util.ArrayList new = plugins > TYPE_2 < java.util.ArrayList { else } ; ) ( values . VAR_2 return { ) VAR_1 ! ( if { ) VAR_1 boolean ( METHOD_1 > TYPE_2 < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 ) ; METHOD_4 ( STRING_5 , VAR_3 ) ; METHOD_4 ( STRING_6 , VAR_4 ) ; } } ; ) VAR_4 , STRING_6 ( METHOD_4 ; ) VAR_3 , STRING_5 ( METHOD_4 ; ) STRING_4 ( METHOD_4 ; ) STRING_3 ( METHOD_4 ; ) ) null , null , null , null , VAR_2 ( METHOD_3 ( insert = VAR_4 com.google.gerrit.reviewdb.client.Change ; ) ) null , null , null , null , VAR_1 ( METHOD_3 ( insert = VAR_3 com.google.gerrit.reviewdb.client.Change ; ) STRING_2 ( METHOD_2 = VAR_2 > TYPE_2 < TYPE_1 ; ) STRING_1 ( METHOD_2 = VAR_1 > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 me , TYPE_2 VAR_1 , org.eclipse.jgit.revwalk.RevCommit VAR_2 , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.lib.ObjectId VAR_3 ) throws java.io.IOException { TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( base ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( METHOD_7 ( me ) ) ; VAR_4 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ; return VAR_1 . insert ( VAR_4 ) ; } } ; ) VAR_4 ( insert . VAR_1 return ; ) ) ( METHOD_9 . VAR_2 ( METHOD_8 . VAR_4 ; ) ) me ( METHOD_7 ( METHOD_6 . VAR_4 ; ) ) ( METHOD_5 . VAR_2 ( METHOD_4 . VAR_4 ; ) base ( METHOD_3 . VAR_4 ; ) VAR_3 ( METHOD_2 . VAR_4 ; ) ( TYPE_3 new = VAR_4 TYPE_3 { java.io.IOException throws ) VAR_3 org.eclipse.jgit.lib.ObjectId , base org.eclipse.jgit.revwalk.RevCommit , VAR_2 org.eclipse.jgit.revwalk.RevCommit , VAR_1 TYPE_2 , me TYPE_1 ( METHOD_1 org.eclipse.jgit.lib.ObjectId private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ; } } ; ) STRING_6 , STRING_1 , ) STRING_5 + ) VAR_4 ( ( , ) STRING_4 + ) VAR_4 ( ( , ) STRING_5 + ) VAR_3 ( ( , ) STRING_4 + ) VAR_3 ( ( , STRING_3 ( METHOD_5 ; ) user ( METHOD_4 ; ) STRING_2 , VAR_2 , VAR_1 ( METHOD_3 ; ) STRING_1 , VAR_2 , VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( db , change . change ( ) ) ; if ( VAR_1 ) { com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . isEmpty ( ) ; } else { com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . METHOD_4 ( ) ; } METHOD_5 ( ( ( FLOAT_1 / ( VAR_4 ) ) / ( VAR_5 ) ) ) ; } } ; ) ) ) VAR_5 ( / ) ) VAR_4 ( / FLOAT_1 ( ( ( METHOD_5 } ; ) ( METHOD_4 . ) ) VAR_2 ( METHOD_3 . submit ( com.google.common.truth.Truth.assertThat { else } ; ) ( isEmpty . ) ) VAR_2 ( METHOD_3 . submit ( com.google.common.truth.Truth.assertThat { ) VAR_1 ( if ; ) ) ( change . change , db ( METHOD_2 . VAR_3 = VAR_2 TYPE_3 { TYPE_2 , TYPE_1 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_1 boolean , change com.google.gerrit.server.query.change.ChangeData ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_2 user ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return VAR_2 ; } java.lang.String id = TYPE_3 . METHOD_3 ( user . METHOD_4 ( ) . METHOD_5 ( ) ) ; if ( id == null ) { return VAR_2 ; } try { return new TYPE_4 ( VAR_3 . get ( id ) ) ; } catch ( TYPE_5 e ) { VAR_4 . METHOD_6 ( java.lang.String.format ( STRING_1 , id ) , e ) ; return VAR_2 ; } } } } ; VAR_2 return ; ) e , ) id , STRING_1 ( java.lang.String.format ( METHOD_6 . VAR_4 { ) e TYPE_5 ( catch } ; ) ) id ( get . VAR_3 ( TYPE_4 new return { try } ; VAR_2 return { ) null == id ( if ; ) ) ( METHOD_5 . ) ( METHOD_4 . user ( METHOD_3 . TYPE_3 = id java.lang.String } ; VAR_2 return { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { ) user TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { try { VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_1 , e ) ; } try { VAR_3 . close ( true ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_2 , e ) ; } try { VAR_4 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } } } ; ) e , STRING_3 ( METHOD_2 . VAR_2 { ) e java.io.IOException ( catch } ; ) ( close . VAR_4 { try } ; ) e , STRING_2 ( METHOD_2 . VAR_2 { ) e java.io.IOException ( catch } ; ) true ( close . VAR_3 { try } ; ) e , STRING_1 ( METHOD_2 . VAR_2 { ) e java.io.IOException ( catch } ; ) ( close . VAR_1 { try { ) ( METHOD_1 void public 
private void METHOD_1 ( ) { java.lang.String topic = VAR_1 . METHOD_2 ( ) ; TYPE_1 . topic ( change.getId ( ) . get ( ) , topic , METHOD_3 ( ) , new TYPE_2 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { VAR_2 = true ; TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) ; METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_5 VAR_3 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_3 ) ; } } ) ; } } ; ) } } ; ) VAR_3 ( METHOD_6 . super ; ) true ( METHOD_7 { ) VAR_3 TYPE_5 final ( METHOD_6 void public } ; ) ( METHOD_5 ; ) ) ) ( change.getId ( METHOD_4 . TYPE_4 ( display . TYPE_3 ; true = VAR_2 { ) result java.lang.String ( onSuccess void public { ) ( > java.lang.String < TYPE_2 new , ) ( METHOD_3 , topic , ) ( get . ) ( change.getId ( topic . TYPE_1 ; ) ( METHOD_2 . VAR_1 = topic java.lang.String { ) ( METHOD_1 void private 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; int VAR_3 = TYPE_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_4 ) , VAR_2 ) ; TYPE_4 VAR_5 = TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ; TYPE_5 VAR_6 = TYPE_6 . METHOD_1 ( ) . METHOD_6 ( new TYPE_7 ( VAR_5 , VAR_7 ) ) ; VAR_1 . METHOD_7 ( VAR_6 ) ; VAR_6 . close ( ) ; return TYPE_2 . METHOD_8 ( VAR_5 ) ; } } ; ) VAR_5 ( METHOD_8 . TYPE_2 return ; ) ( close . VAR_6 ; ) VAR_6 ( METHOD_7 . VAR_1 ; ) ) VAR_7 , VAR_5 ( TYPE_7 new ( METHOD_6 . ) ( METHOD_1 . TYPE_6 = VAR_6 TYPE_5 ; ) VAR_2 , VAR_3 ( METHOD_5 . TYPE_2 = VAR_5 TYPE_4 ; ) VAR_2 , ) VAR_4 ( METHOD_2 . TYPE_2 ( METHOD_4 . TYPE_3 = VAR_3 int ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = VAR_2 int { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 TYPE_1 static private 
private void METHOD_1 ( TYPE_1 cm ) { if ( cm . METHOD_2 ( ) ) { TYPE_2 VAR_1 = cm . METHOD_3 ( ) ; cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; cm . METHOD_4 ( VAR_1 , VAR_4 , VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( null ) ; } } } } ; ) null ( METHOD_7 . cm ; ) ) ( METHOD_6 . VAR_3 , VAR_4 , VAR_1 ( METHOD_4 . cm ; ) ) ( METHOD_5 . VAR_3 , VAR_2 , VAR_1 ( METHOD_4 . cm ; ) ( METHOD_3 . cm = VAR_1 TYPE_2 { ) ) ( METHOD_2 . cm ( if { ) cm TYPE_1 ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change = TYPE_3 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ; return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . ) change , ) ( getProject . change , args ( TYPE_1 new return ; ) changeId , STRING_3 , change ( METHOD_5 . TYPE_2 ; ) changeId ( get . ) ( changes . ) db ( METHOD_4 . TYPE_3 = change com.google.gerrit.reviewdb.client.Change ; ) ) STRING_2 + STRING_1 ( , ) ) ) ( METHOD_3 . VAR_1 ( ! ( ( METHOD_2 . TYPE_2 { com.google.gwtorm.server.OrmException throws ) changeId Id . com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } } ; ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_7 . ) VAR_8 ( METHOD_6 . ) VAR_2 , VAR_7 , VAR_6 ( METHOD_6 . ) VAR_5 ( to . ) VAR_4 ( to . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_3 ( assertThat ; ) VAR_2 , VAR_1 ( METHOD_4 ; ) admin ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { if ( ( VAR_1 . get ( ) ) == ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_6 ( STRING_1 ) ; } return VAR_2 . METHOD_2 ( rsrc . METHOD_1 ( ) ) ; } } ; ) ) ( METHOD_1 . rsrc ( METHOD_2 . VAR_2 return } ; ) STRING_1 ( TYPE_6 new throw { ) ) ) ( METHOD_1 . rsrc ( == ) ) ( get . VAR_1 ( ( if { TYPE_5 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > ? < TYPE_1 public 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1 . NameKey name ) { try { return VAR_1 . METHOD_1 ( name ) ; } catch ( TYPE_2 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } } } ; null return ; ) err , ) ) ) ( get . name ( + STRING_1 ( ( METHOD_2 . VAR_2 { ) err TYPE_2 ( catch } ; ) name ( METHOD_1 . VAR_1 return { try { ) name NameKey . TYPE_1 final ( METHOD_1 org.eclipse.jgit.lib.Repository private 
private void METHOD_1 ( TYPE_1 p ) throws java.io.IOException , TYPE_2 { java.lang.String url ; switch ( p ) { case VAR_1 : url = VAR_2 ; break ; case VAR_3 : url = admin . METHOD_2 ( ) ; break ; default : throw new TYPE_3 ( ( STRING_1 + p ) ) ; } git = TYPE_4 . METHOD_3 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ; } } ; ) ) ) ) ( get . project ( + ) STRING_2 + url ( ( ( METHOD_3 . TYPE_4 = git } ; ) ) p + STRING_1 ( ( TYPE_3 new throw : default ; break ; ) ( METHOD_2 . admin = url : VAR_3 case ; break ; VAR_2 = url : VAR_1 case { ) p ( switch ; url java.lang.String { TYPE_2 , java.io.IOException throws ) p TYPE_1 ( METHOD_1 void private 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) { TYPE_2 < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ; return VAR_2 . isEmpty ( ) ? null : VAR_2 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . VAR_2 : null ? ) ( isEmpty . VAR_2 return ; ) file , VAR_1 , ) ( getName . project ( METHOD_2 . VAR_3 = VAR_2 > TYPE_1 < TYPE_2 { ) file java.lang.String , VAR_1 java.lang.String , project com.google.gerrit.reviewdb.client.Project ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) { install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; install ( TYPE_1 . METHOD_3 ( ) ) ; install ( new TYPE_2 ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ; install ( new TYPE_3 ( ) ) ; } } ; ) ) ( TYPE_3 new ( install ; ) class VAR_4 ( to . ) class VAR_3 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) ) ( TYPE_2 new ( install ; ) ) ( METHOD_3 . TYPE_1 ( install ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( install { ) ( METHOD_1 void public 
public final TYPE_1 METHOD_1 ( TYPE_2 key ) { if ( ( ( VAR_1 ) == null ) & & ( ( VAR_2 ) ! = null ) ) { throw new TYPE_3 ( STRING_1 ) ; } else if ( ( ( VAR_1 ) ! = null ) & & ( ( VAR_2 ) == null ) ) { throw new TYPE_3 ( STRING_2 ) ; } return METHOD_1 ( key , 0 , true , ( ( VAR_1 ) ! = null ? new TYPE_4 < TYPE_5 > ( ) : null ) ) ; } } ; ) ) null : ) ( > TYPE_5 < TYPE_4 new ? null = ! ) VAR_1 ( ( , true , 0 , key ( METHOD_1 return } ; ) STRING_2 ( TYPE_3 new throw { ) ) null == ) VAR_2 ( ( & & ) null = ! ) VAR_1 ( ( ( if else } ; ) STRING_1 ( TYPE_3 new throw { ) ) null = ! ) VAR_2 ( ( & & ) null == ) VAR_1 ( ( ( if { ) key TYPE_2 ( METHOD_1 TYPE_1 final public 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { java.lang.String VAR_4 = METHOD_2 ( VAR_2 , VAR_3 , line ) ; VAR_1 . append ( ( ( ( ( STRING_1 + line ) + STRING_2 ) + VAR_4 ) + STRING_3 ) ) ; } } ; ) ) STRING_3 + ) VAR_4 + ) STRING_2 + ) line + STRING_1 ( ( ( ( ( append . VAR_1 ; ) line , VAR_3 , VAR_2 ( METHOD_2 = VAR_4 java.lang.String { ) line int , VAR_3 short , VAR_2 TYPE_1 , VAR_1 java.lang.StringBuilder ( METHOD_1 void private 
private boolean METHOD_1 ( TYPE_1 commit ) throws java.io.IOException { try ( TYPE_2 VAR_1 = TYPE_1 . METHOD_2 ( rw . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( commit ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_2 : VAR_3 ) { if ( VAR_1 . METHOD_6 ( VAR_1 . parseCommit ( VAR_2 ) , VAR_1 . parseCommit ( commit ) ) ) { return true ; } } } return false ; } } ; false return } } } ; true return { ) ) ) commit ( parseCommit . VAR_1 , ) VAR_2 ( parseCommit . VAR_1 ( METHOD_6 . VAR_1 ( if { ) VAR_3 : VAR_2 org.eclipse.jgit.revwalk.RevCommit ( for ; ) commit ( METHOD_5 . VAR_1 ; ) ( METHOD_4 . VAR_1 { ) ) ) ( METHOD_3 . rw ( METHOD_2 . TYPE_1 = VAR_1 TYPE_2 ( try { java.io.IOException throws ) commit TYPE_1 ( METHOD_1 boolean private 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } } } ; ) STRING_2 ( TYPE_2 new throw { ) e java.io.IOException ( catch } } ; ) STRING_1 ( TYPE_2 new throw { else } ; VAR_2 return { ) ) ( METHOD_3 . VAR_2 ( if { try ; ) VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 ; ) ) ( get . project ( METHOD_2 . TYPE_4 = VAR_1 TYPE_3 { TYPE_2 throws ) project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 private 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) ; return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . METHOD_1 ( ) ) ; } } ; ) ) ( METHOD_1 . ) VAR_4 , ) STRING_3 + ) VAR_1 + STRING_2 ( ( ( METHOD_3 . api ( METHOD_2 . TYPE_4 return ; ) STRING_1 , class VAR_3 ( get . VAR_2 = api > TYPE_3 < TYPE_2 { java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 > TYPE_1 < java.util.List public 
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( ) ) { TYPE_3 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( id ) ; if ( VAR_1 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_1 . get ( ) ) ; } else { i . delete ( id ) ; } } METHOD_5 ( id . get ( ) ) ; TYPE_4 . METHOD_6 ( id ) ; } } ; ) id ( METHOD_6 . TYPE_4 ; ) ) ( get . id ( METHOD_5 } } ; ) id ( delete . i { else } ; ) ) ( get . VAR_1 ( METHOD_4 . i { ) ) ( METHOD_3 . VAR_1 ( if ; ) id ( METHOD_2 . VAR_2 = VAR_1 > TYPE_2 < TYPE_3 { ) ) ( METHOD_1 : i > TYPE_2 , com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 ( for { java.io.IOException throws ) id com.google.gerrit.reviewdb.client.Account.Id ( index void public 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( ) ; TYPE_4 . Result change = METHOD_3 ( git , true ) ; TYPE_4 . Result VAR_1 = METHOD_3 ( git , true ) ; TYPE_4 . Result VAR_2 = METHOD_3 ( git , true ) ; METHOD_3 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_4 ( change ) ; METHOD_5 ( changes , VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 , changes ( METHOD_5 ; ) change ( METHOD_4 = changes > java.lang.String < java.util.Set ; ) false , git ( METHOD_3 ; ) true , git ( METHOD_3 = VAR_2 Result . TYPE_4 ; ) true , git ( METHOD_3 = VAR_1 Result . TYPE_4 ; ) true , git ( METHOD_3 = change Result . TYPE_4 ; ) ( METHOD_2 = git TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( ) { return TYPE_1 . create ( ) . set ( STRING_1 , false ) . set ( STRING_2 , 0 ) . set ( STRING_3 , FLOAT_1 ) . set ( STRING_4 , true ) . set ( STRING_5 , INT_1 ) . set ( STRING_6 , false ) . set ( STRING_7 , true ) . set ( STRING_8 , true ) . set ( STRING_9 , STRING_10 ) . set ( STRING_11 , TYPE_2 . METHOD_2 ( type ) ) ; } } ; ) ) type ( METHOD_2 . TYPE_2 , STRING_11 ( set . ) STRING_10 , STRING_9 ( set . ) true , STRING_8 ( set . ) true , STRING_7 ( set . ) false , STRING_6 ( set . ) INT_1 , STRING_5 ( set . ) true , STRING_4 ( set . ) FLOAT_1 , STRING_3 ( set . ) 0 , STRING_2 ( set . ) false , STRING_1 ( set . ) ( create . TYPE_1 return { ) ( METHOD_1 TYPE_1 private 
protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.ObjectId VAR_1 = getRevision ( ) ; if ( VAR_1 == null ) { return ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( getChange ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_7 , VAR_8 ) ; METHOD_3 ( VAR_9 , VAR_10 ) ; VAR_11 = VAR_12 ; } } ; VAR_12 = VAR_11 ; ) VAR_10 , VAR_9 ( METHOD_3 ; ) VAR_8 , VAR_7 ( METHOD_3 ; ) ( METHOD_2 . VAR_3 ; ) VAR_6 , VAR_5 , VAR_4 , VAR_1 , walk , ) ( getChange ( TYPE_2 new = VAR_3 TYPE_2 ; ) VAR_2 ( org.eclipse.jgit.revwalk.RevWalk new = walk org.eclipse.jgit.revwalk.RevWalk } ; return { ) null == VAR_1 ( if ; ) ( getRevision = VAR_1 org.eclipse.jgit.lib.ObjectId { TYPE_1 , java.io.IOException throws ) ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_5 ) ) ; TYPE_6 . Change change = TYPE_7 . get ( VAR_1 ) ; TYPE_8 . NameKey name = change . METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) { return VAR_1 . METHOD_6 ( ) ; } return VAR_7 ; } } ; VAR_7 return } ; ) ( METHOD_6 . VAR_1 return { ) ) ) VAR_6 , ) ) ( get . name ( create . TYPE_9 ( METHOD_5 . VAR_2 ( ! ( if ; ) ( METHOD_4 . change = name NameKey . TYPE_8 ; ) VAR_1 ( get . TYPE_7 = change Change . TYPE_6 ; ) ) VAR_5 ( ) TYPE_5 ( ( = VAR_4 TYPE_5 ; ) ( METHOD_3 . VAR_3 = VAR_2 TYPE_4 ; ) ( METHOD_2 . VAR_1 { TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e TYPE_5 ( catch } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; ) e , STRING_1 ( TYPE_3 new throw { ) e TYPE_4 ( catch } ; ) e , STRING_1 ( TYPE_3 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_3 . ) in , change ( apply . ) ( get . VAR_2 ( id . VAR_1 return { try { TYPE_3 throws ) in TYPE_2 ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , TYPE_1 { final TYPE_2 s = ( ( TYPE_2 ) ( db ) ) ; final TYPE_3 e = new TYPE_3 ( s ) ; METHOD_2 ( db , s , e ) ; METHOD_3 ( db , s , e ) ; METHOD_4 ( db ) ; } } ; ) db ( METHOD_4 ; ) e , s , db ( METHOD_3 ; ) e , s , db ( METHOD_2 ; ) s ( TYPE_3 new = e TYPE_3 final ; ) ) db ( ) TYPE_2 ( ( = s TYPE_2 final { TYPE_1 , com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_3 ) ; } } ; ) VAR_3 ( to . ) VAR_9 ( METHOD_6 . ) VAR_8 ( to . ) VAR_7 , VAR_6 , VAR_5 , VAR_2 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ; TYPE_3 in = TYPE_5 . METHOD_2 ( VAR_2 ) ) { return new TYPE_1 ( in ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; } catch ( TYPE_7 e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; } } } } ; ) e , ) VAR_1 + STRING_1 ( ( TYPE_6 new throw { ) e TYPE_7 ( catch } ; ) e , ) VAR_1 + STRING_1 ( ( TYPE_6 new throw { ) e java.io.IOException ( catch } ; ) in ( TYPE_1 new return { ) ) VAR_2 ( METHOD_2 . TYPE_5 = in TYPE_3 ; ) VAR_1 ( TYPE_4 new = VAR_2 TYPE_3 ( try { ) VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final java.lang.String value = STRING_2 ; final TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( name , value ) ; org.junit.Assert . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_3 ( value , VAR_1 . getValue ( ) ) ; org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; } } ; ) ) ( size . ) ( METHOD_5 . VAR_1 , 0 ( org.junit.Assert.assertEquals ; ) ) ( getValue . VAR_1 , value ( METHOD_3 . org.junit.Assert ; ) ) ( METHOD_4 . VAR_1 , name ( METHOD_3 . org.junit.Assert ; ) value , name ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < TYPE_1 final ; STRING_2 = value java.lang.String final ; STRING_1 = name java.lang.String final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; TYPE_4 in = new TYPE_4 ( ) ; VAR_1 = user . email ; TYPE_5 VAR_2 = VAR_3 . changes ( ) . id ( r . getChangeId ( ) ) ; VAR_2 . METHOD_1 ( in ) ; org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ; } } ; ) ) ) ( get . VAR_2 ( METHOD_3 . TYPE_7 , ) id . user ( of . TYPE_6 ( org.junit.Assert.assertEquals ; ) in ( METHOD_1 . VAR_2 ; ) ) ( getChangeId . r ( id . ) ( changes . VAR_3 = VAR_2 TYPE_5 ; email . user = VAR_1 ; ) ( TYPE_4 new = in TYPE_4 ; ) ( METHOD_2 = r Result . TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } } ; ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_7 . ) VAR_8 ( METHOD_6 . ) VAR_2 , VAR_7 , VAR_6 ( METHOD_6 . ) VAR_5 ( to . ) VAR_4 ( to . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_3 ( assertThat ; ) VAR_2 , VAR_1 ( METHOD_4 ; ) ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_4 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 ( METHOD_3 ; ) VAR_3 , VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base ! = null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) , VAR_2 . edit ( ) ) , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } } ; ) VAR_9 , ) 0 ( get . VAR_8 , ) 0 ( get . VAR_7 , VAR_6 , m ( METHOD_2 . VAR_1 ; ) VAR_5 , VAR_4 , VAR_3 , ) ) ( edit . VAR_2 , ) ( METHOD_1 . VAR_2 , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new , ) null : ) ) ( METHOD_1 . base , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new ? null = ! base ( ( set . VAR_1 { ) m > TYPE_2 < TYPE_1 ( onSuccess void public 
public void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_1 class ) ; bind ( new TYPE_1 < java.util.Map < java.lang.String , TYPE_2 > > ( ) { } ) . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( this . VAR_3 ) ; } } ; ) VAR_3 . this ( METHOD_5 . ) ) VAR_2 ( METHOD_4 . TYPE_3 ( METHOD_3 . ) } { ) ( > > TYPE_2 , java.lang.String < java.util.Map < TYPE_1 new ( bind ; ) class VAR_1 ( to . ) ( METHOD_2 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) & & ( config . METHOD_3 ( ) ) ) { TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 . get ( ) ) ) ; VAR_6 . set ( VAR_7 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_8 ) ) ; } } } } ; ) ) VAR_8 , INT_1 ( METHOD_5 . ) VAR_4 , ) ( METHOD_4 . TYPE_3 , null ( create . VAR_7 ( set . VAR_6 ; ) ) ) ( get . VAR_5 ( TYPE_2 new ( TYPE_1 new = VAR_4 TYPE_1 { ) ) ) ( METHOD_3 . config ( & & ) ) VAR_3 ( == ) ) ( METHOD_2 . VAR_2 ( ( ( if ; ) ( METHOD_1 . VAR_1 { ) ( METHOD_1 void public 
public static void METHOD_1 ( int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_2 ( user ) ; TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( input , VAR_1 ) ; } } ; ) VAR_1 , input ( put . ) STRING_1 ( view . ) id ( change . TYPE_4 ; ) user ( METHOD_2 . input ; ) ( create . TYPE_3 = input TYPE_3 { ) VAR_1 > TYPE_2 < TYPE_1 , user java.lang.String , id int ( METHOD_1 void static public 
private java.lang.String url ( TYPE_1 info ) { return info . METHOD_1 ( ) ? TYPE_2 . METHOD_2 ( base , VAR_1 , info . path ( ) ) : ( VAR_2 ) == ( VAR_3 ) ? TYPE_2 . METHOD_3 ( base , VAR_1 , info . path ( ) ) : TYPE_2 . METHOD_4 ( VAR_1 , info . path ( ) ) ; } } ; ) ) ( path . info , VAR_1 ( METHOD_4 . TYPE_2 : ) ) ( path . info , VAR_1 , base ( METHOD_3 . TYPE_2 ? ) VAR_3 ( == ) VAR_2 ( : ) ) ( path . info , VAR_1 , base ( METHOD_2 . TYPE_2 ? ) ( METHOD_1 . info return { ) info TYPE_1 ( url java.lang.String private 
private java.util.Map < TYPE_1 . Key , TYPE_1 . Id > METHOD_1 ( ) throws TYPE_2 . OrmException { final java.util.Map < TYPE_1 . Key , TYPE_1 . Id > r = new TYPE_3 < TYPE_1 . Key , TYPE_1 . Id > ( ) ; for ( TYPE_4 . Change c : db . changes ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { r . put ( c . getKey ( ) , c . getId ( ) ) ; } return r ; } } ; r return } ; ) ) ( getId . c , ) ( getKey . c ( put . r { ) ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . ) ( changes . db : c Change . TYPE_4 ( for ; ) ( > Id . TYPE_1 , Key . TYPE_1 < TYPE_3 new = r > Id . TYPE_1 , Key . TYPE_1 < java.util.Map final { OrmException . TYPE_2 throws ) ( METHOD_1 > Id . TYPE_1 , Key . TYPE_1 < java.util.Map private 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > in ) { if ( in ! = null ) { java.util.Collections . METHOD_1 ( TYPE_3 . METHOD_2 ( in ) , new TYPE_4 < TYPE_2 > ( ) { public int METHOD_3 ( TYPE_2 a , TYPE_2 b ) { return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; } } ) ; } return in ; } } ; in return } ; ) } } ; ) ) ( METHOD_4 . b ( METHOD_5 . ) ( METHOD_4 . a return { ) b TYPE_2 , a TYPE_2 ( METHOD_3 int public { ) ( > TYPE_2 < TYPE_4 new , ) in ( METHOD_2 . TYPE_3 ( METHOD_1 . java.util.Collections { ) null = ! in ( if { ) in > TYPE_2 < TYPE_1 ( METHOD_1 > TYPE_2 < TYPE_1 static private 
private static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ( VAR_2 . getChange ( ) . getStatus ( ) ) ! = ( VAR_3 ) ) { return false ; } for ( final TYPE_1 t : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) ) { if ( ! ( VAR_2 . METHOD_4 ( t ) ) ) { return false ; } } return true ; } } ; true return } } ; false return { ) ) ) t ( METHOD_4 . VAR_2 ( ! ( if { ) ) ( METHOD_3 . ) ( METHOD_3 . ) ( METHOD_2 . TYPE_3 : t TYPE_1 final ( for } ; false return { ) ) VAR_3 ( = ! ) ) ( getStatus . ) ( getChange . VAR_2 ( ( if { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 boolean static private 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > VAR_2 = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( getName ( ) . equals ( VAR_2 . getName ( ) ) ) & & ( METHOD_2 ( ) . equals ( VAR_2 . METHOD_2 ( ) ) ) ; } return false ; } } ; false return } ; ) ) ) ( METHOD_2 . VAR_2 ( equals . ) ( METHOD_2 ( & & ) ) ) ( getName . VAR_2 ( equals . ) ( getName ( return ; ) ) VAR_1 ( ) > ? < TYPE_2 ( ( = VAR_2 > ? < TYPE_2 final { ) ) ) ( METHOD_1 . VAR_1 ( == ) ) ( METHOD_1 ( ( if { ) VAR_1 TYPE_1 final ( equals boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) ; db = VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ( ( db ) instanceof TYPE_2 ) ) . METHOD_7 ( ) ; VAR_2 = ( ( TYPE_2 ) ( db ) ) . METHOD_8 ( ) ; VAR_3 = VAR_2 . METHOD_9 ( STRING_1 ) ; VAR_4 = VAR_2 . METHOD_9 ( STRING_2 ) ; VAR_5 = VAR_2 . METHOD_9 ( STRING_3 ) ; } } ; ) STRING_3 ( METHOD_9 . VAR_2 = VAR_5 ; ) STRING_2 ( METHOD_9 . VAR_2 = VAR_4 ; ) STRING_1 ( METHOD_9 . VAR_2 = VAR_3 ; ) ( METHOD_8 . ) ) db ( ) TYPE_2 ( ( = VAR_2 ; ) ( METHOD_7 . ) ) TYPE_2 instanceof ) db ( ( ( METHOD_6 . ) ( METHOD_5 . TYPE_1 ; ) ( METHOD_4 . VAR_1 = db ; ) this ( METHOD_3 . ) ( METHOD_2 . VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( java.lang.String ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( STRING_2 ) ) ; METHOD_2 ( b , b . append ( STRING_3 ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_4 ( assertEquals ; ) ) STRING_3 ( append . b , b ( METHOD_2 ; ) ) STRING_2 ( append . b , b ( METHOD_2 ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) ) ) null ( ) java.lang.String ( ( ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_2 . Project project ) { TYPE_1 result = TYPE_3 . METHOD_2 ( VAR_1 , repo , project ) ; if ( result ! = ( VAR_2 ) ) { return result ; } result = TYPE_3 . METHOD_2 ( VAR_3 , repo , project ) ; if ( result ! = ( VAR_2 ) ) { return result ; } result = TYPE_3 . METHOD_2 ( VAR_4 , repo , project ) ; if ( result ! = ( VAR_2 ) ) { return result ; } return VAR_2 ; } } ; VAR_2 return } ; result return { ) ) VAR_2 ( = ! result ( if ; ) project , repo , VAR_4 ( METHOD_2 . TYPE_3 = result } ; result return { ) ) VAR_2 ( = ! result ( if ; ) project , repo , VAR_3 ( METHOD_2 . TYPE_3 = result } ; result return { ) ) VAR_2 ( = ! result ( if ; ) project , repo , VAR_1 ( METHOD_2 . TYPE_3 = result TYPE_1 { ) project Project . TYPE_2 , repo org.eclipse.jgit.lib.Repository ( METHOD_1 TYPE_1 static public 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; try { TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( STRING_1 ) ; if ( VAR_3 . METHOD_4 ( ) ) { return new TYPE_1 ( VAR_3 . METHOD_5 ( 1 ) ) ; } } finally { VAR_2 . close ( ) ; } return null ; } catch ( TYPE_5 e ) { return null ; } } } } ; null return { ) e TYPE_5 ( catch } ; null return } ; ) ( close . VAR_2 { finally } } ; ) ) 1 ( METHOD_5 . VAR_3 ( TYPE_1 new return { ) ) ( METHOD_4 . VAR_3 ( if ; ) STRING_1 ( METHOD_3 . VAR_2 = VAR_3 TYPE_4 { try ; ) ( METHOD_2 . VAR_1 = VAR_2 TYPE_3 { try { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( project , branch , null , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_5 ; ) ) ) ( METHOD_4 . result ( METHOD_3 . TYPE_5 ( display . TYPE_4 { ) result ChangeInfo . TYPE_3 ( onSuccess void public { ) ( > ChangeInfo . TYPE_3 < TYPE_2 new , base , message , null , branch , project ( METHOD_2 . TYPE_1 { ) message java.lang.String ( METHOD_1 void 
protected Project . NameKey METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 , TYPE_1 VAR_4 ) throws TYPE_2 { TYPE_3 in = new TYPE_3 ( ) ; in . name = name ( VAR_1 ) ; VAR_5 = ( VAR_2 ! = null ) ? VAR_2 . get ( ) : null ; VAR_6 = VAR_4 ; VAR_7 = VAR_3 ; VAR_6 = VAR_4 ; return METHOD_1 ( in ) ; } } ; ) in ( METHOD_1 return ; VAR_4 = VAR_6 ; VAR_3 = VAR_7 ; VAR_4 = VAR_6 ; null : ) ( get . VAR_2 ? ) null = ! VAR_2 ( = VAR_5 ; ) VAR_1 ( name = name . in ; ) ( TYPE_3 new = in TYPE_3 { TYPE_2 throws ) VAR_4 TYPE_1 , VAR_3 boolean , VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey , VAR_1 java.lang.String ( METHOD_1 NameKey . Project protected 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , TYPE_1 VAR_1 ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_2 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1 . Result result = VAR_3 . METHOD_1 ( db , changeId , VAR_1 ) ; if ( VAR_4 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } } ; result return } ; ) STRING_2 ( java.io.IOException new throw { ) ) false ( METHOD_2 . VAR_4 ( if ; ) VAR_1 , changeId , db ( METHOD_1 . VAR_3 = result Result . TYPE_1 } ; ) STRING_1 ( java.io.IOException new throw { ) ) false ( METHOD_2 . VAR_2 ( if { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_2 throws ) VAR_1 TYPE_1 , changeId Id . com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 Result . TYPE_1 public 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) { TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ; VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ; } } ; ) ) edit , VAR_3 , ) 1 + ) VAR_4 - VAR_3 ( ( , ) VAR_5 ( METHOD_6 ( TYPE_3 new ( add . VAR_9 ; ) ) VAR_4 , VAR_2 , ) null , VAR_8 , 0 , VAR_2 , ) ( METHOD_5 . VAR_7 , VAR_1 ( METHOD_4 ( TYPE_2 new , ) VAR_3 ( METHOD_3 . VAR_5 ( put . VAR_6 ; ) VAR_1 ( METHOD_2 = VAR_5 TYPE_1 { ) edit boolean , VAR_4 int , VAR_3 int , VAR_2 int , VAR_1 TYPE_1 ( METHOD_1 void private 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > VAR_1 = TYPE_2 . of ( TYPE_3 . getName ( ) , TYPE_4 . getName ( ) ) ; java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_2 = VAR_3 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( changeId ) ; if ( ( VAR_2 . size ( ) ) ! = 1 ) { throw new TYPE_5 ( changeId ) ; } return VAR_2 . get ( 0 ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) 0 ( get . VAR_2 return } ; ) changeId ( TYPE_5 new throw { ) 1 = ! ) ) ( size . VAR_2 ( ( if ; ) changeId ( METHOD_3 . ) VAR_1 ( METHOD_2 . ) ( get . VAR_3 = VAR_2 > com.google.gerrit.server.query.change.ChangeData < java.util.List ; ) ) ( getName . TYPE_4 , ) ( getName . TYPE_3 ( of . TYPE_2 = VAR_1 > java.lang.String < java.util.Set { com.google.gwtorm.server.OrmException throws ) changeId Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 > java.lang.String , com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 public 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return METHOD_2 ( ) ; } if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; return METHOD_2 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ) { METHOD_1 ( repo ) ; VAR_1 = true ; } catch ( TYPE_2 | java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_2 ( ) ; } } ; ) ( METHOD_2 return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e java.io.IOException | TYPE_2 ( catch } ; true = VAR_1 ; ) repo ( METHOD_1 { ) ) ) ( METHOD_6 ( METHOD_5 . VAR_3 = repo org.eclipse.jgit.lib.Repository ( try } ; ) ( METHOD_2 return ; ) ( METHOD_4 { ) ) ) ( METHOD_3 . VAR_2 ( ! ( if } ; ) ( METHOD_2 return { ) VAR_1 ( if { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 TYPE_1 public 
protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) throws TYPE_5 , TYPE_6 { return VAR_2 . apply ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; } } ; ) null , ) ( currentPatchSetId . ) ( getChange . rsrc , ) ( getChange . rsrc , ) ( METHOD_3 . ) ( METHOD_2 . rsrc ( apply . VAR_2 return { TYPE_6 , TYPE_5 throws ) input TYPE_4 , rsrc TYPE_3 , VAR_1 Factory . TYPE_2 ( METHOD_1 > ? < TYPE_1 protected 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; cfg . METHOD_4 ( ) . METHOD_5 ( ) ; cfg . METHOD_4 ( ) . put ( VAR_3 . getName ( ) , VAR_3 ) ; METHOD_6 ( cfg ) ; } } ; ) cfg ( METHOD_6 ; ) VAR_3 , ) ( getName . VAR_3 ( put . ) ( METHOD_4 . cfg ; ) ( METHOD_5 . ) ( METHOD_4 . cfg ; ) ( METHOD_3 . ) VAR_2 ( METHOD_2 . VAR_1 = cfg ProjectConfig . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void private 
public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( db ) ; if ( c == null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( db ) ) { if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) { VAR_1 = p ; return p ; } } } return VAR_1 ; } } ; VAR_1 return } } } ; p return ; p = VAR_1 { ) ) ) ( currentPatchSetId . c ( equals . ) ( getId . p ( if { ) ) db ( METHOD_2 : p com.google.gerrit.reviewdb.client.PatchSet ( for } ; null return { ) null == c ( if ; ) db ( change = c com.google.gerrit.reviewdb.client.Change { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) db > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_1 ( METHOD_1 com.google.gerrit.reviewdb.client.PatchSet public 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) { VAR_1 = new TYPE_1 ( false , TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ; } else { VAR_1 = new TYPE_1 ( false ) ; } } } } } } ; ) false ( TYPE_1 new = VAR_1 { else } ; ) ) STRING_2 , config , ) ( METHOD_4 . TYPE_1 ( METHOD_3 . TYPE_2 , false ( TYPE_1 new = VAR_1 { ) ) STRING_2 ( contains . ) STRING_1 ( METHOD_2 . config ( if { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 void private 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return TYPE_5 . apply ( VAR_1 . METHOD_1 ( s ) . format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_4 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) change ( format . ) s ( METHOD_1 . VAR_1 ( apply . TYPE_5 return { try { TYPE_4 throws ) s > TYPE_3 < TYPE_2 ( get ChangeInfo . TYPE_1 public 
private TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < java.lang.String , java.lang.String > ( ) ; VAR_1 . put ( STRING_1 , VAR_2 class . getName ( ) ) ; VAR_1 . put ( STRING_2 , STRING_3 ) ; VAR_1 . put ( STRING_4 , STRING_5 ) ; return VAR_1 ; } } ; VAR_1 return ; ) STRING_5 , STRING_4 ( put . VAR_1 ; ) STRING_3 , STRING_2 ( put . VAR_1 ; ) ) ( getName . class VAR_2 , STRING_1 ( put . VAR_1 ; ) ( > java.lang.String , java.lang.String < TYPE_1 new = VAR_1 > java.lang.String , java.lang.String < TYPE_1 { ) ( METHOD_1 > java.lang.String , java.lang.String < TYPE_1 private 
public java.lang.String METHOD_1 ( ) { if ( ( ( change ) ! = null ) & & ( ( METHOD_2 ( ) ) ! = null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } } ; null return } ; ) ( toString . r return ; ) ) ( getChangeId . change ( append . r ; ) ) ( METHOD_2 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final { ) ) null = ! ) ) ( METHOD_2 ( ( & & ) null = ! ) change ( ( ( if { ) ( METHOD_1 java.lang.String public 
protected java.lang.String METHOD_1 ( ) { if ( ( ( change ) ! = null ) & & ( ( METHOD_2 ( ) ) ! = null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } } ; null return } ; ) ( toString . r return ; ) ) ( getChangeId . change ( append . r ; ) ) ( METHOD_2 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final { ) ) null = ! ) ) ( METHOD_2 ( ( & & ) null = ! ) change ( ( ( if { ) ( METHOD_1 java.lang.String protected 
public static void METHOD_1 ( final com.google.gerrit.reviewdb.server.ReviewDb db , final com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { final java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval a : approvals ) { a . METHOD_5 ( change ) ; } db . METHOD_2 ( ) . update ( approvals ) ; } } ; ) approvals ( update . ) ( METHOD_2 . db } ; ) change ( METHOD_5 . a { ) approvals : a PatchSetApproval . com.google.gerrit.reviewdb.client ( for ; ) ( METHOD_4 . ) ) ( change.getId ( METHOD_3 . ) ( METHOD_2 . db = approvals > PatchSetApproval . com.google.gerrit.reviewdb.client < java.util.List final { com.google.gwtorm.server.OrmException throws ) change com.google.gerrit.reviewdb.client.Change final , db com.google.gerrit.reviewdb.server.ReviewDb final ( METHOD_1 void static public 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) . METHOD_2 ( VAR_1 class , VAR_2 class ) . METHOD_3 ( VAR_3 . Factory class ) ) ; install ( new TYPE_1 ( ) . METHOD_2 ( VAR_4 class , VAR_5 class ) . METHOD_3 ( VAR_6 . Factory class ) ) ; install ( new TYPE_2 ( VAR_7 ) ) ; if ( ( VAR_8 ) == null ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( ) ) ; } } } } ; ) ) ( TYPE_4 new ( install { else } ; ) ) ( TYPE_3 new ( install { ) null == ) VAR_8 ( ( if ; ) ) VAR_7 ( TYPE_2 new ( install ; ) ) class Factory . VAR_6 ( METHOD_3 . ) class VAR_5 , class VAR_4 ( METHOD_2 . ) ( TYPE_1 new ( install ; ) ) class Factory . VAR_3 ( METHOD_3 . ) class VAR_2 , class VAR_1 ( METHOD_2 . ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } } } ; ) e , ) ( change.getId ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; ) e , ) ( change.getId ( TYPE_3 new throw { ) e TYPE_4 ( catch } ; ) change ( METHOD_1 . ) user , VAR_1 ( METHOD_1 . VAR_2 return { try ; ) ( getProject . change = VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey final { TYPE_3 throws ) user TYPE_2 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 public 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 r ) throws TYPE_3 { try { TYPE_4 VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_2 ( r . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( r . METHOD_5 ( ) ) ; return VAR_1 . apply ( change ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; ) change ( apply . VAR_1 return ; ) ) ( METHOD_5 . r ( METHOD_4 . VAR_1 ; ) ) ( METHOD_3 . r ( METHOD_2 . VAR_1 ; ) ( get . VAR_2 = VAR_1 TYPE_4 { try { TYPE_3 throws ) r TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_4 ) ; METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ; } } ; ) VAR_3 , VAR_4 , STRING_6 ( METHOD_4 ; ) VAR_4 , STRING_5 ( METHOD_4 ; ) VAR_3 , STRING_4 ( METHOD_4 ; ) STRING_3 ( METHOD_4 ; ) ) VAR_2 ( METHOD_3 ( insert = VAR_4 com.google.gerrit.reviewdb.client.Change ; ) ) VAR_1 ( METHOD_3 ( insert = VAR_3 com.google.gerrit.reviewdb.client.Change ; ) STRING_2 ( METHOD_2 = VAR_2 > TYPE_2 < TYPE_1 ; ) STRING_1 ( METHOD_2 = VAR_1 > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { if ( ( ( VAR_3 ) instanceof TYPE_1 ) & & ( VAR_4 . METHOD_2 ( false , true ) ) ) { ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } VAR_5 . METHOD_3 ( this ) ; VAR_5 . METHOD_4 ( ) ; return true ; } else { return false ; } } } } ; false return { else } ; true return ; ) ( METHOD_4 . VAR_5 ; ) this ( METHOD_3 . VAR_5 } ; ) ( METHOD_1 . ) ) VAR_3 ( ) TYPE_1 ( ( { ) ) ) true , false ( METHOD_2 . VAR_4 ( & & ) TYPE_1 instanceof ) VAR_3 ( ( ( if { ) ) VAR_1 ( METHOD_1 . VAR_2 ( if { ) VAR_1 boolean ( METHOD_1 boolean public 
private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( ) { public java.lang.String METHOD_5 ( TYPE_4 VAR_3 ) { return VAR_1 ; } public void METHOD_6 ( TYPE_4 VAR_3 , java.lang.String token ) { } } ) ; } } ; ) } } { ) token java.lang.String , VAR_3 TYPE_4 ( METHOD_6 void public } ; VAR_1 return { ) VAR_3 TYPE_4 ( METHOD_5 java.lang.String public { ) ( TYPE_3 new ( METHOD_4 . TYPE_2 ; ) VAR_2 ( METHOD_3 . TYPE_1 ; ) VAR_2 ( METHOD_2 . TYPE_1 = VAR_1 { ) ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws java.io.IOException { byte [ ] VAR_3 = new TYPE_2 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( VAR_1 ) , TYPE_3 . name ( ) ) ; return new TYPE_4 ( VAR_3 ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( TYPE_3 . name ( ) ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) ) ( name . TYPE_3 ( METHOD_6 . ) STRING_1 ( METHOD_5 . ) VAR_3 ( TYPE_4 new return ; ) ) ( name . TYPE_3 , ) VAR_1 ( METHOD_4 ( METHOD_3 . ) ( METHOD_2 . ) ( TYPE_2 new = VAR_3 ] [ byte { java.io.IOException throws ) VAR_2 int , VAR_1 java.lang.String ( METHOD_1 TYPE_1 private 
protected void METHOD_1 ( ) { if ( ( db ) ! = null ) { try { final TYPE_1 ps = METHOD_2 ( ) ; if ( ps ! = null ) { for ( final TYPE_2 w : METHOD_3 ( ) ) { if ( w . METHOD_4 ( ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } } catch ( TYPE_3 . OrmException err ) { } } } } } } { ) err OrmException . TYPE_3 ( catch } } } } ; ) ) ( getAccountId . w , VAR_1 ( add { ) ) ( METHOD_4 . w ( if { ) ) ( METHOD_3 : w TYPE_2 final ( for { ) null = ! ps ( if ; ) ( METHOD_2 = ps TYPE_1 final { try { ) null = ! ) db ( ( if { ) ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException | TYPE_4 | com.google.gwtorm.server.OrmException ( catch } ; ) VAR_2 . ) in , revision ( apply . ) ( get . VAR_1 ( id . changes return { try { TYPE_3 throws ) in TYPE_2 ( METHOD_1 TYPE_1 public 
protected void run ( ) throws TYPE_1 { try { TYPE_2 input = TYPE_3 . METHOD_1 ( TYPE_4 . METHOD_2 ( VAR_1 , ObjectId : : getName ) ) ; VAR_2 = VAR_3 ; TYPE_5 r = VAR_4 . apply ( new TYPE_6 ( VAR_5 ) , input ) ; METHOD_3 ( VAR_6 , STRING_1 ) ; METHOD_3 ( VAR_7 , STRING_2 ) ; METHOD_3 ( VAR_8 , STRING_3 ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw METHOD_4 ( e ) ; } } } } ; ) e ( METHOD_4 throw { ) e java.io.IOException | TYPE_7 ( catch } ; ) STRING_3 , VAR_8 ( METHOD_3 ; ) STRING_2 , VAR_7 ( METHOD_3 ; ) STRING_1 , VAR_6 ( METHOD_3 ; ) input , ) VAR_5 ( TYPE_6 new ( apply . VAR_4 = r TYPE_5 ; VAR_3 = VAR_2 ; ) ) getName : : ObjectId , VAR_1 ( METHOD_2 . TYPE_4 ( METHOD_1 . TYPE_3 = input TYPE_2 { try { TYPE_1 throws ) ( run void protected 
public TYPE_1 < java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_5 VAR_1 = req . METHOD_1 ( ) ; TYPE_6 notes = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2 = notes . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = java.util.Collections . METHOD_5 ( ) ; } return TYPE_1 . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . TYPE_1 return } ; ) ( METHOD_5 . java.util.Collections = VAR_2 { ) null == VAR_2 ( if ; ) ( METHOD_4 . notes = VAR_2 > java.lang.String < java.util.Set ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 = notes TYPE_6 ; ) ( METHOD_1 . req = VAR_1 TYPE_5 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 , TYPE_3 throws ) req TYPE_2 ( apply > > java.lang.String < java.util.Set < TYPE_1 public 
public java.lang.String METHOD_1 ( final TYPE_1 . NameKey branch ) { final TYPE_2 r = new TYPE_2 ( ) ; TYPE_3 . p ( r , branch . getParentKey ( ) ) ; TYPE_3 . METHOD_2 ( r , branch ) ; TYPE_3 . a ( r , STRING_1 ) ; return ( VAR_1 ) + r ; } } ; r + ) VAR_1 ( return ; ) STRING_1 , r ( a . TYPE_3 ; ) branch , r ( METHOD_2 . TYPE_3 ; ) ) ( getParentKey . branch , r ( p . TYPE_3 ; ) ( TYPE_2 new = r TYPE_2 final { ) branch NameKey . TYPE_1 final ( METHOD_1 java.lang.String public 
private static Account . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( db , VAR_2 ) ; if ( a == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a . getId ( ) ; } } ; ) ( getId . a return } ; ) ) STRING_2 + ) VAR_2 + STRING_1 ( ( ( TYPE_2 new throw { ) null == a ( if ; ) VAR_2 , db ( METHOD_2 . VAR_1 = a com.google.gerrit.reviewdb.client.Account { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_2 throws ) VAR_2 java.lang.String , VAR_1 TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 Id . Account static private 
private void METHOD_1 ( final java.util.Map < java.lang.String , TYPE_1 > VAR_1 , final java.lang.String name , final java.lang.String value ) { if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } } } } ; ) ) value ( String . TYPE_1 new , name ( put . VAR_1 { ) ) ) ( isEmpty . ) name ( get . VAR_1 ( || ) ) ) name ( METHOD_2 . VAR_1 ( ! ( ( if { ) value java.lang.String final , name java.lang.String final , VAR_1 > TYPE_1 , java.lang.String < java.util.Map final ( METHOD_1 void private 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_4 . VAR_2 ; ) VAR_1 ( METHOD_3 . TYPE_3 ; ) ( values . ) ( METHOD_1 . info = VAR_1 > TYPE_3 < TYPE_2 ; ) STRING_1 ( METHOD_2 . ) ( METHOD_1 . info { ) info ChangeInfo . TYPE_1 ( onSuccess void public 
public void METHOD_1 ( ) throws TYPE_1 . OrmException , TYPE_2 { VAR_1 = new TYPE_3 ( ) ; TYPE_4 insert = METHOD_2 ( VAR_2 , VAR_1 ) ; try { VAR_3 . insert ( VAR_4 ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 . OrmException e ) { org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ; } METHOD_6 ( insert , 1 ) ; } } ; ) 1 , insert ( METHOD_6 } ; ) VAR_1 , ) ( METHOD_5 . e ( METHOD_4 . org.junit.Assert { ) e OrmException . TYPE_1 ( catch } ; ) STRING_1 ( METHOD_3 . org.junit.Assert ; ) VAR_4 ( insert . VAR_3 { try ; ) VAR_1 , VAR_2 ( METHOD_2 = insert TYPE_4 ; ) ( TYPE_3 new = VAR_1 { TYPE_2 , OrmException . TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_3 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 , VAR_3 ( METHOD_6 . ) VAR_7 ( to . ) VAR_6 ( to . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 ( METHOD_4 ; ) VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ; TYPE_2 u = METHOD_2 ( c , VAR_1 ) ; u . METHOD_3 ( c . METHOD_4 ( ) ) ; u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } } ; c return ; ) ( commit . u ; ) ) ( get . ) ( METHOD_6 . c ( METHOD_5 . u ; ) ) ( METHOD_4 . c ( METHOD_3 . u ; ) VAR_1 , c ( METHOD_2 = u TYPE_2 ; ) ) ( getAccountId . VAR_1 , project ( METHOD_1 . TYPE_1 = c com.google.gerrit.reviewdb.client.Change { java.lang.Exception throws ) ( METHOD_1 com.google.gerrit.reviewdb.client.Change private 
private TYPE_1 file ( final java.lang.String name ) throws java.io.IOException { final TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; try { final TYPE_1 e = new TYPE_1 ( name ) ; e . METHOD_2 ( VAR_3 ) ; e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ; VAR_1 . METHOD_5 ( ) ; return e ; } finally { VAR_1 . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . VAR_1 { finally } ; e return ; ) ( METHOD_5 . VAR_1 ; ) ) ) name ( METHOD_4 . TYPE_3 , VAR_4 ( insert . VAR_1 ( METHOD_3 . e ; ) VAR_3 ( METHOD_2 . e ; ) name ( TYPE_1 new = e TYPE_1 final { try ; ) ( METHOD_1 . VAR_2 = VAR_1 TYPE_2 final { java.io.IOException throws ) name java.lang.String final ( file TYPE_1 private 
protected java.util.List < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw . METHOD_3 ( rw . parseCommit ( repo . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) ) ; return TYPE_1 . METHOD_6 ( rw ) ; } finally { rw . METHOD_7 ( ) ; } } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } } ; ) ( METHOD_7 . rw { finally } ; ) rw ( METHOD_6 . TYPE_1 return ; ) ) ) ( METHOD_5 . ) STRING_1 ( METHOD_4 . repo ( parseCommit . rw ( METHOD_3 . rw { try ; ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk { try ; ) project ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository { java.io.IOException throws ) ( METHOD_1 > org.eclipse.jgit.revwalk.RevCommit < java.util.List protected 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { if ( id ! = null ) { VAR_1 = db . METHOD_2 ( ) ; try { revision = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) ; METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; VAR_1 = null ; } } else { revision = null ; METHOD_3 ( ) ; } } } } ; ) ( METHOD_3 ; null = revision { else } } ; null = VAR_1 ; ) ( METHOD_4 . VAR_1 { finally } ; ) ( METHOD_3 ; ) id ( parseCommit . ) VAR_1 ( org.eclipse.jgit.revwalk.RevWalk new = revision { try ; ) ( METHOD_2 . db = VAR_1 { ) null = ! id ( if { TYPE_1 , java.io.IOException throws ) id org.eclipse.jgit.lib.ObjectId , db org.eclipse.jgit.lib.Repository ( METHOD_1 void public 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_3 , VAR_1 ) ) ; if ( VAR_2 ! = null ) { return TYPE_1 . of ( VAR_2 . getAccountId ( ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } finally { db . close ( ) ; } } } } ; ) ( close . db { finally } ; ) ( METHOD_4 . TYPE_1 return } ; ) ) ( getAccountId . VAR_2 ( of . TYPE_1 return { ) null = ! VAR_2 ( if ; ) ) VAR_1 , VAR_3 ( Key . TYPE_2 new ( get . ) ( METHOD_3 . db = VAR_2 TYPE_2 final { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { java.lang.Exception throws ) VAR_1 java.lang.String ( METHOD_1 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 public 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { TYPE_4 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( ) ; } java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , size ) ; if ( TYPE_5 . METHOD_4 ( url ) ) { throw new TYPE_3 ( ) ; } else { return TYPE_6 . METHOD_5 ( url ) ; } } } } ; ) url ( METHOD_5 . TYPE_6 return { else } ; ) ( TYPE_3 new throw { ) ) url ( METHOD_4 . TYPE_5 ( if ; ) size , ) ( METHOD_3 . ) ( METHOD_2 . rsrc ( METHOD_1 . VAR_1 = url java.lang.String } ; ) ( TYPE_3 new throw { ) null == VAR_1 ( if ; ) ( get . VAR_2 = VAR_1 TYPE_4 { TYPE_3 throws ) rsrc TYPE_2 ( apply TYPE_1 public 
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 t = this ; int VAR_2 = VAR_1 ; while ( ( t . METHOD_2 ( ) ) & & ( 0 < VAR_1 ) ) { VAR_1 -- ; t = ( ( TYPE_2 ) ( t ) ) . VAR_3 . METHOD_3 ( ) ; } if ( t . METHOD_2 ( ) ) return ( ( TYPE_2 ) ( t ) ) . VAR_4 ; throw new TYPE_3 ( VAR_2 ) ; } } ; ) VAR_2 ( TYPE_3 new throw ; VAR_4 . ) ) t ( ) TYPE_2 ( ( return ) ) ( METHOD_2 . t ( if } ; ) ( METHOD_3 . VAR_3 . ) ) t ( ) TYPE_2 ( ( = t ; -- VAR_1 { ) ) VAR_1 < 0 ( & & ) ) ( METHOD_2 . t ( ( while ; VAR_1 = VAR_2 int ; this = t TYPE_1 { ) VAR_1 int ( METHOD_1 TYPE_1 public 
public void index ( TYPE_1 VAR_1 ) throws java.io.IOException { for ( TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_4 < TYPE_3 > VAR_3 = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_3 . get ( ) ) ; } else { i . delete ( VAR_1 ) ; } } METHOD_5 ( VAR_1 . get ( ) ) ; TYPE_5 . METHOD_6 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_6 . TYPE_5 ; ) ) ( get . VAR_1 ( METHOD_5 } } ; ) VAR_1 ( delete . i { else } ; ) ) ( get . VAR_3 ( METHOD_4 . i { ) ) ( METHOD_3 . VAR_3 ( if ; ) VAR_1 ( get . VAR_2 = VAR_3 > TYPE_3 < TYPE_4 ; ) VAR_1 ( METHOD_2 . VAR_2 { ) ) ( METHOD_1 : i > TYPE_3 , TYPE_1 < TYPE_2 ( for { java.io.IOException throws ) VAR_1 TYPE_1 ( index void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . getValue ( ) ) == null ) ) { throw new TYPE_3 ( STRING_1 ) ; } return TYPE_4 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 . getValue ( ) ) ) ; } } ; ) ) ) ( getValue . VAR_1 ( METHOD_1 . VAR_2 ( METHOD_2 . TYPE_4 return } ; ) STRING_1 ( TYPE_3 new throw { ) ) null == ) ) ( getValue . VAR_1 ( ( || ) null == VAR_1 ( ( if { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( VAR_3 . isEmpty ( ) ) { return TYPE_9 . METHOD_1 ( ) ; } else if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_10 ( ) ; } } } } ; ) ( TYPE_10 new throw { else } ; ) 0 ( get . VAR_3 return { ) 1 == ) ) ( size . VAR_3 ( ( if else } ; ) ( METHOD_1 . TYPE_9 return { ) ) ( isEmpty . VAR_3 ( if ; ) in , VAR_1 ( apply . ) ( get . put = VAR_3 > TYPE_8 < java.util.List ; id = VAR_2 ; ) ( TYPE_7 new = in TYPE_7 { com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 throws ) input TYPE_3 , VAR_1 TYPE_2 ( apply TYPE_1 public 
private java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , TYPE_1 > METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ; for ( final TYPE_1 m : db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) { VAR_2 . put ( m . getAccountId ( ) , m ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) m , ) ( getAccountId . m ( put . VAR_2 { ) ) VAR_1 ( METHOD_4 . ) ( METHOD_3 . db : m TYPE_1 final ( for ; ) ( METHOD_2 . TYPE_3 = VAR_2 > TYPE_1 , com.google.gerrit.reviewdb.client.Account.Id < java.util.Map final { com.google.gwtorm.server.OrmException throws ) VAR_1 Id . TYPE_2 final ( METHOD_1 > TYPE_1 , com.google.gerrit.reviewdb.client.Account.Id < java.util.Map private 
public static java.lang.String METHOD_1 ( final TYPE_1 req ) { java.lang.String VAR_1 = req . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( VAR_1 ) ) { return VAR_2 ; } else { return TYPE_3 . is ( CHAR_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; } } } } ; ) ) VAR_1 ( METHOD_5 . TYPE_4 ( METHOD_4 . ) CHAR_1 ( is . TYPE_3 return { else } ; VAR_2 return { ) ) VAR_1 ( METHOD_3 . TYPE_2 ( if ; ) ( METHOD_2 . req = VAR_1 java.lang.String { ) req TYPE_1 final ( METHOD_1 java.lang.String static public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_6 . ) ) ) ) ( METHOD_5 . VAR_2 ( ) > ? < TYPE_1 ( ( ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_4 . ) ) VAR_1 ( METHOD_3 . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_1 ( METHOD_2 . VAR_2 ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey { java.lang.Exception throws ) ( METHOD_1 void public 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit c ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 ) ; com.google.gerrit.reviewdb.client.PatchSet ps = METHOD_3 ( c ) ; if ( ps ! = null ) { try { METHOD_4 ( ps , VAR_1 ) ; return METHOD_5 ( ) . insert ( VAR_4 , VAR_1 . toString ( ) . METHOD_6 ( STRING_1 ) ) ; } catch ( TYPE_2 e ) { throw new java.io.IOException ( e ) ; } } return null ; } } ; null return } } ; ) e ( java.io.IOException new throw { ) e TYPE_2 ( catch } ; ) ) STRING_1 ( METHOD_6 . ) ( toString . VAR_1 , VAR_4 ( insert . ) ( METHOD_5 return ; ) VAR_1 , ps ( METHOD_4 { try { ) null = ! ps ( if ; ) c ( METHOD_3 = ps com.google.gerrit.reviewdb.client.PatchSet ; ) VAR_3 , ) ( METHOD_2 . VAR_2 ( TYPE_1 new = VAR_1 TYPE_1 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) c org.eclipse.jgit.revwalk.RevCommit ( METHOD_1 org.eclipse.jgit.lib.ObjectId private 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 < TYPE_4 > VAR_3 = new TYPE_3 < > ( ) ; for ( final TYPE_5 b : VAR_4 ) { if ( b . ref ( ) . contains ( VAR_1 . METHOD_2 ( ) ) ) { VAR_3 . add ( new TYPE_4 ( b ) ) ; } } VAR_2 . METHOD_3 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( TYPE_6 new , VAR_1 ( METHOD_3 . VAR_2 } } ; ) ) b ( TYPE_4 new ( add . VAR_3 { ) ) ) ( METHOD_2 . VAR_1 ( contains . ) ( ref . b ( if { ) VAR_4 : b TYPE_5 final ( for ; ) ( > < TYPE_3 new = VAR_3 > TYPE_4 < TYPE_3 { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void protected 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , final TYPE_1 . Status status ) throws com.google.gwtorm.server.OrmException { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . getStatus ( ) ) == status ; } } ) ) ; } } ; ) ) } } ; status == ) ) ( getStatus . input ( return { ) input TYPE_1 ( apply boolean public { ) ( > TYPE_1 < TYPE_5 new , VAR_1 ( METHOD_3 . TYPE_4 ( METHOD_2 . TYPE_3 return { com.google.gwtorm.server.OrmException throws ) status Status . TYPE_1 final , VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 = change . currentPatchSetId ( ) ; TYPE_1 ps = new TYPE_1 ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , ( VAR_1 ! = null ? ( VAR_1 . get ( ) ) + 1 : 1 ) ) ) ; ps . METHOD_2 ( STRING_1 ) ; change . METHOD_3 ( ps ) ; TYPE_2 . METHOD_4 ( change ) ; } } ; ) change ( METHOD_4 . TYPE_2 ; ) ps ( METHOD_3 . change ; ) STRING_1 ( METHOD_2 . ps ; ) ) ) 1 : 1 + ) ) ( get . VAR_1 ( ? null = ! VAR_1 ( , ) ( change.getId ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( TYPE_1 new = ps TYPE_1 ; ) ( currentPatchSetId . change = VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id { ) change com.google.gerrit.reviewdb.client.Change ( METHOD_1 void static public 
void METHOD_1 ( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ; if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ; } } } } ; ) ) VAR_1 , VAR_2 , b , a , STRING_1 ( java.lang.String.format ( METHOD_3 . org.junit.Assert { ) ) ) VAR_1 ( equals . VAR_2 ( ! ( if ; ) ( toString . ) ) b ( create . TYPE_2 , ) a ( create . TYPE_2 ( METHOD_2 . TYPE_1 = VAR_2 java.lang.String { java.lang.Exception throws ) VAR_1 java.lang.String , b java.lang.String , a java.lang.String ( METHOD_1 void 
private static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.eclipse.jgit.lib.ObjectId > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return null ; } return TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < org.eclipse.jgit.lib.ObjectId , java.lang.String > ( ) { public java.lang.String apply ( org.eclipse.jgit.lib.ObjectId id ) { return id . getName ( ) ; } } ) ; } } ; ) } } ; ) ( getName . id return { ) id org.eclipse.jgit.lib.ObjectId ( apply java.lang.String public { ) ( > java.lang.String , org.eclipse.jgit.lib.ObjectId < TYPE_2 new , VAR_1 ( METHOD_2 . TYPE_1 return } ; null return { ) ) ) ( isEmpty . VAR_1 ( || ) null == VAR_1 ( ( if { ) VAR_1 > org.eclipse.jgit.lib.ObjectId < java.util.List ( METHOD_1 > java.lang.String < java.util.List static private 
void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_3 . METHOD_4 ( ) ) ) + ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) ; VAR_5 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_6 . METHOD_4 ( ) ) ) + ( VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) ; } } ; ) VAR_4 , ) ) ) ( METHOD_6 . ) ( METHOD_5 . VAR_6 ( + ) ) ) ( METHOD_4 . VAR_6 ( * VAR_1 ( ( ( METHOD_3 . ) ( METHOD_2 . VAR_5 ; ) VAR_4 , ) ) ) ( METHOD_6 . ) ( METHOD_5 . VAR_3 ( + ) ) ) ( METHOD_4 . VAR_3 ( * VAR_1 ( ( ( METHOD_3 . ) ( METHOD_2 . VAR_2 { ) VAR_1 int ( METHOD_1 void 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 branch = db . METHOD_2 ( VAR_1 ) ; if ( branch ! = null ) { VAR_2 = VAR_3 . parseCommit ( branch . METHOD_3 ( ) ) ; base = TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ; } if ( ( VAR_2 ) ! = null ) { VAR_4 = TYPE_2 . METHOD_4 ( db . METHOD_6 ( ) , VAR_2 ) ; } else { VAR_4 = TYPE_2 . METHOD_7 ( ) ; } } } } ; ) ( METHOD_7 . TYPE_2 = VAR_4 { else } ; ) VAR_2 , ) ( METHOD_6 . db ( METHOD_4 . TYPE_2 = VAR_4 { ) null = ! ) VAR_2 ( ( if } ; ) VAR_2 , ) ( METHOD_5 . VAR_3 ( METHOD_4 . TYPE_2 = base ; ) ) ( METHOD_3 . branch ( parseCommit . VAR_3 = VAR_2 { ) null = ! branch ( if ; ) VAR_1 ( METHOD_2 . db = branch TYPE_1 { java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 void private 
private boolean equals ( com.google.gerrit.reviewdb.client.PatchSet p , java.lang.String id ) { boolean VAR_1 = ( METHOD_1 ( ) ) == ( VAR_2 ) ; java.lang.String VAR_3 = ( ( p . getRevision ( ) ) ! = null ) ? p . getRevision ( ) . get ( ) : null ; return ( VAR_1 & & ( id . equals ( VAR_3 ) ) ) || ( ( ( ! VAR_1 ) & & ( VAR_3 ! = null ) ) & & ( VAR_3 . METHOD_2 ( id ) ) ) ; } } ; ) ) ) id ( METHOD_2 . VAR_3 ( & & ) ) null = ! VAR_3 ( & & ) VAR_1 ! ( ( ( || ) ) ) VAR_3 ( equals . id ( & & VAR_1 ( return ; null : ) ( get . ) ( getRevision . p ? ) null = ! ) ) ( getRevision . p ( ( = VAR_3 java.lang.String ; ) VAR_2 ( == ) ) ( METHOD_1 ( = VAR_1 boolean { ) id java.lang.String , p com.google.gerrit.reviewdb.client.PatchSet ( equals boolean private 
public void METHOD_1 ( java.lang.String ... VAR_1 ) throws TYPE_1 { try { VAR_2 . apply ( rsrc , TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ) VAR_1 ( METHOD_3 . TYPE_3 ( METHOD_2 . TYPE_2 , rsrc ( apply . VAR_2 { try { TYPE_1 throws ) VAR_1 ... java.lang.String ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . add ( STRING_1 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_3 ( input ) ; METHOD_4 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_7 ( ) ; } } ; ) ( METHOD_7 } ; ) ) ) STRING_1 ( of . TYPE_4 ( METHOD_6 ( isEqualTo . ) ( METHOD_5 . ) e ( com.google.common.truth.Truth.assertThat { ) e TYPE_3 ( catch } ; ) STRING_2 ( METHOD_4 ; ) input ( METHOD_3 . ) ( project { try ; VAR_1 = VAR_3 ; ) STRING_1 ( add . VAR_1 ; ) VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < java.util.List ; ) ( TYPE_1 new = input TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; try ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; METHOD_6 ( VAR_2 ) ; } finally { VAR_1 . close ( ) ; METHOD_7 ( VAR_3 ) ; to = VAR_4 ; } } } } ; VAR_4 = to ; ) VAR_3 ( METHOD_7 ; ) ( close . VAR_1 { finally } ; ) VAR_2 ( METHOD_6 ; p return ; ) ) ) name ( METHOD_5 . repo ( METHOD_4 . ) repo ( org.eclipse.jgit.revwalk.RevWalk new , VAR_1 ( METHOD_3 . p { ) ) ( METHOD_2 . repo = VAR_1 TYPE_3 ( try ; ) ( TYPE_2 new = p TYPE_2 { java.io.IOException throws ) name java.lang.String , repo org.eclipse.jgit.lib.Repository ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String master = STRING_1 ; org.eclipse.jgit.lib.ObjectId VAR_1 = git . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ; METHOD_5 ( master , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_9 , STRING_10 ) ; r . METHOD_8 ( ) ; r . METHOD_9 ( VAR_4 , null , admin ) ; METHOD_10 ( master , STRING_8 ) ; } } ; ) STRING_8 , master ( METHOD_10 ; ) admin , null , VAR_4 ( METHOD_9 . r ; ) ( METHOD_8 . r ; ) STRING_10 , STRING_9 , STRING_8 , STRING_7 ( METHOD_5 = r Result . TYPE_1 ; ) STRING_6 , project , VAR_3 ( METHOD_7 ; ) VAR_1 ( METHOD_6 . VAR_2 ; ) STRING_5 , STRING_4 , STRING_3 , master ( METHOD_5 ; ) ( METHOD_4 . ) STRING_2 ( METHOD_3 . ) ( METHOD_2 . git = VAR_1 org.eclipse.jgit.lib.ObjectId ; STRING_1 = master java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , TYPE_3 info , TYPE_4 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 , TYPE_5 < com.google.gerrit.reviewdb.client.Account.Id > VAR_3 ) throws com.google.gwtorm.server.OrmException { return METHOD_1 ( db , update , VAR_1 , change , ps . getId ( ) , ps . METHOD_2 ( ) , info . METHOD_3 ( ) . METHOD_4 ( ) , info . METHOD_5 ( ) . METHOD_4 ( ) , VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 , ) ( METHOD_4 . ) ( METHOD_5 . info , ) ( METHOD_4 . ) ( METHOD_3 . info , ) ( METHOD_2 . ps , ) ( getId . ps , change , VAR_1 , update , db ( METHOD_1 return { com.google.gwtorm.server.OrmException throws ) VAR_3 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_5 , VAR_2 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_4 , info TYPE_3 , ps com.google.gerrit.reviewdb.client.PatchSet , change com.google.gerrit.reviewdb.client.Change , VAR_1 TYPE_2 , update TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 > PatchSetApproval . com.google.gerrit.reviewdb.client < java.util.List public 
TYPE_1 METHOD_1 ( TYPE_2 user , TYPE_3 revision ) { return new TYPE_1 ( user . METHOD_2 ( ) . METHOD_3 ( null ) , revision . METHOD_4 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; } } ; ) ) ( of . TYPE_5 , VAR_2 , VAR_1 , null , ) ) ( getAccountId . user ( of . TYPE_4 , ) ( METHOD_4 . revision , ) null ( METHOD_3 . ) ( METHOD_2 . user ( TYPE_1 new return { ) revision TYPE_3 , user TYPE_2 ( METHOD_1 TYPE_1 
private com.google.gerrit.reviewdb.client.Account METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , com.google.gwtorm.server.OrmException { try { return VAR_2 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { switch ( VAR_3 ) { case VAR_4 : case VAR_5 : case VAR_6 : if ( ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ) { return METHOD_5 ( VAR_1 ) ; } break ; default : } throw e ; } } } } ; e throw } : default ; break } ; ) VAR_1 ( METHOD_5 return { ) null == ) ) VAR_1 ( METHOD_4 . VAR_7 ( ( if : VAR_6 case : VAR_5 case : VAR_4 case { ) VAR_3 ( switch { ) e TYPE_2 ( catch } ; ) ( METHOD_3 . ) VAR_1 ( METHOD_2 . ) ( get . VAR_2 return { try { com.google.gwtorm.server.OrmException , TYPE_2 , TYPE_1 throws ) VAR_1 java.lang.String ( METHOD_1 com.google.gerrit.reviewdb.client.Account private 
public void METHOD_1 ( ) { final int VAR_1 = 2 ; final int VAR_2 = INT_1 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; METHOD_2 ( p , c . getParentKey ( ) ) ; METHOD_3 ( ( VAR_2 ! = ( c . METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 . c ( = ! VAR_2 ( ( METHOD_3 ; ) ) ( getParentKey . c , p ( METHOD_2 ; ) VAR_2 , p ( TYPE_2 new = c TYPE_2 final ; ) VAR_1 ( TYPE_1 new = p TYPE_1 final ; INT_1 = VAR_2 int final ; 2 = VAR_1 int final { ) ( METHOD_1 void public 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( req , res , null , c ) ; TYPE_4 . METHOD_4 ( null , res , msg ) ; } } ; ) msg , res , null ( METHOD_4 . TYPE_4 ; ) c , null , res , req ( METHOD_3 . TYPE_4 ; ) VAR_1 ( METHOD_2 . res { java.io.IOException throws ) c TYPE_3 , msg java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void static public 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < byte [ ] > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ; for ( byte [ ] key : VAR_1 ) { byte [ ] VAR_2 = METHOD_2 ( key ) ; if ( VAR_2 ! = null ) { r . add ( new TYPE_2 ( key , VAR_2 ) ) ; } } return new TYPE_4 < TYPE_2 > ( r ) ; } } ; ) r ( > TYPE_2 < TYPE_4 new return } } ; ) ) VAR_2 , key ( TYPE_2 new ( add . r { ) null = ! VAR_2 ( if ; ) key ( METHOD_2 = VAR_2 ] [ byte { ) VAR_1 : key ] [ byte ( for ; ) ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.List { com.google.gwtorm.server.OrmException throws ) VAR_1 > ] [ byte < TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 public 
protected void METHOD_1 ( java.lang.String changeId ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . changes ( ) . id ( changeId ) . info ( ) . VAR_2 ) . METHOD_2 ( STRING_1 ) . isEqualTo ( true ) ; TYPE_1 rsrc = METHOD_3 ( changeId ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_4 ( rsrc ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_5 ( ) ) . METHOD_2 ( STRING_2 ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_7 ( ) ) . METHOD_2 ( STRING_3 ) . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . ) STRING_3 ( METHOD_2 . ) ) ( METHOD_7 . VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_6 . ) STRING_2 ( METHOD_2 . ) ) ( METHOD_5 . VAR_3 ( com.google.common.truth.Truth.assertThat ; ) rsrc ( METHOD_4 . VAR_4 = VAR_3 TYPE_2 ; ) changeId ( METHOD_3 = rsrc TYPE_1 ; ) true ( isEqualTo . ) STRING_1 ( METHOD_2 . ) VAR_2 . ) ( info . ) changeId ( id . ) ( changes . VAR_1 ( com.google.common.truth.Truth.assertThat { java.lang.Exception throws ) changeId java.lang.String ( METHOD_1 void protected 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ; } public void METHOD_6 ( TYPE_6 VAR_2 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_2 ) ; } } ) ; } } ; ) } } ; ) VAR_2 ( METHOD_6 . super ; ) true ( METHOD_7 { ) VAR_2 TYPE_6 ( METHOD_6 void public } ; ) ) id ( METHOD_5 . TYPE_5 ( display . TYPE_4 ; ) ( METHOD_4 ; true = VAR_1 { ) result ChangeInfo . TYPE_3 ( onSuccess void public { ) ( > ChangeInfo . TYPE_3 < TYPE_2 new , ) ( METHOD_3 , revision , ) ( get . id ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , admin ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( admin ) . to ( VAR_4 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_9 ( METHOD_7 . ) VAR_8 ( METHOD_6 . ) VAR_7 ( to . ) VAR_6 , VAR_5 ( METHOD_6 . ) VAR_4 ( to . ) admin ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_3 ( assertThat ; ) admin , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 a , com.google.gerrit.reviewdb.client.Change change ) { VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_3 = change . METHOD_5 ( ) ; VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . ) ( getStatus . change = VAR_4 ; ) ( METHOD_5 . change = VAR_3 ; INT_1 / ) ) ( METHOD_3 . ) ( METHOD_4 . change ( = VAR_2 ; INT_1 / ) ) ( METHOD_3 . ) ( METHOD_2 . change ( = VAR_1 { ) change com.google.gerrit.reviewdb.client.Change , a TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( new TYPE_3 ( ) ) ) . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_8 ( ) ; VAR_3 = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 , VAR_8 ) ; VAR_3 . METHOD_9 ( ) ; VAR_2 . METHOD_10 ( ) ; } } ; ) ( METHOD_10 . VAR_2 ; ) ( METHOD_9 . VAR_3 ; ) VAR_8 , VAR_7 , VAR_1 , VAR_6 , VAR_5 , VAR_4 ( TYPE_4 new = VAR_3 ; ) ( METHOD_8 . VAR_2 ; ) ) ( TYPE_2 new ( METHOD_5 . ) ( METHOD_4 . TYPE_1 ; ) ( METHOD_7 . VAR_1 ; ) ( METHOD_6 . ) ) ) ( TYPE_3 new ( TYPE_2 new ( METHOD_5 . ) ( METHOD_4 . TYPE_1 ; ) ( METHOD_3 . VAR_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( res , VAR_2 ) ; METHOD_4 ( res ) ; try ( TYPE_3 out = TYPE_4 . METHOD_5 ( req , res ) ) { out . METHOD_6 ( message ) ; } } } } ; ) message ( METHOD_6 . out { ) ) res , req ( METHOD_5 . TYPE_4 = out TYPE_3 ( try ; ) res ( METHOD_4 ; ) VAR_2 , res ( METHOD_3 ; ) VAR_1 ( METHOD_2 . res { java.io.IOException throws ) message java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) == VAR_1 ) { VAR_3 = null ; METHOD_3 ( ) ; } else if ( ( VAR_4 ) == VAR_1 ) { VAR_3 = null ; VAR_5 = false ; METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 ; false = VAR_5 ; null = VAR_3 { ) VAR_1 == ) VAR_4 ( ( if else } ; ) ( METHOD_3 ; null = VAR_3 { ) VAR_1 == ) VAR_2 ( ( if ; ) ) ) ( METHOD_2 . event ( ) TYPE_2 ( ( = VAR_1 TYPE_2 final { ) event TYPE_1 final ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 ctl , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client . PatchSetApproval a ) { java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ; TYPE_4 user = VAR_3 . create ( a . getAccountId ( ) ) ; TYPE_5 VAR_4 = ctl . METHOD_3 ( user ) . METHOD_4 ( VAR_2 ) ; a . METHOD_5 ( ( ( short ) ( VAR_4 . METHOD_6 ( a . getValue ( ) ) ) ) ) ; } } ; ) ) ) ) ) ( getValue . a ( METHOD_6 . VAR_4 ( ) short ( ( ( METHOD_5 . a ; ) VAR_2 ( METHOD_4 . ) user ( METHOD_3 . ctl = VAR_4 TYPE_5 ; ) ) ( getAccountId . a ( create . VAR_3 = user TYPE_4 ; ) ) ( getName . VAR_1 ( METHOD_2 . TYPE_3 = VAR_2 java.lang.String { ) a PatchSetApproval . com.google.gerrit.reviewdb.client , VAR_1 TYPE_2 , ctl TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_2 , u . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . u , STRING_2 ( METHOD_4 ; ) ( user = u TYPE_1 ; ) true ( METHOD_3 . ) STRING_1 , VAR_3 , VAR_2 , VAR_4 ( METHOD_2 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 { ) ( METHOD_1 void public 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . METHOD_1 ( null , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_2 ( ) ) ) ; VAR_1 . METHOD_3 ( m , VAR_3 , VAR_4 . get ( 0 ) , VAR_5 . get ( 0 ) ) ; } } ; ) ) 0 ( get . VAR_5 , ) 0 ( get . VAR_4 , VAR_3 , m ( METHOD_3 . VAR_1 ; ) ) ) ( METHOD_2 . VAR_2 , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new , null ( METHOD_1 . VAR_1 { ) m > TYPE_2 < TYPE_1 ( onSuccess void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 , change ) ; } } ; ) change , STRING_8 ( METHOD_5 ; ) STRING_7 ( METHOD_5 ; ) ( insert . ) null , null , null , commit , repo ( METHOD_4 = change com.google.gerrit.reviewdb.client.Change ; ) ) ( create . ) STRING_6 , STRING_5 ( add . ) STRING_4 , STRING_3 ( add . ) STRING_2 ( message . ) ( commit . repo ( METHOD_3 . repo = commit org.eclipse.jgit.revwalk.RevCommit ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; b . append ( 1 ) ; final TYPE_2 VAR_1 = b . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 , b ) ; METHOD_5 ( ( VAR_1 instanceof TYPE_1 ) ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . VAR_1 , STRING_1 ( assertEquals ; ) ) TYPE_1 instanceof VAR_1 ( ( METHOD_5 ; ) b , VAR_1 ( METHOD_4 ; ) VAR_1 ( METHOD_3 ; ) ( METHOD_2 . b = VAR_1 TYPE_2 final ; ) 1 ( append . b ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
void METHOD_1 ( int VAR_1 ) { VAR_2 = VAR_1 - ( METHOD_2 ( ) . METHOD_3 ( ) ) ; for ( int i = 0 ; i < ( METHOD_2 ( ) . METHOD_4 ( ) ) ; i ++ ) { VAR_3 . get ( i ) . METHOD_1 ( VAR_2 ) ; } } } } ; ) VAR_2 ( METHOD_1 . ) i ( get . VAR_3 { ) ++ i ; ) ) ( METHOD_4 . ) ( METHOD_2 ( < i ; 0 = i int ( for ; ) ) ( METHOD_3 . ) ( METHOD_2 ( - VAR_1 = VAR_2 { ) VAR_1 int ( METHOD_1 void 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String , org.eclipse.jgit.revwalk.RevCommit > VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 input = new TYPE_2 ( ) ; VAR_3 = VAR_2 ; project ( ) . METHOD_1 ( input ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_4 ; ) ( METHOD_3 ; ) input ( METHOD_1 . ) ( project ; VAR_2 = VAR_3 ; ) ( TYPE_2 new = input TYPE_2 ; ) VAR_2 ( METHOD_2 = VAR_1 > org.eclipse.jgit.revwalk.RevCommit , java.lang.String < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; try { VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_2 ( catch } ; ) ) ) ( METHOD_3 . c ( create . VAR_3 , c ( METHOD_2 . VAR_2 = VAR_1 { try ; ) ( change = c com.google.gerrit.reviewdb.client.Change { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . in ( VAR_2 class ) ; bind ( VAR_7 . Factory class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; } } ; ) class Factory . VAR_9 ( factory ; ) class Factory . VAR_8 ( factory ; ) VAR_5 ( in . ) class Factory . VAR_7 ( bind ; ) class VAR_2 ( in . ) class VAR_6 ( bind ; ) VAR_5 ( in . ) class VAR_4 ( bind ; ) class VAR_3 ( bind ; ) class VAR_2 ( in . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
protected java.util.Set < TYPE_1 . Id > METHOD_1 ( ) { final TYPE_2 r ; r = VAR_1 . get ( change . METHOD_2 ( ) . getParentKey ( ) ) ; return r ! = null ? r . METHOD_3 ( ) : VAR_2 . Collections < TYPE_1 . Id > METHOD_4 ( ) ; } } ; ) ( METHOD_4 > Id . TYPE_1 < Collections . VAR_2 : ) ( METHOD_3 . r ? null = ! r return ; ) ) ( getParentKey . ) ( METHOD_2 . change ( get . VAR_1 = r ; r TYPE_2 final { ) ( METHOD_1 > Id . TYPE_1 < java.util.Set protected 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_5 | TYPE_4 ( catch } ; ) ( get . ) ) VAR_1 ( delete . VAR_3 , ) VAR_1 ( delete . VAR_2 ( METHOD_2 . TYPE_3 { try ; ) id ( METHOD_1 . TYPE_2 = VAR_1 TYPE_1 { java.io.IOException throws ) id Id . com.google.gerrit.reviewdb.client.Change ( delete void public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_4 , STRING_5 , STRING_3 , STRING_6 ) ) ; } } ; ) ) STRING_6 , STRING_3 , STRING_5 , STRING_4 ( of . TYPE_4 ( METHOD_8 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ) ) STRING_3 , STRING_2 ( METHOD_7 . TYPE_3 ( METHOD_6 . TYPE_2 ( METHOD_5 . ) ) VAR_3 ( METHOD_4 . TYPE_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_4 , VAR_3 , VAR_1 , VAR_2 ( METHOD_3 ; ) STRING_1 ( METHOD_2 . TYPE_1 = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private boolean METHOD_1 ( final TYPE_1 commit ) { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) { return false ; } for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) == null ) { return false ; } if ( ! ( VAR_4 . currentPatchSetId ( ) . equals ( VAR_3 ) ) ) { return false ; } } return true ; } } ; true return } } ; false return { ) ) ) VAR_3 ( equals . ) ( currentPatchSetId . VAR_4 ( ! ( if } ; false return { ) null == ) VAR_3 ( ( if ; ) VAR_2 ( METHOD_2 { ) VAR_1 : VAR_2 TYPE_1 ( for } ; false return { ) ) ) ( isEmpty . VAR_1 ( || ) null == ) VAR_1 ( ( ( if { ) commit TYPE_1 final ( METHOD_1 boolean private 
public void set ( TYPE_1 base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { this . base = base ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; } } ; VAR_5 = VAR_5 . this ; VAR_4 = VAR_4 . this ; VAR_3 = VAR_3 . this ; VAR_2 = VAR_2 . this ; VAR_1 = VAR_1 . this ; base = base . this { ) VAR_5 boolean , VAR_4 TYPE_4 , VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id , base TYPE_1 ( set void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ; TYPE_2 VAR_5 = util . user ( VAR_3 , VAR_4 ) ; METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_3 ( METHOD_6 . VAR_5 , STRING_2 ( METHOD_5 ; ) VAR_4 , VAR_3 ( user . util = VAR_5 TYPE_2 ; ) STRING_1 , VAR_4 , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 ; ) ( METHOD_4 . ) STRING_1 , VAR_2 , VAR_1 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { java.lang.String ref = VAR_3 ; if ( ( repo . METHOD_3 ( ) . METHOD_4 ( ref ) ) ! = null ) { TYPE_1 VAR_4 = repo . METHOD_5 ( ref ) ; VAR_4 . METHOD_6 ( true ) ; com.google.common.truth.Truth . METHOD_7 ( ) . METHOD_8 ( ( STRING_1 + ref ) ) . METHOD_9 ( VAR_4 . delete ( ) ) . isEqualTo ( VAR_5 ) ; } } } } } } ; ) VAR_5 ( isEqualTo . ) ) ( delete . VAR_4 ( METHOD_9 . ) ) ref + STRING_1 ( ( METHOD_8 . ) ( METHOD_7 . com.google.common.truth.Truth ; ) true ( METHOD_6 . VAR_4 ; ) ref ( METHOD_5 . repo = VAR_4 TYPE_1 { ) null = ! ) ) ref ( METHOD_4 . ) ( METHOD_3 . repo ( ( if ; VAR_3 = ref java.lang.String { ) ) VAR_2 ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { try { if ( ( VAR_1 == 0 ) & & ( ( VAR_2 ) ! = null ) ) { return METHOD_2 ( key ) ; } else { return METHOD_3 ( key ) ; } } catch ( TYPE_3 | com.google.gwtorm.server.OrmException e ) { java.lang.String msg = STRING_1 ; VAR_3 . METHOD_4 ( ( ( msg + STRING_2 ) + ( TYPE_4 . METHOD_5 ( key . METHOD_6 ( ) ) ) ) , e ) ; return TYPE_1 . METHOD_7 ( msg ) ; } } } } ; ) msg ( METHOD_7 . TYPE_1 return ; ) e , ) ) ) ) ( METHOD_6 . key ( METHOD_5 . TYPE_4 ( + ) STRING_2 + msg ( ( ( METHOD_4 . VAR_3 ; STRING_1 = msg java.lang.String { ) e com.google.gwtorm.server.OrmException | TYPE_3 ( catch } } ; ) key ( METHOD_3 return { else } ; ) key ( METHOD_2 return { ) ) null = ! ) VAR_2 ( ( & & ) 0 == VAR_1 ( ( if { try { ) VAR_1 int , key TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) , VAR_5 ) ; } } ; ) VAR_5 , ) STRING_1 ( METHOD_5 . VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_4 , ) ( METHOD_4 . VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_3 ( METHOD_3 . org.junit.Assert ; ) VAR_1 ( TYPE_3 new = VAR_2 TYPE_3 final ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 ! = null ) & & ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) ! = null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; } } } } } } ; ) ) ( METHOD_2 . VAR_2 , STRING_1 ( METHOD_6 . ) ( METHOD_5 . view { ) null = ! ) view ( ( if ; ) ) ) VAR_1 ( METHOD_4 . TYPE_3 , 0 ( METHOD_3 . TYPE_2 ( METHOD_2 . VAR_2 { ) ) 0 > ) ) ( length . VAR_1 ( ( & & ) null = ! VAR_1 ( ( if ; ) ( getValue . e = VAR_1 java.lang.String { ) e > java.lang.String < TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { try ( TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ) { TYPE_3 . METHOD_4 ( VAR_3 ) ; } catch ( TYPE_4 e ) { throw METHOD_5 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( METHOD_5 throw { ) e TYPE_4 ( catch } ; ) VAR_3 ( METHOD_4 . TYPE_3 { ) ) ( METHOD_3 . VAR_1 = VAR_3 TYPE_2 ; ) ( METHOD_2 . VAR_2 = VAR_1 TYPE_1 ( try { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } catch ( java.io.IOException err ) { throw new TYPE_5 ( STRING_1 , err ) ; } } } } ; ) err , STRING_1 ( TYPE_5 new throw { ) err java.io.IOException ( catch } ; ) ( METHOD_3 . VAR_3 ; ) VAR_1 ( METHOD_2 . VAR_3 ; ) ) VAR_2 ( TYPE_4 new ( TYPE_3 new = VAR_3 TYPE_3 { try { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( repo ) == null ) { this . repo = VAR_1 . METHOD_2 ( project ) ; VAR_2 = true ; VAR_3 = repo . METHOD_3 ( ) ; VAR_4 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_4 ( ) ) ; commands = new TYPE_1 ( repo ) ; } } } } ; ) repo ( TYPE_1 new = commands ; ) ) ( METHOD_4 . VAR_3 ( org.eclipse.jgit.revwalk.RevWalk new = VAR_4 ; ) ( METHOD_3 . repo = VAR_3 ; true = VAR_2 ; ) project ( METHOD_2 . VAR_1 = repo . this { ) null == ) repo ( ( if { java.io.IOException throws ) ( METHOD_1 void private 
public java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String VAR_2 ) { try { java.lang.String VAR_3 = java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ; byte [ ] VAR_4 = VAR_3 . METHOD_2 ( STRING_2 ) ; java.lang.String VAR_5 = TYPE_1 . METHOD_3 ( VAR_4 ) ; return VAR_6 . METHOD_4 ( VAR_5 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( e ) ; } } } } ; ) e ( TYPE_3 new throw { ) e TYPE_4 ( catch } ; ) e ( TYPE_3 new throw { ) e TYPE_2 ( catch } ; ) VAR_5 ( METHOD_4 . VAR_6 return ; ) VAR_4 ( METHOD_3 . TYPE_1 = VAR_5 java.lang.String ; ) STRING_2 ( METHOD_2 . VAR_3 = VAR_4 ] [ byte ; ) VAR_2 , VAR_1 , STRING_1 ( java.lang.String.format = VAR_3 java.lang.String { try { ) VAR_2 java.lang.String , VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 java.lang.String public 
private static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n = c . getName ( ) ; n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n . METHOD_4 ( STRING_1 ) ) n = n . METHOD_2 ( 1 ) ; return TYPE_2 . METHOD_5 ( n ) ; } } ; ) n ( METHOD_5 . TYPE_2 return ; ) 1 ( METHOD_2 . n = n ) ) STRING_1 ( METHOD_4 . n ( while ; ) ) 1 + ) ) CHAR_1 ( METHOD_3 . n ( ( ( METHOD_2 . n = n ; ) ( getName . c = n java.lang.String { ) c > ? < TYPE_1 ( METHOD_1 int static private 
private void METHOD_1 ( final TYPE_1 . ReviewDb c ) throws TYPE_2 . OrmException { final TYPE_1 . Project p ; p = new TYPE_1 . Project ( VAR_1 , VAR_2 ) ; p . METHOD_2 ( STRING_1 ) ; p . METHOD_3 ( false ) ; c . projects ( ) . insert ( java.util.Collections.singleton ( p ) ) ; } } ; ) ) p ( java.util.Collections.singleton ( insert . ) ( projects . c ; ) false ( METHOD_3 . p ; ) STRING_1 ( METHOD_2 . p ; ) VAR_2 , VAR_1 ( Project . TYPE_1 new = p ; p Project . TYPE_1 final { OrmException . TYPE_2 throws ) c ReviewDb . TYPE_1 final ( METHOD_1 void private 
protected void METHOD_1 ( ) { table = new TYPE_1 ( VAR_1 ) { protected void METHOD_2 ( ) { super . METHOD_2 ( ) ; } public void METHOD_3 ( ) { super . METHOD_3 ( ) ; display ( ) ; } } ; super . METHOD_1 ( ) ; java.lang.String VAR_2 = table . METHOD_4 ( ) ; if ( VAR_2 ! = null ) { METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; } add ( table ) ; } } ; ) table ( add } ; ) VAR_2 ( METHOD_6 ; ) VAR_2 ( METHOD_5 { ) null = ! VAR_2 ( if ; ) ( METHOD_4 . table = VAR_2 java.lang.String ; ) ( METHOD_1 . super ; } } ; ) ( display ; ) ( METHOD_3 . super { ) ( METHOD_3 void public } ; ) ( METHOD_2 . super { ) ( METHOD_2 void protected { ) VAR_1 ( TYPE_1 new = table { ) ( METHOD_1 void protected 
protected static final TYPE_1 METHOD_1 ( java.lang.String path ) throws java.io.IOException { if ( path == null ) { return VAR_1 ; } TYPE_2 in = VAR_2 . ReviewDb class . METHOD_2 ( path ) ; if ( in == null ) { throw new TYPE_3 ( ( ( STRING_1 + path ) + STRING_2 ) ) ; } TYPE_1 VAR_3 ; try { VAR_3 = new TYPE_1 ( path , in ) ; } finally { in . close ( ) ; } return VAR_3 ; } } ; VAR_3 return } ; ) ( close . in { finally } ; ) in , path ( TYPE_1 new = VAR_3 { try ; VAR_3 TYPE_1 } ; ) ) STRING_2 + ) path + STRING_1 ( ( ( TYPE_3 new throw { ) null == in ( if ; ) path ( METHOD_2 . class ReviewDb . VAR_2 = in TYPE_2 } ; VAR_1 return { ) null == path ( if { java.io.IOException throws ) path java.lang.String ( METHOD_1 TYPE_1 final static protected 
protected static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 ... VAR_1 ) { return TYPE_4 . METHOD_2 ( TYPE_5 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( new TYPE_6 < TYPE_3 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_3 in ) { return VAR_2 ; } } ) ; } } ; ) } } ; VAR_2 return { ) in TYPE_3 ( apply TYPE_2 public { ) ( > TYPE_2 , TYPE_3 < TYPE_6 new ( METHOD_4 . ) ) VAR_1 ( METHOD_3 . TYPE_5 ( METHOD_2 . TYPE_4 return { ) VAR_1 ... TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 static protected 
private void METHOD_1 ( TYPE_1 . HttpServletResponse res , TYPE_2 VAR_1 ) throws java.io.IOException { byte [ ] VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; res . METHOD_3 ( VAR_3 ) ; res . METHOD_4 ( STRING_1 ) ; res . METHOD_5 ( STRING_2 ) ; res . METHOD_6 ( VAR_2 . length ) ; TYPE_4 out = res . METHOD_7 ( ) ; try { out . METHOD_8 ( VAR_2 ) ; } finally { out . close ( ) ; } } } } ; ) ( close . out { finally } ; ) VAR_2 ( METHOD_8 . out { try ; ) ( METHOD_7 . res = out TYPE_4 ; ) length . VAR_2 ( METHOD_6 . res ; ) STRING_2 ( METHOD_5 . res ; ) STRING_1 ( METHOD_4 . res ; ) VAR_3 ( METHOD_3 . res ; ) VAR_1 ( METHOD_2 . TYPE_3 = VAR_2 ] [ byte { java.io.IOException throws ) VAR_1 TYPE_2 , res HttpServletResponse . TYPE_1 ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; return p ; } } ; p return ; ) ) ( METHOD_2 . patchSet ( toString . TYPE_3 = VAR_1 ; ) ( get . ) ( getRevision . patchSet = revision . p ; ) ( TYPE_1 new = p TYPE_1 { ) patchSet PatchSet . TYPE_2 final ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 schema = METHOD_2 ( ) ; METHOD_3 ( schema . METHOD_4 ( ) ) ; assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ; assertEquals ( 2 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) ( METHOD_4 . schema , 2 ( assertEquals ; ) ) ( METHOD_5 . ) ( METHOD_4 . schema , STRING_1 ( assertEquals ; ) ) ( METHOD_4 . schema ( METHOD_3 ; ) ( METHOD_2 = schema TYPE_1 final { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_2 ctx = VAR_2 . METHOD_2 ( ) ; try { TYPE_3 VAR_3 = new TYPE_4 ( ) . add ( VAR_1 ) ; try { ctx . METHOD_3 ( VAR_3 ) ; return true ; } catch ( TYPE_5 e ) { return false ; } } finally { try { ctx . close ( ) ; } catch ( TYPE_5 e ) { VAR_4 . METHOD_4 ( STRING_1 , e ) ; } } } } } } ; ) e , STRING_1 ( METHOD_4 . VAR_4 { ) e TYPE_5 ( catch } ; ) ( close . ctx { try { finally } } ; false return { ) e TYPE_5 ( catch } ; true return ; ) VAR_3 ( METHOD_3 . ctx { try ; ) VAR_1 ( add . ) ( TYPE_4 new = VAR_3 TYPE_3 { try ; ) ( METHOD_2 . VAR_2 = ctx TYPE_2 final { java.lang.Exception throws ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 public 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ) ( value . ) revision ( apply . ) base ( METHOD_2 . ) ( get . VAR_1 ( ) > TYPE_1 , java.lang.String < java.util.Map ( ( return { try { TYPE_2 throws ) base java.lang.String ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_4 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_4 . projects ; ) result ( display . projects { ) result > Project . TYPE_3 < java.util.List final ( METHOD_3 void protected { ) this ( > > Project . TYPE_3 < java.util.List < TYPE_2 new ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
protected void METHOD_1 ( TYPE_1 p ) throws java.lang.Exception { java.lang.String url ; switch ( p ) { case VAR_1 : url = VAR_2 ; break ; case VAR_3 : url = admin . METHOD_2 ( server ) ; break ; default : throw new TYPE_2 ( ( STRING_1 + p ) ) ; } METHOD_3 ( TYPE_3 . METHOD_4 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) ; } } ; ) ) ) ) ) ( get . project ( + ) STRING_2 + url ( ( ( METHOD_4 . TYPE_3 ( METHOD_3 } ; ) ) p + STRING_1 ( ( TYPE_2 new throw : default ; break ; ) server ( METHOD_2 . admin = url : VAR_3 case ; break ; VAR_2 = url : VAR_1 case { ) p ( switch ; url java.lang.String { java.lang.Exception throws ) p TYPE_1 ( METHOD_1 void protected 
public void close ( ) { VAR_1 = null ; if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_1 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_1 ( ) ; VAR_3 = null ; } } } } ; null = VAR_3 ; ) ( METHOD_1 . VAR_3 { ) null = ! ) VAR_3 ( ( if } ; null = VAR_2 ; ) ( METHOD_1 . VAR_2 { ) null = ! ) VAR_2 ( ( if ; null = VAR_1 { ) ( close void public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . isEqualTo ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . ) ) ( get . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_6 . ) VAR_2 ( METHOD_4 . TYPE_1 ; ) ( METHOD_5 . ) VAR_2 ( METHOD_4 . TYPE_1 ; ) ( METHOD_3 . VAR_1 ; ) VAR_2 ( isEqualTo . ) ) ( get . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 . VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 id , java.lang.String ref ) throws java.lang.Exception { TYPE_2 . ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_3 . METHOD_1 ( cfg , VAR_1 , id , ref ) ; METHOD_4 ( project , cfg ) ; } } ; ) cfg , project ( METHOD_4 ; ) ref , id , VAR_1 , cfg ( METHOD_1 . TYPE_3 ; ) ( METHOD_3 . ) project ( METHOD_2 . VAR_2 = cfg ProjectConfig . TYPE_2 { java.lang.Exception throws ) ref java.lang.String , id TYPE_1 , VAR_1 java.lang.String ( METHOD_1 void protected 
private static TYPE_1 METHOD_1 ( final TYPE_1 c , final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { if ( ! ( c . METHOD_2 ( db ) ) ) { throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; } return c ; } } ; c return } ; ) ) ( getId . ) ( getChange . c ( TYPE_3 new throw { ) ) ) db ( METHOD_2 . c ( ! ( if { OrmException . TYPE_4 , TYPE_3 throws ) db ReviewDb . TYPE_2 final , c TYPE_1 final ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( query ( r . getChangeId ( ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_4 < ? > ) ( VAR_2 ) ) ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_4 . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_4 . ) ) ) VAR_2 ( ) > ? < TYPE_4 ( ( ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_4 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ) ) ( getChangeId . r ( query ( METHOD_3 . TYPE_3 = result ChangeInfo . TYPE_2 ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_5 VAR_5 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ; METHOD_6 ( db , VAR_2 , VAR_4 , VAR_5 ) ; } } ; ) VAR_5 , VAR_4 , VAR_2 , db ( METHOD_6 ; ) ( METHOD_5 . ) STRING_1 ( METHOD_4 . ) ( METHOD_3 . TYPE_5 = VAR_5 TYPE_5 ; ) VAR_3 , VAR_1 ( METHOD_2 = VAR_4 TYPE_4 { TYPE_3 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_3 TYPE_2 , VAR_2 org.eclipse.jgit.lib.Repository , VAR_1 TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void private 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 { TYPE_2 . Result r = METHOD_2 ( STRING_1 ) ; r . METHOD_3 ( ) ; TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_4 ( ) , VAR_3 , STRING_2 , STRING_3 , r . getChangeId ( ) ) ; r = VAR_1 . to ( git , ( STRING_4 + ( r . getChange ( ) . change ( ) . getId ( ) . get ( ) ) ) ) ; r . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . r ; ) ) ) ) ( get . ) ( getId . ) ( change . ) ( getChange . r ( + STRING_4 ( , git ( to . VAR_1 = r ; ) ) ( getChangeId . r , STRING_3 , STRING_2 , VAR_3 , ) ( METHOD_4 . admin , db ( create . VAR_2 = VAR_1 TYPE_2 ; ) ( METHOD_3 . r ; ) STRING_1 ( METHOD_2 = r Result . TYPE_2 { TYPE_1 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_2 ; try { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 ) . METHOD_3 ( ) ; VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_2 . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . VAR_2 return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e java.io.IOException ( catch } ; ) VAR_1 ( METHOD_4 . VAR_3 = VAR_2 ; ) ( METHOD_3 . ) VAR_5 ( METHOD_2 . VAR_4 = VAR_3 TYPE_2 { try ; VAR_2 > TYPE_1 , java.lang.String < java.util.Map { com.google.gwtorm.server.OrmException throws ) VAR_1 java.lang.String ( METHOD_1 > java.lang.String < java.util.Set private 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( result . change ) ; cm . METHOD_1 ( VAR_2 . getAccountId ( ) ) ; cm . METHOD_2 ( result . patchSet , result . info ) ; cm . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 = VAR_4 . getId ( ) ; VAR_5 . error ( ( STRING_1 + VAR_3 ) , e ) ; } } } } ; ) e , ) VAR_3 + STRING_1 ( ( error . VAR_5 ; ) ( getId . VAR_4 = VAR_3 com.google.gerrit.reviewdb.client.PatchSet.Id final { ) e TYPE_2 ( catch } ; ) ( METHOD_3 . cm ; ) info . result , patchSet . result ( METHOD_2 . cm ; ) ) ( getAccountId . VAR_2 ( METHOD_1 . cm ; ) change . result ( create . VAR_1 = cm TYPE_1 final { try { ) ( run void public 
public TYPE_1 get ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } VAR_2 = METHOD_2 ( VAR_2 ) ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( VAR_1 ) ; return null ; } return VAR_2 ; } } ; VAR_2 return } ; null return ; ) VAR_1 ( METHOD_4 . VAR_3 { ) ) ( METHOD_3 . VAR_2 ( if ; ) VAR_2 ( METHOD_2 = VAR_2 } ; null return { ) null == VAR_2 ( if ; ) VAR_1 ( METHOD_1 . VAR_3 = VAR_2 TYPE_1 { ) VAR_1 java.lang.String ( get TYPE_1 public 
private java.lang.String METHOD_1 ( TYPE_1 cfg , java.lang.String VAR_1 ) { java.lang.String VAR_2 = cfg . METHOD_2 ( VAR_3 , null , VAR_4 ) ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { VAR_2 = VAR_5 ; } VAR_2 = VAR_2 . METHOD_4 ( STRING_1 , VAR_1 ) ; return VAR_2 ; } } ; VAR_2 return ; ) VAR_1 , STRING_1 ( METHOD_4 . VAR_2 = VAR_2 } ; VAR_5 = VAR_2 { ) ) VAR_2 ( METHOD_3 . TYPE_2 ( if ; ) VAR_4 , null , VAR_3 ( METHOD_2 . cfg = VAR_2 java.lang.String { ) VAR_1 java.lang.String , cfg TYPE_1 ( METHOD_1 java.lang.String private 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . get ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ; TYPE_4 VAR_7 = new TYPE_4 ( account . getId ( ) ) ; VAR_7 . METHOD_5 ( VAR_1 ) ; VAR_7 . METHOD_6 ( account ) ; VAR_7 . commit ( VAR_2 ) ; } } ; ) VAR_2 ( commit . VAR_7 ; ) account ( METHOD_6 . VAR_7 ; ) VAR_1 ( METHOD_5 . VAR_7 ; ) ) ( getId . account ( TYPE_4 new = VAR_7 TYPE_4 ; ) VAR_5 ( METHOD_4 . ) ( METHOD_2 . VAR_2 ; ) VAR_5 ( METHOD_3 . ) ( METHOD_2 . VAR_2 ; ) ( get . VAR_6 = VAR_5 TYPE_3 ; ) VAR_1 , VAR_4 , VAR_3 ( TYPE_2 new = VAR_2 TYPE_2 { TYPE_1 , java.io.IOException throws ) account com.google.gerrit.reviewdb.client.Account , VAR_1 org.eclipse.jgit.lib.Repository ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_1 = repo ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; METHOD_4 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_4 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ; r . METHOD_7 ( ) ; r . METHOD_8 ( VAR_4 , null , admin ) ; r . METHOD_9 ( TYPE_2 . getMessage ( ) ) ; } } ; ) ) ( getMessage . TYPE_2 ( METHOD_9 . r ; ) admin , null , VAR_4 ( METHOD_8 . r ; ) ( METHOD_7 . r ; ) STRING_9 , STRING_4 , STRING_8 , STRING_7 ( METHOD_4 = r Result . TYPE_1 ; ) STRING_6 , project , VAR_3 ( METHOD_6 ; ) VAR_1 ( METHOD_5 . VAR_2 ; ) STRING_5 , STRING_4 , STRING_3 , STRING_2 ( METHOD_4 ; ) ( METHOD_3 . ) STRING_1 ( METHOD_2 . ) ( repo = VAR_1 org.eclipse.jgit.lib.ObjectId { java.lang.Exception throws ) ( METHOD_1 void public 
public static java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String url ) { if ( url ! = null ) { return TYPE_1 . of ( STRING_1 , VAR_1 , STRING_2 , url ) ; } else { return TYPE_1 . of ( STRING_1 , VAR_1 ) ; } } } } ; ) VAR_1 , STRING_1 ( of . TYPE_1 return { else } ; ) url , STRING_2 , VAR_1 , STRING_1 ( of . TYPE_1 return { ) null = ! url ( if { ) url java.lang.String , VAR_1 java.lang.String ( METHOD_1 > java.lang.String , java.lang.String < java.util.Map static public 
private static < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 r , int VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) throws java.lang.Exception { r . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( r . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( true ) ; return METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) ; } } ; ) VAR_2 , VAR_3 ( METHOD_6 . ) ( METHOD_5 return ; ) true ( METHOD_4 . VAR_3 ; ) ) ( METHOD_3 . r ( TYPE_4 new = VAR_3 TYPE_4 ; ) VAR_1 ( METHOD_2 . r { java.lang.Exception throws ) VAR_2 > TYPE_1 < TYPE_3 , VAR_1 int , r TYPE_2 ( METHOD_1 TYPE_1 > TYPE_1 < static private 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ; VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; ) ) ( TYPE_5 new , VAR_2 ( apply . VAR_3 ; ) rsrc , ) ( METHOD_4 . account ( TYPE_4 new = VAR_2 TYPE_4 ; ) ) id ( METHOD_3 . TYPE_3 , VAR_1 ( METHOD_2 . changes = rsrc TYPE_2 { try { TYPE_1 throws ) id java.lang.String ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; java.util.List < TYPE_2 > result = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_2 > > ( ) { } . METHOD_6 ( ) ) ; org.junit.Assert . METHOD_7 ( result . isEmpty ( ) ) ; } } ; ) ) ( isEmpty . result ( METHOD_7 . org.junit.Assert ; ) ) ( METHOD_6 . } { ) ( > > TYPE_2 < java.util.List < TYPE_3 new , ) ( METHOD_5 . r ( METHOD_4 . ) ( METHOD_3 = result > TYPE_2 < java.util.List ; ) ) ( METHOD_2 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) STRING_1 ( get . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private java.util.Map < org.eclipse.jgit.lib.ObjectId , TYPE_1 > METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 < org.eclipse.jgit.lib.ObjectId , TYPE_1 > ( ) ; for ( TYPE_1 r : repo . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . values ( ) ) { if ( TYPE_3 . METHOD_4 ( r . getName ( ) ) ) { VAR_1 . put ( r . METHOD_5 ( ) , r ) ; } } } return VAR_1 ; } } ; VAR_1 return } } } ; ) r , ) ( METHOD_5 . r ( put . VAR_1 { ) ) ) ( getName . r ( METHOD_4 . TYPE_3 ( if { ) ) ( values . ) STRING_1 ( METHOD_3 . ) ( METHOD_2 . repo : r TYPE_1 ( for ; ) ( > TYPE_1 , org.eclipse.jgit.lib.ObjectId < TYPE_2 new = VAR_1 { ) null == ) VAR_1 ( ( if { java.io.IOException throws ) ( METHOD_1 > TYPE_1 , org.eclipse.jgit.lib.ObjectId < java.util.Map private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , TYPE_2 . METHOD_2 ( STRING_3 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) STRING_3 ( METHOD_2 . TYPE_2 , ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( put . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
TYPE_1 METHOD_1 ( final TYPE_2 cm ) { if ( ! ( TYPE_3 . METHOD_2 ( ) ) ) { return METHOD_3 ( cm ) ; } return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_6 ( cm ) ; } } } ; } } ; } } } ; ) cm ( METHOD_6 { ) ) ( METHOD_5 . ) ( METHOD_4 . cm ( if { ) ( run void public { ) ( TYPE_1 new return } ; ) cm ( METHOD_3 return { ) ) ) ( METHOD_2 . TYPE_3 ( ! ( if { ) cm TYPE_2 final ( METHOD_1 TYPE_1 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 ctl = rsrc . METHOD_1 ( ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . METHOD_2 ( db . get ( ) , rsrc . METHOD_3 ( ) ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = ctl . getProject ( ) . METHOD_4 ( ) ; return VAR_2 . apply ( project , ps . getRevision ( ) . get ( ) ) ; } } ; ) ) ( get . ) ( getRevision . ps , project ( apply . VAR_2 return ; ) ( METHOD_4 . ) ( getProject . ctl = project com.google.gerrit.reviewdb.client.Project.NameKey ; ) ) ( METHOD_3 . rsrc , ) ( get . db ( METHOD_2 . VAR_1 = ps com.google.gerrit.reviewdb.client.PatchSet ; ) ( METHOD_1 . rsrc = ctl TYPE_4 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 throws ) rsrc TYPE_2 ( apply TYPE_1 public 
private void METHOD_1 ( TYPE_1 c ) { TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) ! = null ) , STRING_1 , c ) ; TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_2 + STRING_3 ) , METHOD_5 ( ) . getAccountId ( ) , c ) ; } } ; ) c , ) ( getAccountId . ) ( METHOD_5 , ) STRING_3 + STRING_2 ( , ) ) ( getAccountId . ) ( METHOD_5 ( equals . ) ( METHOD_4 . c ( METHOD_2 . TYPE_2 ; ) c , STRING_1 , ) null = ! ) ) ( METHOD_3 . c ( ( ( METHOD_2 . TYPE_2 { ) c TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 ! = null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 ! = VAR_1 ) { VAR_1 . close ( ) ; } } } } } } ; ) ( close . VAR_1 { ) VAR_1 = ! VAR_3 ( if { ) VAR_4 : VAR_3 TYPE_1 ( for } ; ) ( close . VAR_1 { ) null = ! VAR_1 ( if ; ) ( get . VAR_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ; switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) ! = null ? VAR_5 : new TYPE_5 ( ) ; default : throw new TYPE_6 ( ( STRING_1 + VAR_2 ) ) ; } } } } ; ) ) VAR_2 + STRING_1 ( ( TYPE_6 new throw : default ; ) ( TYPE_5 new : VAR_5 ? null = ! ) VAR_5 ( return : VAR_4 case { ) VAR_2 ( switch ; ) VAR_3 ( METHOD_2 . TYPE_4 = VAR_2 TYPE_3 } ; ) ( TYPE_2 new return { ) VAR_1 ( if { ) ( METHOD_1 TYPE_1 private 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( TYPE_1 ctl , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { TYPE_2 id = TYPE_3 . METHOD_2 ( ctl . METHOD_3 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_3 = new com.google.gerrit.reviewdb.client . PatchSetApproval ( new TYPE_4 . Key ( VAR_1 , VAR_2 , id ) , ( ( short ) ( 0 ) ) , TYPE_5 . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( ctl . getChange ( ) ) ; return VAR_3 ; } } ; VAR_3 return ; ) ) ( getChange . ctl ( METHOD_6 . VAR_3 ; ) ) ( METHOD_5 . TYPE_5 , ) ) 0 ( ) short ( ( , ) id , VAR_2 , VAR_1 ( Key . TYPE_4 new ( PatchSetApproval . com.google.gerrit.reviewdb.client new = VAR_3 PatchSetApproval . com.google.gerrit.reviewdb.client ; ) ( METHOD_4 . ) ) ( METHOD_3 . ) ( METHOD_3 . ctl ( METHOD_2 . TYPE_3 = id TYPE_2 { ) VAR_2 com.google.gerrit.reviewdb.client.Account.Id , VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id , ctl TYPE_1 ( METHOD_1 PatchSetApproval . com.google.gerrit.reviewdb.client private 
private void set ( java.lang.String branch , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { final TYPE_1 u = VAR_1 . METHOD_1 ( ( ( VAR_2 ) + branch ) ) ; u . METHOD_2 ( true ) ; u . METHOD_3 ( id ) ; switch ( u . update ( ) ) { case VAR_3 : case VAR_4 : case VAR_5 : break ; default : METHOD_4 ( ( ( ( STRING_1 + branch ) + STRING_2 ) + ( u . METHOD_5 ( ) ) ) ) ; } } } } ; ) ) ) ) ( METHOD_5 . u ( + ) STRING_2 + ) branch + STRING_1 ( ( ( ( METHOD_4 : default ; break : VAR_5 case : VAR_4 case : VAR_3 case { ) ) ( update . u ( switch ; ) id ( METHOD_3 . u ; ) true ( METHOD_2 . u ; ) ) branch + ) VAR_2 ( ( ( METHOD_1 . VAR_1 = u TYPE_1 final { java.io.IOException throws ) id org.eclipse.jgit.lib.ObjectId , branch java.lang.String ( set void private 
protected TYPE_1 METHOD_1 ( java.lang.String path , java.lang.String VAR_1 , int VAR_2 ) throws java.lang.Exception { TYPE_2 req = TYPE_2 . METHOD_2 ( ) ; req . METHOD_3 ( path ) ; if ( VAR_1 ! = null ) { req . METHOD_4 ( VAR_1 ) ; } TYPE_1 res = new TYPE_1 ( ) ; servlet . METHOD_5 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) ; return res ; } } ; res return ; ) ) ( getStatus . res , VAR_2 ( org.junit.Assert.assertEquals ; ) res , req ( METHOD_5 . servlet ; ) ( TYPE_1 new = res TYPE_1 } ; ) VAR_1 ( METHOD_4 . req { ) null = ! VAR_1 ( if ; ) path ( METHOD_3 . req ; ) ( METHOD_2 . TYPE_2 = req TYPE_2 { java.lang.Exception throws ) VAR_2 int , VAR_1 java.lang.String , path java.lang.String ( METHOD_1 TYPE_1 protected 
void METHOD_1 ( int VAR_1 ) { java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ; TYPE_1 . METHOD_2 ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_4 ( TYPE_6 VAR_4 ) { } } ) ; } } ; ) } } { ) VAR_4 TYPE_6 ( METHOD_4 void public } ; ) ) ) ( getParentKey . VAR_3 ( METHOD_3 . TYPE_5 ( display . TYPE_4 { ) result TYPE_3 ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , path , ) ( get . ) ( getParentKey . VAR_3 ( METHOD_2 . TYPE_1 ; ) ( path . ) VAR_1 ( get . VAR_2 = path java.lang.String { ) VAR_1 int ( METHOD_1 void 
private void METHOD_1 ( TYPE_1 w , java.lang.String id ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( id ) ; VAR_1 . append ( STRING_3 ) ; VAR_1 . append ( STRING_4 ) ; VAR_1 . append ( STRING_5 ) ; VAR_1 . append ( STRING_6 ) ; w . METHOD_2 ( ) . METHOD_3 ( STRING_7 , VAR_1 . toString ( ) ) ; } } ; ) ) ( toString . VAR_1 , STRING_7 ( METHOD_3 . ) ( METHOD_2 . w ; ) STRING_6 ( append . VAR_1 ; ) STRING_5 ( append . VAR_1 ; ) STRING_4 ( append . VAR_1 ; ) STRING_3 ( append . VAR_1 ; ) id ( append . VAR_1 ; ) STRING_2 ( append . VAR_1 ; ) STRING_1 ( append . VAR_1 ; ) ( java.lang.StringBuilder new = VAR_1 java.lang.StringBuilder { ) id java.lang.String , w TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( final TYPE_1 r , final TYPE_2 VAR_1 ) { for ( final TYPE_3 VAR_2 : TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( r . METHOD_4 ( VAR_2 . METHOD_5 ( ) . getId ( ) ) ) { METHOD_6 ( r , VAR_1 , VAR_2 ) ; } } } } } } ; ) VAR_2 , VAR_1 , r ( METHOD_6 { ) ) ) ( getId . ) ( METHOD_5 . VAR_2 ( METHOD_4 . r ( if { ) ) ( METHOD_3 . ) ( METHOD_2 . TYPE_4 : VAR_2 TYPE_3 final ( for { ) VAR_1 TYPE_2 final , r TYPE_1 final ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) { com.google.gerrit.reviewdb.client.Change change = rsrc . getChange ( ) ; return new TYPE_3 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ( ( ( ! ( change . METHOD_5 ( ) ) ) & & ( ( change . getStatus ( ) ) ! = ( VAR_1 ) ) ) & & ( METHOD_6 ( rsrc ) ) ) ) ; } } ; ) ) ) ) rsrc ( METHOD_6 ( & & ) ) ) VAR_1 ( = ! ) ) ( getStatus . change ( ( & & ) ) ) ( METHOD_5 . change ( ! ( ( ( ( METHOD_4 . ) STRING_2 ( METHOD_3 . ) STRING_1 ( METHOD_2 . ) ( TYPE_3 new return ; ) ( getChange . rsrc = change com.google.gerrit.reviewdb.client.Change { ) rsrc TYPE_2 ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( TYPE_1 update ) { java.lang.String msg = message . getMessage ( ) ; if ( TYPE_2 . METHOD_2 ( msg ) . METHOD_3 ( ) ) { update . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; return ; } if ( TYPE_3 . METHOD_2 ( msg ) . METHOD_3 ( ) ) { update . METHOD_1 ( VAR_3 ) ; VAR_2 . METHOD_1 ( VAR_3 ) ; } } } } ; ) VAR_3 ( METHOD_1 . VAR_2 ; ) VAR_3 ( METHOD_1 . update { ) ) ( METHOD_3 . ) msg ( METHOD_2 . TYPE_3 ( if } ; return ; ) VAR_1 ( METHOD_1 . VAR_2 ; ) VAR_1 ( METHOD_1 . update { ) ) ( METHOD_3 . ) msg ( METHOD_2 . TYPE_2 ( if ; ) ( getMessage . message = msg java.lang.String { ) update TYPE_1 ( METHOD_1 void private 
public static void METHOD_1 ( java.lang.String query , int VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { TYPE_3 VAR_4 = TYPE_2 . METHOD_2 ( query ) ; if ( VAR_1 > 0 ) { VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ; } TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( ! ( TYPE_4 . equals ( VAR_2 ) ) ) { VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ; } VAR_4 . METHOD_5 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_5 . VAR_4 } ; ) VAR_2 , STRING_2 ( METHOD_3 . VAR_4 { ) ) ) VAR_2 ( equals . TYPE_4 ( ! ( if ; ) VAR_5 , VAR_4 ( METHOD_4 . TYPE_2 } ; ) VAR_1 , STRING_1 ( METHOD_3 . VAR_4 { ) 0 > VAR_1 ( if ; ) query ( METHOD_2 . TYPE_2 = VAR_4 TYPE_3 { ) VAR_3 > TYPE_2 < TYPE_1 , VAR_2 java.lang.String , VAR_1 int , query java.lang.String ( METHOD_1 void static public 
private java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_1 n ) { try { return VAR_1 . METHOD_2 ( db . get ( ) , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) ; return java.util.Collections . METHOD_3 ( ) ; } } } } ; ) ( METHOD_3 . java.util.Collections return ; ) e , ) ) VAR_2 ( + STRING_1 ( ( error . VAR_3 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_2 , ) ( get . db ( METHOD_2 . VAR_1 return { try { ) n TYPE_1 ( METHOD_1 > PatchSetApproval . com.google.gerrit.reviewdb.client < java.util.List private 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String url , java.lang.String VAR_2 ) { if ( ( url == null ) || ( ! ( url . contains ( VAR_1 ) ) ) ) { return url ; } return url . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( METHOD_3 . TYPE_1 , VAR_1 ( METHOD_2 . url return } ; url return { ) ) ) ) VAR_1 ( contains . url ( ! ( || ) null == url ( ( if { ) VAR_2 java.lang.String , url java.lang.String , VAR_1 java.lang.String ( METHOD_1 java.lang.String private 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc . METHOD_1 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc . METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) ; return VAR_1 . apply ( project , commit . getId ( ) . getName ( ) ) ; } } ; ) ) ( getName . ) ( getId . commit , project ( apply . VAR_1 return ; ) ( METHOD_3 . ) ( getProject . ) ( METHOD_2 . rsrc = project com.google.gerrit.reviewdb.client.Project.NameKey ; ) ( METHOD_1 . rsrc = commit org.eclipse.jgit.revwalk.RevCommit { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 throws ) rsrc TYPE_2 ( apply TYPE_1 public 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 u = METHOD_2 ( ) ; if ( u instanceof TYPE_3 ) { return TYPE_4 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; } else if ( u instanceof TYPE_5 ) { return VAR_2 ; } throw new TYPE_6 ( ) ; } } ; ) ( TYPE_6 new throw } ; VAR_2 return { ) TYPE_5 instanceof u ( if else } ; ) VAR_3 , VAR_2 , VAR_1 , ) ( METHOD_5 . ) ( METHOD_4 . u ( METHOD_3 . TYPE_4 return { ) TYPE_3 instanceof u ( if ; ) ( METHOD_2 = u TYPE_2 { ) ( METHOD_1 TYPE_1 protected 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; view . METHOD_3 ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; METHOD_5 ( VAR_4 ) ; TYPE_3 a ; TYPE_4 config ; TYPE_5 to ; TYPE_6 VAR_5 ; } } ; VAR_5 TYPE_6 ; to TYPE_5 ; config TYPE_4 ; a TYPE_3 ; ) VAR_4 ( METHOD_5 ; ) ) ( METHOD_2 . VAR_1 , STRING_1 ( METHOD_4 . ) VAR_3 ( METHOD_3 . view ; ) ) ( METHOD_2 . VAR_1 , STRING_1 ( METHOD_4 . ) VAR_2 ( METHOD_3 . view ; ) ) ( getValue . e ( METHOD_2 . VAR_1 { ) e > TYPE_2 < TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo . commit ( ) . create ( ) ; repo . METHOD_2 ( 1 ) ; TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , commit ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_4 ( commit ) ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_4 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_4 , ) 2 + ) VAR_2 ( ( ( org.junit.Assert.assertEquals ; ) ) commit ( METHOD_4 , ) 1 + ) VAR_2 ( ( ( org.junit.Assert.assertEquals ; ) commit , STRING_1 ( METHOD_3 . repo = VAR_1 TYPE_1 ; ) 1 ( METHOD_2 . repo ; ) ( create . ) ( commit . repo = commit org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . info ( STRING_1 , VAR_1 ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( VAR_1 ) ; VAR_2 . info ( STRING_2 , VAR_1 ) ; } else { VAR_2 . METHOD_6 ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ; } } } } ; ) VAR_1 , ) ) STRING_5 + STRING_4 ( + STRING_3 ( ( METHOD_6 . VAR_2 { else } ; ) VAR_1 , STRING_2 ( info . VAR_2 ; ) VAR_1 ( METHOD_5 { ) ) VAR_1 ( METHOD_4 . TYPE_2 ( if else } ; ) VAR_1 , STRING_1 ( info . VAR_2 ; ) VAR_1 ( METHOD_3 . TYPE_2 { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , TYPE_5 . create ( 0 , 0 , INT_1 , INT_2 ) ) ; } } ; ) ) INT_2 , INT_1 , 0 , 0 ( create . TYPE_5 , VAR_2 ( TYPE_4 new = VAR_4 ; ) VAR_2 ( TYPE_3 new = VAR_3 ; ) index ( METHOD_2 . VAR_2 ; ) ( TYPE_2 new = VAR_2 ; ) VAR_1 ( TYPE_1 new = index { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args , java.lang.String label , int VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) { return new TYPE_3 ( args , label , VAR_1 , null ) ; } java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( ) ; for ( com.google.gerrit.reviewdb.client.Account.Id a : VAR_2 ) { r . add ( new TYPE_3 ( args , label , VAR_1 , a ) ) ; } return METHOD_2 ( r ) ; } } ; ) r ( METHOD_2 return } ; ) ) a , VAR_1 , label , args ( TYPE_3 new ( add . r { ) VAR_2 : a com.google.gerrit.reviewdb.client.Account.Id ( for ; ) ( > < java.util.ArrayList new = r > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List } ; ) null , VAR_1 , label , args ( TYPE_3 new return { ) ) ) ( isEmpty . VAR_2 ( || ) null == ) VAR_2 ( ( ( if { ) VAR_1 int , label java.lang.String , args TYPE_2 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 static private 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ; int e = VAR_1 . METHOD_4 ( CHAR_1 ) ; TYPE_2 . METHOD_2 ( ( e > = 0 ) , STRING_2 , VAR_1 ) ; return TYPE_1 . create ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; } } ; ) ) ) ( length . VAR_1 , ) ) 1 + e ( ( METHOD_5 . VAR_1 ( METHOD_6 . TYPE_4 , ) e , 0 ( METHOD_5 . VAR_1 ( create . TYPE_1 return ; ) VAR_1 , STRING_2 , ) 0 = > e ( ( METHOD_2 . TYPE_2 ; ) CHAR_1 ( METHOD_4 . VAR_1 = e int ; ) STRING_1 , ) ) ) VAR_1 ( METHOD_3 . TYPE_3 ( ! ( ( METHOD_2 . TYPE_2 { ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 static public 
private TYPE_1 METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( ( VAR_1 ? METHOD_2 ( ) : METHOD_3 ( ) ) ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) ; return METHOD_5 ( ) . METHOD_6 ( r . METHOD_7 ( ) , VAR_4 class ) ; } } ; ) class VAR_4 , ) ( METHOD_7 . r ( METHOD_6 . ) ( METHOD_5 return ; ) ) ( METHOD_4 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) ) ) ( METHOD_3 : ) ( METHOD_2 ? VAR_1 ( ( get . VAR_2 = r TYPE_2 { java.io.IOException throws ) VAR_1 boolean ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( 1 ) ; assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ; final TYPE_1 VAR_2 = new TYPE_1 ( 0 ) ; VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ; assertEquals ( VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 ( assertEquals ; ) ) ( toString . VAR_1 ( METHOD_2 . VAR_2 ; ) 0 ( TYPE_1 new = VAR_2 TYPE_1 final ; ) ) ( toString . VAR_1 , STRING_1 ( assertEquals ; ) 1 ( TYPE_1 new = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
private java.lang.String METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.io.IOException { TYPE_1 out = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( out ) ; VAR_3 . METHOD_2 ( repo ) ; VAR_3 . format ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return out . toString ( ) ; } } ; ) ( toString . out return ; ) ( METHOD_3 . VAR_3 ; ) VAR_2 , VAR_1 ( format . VAR_3 ; ) repo ( METHOD_2 . VAR_3 ; ) out ( TYPE_2 new = VAR_3 TYPE_2 ; ) ( TYPE_1 new = out TYPE_1 { java.io.IOException throws ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 org.eclipse.jgit.lib.ObjectId , repo org.eclipse.jgit.lib.Repository ( METHOD_1 java.lang.String private 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { java.lang.String name = ( ( info . METHOD_2 ( ) . name ( ) ) ! = null ) ? info . METHOD_2 ( ) . name ( ) : TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( name ) ; VAR_1 . METHOD_6 ( name ) ; } } ; ) name ( METHOD_6 . VAR_1 ; ) name ( METHOD_5 . VAR_1 ; ) ( METHOD_4 . ) ( METHOD_3 . TYPE_2 : ) ( name . ) ( METHOD_2 . info ? ) null = ! ) ) ( name . ) ( METHOD_2 . info ( ( = name java.lang.String { ) info ChangeInfo . TYPE_1 ( METHOD_1 void private 
private java.lang.String METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { if ( ( VAR_1 . size ( ) ) < = 0 ) { return STRING_1 ; } java.lang.StringBuilder out = new java.lang.StringBuilder ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( out . length ( ) ) > 0 ) { out . append ( STRING_2 ) ; } out . append ( VAR_2 . getValue ( ) ) ; } return ( STRING_3 + STRING_4 ) + ( out . toString ( ) ) ; } } ; ) ) ( toString . out ( + ) STRING_4 + STRING_3 ( return } ; ) ) ( getValue . VAR_2 ( append . out } ; ) STRING_2 ( append . out { ) 0 > ) ) ( length . out ( ( if { ) VAR_1 : VAR_2 TYPE_1 ( for ; ) ( java.lang.StringBuilder new = out java.lang.StringBuilder } ; STRING_1 return { ) 0 = < ) ) ( size . VAR_1 ( ( if { ) VAR_1 > TYPE_1 < java.util.Set ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_5 ( VAR_3 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . ) VAR_10 ( METHOD_6 . ) VAR_9 ( METHOD_5 . ) VAR_8 , VAR_3 ( METHOD_5 . ) VAR_7 ( to . ) VAR_6 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 , VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_3 ( git , false ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( ) . METHOD_5 ( 0 ) ) . isEqualTo ( change . METHOD_6 ( ) . METHOD_5 ( 0 ) ) ; } } ; ) ) 0 ( METHOD_5 . ) ( METHOD_6 . change ( isEqualTo . ) ) 0 ( METHOD_5 . ) ( METHOD_4 ( com.google.common.truth.Truth.assertThat ; ) false , git ( METHOD_3 ; ) ) ( getChangeId . change ( submit ; ) git ( METHOD_2 = change Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 . Change change , TYPE_3 user ) throws TYPE_4 { final TYPE_5 . NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( change.getId ( ) , e ) ; } } } } ; ) e , ) ( change.getId ( TYPE_4 new throw { ) e TYPE_6 ( catch } ; ) change ( METHOD_1 . ) user , VAR_1 ( METHOD_1 . VAR_2 return { try ; ) ( getProject . change = VAR_1 NameKey . TYPE_5 final { TYPE_4 throws ) user TYPE_3 , change Change . TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) ; assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ; } } ; ) ) ( toString . a , ) VAR_2 + ) STRING_4 + ) VAR_1 + STRING_3 ( ( ( ( assertEquals ; ) ) VAR_1 ( METHOD_4 . a , VAR_2 ( assertEquals ; ) ) ( METHOD_3 . ) ( METHOD_2 . a , VAR_1 ( assertEquals ; ) VAR_2 , VAR_1 ( TYPE_1 new = a TYPE_1 final ; STRING_2 = VAR_2 java.lang.String final ; STRING_1 = VAR_1 java.lang.String final { ) ( METHOD_1 void public 
public static void submit ( int id , java.lang.String commit , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 in = TYPE_3 . create ( ) ; in . METHOD_1 ( true ) ; TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . data ( in ) . METHOD_3 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_3 . ) in ( data . ) STRING_1 , commit , id ( METHOD_2 . TYPE_4 ; ) true ( METHOD_1 . in ; ) ( create . TYPE_3 = in TYPE_3 { ) VAR_1 > TYPE_2 < TYPE_1 , commit java.lang.String , id int ( submit void static public 
public void set ( com.google.gerrit.reviewdb.client.PatchSet.Id base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , boolean VAR_6 ) { this . base = base ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; this . VAR_6 = VAR_6 ; } } ; VAR_6 = VAR_6 . this ; VAR_5 = VAR_5 . this ; VAR_4 = VAR_4 . this ; VAR_3 = VAR_3 . this ; VAR_2 = VAR_2 . this ; VAR_1 = VAR_1 . this ; base = base . this { ) VAR_6 boolean , VAR_5 TYPE_3 , VAR_4 TYPE_2 , VAR_3 TYPE_2 , VAR_2 TYPE_1 , VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id , base com.google.gerrit.reviewdb.client.PatchSet.Id ( set void public 
public static void METHOD_1 ( int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 in = TYPE_3 . create ( ) ; in . METHOD_2 ( path ) ; in . METHOD_3 ( VAR_1 ) ; TYPE_4 . edit ( id ) . METHOD_4 ( in , VAR_2 ) ; } } ; ) VAR_2 , in ( METHOD_4 . ) id ( edit . TYPE_4 ; ) VAR_1 ( METHOD_3 . in ; ) path ( METHOD_2 . in ; ) ( create . TYPE_3 = in TYPE_3 { ) VAR_2 > TYPE_2 < TYPE_1 , VAR_1 java.lang.String , path java.lang.String , id int ( METHOD_1 void static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_8 ( STRING_1 , VAR_2 ) . METHOD_9 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) ; } } ; ) VAR_10 ( METHOD_10 . ) VAR_9 ( to . ) VAR_8 , VAR_7 , VAR_6 , VAR_5 , VAR_3 ( METHOD_9 . ) VAR_2 , STRING_1 ( METHOD_8 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_3 , VAR_2 ( METHOD_7 ; ) ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 args ) throws TYPE_4 { TYPE_5 user = args . METHOD_2 ( ) ; if ( user . METHOD_3 ( ) ) { return VAR_1 . get ( args . METHOD_2 ( ) . getAccountId ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) ; } return VAR_2 . Collections < TYPE_2 > METHOD_6 ( ) ; } } ; ) ( METHOD_6 > TYPE_2 < Collections . VAR_2 return } ; ) ( METHOD_5 . ) ( METHOD_4 . ) ) ( getAccountId . ) ( METHOD_2 . args ( get . VAR_1 return { ) ) ( METHOD_3 . user ( if ; ) ( METHOD_2 . args = user TYPE_5 { TYPE_4 throws ) args TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 static private 
private Account . Id METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 . OrmException { final TYPE_3 . Account a = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( a == null ) { throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return a . getId ( ) ; } } ; ) ( getId . a return } ; ) ) STRING_2 + ) VAR_1 + STRING_1 ( ( ( TYPE_1 new throw { ) null == a ( if ; ) VAR_1 ( METHOD_2 . VAR_2 = a Account . TYPE_3 final { OrmException . TYPE_2 , TYPE_1 throws ) VAR_1 java.lang.String final ( METHOD_1 Id . Account private 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { org.junit.Assert.assertEquals ( VAR_1 . ref , VAR_2 . ref ) ; if ( ( VAR_1 . revision ) ! = null ) { org.junit.Assert.assertEquals ( VAR_1 . revision , VAR_2 . revision ) ; } org.junit.Assert.assertEquals ( VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 ) ) ; } } ; ) ) VAR_4 ( METHOD_2 . TYPE_2 , VAR_3 ( org.junit.Assert.assertEquals } ; ) revision . VAR_2 , revision . VAR_1 ( org.junit.Assert.assertEquals { ) null = ! ) revision . VAR_1 ( ( if ; ) ref . VAR_2 , ref . VAR_1 ( org.junit.Assert.assertEquals { ) VAR_2 TYPE_1 , VAR_1 TYPE_1 ( METHOD_1 void static public 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_3 ( ) ; VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ) ) ) ( getChangeId . r ( + STRING_1 ( ( id . ) ( changes . VAR_1 ; ) ( METHOD_3 . ) ) ) ) ( getChangeId . r ( + STRING_1 ( ( id . ) ( changes . VAR_1 ; ) ( METHOD_2 = r Result . TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( isEmpty ( ) ) { return ; } try { METHOD_2 ( ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_3 ( ) ; } METHOD_4 ( ) ; TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_1 . METHOD_1 ( VAR_3 ) ; } finally { if ( ( VAR_2 ) ! = null ) { VAR_2 . close ( ) ; } if ( ( VAR_3 ) ! = null ) { VAR_3 . close ( ) ; } } } } } } ; ) ( close . VAR_3 { ) null = ! ) VAR_3 ( ( if } ; ) ( close . VAR_2 { ) null = ! ) VAR_2 ( ( if { finally } ; ) VAR_3 ( METHOD_1 . TYPE_1 ; ) VAR_2 ( METHOD_1 . TYPE_1 ; ) ( METHOD_4 } ; ) ( METHOD_3 { ) ) ) ( isEmpty . VAR_1 ( ! ( if ; ) ( METHOD_2 { try } ; return { ) ) ( isEmpty ( if { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; } } ; ) ( getChangeId . ) STRING_1 , git ( to . VAR_2 return ; ) ) VAR_6 ( java.lang.String new , VAR_5 , VAR_4 , VAR_1 , db ( create . VAR_3 = VAR_2 TYPE_3 { java.lang.Exception throws ) VAR_1 TYPE_2 , git TYPE_1 ( METHOD_1 java.lang.String private 
private static TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . patchSets ( ) ; TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = TYPE_4 . METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId ( ) . get ( ) , ps ) ; } return result ; } } ; result return } ; ) ps , ) ( get . ) ( getId . ps ( put . result { ) patchSets : ps com.google.gerrit.reviewdb.client.PatchSet ( for ; ) ( METHOD_2 . TYPE_4 = result > com.google.gerrit.reviewdb.client.PatchSet , TYPE_2 < TYPE_1 ; ) ( patchSets . cd = patchSets > com.google.gerrit.reviewdb.client.PatchSet < TYPE_3 { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData ( METHOD_1 > com.google.gerrit.reviewdb.client.PatchSet , TYPE_2 < TYPE_1 static private 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; } } ; ) ) ) STRING_4 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_5 ; ) ) ) STRING_3 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_3 ; ) ) ) STRING_2 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_3 ; ) STRING_1 ( METHOD_2 . TYPE_2 = p TYPE_1 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; if ( VAR_3 . METHOD_2 ( ) ) { TYPE_3 VAR_4 = new TYPE_3 ( ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = METHOD_3 ( VAR_4 ) ; if ( VAR_5 ! = null ) { if ( VAR_4 . get ( ) ) { VAR_1 . METHOD_4 ( getRefName ( ) ) ; } else { VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; } } } } } } } } ; ) VAR_2 ( METHOD_6 . VAR_1 ; ) VAR_5 ( METHOD_5 . VAR_2 { else } ; ) ) ( getRefName ( METHOD_4 . VAR_1 { ) ) ( get . VAR_4 ( if { ) null = ! VAR_5 ( if ; ) VAR_4 ( METHOD_3 = VAR_5 org.eclipse.jgit.lib.ObjectId ; ) ( TYPE_3 new = VAR_4 TYPE_3 { ) ) ( METHOD_2 . VAR_3 ( if ; ) ( TYPE_2 new = VAR_2 TYPE_2 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_1 ( METHOD_1 void public 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { r . append ( STRING_1 ) ; r . append ( METHOD_5 ( ) ) ; r . append ( STRING_2 ) ; } return r . toString ( ) ; } } ; ) ( toString . r return } ; ) STRING_2 ( append . r ; ) ) ( METHOD_5 ( append . r ; ) STRING_1 ( append . r { ) ) ( METHOD_4 . VAR_1 ( if ; ) ) ) ( METHOD_3 ( METHOD_2 . VAR_2 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 java.lang.String public 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = TYPE_2 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ; TYPE_3 . METHOD_2 ( change , STRING_1 , changeId ) ; TYPE_3 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) change , project , args ( TYPE_1 new return ; ) ) ( getProject . change , changeId , project , ) STRING_3 + STRING_2 ( , ) project ( equals . ) ( getProject . change ( METHOD_3 . TYPE_3 ; ) changeId , STRING_1 , change ( METHOD_2 . TYPE_3 ; ) changeId ( get . ) ( changes . ) db ( METHOD_1 . TYPE_2 = change com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) changeId Id . com.google.gerrit.reviewdb.client.Change , project com.google.gerrit.reviewdb.client.Project.NameKey , db com.google.gerrit.reviewdb.server.ReviewDb ( create TYPE_1 public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( java.lang.StringBuilder ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_2 ) ) ) ; METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_3 ) ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_4 ( assertEquals ; ) ) ) STRING_3 ( java.lang.StringBuilder new ( append . b , b ( METHOD_2 ; ) ) ) STRING_2 ( java.lang.StringBuilder new ( append . b , b ( METHOD_2 ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) ) ) null ( ) java.lang.StringBuilder ( ( ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
void METHOD_1 ( ) { TYPE_1 c = null ; try { c = METHOD_2 ( ) ; TYPE_2 s = VAR_1 . METHOD_3 ( ) ; try { s . METHOD_4 ( STRING_1 ) ; } finally { s . close ( ) ; } VAR_2 = METHOD_5 ( ) ; } catch ( TYPE_3 e ) { VAR_3 . METHOD_6 ( ( STRING_2 + ( url ) ) , e ) ; c = close ( c ) ; } finally { METHOD_7 ( c ) ; } } } } ; ) c ( METHOD_7 { finally } ; ) c ( close = c ; ) e , ) ) url ( + STRING_2 ( ( METHOD_6 . VAR_3 { ) e TYPE_3 ( catch } ; ) ( METHOD_5 = VAR_2 } ; ) ( close . s { finally } ; ) STRING_1 ( METHOD_4 . s { try ; ) ( METHOD_3 . VAR_1 = s TYPE_2 ; ) ( METHOD_2 = c { try ; null = c TYPE_1 { ) ( METHOD_1 void 
public static void METHOD_1 ( final java.lang.String [ ] VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { VAR_3 . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( 1 ) ; } VAR_4 . METHOD_3 ( ( STRING_2 + VAR_2 ) ) ; } } ; ) ) VAR_2 + STRING_2 ( ( METHOD_3 . VAR_4 } ; ) 1 ( METHOD_4 . TYPE_2 ; ) STRING_1 ( METHOD_3 . VAR_3 { ) null == VAR_2 ( if ; ) ( METHOD_2 . TYPE_1 = VAR_2 java.lang.String final { ) VAR_1 ] [ java.lang.String final ( METHOD_1 void static public 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , TYPE_3 . METHOD_4 ( ) ) ; java.util.Set < java.lang.String > VAR_1 = TYPE_4 . of ( ( STRING_1 + ( VAR_2 ) ) ) ; com.google.common.truth.Truth.assertThat ( TYPE_5 . METHOD_5 ( m ) ) . METHOD_6 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_6 . ) ) m ( METHOD_5 . TYPE_5 ( com.google.common.truth.Truth.assertThat ; ) ) ) VAR_2 ( + STRING_1 ( ( of . TYPE_4 = VAR_1 > java.lang.String < java.util.Set ; ) ) ( METHOD_4 . TYPE_3 , c , repo ( METHOD_3 . TYPE_2 = m > TYPE_1 < java.util.List ; ) ( METHOD_2 = c org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
boolean add ( final TYPE_1 VAR_1 ) { synchronized ( this ) { if ( ( ! ( VAR_2 ) ) & & ( ! ( VAR_3 ) ) ) { if ( VAR_4 . isEmpty ( ) ) { TYPE_2 . METHOD_1 ( ) . METHOD_2 ( this ) ; } VAR_4 . add ( VAR_1 ) ; return true ; } else { return false ; } } } } } } ; false return { else } ; true return ; ) VAR_1 ( add . VAR_4 } ; ) this ( METHOD_2 . ) ( METHOD_1 . TYPE_2 { ) ) ( isEmpty . VAR_4 ( if { ) ) ) VAR_3 ( ! ( & & ) ) VAR_2 ( ! ( ( if { ) this ( synchronized { ) VAR_1 TYPE_1 final ( add boolean 
public void METHOD_1 ( final boolean on ) { VAR_1 = on ; if ( VAR_1 ) { final TYPE_1 p = getValue ( ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; } else { VAR_2 . METHOD_3 ( false ) ; } METHOD_5 ( update . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . update ( METHOD_5 } ; ) false ( METHOD_3 . VAR_2 { else } ; ) ) ( METHOD_4 . p ( METHOD_3 . VAR_2 ; ) ( METHOD_2 . ) ( getValue = p TYPE_1 final { ) VAR_1 ( if ; on = VAR_1 { ) on boolean final ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_4 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) ) VAR_3 ( + ) ) ) STRING_6 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_5 ( METHOD_5 . TYPE_2 ( + ) ) VAR_2 ( + STRING_4 ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 , VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_6 ( VAR_12 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( METHOD_6 . ) VAR_12 ( METHOD_6 . ) VAR_11 ( METHOD_5 . ) VAR_10 , VAR_9 ( METHOD_5 . ) VAR_8 ( to . ) VAR_7 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_6 ( assertThat ; ) VAR_5 , VAR_4 , changeId . VAR_1 ( METHOD_3 ; ) VAR_3 , VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( METHOD_3 . res , VAR_1 ( org.junit.Assert.assertEquals ; ) ) ( getStatus . res , VAR_2 ( org.junit.Assert.assertEquals ; ) res , req ( METHOD_2 . servlet ; ) ( TYPE_2 new = res TYPE_2 { java.lang.Exception throws ) req TYPE_1 , VAR_1 java.lang.String ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 , null , VAR_4 , VAR_5 ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_5 ) ; } } ; ) VAR_5 ( isEqualTo . ) ) ( user . ) ( http . ) ( METHOD_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_5 , VAR_4 , null , VAR_3 ( METHOD_3 . VAR_2 ; ) VAR_1 ( isEqualTo . ) ) ( user . ) ( http . ) ( METHOD_2 ( com.google.common.truth.Truth.assertThat { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 t ) { try { VAR_1 [ ( ++ ( VAR_2 ) ) ] = t ; } catch ( TYPE_2 e ) { int VAR_3 = VAR_1 . length ; TYPE_1 [ ] VAR_4 = new TYPE_1 [ VAR_3 + INT_1 ] ; TYPE_3 . METHOD_2 ( VAR_1 , 0 , VAR_4 , 0 , VAR_3 ) ; VAR_1 = VAR_4 ; VAR_1 [ VAR_2 ] = t ; } } } } ; t = ] VAR_2 [ VAR_1 ; VAR_4 = VAR_1 ; ) VAR_3 , 0 , VAR_4 , 0 , VAR_1 ( METHOD_2 . TYPE_3 ; ] INT_1 + VAR_3 [ TYPE_1 new = VAR_4 ] [ TYPE_1 ; length . VAR_1 = VAR_3 int { ) e TYPE_2 ( catch } ; t = ] ) ) VAR_2 ( ++ ( [ VAR_1 { try { ) t TYPE_1 ( METHOD_1 void public 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ; if ( c ! = null ) { return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( java.util.Collections . METHOD_2 ( VAR_2 . create ( VAR_1 . get ( ) , c ) ) ) ; } else { return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( VAR_3 . Collections < com.google.gerrit.server.query.change.ChangeData > METHOD_3 ( ) ) ; } } } } ; ) ) ( METHOD_3 > com.google.gerrit.server.query.change.ChangeData < Collections . VAR_3 ( > com.google.gerrit.server.query.change.ChangeData < TYPE_2 new return { else } ; ) ) ) c , ) ( get . VAR_1 ( create . VAR_2 ( METHOD_2 . java.util.Collections ( > com.google.gerrit.server.query.change.ChangeData < TYPE_2 new return { ) null = ! c ( if ; ) id ( get . ) ( changes . ) ( get . VAR_1 = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 public 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ; if ( VAR_2 == null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ; } TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_5 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_4 . get ( ) . METHOD_4 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_4 . ) ( get . VAR_4 return ; ) ) ( METHOD_3 . ) ) ( getName . TYPE_5 ( get . ) ( METHOD_2 . VAR_2 ( TYPE_4 new = VAR_3 TYPE_4 } ; ) STRING_2 ( get . ) ( METHOD_2 . VAR_1 = VAR_2 { ) null == VAR_2 ( if ; ) STRING_1 ( get . ) ( METHOD_2 . VAR_1 = VAR_2 TYPE_3 { ) VAR_1 TYPE_3 ( METHOD_1 > TYPE_2 < TYPE_1 private 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Change change = VAR_1 . change ( VAR_2 ) ; if ( change == null ) { return false ; } final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , change . METHOD_2 ( ) ) ; return VAR_3 . METHOD_3 ( ) . contains ( VAR_5 ) ; } } ; ) VAR_5 ( contains . ) ( METHOD_3 . VAR_3 return ; ) ) ( METHOD_2 . change , VAR_2 ( create . VAR_4 = VAR_3 TYPE_1 final } ; false return { ) null == change ( if ; ) VAR_2 ( change . VAR_1 = change com.google.gerrit.reviewdb.client.Change final { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
private TYPE_1 . Result METHOD_1 ( java.lang.String topic ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( topic ) . METHOD_3 ( ) ; return VAR_1 . to ( git , ( STRING_1 + topic ) ) ; } } ; ) ) topic + STRING_1 ( , git ( to . VAR_1 return ; ) ( METHOD_3 . ) topic ( com.google.common.truth.Truth.assertThat ; ) ) ( METHOD_2 . admin , db ( create . VAR_2 = VAR_1 TYPE_3 { TYPE_2 , java.io.IOException throws ) topic java.lang.String ( METHOD_1 Result . TYPE_1 private 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = VAR_3 . create ( project ) ; try { TYPE_2 r = new TYPE_2 ( ) ; r . METHOD_2 ( VAR_2 ) ; VAR_4 = VAR_1 ; r . commit ( VAR_2 ) ; } finally { VAR_2 . close ( ) ; } } } } ; ) ( close . VAR_2 { finally } ; ) VAR_2 ( commit . r ; VAR_1 = VAR_4 ; ) VAR_2 ( METHOD_2 . r ; ) ( TYPE_2 new = r TYPE_2 { try ; ) project ( create . VAR_3 = VAR_2 TYPE_1 { java.lang.Exception throws ) VAR_1 java.lang.String ( METHOD_1 void private 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . rw = walk ; this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id ! = null ) ? walk . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { walk = null ; VAR_1 = null ; } } } } ; null = VAR_1 ; null = walk { finally } ; ) ( METHOD_3 ; null : ) id ( parseCommit . walk ? ) null = ! id ( = revision { try ; ) ( METHOD_2 . walk = VAR_1 . this ; walk = rw . this { TYPE_1 , java.io.IOException throws ) id org.eclipse.jgit.lib.ObjectId , walk org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 void public 
public void run ( ) { final com.google.gerrit.reviewdb.server.ReviewDb db ; try { db = VAR_1 . METHOD_1 ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { e . METHOD_2 ( ) ; return ; } try { for ( ; ; ) { final TYPE_1 VAR_2 = METHOD_3 ( ) ; if ( VAR_2 == null ) { break ; } METHOD_4 ( db , VAR_2 ) ; synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } finally { db . close ( ) ; } } } } ; ) ( close . db { finally } } } ; ) 1 ( update . VAR_3 { ) VAR_3 ( synchronized ; ) VAR_2 , db ( METHOD_4 } ; break { ) null == VAR_2 ( if ; ) ( METHOD_3 = VAR_2 TYPE_1 final { ) ; ; ( for { try } ; return ; ) ( METHOD_2 . e { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ( METHOD_1 . VAR_1 = db { try ; db com.google.gerrit.reviewdb.server.ReviewDb final { ) ( run void public 
private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 . ProjectConfig config ) { java.util.Set < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; for ( TYPE_3 VAR_2 : config . METHOD_2 ( ) ) { VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( METHOD_3 . VAR_2 ( add . VAR_1 { ) ) ( METHOD_2 . config : VAR_2 TYPE_3 ( for ; ) ( > java.lang.String < TYPE_2 new = VAR_1 > java.lang.String < java.util.Set { ) config ProjectConfig . TYPE_1 ( METHOD_1 > java.lang.String < java.util.Set static private 
private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ; try { TYPE_5 in = new TYPE_6 ( VAR_2 ) ; try { in = TYPE_7 . METHOD_3 ( in ) ; return new TYPE_1 ( in ) ; } finally { in . close ( ) ; } } catch ( java.io.IOException e ) { throw new TYPE_3 ( e ) ; } catch ( TYPE_8 e ) { throw new TYPE_3 ( e ) ; } } } } ; ) e ( TYPE_3 new throw { ) e TYPE_8 ( catch } ; ) e ( TYPE_3 new throw { ) e java.io.IOException ( catch } } ; ) ( close . in { finally } ; ) in ( TYPE_1 new return ; ) in ( METHOD_3 . TYPE_7 = in { try ; ) VAR_2 ( TYPE_6 new = in TYPE_5 { try ; ) STRING_1 , ) ( METHOD_2 . VAR_1 ( TYPE_4 new = VAR_2 TYPE_4 final { TYPE_3 throws ) VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 private 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.List < java.lang.String > add ) throws TYPE_2 { TYPE_3 in = new TYPE_3 ( ) ; in . add = add ; try { return VAR_1 . apply ( account , in ) ; } catch ( TYPE_4 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException | TYPE_4 ( catch } ; ) in , account ( apply . VAR_1 return { try ; add = add . in ; ) ( TYPE_3 new = in TYPE_3 { TYPE_2 throws ) add > java.lang.String < java.util.List ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map public 
private void METHOD_1 ( ) { if ( ( ! ( VAR_1 . isEmpty ( ) ) ) & & ( ! ( METHOD_2 ( ) ) ) ) { for ( TYPE_1 < java.lang.String , TYPE_2 > VAR_2 : VAR_1 . METHOD_3 ( ) ) { VAR_2 . getValue ( ) . METHOD_4 ( projectName . get ( ) , VAR_2 . getKey ( ) , VAR_3 , VAR_4 ) ; } } } } } } ; ) VAR_4 , VAR_3 , ) ( getKey . VAR_2 , ) ( get . projectName ( METHOD_4 . ) ( getValue . VAR_2 { ) ) ( METHOD_3 . VAR_1 : VAR_2 > TYPE_2 , java.lang.String < TYPE_1 ( for { ) ) ) ) ( METHOD_2 ( ! ( & & ) ) ) ( isEmpty . VAR_1 ( ! ( ( if { ) ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( VAR_5 ) ; TYPE_2 p = new TYPE_2 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 , p ) ; if ( ( p . value ) > = ( VAR_1 . length ) ) { VAR_6 = null ; return ; } VAR_6 = TYPE_4 . METHOD_5 ( METHOD_1 ( VAR_1 , p . value ) ) ; } } ; ) ) value . p , VAR_1 ( METHOD_1 ( METHOD_5 . TYPE_4 = VAR_6 } ; return ; null = VAR_6 { ) ) length . VAR_1 ( = > ) value . p ( ( if ; ) p , VAR_1 ( METHOD_4 . TYPE_3 ; ) ( TYPE_2 new = p TYPE_2 ; ) VAR_5 ( METHOD_3 . ) VAR_4 , VAR_3 ( METHOD_2 . VAR_2 = VAR_1 { TYPE_1 , java.io.IOException throws ) ( METHOD_1 void public 
public TYPE_1 . Change update ( TYPE_1 . Change c ) { c . METHOD_1 ( VAR_1 ) ; c . METHOD_2 ( true ) ; if ( ! ( VAR_2 . equals ( c . currentPatchSetId ( ) ) ) ) { try { c . METHOD_3 ( VAR_3 . get ( VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { VAR_5 . error ( ( STRING_1 + VAR_2 ) , VAR_4 ) ; } } TYPE_3 . METHOD_4 ( c ) ; return c ; } } ; c return ; ) c ( METHOD_4 . TYPE_3 } } ; ) VAR_4 , ) VAR_2 + STRING_1 ( ( error . VAR_5 { ) VAR_4 TYPE_2 ( catch } ; ) ) VAR_2 ( get . VAR_3 ( METHOD_3 . c { try { ) ) ) ) ( currentPatchSetId . c ( equals . VAR_2 ( ! ( if ; ) true ( METHOD_2 . c ; ) VAR_1 ( METHOD_1 . c { ) c Change . TYPE_1 ( update Change . TYPE_1 public 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { return METHOD_2 ( VAR_1 ) ; } switch ( status . getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } } ; STRING_6 + ) ) VAR_6 ( + ) STRING_5 + ) ) VAR_5 ( + ) STRING_4 + ) ) VAR_4 ( + STRING_3 ( ( ( ( ( return : default ; STRING_2 return : VAR_3 case ; STRING_1 return : VAR_2 case { ) ) ( getStatus . status ( switch } ; ) VAR_1 ( METHOD_2 return { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 java.lang.String public 
private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_3 u : VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = VAR_3 ; } else if ( ( VAR_3 ) ! = VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) STRING_1 ( TYPE_4 new throw { ) VAR_2 = ! ) VAR_3 ( ( if else } ; VAR_3 = VAR_2 { ) null == VAR_2 ( if { ) VAR_1 : u TYPE_3 ( for ; null = VAR_2 TYPE_1 { ) VAR_1 > TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 static private 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) || ( METHOD_4 ( db ) ) ) { return false ; } if ( METHOD_5 ( ) ) { return true ; } return METHOD_6 ( ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ( METHOD_6 return } ; true return { ) ) ( METHOD_5 ( if } ; false return { ) ) ) db ( METHOD_4 ( || ) ) ) VAR_2 ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( ! ( ( if { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
public synchronized < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( java.lang.String name , TYPE_4 VAR_1 , TYPE_5 < TYPE_1 > VAR_2 , TYPE_5 < TYPE_2 > VAR_3 ) { TYPE_6 . METHOD_2 ( VAR_1 ) ; TYPE_7 m = new TYPE_7 ( this , name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_4 . put ( name , m ) ; return m . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . m return ; ) m , name ( put . VAR_4 ; ) VAR_1 , name ( METHOD_3 ; ) VAR_3 , VAR_2 , VAR_1 , name , this ( TYPE_7 new = m TYPE_7 ; ) VAR_1 ( METHOD_2 . TYPE_6 { ) VAR_3 > TYPE_2 < TYPE_5 , VAR_2 > TYPE_1 < TYPE_5 , VAR_1 TYPE_4 , name java.lang.String ( METHOD_1 > TYPE_2 , TYPE_1 < TYPE_3 > TYPE_2 , TYPE_1 < synchronized public 
private TYPE_1 METHOD_1 ( ) { for ( final TYPE_2 VAR_1 : VAR_2 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { continue ; } TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { continue ; } return VAR_3 ; } return null ; } } ; null return } ; VAR_3 return } ; continue { ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_3 ( if ; ) ) VAR_1 ( ) TYPE_1 ( ( = VAR_3 TYPE_1 } ; continue { ) ) TYPE_1 instanceof VAR_1 ( ! ( if { ) VAR_2 : VAR_1 TYPE_2 final ( for { ) ( METHOD_1 TYPE_1 private 
public TYPE_1 METHOD_1 ( final TYPE_2 . Change change ) throws TYPE_3 { try { final TYPE_4 . NameKey VAR_1 = change . METHOD_2 ( ) . getParentKey ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) . METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } } } ; ) e , ) ( change.getId ( TYPE_3 new throw { ) e TYPE_5 ( catch } ; ) change ( METHOD_1 . ) VAR_1 ( METHOD_3 . VAR_2 return ; ) ( getParentKey . ) ( METHOD_2 . change = VAR_1 NameKey . TYPE_4 final { try { TYPE_3 throws ) change Change . TYPE_2 final ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( TYPE_1 out ) throws java.io.IOException { out . METHOD_2 ( TYPE_2 . METHOD_3 ( commit ) . METHOD_4 ( VAR_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( out ) ; VAR_2 . METHOD_5 ( repo ) ; VAR_2 . format ( base . METHOD_6 ( ) , commit . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . VAR_2 ; ) ) ( METHOD_6 . commit , ) ( METHOD_6 . base ( format . VAR_2 ; ) repo ( METHOD_5 . VAR_2 ; ) out ( TYPE_3 new = VAR_2 TYPE_3 ; ) ) VAR_1 ( METHOD_4 . ) commit ( METHOD_3 . TYPE_2 ( METHOD_2 . out { java.io.IOException throws ) out TYPE_1 ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) ) & & ( ! ( METHOD_4 ( ) ) ) ) { return VAR_2 ; } else if ( VAR_3 . get ( ) ) { return VAR_4 ; } final long VAR_5 = METHOD_5 ( VAR_6 ) ; if ( VAR_5 < = 0 ) { return VAR_7 ; } else if ( 0 < VAR_5 ) { return VAR_8 ; } return VAR_9 ; } } ; VAR_9 return } ; VAR_8 return { ) VAR_5 < 0 ( if else } ; VAR_7 return { ) 0 = < VAR_5 ( if ; ) VAR_6 ( METHOD_5 = VAR_5 long final } ; VAR_4 return { ) ) ( get . VAR_3 ( if else } ; VAR_2 return { ) ) ) ) ( METHOD_4 ( ! ( & & ) ) ( METHOD_3 ( ( if else } ; VAR_1 return { ) ) ( METHOD_2 ( if { ) ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ; VAR_2 = TYPE_3 . METHOD_4 ( ) ; if ( TYPE_4 . info ( ) . auth ( ) . METHOD_5 ( ) ) { VAR_3 . METHOD_6 ( VAR_2 ) ; VAR_1 . add ( TYPE_2 . METHOD_7 ( ) , VAR_2 ) ; } VAR_4 = TYPE_3 . METHOD_4 ( ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) , VAR_4 ) ; } } ; ) VAR_4 , ) ( METHOD_9 . TYPE_2 ( METHOD_8 . VAR_1 ; ) VAR_4 ( METHOD_6 . VAR_3 ; ) ( METHOD_4 . TYPE_3 = VAR_4 } ; ) VAR_2 , ) ( METHOD_7 . TYPE_2 ( add . VAR_1 ; ) VAR_2 ( METHOD_6 . VAR_3 { ) ) ( METHOD_5 . ) ( auth . ) ( info . TYPE_4 ( if ; ) ( METHOD_4 . TYPE_3 = VAR_2 ; ) ) ) ( METHOD_3 . TYPE_2 ( TYPE_1 new ( METHOD_2 . VAR_1 { ) ( METHOD_1 void private 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 change , java.lang.String id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . get ( ) . patchSets ( ) . get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getChange ( ) . getId ( ) , TYPE_3 . METHOD_2 ( id ) ) ) ; if ( ps ! = null ) { return java.util.Collections . METHOD_3 ( new TYPE_1 ( change , ps ) ) ; } return java.util.Collections . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . java.util.Collections return } ; ) ) ps , change ( TYPE_1 new ( METHOD_3 . java.util.Collections return { ) null = ! ps ( if ; ) ) ) id ( METHOD_2 . TYPE_3 , ) ( getId . ) ( getChange . change ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( get . ) ( patchSets . ) ( get . VAR_1 = ps com.google.gerrit.reviewdb.client.PatchSet { com.google.gwtorm.server.OrmException throws ) id java.lang.String , change TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
private java.util.Set < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( final TYPE_1 VAR_1 , final com.google.gerrit.reviewdb.client.Project.NameKey project , final java.util.Set < TYPE_1 > VAR_2 ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( TYPE_4 . equals ( VAR_1 ) ) { return METHOD_2 ( project , VAR_2 ) ; } else { com.google.gerrit.reviewdb.client . AccountGroup group = VAR_3 . get ( VAR_1 ) ; if ( group ! = null ) { return METHOD_3 ( group , project , VAR_2 ) ; } else { return java.util.Collections . METHOD_4 ( ) ; } } } } } } ; ) ( METHOD_4 . java.util.Collections return { else } ; ) VAR_2 , project , group ( METHOD_3 return { ) null = ! group ( if ; ) VAR_1 ( get . VAR_3 = group AccountGroup . com.google.gerrit.reviewdb.client { else } ; ) VAR_2 , project ( METHOD_2 return { ) ) VAR_1 ( equals . TYPE_4 ( if { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 throws ) VAR_2 > TYPE_1 < java.util.Set final , project com.google.gerrit.reviewdb.client.Project.NameKey final , VAR_1 TYPE_1 final ( METHOD_1 > com.google.gerrit.reviewdb.client.Account < java.util.Set private 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 class ) ; return METHOD_1 ( VAR_1 , VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , VAR_7 , STRING_1 ) , VAR_2 ) ; } } ; ) VAR_2 , ) STRING_1 , VAR_7 , ) ( METHOD_5 . TYPE_2 , ) ( METHOD_4 . VAR_6 ( METHOD_3 . VAR_3 , VAR_1 ( METHOD_1 return ; ) class VAR_5 ( METHOD_2 . VAR_4 = VAR_3 TYPE_1 { java.lang.Exception throws ) VAR_2 boolean , VAR_1 java.lang.String ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit private 
private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 notes , final com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return TYPE_4 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_3 ( notes . METHOD_4 ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_5 ( VAR_2 , notes , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_5 . METHOD_6 ( e ) ; } } } ) ; } } ; ) } } } ; ) e ( METHOD_6 . TYPE_5 throw { ) e java.io.IOException ( catch } ; ) patchSet , notes , VAR_2 ( METHOD_5 . VAR_3 return { ) ) repo ( org.eclipse.jgit.revwalk.RevWalk new = VAR_2 org.eclipse.jgit.revwalk.RevWalk ; ) ) ( METHOD_4 . notes ( METHOD_3 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try { ) ( get TYPE_2 public { ) ( > TYPE_2 < TYPE_1 new ( METHOD_2 . TYPE_4 return { ) patchSet com.google.gerrit.reviewdb.client.PatchSet final , notes TYPE_3 final ( METHOD_1 > TYPE_2 < TYPE_1 private 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String projectName = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ; java.lang.String revision = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ; java.lang.String path = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( projectName , revision , path ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ; } } ; ) ) path ( METHOD_6 . TYPE_4 ( METHOD_5 . VAR_1 ; ) ) path , revision , projectName ( TYPE_3 new ( METHOD_4 . VAR_1 ; ) ) INT_1 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = path java.lang.String ; ) ) 2 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = revision java.lang.String ; ) ) 1 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = projectName java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public TYPE_1 < TYPE_2 > . TYPE_3 METHOD_1 ( TYPE_4 . Key < TYPE_2 > VAR_1 , TYPE_5 < TYPE_2 > VAR_2 ) { TYPE_6 < TYPE_2 > n = new TYPE_6 < TYPE_2 > ( VAR_2 , VAR_3 ) ; if ( ref . METHOD_2 ( VAR_4 , n ) ) { return new TYPE_3 ( VAR_1 , n , VAR_5 ) ; } return null ; } } ; null return } ; ) VAR_5 , n , VAR_1 ( TYPE_3 new return { ) ) n , VAR_4 ( METHOD_2 . ref ( if ; ) VAR_3 , VAR_2 ( > TYPE_2 < TYPE_6 new = n > TYPE_2 < TYPE_6 { ) VAR_2 > TYPE_2 < TYPE_5 , VAR_1 > TYPE_2 < Key . TYPE_4 ( METHOD_1 TYPE_3 . > TYPE_2 < TYPE_1 public 
void METHOD_1 ( java.lang.String token ) { try { VAR_1 . METHOD_1 ( token , changes ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( e . getMessage ( ) , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) e , ) ( getMessage . e ( TYPE_2 new throw { ) e TYPE_1 ( catch } ; ) changes , token ( METHOD_1 . VAR_1 { try { ) token java.lang.String ( METHOD_1 void 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_1 c : db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . getAccountId ( ) ) ) { VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) c , ) ( get . ) ( getKey . c ( put . VAR_1 { ) ) ) ( getAccountId . rsrc , ) ( getId . ) ( METHOD_5 . rsrc ( METHOD_4 . ) ( METHOD_3 . db : c TYPE_1 ( for ; ) ( METHOD_2 . TYPE_3 = VAR_1 > TYPE_1 , java.lang.String < java.util.Map { com.google.gwtorm.server.OrmException throws ) rsrc TYPE_2 ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map private 
protected < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > core ( final TYPE_4 < TYPE_5 < TYPE_1 , TYPE_2 > > type , final java.lang.String name ) { return core ( TYPE_6 . get ( type , TYPE_7 . METHOD_1 ( name ) ) ) . name ( name ) ; } } ; ) name ( name . ) ) ) name ( METHOD_1 . TYPE_7 , type ( get . TYPE_6 ( core return { ) name java.lang.String final , type > > TYPE_2 , TYPE_1 < TYPE_5 < TYPE_4 final ( core > TYPE_2 , TYPE_1 < TYPE_3 > TYPE_2 , TYPE_1 < protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 ( to . ) VAR_7 , VAR_6 ( METHOD_6 . ) VAR_3 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb c , java.lang.String name , TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 == null ) { VAR_1 = TYPE_2 . METHOD_2 ( name , VAR_2 ) ; } return new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_3 . NameKey ( name ) , new TYPE_3 . Id ( c . METHOD_3 ( ) ) , VAR_1 , TYPE_4 . METHOD_4 ( ) ) ; } } ; ) ) ( METHOD_4 . TYPE_4 , VAR_1 , ) ) ( METHOD_3 . c ( Id . TYPE_3 new , ) name ( NameKey . TYPE_3 new ( AccountGroup . com.google.gerrit.reviewdb.client new return } ; ) VAR_2 , name ( METHOD_2 . TYPE_2 = VAR_1 { ) null == VAR_1 ( if { com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_1 , name java.lang.String , c com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 AccountGroup . com.google.gerrit.reviewdb.client private 
public void METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 { if ( METHOD_2 ( notes , VAR_1 , VAR_2 . getAccountId ( ) , VAR_2 . getValue ( ) ) ) { return ; } VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; } } ; ) VAR_5 ( METHOD_4 . ) VAR_4 ( METHOD_3 . ) notes ( change . ) VAR_1 ( user . VAR_3 } ; return { ) ) ) ( getValue . VAR_2 , ) ( getAccountId . VAR_2 , VAR_1 , notes ( METHOD_2 ( if { TYPE_5 , TYPE_4 , TYPE_3 throws ) VAR_2 PatchSetApproval . com.google.gerrit.reviewdb.client , VAR_1 TYPE_2 , notes TYPE_1 ( METHOD_1 void public 
void display ( final TYPE_1 . Account account ) { info . METHOD_1 ( 0 , VAR_1 , account . METHOD_2 ( ) ) ; info . METHOD_1 ( 1 , VAR_1 , account . METHOD_3 ( ) ) ; info . METHOD_1 ( 2 , VAR_1 , account . METHOD_4 ( ) ) ; info . METHOD_1 ( INT_1 , VAR_1 , TYPE_2 . METHOD_5 ( account . METHOD_6 ( ) ) ) ; info . METHOD_1 ( INT_2 , VAR_1 , account . getId ( ) . toString ( ) ) ; } } ; ) ) ( toString . ) ( getId . account , VAR_1 , INT_2 ( METHOD_1 . info ; ) ) ) ( METHOD_6 . account ( METHOD_5 . TYPE_2 , VAR_1 , INT_1 ( METHOD_1 . info ; ) ) ( METHOD_4 . account , VAR_1 , 2 ( METHOD_1 . info ; ) ) ( METHOD_3 . account , VAR_1 , 1 ( METHOD_1 . info ; ) ) ( METHOD_2 . account , VAR_1 , 0 ( METHOD_1 . info { ) account Account . TYPE_1 final ( display void 
public void run ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_1 . METHOD_1 ( ) ) { for ( ; ; ) { final TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { break ; } METHOD_3 ( db , VAR_2 ) ; synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } catch ( com.google.gwtorm.server.OrmException e ) { e . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . e { ) e com.google.gwtorm.server.OrmException ( catch } } } ; ) 1 ( update . VAR_3 { ) VAR_3 ( synchronized ; ) VAR_2 , db ( METHOD_3 } ; break { ) null == VAR_2 ( if ; ) ( METHOD_2 = VAR_2 TYPE_1 final { ) ; ; ( for { ) ) ( METHOD_1 . VAR_1 = db com.google.gerrit.reviewdb.server.ReviewDb ( try { ) ( run void public 
public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( notes . METHOD_2 ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_3 ( VAR_2 , notes , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2 . METHOD_4 ( e ) ; } } } } ; ) e ( METHOD_4 . TYPE_2 throw { ) e java.io.IOException ( catch } ; ) patchSet , notes , VAR_2 ( METHOD_3 . VAR_3 return { ) ) repo ( org.eclipse.jgit.revwalk.RevWalk new = VAR_2 org.eclipse.jgit.revwalk.RevWalk ; ) ) ( METHOD_2 . notes ( METHOD_1 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try { ) ( get TYPE_1 public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) & & ( ! ( METHOD_5 ( db ) ) ) ; } } ; ) ) ) db ( METHOD_5 ( ! ( & & ) ) ) ( METHOD_1 . ) ( METHOD_3 ( || ) ) ) ) ( METHOD_2 ( METHOD_4 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( return { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return false ; } if ( VAR_2 . isEmpty ( ) ) { return false ; } if ( ( ( VAR_3 . size ( ) ) == 1 ) & & ( VAR_3 . contains ( VAR_4 ) ) ) { return false ; } return true ; } } ; true return } ; false return { ) ) ) VAR_4 ( contains . VAR_3 ( & & ) 1 == ) ) ( size . VAR_3 ( ( ( if } ; false return { ) ) ( isEmpty . VAR_2 ( if } ; false return { ) 0 == ) ) ( length . VAR_1 ( ( if { ) ( METHOD_1 boolean protected 
protected TYPE_1 METHOD_1 ( TYPE_2 ctx ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) . get ( ) ; com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( id ) ; VAR_1 . create ( VAR_2 , VAR_3 ) . index ( db , c ) ; return null ; } } ; null return ; ) c , db ( index . ) VAR_3 , VAR_2 ( create . VAR_1 ; ) id ( get . ) ( changes . db = c com.google.gerrit.reviewdb.client.Change ; ) ( get . ) ( METHOD_2 . ctx = db com.google.gerrit.reviewdb.server.ReviewDb { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ctx TYPE_2 ( METHOD_1 TYPE_1 protected 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( STRING_1 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_3 ( 1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_4 ( STRING_2 ) ; TYPE_1 d = res . get ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 . repo ( isEqualTo . ) name . d ( com.google.common.truth.Truth.assertThat ; ) STRING_2 ( get . res = d TYPE_1 ; ) STRING_2 ( METHOD_4 . ) res ( com.google.common.truth.Truth.assertThat ; ) 1 ( METHOD_3 . ) res ( com.google.common.truth.Truth.assertThat ; ) VAR_1 , STRING_1 ( METHOD_2 = res > TYPE_1 , java.lang.String < java.util.Map { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { if ( ( info . status ( ) ) == ( VAR_1 ) ) { TYPE_2 < TYPE_3 > VAR_2 = ( info . METHOD_2 ( ) ) ? info . METHOD_3 ( ) : VAR_3 < TYPE_3 > create ( ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; if ( VAR_2 . METHOD_5 ( STRING_2 ) ) { VAR_4 . METHOD_6 ( true ) ; VAR_4 . METHOD_7 ( VAR_2 . get ( STRING_2 ) . METHOD_8 ( ) ) ; } } } } } } ; ) ) ( METHOD_8 . ) STRING_2 ( get . VAR_2 ( METHOD_7 . VAR_4 ; ) true ( METHOD_6 . VAR_4 { ) ) STRING_2 ( METHOD_5 . VAR_2 ( if ; ) STRING_1 ( METHOD_4 . VAR_2 ; ) ( create > TYPE_3 < VAR_3 : ) ( METHOD_3 . info ? ) ) ( METHOD_2 . info ( = VAR_2 > TYPE_3 < TYPE_2 { ) ) VAR_1 ( == ) ) ( status . info ( ( if { ) info ChangeInfo . TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } assertEquals ( TYPE_3 . of ( STRING_1 , STRING_2 ) , VAR_1 ) ; } } ; ) VAR_1 , ) STRING_2 , STRING_1 ( of . TYPE_3 ( assertEquals } ; ) ) ( getName . label ( add . VAR_1 { ) ) ( METHOD_3 . ) ( METHOD_3 : label TYPE_2 ( for ; ) ( METHOD_2 . TYPE_1 = VAR_1 > java.lang.String < java.util.List { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , ( INT_1 < < INT_1 ) ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_4 . close ( ) ; return TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . VAR_1 ( METHOD_5 . ) VAR_2 ( METHOD_4 . TYPE_3 return ; ) ( close . VAR_4 ; ) VAR_4 ( METHOD_3 . VAR_1 ; ) VAR_2 ( TYPE_4 new = VAR_4 TYPE_4 ; ) ) INT_1 < < INT_1 ( , VAR_3 ( METHOD_2 . TYPE_3 = VAR_2 TYPE_2 { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) . get ( ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ; } } ; ) changeId . ) VAR_2 ( METHOD_3 . TYPE_3 , ) ( getChangeId . VAR_1 ( org.junit.Assert.assertEquals ; ) ( get . ) ) ) ) ( getChangeId . VAR_1 ( + STRING_1 ( ( query . ) ( changes . VAR_3 = VAR_2 > ChangeInfo . TYPE_2 < java.util.List ; ) ( METHOD_2 ; ) ( METHOD_2 = VAR_1 Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { METHOD_2 ( ) ; TYPE_1 . METHOD_1 ( changeId . get ( ) , path , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( changeId ) ) ; } public void METHOD_4 ( TYPE_6 VAR_2 ) { } } ) ; } } ; ) } } { ) VAR_2 TYPE_6 ( METHOD_4 void public } ; ) ) changeId ( METHOD_3 . TYPE_5 ( display . TYPE_4 { ) result TYPE_3 ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , VAR_1 , path , ) ( get . changeId ( METHOD_1 . TYPE_1 ; ) ( METHOD_2 { ) VAR_1 java.lang.String , path java.lang.String ( METHOD_1 void private 
public synchronized void METHOD_1 ( final TYPE_1 . NameKey branch ) { TYPE_2 e = VAR_1 . get ( branch ) ; if ( e == null ) { e = new TYPE_2 ( branch ) ; VAR_1 . put ( branch , e ) ; } VAR_2 = true ; METHOD_2 ( e ) ; } } ; ) e ( METHOD_2 ; true = VAR_2 } ; ) e , branch ( put . VAR_1 ; ) branch ( TYPE_2 new = e { ) null == e ( if ; ) branch ( get . VAR_1 = e TYPE_2 { ) branch NameKey . TYPE_1 final ( METHOD_1 void synchronized public 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id ps ) throws java.io.IOException { java.lang.String url = java.lang.String.format ( STRING_1 , ps . getParentKey ( ) . get ( ) , ps . get ( ) ) ; return METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( url ) . METHOD_4 ( ) , VAR_2 class ) . changes ; } } ; changes . ) class VAR_2 , ) ( METHOD_4 . ) url ( get . VAR_1 ( METHOD_3 . ) ( METHOD_2 return ; ) ) ( get . ps , ) ( get . ) ( getParentKey . ps , STRING_1 ( java.lang.String.format = url java.lang.String { java.io.IOException throws ) ps com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_4 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_4 . VAR_1 ; ) result ( display . VAR_1 { ) result > AccountGroup . TYPE_3 < java.util.List final ( METHOD_3 void protected { ) this ( > > AccountGroup . TYPE_3 < java.util.List < TYPE_2 new ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 ) ; bind ( VAR_3 class ) . in ( VAR_2 ) ; bind ( VAR_4 class ) . to ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; bind ( VAR_5 class ) ; } } ; ) class VAR_5 ( bind ; ) ) ( TYPE_2 new ( install ; ) ) ( TYPE_1 new ( install ; ) class VAR_3 ( to . ) class VAR_4 ( bind ; ) VAR_2 ( in . ) class VAR_3 ( bind ; ) VAR_2 ( in . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > create ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) throws TYPE_4 { if ( ( TYPE_5 . METHOD_1 ( schema ) ) == ( VAR_2 ) ) { throw new TYPE_4 ( STRING_1 ) ; } java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_3 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Account.Id id : VAR_1 ) { VAR_3 . add ( new TYPE_5 ( id ) ) ; } return TYPE_1 . METHOD_2 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_2 . TYPE_1 return } ; ) ) id ( TYPE_5 new ( add . VAR_3 { ) VAR_1 : id com.google.gerrit.reviewdb.client.Account.Id ( for ; ) ) ( size . VAR_1 ( java.util.ArrayList new = VAR_3 > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List } ; ) STRING_1 ( TYPE_4 new throw { ) ) VAR_2 ( == ) ) schema ( METHOD_1 . TYPE_5 ( ( if { TYPE_4 throws ) VAR_1 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_3 , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( create > com.google.gerrit.server.query.change.ChangeData < TYPE_1 static 
private TYPE_1 user ( TYPE_2 . AccountGroup ... VAR_1 ) { TYPE_3 . Factory VAR_2 = new TYPE_3 . Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 , final java.lang.String ref ) { return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; } } ; return new TYPE_1 ( VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_2 , new TYPE_5 ( VAR_1 ) , METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 , ) VAR_1 ( TYPE_5 new , VAR_2 , ) ( METHOD_1 > Id . TYPE_4 < Collections . VAR_5 , ) ( METHOD_1 > Id . TYPE_4 < Collections . VAR_5 ( TYPE_1 new return ; } } ; ) ref , VAR_3 , VAR_4 ( TYPE_3 new return { ) ref java.lang.String final , VAR_3 TYPE_1 final ( create TYPE_3 public { ) ( Factory . TYPE_3 new = VAR_2 Factory . TYPE_3 { ) VAR_1 ... AccountGroup . TYPE_2 ( user TYPE_1 private 
private void METHOD_1 ( ) throws TYPE_1 { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( METHOD_5 ( ) ) ; VAR_1 . append ( STRING_2 ) ; msg . METHOD_6 ( VAR_1 . toString ( ) , STRING_3 ) ; TYPE_2 . METHOD_1 ( msg ) ; } } } } ; ) msg ( METHOD_1 . TYPE_2 ; ) STRING_3 , ) ( toString . VAR_1 ( METHOD_6 . msg ; ) STRING_2 ( append . VAR_1 ; ) ) ( METHOD_5 ( append . VAR_1 ; ) STRING_1 ( append . VAR_1 ; ) ( METHOD_4 ; ) ( METHOD_3 { ) ) ( METHOD_2 ( if { TYPE_1 throws ) ( METHOD_1 void private 
protected void METHOD_1 ( final java.lang.String VAR_1 ) { final java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_1 . isEmpty ( ) ) { VAR_4 . METHOD_3 ( false ) ; } else { VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_3 ( true ) ; } if ( ( ( VAR_5 ) == null ) || ( ( VAR_5 ) == VAR_2 ) ) { METHOD_5 ( VAR_1 ) ; } } } } ; ) VAR_1 ( METHOD_5 { ) ) VAR_2 == ) VAR_5 ( ( || ) null == ) VAR_5 ( ( ( if } ; ) true ( METHOD_3 . VAR_4 ; ) VAR_1 ( METHOD_4 . VAR_3 { else } ; ) false ( METHOD_3 . VAR_4 { ) ) ( isEmpty . VAR_1 ( if ; ) ( METHOD_2 . VAR_3 = VAR_2 java.lang.String final { ) VAR_1 java.lang.String final ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , project , change ) . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . ) change , project , args ( TYPE_1 new return ; ) ) ( getProject . change , changeId , project , ) STRING_2 + STRING_1 ( , ) project ( equals . ) ( getProject . change ( METHOD_2 . TYPE_2 { java.lang.Exception throws ) ( METHOD_1 TYPE_1 public 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > refs ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 r = refs . get ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) . getAccountId ( ) ) ) ; if ( r ! = null ) { TYPE_3 s = new TYPE_3 ( VAR_2 , r ) ; refs = new TYPE_4 ( refs ) ; refs . put ( s . getName ( ) , s ) ; } } return refs ; } } ; refs return } } ; ) s , ) ( getName . s ( put . refs ; ) refs ( TYPE_4 new = refs ; ) r , VAR_2 ( TYPE_3 new = s TYPE_3 { ) null = ! r ( if ; ) ) ) ( getAccountId . ) ( METHOD_2 . VAR_1 ( METHOD_4 . TYPE_2 ( get . refs = r TYPE_1 { ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( if { ) refs > TYPE_1 , java.lang.String < java.util.Map ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . ) VAR_10 ( METHOD_6 . ) VAR_9 ( METHOD_5 . ) VAR_8 , VAR_7 ( METHOD_5 . ) VAR_6 ( to . ) VAR_3 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 , VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_8 . ) VAR_10 ( METHOD_8 . ) VAR_9 ( METHOD_7 . ) VAR_8 , VAR_7 ( METHOD_7 . ) VAR_6 ( to . ) VAR_3 ( METHOD_6 . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 ( METHOD_4 ; ) VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; } } ) ; bind ( VAR_2 class ) ; bind ( VAR_3 class ) . to ( VAR_2 class ) ; bind ( VAR_4 class ) . to ( VAR_5 class ) ; METHOD_2 ( ) . to ( VAR_5 class ) ; } } ; ) class VAR_5 ( to . ) ( METHOD_2 ; ) class VAR_5 ( to . ) class VAR_4 ( bind ; ) class VAR_2 ( to . ) class VAR_3 ( bind ; ) class VAR_2 ( bind ; ) } } ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void protected { ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
private java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( path ) ; org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_3 = res . METHOD_4 ( ) ; return new java.lang.String ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) , VAR_4 ) ; } } ; ) VAR_4 , ) VAR_3 ( METHOD_6 . ) ( METHOD_5 . TYPE_2 ( java.lang.String new return ; ) ( METHOD_4 . res = VAR_3 java.lang.String ; ) ) VAR_2 ( METHOD_3 . res , VAR_1 ( org.junit.Assert.assertEquals ; ) path ( METHOD_2 = res TYPE_1 { java.lang.Exception throws ) VAR_1 java.lang.String , path java.lang.String ( METHOD_1 java.lang.String private 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } else if ( ( VAR_1 ) == null ) { TYPE_2 VAR_2 = METHOD_7 ( ) ; if ( ! ( METHOD_8 ( ) . METHOD_9 ( ) ) ) { METHOD_4 ( ) . METHOD_10 ( VAR_2 ) ; } } else { METHOD_11 ( ) ; } } } } ; ) ( METHOD_11 { else } } ; ) VAR_2 ( METHOD_10 . ) ( METHOD_4 { ) ) ) ( METHOD_9 . ) ( METHOD_8 ( ! ( if ; ) ( METHOD_7 = VAR_2 TYPE_2 { ) null == ) VAR_1 ( ( if else } ; ) ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 ( METHOD_3 . TYPE_1 { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) ( METHOD_1 void 
protected void METHOD_1 ( java.lang.String msg , TYPE_1 t ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( t ! = null ) { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ; } else { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ; } } } } } } ; ) ) msg + ) STRING_2 + ) ) VAR_2 ( + STRING_1 ( ( ( ( error . VAR_1 { else } ; ) t , ) msg + ) STRING_2 + ) ) VAR_2 ( + STRING_1 ( ( ( ( error . VAR_1 { ) null = ! t ( if { ) ) ( METHOD_2 . VAR_1 ( if { ) t TYPE_1 , msg java.lang.String ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . ) VAR_10 ( METHOD_6 . ) VAR_9 ( METHOD_5 . ) VAR_8 ( to . ) VAR_7 , VAR_6 ( METHOD_5 . ) VAR_3 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ! ( METHOD_2 ( project ) ) ) { return false ; } java.lang.String [ ] projects = config . METHOD_3 ( ) ; if ( ( projects . length ) < 1 ) { return true ; } return new TYPE_1 ( TYPE_2 . METHOD_4 ( projects ) ) . METHOD_5 ( project ) ; } } ; ) project ( METHOD_5 . ) ) projects ( METHOD_4 . TYPE_2 ( TYPE_1 new return } ; true return { ) 1 < ) length . projects ( ( if ; ) ( METHOD_3 . config = projects ] [ java.lang.String } ; false return { ) ) ) project ( METHOD_2 ( ! ( if { ) project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 boolean 
protected TYPE_1 < ? > METHOD_1 ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_4 , project , STRING_1 ) ; METHOD_3 ( VAR_5 , project , STRING_2 ) ; return METHOD_4 ( project ) ; } } ; ) project ( METHOD_4 return ; ) STRING_2 , project , VAR_5 ( METHOD_3 ; ) STRING_1 , project , VAR_4 ( METHOD_3 ; ) VAR_3 , VAR_2 , VAR_1 , name ( METHOD_2 = project com.google.gerrit.reviewdb.client.Project.NameKey { java.lang.Exception throws ) VAR_3 TYPE_2 , VAR_2 boolean , VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey , name java.lang.String ( METHOD_1 > ? < TYPE_1 protected 
private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) throws java.io.IOException { if ( path . isEmpty ( ) ) { return null ; } path = TYPE_3 . METHOD_2 ( path ) ; TYPE_4 . Result result = METHOD_3 ( req , path ) ; if ( result == null ) { return null ; } if ( ( result . METHOD_4 ( ) ) ! = null ) { return METHOD_5 ( VAR_1 , result , path ) ; } else { return METHOD_6 ( VAR_1 , result , path ) ; } } } } ; ) path , result , VAR_1 ( METHOD_6 return { else } ; ) path , result , VAR_1 ( METHOD_5 return { ) null = ! ) ) ( METHOD_4 . result ( ( if } ; null return { ) null == result ( if ; ) path , req ( METHOD_3 = result Result . TYPE_4 ; ) path ( METHOD_2 . TYPE_3 = path } ; null return { ) ) ( isEmpty . path ( if { java.io.IOException throws ) path java.lang.String , VAR_1 java.lang.String , req TYPE_2 ( METHOD_1 TYPE_1 private 
protected TYPE_1 . ChangeInfo getChange ( java.lang.String changeId , TYPE_2 ... VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = ( ( VAR_1 . length ) > 0 ) ? STRING_1 + ( TYPE_3 . on ( STRING_2 ) . METHOD_1 ( VAR_1 ) ) : STRING_3 ; TYPE_4 r = VAR_3 . get ( ( ( STRING_4 + changeId ) + VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; return TYPE_5 . METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 . ChangeInfo class ) ; } } ; ) class ChangeInfo . VAR_5 , ) ( METHOD_5 . r ( METHOD_4 . ) ( METHOD_3 . TYPE_5 return ; ) ) ( METHOD_2 . r , VAR_4 ( org.junit.Assert.assertEquals ; ) ) VAR_2 + ) changeId + STRING_4 ( ( ( get . VAR_3 = r TYPE_4 ; STRING_3 : ) ) VAR_1 ( METHOD_1 . ) STRING_2 ( on . TYPE_3 ( + STRING_1 ? ) 0 > ) length . VAR_1 ( ( = VAR_2 java.lang.String { java.io.IOException throws ) VAR_1 ... TYPE_2 , changeId java.lang.String ( getChange ChangeInfo . TYPE_1 protected 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; try { new TYPE_1 ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_2 , VAR_1 ) ; METHOD_4 ( STRING_3 ) ; } catch ( TYPE_2 e ) { assertEquals ( ( STRING_4 + VAR_1 ) , e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e , ) VAR_1 + STRING_4 ( ( assertEquals { ) e TYPE_2 ( catch } ; ) STRING_3 ( METHOD_4 ; ) VAR_1 , STRING_2 ( METHOD_3 . ) ( METHOD_2 . ) ( TYPE_1 new { try ; STRING_1 = VAR_1 java.lang.String final { ) ( METHOD_1 void public 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { if ( err ! = null ) { TYPE_5 . METHOD_2 ( req , err ) ; } TYPE_6 . METHOD_3 ( req , res , null , null , c ) ; res . METHOD_4 ( VAR_1 ) ; TYPE_6 . METHOD_5 ( req , res , msg ) ; } } ; ) msg , res , req ( METHOD_5 . TYPE_6 ; ) VAR_1 ( METHOD_4 . res ; ) c , null , null , res , req ( METHOD_3 . TYPE_6 } ; ) err , req ( METHOD_2 . TYPE_5 { ) null = ! err ( if { java.io.IOException throws ) err TYPE_4 , c TYPE_3 , msg java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void static public 
private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.lang.String message ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { VAR_2 . METHOD_3 ( ( message + STRING_1 ) ) ; VAR_2 . METHOD_3 ( TYPE_2 . on ( STRING_2 ) . METHOD_4 ( VAR_1 ) ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; } } } } ; ) STRING_3 ( METHOD_3 . VAR_2 ; ) ) VAR_1 ( METHOD_4 . ) STRING_2 ( on . TYPE_2 ( METHOD_3 . VAR_2 ; ) ) STRING_1 + message ( ( METHOD_3 . VAR_2 { ) ) VAR_1 ( METHOD_2 . TYPE_1 ( if { ) message java.lang.String , VAR_1 > java.lang.String < java.util.List ( METHOD_1 void private 
protected void run ( ) throws TYPE_1 { boolean VAR_1 = true ; for ( TYPE_2 rsrc : changes . values ( ) ) { try { index . apply ( rsrc , new TYPE_3 ( ) ) ; } catch ( java.io.IOException | TYPE_4 | com.google.gwtorm.server.OrmException | TYPE_5 e ) { VAR_1 = false ; METHOD_1 ( STRING_1 , java.lang.String.format ( STRING_2 , rsrc . getId ( ) , e . getMessage ( ) ) ) ; } } if ( ! VAR_1 ) { throw METHOD_2 ( STRING_3 ) ; } } } } ; ) STRING_3 ( METHOD_2 throw { ) VAR_1 ! ( if } } ; ) ) ) ( getMessage . e , ) ( getId . rsrc , STRING_2 ( java.lang.String.format , STRING_1 ( METHOD_1 ; false = VAR_1 { ) e TYPE_5 | com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException ( catch } ; ) ) ( TYPE_3 new , rsrc ( apply . index { try { ) ) ( values . changes : rsrc TYPE_2 ( for ; true = VAR_1 boolean { TYPE_1 throws ) ( run void protected 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( schema , id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_5 | TYPE_4 ( catch } ; ) ( get . ) ) VAR_1 ( delete . VAR_3 , ) VAR_1 ( delete . VAR_2 ( METHOD_2 . TYPE_3 { try ; ) id , schema ( METHOD_1 . TYPE_2 = VAR_1 TYPE_1 { java.io.IOException throws ) id Id . com.google.gerrit.reviewdb.client.Change ( delete void public 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Set < TYPE_1 > VAR_3 ) throws TYPE_2 { TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_5 . ) ) ( METHOD_4 . VAR_4 ( com.google.common.truth.Truth.assertThat ; ) VAR_2 ( isEqualTo . ) ) ( METHOD_3 . VAR_4 ( com.google.common.truth.Truth.assertThat ; ) VAR_1 ( METHOD_2 . TYPE_4 = VAR_4 TYPE_3 { TYPE_2 throws ) VAR_3 > TYPE_1 < java.util.Set , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void static private 
private void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , TYPE_1 c , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 r = VAR_3 . put ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) , c ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . r , VAR_4 ( org.junit.Assert.assertEquals ; ) c , ) VAR_2 + ) STRING_3 + ) VAR_1 + ) STRING_2 + ) changeId + STRING_1 ( ( ( ( ( ( put . VAR_3 = r TYPE_2 { java.io.IOException throws ) VAR_2 java.lang.String , c TYPE_1 , VAR_1 java.lang.String , changeId java.lang.String ( METHOD_1 void private 
public void onSuccess ( TYPE_1 result ) { METHOD_1 ( ( VAR_1 ? 1 : 0 ) ) ; VAR_2 = TYPE_2 . METHOD_2 ( psId , VAR_2 . getKey ( ) . get ( ) , result ) ; VAR_3 . METHOD_3 ( false ) ; VAR_4 . METHOD_4 ( true ) ; VAR_5 . METHOD_4 ( true ) ; VAR_6 . METHOD_4 ( true ) ; METHOD_5 ( ) ; VAR_7 . onSuccess ( VAR_8 ) ; } } ; ) VAR_8 ( onSuccess . VAR_7 ; ) ( METHOD_5 ; ) true ( METHOD_4 . VAR_6 ; ) true ( METHOD_4 . VAR_5 ; ) true ( METHOD_4 . VAR_4 ; ) false ( METHOD_3 . VAR_3 ; ) result , ) ( get . ) ( getKey . VAR_2 , psId ( METHOD_2 . TYPE_2 = VAR_2 ; ) ) 0 : 1 ? VAR_1 ( ( METHOD_1 { ) result TYPE_1 ( onSuccess void public 
private java.lang.String METHOD_1 ( java.lang.String branch , TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . append ( STRING_1 , project . get ( ) ) ; VAR_2 . append ( STRING_2 , branch ) ; VAR_2 . append ( VAR_5 , VAR_6 ) ; for ( TYPE_3 VAR_7 : METHOD_4 ( VAR_1 ) ) { VAR_2 . METHOD_5 ( VAR_8 , VAR_7 ) ; } return VAR_2 . toString ( ) ; } } ; ) ( toString . VAR_2 return } ; ) VAR_7 , VAR_8 ( METHOD_5 . VAR_2 { ) ) VAR_1 ( METHOD_4 : VAR_7 TYPE_3 ( for ; ) VAR_6 , VAR_5 ( append . VAR_2 ; ) branch , STRING_2 ( append . VAR_2 ; ) ) ( get . project , STRING_1 ( append . VAR_2 ; ) ( METHOD_3 . VAR_2 ; ) VAR_4 , ) ( METHOD_2 . VAR_3 ( TYPE_2 new = VAR_2 TYPE_2 { com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_1 , branch java.lang.String ( METHOD_1 java.lang.String private 
protected void METHOD_1 ( java.lang.String changeId ) throws java.io.IOException { TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value ) . isEqualTo ( 2 ) ; com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ; } } ; ) ) ( getId . admin ( isEqualTo . ) ) VAR_5 . ) 0 ( get . VAR_4 ( com.google.gerrit.reviewdb.client.Account.Id new ( com.google.common.truth.Truth.assertThat ; ) 2 ( isEqualTo . ) value . ) 0 ( get . VAR_4 ( com.google.common.truth.Truth.assertThat ; ) 1 ( METHOD_2 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) STRING_1 ( get . VAR_3 = VAR_2 TYPE_2 ; ) VAR_1 , changeId ( getChange = c ChangeInfo . TYPE_1 { java.io.IOException throws ) changeId java.lang.String ( METHOD_1 void protected 
protected void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; METHOD_2 ( ) ; add ( VAR_1 , to ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { METHOD_3 ( TYPE_2 . METHOD_4 ( ) , ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; } } } } ; ) ) STRING_2 + ) ) VAR_2 ( + STRING_1 ( ( , ) ( METHOD_4 . TYPE_2 ( METHOD_3 { ) ) ) ( isEmpty . VAR_2 ( ! ( if ; ) to , VAR_1 ( add ; ) ( METHOD_2 ; ) ( METHOD_1 . super { TYPE_1 throws ) ( METHOD_1 void protected 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) throws TYPE_7 , TYPE_8 { return VAR_6 . create ( VAR_3 , db , VAR_1 . repo , VAR_1 . rw , VAR_7 , VAR_8 , METHOD_2 ( VAR_1 , VAR_4 ) , VAR_2 , VAR_5 , VAR_9 ) ; } } ; ) VAR_9 , VAR_5 , VAR_2 , ) VAR_4 , VAR_1 ( METHOD_2 , VAR_8 , VAR_7 , rw . VAR_1 , repo . VAR_1 , db , VAR_3 ( create . VAR_6 return { TYPE_8 , TYPE_7 throws ) VAR_5 TYPE_6 , VAR_4 TYPE_5 , VAR_3 TYPE_4 , VAR_2 NameKey . TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ; METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 . ) STRING_3 , STRING_1 ( METHOD_3 . TYPE_1 ( == ) ) ( METHOD_4 . ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_1 ( ( ( METHOD_5 ; ) ) ) ) ( METHOD_4 . ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_1 ( == ) ) ( METHOD_4 . ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_1 ( ( ( METHOD_2 { ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; bind ( new TYPE_2 < TYPE_3 < TYPE_4 . ReviewDb > > ( ) { } ) . to ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . in ( VAR_1 ) ; bind ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . METHOD_2 ( VAR_2 class ) . in ( VAR_1 ) ; } } ; ) VAR_1 ( in . ) class VAR_2 ( METHOD_2 . ) } { ) ( > > ReviewDb . TYPE_4 < TYPE_5 < TYPE_2 new ( bind ; ) VAR_1 ( in . ) } { ) ( > > ReviewDb . TYPE_4 < TYPE_5 < TYPE_2 new ( to . ) } { ) ( > > ReviewDb . TYPE_4 < TYPE_3 < TYPE_2 new ( bind ; ) ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
private void METHOD_1 ( final java.util.Map < java.lang.String , TYPE_1 > VAR_1 , java.lang.String name , java.lang.String value ) { if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } } } } ; ) ) value ( String . TYPE_1 new , name ( put . VAR_1 { ) ) ) ( isEmpty . ) name ( get . VAR_1 ( || ) ) ) name ( METHOD_2 . VAR_1 ( ! ( ( if { ) value java.lang.String , name java.lang.String , VAR_1 > TYPE_1 , java.lang.String < java.util.Map final ( METHOD_1 void private 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) STRING_1 ( METHOD_5 . u , STRING_3 ( METHOD_4 ; ) VAR_4 , VAR_1 ( user . util = u TYPE_2 ; ) STRING_2 , VAR_4 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_3 . ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 , com.google.gwtorm.server.OrmException { TYPE_1 c = METHOD_2 ( change , user ) ; if ( ! ( c . METHOD_3 ( db . get ( ) ) ) ) { throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; } return c ; } } ; c return } ; ) ) ( getId . ) ( getChange . c ( TYPE_3 new throw { ) ) ) ) ( get . db ( METHOD_3 . c ( ! ( if ; ) user , change ( METHOD_2 = c TYPE_1 { com.google.gwtorm.server.OrmException , TYPE_3 throws ) user TYPE_2 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account account , java.lang.String VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_1 event = new TYPE_1 ( util . METHOD_4 ( account ) , VAR_1 ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { try { VAR_3 . METHOD_5 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_6 ( TYPE_3 . log , e ) ; } } } } } } ; ) e , log . TYPE_3 ( METHOD_6 . util { ) e java.lang.Exception ( catch } ; ) event ( METHOD_5 . VAR_3 { try { ) VAR_2 : VAR_3 TYPE_2 ( for ; ) VAR_1 , ) account ( METHOD_4 . util ( TYPE_1 new = event TYPE_1 } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_2 ( ! ( if { ) VAR_1 java.lang.String , account com.google.gerrit.reviewdb.client.Account ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , TYPE_3 u , TYPE_4 VAR_4 ) { TYPE_5 . METHOD_2 ( u ) ; if ( u instanceof TYPE_6 ) { return VAR_1 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 , VAR_2 , VAR_3 ) ; } else if ( u instanceof TYPE_7 ) { return VAR_2 ; } throw new TYPE_8 ( ) ; } } ; ) ( TYPE_8 new throw } ; VAR_2 return { ) TYPE_7 instanceof u ( if else } ; ) VAR_3 , VAR_2 , VAR_4 , ) ( METHOD_5 . ) ( METHOD_4 . u ( METHOD_3 . VAR_1 return { ) TYPE_6 instanceof u ( if ; ) u ( METHOD_2 . TYPE_5 { ) VAR_4 TYPE_4 , u TYPE_3 , VAR_3 java.lang.String , VAR_2 TYPE_1 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static private 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; } } ; ) class Factory . VAR_9 ( factory ; ) class Factory . VAR_8 ( factory ; ) class Factory . VAR_7 ( factory ; ) class Factory . VAR_6 ( factory ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void protected 
private void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 r = VAR_3 . delete ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . r , VAR_4 ( org.junit.Assert.assertEquals ; ) ) VAR_2 + ) STRING_3 + ) VAR_1 + ) STRING_2 + ) changeId + STRING_1 ( ( ( ( ( ( delete . VAR_3 = r TYPE_1 { java.io.IOException throws ) VAR_2 java.lang.String , VAR_1 java.lang.String , changeId java.lang.String ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 . HttpServletResponse VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_3 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) ; VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) ; METHOD_6 ( new java.io.IOException ( STRING_1 ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( VAR_4 ) ; servlet . METHOD_9 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 ) ; } } ; ) VAR_5 ( METHOD_5 . ) VAR_1 ( METHOD_4 . TYPE_2 ; ) VAR_1 , null ( METHOD_9 . servlet ; ) VAR_4 ( METHOD_8 . ) VAR_1 ( METHOD_7 . ) ) STRING_1 ( java.io.IOException new ( METHOD_6 ; ) class HttpServletResponse . VAR_2 ( METHOD_2 = VAR_1 ; ) VAR_3 ( METHOD_5 . ) VAR_1 ( METHOD_4 . TYPE_2 ; ) VAR_1 , null ( METHOD_3 . servlet ; ) class HttpServletResponse . VAR_2 ( METHOD_2 = VAR_1 HttpServletResponse . TYPE_1 { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . not ( p ) ; METHOD_3 ( ( n instanceof TYPE_4 ) ) ; METHOD_4 ( p , n ) ; METHOD_5 ( p , TYPE_3 . not ( n ) ) ; } } ; ) ) n ( not . TYPE_3 , p ( METHOD_5 ; ) n , p ( METHOD_4 ; ) ) TYPE_4 instanceof n ( ( METHOD_3 ; ) p ( not . TYPE_3 = n > java.lang.String < TYPE_3 final ; ) STRING_2 , STRING_1 ( METHOD_2 . TYPE_2 = p TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { display ( result ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; } } ) ; } } ; ) } } ; ) ) VAR_4 ( METHOD_5 . VAR_3 ( METHOD_4 . VAR_2 ; ) result ( display { ) result TYPE_3 final ( METHOD_3 void protected { ) this ( > TYPE_3 < TYPE_2 new , VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } for ( java.lang.String name : VAR_2 ) { VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ; VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . ) name ( METHOD_4 . VAR_3 ; ) ) name , STRING_1 ( java.lang.String.format ( info . VAR_5 { ) VAR_2 : name java.lang.String ( for } ; ) ) VAR_4 ( METHOD_5 . TYPE_3 ( METHOD_4 . VAR_2 { ) VAR_1 : VAR_4 TYPE_1 ( for ; ) ) ( METHOD_3 . VAR_3 ( METHOD_2 . TYPE_2 = VAR_2 > java.lang.String < java.util.Set { ) VAR_1 > TYPE_1 < java.util.List ( METHOD_1 void private 
public void METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 args = VAR_2 . args ; if ( VAR_4 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_3 ( ) ) ) { continue ; } com.google.gerrit.reviewdb.client.Account account = VAR_5 . get ( VAR_6 . getAccountId ( ) ) . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( VAR_8 , VAR_4 . METHOD_3 ( ) , VAR_4 . METHOD_2 ( ) , account ) ; } } } } ; ) account , ) ( METHOD_2 . VAR_4 , ) ( METHOD_3 . VAR_4 , VAR_8 ( METHOD_5 . VAR_7 ; ) ( METHOD_4 . ) ) ( getAccountId . VAR_6 ( get . VAR_5 = account com.google.gerrit.reviewdb.client.Account } ; continue { ) ) ) ( METHOD_3 . VAR_4 ( equals . ) ( METHOD_2 . VAR_4 ( if ; args . VAR_2 = args TYPE_3 { ) VAR_3 : VAR_2 TYPE_2 ( for } ; ) STRING_1 ( TYPE_1 new throw { ) VAR_1 ( if { TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 ) ; METHOD_5 ( STRING_9 , change ) ; } } ; ) change , STRING_9 ( METHOD_5 ; ) STRING_8 ( METHOD_5 ; ) STRING_7 ( METHOD_5 ; ) ) commit , repo ( METHOD_4 ( insert = change com.google.gerrit.reviewdb.client.Change ; ) ) ( create . ) STRING_6 , STRING_5 ( add . ) STRING_4 , STRING_3 ( add . ) STRING_2 ( message . ) ( commit . repo ( METHOD_3 . repo = commit org.eclipse.jgit.revwalk.RevCommit ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; VAR_3 += VAR_1 ; int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ; VAR_6 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) ; VAR_7 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ; } } ; ) ) ) VAR_4 - ( , ) 1 - ) VAR_3 ( ( , VAR_2 ( TYPE_1 new ( add . VAR_7 ; ) ) VAR_4 , VAR_5 , VAR_5 ( TYPE_1 new ( add . VAR_6 ; ) VAR_5 ( - ) VAR_3 ( = VAR_4 int ; VAR_1 += VAR_3 ; VAR_3 = VAR_2 int { ) VAR_1 int ( METHOD_1 void 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( 1 , VAR_2 ) ; final TYPE_2 VAR_3 = new TYPE_2 ( ( ( TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) + ( TYPE_1 . METHOD_2 ( INT_1 , VAR_6 ) ) ) ) ; TYPE_3 . METHOD_3 ( new TYPE_4 ( ) { public long METHOD_4 ( ) { return VAR_3 . METHOD_5 ( VAR_1 ) ; } } ) ; } } ; ) } } ; ) VAR_1 ( METHOD_5 . VAR_3 return { ) ( METHOD_4 long public { ) ( TYPE_4 new ( METHOD_3 . TYPE_3 ; ) ) ) ) VAR_6 , INT_1 ( METHOD_2 . TYPE_1 ( + ) ) VAR_5 , VAR_4 ( METHOD_2 . TYPE_1 ( ( ( TYPE_2 new = VAR_3 TYPE_2 final ; ) VAR_2 , 1 ( METHOD_2 . TYPE_1 = VAR_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( VAR_1 . changes ( ) . query ( r . getChangeId ( ) ) . get ( ) ) ; org.junit.Assert . METHOD_4 ( VAR_2 ) ; org.junit.Assert . METHOD_4 ( VAR_3 ) ; org.junit.Assert . METHOD_4 ( VAR_4 ) ; org.junit.Assert . METHOD_4 ( VAR_5 ) ; } } ; ) VAR_5 ( METHOD_4 . org.junit.Assert ; ) VAR_4 ( METHOD_4 . org.junit.Assert ; ) VAR_3 ( METHOD_4 . org.junit.Assert ; ) VAR_2 ( METHOD_4 . org.junit.Assert ; ) ) ( get . ) ) ( getChangeId . r ( query . ) ( changes . VAR_1 ( METHOD_3 . TYPE_3 = result ChangeInfo . TYPE_2 ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) ) ) ; } } ; ) ) ) ) VAR_2 ( + ) STRING_5 + ) STRING_4 + ) ) VAR_1 ( + ) STRING_2 + STRING_1 ( ( ( ( ( ( METHOD_2 , ) ) VAR_2 ( + ) STRING_5 + ) STRING_4 + ) ) VAR_1 ( + ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( ( ( ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { TYPE_3 < TYPE_1 > r = VAR_1 . apply ( change , null ) ; return r . METHOD_2 ( ) ? null : r . value ( ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e TYPE_4 ( catch } ; ) ( value . r : null ? ) ( METHOD_2 . r return ; ) null , change ( apply . VAR_1 = r > TYPE_1 < TYPE_3 { try { TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
protected TYPE_1 < ? > METHOD_1 ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_4 , project , STRING_1 ) ; METHOD_3 ( VAR_5 , project , STRING_2 ) ; return METHOD_4 ( project ) ; METHOD_5 ( VAR_6 ) ; VAR_7 : Test = VAR_8 ; TYPE_3 . submit VAR_9 ; on ( projects ) ; } } ; ) projects ( on ; VAR_9 submit . TYPE_3 ; VAR_8 = Test : VAR_7 ; ) VAR_6 ( METHOD_5 ; ) project ( METHOD_4 return ; ) STRING_2 , project , VAR_5 ( METHOD_3 ; ) STRING_1 , project , VAR_4 ( METHOD_3 ; ) VAR_3 , VAR_2 , VAR_1 , name ( METHOD_2 = project com.google.gerrit.reviewdb.client.Project.NameKey { java.lang.Exception throws ) VAR_3 TYPE_2 , VAR_2 boolean , VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey , name java.lang.String ( METHOD_1 > ? < TYPE_1 protected 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { try { VAR_3 . projects ( ) . name ( VAR_1 . get ( ) ) . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_1 e ) { e . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( e . getMessage ( ) ) . contains ( VAR_2 ) ; } } } } ; ) VAR_2 ( contains . ) ) ( getMessage . e ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_3 . e { ) e TYPE_1 ( catch } ; ) VAR_2 ( METHOD_2 . ) ) ( get . VAR_1 ( name . ) ( projects . VAR_3 { try { java.lang.Exception throws ) VAR_2 java.lang.String , VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void private 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , line , 0 , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } } ; ) VAR_3 , res , VAR_2 , VAR_1 ( METHOD_8 ; ) ) ( METHOD_7 , ) false , 0 , line , ) ( METHOD_6 . cm ( TYPE_1 new , VAR_1 ( METHOD_5 . java.util.Collections = res int ; 0 : ) ) ( METHOD_4 . ) ( METHOD_1 . cm ( METHOD_3 . cm ? ) ) ( METHOD_2 . ) ( METHOD_1 . cm ( = line int { ) ( run void public 
private TYPE_1 METHOD_1 ( final java.lang.String name , final java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( name ) ; account . METHOD_4 ( email ) ; final TYPE_1 s = new TYPE_1 ( account , VAR_2 . Collections < TYPE_3 > METHOD_5 ( ) , VAR_2 . Collections < TYPE_4 > METHOD_5 ( ) ) ; return s ; } } ; s return ; ) ) ( METHOD_5 > TYPE_4 < Collections . VAR_2 , ) ( METHOD_5 > TYPE_3 < Collections . VAR_2 , account ( TYPE_1 new = s TYPE_1 final ; ) email ( METHOD_4 . account ; ) name ( METHOD_3 . account ; ) ) ( METHOD_2 . TYPE_2 , VAR_1 ( com.google.gerrit.reviewdb.client.Account new = account com.google.gerrit.reviewdb.client.Account final ; ) INT_1 ( com.google.gerrit.reviewdb.client.Account.Id new = VAR_1 com.google.gerrit.reviewdb.client.Account.Id final { ) email java.lang.String final , name java.lang.String final ( METHOD_1 TYPE_1 private 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) { TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_4 , ( ) - > { VAR_4 . set ( VAR_3 . get ( ) ) ; } ) ; } } ; ) } ; ) ) ( get . VAR_3 ( set . VAR_4 { > - ) ( , VAR_4 ( METHOD_2 ; ) VAR_2 , VAR_1 , name ( METHOD_1 = VAR_4 > TYPE_1 < TYPE_5 { ) VAR_3 > TYPE_1 < TYPE_4 , VAR_2 TYPE_3 , VAR_1 > TYPE_1 < TYPE_2 , name java.lang.String ( METHOD_1 void > TYPE_1 < public 
TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final java.util.List < TYPE_4 > VAR_3 ) throws java.io.IOException { VAR_4 = db . METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } finally { VAR_4 . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . VAR_4 { finally } ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_3 return { try ; ) ( METHOD_2 . db = VAR_4 { java.io.IOException throws ) VAR_3 > TYPE_4 < java.util.List final , VAR_2 TYPE_3 final , VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 
protected synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . VAR_3 . METHOD_3 ( VAR_4 ) ; synchronized ( VAR_2 ) { VAR_2 . add ( this ) ; } final TYPE_4 VAR_5 = new TYPE_4 ( VAR_1 ) ; if ( METHOD_4 ( ) ) { new TYPE_5 ( VAR_5 , VAR_5 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_6 = VAR_7 . submit ( VAR_5 ) ; } } } } ; ) VAR_5 ( submit . VAR_7 = VAR_6 { else } ; ) ( METHOD_5 . ) ) ( toString . VAR_5 , VAR_5 ( TYPE_5 new { ) ) ( METHOD_4 ( if ; ) VAR_1 ( TYPE_4 new = VAR_5 TYPE_4 final } ; ) this ( add . VAR_2 { ) VAR_2 ( synchronized ; ) VAR_4 ( METHOD_3 . VAR_3 . ) ( METHOD_2 . TYPE_3 = VAR_2 > TYPE_2 < java.util.List final { ) VAR_1 TYPE_1 final ( METHOD_1 void synchronized protected 
private static boolean METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( FLOAT_1 < = ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) { return true ; } else { VAR_2 . METHOD_4 ( STRING_2 ) ; VAR_2 . METHOD_4 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; return false ; } } } } ; false return ; ) ) STRING_4 + ) VAR_1 + STRING_3 ( ( ( METHOD_4 . VAR_2 ; ) STRING_2 ( METHOD_4 . VAR_2 { else } ; true return { ) ) ) VAR_1 ( METHOD_3 . TYPE_2 ( = < FLOAT_1 ( if ; ) STRING_1 ( METHOD_2 . TYPE_1 = VAR_1 java.lang.String final { ) ( METHOD_1 boolean static private 
public void delete ( int id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_5 | TYPE_4 ( catch } ; ) ( get . ) ) VAR_1 ( delete . VAR_3 , ) VAR_1 ( delete . VAR_2 ( METHOD_2 . TYPE_3 { try ; ) id ( METHOD_1 . TYPE_2 = VAR_1 TYPE_1 { java.io.IOException throws ) id int ( delete void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; VAR_1 . METHOD_5 ( ) ; return VAR_3 ; } } ; VAR_3 return ; ) ( METHOD_5 . VAR_1 ; ) ) ) ( change.getId ( get . ) ( METHOD_4 . VAR_1 , change ( METHOD_3 . TYPE_1 = VAR_3 TYPE_1 ; ) VAR_2 , VAR_1 ( METHOD_2 ; ) ) ( getChange . VAR_2 ( com.google.gerrit.reviewdb.client.Change new = change com.google.gerrit.reviewdb.client.Change { TYPE_5 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 throws ) VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
private TYPE_1 METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( err ) ; } } } } ; ) err ( METHOD_3 . TYPE_2 return { else } ; ) ( METHOD_2 . TYPE_2 return } ; ) e , err ( error . VAR_2 { else } ; ) err ( error . VAR_2 { ) null == e ( if { ) VAR_1 ( if { ) e java.lang.Exception , err java.lang.String ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { VAR_1 . close ( ) ; } if ( ( rw ) ! = null ) { rw . close ( ) ; } if ( ( repo ) ! = null ) { repo . close ( ) ; } } } } ; ) ( close . repo { ) null = ! ) repo ( ( if } ; ) ( close . rw { ) null = ! ) rw ( ( if } ; ) ( close . VAR_1 { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , config . METHOD_4 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; } } ; ) VAR_1 ( create . VAR_4 return } ; VAR_1 = VAR_2 ; ) ) ( METHOD_4 . config , ) ( METHOD_3 . ) ( getProject ( METHOD_2 . VAR_3 = VAR_1 { ) null == VAR_1 ( if ; VAR_2 = VAR_1 TYPE_3 { TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
Account . Id getAccountId ( ) { com.google.gerrit.reviewdb.client.Account.Id id = get ( 0 ) . VAR_1 ; for ( int i = 1 ; i < ( size ( ) ) ; i ++ ) { TYPE_1 . METHOD_1 ( TYPE_2 . equals ( id , get ( i ) . VAR_1 ) , STRING_1 , id , get ( i ) . VAR_1 ) ; } return id ; } } ; id return } ; ) VAR_1 . ) i ( get , id , STRING_1 , ) VAR_1 . ) i ( get , id ( equals . TYPE_2 ( METHOD_1 . TYPE_1 { ) ++ i ; ) ) ( size ( < i ; 1 = i int ( for ; VAR_1 . ) 0 ( get = id com.google.gerrit.reviewdb.client.Account.Id { ) ( getAccountId Id . Account 
public static TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String name ) { TYPE_1 . METHOD_2 ( name ) ; java.util.List < TYPE_2 > values = new java.util.ArrayList < TYPE_2 > ( 2 ) ; values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) ; values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ; TYPE_1 type = new TYPE_1 ( name , values ) ; type . METHOD_3 ( id ) ; return type ; } } ; type return ; ) id ( METHOD_3 . type ; ) values , name ( TYPE_1 new = type TYPE_1 ; ) ) STRING_2 , ) ) 1 ( ) short ( ( ( TYPE_2 new ( add . values ; ) ) STRING_1 , ) ) 0 ( ) short ( ( ( TYPE_2 new ( add . values ; ) 2 ( > TYPE_2 < java.util.ArrayList new = values > TYPE_2 < java.util.List ; ) name ( METHOD_2 . TYPE_1 { ) name java.lang.String , id java.lang.String ( METHOD_1 TYPE_1 static public 
static TYPE_1 METHOD_1 ( ) { TYPE_1 i = new TYPE_1 ( ) ; i . i = 1 ; VAR_1 = 2 ; i . id = INT_1 ; VAR_2 = INT_2 ; VAR_3 = INT_3 ; VAR_4 = INT_4 ; i . b = true ; VAR_5 = false ; VAR_6 = true ; i . s = STRING_1 ; VAR_7 = STRING_2 ; VAR_8 = null ; i . t = VAR_9 ; VAR_10 = VAR_9 ; return i ; } } ; i return ; VAR_9 = VAR_10 ; VAR_9 = t . i ; null = VAR_8 ; STRING_2 = VAR_7 ; STRING_1 = s . i ; true = VAR_6 ; false = VAR_5 ; true = b . i ; INT_4 = VAR_4 ; INT_3 = VAR_3 ; INT_2 = VAR_2 ; INT_1 = id . i ; 2 = VAR_1 ; 1 = i . i ; ) ( TYPE_1 new = i TYPE_1 { ) ( METHOD_1 TYPE_1 static 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 VAR_5 = user ( VAR_1 , VAR_4 ) ; METHOD_3 ( VAR_5 ) ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( STRING_2 , VAR_5 ) ; METHOD_5 ( STRING_3 , VAR_5 ) ; METHOD_5 ( STRING_4 , VAR_5 ) ; METHOD_3 ( STRING_1 , VAR_5 ) ; METHOD_3 ( STRING_5 , VAR_5 ) ; } } ; ) VAR_5 , STRING_5 ( METHOD_3 ; ) VAR_5 , STRING_1 ( METHOD_3 ; ) VAR_5 , STRING_4 ( METHOD_5 ; ) VAR_5 , STRING_3 ( METHOD_5 ; ) VAR_5 , STRING_2 ( METHOD_5 ; ) VAR_5 ( METHOD_4 ; ) VAR_5 ( METHOD_3 ; ) VAR_4 , VAR_1 ( user = VAR_5 TYPE_2 ; ) STRING_2 , VAR_4 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
private void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( VAR_2 ! = null ) & & ( ! ( VAR_2 . isEmpty ( ) ) ) ) { VAR_1 . set ( STRING_1 , VAR_2 ) ; } if ( ( VAR_3 ! = null ) & & ( ! ( VAR_3 . isEmpty ( ) ) ) ) { VAR_4 . METHOD_2 ( STRING_2 , null , STRING_3 , VAR_3 ) ; } } } } ; ) VAR_3 , STRING_3 , null , STRING_2 ( METHOD_2 . VAR_4 { ) ) ) ) ( isEmpty . VAR_3 ( ! ( & & ) null = ! VAR_3 ( ( if } ; ) VAR_2 , STRING_1 ( set . VAR_1 { ) ) ) ) ( isEmpty . VAR_2 ( ! ( & & ) null = ! VAR_2 ( ( if { ) VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; VAR_2 . METHOD_4 ( rsrc ) ; VAR_2 . apply ( account , new TYPE_4 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; ) ) ( TYPE_4 new , account ( apply . VAR_2 ; ) rsrc ( METHOD_4 . VAR_2 ; ) ) id ( METHOD_3 . TYPE_3 , VAR_1 ( METHOD_2 . changes = rsrc TYPE_2 { try { TYPE_1 throws ) id java.lang.String ( METHOD_1 void public 
public void METHOD_1 ( final TYPE_1 event ) { if ( ( VAR_1 ) == null ) { TYPE_2 . METHOD_2 ( patchSet . getKey ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { METHOD_3 ( result ) ; } } ) ; } } } } ; ) } } ; ) result ( METHOD_3 { ) result TYPE_4 final ( onSuccess void public { ) ( > TYPE_4 < TYPE_3 new , ) ( getKey . patchSet ( METHOD_2 . TYPE_2 { ) null == ) VAR_1 ( ( if { ) event TYPE_1 final ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; switch ( type ) { case VAR_6 : case VAR_7 : VAR_8 = VAR_9 ; case VAR_10 : path = VAR_1 . path ; case VAR_11 : revision = VAR_1 . revision ; case VAR_12 : VAR_13 = VAR_14 ; } return this ; } } ; this return } ; VAR_14 = VAR_13 : VAR_12 case ; revision . VAR_1 = revision : VAR_11 case ; path . VAR_1 = path : VAR_10 case ; VAR_9 = VAR_8 : VAR_7 case : VAR_6 case { ) type ( switch ; VAR_5 = VAR_4 ; VAR_3 = VAR_2 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) { if ( VAR_2 ! = null ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } VAR_1 . append ( CHAR_3 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } } } ; ) VAR_6 ( append . VAR_1 { else } ; ) CHAR_3 ( append . VAR_1 } ; ) VAR_4 , VAR_1 ( METHOD_1 . VAR_5 } ; ) CHAR_2 ( append . VAR_1 { else } ; false = VAR_3 { ) VAR_3 ( if { ) VAR_2 : VAR_4 TYPE_2 final ( for ; true = VAR_3 boolean ; ) CHAR_1 ( append . VAR_1 { ) null = ! VAR_2 ( if { ) VAR_2 > TYPE_2 < java.util.List final , VAR_1 TYPE_1 final ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; } else { VAR_3 . METHOD_6 ( java.lang.String.format ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , VAR_1 ) ) ; } } } } ; ) ) VAR_1 , ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( java.lang.String.format ( METHOD_6 . VAR_3 { else } ; ) VAR_2 , VAR_1 ( METHOD_5 . TYPE_2 { ) ) VAR_1 ( METHOD_4 . TYPE_2 ( if else } ; ) VAR_2 , VAR_1 ( METHOD_3 . TYPE_2 { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { ) VAR_2 java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) & & ( ! ( METHOD_2 ( VAR_2 ) ) ) ) { java.lang.String VAR_3 = VAR_4 . getProject ( ) . getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } com.google.gerrit.reviewdb.client.Project project = VAR_4 . getProject ( ) ; if ( project . METHOD_3 ( ) ) { return METHOD_4 ( ) ; } return VAR_5 ; } } ; VAR_5 return } ; ) ( METHOD_4 return { ) ) ( METHOD_3 . project ( if ; ) ( getProject . VAR_4 = project com.google.gerrit.reviewdb.client.Project } ; ) ) STRING_2 + ) VAR_3 + STRING_1 ( ( ( TYPE_1 new return ; ) ( getName . ) ( getProject . VAR_4 = VAR_3 java.lang.String { ) ) ) ) VAR_2 ( METHOD_2 ( ! ( & & ) ) ) VAR_1 ( METHOD_2 ( ! ( ( if { ) ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; factory ( VAR_11 . Factory class ) ; } } ; ) class Factory . VAR_11 ( factory ; ) class Factory . VAR_10 ( factory ; ) class Factory . VAR_9 ( factory ; ) class Factory . VAR_8 ( factory ; ) class Factory . VAR_7 ( factory ; ) class Factory . VAR_6 ( factory ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void protected 
private void METHOD_1 ( final TYPE_1 m ) { m . METHOD_2 ( ) ; m . METHOD_3 ( STRING_1 ) ; m . METHOD_4 ( ) ; m . METHOD_5 ( ) ; m . METHOD_2 ( ) ; m . METHOD_6 ( STRING_2 ) ; m . METHOD_6 ( STRING_3 ) ; m . METHOD_4 ( ) ; m . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . m ; ) ( METHOD_4 . m ; ) STRING_3 ( METHOD_6 . m ; ) STRING_2 ( METHOD_6 . m ; ) ( METHOD_2 . m ; ) ( METHOD_5 . m ; ) ( METHOD_4 . m ; ) STRING_1 ( METHOD_3 . m ; ) ( METHOD_2 . m { ) m TYPE_1 final ( METHOD_1 void private 
private static TYPE_1 not ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > n = p . METHOD_1 ( 0 ) ; if ( n instanceof TYPE_5 ) { return TYPE_6 . METHOD_2 ( ( ( TYPE_5 < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; } TYPE_7 VAR_1 = new TYPE_7 ( ) ; VAR_1 . add ( new TYPE_8 ( ) , VAR_2 ) ; VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , n ) , VAR_3 ) ; return VAR_1 ; } } ; VAR_1 return ; ) VAR_3 , ) n , schema ( METHOD_3 . TYPE_6 ( add . VAR_1 ; ) VAR_2 , ) ( TYPE_8 new ( add . VAR_1 ; ) ( TYPE_7 new = VAR_1 TYPE_7 } ; ) ) ) n ( ) > com.google.gerrit.server.query.change.ChangeData < TYPE_5 ( ( ( METHOD_2 . TYPE_6 return { ) TYPE_5 instanceof n ( if ; ) 0 ( METHOD_1 . p = n > com.google.gerrit.server.query.change.ChangeData < TYPE_3 { TYPE_4 throws ) p > com.google.gerrit.server.query.change.ChangeData < TYPE_3 , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( not TYPE_1 static private 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { switch ( VAR_1 ) { case VAR_2 : return ( ( ! ( METHOD_2 ( ) ) ) & & ( ( user . METHOD_3 ( ) ) || ( METHOD_4 ( VAR_3 ) ) ) ) || ( METHOD_5 ( ) ) ; case VAR_4 : return ( ( ! ( METHOD_2 ( ) ) ) & & ( METHOD_6 ( java.util.Collections . METHOD_7 ( ) ) ) ) || ( METHOD_5 ( ) ) ; } throw new TYPE_2 ( ( VAR_1 + STRING_1 ) ) ; } } ; ) ) STRING_1 + VAR_1 ( ( TYPE_2 new throw } ; ) ) ( METHOD_5 ( || ) ) ) ) ( METHOD_7 . java.util.Collections ( METHOD_6 ( & & ) ) ) ( METHOD_2 ( ! ( ( return : VAR_4 case ; ) ) ( METHOD_5 ( || ) ) ) ) VAR_3 ( METHOD_4 ( || ) ) ( METHOD_3 . user ( ( & & ) ) ) ( METHOD_2 ( ! ( ( return : VAR_2 case { ) VAR_1 ( switch { TYPE_2 throws ) VAR_1 TYPE_1 ( METHOD_1 boolean private 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) & & ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) { TYPE_2 . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( false ) ; } else if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_6 ( ) ) ) ) & & ( TYPE_2 . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( true ) ; } } } } ; ) true ( METHOD_5 . VAR_2 ; ) false ( METHOD_4 . TYPE_2 { ) ) ) ( METHOD_3 . TYPE_2 ( & & ) ) ) ) ( METHOD_6 . VAR_1 ( * FLOAT_1 ( > ) ) ( METHOD_2 . VAR_1 ( ( ( if else } ; ) false ( METHOD_5 . VAR_2 ; ) true ( METHOD_4 . TYPE_2 { ) ) ) ) ( METHOD_3 . TYPE_2 ( ! ( & & ) 0 == ) ) ( METHOD_2 . VAR_1 ( ( ( if { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( req , res , null , c ) ; TYPE_5 . METHOD_4 ( req , res , msg ) ; if ( err ! = null ) { TYPE_6 . METHOD_5 ( req , err ) ; } } } } ; ) err , req ( METHOD_5 . TYPE_6 { ) null = ! err ( if ; ) msg , res , req ( METHOD_4 . TYPE_5 ; ) c , null , res , req ( METHOD_3 . TYPE_5 ; ) VAR_1 ( METHOD_2 . res { java.io.IOException throws ) err TYPE_4 , c TYPE_3 , msg java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void static public 
private TYPE_1 . Result METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = STRING_1 ; java.lang.String VAR_4 = STRING_2 ; TYPE_2 VAR_5 = VAR_6 . create ( db , admin . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_1 , VAR_2 ) ; TYPE_2 . Result r = VAR_5 . to ( git , STRING_3 ) ; r . METHOD_3 ( ) ; return r ; } } ; r return ; ) ( METHOD_3 . r ; ) STRING_3 , git ( to . VAR_5 = r Result . TYPE_2 ; ) VAR_2 , VAR_1 , VAR_4 , VAR_3 , ) ( METHOD_2 . admin , db ( create . VAR_6 = VAR_5 TYPE_2 ; STRING_2 = VAR_4 java.lang.String ; STRING_1 = VAR_3 java.lang.String { java.lang.Exception throws ) VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 Result . TYPE_1 private 
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; if ( TYPE_2 . isEmpty ( VAR_3 ) ) { return false ; } boolean VAR_4 = TYPE_3 . contains ( VAR_3 . METHOD_4 ( ) ) ; VAR_5 . METHOD_5 ( ( ( ( ( ( STRING_2 + VAR_2 ) + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_4 ) ) ; return VAR_4 ; } } ; VAR_4 return ; ) ) VAR_4 + ) STRING_4 + ) VAR_3 + ) STRING_3 + ) VAR_2 + STRING_2 ( ( ( ( ( ( METHOD_5 . VAR_5 ; ) ) ( METHOD_4 . VAR_3 ( contains . TYPE_3 = VAR_4 boolean } ; false return { ) ) VAR_3 ( isEmpty . TYPE_2 ( if ; ) STRING_1 , VAR_2 ( METHOD_3 . TYPE_2 = VAR_3 java.lang.String ; ) ( METHOD_2 . VAR_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 boolean static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 , VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } } ; ) VAR_11 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 , VAR_7 , VAR_6 ( METHOD_6 . ) VAR_5 ( to . ) VAR_2 , VAR_4 ( to . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_3 ( assertThat ; ) VAR_2 , VAR_1 ( METHOD_4 ; ) admin ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 ) , new TYPE_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . ) ) STRING_7 , STRING_6 , projectName ( METHOD_2 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ) ( TYPE_4 new , ) STRING_5 ( TYPE_3 new , ) config , projectName ( TYPE_2 new ( TYPE_1 new = VAR_1 TYPE_1 ; ) STRING_4 + ) STRING_3 + STRING_2 ( ( + STRING_1 = config java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( STRING_1 ) ; TYPE_2 ctl = METHOD_2 ( VAR_1 ) ; VAR_3 . create ( ) . METHOD_3 ( db , VAR_1 . getId ( ) ) ; METHOD_4 ( ctl , null , TYPE_3 . METHOD_5 ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) ) ) ; } } ; ) ) ) ) ) ( getId . VAR_1 ( + STRING_2 ( ( METHOD_5 . TYPE_3 , null , ctl ( METHOD_4 ; ) ) ( getId . VAR_1 , db ( METHOD_3 . ) ( create . VAR_3 ; ) VAR_1 ( METHOD_2 = ctl TYPE_2 ; ) STRING_1 ( create . VAR_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 . AccountGroup METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_2 . OrmException { final TYPE_1 . ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_3 . NameKey VAR_2 = new TYPE_3 . NameKey ( VAR_1 ) ; final TYPE_1 . AccountGroup group = db . METHOD_3 ( ) . get ( VAR_2 ) ; if ( group ! = null ) { return group ; } else { return null ; } } finally { db . close ( ) ; } } } } ; ) ( close . db { finally } } ; null return { else } ; group return { ) null = ! group ( if ; ) VAR_2 ( get . ) ( METHOD_3 . db = group AccountGroup . TYPE_1 final ; ) VAR_1 ( NameKey . TYPE_3 new = VAR_2 NameKey . TYPE_3 final { try ; ) ( METHOD_2 . schema = db ReviewDb . TYPE_1 final { OrmException . TYPE_2 throws ) VAR_1 java.lang.String final ( METHOD_1 AccountGroup . TYPE_1 public 
private java.lang.String METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; TYPE_2 . Result result = VAR_1 . to ( git , STRING_1 ) ; VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 , STRING_2 , STRING_3 , result . getChangeId ( ) ) ; return VAR_1 . to ( git , STRING_1 ) . getChangeId ( ) ; } } ; ) ( getChangeId . ) STRING_1 , git ( to . VAR_1 return ; ) ) ( getChangeId . result , STRING_3 , STRING_2 , VAR_3 , ) ( METHOD_2 . admin , db ( create . VAR_2 = VAR_1 ; ) STRING_1 , git ( to . VAR_1 = result Result . TYPE_2 ; ) ) ( METHOD_2 . admin , db ( create . VAR_2 = VAR_1 TYPE_2 { TYPE_1 , java.io.IOException throws ) ( METHOD_1 java.lang.String private 
public TYPE_1 . AccountGroup METHOD_1 ( final TYPE_2 . Id key ) { final TYPE_2 . NameKey name = new TYPE_2 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ; final TYPE_1 . AccountGroup VAR_1 = new TYPE_1 . AccountGroup ( name , key ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return VAR_1 ; } } ; VAR_1 return ; ) VAR_3 ( METHOD_3 . VAR_1 ; ) VAR_2 ( METHOD_2 . VAR_1 ; ) key , name ( AccountGroup . TYPE_1 new = VAR_1 AccountGroup . TYPE_1 final ; ) ) ) ) ( toString . key ( + STRING_1 ( ( NameKey . TYPE_2 new = name NameKey . TYPE_2 final { ) key Id . TYPE_2 final ( METHOD_1 AccountGroup . TYPE_1 public 
private static void METHOD_1 ( ) { final TYPE_1 me ; me = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) , ( ( TYPE_4 ) ( null ) ) ) ; me . METHOD_5 ( STRING_1 ) ; me . METHOD_6 ( STRING_2 ) ; } } ; ) STRING_2 ( METHOD_6 . me ; ) STRING_1 ( METHOD_5 . me ; ) ) ) null ( ) TYPE_4 ( ( , ) ) ( METHOD_4 . TYPE_3 ( METHOD_3 . TYPE_2 ( METHOD_2 . VAR_1 = me ; me TYPE_1 final { ) ( METHOD_1 void static private 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + STRING_7 ) + STRING_8 ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) STRING_8 + ) STRING_7 + ) ) ) STRING_6 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_5 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_4 ( METHOD_5 . TYPE_2 ( + ) STRING_3 + STRING_2 ( ( ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; try ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; } } } } ; p return ; ) ) ) name ( METHOD_5 . repo ( METHOD_4 . ) repo ( org.eclipse.jgit.revwalk.RevWalk new , VAR_1 ( METHOD_3 . p { ) ) ( METHOD_2 . repo = VAR_1 TYPE_3 ( try ; ) ( TYPE_2 new = p TYPE_2 { java.io.IOException throws ) name java.lang.String , repo org.eclipse.jgit.lib.Repository ( METHOD_1 TYPE_1 private 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 , diff ) ; VAR_3 . METHOD_5 ( info ) ; } } ; ) info ( METHOD_5 . VAR_3 ; ) diff , VAR_1 ( METHOD_4 . VAR_2 ; ) VAR_1 ( METHOD_3 . TYPE_3 ; ) ( values . ) ( METHOD_1 . info = VAR_1 > TYPE_3 < TYPE_2 ; ) STRING_1 ( METHOD_2 . ) ( METHOD_1 . info { ) info ChangeInfo . TYPE_1 ( onSuccess void public 
private static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user . METHOD_2 ( ) ) { return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; } if ( user instanceof TYPE_3 ) { return STRING_1 + ( user . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; } return user . toString ( ) ; } } ; ) ( toString . user return } ; ) ) ( toString . ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . user ( + STRING_1 return { ) TYPE_3 instanceof user ( if } ; ) ( toString . ) ( getAccountId . ) ) user ( ) TYPE_2 ( ( return { ) ) ( METHOD_2 . user ( if { ) user TYPE_1 ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_3 = METHOD_3 ( VAR_2 . getName ( ) ) ; if ( VAR_3 ! = null ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } else { VAR_4 . add ( VAR_3 ) ; } } } } } } ; ) VAR_3 ( add . VAR_4 { else } ; ) VAR_2 ( METHOD_1 . VAR_3 { ) null = ! VAR_3 ( if ; ) ) ( getName . VAR_2 ( METHOD_3 = VAR_3 TYPE_2 { ) ) ( METHOD_2 . VAR_1 : VAR_2 TYPE_2 ( for { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; try { new TYPE_3 ( VAR_1 ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_4 e ) { assertEquals ( ( STRING_2 + ( VAR_1 . METHOD_6 ( ) ) ) , e . getMessage ( ) ) ; } } finally { VAR_1 . delete ( ) ; } } } } ; ) ( delete . VAR_1 { finally } } ; ) ) ( getMessage . e , ) ) ) ( METHOD_6 . VAR_1 ( + STRING_2 ( ( assertEquals { ) e TYPE_4 ( catch } ; ) STRING_1 ( METHOD_5 ; ) VAR_1 ( TYPE_3 new { try ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 { try ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ; cfg = new TYPE_3 ( ) ; cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ; VAR_2 = new TYPE_4 ( VAR_1 , cfg , METHOD_8 ( VAR_3 class ) ) ; VAR_2 . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . VAR_2 ; ) ) class VAR_3 ( METHOD_8 , cfg , VAR_1 ( TYPE_4 new = VAR_2 ; ) STRING_1 , STRING_3 , null , STRING_2 ( METHOD_7 . cfg ; ) ( TYPE_3 new = cfg ; ) ( METHOD_6 . ) ( METHOD_5 . ) STRING_1 ( METHOD_4 . VAR_1 ; ) ) ( METHOD_3 . ) ( METHOD_2 . TYPE_2 ( TYPE_1 new = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( true ) ; TYPE_2 . METHOD_7 ( true ) ; } } ; ) true ( METHOD_7 . TYPE_2 ; ) true ( METHOD_6 . TYPE_1 ; ) ( METHOD_5 . ) ( METHOD_4 . VAR_3 ; ) ( METHOD_5 . ) ( METHOD_4 . VAR_2 } ; null = VAR_1 ; ) ( METHOD_3 . VAR_1 { ) null = ! ) VAR_1 ( ( if ; ) ( METHOD_2 ; ) ( METHOD_1 . super { ) ( METHOD_1 void protected 
protected < TYPE_1 extends TYPE_2 , TYPE_3 extends TYPE_2 > TYPE_4 < TYPE_1 , TYPE_3 > METHOD_1 ( final TYPE_5 < TYPE_6 < TYPE_1 , TYPE_3 > > type , final java.lang.String name ) { return METHOD_1 ( TYPE_7 . get ( type , TYPE_8 . METHOD_2 ( name ) ) ) . name ( name ) ; } } ; ) name ( name . ) ) ) name ( METHOD_2 . TYPE_8 , type ( get . TYPE_7 ( METHOD_1 return { ) name java.lang.String final , type > > TYPE_3 , TYPE_1 < TYPE_6 < TYPE_5 final ( METHOD_1 > TYPE_3 , TYPE_1 < TYPE_4 > TYPE_2 extends TYPE_3 , TYPE_2 extends TYPE_1 < protected 
public void METHOD_1 ( TYPE_1 . NameKey projectName , java.lang.String VAR_1 , java.lang.String msg , java.util.List < TYPE_2 > VAR_2 , TYPE_3 < TYPE_4 > VAR_3 ) { org.eclipse.jgit.lib.ObjectId base = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_1 ) ; VAR_4 . create ( projectName , base , VAR_2 , msg ) . to ( VAR_3 ) ; } } ; ) VAR_3 ( to . ) msg , VAR_2 , base , projectName ( create . VAR_4 ; ) VAR_1 ( METHOD_2 . org.eclipse.jgit.lib.ObjectId = base org.eclipse.jgit.lib.ObjectId { ) VAR_3 > TYPE_4 < TYPE_3 , VAR_2 > TYPE_2 < java.util.List , msg java.lang.String , VAR_1 java.lang.String , projectName NameKey . TYPE_1 ( METHOD_1 void public 
protected void METHOD_1 ( int row , int VAR_1 ) { if ( ( VAR_1 == 1 ) || ( VAR_1 == 2 ) ) { if ( ! ( STRING_1 . equals ( table . METHOD_2 ( row , VAR_1 ) ) ) ) { METHOD_3 ( row , VAR_1 ) ; } } } } } } ; ) VAR_1 , row ( METHOD_3 { ) ) ) ) VAR_1 , row ( METHOD_2 . table ( equals . STRING_1 ( ! ( if { ) ) 2 == VAR_1 ( || ) 1 == VAR_1 ( ( if { ) VAR_1 int , row int ( METHOD_1 void protected 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 ! = null ) & & ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) ! = null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ; } } } } } } ; ) VAR_1 , STRING_1 ( METHOD_6 . ) ( METHOD_5 . view { ) null = ! ) view ( ( if ; ) ) ) VAR_1 ( METHOD_4 . TYPE_3 , 1 ( METHOD_3 . TYPE_2 ( METHOD_2 . VAR_2 { ) ) 0 > ) ) ( length . VAR_1 ( ( & & ) null = ! VAR_1 ( ( if ; ) ( getValue . e = VAR_1 java.lang.String { ) e > java.lang.String < TYPE_1 ( METHOD_1 void 
TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = new TYPE_2 ( ( ( VAR_4 . METHOD_2 ( ) ) + VAR_1 ) ) ; if ( ! ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) { VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . toString ( ) ) ; VAR_3 . METHOD_5 ( new TYPE_5 ( VAR_2 , VAR_5 ) ) ; } return VAR_6 . METHOD_6 ( VAR_3 , new TYPE_6 ( ) ) ; } } ; ) ) ( TYPE_6 new , VAR_3 ( METHOD_6 . VAR_6 return } ; ) ) VAR_5 , VAR_2 ( TYPE_5 new ( METHOD_5 . VAR_3 ; ) ) ( toString . TYPE_4 , STRING_1 ( METHOD_4 . VAR_3 { ) ) ) VAR_2 ( METHOD_3 . TYPE_3 ( ! ( if ; ) ) VAR_1 + ) ) ( METHOD_2 . VAR_4 ( ( ( TYPE_2 new = VAR_3 TYPE_2 { java.io.IOException throws ) VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 TYPE_1 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_1 in = new TYPE_1 ( ) ; in . account = user . email ; VAR_3 = STRING_2 ; in . ref = STRING_3 ; VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ; } } ; ) in ( METHOD_4 . ) ) ( get . VAR_5 ( name . ) ( projects . VAR_4 ; STRING_3 = ref . in ; STRING_2 = VAR_3 ; email . user = account . in ; ) ( TYPE_1 new = in TYPE_1 ; ) STRING_1 ( METHOD_3 . VAR_1 ; ) class VAR_2 ( METHOD_2 . VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 . projects ( ) . create ( in ) ; METHOD_2 ( VAR_1 , VAR_4 ) ; } } ; ) VAR_4 , VAR_1 ( METHOD_2 ; ) in ( create . ) ( projects . VAR_3 ; true = VAR_2 ; VAR_1 = name . in ; ) ( TYPE_1 new = in TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) { VAR_5 . add ( new TYPE_2 ( VAR_6 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ; } } ; ) ) edit , VAR_3 , ) 1 + ) VAR_4 - VAR_3 ( ( , ) ( METHOD_3 . ) VAR_1 ( METHOD_2 . VAR_6 ( TYPE_2 new ( add . VAR_5 { ) edit boolean , VAR_4 int , VAR_3 int , VAR_2 int , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( new TYPE_4 ( ) { public void run ( ) { TYPE_5 . METHOD_3 ( req . METHOD_4 ( ) , req . METHOD_5 ( ) , new TYPE_6 < TYPE_5 > ( ) { public void onSuccess ( TYPE_5 VAR_2 ) { VAR_1 . METHOD_6 ( req , new TYPE_7 ( TYPE_8 . METHOD_7 ( VAR_2 . values ( ) ) ) ) ; } } ) ; } } ) ; } } ; ) } } ; ) } } ; ) ) ) ) ( values . VAR_2 ( METHOD_7 . TYPE_8 ( TYPE_7 new , req ( METHOD_6 . VAR_1 { ) VAR_2 TYPE_5 ( onSuccess void public { ) ( > TYPE_5 < TYPE_6 new , ) ( METHOD_5 . req , ) ( METHOD_4 . req ( METHOD_3 . TYPE_5 { ) ( run void public { ) ( TYPE_4 new ( METHOD_2 . TYPE_3 { ) VAR_1 TYPE_2 final , req TYPE_1 final ( METHOD_1 void public 
private void METHOD_1 ( final TYPE_1 . ReceiveCommand cmd ) { TYPE_2 ctl = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ; if ( ctl . METHOD_3 ( ) ) { if ( ( TYPE_3 . METHOD_4 ( cmd ) ) & & ( ! ( METHOD_5 ( cmd ) ) ) ) { return ; } METHOD_6 ( ctl , cmd ) ; cmd . METHOD_7 ( rp ) ; } else { TYPE_3 . reject ( cmd , STRING_1 ) ; } } } } ; ) STRING_1 , cmd ( reject . TYPE_3 { else } ; ) rp ( METHOD_7 . cmd ; ) cmd , ctl ( METHOD_6 } ; return { ) ) ) ) cmd ( METHOD_5 ( ! ( & & ) ) cmd ( METHOD_4 . TYPE_3 ( ( if { ) ) ( METHOD_3 . ctl ( if ; ) ) ( getRefName . cmd ( METHOD_2 . VAR_1 = ctl TYPE_2 { ) cmd ReceiveCommand . TYPE_1 final ( METHOD_1 void private 
static TYPE_1 < com.google.gerrit.server.query.change.ChangeData , ? > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String id ) { if ( ( ( id . length ( ) ) == ( VAR_1 ) ) & & ( schema . METHOD_2 ( VAR_2 ) ) ) { return VAR_2 ; } return VAR_3 ; } } ; VAR_3 return } ; VAR_2 return { ) ) ) VAR_2 ( METHOD_2 . schema ( & & ) ) VAR_1 ( == ) ) ( length . id ( ( ( if { ) id java.lang.String , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( METHOD_1 > ? , com.google.gerrit.server.query.change.ChangeData < TYPE_1 static 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > p ) { if ( p instanceof TYPE_4 < ? > ) { return METHOD_2 ( p ) ; } else { return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; } } } } ; ) ) ) ( getValue . p , ) ( getName . ) ( METHOD_3 . p ( TYPE_6 new ( TYPE_5 new return { else } ; ) p ( METHOD_2 return { ) > ? < TYPE_4 instanceof p ( if { ) p > TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 private 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( args , VAR_1 . getId ( ) ) , this ) , 1 ) . METHOD_4 ( ) ) { if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } } ; false return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_3 ( catch } } } ; true return { ) ) ) ( getId . VAR_1 ( equals . ) ( getId . VAR_2 ( if { ) ) ( METHOD_4 . ) 1 , ) this , ) ) ( getId . VAR_1 , args ( TYPE_2 new ( METHOD_3 . TYPE_1 ( METHOD_2 . index : VAR_2 com.google.gerrit.server.query.change.ChangeData ( for { try { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData ( METHOD_1 boolean public 
private TYPE_1 message ( final TYPE_2 . Change c , final java.lang.String VAR_1 ) { final java.lang.String VAR_2 ; try { VAR_2 = TYPE_3 . METHOD_1 ( schema ) ; } catch ( TYPE_4 . OrmException e ) { return null ; } final TYPE_1 m = new TYPE_1 ( new TYPE_1 . Key ( c . getId ( ) , VAR_2 ) , null ) ; m . METHOD_2 ( VAR_1 ) ; return m ; } } ; m return ; ) VAR_1 ( METHOD_2 . m ; ) null , ) VAR_2 , ) ( getId . c ( Key . TYPE_1 new ( TYPE_1 new = m TYPE_1 final } ; null return { ) e OrmException . TYPE_4 ( catch } ; ) schema ( METHOD_1 . TYPE_3 = VAR_2 { try ; VAR_2 java.lang.String final { ) VAR_1 java.lang.String final , c Change . TYPE_2 final ( message TYPE_1 private 
protected java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , org.eclipse.jgit.revwalk.RevWalk VAR_2 ) throws TYPE_2 { try { return METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ; } catch ( java.io.IOException e ) { TYPE_2 VAR_4 = new TYPE_2 ( e . getMessage ( ) ) ; VAR_4 . METHOD_5 ( e ) ; throw VAR_4 ; } } } } ; VAR_4 throw ; ) e ( METHOD_5 . VAR_4 ; ) ) ( getMessage . e ( TYPE_2 new = VAR_4 TYPE_2 { ) e java.io.IOException ( catch } ; ) ) VAR_3 ( METHOD_4 . ) ( METHOD_3 . VAR_1 ( METHOD_2 return { try { TYPE_2 throws ) VAR_2 org.eclipse.jgit.revwalk.RevWalk , VAR_1 org.eclipse.jgit.lib.Repository ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map protected 
public void METHOD_1 ( ) throws java.lang.Exception { repo . METHOD_2 ( 2 ) ; TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , repo . commit ( ) . create ( ) ) ; repo . METHOD_2 ( ( - 1 ) ) ; TYPE_1 VAR_2 = repo . METHOD_3 ( STRING_2 , VAR_1 ) ; org.junit.Assert.assertEquals ( ( ( VAR_3 ) + INT_1 ) , METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( VAR_3 ) + 2 ) , METHOD_4 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( METHOD_4 , ) 2 + ) VAR_3 ( ( ( org.junit.Assert.assertEquals ; ) ) VAR_1 ( METHOD_4 , ) INT_1 + ) VAR_3 ( ( ( org.junit.Assert.assertEquals ; ) VAR_1 , STRING_2 ( METHOD_3 . repo = VAR_2 TYPE_1 ; ) ) 1 - ( ( METHOD_2 . repo ; ) ) ( create . ) ( commit . repo , STRING_1 ( METHOD_3 . repo = VAR_1 TYPE_1 ; ) 2 ( METHOD_2 . repo { java.lang.Exception throws ) ( METHOD_1 void public 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; } finally { VAR_1 . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . VAR_1 { finally } ; id return ; ) ( METHOD_3 . VAR_1 ; ) } { ] [ byte new , VAR_2 ( insert . VAR_1 = id org.eclipse.jgit.lib.ObjectId { try ; ) ( METHOD_2 . repo = VAR_1 TYPE_1 { java.io.IOException throws ) ( METHOD_1 org.eclipse.jgit.lib.ObjectId private 
public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ; for ( final com.google.gerrit.reviewdb.client . AccountGroup a : out . values ( ) ) { r . add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } } ; ) r ( TYPE_1 new return } ; ) ) a ( TYPE_2 new ( add . r { ) ) ( values . out : a AccountGroup . com.google.gerrit.reviewdb.client final ( for ; ) ) ( size . out ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.List final { ) ( create TYPE_1 public 
private java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { for ( TYPE_2 VAR_4 : VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { java.lang.String [ ] VAR_5 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; VAR_2 . add ( VAR_5 [ 0 ] ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) ] 0 [ VAR_5 ( add . VAR_2 ; ) STRING_1 ( METHOD_5 . ) ( METHOD_4 . VAR_4 = VAR_5 ] [ java.lang.String { ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_3 : VAR_4 TYPE_2 ( for { ) VAR_1 : VAR_3 TYPE_1 ( for ; ) ( > < java.util.ArrayList new = VAR_2 > java.lang.String < java.util.ArrayList { ) VAR_1 > TYPE_1 < java.util.List ( METHOD_1 > java.lang.String < java.util.List private 
protected void insert ( final int row , final TYPE_1 VAR_1 ) { table . METHOD_1 ( row ) ; METHOD_2 ( row ) ; final TYPE_2 VAR_2 = table . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ; VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_6 ( ) ) ; VAR_2 . METHOD_4 ( row , 2 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ; METHOD_7 ( row , VAR_1 ) ; } } ; ) VAR_1 , row ( METHOD_7 ; ) ) ( METHOD_5 . ) ( css . TYPE_3 , 2 , row ( METHOD_4 . VAR_2 ; ) ) ( METHOD_6 . ) ( css . TYPE_3 , 1 , row ( METHOD_4 . VAR_2 ; ) ) ( METHOD_5 . ) ( css . TYPE_3 , 1 , row ( METHOD_4 . VAR_2 ; ) ( METHOD_3 . table = VAR_2 TYPE_2 final ; ) row ( METHOD_2 ; ) row ( METHOD_1 . table { ) VAR_1 TYPE_1 final , row int final ( insert void protected 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( ctx . getProject ( ) , psId . getParentKey ( ) ) ; cm . METHOD_1 ( ctx . METHOD_2 ( ) . getAccountId ( ) ) ; cm . METHOD_3 ( patchSet , info ) ; cm . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { VAR_2 . error ( ( STRING_1 + ( psId ) ) , e ) ; } } } } ; ) e , ) ) psId ( + STRING_1 ( ( error . VAR_2 { ) e java.lang.Exception ( catch } ; ) ( METHOD_4 . cm ; ) info , patchSet ( METHOD_3 . cm ; ) ) ( getAccountId . ) ( METHOD_2 . ctx ( METHOD_1 . cm ; ) ) ( getParentKey . psId , ) ( getProject . ctx ( create . VAR_1 = cm TYPE_1 { try { ) ( run void public 
public void run ( ) { try { METHOD_1 ( ) ; } catch ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( 1 ) ; } catch ( TYPE_3 e ) { if ( VAR_1 . METHOD_3 ( ) . equals ( STRING_1 ) ) METHOD_4 ( e ) ; else VAR_2 . METHOD_5 ( e . toString ( ) ) ; } catch ( java.lang.Exception e ) { METHOD_4 ( e ) ; } METHOD_6 ( ) ; } } ; ) ( METHOD_6 } ; ) e ( METHOD_4 { ) e java.lang.Exception ( catch } ; ) ) ( toString . e ( METHOD_5 . VAR_2 else ; ) e ( METHOD_4 ) ) STRING_1 ( equals . ) ( METHOD_3 . VAR_1 ( if { ) e TYPE_3 ( catch } ; ) 1 ( METHOD_2 . TYPE_2 { ) e TYPE_1 ( catch } ; ) ( METHOD_1 { try { ) ( run void public 
private TYPE_1 METHOD_1 ( TYPE_2 cfg , java.lang.String revision ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( cfg . METHOD_4 ( VAR_2 , true ) ) . METHOD_5 ( STRING_1 ) ; for ( java.lang.String name : VAR_3 . METHOD_6 ( ) ) { VAR_1 . METHOD_7 ( name , VAR_3 . METHOD_8 ( name ) ) ; } VAR_1 . METHOD_7 ( STRING_2 ) ; VAR_1 . METHOD_7 ( STRING_3 , revision ) ; return VAR_1 . get ( ) ; } } ; ) ( get . VAR_1 return ; ) revision , STRING_3 ( METHOD_7 . VAR_1 ; ) STRING_2 ( METHOD_7 . VAR_1 } ; ) ) name ( METHOD_8 . VAR_3 , name ( METHOD_7 . VAR_1 { ) ) ( METHOD_6 . VAR_3 : name java.lang.String ( for ; ) STRING_1 ( METHOD_5 . ) ) true , VAR_2 ( METHOD_4 . cfg ( METHOD_3 . ) ( METHOD_2 . TYPE_3 = VAR_1 TYPE_3 { ) revision java.lang.String , cfg TYPE_2 ( METHOD_1 TYPE_1 private 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 in ) throws TYPE_4 , com.google.gwtorm.server.OrmException { if ( ( VAR_1 . get ( ) ) ! = ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , rsrc . getChange ( ) . getId ( ) ) ; return TYPE_1 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . TYPE_1 return ; ) ) ( getId . ) ( getChange . rsrc , ) ( getAccountId . ) ( get . VAR_1 ( METHOD_2 . VAR_2 } ; ) STRING_1 ( TYPE_4 new throw { ) ) ) ( METHOD_1 . rsrc ( = ! ) ) ( get . VAR_1 ( ( if { com.google.gwtorm.server.OrmException , TYPE_4 throws ) in TYPE_3 , rsrc TYPE_2 ( apply > ? < TYPE_1 public 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.util.Set < TYPE_2 > VAR_3 ) throws java.io.IOException { java.lang.String [ ] VAR_4 = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_5 = TYPE_3 . METHOD_3 ( VAR_4 , STRING_1 ) ; if ( ! ( TYPE_4 . METHOD_4 ( VAR_5 ) ) ) { VAR_6 . METHOD_5 ( VAR_1 , VAR_5 ) ; } } } } ; ) VAR_5 , VAR_1 ( METHOD_5 . VAR_6 { ) ) ) VAR_5 ( METHOD_4 . TYPE_4 ( ! ( if ; ) STRING_1 , VAR_4 ( METHOD_3 . TYPE_3 = VAR_5 java.lang.String ; ) ( METHOD_2 . VAR_2 = VAR_4 ] [ java.lang.String { java.io.IOException throws ) VAR_3 > TYPE_2 < java.util.Set , VAR_2 TYPE_1 , VAR_1 java.lang.String ( METHOD_1 void public 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String topic ) throws TYPE_1 { if ( ( topic == null ) || ( topic . isEmpty ( ) ) ) { topic = STRING_1 + ( TYPE_2 . METHOD_2 ( ) . toString ( ) ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_1 , topic ) ; VAR_3 . changes ( ) . id ( VAR_1 ) . topic ( topic ) ; } return topic ; } } ; topic return } ; ) topic ( topic . ) VAR_1 ( id . ) ( changes . VAR_3 ; ) topic , VAR_1 , STRING_2 ( METHOD_3 . VAR_2 ; ) ) ( toString . ) ( METHOD_2 . TYPE_2 ( + STRING_1 = topic { ) ) ) ( isEmpty . topic ( || ) null == topic ( ( if { TYPE_1 throws ) topic java.lang.String , VAR_1 java.lang.String ( METHOD_1 java.lang.String private 
java.util.Map < java.lang.String , ? > METHOD_1 ( TYPE_1 req ) throws java.io.IOException { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( req ) . METHOD_3 ( ) ; return TYPE_3 . of ( STRING_1 , VAR_3 , STRING_2 , TYPE_4 . METHOD_4 ( VAR_4 ) , STRING_3 , METHOD_5 ( req , VAR_5 , TYPE_5 . METHOD_6 ( VAR_6 ) ) , STRING_4 , METHOD_5 ( req , VAR_7 , METHOD_7 ( req ) ) ) ; } } ; ) ) ) req ( METHOD_7 , VAR_7 , req ( METHOD_5 , STRING_4 , ) ) VAR_6 ( METHOD_6 . TYPE_5 , VAR_5 , req ( METHOD_5 , STRING_3 , ) VAR_4 ( METHOD_4 . TYPE_4 , STRING_2 , VAR_3 , STRING_1 ( of . TYPE_3 return ; ) ( METHOD_3 . ) req ( METHOD_2 . VAR_2 = VAR_1 TYPE_2 { java.io.IOException throws ) req TYPE_1 ( METHOD_1 > ? , java.lang.String < java.util.Map 
public int METHOD_1 ( TYPE_1 b ) { int VAR_1 = ( TYPE_1 . index ( this ) ) - ( TYPE_1 . index ( b ) ) ; if ( VAR_1 == 0 ) getName ( ) . METHOD_1 ( b . getName ( ) ) ; return VAR_1 ; } } ; VAR_1 return ; ) ) ( getName . b ( METHOD_1 . ) ( getName ) 0 == VAR_1 ( if ; ) ) b ( index . TYPE_1 ( - ) ) this ( index . TYPE_1 ( = VAR_1 int { ) b TYPE_1 ( METHOD_1 int public 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = db . METHOD_2 ( ) ; final TYPE_2 VAR_2 = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( VAR_5 , VAR_6 ) ; } } ; ) VAR_6 , VAR_5 ( assertEquals ; ) VAR_4 , VAR_3 ( assertEquals ; ) VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 . db = VAR_2 TYPE_2 final ; ) ( METHOD_2 . db = VAR_1 TYPE_2 final ; ) ( create . db { OrmException . TYPE_1 throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo = METHOD_3 ( ctl ) ) { TYPE_1 VAR_4 = METHOD_4 ( ctl , VAR_5 . create ( db . get ( ) , ctl ) , in , repo , true ) ; VAR_1 . METHOD_5 ( ) ; return VAR_4 ; } } } } ; VAR_4 return ; ) ( METHOD_5 . VAR_1 ; ) true , repo , in , ) ctl , ) ( get . db ( create . VAR_5 , ctl ( METHOD_4 = VAR_4 TYPE_1 { ) ) ctl ( METHOD_3 = repo org.eclipse.jgit.lib.Repository ( try ; ) ) VAR_3 ( METHOD_2 ( create . VAR_2 = VAR_1 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 , TYPE_3 throws ) in com.google.gerrit.reviewdb.client.PatchSet , ctl TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; METHOD_3 ( ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_4 ) ) , METHOD_2 ( STRING_1 ) ) ; METHOD_3 ( ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ; } } ; ) ) STRING_1 ( METHOD_2 , ) ) STRING_5 + STRING_2 ( + STRING_1 ( ( assertEquals ; ) ( METHOD_3 ; ) ) STRING_1 ( METHOD_2 , ) ) STRING_4 + STRING_2 ( + STRING_1 ( ( assertEquals ; ) ( METHOD_3 ; ) ) STRING_1 ( METHOD_2 , ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
private int METHOD_1 ( TYPE_1 cfg , java.lang.String name , int VAR_1 ) { try { return cfg . METHOD_1 ( name , VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . error ( java.lang.String.format ( STRING_1 , name , VAR_1 ) ) ; VAR_2 . METHOD_2 ( ( STRING_2 + ( e . getMessage ( ) ) ) , e ) ; return VAR_1 ; } } } } ; VAR_1 return ; ) e , ) ) ) ( getMessage . e ( + STRING_2 ( ( METHOD_2 . VAR_2 ; ) ) VAR_1 , name , STRING_1 ( java.lang.String.format ( error . VAR_2 { ) e TYPE_2 ( catch } ; ) VAR_1 , name ( METHOD_1 . cfg return { try { ) VAR_1 int , name java.lang.String , cfg TYPE_1 ( METHOD_1 int private 
public TYPE_1 add ( final TYPE_2 < TYPE_3 > VAR_1 ) { final TYPE_4 < TYPE_2 < TYPE_3 > > ref = new TYPE_4 < TYPE_2 < TYPE_3 > > ( VAR_1 ) ; VAR_2 . add ( ref ) ; return new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ref . METHOD_2 ( VAR_1 , null ) ) { VAR_2 . METHOD_1 ( ref ) ; } } } ; } } ; } } } ; ) ref ( METHOD_1 . VAR_2 { ) ) null , VAR_1 ( METHOD_2 . ref ( if { ) ( METHOD_1 void public { ) ( TYPE_1 new return ; ) ref ( add . VAR_2 ; ) VAR_1 ( > > TYPE_3 < TYPE_2 < TYPE_4 new = ref > > TYPE_3 < TYPE_2 < TYPE_4 final { ) VAR_1 > TYPE_3 < TYPE_2 final ( add TYPE_1 public 
private synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . getName ( ) ; VAR_3 . info ( java.lang.String.format ( STRING_1 , name , VAR_1 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_5 . METHOD_6 ( name ) ; VAR_6 . METHOD_6 ( name ) ; VAR_7 . add ( VAR_1 ) ; } } ; ) VAR_1 ( add . VAR_7 ; ) name ( METHOD_6 . VAR_6 ; ) name ( METHOD_6 . VAR_5 ; ) VAR_1 ( METHOD_5 . VAR_4 ; ) VAR_4 ( METHOD_4 . VAR_1 ; ) ) ) ( METHOD_3 . VAR_1 , name , STRING_1 ( java.lang.String.format ( info . VAR_3 ; ) ( getName . VAR_1 = name java.lang.String ; ) VAR_1 ( METHOD_2 . VAR_2 { ) VAR_1 TYPE_1 ( METHOD_1 void synchronized private 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_1 result = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1 . METHOD_3 ( VAR_2 ) ; } } . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return result ; } } ; result return ; ) ) ( METHOD_5 . VAR_1 ( METHOD_4 . } } ; ) VAR_2 ( METHOD_3 . VAR_1 { java.io.IOException throws ) VAR_2 TYPE_3 ( METHOD_2 void public { ) ( TYPE_1 new = result TYPE_1 { ) VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { VAR_2 . display ( r . METHOD_3 ( ) ) ; VAR_3 . display ( r . METHOD_4 ( ) ) ; VAR_4 . display ( r . METHOD_5 ( ) ) ; } public void METHOD_6 ( final TYPE_4 VAR_5 ) { TYPE_5 . log ( STRING_1 , VAR_5 ) ; } } ) ; } } ; ) } } ; ) VAR_5 , STRING_1 ( log . TYPE_5 { ) VAR_5 TYPE_4 final ( METHOD_6 void public } ; ) ) ( METHOD_5 . r ( display . VAR_4 ; ) ) ( METHOD_4 . r ( display . VAR_3 ; ) ) ( METHOD_3 . r ( display . VAR_2 { ) r TYPE_3 final ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ( VAR_1 instanceof TYPE_3 ) ) ; METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; final TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ; METHOD_3 ( ( VAR_2 instanceof TYPE_5 ) ) ; METHOD_5 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( METHOD_4 . TYPE_4 ( METHOD_5 ; ) ) TYPE_5 instanceof VAR_2 ( ( METHOD_3 ; ) STRING_2 ( METHOD_2 . TYPE_2 = VAR_2 TYPE_2 final ; ) ) VAR_1 ( METHOD_4 . TYPE_4 ( METHOD_3 ; ) ) TYPE_3 instanceof VAR_1 ( ( METHOD_3 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_2 final { TYPE_1 throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = ( cd ! = null ) ? cd . reviewers ( TYPE_2 . of ( db ) ) . values ( ) : VAR_2 . METHOD_4 ( db , change.getId ( ) ) . values ( ) ; TYPE_3 user = ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ; return VAR_1 . contains ( user . getAccountId ( ) ) ; } return false ; } } ; false return } ; ) ) ( getAccountId . user ( contains . VAR_1 return ; ) ) ) ( METHOD_2 ( ) TYPE_3 ( ( = user TYPE_3 ; ) ( values . ) ) ( change.getId , db ( METHOD_4 . VAR_2 : ) ( values . ) ) db ( of . TYPE_2 ( reviewers . cd ? ) null = ! cd ( = VAR_1 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 { ) ) ( METHOD_3 . ) ( METHOD_2 ( if { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_4 { TYPE_5 VAR_5 = METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_6 VAR_6 = TYPE_6 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ; METHOD_7 ( db , VAR_2 , VAR_5 , VAR_6 ) ; } } ; ) VAR_6 , VAR_5 , VAR_2 , db ( METHOD_7 ; ) ( METHOD_6 . ) VAR_4 ( METHOD_5 . ) STRING_1 ( METHOD_4 . ) ( METHOD_3 . TYPE_6 = VAR_6 TYPE_6 ; ) VAR_3 , VAR_1 ( METHOD_2 = VAR_5 TYPE_5 { TYPE_4 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_4 TYPE_3 , VAR_3 TYPE_2 , VAR_2 org.eclipse.jgit.lib.Repository , VAR_1 TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void private 
private void METHOD_1 ( ) { for ( TYPE_1 w = METHOD_2 ( ) ; w ! = null ; w = w . METHOD_2 ( ) ) { if ( w instanceof TYPE_2 ) { ( ( TYPE_2 ) ( w ) ) . METHOD_1 ( ) ; break ; } } } } } } ; break ; ) ( METHOD_1 . ) ) w ( ) TYPE_2 ( ( { ) TYPE_2 instanceof w ( if { ) ) ( METHOD_2 . w = w ; null = ! w ; ) ( METHOD_2 = w TYPE_1 ( for { ) ( METHOD_1 void private 
private java.lang.String METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.lib.ObjectId VAR_2 = repo . METHOD_3 ( STRING_1 ) ; org.eclipse.jgit.lib.ObjectId VAR_3 = repo . METHOD_3 ( STRING_2 ) ; return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; } finally { rw . METHOD_5 ( ) ; } } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } } ; ) ( METHOD_5 . rw { finally } ; ) VAR_3 , VAR_2 , repo ( METHOD_4 return ; ) STRING_2 ( METHOD_3 . repo = VAR_3 org.eclipse.jgit.lib.ObjectId ; ) STRING_1 ( METHOD_3 . repo = VAR_2 org.eclipse.jgit.lib.ObjectId { try ; ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk { try ; ) project ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository { java.io.IOException throws ) ( METHOD_1 java.lang.String private 
public void onSuccess ( TYPE_1 result ) { VAR_1 . METHOD_1 ( ) ; if ( TYPE_2 . METHOD_2 ( ) . auth ( ) . METHOD_3 ( ) ) { VAR_2 = VAR_3 ; if ( ( VAR_4 . METHOD_4 ( ) ) == 0 ) { final com.google.gerrit.reviewdb.client.Account me = TYPE_2 . METHOD_5 ( ) ; me . METHOD_6 ( VAR_3 ) ; METHOD_7 ( me ) ; } else { VAR_5 . METHOD_8 ( true ) ; } METHOD_9 ( ) ; } } } } ; ) ( METHOD_9 } ; ) true ( METHOD_8 . VAR_5 { else } ; ) me ( METHOD_7 ; ) VAR_3 ( METHOD_6 . me ; ) ( METHOD_5 . TYPE_2 = me com.google.gerrit.reviewdb.client.Account final { ) 0 == ) ) ( METHOD_4 . VAR_4 ( ( if ; VAR_3 = VAR_2 { ) ) ( METHOD_3 . ) ( auth . ) ( METHOD_2 . TYPE_2 ( if ; ) ( METHOD_1 . VAR_1 { ) result TYPE_1 ( onSuccess void public 
static int METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_1 . change ( ) . getProject ( ) ; try { return ( ( VAR_2 . config ) == null ) || ( project == null ) ? VAR_3 : VAR_4 . METHOD_2 ( project , VAR_5 ) . METHOD_3 ( VAR_6 , VAR_3 ) ; } catch ( TYPE_1 e ) { VAR_7 . error ( ( STRING_1 + project ) ) ; return VAR_3 ; } } } } ; VAR_3 return ; ) ) project + STRING_1 ( ( error . VAR_7 { ) e TYPE_1 ( catch } ; ) VAR_3 , VAR_6 ( METHOD_3 . ) VAR_5 , project ( METHOD_2 . VAR_4 : VAR_3 ? ) null == project ( || ) null == ) config . VAR_2 ( ( return { try ; ) ( getProject . ) ( change . VAR_1 = project com.google.gerrit.reviewdb.client.Project.NameKey { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData ( METHOD_1 int static 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( TYPE_2 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( change , VAR_1 . user , db ) ) { VAR_3 . METHOD_3 ( event ) ; } } METHOD_4 ( event ) ; } } ; ) event ( METHOD_4 } } ; ) event ( METHOD_3 . VAR_3 { ) ) db , user . VAR_1 , change ( METHOD_2 ( if { ) ) ( values . VAR_2 : VAR_1 TYPE_2 ( for { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb , event TYPE_1 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 void private 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) . to ( VAR_8 class ) ; install ( new TYPE_2 ( ) { protected void METHOD_1 ( ) { METHOD_4 ( ) . to ( VAR_9 class ) ; } } ) ; } } ; ) } } ; ) class VAR_9 ( to . ) ( METHOD_4 { ) ( METHOD_1 void protected { ) ( TYPE_2 new ( install ; ) class VAR_8 ( to . ) class VAR_7 ( bind ; ) VAR_6 ( in . ) class VAR_5 ( METHOD_3 . ) class VAR_4 ( bind ; ) class VAR_3 ( METHOD_3 . ) class VAR_2 ( METHOD_2 . ) class VAR_1 ( bind ; ) ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ; METHOD_6 ( VAR_2 , cfg ) ; } } ; ) cfg , VAR_2 ( METHOD_6 ; ) true ( METHOD_5 . ) STRING_1 , VAR_4 , VAR_3 , cfg ( METHOD_4 . TYPE_2 ; ) ( METHOD_3 . ) VAR_2 ( METHOD_2 . VAR_1 = cfg ProjectConfig . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void private 
public void name ( java.lang.String name ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = name ; try { VAR_1 . apply ( rsrc , in ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( name , e ) ; } catch ( java.lang.Exception e ) { throw TYPE_5 . METHOD_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( METHOD_1 . TYPE_5 throw { ) e java.lang.Exception ( catch } ; ) e , name ( TYPE_4 new throw { ) e TYPE_3 ( catch } ; ) in , rsrc ( apply . VAR_1 { try ; name = name . in ; ) ( TYPE_2 new = in TYPE_2 { TYPE_1 throws ) name java.lang.String ( name void public 
public java.lang.String METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String name , final java.lang.String VAR_2 , final boolean VAR_3 ) { final java.lang.String VAR_4 = get ( name ) ; java.lang.String VAR_5 = ui . METHOD_2 ( ( VAR_4 ! = null ? VAR_4 : VAR_2 ) , STRING_1 , VAR_1 ) ; if ( VAR_3 & & ( VAR_5 == VAR_2 ) ) { VAR_5 = null ; } if ( ! ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_5 ) ) ) { set ( name , VAR_5 ) ; } return VAR_5 ; } } ; VAR_5 return } ; ) VAR_5 , name ( set { ) ) ) VAR_5 , VAR_4 ( METHOD_3 . TYPE_1 ( ! ( if } ; null = VAR_5 { ) ) VAR_2 == VAR_5 ( & & VAR_3 ( if ; ) VAR_1 , STRING_1 , ) VAR_2 : VAR_4 ? null = ! VAR_4 ( ( METHOD_2 . ui = VAR_5 java.lang.String ; ) name ( get = VAR_4 java.lang.String final { ) VAR_3 boolean final , VAR_2 java.lang.String final , name java.lang.String final , VAR_1 java.lang.String final ( METHOD_1 java.lang.String public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 . Account > ( ) { public void onSuccess ( final TYPE_3 . Account result ) { display ( result . METHOD_3 ( ) ) ; METHOD_4 ( true ) ; } } ) ; } } ; ) } } ; ) true ( METHOD_4 ; ) ) ( METHOD_3 . result ( display { ) result Account . TYPE_3 final ( onSuccess void public { ) ( > Account . TYPE_3 < TYPE_2 new ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { org.junit.Assert . METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ; org.junit.Assert . METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 . ) STRING_3 , STRING_1 ( METHOD_3 . TYPE_1 ( == ) ) ( METHOD_4 . ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_1 ( ( ( METHOD_5 . org.junit.Assert ; ) ) ) ) ( METHOD_4 . ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_1 ( == ) ) ( METHOD_4 . ) STRING_2 , STRING_1 ( METHOD_3 . TYPE_1 ( ( ( METHOD_2 . org.junit.Assert { ) ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 ) ; TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) , VAR_2 ) ; } } ; ) VAR_2 , ) ( METHOD_7 . VAR_3 ( METHOD_6 . TYPE_2 ; ) VAR_1 , VAR_2 ( METHOD_5 . TYPE_2 ; ) ) ( METHOD_4 . ) ( css . TYPE_3 ( METHOD_3 . VAR_2 ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_2 TYPE_1 { ) VAR_1 java.lang.String ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.String p = STRING_1 + i ; METHOD_2 ( p ) ; TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ; } return null ; } } ; null return } ; ) ) p + ) STRING_2 + ) ) ( METHOD_4 . VAR_1 ( ( ( ( METHOD_3 . TYPE_2 ; ) p ( METHOD_2 ; i + STRING_1 = p java.lang.String { ) ++ i ; INT_1 < i ; 1 = i int ( for { java.lang.Exception throws ) ( METHOD_1 TYPE_1 public 
private TYPE_1 . Result METHOD_1 ( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( git , ref ) ; } } ; ) ref , git ( to . VAR_4 return ; ) VAR_3 , VAR_2 , VAR_1 , ) ( METHOD_2 . admin , db ( create . VAR_5 = VAR_4 TYPE_3 { TYPE_2 , java.io.IOException throws ) VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String , ref java.lang.String ( METHOD_1 Result . TYPE_1 private 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , STRING_1 ) ; try { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_3 ( VAR_2 . METHOD_5 ( ) ) ; final TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; METHOD_6 ( VAR_4 ) ; assertEquals ( VAR_1 , VAR_5 ) ; } finally { VAR_2 . delete ( ) ; VAR_1 . delete ( ) ; } } } } ; ) ( delete . VAR_1 ; ) ( delete . VAR_2 { finally } ; ) VAR_5 , VAR_1 ( assertEquals ; ) VAR_4 ( METHOD_6 ; ) VAR_1 ( TYPE_3 new = VAR_3 TYPE_3 final ; ) ) ( METHOD_5 . VAR_2 ( METHOD_3 ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 { try ; ) STRING_1 , VAR_1 ( TYPE_1 new = VAR_2 TYPE_1 final ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_1 < TYPE_2 > ( ) { private static final long VAR_1 = INT_1 ; public void METHOD_1 ( TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { try { TYPE_4 VAR_4 = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ; try { VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; } finally { VAR_4 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_6 ( STRING_1 , err ) ; } } } ; } } ; } } } ; ) err , STRING_1 ( TYPE_6 new throw { ) err java.io.IOException ( catch } } ; ) ( close . VAR_4 { finally } ; ) ( METHOD_3 . VAR_4 ; ) VAR_2 ( METHOD_2 . VAR_4 { try ; ) ) VAR_3 ( TYPE_5 new ( TYPE_4 new = VAR_4 TYPE_4 { try { ) VAR_3 TYPE_3 , VAR_2 TYPE_2 ( METHOD_1 void public ; INT_1 = VAR_1 long final static private { ) ( > TYPE_2 < TYPE_1 new return { ) ( METHOD_1 > TYPE_2 < TYPE_1 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo ) ) ; TYPE_3 query = METHOD_4 ( STRING_2 ) . METHOD_5 ( INT_1 ) ; METHOD_6 ( query , change ) ; METHOD_6 ( query . METHOD_7 ( 1 ) ) ; METHOD_6 ( query . METHOD_7 ( INT_2 ) ) ; METHOD_8 ( query . METHOD_7 ( INT_3 ) ) ; METHOD_6 ( query . METHOD_5 ( INT_3 ) . METHOD_7 ( INT_3 ) ) ; } } ; ) ) INT_3 ( METHOD_7 . ) INT_3 ( METHOD_5 . query ( METHOD_6 ; ) ) INT_3 ( METHOD_7 . query ( METHOD_8 ; ) ) INT_2 ( METHOD_7 . query ( METHOD_6 ; ) ) 1 ( METHOD_7 . query ( METHOD_6 ; ) change , query ( METHOD_6 ; ) INT_1 ( METHOD_5 . ) STRING_2 ( METHOD_4 = query TYPE_3 ; ) ) repo ( METHOD_3 ( insert = change com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 i ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_4 , TYPE_5 { TYPE_6 VAR_1 = new TYPE_6 ( new TYPE_6 . Id ( user . getAccountId ( ) , VAR_2 ) , VAR_3 ) ; VAR_4 . apply ( new TYPE_7 ( user . METHOD_2 ( ) , VAR_1 ) , null ) ; } } ; ) null , ) VAR_1 , ) ( METHOD_2 . user ( TYPE_7 new ( apply . VAR_4 ; ) VAR_3 , ) VAR_2 , ) ( getAccountId . user ( Id . TYPE_6 new ( TYPE_6 new = VAR_1 TYPE_6 { TYPE_5 , TYPE_4 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 throws ) i TYPE_1 ( METHOD_1 void private 
public java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > VAR_1 = new TYPE_1 < > ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . add ( cd . change ( ) . currentPatchSetId ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( currentPatchSetId . ) ( change . cd ( add . VAR_1 { ) VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( > < TYPE_1 new = VAR_1 > com.google.gerrit.reviewdb.client.PatchSet.Id < java.util.Set { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > com.google.gerrit.reviewdb.client.PatchSet.Id < java.util.Set public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . delete ( ) ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_9 ( VAR_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_10 ( ) . METHOD_11 ( ) ) . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . ) ) ( METHOD_11 . ) ( METHOD_10 . VAR_4 ( com.google.common.truth.Truth.assertThat ; ) VAR_3 ( METHOD_9 . VAR_5 = VAR_4 TYPE_3 ; ) ) ( METHOD_8 . VAR_1 ( METHOD_7 . ) ) ( METHOD_6 . ) ( METHOD_5 . VAR_3 ( METHOD_4 . TYPE_2 ; ) ( METHOD_3 . ) ) ( delete . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 . VAR_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private Account . Id user ( java.lang.String name , java.lang.String email ) { final TYPE_1 s = METHOD_1 ( name , email ) ; TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( s . METHOD_5 ( ) . getId ( ) ) ) ) . METHOD_6 ( TYPE_3 . of ( s ) ) ; return s . METHOD_5 ( ) . getId ( ) ; } } ; ) ( getId . ) ( METHOD_5 . s return ; ) ) s ( of . TYPE_3 ( METHOD_6 . ) ) ) ) ( getId . ) ( METHOD_5 . s ( METHOD_4 . TYPE_2 ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 ; ) email , name ( METHOD_1 = s TYPE_1 final { ) email java.lang.String , name java.lang.String ( user Id . Account private 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 , VAR_4 ) ) ; VAR_2 . METHOD_5 ( STRING_1 ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; org.eclipse.jgit.lib.ObjectId VAR_6 = METHOD_6 ( VAR_1 , VAR_5 ) ; if ( VAR_5 . get ( ) ) { return null ; } VAR_2 . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_6 ) ) ; return VAR_2 ; } } ; VAR_2 return ; ) ) VAR_6 ( METHOD_8 . TYPE_5 ( METHOD_7 . VAR_2 } ; null return { ) ) ( get . VAR_5 ( if ; ) VAR_5 , VAR_1 ( METHOD_6 = VAR_6 org.eclipse.jgit.lib.ObjectId ; ) ( TYPE_4 new = VAR_5 TYPE_4 ; ) STRING_1 ( METHOD_5 . VAR_2 ; ) ) VAR_4 , VAR_3 ( TYPE_3 new ( METHOD_4 . VAR_2 ; ) ) ( METHOD_3 ( METHOD_2 . VAR_2 ; ) ( TYPE_1 new = VAR_2 TYPE_1 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 protected 
public TYPE_1 format ( TYPE_1 out , TYPE_2 ctl , TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ; return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , VAR_1 , psId , VAR_3 ) ) ; } } ; ) ) VAR_3 , psId , VAR_1 , ) ( get . db ( METHOD_1 . VAR_2 , ctl , out ( format return ; ) ( currentPatchSetId . ) ( getChange . ctl = psId com.google.gerrit.reviewdb.client.PatchSet.Id { com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_3 , ctl TYPE_2 , out TYPE_1 ( format TYPE_1 public 
protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( ) ; } catch ( TYPE_3 . OrmException e ) { throw new TYPE_2 ( INT_1 , STRING_1 ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( INT_1 , STRING_1 ) ; } } } } ; ) STRING_1 , INT_1 ( TYPE_2 new throw { ) e TYPE_4 ( catch } ; ) STRING_1 , INT_1 ( TYPE_2 new throw { ) e OrmException . TYPE_3 ( catch } ; ) ( METHOD_2 . TYPE_1 return { try { TYPE_2 throws ) ( METHOD_1 TYPE_1 protected 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) { return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } throw new TYPE_3 ( rsrc . getName ( ) ) ; } } ; ) ) ( getName . rsrc ( TYPE_3 new throw } ; ) ) ( getProject . ) ( METHOD_2 . rsrc ( format . VAR_2 return { ) ) ) ( METHOD_1 . rsrc ( || ) VAR_1 ( ( if { TYPE_3 throws ) rsrc TYPE_2 ( apply TYPE_1 public 
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( null ) { public TYPE_2 METHOD_2 ( ) { return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; } } ; } } ; } } ; } } ; true return { ) VAR_2 TYPE_3 ( contains boolean public } ; true return { ) VAR_1 > TYPE_3 < TYPE_4 ( METHOD_5 boolean public } ; null return { ) ( METHOD_4 > TYPE_3 < java.util.Set public } ; null return { ) VAR_1 > TYPE_3 < TYPE_4 ( METHOD_3 > TYPE_3 < java.util.Set public { ) ( TYPE_2 new return { ) ( METHOD_2 TYPE_2 public { ) null ( TYPE_1 new return { ) ( METHOD_1 TYPE_1 public 
private static TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 factory = TYPE_3 . METHOD_2 ( ) ; factory . METHOD_3 ( false ) ; factory . METHOD_4 ( false ) ; factory . METHOD_5 ( true ) ; factory . METHOD_6 ( true ) ; final TYPE_1 VAR_1 = factory . METHOD_7 ( ) ; return VAR_1 ; } } ; VAR_1 return ; ) ( METHOD_7 . factory = VAR_1 TYPE_1 final ; ) true ( METHOD_6 . factory ; ) true ( METHOD_5 . factory ; ) false ( METHOD_4 . factory ; ) false ( METHOD_3 . factory ; ) ( METHOD_2 . TYPE_3 = factory TYPE_3 final { TYPE_2 throws ) ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i < = INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } } } ; ) change , VAR_1 ( METHOD_4 ; ) ) i - INT_2 ( , 0 ( METHOD_5 . key = VAR_1 java.lang.String { ) ++ i ; INT_1 = < i ; 0 = i int ( for ; ) STRING_2 ( METHOD_4 ; ) ( get . ) ( getKey . change = key java.lang.String ; ) ( insert . ) null , null , null , null , repo ( METHOD_3 = change com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; TYPE_2 < TYPE_3 > repo = METHOD_3 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_4 ( repo ) ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_4 ( repo ) ) ; TYPE_1 . METHOD_5 ( 0 , VAR_4 ) ; METHOD_6 ( STRING_2 ) ; METHOD_6 ( STRING_3 , VAR_3 ) ; METHOD_6 ( STRING_4 , VAR_3 ) ; METHOD_6 ( STRING_5 , VAR_3 ) ; METHOD_6 ( STRING_6 , VAR_3 , VAR_2 ) ; } } ; ) VAR_2 , VAR_3 , STRING_6 ( METHOD_6 ; ) VAR_3 , STRING_5 ( METHOD_6 ; ) VAR_3 , STRING_4 ( METHOD_6 ; ) VAR_3 , STRING_3 ( METHOD_6 ; ) STRING_2 ( METHOD_6 ; ) VAR_4 , 0 ( METHOD_5 . TYPE_1 ; ) ) repo ( METHOD_4 ( insert = VAR_3 com.google.gerrit.reviewdb.client.Change ; ) ) repo ( METHOD_4 ( insert = VAR_2 com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_3 = repo > TYPE_3 < TYPE_2 ; ) VAR_1 , INT_1 ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 get ( ) { try { return new TYPE_2 ( server ) ; } catch ( final TYPE_3 VAR_1 ) { return new TYPE_1 ( ) { public void METHOD_1 ( TYPE_4 . Account account , TYPE_5 info ) throws TYPE_3 { throw VAR_1 ; } } ; } } } } ; } } ; VAR_1 throw { TYPE_3 throws ) info TYPE_5 , account Account . TYPE_4 ( METHOD_1 void public { ) ( TYPE_1 new return { ) VAR_1 TYPE_3 final ( catch } ; ) server ( TYPE_2 new return { try { ) ( get TYPE_1 public 
public static com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( java.lang.String ref ) { int VAR_1 = ( ref . METHOD_2 ( TYPE_1 ) ) + ( TYPE_1 . length ( ) ) ; int VAR_2 = TYPE_2 . METHOD_3 ( ref , VAR_1 ) ; java.lang.String id = ref . METHOD_4 ( VAR_1 , VAR_2 ) ; return new com.google.gerrit.reviewdb.client.Change . Id ( TYPE_3 . METHOD_5 ( id ) ) ; } } ; ) ) id ( METHOD_5 . TYPE_3 ( Id . com.google.gerrit.reviewdb.client.Change new return ; ) VAR_2 , VAR_1 ( METHOD_4 . ref = id java.lang.String ; ) VAR_1 , ref ( METHOD_3 . TYPE_2 = VAR_2 int ; ) ) ( length . TYPE_1 ( + ) ) TYPE_1 ( METHOD_2 . ref ( = VAR_1 int { ) ref java.lang.String ( METHOD_1 Id . com.google.gerrit.reviewdb.client.Change static public 
private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > in ) { java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ; for ( TYPE_1 m : in ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( TYPE_2 c : VAR_1 . METHOD_3 ( ) ) { r . add ( new TYPE_1 ( c , VAR_2 ) ) ; } } else { r . add ( m ) ; } } return r ; } } ; r return } } ; ) m ( add . r { else } } ; ) ) VAR_2 , c ( TYPE_1 new ( add . r { ) ) ( METHOD_3 . VAR_1 : c TYPE_2 ( for { ) ) ( METHOD_2 . VAR_1 ( if { ) in : m TYPE_1 ( for ; ) ) ( size . in ( > TYPE_1 < java.util.ArrayList new = r > TYPE_1 < java.util.ArrayList { ) in > TYPE_1 < java.util.List ( METHOD_1 > TYPE_1 < java.util.List static private 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { byte [ ] msg = TYPE_3 . message ( VAR_1 ) ; res . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , STRING_1 ) ; res . METHOD_4 ( msg . length ) ; try { TYPE_5 . METHOD_5 ( res ) ; } finally { TYPE_6 out = res . METHOD_6 ( ) ; try { out . METHOD_7 ( msg ) ; } finally { out . close ( ) ; } } } } } } ; ) ( close . out { finally } ; ) msg ( METHOD_7 . out { try ; ) ( METHOD_6 . res = out TYPE_6 { finally } ; ) res ( METHOD_5 . TYPE_5 { try ; ) length . msg ( METHOD_4 . res ; ) STRING_1 , ) ( METHOD_3 . TYPE_4 ( METHOD_2 . res ; ) VAR_1 ( message . TYPE_3 = msg ] [ byte { java.io.IOException throws ) res HttpServletResponse . TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void private 
public java.lang.String METHOD_1 ( ) { final java.lang.String s = METHOD_2 ( ) ; if ( ( s == null ) || ( ( s . length ( ) ) == 0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1 = s . METHOD_3 ( STRING_2 ) ; if ( ( VAR_1 . length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ 2 ] ; } } ; ] 2 [ VAR_1 return } ; STRING_1 return { ) INT_1 < ) length . VAR_1 ( ( if ; ) STRING_2 ( METHOD_3 . s = VAR_1 ] [ java.lang.String final } ; STRING_1 return { ) ) 0 == ) ) ( length . s ( ( || ) null == s ( ( if ; ) ( METHOD_2 = s java.lang.String final { ) ( METHOD_1 java.lang.String public 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id ; try { id = TYPE_2 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_3 VAR_2 ) { return null ; } try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_3 ( ) ; try { return auth ( db . METHOD_4 ( ) . get ( id ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) . log ( STRING_1 , e ) ; return null ; } } } } ; null return ; ) e , STRING_1 ( log . ) ( METHOD_5 { ) e com.google.gwtorm.server.OrmException ( catch } } ; ) ( close . db { finally } ; ) ) id ( get . ) ( METHOD_4 . db ( auth return { try ; ) ( METHOD_3 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { try } ; null return { ) VAR_2 TYPE_3 ( catch } ; ) VAR_1 ( METHOD_2 . TYPE_2 = id { try ; id com.google.gerrit.reviewdb.client.Account.Id final { ) VAR_1 java.lang.String final ( METHOD_1 TYPE_1 private 
public void close ( ) throws java.io.IOException { try { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( VAR_1 ! = null ) { while ( ( VAR_1 . METHOD_2 ( ) ) ! = ( - 1 ) ) ; } } finally { VAR_2 . close ( ) ; } } } } ; ) ( close . VAR_2 { finally } } ; ) ) 1 - ( = ! ) ) ( METHOD_2 . VAR_1 ( ( while { ) null = ! VAR_1 ( if ; ) ( METHOD_1 = VAR_1 TYPE_1 { try { java.io.IOException throws ) ( close void public 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( new TYPE_3 ( TYPE_4 . METHOD_2 ( ) ) ) ; VAR_3 = new TYPE_5 ( STRING_1 , STRING_1 ) ; VAR_2 . add ( VAR_3 ) ; VAR_1 . add ( VAR_2 ) ; } } ; ) VAR_2 ( add . VAR_1 ; ) VAR_3 ( add . VAR_2 ; ) STRING_1 , STRING_1 ( TYPE_5 new = VAR_3 ; ) ) ) ( METHOD_2 . TYPE_4 ( TYPE_3 new ( add . VAR_2 ; ) ( TYPE_2 new = VAR_2 { ) VAR_1 TYPE_1 final ( METHOD_1 void private 
private static java.util.List < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1 . ChangeInfo info ) { TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_2 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; java.util.List < com.google.gerrit.reviewdb.client.PatchSet > r = new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSet > ( VAR_1 . length ( ) ) ; for ( TYPE_3 VAR_2 : TYPE_4 . METHOD_4 ( VAR_1 ) ) { r . add ( TYPE_5 . METHOD_5 ( info , VAR_2 ) ) ; } return r ; } } ; r return } ; ) ) VAR_2 , info ( METHOD_5 . TYPE_5 ( add . r { ) ) VAR_1 ( METHOD_4 . TYPE_4 : VAR_2 TYPE_3 ( for ; ) ) ( length . VAR_1 ( > com.google.gerrit.reviewdb.client.PatchSet < java.util.ArrayList new = r > com.google.gerrit.reviewdb.client.PatchSet < java.util.List ; ) VAR_1 ( METHOD_3 . TYPE_3 ; ) ( values . ) ( METHOD_2 . info = VAR_1 > TYPE_3 < TYPE_2 { ) info ChangeInfo . TYPE_1 ( METHOD_1 > com.google.gerrit.reviewdb.client.PatchSet < java.util.List static private 
public boolean METHOD_1 ( java.io.IOException VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { if ( ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) || ( VAR_1 instanceof TYPE_2 ) ) { return false ; } METHOD_3 ( VAR_1 . getMessage ( ) ) ; try { TYPE_3 . METHOD_4 ( cfg . METHOD_5 ( ) ) ; } catch ( TYPE_4 e ) { TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ; return false ; } return true ; } } ; true return } ; false return ; ) ( METHOD_7 . ) ( METHOD_6 . TYPE_3 { ) e TYPE_4 ( catch } ; ) ) ( METHOD_5 . cfg ( METHOD_4 . TYPE_3 { try ; ) ) ( getMessage . VAR_1 ( METHOD_3 } ; false return { ) ) TYPE_2 instanceof VAR_1 ( || ) ) ) ( METHOD_2 . cfg ( > VAR_2 ( ( if { ) VAR_3 TYPE_1 , VAR_2 int , VAR_1 java.io.IOException ( METHOD_1 boolean public 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ; } } ; ) ) ( toString . a , ) VAR_2 + ) STRING_5 + ) VAR_1 + STRING_4 ( ( ( ( org.junit.Assert.assertEquals ; ) ) VAR_1 ( METHOD_4 . a , STRING_3 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_3 . ) ( METHOD_2 . a , VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_2 , VAR_1 ( TYPE_1 new = a TYPE_1 ; STRING_2 = VAR_2 java.lang.String ; STRING_1 = VAR_1 java.lang.String { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) ; for ( java.lang.String VAR_2 : TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ) { org.junit.Assert.assertEquals ( TYPE_5 . METHOD_4 ( ) . get ( VAR_2 ) . METHOD_6 ( ) , VAR_1 . get ( VAR_2 ) . METHOD_6 ( ) ) ; } } } } ; ) ) ( METHOD_6 . ) VAR_2 ( get . VAR_1 , ) ( METHOD_6 . ) VAR_2 ( get . ) ( METHOD_4 . TYPE_5 ( org.junit.Assert.assertEquals { ) ) ( METHOD_5 . ) ( METHOD_4 . TYPE_5 : VAR_2 java.lang.String ( for ; ) ) ( TYPE_4 new ( METHOD_3 . ) ( METHOD_2 . TYPE_3 = VAR_1 > TYPE_2 , java.lang.String < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_1 t ) { if ( t . METHOD_2 ( ) ) return new TYPE_2 ( ( ( this . METHOD_3 ( ) ) - ( t . METHOD_3 ( ) ) ) ) ; return new TYPE_3 ( ( ( this . VAR_1 ) - ( t . METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 . t ( - ) VAR_1 . this ( ( ( TYPE_3 new return ; ) ) ) ) ( METHOD_3 . t ( - ) ) ( METHOD_3 . this ( ( ( TYPE_2 new return ) ) ( METHOD_2 . t ( if { ) t TYPE_1 ( METHOD_1 TYPE_1 public 
private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String query , final int VAR_2 ) { final int n = ( VAR_2 < = 0 ) ? INT_1 : TYPE_3 . METHOD_2 ( VAR_2 , INT_1 ) ; return TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( query ) , n ) ) ; } } ; ) ) n , ) query ( METHOD_5 . VAR_3 ( METHOD_4 . TYPE_5 ( METHOD_3 . TYPE_4 return ; ) INT_1 , VAR_2 ( METHOD_2 . TYPE_3 : INT_1 ? ) 0 = < VAR_2 ( = n int final { ) VAR_2 int final , query java.lang.String final , VAR_1 TYPE_2 final ( METHOD_1 > TYPE_1 < java.util.List private 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( VAR_1 . METHOD_1 ( ) . toString ( ) ) ; return delete . get ( ) . apply ( VAR_1 , in ) ; } } ; ) in , VAR_1 ( apply . ) ( get . delete return ; ) ) ( toString . ) ( METHOD_1 . VAR_1 ( of . TYPE_8 = VAR_2 ; ) ( TYPE_7 new = in TYPE_7 { com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 throws ) input TYPE_3 , VAR_1 TYPE_2 ( apply TYPE_1 public 
public TYPE_1 METHOD_1 ( int index , TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } return METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; } } ; ) ) ) ( METHOD_5 . TYPE_4 ( METHOD_4 . TYPE_3 , null , VAR_1 , VAR_2 ( METHOD_3 return } ; null return { ) 0 < VAR_2 ( if ; ) VAR_3 , false , index ( METHOD_2 = VAR_2 int { ) VAR_1 TYPE_2 , index int ( METHOD_1 TYPE_1 public 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( VAR_3 . METHOD_2 ( VAR_4 class ) ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_5 class ) ) ; modules.add ( TYPE_3 . METHOD_3 ( ) ) ; modules.add ( TYPE_4 . METHOD_3 ( ) ) ; return VAR_3 . METHOD_4 ( modules ) ; } } ; ) modules ( METHOD_4 . VAR_3 return ; ) ) ( METHOD_3 . TYPE_4 ( modules.add ; ) ) ( METHOD_3 . TYPE_3 ( modules.add ; ) ) class VAR_5 ( METHOD_2 . VAR_1 ( modules.add ; ) ) class VAR_4 ( METHOD_2 . VAR_3 ( modules.add ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( modules.add ; ) ( > TYPE_2 < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) ; TYPE_2 VAR_2 = METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_3 class ) ; TYPE_3 . METHOD_7 ( user , VAR_2 ) ; METHOD_8 ( STRING_2 , admin , user ) ; r . METHOD_9 ( ) ; org.junit.Assert.assertEquals ( VAR_4 , METHOD_10 ( STRING_1 ) ) ; METHOD_8 ( STRING_2 , admin ) ; } } ; ) admin , STRING_2 ( METHOD_8 ; ) ) STRING_1 ( METHOD_10 , VAR_4 ( org.junit.Assert.assertEquals ; ) ( METHOD_9 . r ; ) user , admin , STRING_2 ( METHOD_8 ; ) VAR_2 , user ( METHOD_7 . TYPE_3 ; ) class VAR_3 , ) ( METHOD_6 . r ( METHOD_5 . ) ( METHOD_4 = VAR_2 TYPE_2 ; ) ) ( METHOD_3 . r , VAR_1 ( org.junit.Assert.assertEquals ; ) STRING_1 ( METHOD_2 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; id = TYPE_2 . METHOD_2 ( VAR_4 ) ; TYPE_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( ( STRING_1 + ( VAR_4 ) ) ) ; change = new com.google.gerrit.reviewdb.client.Change ( null , id , null , null , TYPE_4 . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . TYPE_4 , null , null , id , null ( com.google.gerrit.reviewdb.client.Change new = change ; ) ) ) VAR_4 ( + STRING_1 ( ( METHOD_5 . ) ) ( METHOD_4 . VAR_5 ( METHOD_3 . TYPE_3 ; ) VAR_4 ( METHOD_2 . TYPE_2 = id ; ) VAR_3 , VAR_2 ( TYPE_1 new = VAR_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ; VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ( TYPE_5 new , VAR_2 ( apply . VAR_3 ; ) rsrc , ) ( METHOD_4 . account ( TYPE_4 new = VAR_2 TYPE_4 ; ) ) id ( METHOD_3 . TYPE_3 , VAR_1 ( METHOD_2 . changes = rsrc TYPE_2 { try { TYPE_1 throws ) id java.lang.String ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( final java.lang.String token ) { if ( TYPE_2 . METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; } else { TYPE_1 r = new TYPE_3 ( null ) ; r . METHOD_4 ( true ) ; return r ; } } } } ; r return ; ) true ( METHOD_4 . r ; ) null ( TYPE_3 new = r TYPE_1 { else } ; ) ) ( getId . ) ( METHOD_3 . TYPE_2 ( TYPE_3 new return { ) ) ( METHOD_2 . TYPE_2 ( if { ) token java.lang.String final ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = VAR_2 . get ( new TYPE_1 . NameKey ( STRING_1 ) ) ; METHOD_1 ( ( STRING_2 + ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) , VAR_1 ) ; METHOD_1 ( ( STRING_2 + ( VAR_1 . getName ( ) ) ) , VAR_1 ) ; METHOD_1 ( ( STRING_2 + ( VAR_1 . getId ( ) . get ( ) ) ) , VAR_1 ) ; } } ; ) VAR_1 , ) ) ) ( get . ) ( getId . VAR_1 ( + STRING_2 ( ( METHOD_1 ; ) VAR_1 , ) ) ) ( getName . VAR_1 ( + STRING_2 ( ( METHOD_1 ; ) VAR_1 , ) ) ) ( get . ) ( METHOD_2 . VAR_1 ( + STRING_2 ( ( METHOD_1 ; ) ) STRING_1 ( NameKey . TYPE_1 new ( get . VAR_2 = VAR_1 AccountGroup . com.google.gerrit.reviewdb.client { java.lang.Exception throws ) ( METHOD_1 void public 
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; TYPE_3 < TYPE_2 > VAR_2 = VAR_1 . get ( id ) ; if ( VAR_2 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_2 . get ( ) ) ; } else { i . delete ( id ) ; } } METHOD_5 ( id . get ( ) ) ; TYPE_4 . METHOD_6 ( id ) ; } } ; ) id ( METHOD_6 . TYPE_4 ; ) ) ( get . id ( METHOD_5 } } ; ) id ( delete . i { else } ; ) ) ( get . VAR_2 ( METHOD_4 . i { ) ) ( METHOD_3 . VAR_2 ( if ; ) id ( get . VAR_1 = VAR_2 > TYPE_2 < TYPE_3 ; ) id ( METHOD_2 . VAR_1 { ) ) ( METHOD_1 : i > TYPE_2 , com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 ( for { java.io.IOException throws ) id com.google.gerrit.reviewdb.client.Account.Id ( index void public 
private static boolean METHOD_1 ( TYPE_1 view , java.lang.String name ) { java.util.List < java.lang.String > values = view . METHOD_2 ( ) . get ( name ) ; return ( ! ( values . isEmpty ( ) ) ) & & ( ( values . get ( 0 ) . equals ( STRING_1 ) ) || ( values . get ( 0 ) . equals ( STRING_2 ) ) ) ; } } ; ) ) ) STRING_2 ( equals . ) 0 ( get . values ( || ) ) STRING_1 ( equals . ) 0 ( get . values ( ( & & ) ) ) ( isEmpty . values ( ! ( return ; ) name ( get . ) ( METHOD_2 . view = values > java.lang.String < java.util.List { ) name java.lang.String , view TYPE_1 ( METHOD_1 boolean static private 
private static void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; for ( java.lang.String s : new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ) { VAR_1 . METHOD_3 ( s ) ; } TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 ) ; TYPE_2 . METHOD_5 ( STRING_9 , STRING_10 ) ; TYPE_2 . METHOD_5 ( STRING_11 , STRING_12 ) ; TYPE_2 . METHOD_5 ( STRING_13 , STRING_10 ) ; TYPE_2 . METHOD_5 ( STRING_14 , STRING_12 ) ; } } ; ) STRING_12 , STRING_14 ( METHOD_5 . TYPE_2 ; ) STRING_10 , STRING_13 ( METHOD_5 . TYPE_2 ; ) STRING_12 , STRING_11 ( METHOD_5 . TYPE_2 ; ) STRING_10 , STRING_9 ( METHOD_5 . TYPE_2 ; ) VAR_1 , STRING_8 ( METHOD_4 . TYPE_2 } ; ) s ( METHOD_3 . VAR_1 { ) } STRING_7 , STRING_6 , STRING_5 , STRING_4 , STRING_3 , STRING_2 { ] [ java.lang.String new : s java.lang.String ( for ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 void static private 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) { if ( VAR_2 ! = null ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } VAR_1 . append ( CHAR_3 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } } } ; ) VAR_6 ( append . VAR_1 { else } ; ) CHAR_3 ( append . VAR_1 } ; ) VAR_4 , VAR_1 ( METHOD_1 . VAR_5 } ; ) CHAR_2 ( append . VAR_1 { else } ; false = VAR_3 { ) VAR_3 ( if { ) VAR_2 : VAR_4 TYPE_2 final ( for ; true = VAR_3 boolean ; ) CHAR_1 ( append . VAR_1 { ) null = ! VAR_2 ( if { ) VAR_2 > TYPE_2 < java.util.Set final , VAR_1 TYPE_1 final ( METHOD_1 void public 
public static void METHOD_1 ( TYPE_1 a , TYPE_2 VAR_1 ) { org.junit.Assert . METHOD_2 ( ( ( VAR_2 . get ( ) ) == ( VAR_3 ) ) ) ; org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . name ) ; org.junit.Assert.assertEquals ( a . email , VAR_1 . email ) ; } } ; ) email . VAR_1 , email . a ( org.junit.Assert.assertEquals ; ) name . VAR_1 , VAR_4 ( org.junit.Assert.assertEquals ; ) ) ) VAR_3 ( == ) ) ( get . VAR_2 ( ( ( METHOD_2 . org.junit.Assert { ) VAR_1 TYPE_2 , a TYPE_1 ( METHOD_1 void static public 
public TYPE_1 METHOD_1 ( java.lang.String projectName , java.lang.String revision , java.lang.String VAR_1 ) { if ( ( VAR_2 ) ! = null ) { return METHOD_2 ( revision . METHOD_3 ( STRING_1 , METHOD_4 ( projectName ) ) . METHOD_3 ( STRING_2 , METHOD_4 ( revision ) ) . METHOD_3 ( STRING_3 , METHOD_4 ( VAR_1 ) ) . toString ( ) ) ; } return null ; } } ; null return } ; ) ) ( toString . ) ) VAR_1 ( METHOD_4 , STRING_3 ( METHOD_3 . ) ) revision ( METHOD_4 , STRING_2 ( METHOD_3 . ) ) projectName ( METHOD_4 , STRING_1 ( METHOD_3 . revision ( METHOD_2 return { ) null = ! ) VAR_2 ( ( if { ) VAR_1 java.lang.String , revision java.lang.String , projectName java.lang.String ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( STRING_2 + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) STRING_7 + ) STRING_6 + ) ) ) STRING_5 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_4 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_3 ( METHOD_5 . TYPE_2 ( + STRING_2 ( ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
public java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_2 . put ( VAR_1 , VAR_3 . METHOD_1 ( ) ) ; } return VAR_2 . get ( VAR_1 ) ; } } ; ) VAR_1 ( get . VAR_2 return } ; ) ) ( METHOD_1 . VAR_3 , VAR_1 ( put . VAR_2 ; ) VAR_3 ( METHOD_2 . VAR_4 ; ) VAR_1 ( TYPE_3 new = VAR_3 TYPE_3 { ) null == ) ) VAR_1 ( get . VAR_2 ( ( if { TYPE_2 throws ) VAR_1 TYPE_1 ( METHOD_1 > java.lang.String < java.util.Set public 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; display ( result ) ; } } ) ; } } ; ) } } ; ) result ( display ; ) true ( METHOD_2 { ) result TYPE_3 final ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , VAR_1 ( METHOD_3 . TYPE_1 ; ) ( METHOD_1 . super ; ) false ( METHOD_2 { ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { for ( TYPE_3 VAR_3 : VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) ; } } VAR_4 . put ( VAR_1 . METHOD_7 ( ) , VAR_1 ) ; } } ; ) VAR_1 , ) ( METHOD_7 . VAR_1 ( put . VAR_4 } } ; ) ) ) ( METHOD_6 . VAR_3 ( METHOD_5 ( METHOD_4 . VAR_3 { ) ) ( METHOD_3 . VAR_2 : VAR_3 TYPE_3 ( for { ) ) ( METHOD_2 . VAR_1 : VAR_2 TYPE_2 ( for { ) VAR_1 TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( ) { if ( ( db ) ! = null ) { try { final TYPE_1 ps = METHOD_2 ( ) ; if ( ps ! = null ) { for ( final TYPE_2 w : METHOD_3 ( ) ) { if ( w . METHOD_4 ( ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } } catch ( TYPE_3 . OrmException err ) { } } } } } } { ) err OrmException . TYPE_3 ( catch } } } } ; ) ) ( getAccountId . w , VAR_1 ( add { ) ) ( METHOD_4 . w ( if { ) ) ( METHOD_3 : w TYPE_2 final ( for { ) null = ! ps ( if ; ) ( METHOD_2 = ps TYPE_1 final { try { ) null = ! ) db ( ( if { ) ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 , VAR_7 , VAR_4 ) . to ( VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_9 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_9 . ) VAR_11 ( METHOD_10 . ) VAR_10 ( METHOD_10 . ) VAR_9 ( to . ) VAR_8 ( to . ) VAR_4 , VAR_7 , VAR_6 ( METHOD_9 . ) VAR_2 , STRING_2 ( METHOD_8 . ) VAR_5 ( assertThat ; ) VAR_4 , STRING_1 , VAR_2 ( METHOD_7 ; ) VAR_3 ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.lang.String METHOD_1 ( final TYPE_1 . NameKey project , final TYPE_2 . PatchSet ps ) { final TYPE_3 r = new TYPE_3 ( ) ; TYPE_4 . p ( r , project ) ; TYPE_4 . METHOD_2 ( r , ps ) ; return ( VAR_1 ) + r ; } } ; r + ) VAR_1 ( return ; ) ps , r ( METHOD_2 . TYPE_4 ; ) project , r ( p . TYPE_4 ; ) ( TYPE_3 new = r TYPE_3 final { ) ps PatchSet . TYPE_2 final , project NameKey . TYPE_1 final ( METHOD_1 java.lang.String public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_10 ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_11 . ) VAR_10 ( METHOD_11 . ) VAR_9 ( METHOD_10 . ) VAR_8 ( METHOD_10 . ) VAR_7 ( to . ) VAR_6 ( to . ) VAR_4 ( METHOD_9 . ) VAR_2 , STRING_2 ( METHOD_8 . ) VAR_5 ( assertThat ; ) VAR_4 , STRING_1 , VAR_2 ( METHOD_7 ; ) VAR_3 ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 in = new TYPE_2 ( ) ; VAR_2 = VAR_1 ; VAR_3 = VAR_4 . FALSE ; TYPE_3 r = VAR_5 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ; org.junit.Assert.assertEquals ( VAR_6 , r . METHOD_2 ( ) ) ; r . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . r ; ) ) ( METHOD_2 . r , VAR_6 ( org.junit.Assert.assertEquals ; ) in , ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( put . VAR_5 = r TYPE_3 ; FALSE . VAR_4 = VAR_3 ; VAR_1 = VAR_2 ; ) ( TYPE_2 new = in TYPE_2 { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , admin , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_5 ( VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . ) VAR_10 ( METHOD_6 . ) VAR_9 ( METHOD_5 . ) VAR_8 ( to . ) admin , VAR_7 , VAR_6 ( METHOD_5 . ) VAR_5 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , admin , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
TYPE_1 METHOD_1 ( TYPE_2 cfg , TYPE_3 VAR_1 , TYPE_4 . Factory VAR_2 , TYPE_5 < TYPE_6 > VAR_3 , TYPE_7 VAR_4 ) throws TYPE_8 { TYPE_1 s = new TYPE_1 ( cfg , null , VAR_1 , VAR_2 , VAR_3 , null , null , null ) ; for ( TYPE_9 view : TYPE_10 . values ( ) ) { s . METHOD_2 ( view , VAR_4 ) ; } return s ; } } ; s return } ; ) VAR_4 , view ( METHOD_2 . s { ) ) ( values . TYPE_10 : view TYPE_9 ( for ; ) null , null , null , VAR_3 , VAR_2 , VAR_1 , null , cfg ( TYPE_1 new = s TYPE_1 { TYPE_8 throws ) VAR_4 TYPE_7 , VAR_3 > TYPE_6 < TYPE_5 , VAR_2 Factory . TYPE_4 , VAR_1 TYPE_3 , cfg TYPE_2 ( METHOD_1 TYPE_1 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ; } } ; ) ) ( toString . a , ) VAR_2 + ) STRING_4 + ) VAR_1 + STRING_3 ( ( ( ( org.junit.Assert.assertEquals ; ) ) VAR_1 ( METHOD_4 . a , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_3 . ) ( METHOD_2 . a , VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_2 , VAR_1 ( TYPE_1 new = a TYPE_1 final ; STRING_2 = VAR_2 java.lang.String final ; STRING_1 = VAR_1 java.lang.String final { ) ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . line VAR_2 ; TYPE_4 name ; TYPE_5 VAR_3 ; VAR_4 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_2 . ) ) ( get . ) ( getRevision . patchSet ( revision . ) ) ( get . ) ( getParentKey . ) ( getId . patchSet ( id . ) ( changes . VAR_4 ; VAR_3 TYPE_5 ; name TYPE_4 ; VAR_2 line . TYPE_3 { TYPE_2 throws ) VAR_1 TYPE_1 final , patchSet com.google.gerrit.reviewdb.client.PatchSet ( METHOD_1 void private 
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( 0 , ( ( VAR_2 . METHOD_3 ( STRING_1 ) ) - 1 ) ) ; java.lang.String VAR_3 = VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( VAR_4 , VAR_1 , VAR_3 ) ; return VAR_4 ; } } ; VAR_4 return ; ) VAR_3 , VAR_1 , VAR_4 ( METHOD_4 ; ) ) STRING_1 ( METHOD_3 . VAR_2 ( METHOD_2 . VAR_2 = VAR_3 java.lang.String ; ) ) 1 - ) ) STRING_1 ( METHOD_3 . VAR_2 ( ( , 0 ( METHOD_2 . VAR_2 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 java.lang.String public 
private boolean METHOD_1 ( final int i ) { final int s = VAR_1 . get ( i ) . METHOD_2 ( ) ; final int e = VAR_1 . get ( ( i - 1 ) ) . METHOD_3 ( ) ; return ( s - e ) < = ( 2 * ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( * 2 ( = < ) e - s ( return ; ) ( METHOD_3 . ) ) 1 - i ( ( get . VAR_1 = e int final ; ) ( METHOD_2 . ) i ( get . VAR_1 = s int final { ) i int final ( METHOD_1 boolean private 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws TYPE_2 { try { return VAR_2 . get ( VAR_3 . get ( ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getParentKey ( ) , ( ( VAR_1 . get ( ) ) - 1 ) ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e ( TYPE_2 new throw { ) e TYPE_3 ( catch } ; ) ) ) 1 - ) ) ( get . VAR_1 ( ( , ) ( getParentKey . VAR_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id new , ) ( get . VAR_3 ( get . VAR_2 return { try { TYPE_2 throws ) VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { assert ( VAR_1 ) ! = null ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 ) ! = null ) { VAR_3 . METHOD_4 ( VAR_4 , VAR_2 . METHOD_5 ( ) ) ; } else { assert ( VAR_5 ) ! = null ; VAR_5 . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . VAR_5 ; null = ! ) VAR_5 ( assert { else } ; ) ) ( METHOD_5 . VAR_2 , VAR_4 ( METHOD_4 . VAR_3 { ) null = ! ) VAR_2 ( ( if ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ; null = ! ) VAR_1 ( assert { ) ( METHOD_1 void public 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws TYPE_1 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps = db . patchSets ( ) . get ( psId ) ; if ( ps == null ) { throw new TYPE_1 ( ) ; } try { return org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ps . getRevision ( ) . get ( ) ) ; } catch ( TYPE_2 e ) { VAR_1 . error ( ( ( STRING_1 + psId ) + STRING_2 ) ) ; throw new TYPE_1 ( ) ; } } } } ; ) ( TYPE_1 new throw ; ) ) STRING_2 + ) psId + STRING_1 ( ( ( error . VAR_1 { ) e TYPE_2 ( catch } ; ) ) ( get . ) ( getRevision . ps ( METHOD_2 . org.eclipse.jgit.lib.ObjectId return { try } ; ) ( TYPE_1 new throw { ) null == ps ( if ; ) psId ( get . ) ( patchSets . db = ps com.google.gerrit.reviewdb.client.PatchSet final { com.google.gwtorm.server.OrmException , TYPE_1 throws ) psId com.google.gerrit.reviewdb.client.PatchSet.Id final ( METHOD_1 org.eclipse.jgit.lib.ObjectId private 
private static java.lang.String METHOD_1 ( java.lang.String branch , java.lang.String topic ) { if ( ( topic ! = null ) & & ( ! ( topic . isEmpty ( ) ) ) ) { return ( ( branch + STRING_1 ) + topic ) + STRING_2 ; } else { return branch ; } } } } ; branch return { else } ; STRING_2 + ) topic + ) STRING_1 + branch ( ( return { ) ) ) ) ( isEmpty . topic ( ! ( & & ) null = ! topic ( ( if { ) topic java.lang.String , branch java.lang.String ( METHOD_1 java.lang.String static private 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Set < TYPE_1 > VAR_1 ) throws java.io.IOException , TYPE_2 { java.util.Map < TYPE_1 , byte [ ] > VAR_2 = new TYPE_3 < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 , null ) ; } return TYPE_4 . METHOD_1 ( repo , message , VAR_2 ) ; } } ; ) VAR_2 , message , repo ( METHOD_1 . TYPE_4 return } ; ) null , VAR_3 ( put . VAR_2 { ) VAR_1 : VAR_3 TYPE_1 ( for ; ) ( > < TYPE_3 new = VAR_2 > ] [ byte , TYPE_1 < java.util.Map { TYPE_2 , java.io.IOException throws ) VAR_1 > TYPE_1 < java.util.Set , message java.lang.String , repo org.eclipse.jgit.lib.Repository ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_2 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } } ; ) VAR_11 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_2 , VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_5 ( to . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_4 ; ) ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db . close ( ) ; } } synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } return null ; } } ; null return } ; ) 1 ( update . VAR_3 { ) VAR_3 ( synchronized } } ; ) ( close . db { finally } ; ) db ( METHOD_3 { try ; ) ( METHOD_4 . VAR_2 = db com.google.gerrit.reviewdb.server.ReviewDb { else } ; ) db ( METHOD_3 { ) ) ) ( METHOD_2 . TYPE_2 ( == VAR_1 ( if { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( final int VAR_1 ) { assert ( 0 < = VAR_1 ) & & ( VAR_1 < = INT_1 ) ; value = VAR_1 ; VAR_2 . METHOD_2 ( ( ( STRING_1 + ( 2 * VAR_1 ) ) + STRING_2 ) ) ; msg . METHOD_3 ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_3 ) ) ; } } ; ) ) STRING_3 + ) VAR_1 + ) VAR_3 ( ( ( ( METHOD_3 . msg ; ) ) STRING_2 + ) ) VAR_1 * 2 ( + STRING_1 ( ( ( METHOD_2 . VAR_2 ; VAR_1 = value ; ) INT_1 = < VAR_1 ( & & ) VAR_1 = < 0 ( assert { ) VAR_1 int final ( METHOD_1 void public 
public static < TYPE_1 > void setOf ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > key = ( ( TYPE_4 . Key < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > ) ( TYPE_5 . get ( TYPE_6 . METHOD_1 ( VAR_2 . DynamicSet class , VAR_1 . METHOD_2 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_3 ( new TYPE_7 < TYPE_1 > ( VAR_1 ) ) . in ( VAR_3 ) ; } } ; ) VAR_3 ( in . ) ) VAR_1 ( > TYPE_1 < TYPE_7 new ( METHOD_3 . ) key ( bind . binder ; ) ) ) ) ) ( METHOD_2 . VAR_1 , class DynamicSet . VAR_2 ( METHOD_1 . TYPE_6 ( get . TYPE_5 ( ) > > TYPE_1 < com.google.gerrit.extensions.registration.DynamicSet < Key . TYPE_4 ( ( = key > > TYPE_1 < com.google.gerrit.extensions.registration.DynamicSet < Key . TYPE_4 { ) VAR_1 > TYPE_1 < TYPE_3 , binder TYPE_2 ( setOf void > TYPE_1 < static public 
protected com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 { com.google.gerrit.reviewdb.client.Change c = TYPE_2 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ; TYPE_3 u = METHOD_2 ( c , VAR_1 ) ; u . METHOD_3 ( c . METHOD_4 ( ) ) ; u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } } ; c return ; ) ( commit . u ; ) ) ( get . ) ( METHOD_6 . c ( METHOD_5 . u ; ) ) ( METHOD_4 . c ( METHOD_3 . u ; ) VAR_1 , c ( METHOD_2 = u TYPE_3 ; ) ) ( getAccountId . VAR_1 , project ( METHOD_1 . TYPE_2 = c com.google.gerrit.reviewdb.client.Change { TYPE_1 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( METHOD_1 com.google.gerrit.reviewdb.client.Change protected 
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_2 r = ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( ( ( ( TYPE_3 . equals ( name , r . name ) ) & & ( TYPE_3 . equals ( id , r . id ) ) ) & & ( TYPE_3 . equals ( type , r . type ) ) ) & & ( TYPE_3 . equals ( VAR_2 , VAR_3 ) ) ) & & ( TYPE_3 . equals ( VAR_4 , VAR_5 ) ) ; } return false ; } } ; false return } ; ) ) VAR_5 , VAR_4 ( equals . TYPE_3 ( & & ) ) ) VAR_3 , VAR_2 ( equals . TYPE_3 ( & & ) ) ) type . r , type ( equals . TYPE_3 ( & & ) ) ) id . r , id ( equals . TYPE_3 ( & & ) ) name . r , name ( equals . TYPE_3 ( ( ( ( return ; ) ) VAR_1 ( ) TYPE_2 ( ( = r TYPE_2 { ) TYPE_2 instanceof VAR_1 ( if { ) VAR_1 TYPE_1 ( equals boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_1 = METHOD_3 ( repo , VAR_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( VAR_1 ) ; TYPE_3 VAR_4 = METHOD_3 ( repo , VAR_5 ) ; com.google.gerrit.reviewdb.client.Change VAR_6 = insert ( VAR_4 ) ; METHOD_4 ( STRING_2 , VAR_3 ) ; METHOD_4 ( STRING_3 , VAR_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_6 ) ; METHOD_4 ( STRING_6 , VAR_6 ) ; } } ; ) VAR_6 , STRING_6 ( METHOD_4 ; ) VAR_6 , STRING_5 ( METHOD_4 ; ) VAR_3 , STRING_4 ( METHOD_4 ; ) VAR_3 , STRING_3 ( METHOD_4 ; ) VAR_3 , STRING_2 ( METHOD_4 ; ) VAR_4 ( insert = VAR_6 com.google.gerrit.reviewdb.client.Change ; ) VAR_5 , repo ( METHOD_3 = VAR_4 TYPE_3 ; ) VAR_1 ( insert = VAR_3 com.google.gerrit.reviewdb.client.Change ; ) VAR_2 , repo ( METHOD_3 = VAR_1 TYPE_3 ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 event ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; } if ( ( VAR_2 . METHOD_4 ( event ) ) & & ( ( VAR_3 ) > 0 ) ) { TYPE_2 . METHOD_5 ( STRING_1 , VAR_3 ) ; VAR_3 = 0 ; } else if ( ( ( VAR_3 ) % INT_1 ) == 0 ) { TYPE_2 . error ( STRING_2 , VAR_3 ) ; } } } } ; ) VAR_3 , STRING_2 ( error . TYPE_2 { ) 0 == ) INT_1 % ) VAR_3 ( ( ( if else } ; 0 = VAR_3 ; ) VAR_3 , STRING_1 ( METHOD_5 . TYPE_2 { ) ) 0 > ) VAR_3 ( ( & & ) ) event ( METHOD_4 . VAR_2 ( ( if } ; ) ( METHOD_3 . VAR_1 { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { ) event TYPE_1 ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ; int e = VAR_1 . METHOD_4 ( CHAR_1 ) ; TYPE_2 . METHOD_2 ( ( e > = 0 ) , STRING_2 , VAR_1 ) ; return new TYPE_1 ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; } } ; ) ) ) ( length . VAR_1 , ) ) 1 + e ( ( METHOD_5 . VAR_1 ( METHOD_6 . TYPE_4 , ) e , 0 ( METHOD_5 . VAR_1 ( TYPE_1 new return ; ) VAR_1 , STRING_2 , ) 0 = > e ( ( METHOD_2 . TYPE_2 ; ) CHAR_1 ( METHOD_4 . VAR_1 = e int ; ) STRING_1 , ) ) ) VAR_1 ( METHOD_3 . TYPE_3 ( ! ( ( METHOD_2 . TYPE_2 { ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 static public 
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( STRING_1 ) ; name = new TYPE_1 . NameKey ( STRING_2 ) ; VAR_2 = METHOD_3 ( ) ; VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 . Repository class ) ; VAR_5 = TYPE_2 . METHOD_4 ( VAR_6 class ) ; VAR_7 = TYPE_2 . METHOD_4 ( VAR_8 . Factory class ) ; VAR_9 = TYPE_2 . METHOD_4 ( VAR_10 class ) ; VAR_11 = new java.util.ArrayList < TYPE_3 > ( ) ; } } ; ) ( > TYPE_3 < java.util.ArrayList new = VAR_11 ; ) class VAR_10 ( METHOD_4 . TYPE_2 = VAR_9 ; ) class Factory . VAR_8 ( METHOD_4 . TYPE_2 = VAR_7 ; ) class VAR_6 ( METHOD_4 . TYPE_2 = VAR_5 ; ) class Repository . VAR_4 ( METHOD_4 . TYPE_2 = VAR_3 ; ) ( METHOD_3 = VAR_2 ; ) STRING_2 ( NameKey . TYPE_1 new = name ; ) STRING_1 ( METHOD_2 . org.eclipse.jgit.lib.ObjectId = VAR_1 ; ) ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void protected 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_3 VAR_1 = VAR_2 . get ( req . METHOD_2 ( ) ) ; if ( VAR_1 == null ) { rsp . METHOD_3 ( VAR_3 ) ; return ; } switch ( VAR_1 . METHOD_4 ( ) ) { case VAR_4 : METHOD_5 ( VAR_1 , req , rsp ) ; break ; case VAR_5 : METHOD_6 ( VAR_1 , req , rsp ) ; break ; default : rsp . METHOD_3 ( VAR_3 ) ; break ; } } } } ; break ; ) VAR_3 ( METHOD_3 . rsp : default ; break ; ) rsp , req , VAR_1 ( METHOD_6 : VAR_5 case ; break ; ) rsp , req , VAR_1 ( METHOD_5 : VAR_4 case { ) ) ( METHOD_4 . VAR_1 ( switch } ; return ; ) VAR_3 ( METHOD_3 . rsp { ) null == VAR_1 ( if ; ) ) ( METHOD_2 . req ( get . VAR_2 = VAR_1 TYPE_3 { java.io.IOException throws ) rsp HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . revision ( r . METHOD_3 ( ) . name ( ) ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ) ( name . ) ( METHOD_3 . r ( revision . ) ) ) ) ( getChangeId . r ( + STRING_1 ( ( id . ) ( changes . VAR_1 ; ) ( METHOD_2 = r Result . TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception error ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) . getName ( ) , error ) ) ; } else { VAR_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_4 ( ) . getName ( ) , error . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . error , ) ( getName . ) ( METHOD_4 . VAR_1 , STRING_2 ( METHOD_5 . VAR_2 { else } ; ) ) error , ) ( getName . ) ( METHOD_4 . VAR_1 , STRING_1 ( java.lang.String.format ( METHOD_3 . VAR_2 { ) ) ( METHOD_2 . VAR_2 ( if { ) error java.lang.Exception , VAR_1 TYPE_1 ( METHOD_1 void static public 
private boolean METHOD_1 ( ) { if ( ( TYPE_1 . equals ( VAR_1 ) ) & & ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) & & ( VAR_2 . METHOD_5 ( ) ) ) ) { return false ; } } return ( METHOD_6 ( VAR_3 ) ) & & ( METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 ( & & ) ) VAR_3 ( METHOD_6 ( return } } ; false return { ) ) ) ) ( METHOD_5 . VAR_2 ( & & ) ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 ( ( ! ( if { ) ) ) ) ( METHOD_2 . VAR_2 ( ! ( & & ) ) VAR_1 ( equals . TYPE_1 ( ( if { ) ( METHOD_1 boolean private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . of ( TYPE_4 . METHOD_3 ( STRING_3 ) ) , VAR_3 ) ; org.junit.Assert.assertEquals ( STRING_4 , VAR_2 . format ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( format . VAR_2 , STRING_4 ( org.junit.Assert.assertEquals ; ) VAR_3 , ) ) STRING_3 ( METHOD_3 . TYPE_4 ( of . TYPE_3 ( TYPE_2 new = VAR_2 TYPE_2 ; ) STRING_2 , STRING_1 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( VAR_2 ) ; cm . METHOD_1 ( VAR_3 . getAccountId ( ) ) ; cm . METHOD_2 ( VAR_4 , result . info ) ; cm . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_5 = VAR_4 . getId ( ) ; VAR_6 . error ( ( STRING_1 + VAR_5 ) , e ) ; } } } } ; ) e , ) VAR_5 + STRING_1 ( ( error . VAR_6 ; ) ( getId . VAR_4 = VAR_5 com.google.gerrit.reviewdb.client.PatchSet.Id final { ) e java.lang.Exception ( catch } ; ) ( METHOD_3 . cm ; ) info . result , VAR_4 ( METHOD_2 . cm ; ) ) ( getAccountId . VAR_3 ( METHOD_1 . cm ; ) VAR_2 ( create . VAR_1 = cm TYPE_1 final { try { ) ( run void public 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) ! = ( this ) ) return VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return VAR_3 ; if ( ( this ) == VAR_1 ) return VAR_4 ; int VAR_5 = ( this . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; if ( VAR_5 ! = 0 ) return VAR_5 ; throw new TYPE_3 ( STRING_1 ) ; } } ; ) STRING_1 ( TYPE_3 new throw ; VAR_5 return ) 0 = ! VAR_5 ( if ; ) ) ( METHOD_3 . ) ) VAR_1 ( ) TYPE_2 ( ( ( - ) ) ( METHOD_3 . this ( = VAR_5 int ; VAR_4 return ) VAR_1 == ) this ( ( if ; VAR_3 return ) ) ) ( METHOD_2 . VAR_1 ( ! ( if ; ) VAR_1 ( METHOD_1 . VAR_2 return ) ) this ( = ! ) VAR_2 ( ( if { ) VAR_1 TYPE_1 ( METHOD_1 int public 
private static < C extends TYPE_1 > C METHOD_1 ( C c , java.lang.String path , TYPE_2 VAR_1 , int line , java.lang.String message ) { c . path = path ; VAR_2 = VAR_1 ; c . line = ( line ! = 0 ) ? line : null ; c . message = message ; if ( line ! = 0 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_4 = 1 ; VAR_5 = 1 ; VAR_6 = 1 ; VAR_7 = INT_1 ; VAR_8 = VAR_3 ; } return c ; } } ; c return } ; VAR_3 = VAR_8 ; INT_1 = VAR_7 ; 1 = VAR_6 ; 1 = VAR_5 ; 1 = VAR_4 ; ) ( TYPE_3 new = VAR_3 TYPE_3 { ) 0 = ! line ( if ; message = message . c ; null : line ? ) 0 = ! line ( = line . c ; VAR_1 = VAR_2 ; path = path . c { ) message java.lang.String , line int , VAR_1 TYPE_2 , path java.lang.String , c C ( METHOD_1 C > TYPE_1 extends C < static private 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class , VAR_2 ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_1 class ) ; bind ( VAR_5 class ) . METHOD_3 ( this ) ; bind ( VAR_6 class ) . METHOD_3 ( config . METHOD_4 ( ) ) ; install ( new TYPE_1 ( ) . METHOD_5 ( VAR_7 . Factory class ) ) ; } } ; ) ) class Factory . VAR_7 ( METHOD_5 . ) ( TYPE_1 new ( install ; ) ) ( METHOD_4 . config ( METHOD_3 . ) class VAR_6 ( bind ; ) this ( METHOD_3 . ) class VAR_5 ( bind ; ) class VAR_1 ( in . ) class VAR_4 ( bind ; ) class VAR_3 ( bind ; ) VAR_2 , class VAR_1 ( METHOD_2 { ) ( METHOD_1 void protected 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; install ( new TYPE_3 ( ) ) ; install ( new TYPE_4 ( ) ) ; } } ; ) ) ( TYPE_4 new ( install ; ) ) ( TYPE_3 new ( install ; ) ) ( TYPE_2 new ( install ; ) ) ( TYPE_1 new ( install ; ) class VAR_3 ( rpc ; ) class VAR_2 ( rpc ; ) class VAR_1 ( rpc { ) ( METHOD_1 void protected 
private void METHOD_1 ( TYPE_1 rsrc ) { TYPE_2 user = ( ( TYPE_2 ) ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; try { VAR_1 . METHOD_4 ( change , user . METHOD_5 ( ) , rsrc . METHOD_6 ( ) , message . getMessage ( ) , VAR_2 , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . METHOD_7 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( METHOD_7 . VAR_3 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) db , VAR_2 , ) ( getMessage . message , ) ( METHOD_6 . rsrc , ) ( METHOD_5 . user , change ( METHOD_4 . VAR_1 { try ; ) ) ) ( METHOD_3 . ) ( METHOD_2 . rsrc ( ) TYPE_2 ( ( = user TYPE_2 { ) rsrc TYPE_1 ( METHOD_1 void private 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . } { ) ( > > TYPE_1 < java.util.List < TYPE_3 new , ) ( METHOD_5 . r ( METHOD_4 . ) ( METHOD_3 return ; ) ) ( METHOD_2 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) VAR_1 ( get . VAR_2 = r TYPE_2 { java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( STRING_1 ) . getChangeId ( ) ; java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ; } } ; ) 2 ( METHOD_5 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) STRING_3 ( METHOD_4 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) STRING_2 ( METHOD_4 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) changeId ( METHOD_3 = VAR_1 > TYPE_1 , java.lang.String < java.util.Map ; ) ( getChangeId . ) STRING_1 ( METHOD_2 = changeId java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 { boolean VAR_1 = ( VAR_2 . METHOD_2 ( VAR_3 class ) ) == null ; boolean VAR_4 = ( ( VAR_2 . METHOD_2 ( VAR_5 class ) ) == null ) & & ( ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( VAR_5 class ) ) == null ) ; METHOD_4 ( config ( VAR_2 ) , VAR_1 , VAR_4 ) ; base . METHOD_1 ( ) ; METHOD_5 ( ) ; } } ; ) ( METHOD_5 ; ) ( METHOD_1 . base ; ) VAR_4 , VAR_1 , ) VAR_2 ( config ( METHOD_4 ; ) null == ) ) class VAR_5 ( METHOD_2 . ) ( METHOD_3 . VAR_2 ( ( & & ) null == ) ) class VAR_5 ( METHOD_2 . VAR_2 ( ( = VAR_4 boolean ; null == ) ) class VAR_3 ( METHOD_2 . VAR_2 ( = VAR_1 boolean { TYPE_1 throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ctx ) ; return ; } if ( c . currentPatchSetId ( ) . equals ( psId ) ) { c . METHOD_4 ( METHOD_5 ( ctx ) ) ; } } } } ; ) ) ctx ( METHOD_5 ( METHOD_4 . c { ) ) psId ( equals . ) ( currentPatchSetId . c ( if } ; return ; ) ctx ( METHOD_3 . VAR_1 ; ) ( get . VAR_2 = VAR_1 { ) ) ( METHOD_2 ( if ; ) ( getChange . ctx = c com.google.gerrit.reviewdb.client.Change { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void private 
public TYPE_1 get ( java.lang.String name , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , TYPE_2 VAR_5 ) throws TYPE_5 { TYPE_6 VAR_6 = VAR_7 . get ( ) ; return new TYPE_1 ( METHOD_1 ( VAR_1 ) , VAR_4 , VAR_2 , VAR_1 , VAR_3 , new TYPE_7 ( METHOD_1 ( VAR_1 ) , VAR_6 , VAR_1 ) , VAR_5 , VAR_6 . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . VAR_6 , VAR_5 , ) VAR_1 , VAR_6 , ) VAR_1 ( METHOD_1 ( TYPE_7 new , VAR_3 , VAR_1 , VAR_2 , VAR_4 , ) VAR_1 ( METHOD_1 ( TYPE_1 new return ; ) ( get . VAR_7 = VAR_6 TYPE_6 { TYPE_5 throws ) VAR_5 TYPE_2 , VAR_4 java.lang.String , VAR_3 TYPE_4 , VAR_2 TYPE_3 , VAR_1 TYPE_2 , name java.lang.String ( get TYPE_1 public 
private void METHOD_1 ( final TYPE_1 . Change change , final TYPE_2 . Id psId , final TYPE_3 . Id VAR_1 , final TYPE_4 . Id VAR_2 , final TYPE_1 . ReviewDb db , final TYPE_5 VAR_3 ) throws TYPE_6 . OrmException { final TYPE_1 . PatchSetApproval VAR_4 = new TYPE_1 . PatchSetApproval ( new TYPE_7 . Key ( psId , VAR_1 , VAR_2 ) , ( ( short ) ( 0 ) ) ) ; VAR_4 . METHOD_2 ( change ) ; db . METHOD_3 ( ) . insert ( java.util.Collections.singleton ( VAR_4 ) , VAR_3 ) ; } } ; ) VAR_3 , ) VAR_4 ( java.util.Collections.singleton ( insert . ) ( METHOD_3 . db ; ) change ( METHOD_2 . VAR_4 ; ) ) ) 0 ( ) short ( ( , ) VAR_2 , VAR_1 , psId ( Key . TYPE_7 new ( PatchSetApproval . TYPE_1 new = VAR_4 PatchSetApproval . TYPE_1 final { OrmException . TYPE_6 throws ) VAR_3 TYPE_5 final , db ReviewDb . TYPE_1 final , VAR_2 Id . TYPE_4 final , VAR_1 Id . TYPE_3 final , psId Id . TYPE_2 final , change Change . TYPE_1 final ( METHOD_1 void private 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = VAR_1 . getName ( ) ; if ( name . METHOD_2 ( STRING_1 ) ) { name = name . METHOD_3 ( 0 , name . METHOD_4 ( CHAR_1 ) ) ; } int VAR_2 = name . METHOD_4 ( CHAR_1 ) ; return 0 < VAR_2 ? name . METHOD_3 ( 0 , VAR_2 ) : name ; } } ; name : ) VAR_2 , 0 ( METHOD_3 . name ? VAR_2 < 0 return ; ) CHAR_1 ( METHOD_4 . name = VAR_2 int } ; ) ) CHAR_1 ( METHOD_4 . name , 0 ( METHOD_3 . name = name { ) ) STRING_1 ( METHOD_2 . name ( if ; ) ( getName . VAR_1 = name java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String static private 
public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_2 ( ) . METHOD_4 ( ) . getAccountId ( ) ; return id . equals ( getChange ( ) . METHOD_5 ( ) ) ; } return false ; } } ; false return } ; ) ) ( METHOD_5 . ) ( getChange ( equals . id return ; ) ( getAccountId . ) ( METHOD_4 . ) ( METHOD_2 = id com.google.gerrit.reviewdb.client.Account.Id { ) ) ( METHOD_3 . ) ( METHOD_2 ( if { ) ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo in = new TYPE_1 . ChangeInfo ( ) ; in . branch = VAR_1 ; VAR_2 = STRING_1 ; in . project = project . get ( ) ; TYPE_1 . ChangeInfo info = VAR_3 . changes ( ) . create ( in ) . get ( ) ; org.junit.Assert.assertEquals ( in . project , info . project ) ; org.junit.Assert.assertEquals ( in . branch , info . branch ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_4 ) ; } } ; ) VAR_4 , VAR_2 ( org.junit.Assert.assertEquals ; ) branch . info , branch . in ( org.junit.Assert.assertEquals ; ) project . info , project . in ( org.junit.Assert.assertEquals ; ) ( get . ) in ( create . ) ( changes . VAR_3 = info ChangeInfo . TYPE_1 ; ) ( get . project = project . in ; STRING_1 = VAR_2 ; VAR_1 = branch . in ; ) ( ChangeInfo . TYPE_1 new = in ChangeInfo . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { } protected void METHOD_4 ( ) { TYPE_4 . METHOD_5 ( VAR_2 , true ) ; } } ) ; } } ; ) } } ; ) true , VAR_2 ( METHOD_5 . TYPE_4 { ) ( METHOD_4 void protected } { ) result TYPE_3 final ( METHOD_3 void protected { ) this ( > TYPE_3 < TYPE_2 new , VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
protected TYPE_1 . Result METHOD_1 ( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( git , STRING_1 ) ; } } ; ) STRING_1 , git ( to . VAR_4 return ; ) VAR_3 , VAR_2 , VAR_1 , ) ( METHOD_2 . admin , db ( create . VAR_5 = VAR_4 TYPE_4 { TYPE_3 , java.io.IOException throws ) VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String , git TYPE_2 ( METHOD_1 Result . TYPE_1 protected 
TYPE_1 METHOD_1 ( final TYPE_2 cm ) { return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_2 ( ) . METHOD_3 ( ) ) { cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ; } } } ; } } ; } } } ; ) ( run . ) VAR_1 , cm ( METHOD_6 . ) ( METHOD_5 { else } ; ) STRING_1 ( METHOD_4 . ) ( METHOD_2 . cm { ) ) ( METHOD_3 . ) ( METHOD_2 . cm ( if { ) ( run void public { ) ( TYPE_1 new return { ) cm TYPE_2 final ( METHOD_1 TYPE_1 
private boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ; msg . append ( STRING_1 ) ; msg . append ( STRING_2 ) ; if ( VAR_2 ) { msg . append ( STRING_3 ) ; } else { msg . append ( STRING_4 ) ; msg . append ( STRING_5 ) ; } msg . append ( STRING_6 ) ; return VAR_1 . METHOD_3 ( msg . toString ( ) , name ) ; } } } } ; ) name , ) ( toString . msg ( METHOD_3 . VAR_1 return ; ) STRING_6 ( append . msg } ; ) STRING_5 ( append . msg ; ) STRING_4 ( append . msg { else } ; ) STRING_3 ( append . msg { ) VAR_2 ( if ; ) STRING_2 ( append . msg ; ) STRING_1 ( append . msg ; ) ( java.lang.StringBuilder new = msg java.lang.StringBuilder final { else } ; VAR_2 return { ) ) ( METHOD_2 . VAR_1 ( if { ) ( METHOD_1 boolean private 
public org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return TYPE_1 . getRevision ( ) ; } else if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { return null ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_3 ( METHOD_4 ( ) ) ) { TYPE_2 ref = repo . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getRefName ( ) ) ; return ref ! = null ? ref . METHOD_7 ( ) : null ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } } } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e java.io.IOException ( catch } ; null : ) ( METHOD_7 . ref ? null = ! ref return ; ) ) ( getRefName . TYPE_1 ( METHOD_6 . ) ( METHOD_5 . repo = ref TYPE_2 { ) ) ) ( METHOD_4 ( METHOD_3 . VAR_3 = repo org.eclipse.jgit.lib.Repository ( try } ; null return { ) ) ) ( METHOD_2 . VAR_2 ( ! ( if else } ; ) ( getRevision . TYPE_1 return { ) VAR_1 ( if { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 org.eclipse.jgit.lib.ObjectId public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 , 1 ) ; TYPE_2 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ; update . commit ( ) ; org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) ; METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ; } } ; ) ) ( getRevision . update , ) ) STRING_7 + ) STRING_5 + ) STRING_6 + ) STRING_1 + STRING_5 ( ( ( ( + STRING_4 ( ( METHOD_5 ; ) ) ( getRefName . update , STRING_3 ( org.junit.Assert.assertEquals ; ) ( commit . update ; ) ) STRING_2 + STRING_1 ( ( METHOD_4 . update ; ) VAR_1 , c ( METHOD_3 = update TYPE_2 ; ) 1 , VAR_1 , project ( METHOD_2 . TYPE_1 = c com.google.gerrit.reviewdb.client.Change { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( STRING_2 , VAR_4 . METHOD_5 ( VAR_1 ) ) ; METHOD_6 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; } } ; ) VAR_2 ( close . VAR_3 ; ) VAR_1 ( METHOD_6 ; ) ) VAR_1 ( METHOD_5 . VAR_4 , STRING_2 ( METHOD_4 . VAR_3 ; ) VAR_2 ( METHOD_3 . VAR_3 ; ) ) ( METHOD_2 . VAR_1 ( + STRING_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 event = new TYPE_1 ( VAR_1 ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey p : VAR_2 . METHOD_2 ( ) ) { long size = VAR_3 . get ( p ) . get ( ) ; event . METHOD_3 ( size , p . get ( ) ) ; } return event ; } } ; event return } ; ) ) ( get . p , size ( METHOD_3 . event ; ) ( get . ) p ( get . VAR_3 = size long { ) ) ( METHOD_2 . VAR_2 : p com.google.gerrit.reviewdb.client.Project.NameKey ( for ; ) VAR_1 ( TYPE_1 new = event TYPE_1 { TYPE_2 throws ) ( METHOD_1 TYPE_1 private 
public static void METHOD_1 ( int id , java.lang.String commit , java.lang.String base , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . create ( ) ; VAR_2 . METHOD_2 ( base ) ; TYPE_4 . METHOD_3 ( id , commit , STRING_1 ) . METHOD_4 ( VAR_2 , VAR_1 ) ; } } ; ) VAR_1 , VAR_2 ( METHOD_4 . ) STRING_1 , commit , id ( METHOD_3 . TYPE_4 ; ) base ( METHOD_2 . VAR_2 ; ) ( create . TYPE_3 = VAR_2 TYPE_3 { ) VAR_1 > ChangeInfo . TYPE_2 < TYPE_1 , base java.lang.String , commit java.lang.String , id int ( METHOD_1 void static public 
private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 req ) { java.util.Set < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.String [ ] values = req . METHOD_3 ( STRING_1 ) ; if ( values ! = null ) { VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ; } values = req . METHOD_3 ( STRING_2 ) ; if ( values ! = null ) { VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) values ( METHOD_5 . TYPE_3 ( METHOD_4 . VAR_1 { ) null = ! values ( if ; ) STRING_2 ( METHOD_3 . req = values } ; ) ) values ( METHOD_5 . TYPE_3 ( METHOD_4 . VAR_1 { ) null = ! values ( if ; ) STRING_1 ( METHOD_3 . req = values ] [ java.lang.String ; ) ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < java.util.Set { ) req TYPE_1 ( METHOD_1 > java.lang.String < java.util.Set static private 
private static java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.ObjectId [ ] VAR_1 , long [ ] VAR_2 , boolean [ ] VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList ( VAR_1 . length ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_4 . add ( new TYPE_1 ( VAR_1 [ i ] . name ( ) , new TYPE_2 ( VAR_2 [ i ] ) , VAR_3 [ i ] ) ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) ) ] i [ VAR_3 , ) ] i [ VAR_2 ( TYPE_2 new , ) ( name . ] i [ VAR_1 ( TYPE_1 new ( add . VAR_4 { ) ++ i ; ) length . VAR_1 ( < i ; 0 = i int ( for ; ) length . VAR_1 ( java.util.ArrayList new = VAR_4 > TYPE_1 < java.util.List { ) VAR_3 ] [ boolean , VAR_2 ] [ long , VAR_1 ] [ org.eclipse.jgit.lib.ObjectId ( METHOD_1 > TYPE_1 < java.util.List static private 
public static boolean METHOD_1 ( final TYPE_1 . Id VAR_1 , final TYPE_2 . NameKey VAR_2 ) { final TYPE_3 e = TYPE_4 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( e == null ) { return false ; } final java.util.Set < TYPE_5 . Id > VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; return TYPE_6 . METHOD_5 ( VAR_3 , e , VAR_4 , ( ( short ) ( 1 ) ) , true ) ; } } ; ) true , ) ) 1 ( ) short ( ( , VAR_4 , e , VAR_3 ( METHOD_5 . TYPE_6 return ; ) VAR_1 ( METHOD_4 . ) ( METHOD_3 . TYPE_4 = VAR_3 > Id . TYPE_5 < java.util.Set final } ; false return { ) null == e ( if ; ) VAR_2 ( get . ) ( METHOD_2 . TYPE_4 = e TYPE_3 final { ) VAR_2 NameKey . TYPE_2 final , VAR_1 Id . TYPE_1 final ( METHOD_1 boolean static public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 . getAccountId ( ) , 1 ) ; TYPE_2 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ; update . commit ( ) ; org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) ; METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ; } } ; ) ) ( getRevision . update , ) ) STRING_7 + ) STRING_5 + ) STRING_6 + ) STRING_1 + STRING_5 ( ( ( ( + STRING_4 ( ( METHOD_5 ; ) ) ( getRefName . update , STRING_3 ( org.junit.Assert.assertEquals ; ) ( commit . update ; ) ) STRING_2 + STRING_1 ( ( METHOD_4 . update ; ) VAR_1 , c ( METHOD_3 = update TYPE_2 ; ) 1 , ) ( getAccountId . VAR_1 , project ( METHOD_2 . TYPE_1 = c com.google.gerrit.reviewdb.client.Change { java.lang.Exception throws ) ( METHOD_1 void public 
public void run ( ) { try { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ; try { java.lang.String line ; while ( ( line = VAR_1 . METHOD_1 ( ) ) ! = null ) { VAR_2 . error ( ( STRING_2 + line ) ) ; } } finally { VAR_1 . close ( ) ; } } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } } } ; ) e , STRING_3 ( METHOD_2 . VAR_2 { ) e java.io.IOException ( catch } } ; ) ( close . VAR_1 { finally } } ; ) ) line + STRING_2 ( ( error . VAR_2 { ) null = ! ) ) ( METHOD_1 . VAR_1 = line ( ( while ; line java.lang.String { try ; ) ) STRING_1 , in ( TYPE_2 new ( TYPE_1 new = VAR_1 TYPE_1 final { try { ) ( run void public 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( ) ; METHOD_3 ( ctx ) ; ctx . METHOD_4 ( new TYPE_4 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_5 ( ) , commit , METHOD_6 ( ) . METHOD_7 ( ) , VAR_1 ) ) ; } } ; ) ) VAR_1 , ) ( METHOD_7 . ) ( METHOD_6 , commit , ) ( METHOD_5 . org.eclipse.jgit.lib.ObjectId ( ReceiveCommand . TYPE_4 new ( METHOD_4 . ctx ; ) ctx ( METHOD_3 ; ) ( METHOD_2 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk VAR_1 , TYPE_2 notes , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { return METHOD_1 ( db , VAR_1 , notes , patchSet ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2 . error ( STRING_1 , e ) ; return new TYPE_1 ( ) ; } } } } ; ) ( TYPE_1 new return ; ) e , STRING_1 ( error . VAR_2 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) patchSet , notes , VAR_1 , db ( METHOD_1 return { ) ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb ( try { ) patchSet com.google.gerrit.reviewdb.client.PatchSet , notes TYPE_2 , VAR_1 org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) ; TYPE_1 input = new TYPE_1 ( ) ; input . ref = STRING_2 ; VAR_4 . METHOD_3 ( VAR_5 class ) ; VAR_4 . METHOD_4 ( STRING_3 ) ; METHOD_5 ( input . ref ) . create ( input ) ; } } ; ) input ( create . ) ref . input ( METHOD_5 ; ) STRING_3 ( METHOD_4 . VAR_4 ; ) class VAR_5 ( METHOD_3 . VAR_4 ; STRING_2 = ref . input ; ) ( TYPE_1 new = input TYPE_1 ; ) ) STRING_1 + ) VAR_3 ( ( , VAR_2 , VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void submit ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_1 ( ) ; TYPE_4 VAR_1 = VAR_2 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ; VAR_1 . submit ( ) ; } } ; ) ( submit . VAR_1 ; ) ) ( METHOD_4 . TYPE_5 ( METHOD_3 . VAR_1 ; ) ( METHOD_2 . ) ) ) ) ( getChangeId . r ( + STRING_1 ( ( id . ) ( changes . VAR_2 = VAR_1 TYPE_4 ; ) ( METHOD_1 = r Result . TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( submit void public 
private void METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ) ) ( name . id ( + ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( ( get . VAR_1 = r TYPE_1 { java.lang.Exception throws ) id org.eclipse.jgit.lib.ObjectId ( METHOD_1 void private 
public java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_1 ( ) throws TYPE_1 , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Project > VAR_1 = METHOD_2 ( ) ; final java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_2 = new java.util.ArrayList < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Project p : VAR_1 ) { VAR_2 . add ( p . METHOD_3 ( ) ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ) ( METHOD_3 . p ( add . VAR_2 { ) VAR_1 : p com.google.gerrit.reviewdb.client.Project ( for ; ) ) ( size . VAR_1 ( > com.google.gerrit.reviewdb.client.Project.NameKey < java.util.ArrayList new = VAR_2 > com.google.gerrit.reviewdb.client.Project.NameKey < java.util.List final ; ) ( METHOD_2 = VAR_1 > com.google.gerrit.reviewdb.client.Project < java.util.List { com.google.gwtorm.server.OrmException , TYPE_1 throws ) ( METHOD_1 > com.google.gerrit.reviewdb.client.Project.NameKey < java.util.List public 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 user = VAR_1 . METHOD_1 ( ) ; if ( user . METHOD_2 ( ) ) { TYPE_2 VAR_2 = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ; VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } } ; user return } ; VAR_2 return ; ) ) ( METHOD_4 . user ( METHOD_3 . VAR_2 ; ) ) ( getAccountId . ) ) user ( ) TYPE_2 ( ( ( create . VAR_3 = VAR_2 TYPE_2 { ) ) ( METHOD_2 . user ( if ; ) ( METHOD_1 . VAR_1 = user TYPE_1 final { ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( cd ) ; VAR_2 . METHOD_6 ( id ) ; TYPE_2 . METHOD_7 ( ) ; METHOD_8 ( ) ; } } ; ) ( METHOD_8 ; ) ( METHOD_7 . TYPE_2 ; ) id ( METHOD_6 . VAR_2 ; ) cd ( METHOD_5 . VAR_2 ; ) true ( METHOD_4 . TYPE_2 ; ) ( METHOD_3 ; ) VAR_1 ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ; } VAR_2 . METHOD_1 ( ) ; VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) ; VAR_5 = null ; } } ; null = VAR_5 ; ) VAR_5 ( METHOD_7 . ) ( METHOD_6 . VAR_4 ; ) ( METHOD_1 . VAR_2 } ; ) ) ( METHOD_5 . VAR_1 ( METHOD_2 . VAR_3 ; ) ) ( METHOD_4 . ) ( METHOD_3 . VAR_1 ( METHOD_2 { ) VAR_2 : VAR_1 TYPE_1 ( for { ) ( METHOD_1 void public 
private static void METHOD_1 ( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line , final boolean edit ) { TYPE_3 . METHOD_2 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , ( edit ? new TYPE_6 ( id , line ) : new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } } ) ; } } ; ) } } ; ) ) ) line , VAR_2 , ) ( get . id , ) ( getParentKey . id , VAR_1 ( TYPE_7 new : ) line , id ( TYPE_6 new ? edit ( , token ( display . TYPE_5 { ) ( onSuccess void public { ) token ( TYPE_4 new ( METHOD_2 . TYPE_3 { ) edit boolean final , line int final , VAR_2 TYPE_2 final , id Key . TYPE_1 final , VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id final , token java.lang.String final ( METHOD_1 void static private 
private java.util.Map < java.lang.String , java.util.List < TYPE_1 > > METHOD_1 ( TYPE_2 config ) { java.util.Map < java.lang.String , java.util.List < TYPE_1 > > VAR_1 = TYPE_3 . METHOD_2 ( ) ; java.util.Set < java.lang.String > VAR_2 = config . METHOD_3 ( VAR_3 , true ) ; for ( java.lang.String key : VAR_2 ) { if ( key . METHOD_4 ( STRING_1 ) ) { java.lang.String VAR_4 = config . METHOD_5 ( VAR_3 , null , key ) ; VAR_1 . put ( key , METHOD_6 ( VAR_4 ) ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) ) VAR_4 ( METHOD_6 , key ( put . VAR_1 ; ) key , null , VAR_3 ( METHOD_5 . config = VAR_4 java.lang.String { ) ) STRING_1 ( METHOD_4 . key ( if { ) VAR_2 : key java.lang.String ( for ; ) true , VAR_3 ( METHOD_3 . config = VAR_2 > java.lang.String < java.util.Set ; ) ( METHOD_2 . TYPE_3 = VAR_1 > > TYPE_1 < java.util.List , java.lang.String < java.util.Map { ) config TYPE_2 ( METHOD_1 > > TYPE_1 < java.util.List , java.lang.String < java.util.Map private 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws TYPE_1 , java.io.IOException , TYPE_2 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( VAR_2 ) ; } } } } ; ) VAR_2 ( METHOD_4 { ) VAR_1 ! ( if ; ) VAR_2 ( METHOD_3 } ; ) STRING_1 ( TYPE_1 new throw { ) null == VAR_2 ( if ; ) ) ( METHOD_2 . project ( METHOD_1 . VAR_3 = VAR_2 org.eclipse.jgit.lib.Repository final { TYPE_2 , java.io.IOException , TYPE_1 throws ) VAR_1 boolean , project com.google.gerrit.reviewdb.client.Project ( delete void public 
public void METHOD_1 ( final com.google.gerrit.reviewdb.client.Project p ) { VAR_1 . METHOD_2 ( ) ; try { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = TYPE_2 . METHOD_3 ( VAR_2 . get ( VAR_3 ) ) ; n . METHOD_1 ( p . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_3 , java.util.Collections . METHOD_5 ( n ) ) ; } catch ( TYPE_3 e ) { VAR_4 . METHOD_6 ( STRING_1 , e ) ; } finally { VAR_1 . METHOD_7 ( ) ; } METHOD_8 ( p ) ; } } ; ) p ( METHOD_8 } ; ) ( METHOD_7 . VAR_1 { finally } ; ) e , STRING_1 ( METHOD_6 . VAR_4 { ) e TYPE_3 ( catch } ; ) ) n ( METHOD_5 . java.util.Collections , VAR_3 ( put . VAR_2 ; ) ) ( METHOD_4 . p ( METHOD_1 . n ; ) ) VAR_3 ( get . VAR_2 ( METHOD_3 . TYPE_2 = n > com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 { try ; ) ( METHOD_2 . VAR_1 { ) p com.google.gerrit.reviewdb.client.Project final ( METHOD_1 void public 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { VAR_1 = db . METHOD_2 ( ) ; try { revision = ( id ! = null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; VAR_1 = null ; } } } } ; null = VAR_1 ; ) ( METHOD_4 . VAR_1 { finally } ; ) ( METHOD_3 ; null : ) id ( parseCommit . ) VAR_1 ( org.eclipse.jgit.revwalk.RevWalk new ? ) null = ! id ( = revision { try ; ) ( METHOD_2 . db = VAR_1 { TYPE_1 , java.io.IOException throws ) id org.eclipse.jgit.lib.ObjectId , db org.eclipse.jgit.lib.Repository ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_5 ( VAR_11 ) ; } } ; ) VAR_11 ( METHOD_5 . ) VAR_10 ( METHOD_5 . ) VAR_9 ( METHOD_6 . ) VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_5 ( to . ) VAR_2 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 get = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ; if ( VAR_2 ! = null ) { get . METHOD_3 ( VAR_2 ) ; } return METHOD_4 ( get ) ; } } ; ) get ( METHOD_4 return } ; ) VAR_2 ( METHOD_3 . get { ) null = ! VAR_2 ( if ; ) ) VAR_1 + ) STRING_1 + ) url ( ( ( ( METHOD_2 . TYPE_3 = get TYPE_3 { java.io.IOException throws ) VAR_2 TYPE_2 , VAR_1 java.lang.String ( METHOD_1 TYPE_1 private 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( repo . METHOD_2 ( ) ) , new TYPE_9 ( ) ) ; } } ; ) ) ( TYPE_9 new , ) ) ( METHOD_2 . repo ( TYPE_8 new , ) ( TYPE_7 new , ) ( TYPE_6 new ( TYPE_5 new = servlet ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void protected 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; } } ; ) class Factory . VAR_7 ( factory ; ) class Factory . VAR_6 ( factory ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( TYPE_1 r , TYPE_2 VAR_1 , TYPE_2 d ) { VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 cfg = VAR_1 . METHOD_3 ( ) ; if ( ( VAR_2 . isEmpty ( ) ) & & ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) { VAR_2 = TYPE_3 . METHOD_2 ( d ) ; } return r ; } } ; r return } ; ) d ( METHOD_2 . TYPE_3 = VAR_2 { ) ) ) ) ( METHOD_4 . VAR_1 ( ! ( & & ) ) ( isEmpty . VAR_2 ( ( if ; ) ( METHOD_3 . VAR_1 = cfg TYPE_4 ; ) VAR_1 ( METHOD_2 . TYPE_3 = VAR_2 { ) d TYPE_2 , VAR_1 TYPE_2 , r TYPE_1 ( METHOD_1 TYPE_1 public 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = rw . parseCommit ( id ) ; rw . METHOD_3 ( c ) ; return c ; } finally { } } } } { finally } ; c return ; ) c ( METHOD_3 . rw ; ) id ( parseCommit . rw = c org.eclipse.jgit.revwalk.RevCommit { ) ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk ; ) project ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try { java.lang.Exception throws ) id org.eclipse.jgit.lib.ObjectId ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit private 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet ps ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , project , ps . getId ( ) . getParentKey ( ) ) ; TYPE_4 ctl = cd . METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( ctl , ps ) ; } } ; ) ps , ctl ( METHOD_3 . VAR_2 return ; ) ( METHOD_2 . cd = ctl TYPE_4 ; ) ) ( getParentKey . ) ( getId . ps , project , ) ( get . db ( create . VAR_1 = cd com.google.gerrit.server.query.change.ChangeData { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 throws ) ps com.google.gerrit.reviewdb.client.PatchSet , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 public 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . METHOD_2 ( id ) ; index . METHOD_3 ( VAR_1 . get ( id ) ) ; if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_4 ( ( STRING_1 + VAR_3 ) ) ; } VAR_4 . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_5 . METHOD_5 ( ) ; throw e ; } return null ; } } ; null return } ; e throw ; ) ( METHOD_5 . VAR_5 { ) e java.lang.Exception ( catch } ; ) ( METHOD_5 . VAR_4 } ; ) ) VAR_3 + STRING_1 ( ( METHOD_4 . VAR_2 { ) null = ! ) VAR_2 ( ( if ; ) ) id ( get . VAR_1 ( METHOD_3 . index ; ) id ( METHOD_2 . VAR_1 { try { java.lang.Exception throws ) ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( ) throws java.io.IOException { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = VAR_2 . TRUE ; TYPE_2 r = VAR_3 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; r . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . r ; ) ) ( METHOD_2 . r , VAR_4 ( org.junit.Assert.assertEquals ; ) in , ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( put . VAR_3 = r TYPE_2 ; TRUE . VAR_2 = VAR_1 ; ) ( TYPE_1 new = in TYPE_1 { java.io.IOException throws ) ( METHOD_1 void protected 
public void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { if ( type == ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( ) ; } else { new TYPE_2 ( STRING_1 , type , VAR_1 ) . METHOD_1 ( ) ; } } } } } } ; ) ( METHOD_1 . ) VAR_1 , type , STRING_1 ( TYPE_2 new { else } ; ) ( METHOD_6 . ) ) ( METHOD_5 ( METHOD_4 . TYPE_1 ; ) VAR_2 ( METHOD_3 . VAR_1 { ) ) ) ( METHOD_2 . VAR_1 ( == type ( if { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_8 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ; assertThat ( VAR_5 ) . METHOD_9 ( STRING_1 , VAR_2 ) . METHOD_10 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_11 ( VAR_10 ) ; } } ; ) VAR_10 ( METHOD_11 . ) VAR_9 ( to . ) VAR_4 , VAR_8 , VAR_7 , VAR_6 , VAR_3 ( METHOD_10 . ) VAR_2 , STRING_1 ( METHOD_9 . ) VAR_5 ( assertThat ; ) VAR_3 , VAR_3 , VAR_2 ( METHOD_7 ; ) ( METHOD_8 . VAR_5 ; ) VAR_4 , VAR_3 , VAR_2 ( METHOD_7 ; ) ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( int VAR_1 , TYPE_1 . ChangeInfo c ) { TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( ( ( int ) ( VAR_4 ) ) ) . isEqualTo ( ( - 1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . name ) . isEqualTo ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; } } ; ) VAR_1 ( isEqualTo . ) ) ( METHOD_3 . value . ) 0 ( get . VAR_5 ( com.google.common.truth.Truth.assertThat ; ) STRING_2 ( isEqualTo . ) name . ) 0 ( get . VAR_5 ( com.google.common.truth.Truth.assertThat ; ) 1 ( METHOD_2 . ) VAR_5 ( com.google.common.truth.Truth.assertThat ; ) ) 1 - ( ( isEqualTo . ) ) ) VAR_4 ( ) int ( ( ( com.google.common.truth.Truth.assertThat ; ) STRING_1 ( get . VAR_3 = VAR_2 TYPE_2 { ) c ChangeInfo . TYPE_1 , VAR_1 int ( METHOD_1 void private 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_2 ) ) ) ; METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_3 ) ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_4 ( assertEquals ; ) ) ) STRING_3 ( TYPE_2 new ( append . b , b ( METHOD_2 ; ) ) ) STRING_2 ( TYPE_2 new ( append . b , b ( METHOD_2 ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) ) ) null ( ) TYPE_2 ( ( ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , final TYPE_4 < TYPE_1 > VAR_3 ) { final TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_4 , new TYPE_6 ( ) { public void run ( ) { VAR_4 . set ( VAR_3 . get ( ) ) ; } } ) ; } } ; ) } } ; ) ) ( get . VAR_3 ( set . VAR_4 { ) ( run void public { ) ( TYPE_6 new , VAR_4 ( METHOD_2 ; ) VAR_2 , VAR_1 , name ( METHOD_1 = VAR_4 > TYPE_1 < TYPE_5 final { ) VAR_3 > TYPE_1 < TYPE_4 final , VAR_2 TYPE_3 , VAR_1 > TYPE_1 < TYPE_2 , name java.lang.String ( METHOD_1 void > TYPE_1 < public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; VAR_1 = VAR_2 ; METHOD_2 ( user ) ; try { project ( ) . METHOD_3 ( input ) ; org.junit.Assert . METHOD_4 ( STRING_1 ) ; } catch ( TYPE_2 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( VAR_2 ) ) ; } METHOD_2 ( admin ) ; METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 ; ) admin ( METHOD_2 } ; ) ) VAR_2 ( METHOD_6 ( isEqualTo . ) ( METHOD_5 . ) e ( com.google.common.truth.Truth.assertThat { ) e TYPE_2 ( catch } ; ) STRING_1 ( METHOD_4 . org.junit.Assert ; ) input ( METHOD_3 . ) ( project { try ; ) user ( METHOD_2 ; VAR_2 = VAR_1 ; ) ( TYPE_1 new = input TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void walk ( final org.eclipse.jgit.revwalk.RevWalk rw , final TYPE_1 VAR_1 , final org.eclipse.jgit.revwalk.RevCommit VAR_2 , final java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_3 ) throws java.io.IOException , TYPE_2 , TYPE_3 { rw . METHOD_1 ( VAR_1 ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_4 : VAR_3 ) { try { rw . METHOD_2 ( VAR_4 ) ; } catch ( java.io.IOException e ) { } } rw . METHOD_3 ( VAR_2 ) ; org.eclipse.jgit.revwalk.RevCommit c ; while ( ( c = rw . METHOD_4 ( ) ) ! = null ) { } } } } { ) null = ! ) ) ( METHOD_4 . rw = c ( ( while ; c org.eclipse.jgit.revwalk.RevCommit ; ) VAR_2 ( METHOD_3 . rw } } { ) e java.io.IOException ( catch } ; ) VAR_4 ( METHOD_2 . rw { try { ) VAR_3 : VAR_4 org.eclipse.jgit.revwalk.RevCommit ( for ; ) VAR_1 ( METHOD_1 . rw { TYPE_3 , TYPE_2 , java.io.IOException throws ) VAR_3 > org.eclipse.jgit.revwalk.RevCommit < java.util.List final , VAR_2 org.eclipse.jgit.revwalk.RevCommit final , VAR_1 TYPE_1 final , rw org.eclipse.jgit.revwalk.RevWalk final ( walk void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; com.google.gerrit.reviewdb.client.PatchSet.Id psId = r . METHOD_3 ( ) ; com.google.gerrit.reviewdb.client.Change . Id id = psId . getParentKey ( ) ; TYPE_2 VAR_1 = METHOD_4 ( psId , user . getId ( ) , TYPE_3 . METHOD_5 ( ) , STRING_1 ) ; METHOD_4 ( psId , null , VAR_1 . METHOD_6 ( ) , STRING_2 ) ; VAR_2 . METHOD_7 ( id ) ; } } ; ) id ( METHOD_7 . VAR_2 ; ) STRING_2 , ) ( METHOD_6 . VAR_1 , null , psId ( METHOD_4 ; ) STRING_1 , ) ( METHOD_5 . TYPE_3 , ) ( getId . user , psId ( METHOD_4 = VAR_1 TYPE_2 ; ) ( getParentKey . psId = id Id . com.google.gerrit.reviewdb.client.Change ; ) ( METHOD_3 . r = psId com.google.gerrit.reviewdb.client.PatchSet.Id ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 account = VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 < TYPE_4 > VAR_3 = account . METHOD_3 ( ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { java.lang.String key = VAR_4 . METHOD_4 ( ) . getKey ( ) . get ( ) ; if ( key . METHOD_5 ( TYPE_5 ) ) { return new TYPE_1 ( key . METHOD_6 ( TYPE_5 . length ( ) ) ) ; } } return null ; } } ; null return } } ; ) ) ) ( length . TYPE_5 ( METHOD_6 . key ( TYPE_1 new return { ) ) TYPE_5 ( METHOD_5 . key ( if ; ) ( get . ) ( getKey . ) ( METHOD_4 . VAR_4 = key java.lang.String { ) VAR_3 : VAR_4 TYPE_4 ( for ; ) ( METHOD_3 . account = VAR_3 > TYPE_4 < TYPE_3 ; ) VAR_1 ( METHOD_2 . VAR_2 = account TYPE_2 { ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_6 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } } } } ; ) e , log . TYPE_7 ( METHOD_5 . util { ) e java.lang.Exception ( catch } ; ) event ( METHOD_4 . VAR_5 { try { ) VAR_4 : VAR_5 TYPE_6 ( for ; ) VAR_3 , VAR_2 , VAR_1 , revision , change ( TYPE_5 new = event TYPE_5 } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_4 ( ! ( if { ) VAR_3 TYPE_4 , VAR_2 TYPE_3 , VAR_1 TYPE_3 , revision TYPE_2 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
public TYPE_1 < TYPE_2 . NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_4 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd . getId ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( getId . cd , ) ( METHOD_2 . ) ( change . cd ( put . VAR_1 { ) VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( create . TYPE_4 = VAR_1 > Id . com.google.gerrit.reviewdb.client.Change , NameKey . TYPE_2 < TYPE_3 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > Id . com.google.gerrit.reviewdb.client.Change , NameKey . TYPE_2 < TYPE_1 public 
private long METHOD_1 ( TYPE_1 p ) { long VAR_1 = cfg . METHOD_2 ( STRING_1 , STRING_2 , 0 ) ; long VAR_2 = p . METHOD_3 ( ) ; if ( ( VAR_1 > 0 ) & & ( VAR_2 > 0 ) ) { return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; } else { return TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_1 ( METHOD_5 . TYPE_2 return { else } ; ) VAR_2 , VAR_1 ( METHOD_4 . TYPE_2 return { ) ) 0 > VAR_2 ( & & ) 0 > VAR_1 ( ( if ; ) ( METHOD_3 . p = VAR_2 long ; ) 0 , STRING_2 , STRING_1 ( METHOD_2 . cfg = VAR_1 long { ) p TYPE_1 ( METHOD_1 long private 
private static TYPE_1 METHOD_1 ( TYPE_2 < ? > VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4 = VAR_1 . git ( ) . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( new TYPE_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) ) ) ; TYPE_6 < TYPE_1 > r = VAR_4 . METHOD_5 ( ) ; return TYPE_7 . METHOD_6 ( r ) ; } } ; ) r ( METHOD_6 . TYPE_7 return ; ) ( METHOD_5 . VAR_4 = r > TYPE_1 < TYPE_6 ; ) ) ) VAR_2 + ) STRING_2 + ) VAR_2 + STRING_1 ( ( ( ( TYPE_5 new ( METHOD_4 . VAR_4 ; ) VAR_3 ( METHOD_3 . VAR_4 ; ) ( METHOD_2 . ) ( git . VAR_1 = VAR_4 TYPE_4 { TYPE_3 throws ) VAR_3 boolean , VAR_2 java.lang.String , VAR_1 > ? < TYPE_2 ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ( VAR_1 = ( VAR_2 ) - ( ( TYPE_1 ) ( METHOD_3 ( ) ) ) ) ) ; TYPE_2 . ChangeInfo info = METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; java.lang.String message = VAR_4 . get ( VAR_5 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } } ; ) ) ) ( METHOD_7 . ) ( METHOD_6 . admin , VAR_6 , STRING_1 ( java.lang.String.format ( contains . ) message ( com.google.common.truth.Truth.assertThat ; message . commit . ) VAR_5 ( get . VAR_4 = message java.lang.String ; ) ) VAR_3 ( METHOD_5 ( METHOD_4 = info ChangeInfo . TYPE_2 ; ) ) ) ) ) ( METHOD_3 ( ) TYPE_1 ( ( - ) VAR_2 ( = VAR_1 ( ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public static void METHOD_1 ( final TYPE_1 . Change c ) { long VAR_1 = c . METHOD_2 ( ) . METHOD_3 ( ) ; int id = c . getId ( ) . get ( ) ; c . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 , id ) ) ; } } ; ) ) id , VAR_1 ( METHOD_5 . TYPE_2 ( METHOD_4 . c ; ) ( get . ) ( getId . c = id int ; ) ( METHOD_3 . ) ( METHOD_2 . c = VAR_1 long { ) c Change . TYPE_1 final ( METHOD_1 void static public 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ( VAR_1 ) ! = null ) { try { VAR_1 . METHOD_2 ( ) . METHOD_3 ( project ) . run ( ) ; } catch ( java.io.IOException e ) { VAR_2 . error ( STRING_1 , e ) ; return false ; } } return true ; } } ; true return } } ; false return ; ) e , STRING_1 ( error . VAR_2 { ) e java.io.IOException ( catch } ; ) ( run . ) project ( METHOD_3 . ) ( METHOD_2 . VAR_1 { try { ) null = ! ) VAR_1 ( ( if { ) project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 boolean private 
private void METHOD_1 ( TYPE_1 p ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { METHOD_2 ( p ) ; TYPE_3 . Result r = METHOD_3 ( STRING_1 ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , null ) ; r = METHOD_3 ( STRING_2 ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , null ) ; } } ; ) null , VAR_1 ( METHOD_5 . r ; ) ( METHOD_4 . r ; ) STRING_2 ( METHOD_3 = r ; ) null , VAR_1 ( METHOD_5 . r ; ) ( METHOD_4 . r ; ) STRING_1 ( METHOD_3 = r Result . TYPE_3 ; ) p ( METHOD_2 { TYPE_2 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) p TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , java.io.IOException { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 = VAR_2 . get ( ctx . METHOD_4 ( ) , commit , psId ) ; ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , METHOD_7 ( ) . METHOD_8 ( ) , VAR_3 ) ) ; } } ; ) ) VAR_3 , ) ( METHOD_8 . ) ( METHOD_7 , commit , ) ( METHOD_6 . org.eclipse.jgit.lib.ObjectId ( ReceiveCommand . TYPE_3 new ( METHOD_5 . ctx ; ) psId , commit , ) ( METHOD_4 . ctx ( get . VAR_2 = VAR_1 ; ) ( METHOD_3 ; ) ( METHOD_2 { java.io.IOException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void public 
void METHOD_1 ( java.lang.String project , java.lang.String ref , TYPE_1 VAR_1 , TYPE_2 status , TYPE_3 . Status VAR_2 ) { TYPE_4 event = new TYPE_4 ( project , ref , TYPE_5 . METHOD_2 ( VAR_1 ) , status , VAR_2 ) ; METHOD_3 ( project , event ) ; } } ; ) event , project ( METHOD_3 ; ) VAR_2 , status , ) VAR_1 ( METHOD_2 . TYPE_5 , ref , project ( TYPE_4 new = event TYPE_4 { ) VAR_2 Status . TYPE_3 , status TYPE_2 , VAR_1 TYPE_1 , ref java.lang.String , project java.lang.String ( METHOD_1 void 
private void METHOD_1 ( final int row ) { METHOD_2 ( row ) ; METHOD_3 ( row , 0 , TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_1 ) ; METHOD_7 ( row , 0 , STRING_1 ) ; } } ; ) STRING_1 , 0 , row ( METHOD_7 ; ) VAR_1 , 0 , row ( METHOD_6 . ) ( METHOD_5 ; ) ) ( METHOD_4 . TYPE_1 , 0 , row ( METHOD_3 ; ) row ( METHOD_2 { ) row int final ( METHOD_1 void private 
private void METHOD_1 ( ) throws TYPE_1 , TYPE_2 . OrmException { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 = VAR_2 ; switch ( VAR_3 . METHOD_4 ( ) ) { case VAR_4 : METHOD_5 ( ) ; break ; case VAR_5 : case VAR_6 : case VAR_7 : default : METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; break ; } } } } ; break ; ) ( METHOD_8 ; ) ( METHOD_7 ; ) ( METHOD_6 : default : VAR_7 case : VAR_6 case : VAR_5 case ; break ; ) ( METHOD_5 : VAR_4 case { ) ) ( METHOD_4 . VAR_3 ( switch ; VAR_2 = VAR_1 ; ) ( METHOD_3 ; ) ( METHOD_2 { OrmException . TYPE_2 , TYPE_1 throws ) ( METHOD_1 void private 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 . METHOD_2 ( ) ) { throw new com.google.gwtorm.server.OrmException ( VAR_2 ) ; } if ( isEmpty ( ) ) { return ; } try ( TYPE_1 VAR_3 = VAR_4 . METHOD_3 ( VAR_5 ) ) { METHOD_4 ( ) ; TYPE_2 . METHOD_1 ( VAR_6 ) ; TYPE_2 . METHOD_1 ( VAR_7 ) ; } finally { close ( ) ; } } } } ; ) ( close { finally } ; ) VAR_7 ( METHOD_1 . TYPE_2 ; ) VAR_6 ( METHOD_1 . TYPE_2 ; ) ( METHOD_4 { ) ) VAR_5 ( METHOD_3 . VAR_4 = VAR_3 TYPE_1 ( try } ; return { ) ) ( isEmpty ( if } ; ) VAR_2 ( com.google.gwtorm.server.OrmException new throw { ) ) ( METHOD_2 . VAR_1 ( if { java.io.IOException , com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) cd , ) ( getProject . ) ( change . cd ( put . VAR_1 { ) ) ( values . VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( create . TYPE_3 = VAR_1 > com.google.gerrit.server.query.change.ChangeData , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_2 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 public 
protected void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } bind ( VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_6 class ) ; } } ; ) class VAR_6 ( to . ) class VAR_5 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) class VAR_4 ( METHOD_3 . ) class VAR_3 ( bind ; ) class VAR_2 ( to . ) class VAR_1 ( bind } ; ) STRING_1 ( TYPE_2 new throw { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String projectName = METHOD_2 ( VAR_1 ) . get ( ) ; java.util.List < TYPE_1 > VAR_2 = new TYPE_2 < > ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . project = projectName ; VAR_2 . add ( VAR_3 ) ; VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_5 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_5 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_6 . ) ( METHOD_4 . ) ( METHOD_3 . VAR_4 = VAR_5 > TYPE_1 < java.util.List ; ) VAR_2 ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . VAR_4 ; ) VAR_3 ( add . VAR_2 ; projectName = project . VAR_3 ; ) ( TYPE_1 new = VAR_3 TYPE_1 ; ) ( > < TYPE_2 new = VAR_2 > TYPE_1 < java.util.List ; ) ( get . ) VAR_1 ( METHOD_2 = projectName java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_3 ( ) ; try { VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , new TYPE_4 ( ( ( TYPE_5 . METHOD_5 ( ) ) - ( TYPE_6 . METHOD_6 ( VAR_1 , VAR_7 ) ) ) ) ) ) ; } finally { METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_2 ) ; } } } } ; ) VAR_2 ( METHOD_8 ; ) VAR_4 ( METHOD_7 { finally } ; ) ) ) ) ) ) VAR_7 , VAR_1 ( METHOD_6 . TYPE_6 ( - ) ) ( METHOD_5 . TYPE_5 ( ( ( TYPE_4 new , VAR_6 , VAR_5 , STRING_1 ( java.lang.String.format ( METHOD_4 . VAR_4 { try ; ) ( METHOD_3 . VAR_2 = VAR_4 TYPE_3 ; ) ( METHOD_2 . VAR_3 = VAR_2 TYPE_2 { TYPE_1 throws ) VAR_1 int ( METHOD_1 void public 
protected void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException , TYPE_3 { rsp . METHOD_2 ( STRING_1 ) ; rsp . METHOD_3 ( STRING_2 ) ; final TYPE_4 out = rsp . METHOD_4 ( ) ; out . METHOD_5 ( STRING_3 ) ; out . METHOD_5 ( STRING_4 ) ; out . METHOD_5 ( STRING_5 ) ; out . METHOD_5 ( STRING_6 ) ; out . METHOD_5 ( STRING_7 ) ; out . close ( ) ; } } ; ) ( close . out ; ) STRING_7 ( METHOD_5 . out ; ) STRING_6 ( METHOD_5 . out ; ) STRING_5 ( METHOD_5 . out ; ) STRING_4 ( METHOD_5 . out ; ) STRING_3 ( METHOD_5 . out ; ) ( METHOD_4 . rsp = out TYPE_4 final ; ) STRING_2 ( METHOD_3 . rsp ; ) STRING_1 ( METHOD_2 . rsp { TYPE_3 , java.io.IOException throws ) rsp HttpServletResponse . TYPE_2 final , req TYPE_1 final ( METHOD_1 void protected 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ; METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ; METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ; } } ; ) ) ) STRING_3 ( change . TYPE_1 ( METHOD_4 . ) STRING_4 ( METHOD_3 . TYPE_1 ( METHOD_2 ; ) ) ) STRING_2 ( change . TYPE_1 ( METHOD_4 . ) STRING_4 ( METHOD_3 . TYPE_1 ( METHOD_5 ; ) ) ) STRING_3 ( change . TYPE_1 ( METHOD_4 . ) STRING_1 ( METHOD_3 . TYPE_1 ( METHOD_5 ; ) ) ) STRING_2 ( change . TYPE_1 ( METHOD_4 . ) STRING_1 ( METHOD_3 . TYPE_1 ( METHOD_2 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( change , ps ) ) ; try { VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( change ) . get ( ) , VAR_4 , VAR_5 ) ; org.junit.Assert . METHOD_5 ( ) ; } catch ( TYPE_1 e ) { org.junit.Assert.assertEquals ( STRING_1 , e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e , STRING_1 ( org.junit.Assert.assertEquals { ) e TYPE_1 ( catch } ; ) ( METHOD_5 . org.junit.Assert ; ) VAR_5 , VAR_4 , ) ( get . ) change ( METHOD_4 . VAR_3 ( METHOD_3 . VAR_2 { try ; ) ) ps , change ( METHOD_2 . VAR_2 , VAR_1 ( org.junit.Assert.assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { try { for ( TYPE_1 w : VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { add ( VAR_2 , w . getAccountId ( ) ) ; } } catch ( TYPE_2 . OrmException err ) { } } } } { ) err OrmException . TYPE_2 ( catch } } ; ) ) ( getAccountId . w , VAR_2 ( add { ) ) ) ( change.getId ( METHOD_3 . ) ( METHOD_2 . ) ( get . VAR_1 : w TYPE_1 ( for { try { ) ( METHOD_1 void protected 
public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 in = TYPE_3 . METHOD_2 ( ) ; java.lang.String n = TYPE_4 . METHOD_3 ( VAR_1 ) ; new TYPE_5 ( ( STRING_1 + n ) ) . METHOD_4 ( ) . data ( in ) . put ( VAR_2 ) ; } } ; ) VAR_2 ( put . ) in ( data . ) ( METHOD_4 . ) ) n + STRING_1 ( ( TYPE_5 new ; ) VAR_1 ( METHOD_3 . TYPE_4 = n java.lang.String ; ) ( METHOD_2 . TYPE_3 = in TYPE_3 { ) VAR_2 > TYPE_2 < TYPE_1 , VAR_1 java.lang.String ( METHOD_1 void static public 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; } finally { VAR_1 . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . VAR_1 { finally } ; id return ; ) ( METHOD_3 . VAR_1 ; ) } { ] [ byte new , VAR_2 ( insert . VAR_1 = id org.eclipse.jgit.lib.ObjectId { try ; ) ( METHOD_2 . repo = VAR_1 TYPE_1 { java.io.IOException throws ) repo org.eclipse.jgit.lib.Repository final ( METHOD_1 org.eclipse.jgit.lib.ObjectId static private 
public void onSuccess ( TYPE_1 info ) { VAR_1 = info . METHOD_1 ( ) ; java.lang.String VAR_2 = info . METHOD_2 ( ) ; if ( ( VAR_2 ! = null ) & & ( ! ( STRING_1 . equals ( VAR_2 ) ) ) ) { p . insert ( new TYPE_2 ( VAR_1 ) , 0 ) ; } } } } ; ) 0 , ) VAR_1 ( TYPE_2 new ( insert . p { ) ) ) ) VAR_2 ( equals . STRING_1 ( ! ( & & ) null = ! VAR_2 ( ( if ; ) ( METHOD_2 . info = VAR_2 java.lang.String ; ) ( METHOD_1 . info = VAR_1 { ) info TYPE_1 ( onSuccess void public 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , null ) ; return ( VAR_1 ! = null ) & & ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 . getProject ( ) . METHOD_5 ( ) ) ) ; } } ; ) ) ) ( METHOD_5 . ) ( getProject . VAR_1 ( equals . ) ( METHOD_5 . VAR_3 ( & & ) null = ! VAR_1 ( return ; ) null , ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { ) ( METHOD_1 boolean public 
protected void METHOD_1 ( ) { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_4 ) ) . METHOD_4 ( new TYPE_2 ( STRING_1 , null , VAR_5 , null , false , ( STRING_2 + STRING_3 ) ) ) ; install ( new TYPE_3 ( ) { protected void METHOD_1 ( ) { METHOD_5 ( VAR_6 , VAR_7 . String class , VAR_8 class ) . METHOD_6 ( VAR_9 class ) ; } } ) ; } } ; ) } } ; ) class VAR_9 ( METHOD_6 . ) class VAR_8 , class String . VAR_7 , VAR_6 ( METHOD_5 { ) ( METHOD_1 void protected { ) ( TYPE_3 new ( install ; ) ) ) STRING_3 + STRING_2 ( , false , null , VAR_5 , null , STRING_1 ( TYPE_2 new ( METHOD_4 . ) ) VAR_4 ( METHOD_3 . TYPE_1 ( METHOD_2 . ) class VAR_3 ( bind ; ) class VAR_2 ( to . ) class VAR_1 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet { ) ( METHOD_1 void protected 
public java.lang.String toString ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; b . append ( STRING_1 ) ; if ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { b . append ( ( ( STRING_2 + ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . get ( ) ) ) + STRING_3 ) ) ; } return b . toString ( ) ; } } ; ) ( toString . b return } ; ) ) STRING_3 + ) ) ) ( get . ) ( METHOD_2 . ) ( METHOD_1 . VAR_1 ( + STRING_2 ( ( ( append . b { ) ) ( METHOD_3 . ) ( METHOD_2 . ) ( METHOD_1 . VAR_1 ( if ; ) STRING_1 ( append . b ; ) ( java.lang.StringBuilder new = b java.lang.StringBuilder { ) ( toString java.lang.String public 
protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) ! = null ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } } ; null return } ; ) ( toString . r return ; ) ) ( getChangeId . change ( append . r ; ) ) ( METHOD_2 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final { ) null = ! ) ) ( METHOD_2 ( ( if { ) ( METHOD_1 java.lang.String protected 
private void METHOD_1 ( java.lang.String url , TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( url ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_4 class ) ) ; } } ; ) ) class VAR_4 , ) ( METHOD_6 . r ( METHOD_5 . ) ( METHOD_4 , VAR_1 ( METHOD_3 . TYPE_3 ; ) ) ( METHOD_2 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) url ( get . VAR_2 = r TYPE_2 { java.io.IOException throws ) VAR_1 TYPE_1 , url java.lang.String ( METHOD_1 void private 
private void add ( TYPE_1 . ReviewDb db , java.util.List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { try { VAR_1 . add ( new TYPE_2 ( VAR_2 . getKey ( ) , TYPE_4 . METHOD_1 ( VAR_2 ) ) ) ; } catch ( TYPE_5 e ) { throw e ; } catch ( TYPE_6 e ) { METHOD_2 ( db , VAR_2 ) ; } } } } ; ) VAR_2 , db ( METHOD_2 { ) e TYPE_6 ( catch } ; e throw { ) e TYPE_5 ( catch } ; ) ) ) VAR_2 ( METHOD_1 . TYPE_4 , ) ( getKey . VAR_2 ( TYPE_2 new ( add . VAR_1 { try { ) VAR_2 TYPE_3 , VAR_1 > TYPE_2 < java.util.List , db ReviewDb . TYPE_1 ( add void private 
private TYPE_1 METHOD_1 ( ) { switch ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { case VAR_2 : return TYPE_3 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; case VAR_4 : return TYPE_5 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; default : throw new TYPE_6 ( STRING_1 ) ; } } } } ; ) STRING_1 ( TYPE_6 new throw : default ; ) VAR_3 , ) ( of . TYPE_4 ( METHOD_3 . TYPE_5 return : VAR_4 case ; ) VAR_3 , ) ( of . TYPE_4 ( METHOD_3 . TYPE_3 return : VAR_2 case { ) ) VAR_1 ( METHOD_2 . TYPE_2 ( switch { ) ( METHOD_1 TYPE_1 private 
public static void METHOD_1 ( java.lang.String query , int VAR_1 , int VAR_2 , java.util.Set < TYPE_1 > VAR_3 , TYPE_2 < TYPE_3 > VAR_4 ) { TYPE_4 VAR_5 = TYPE_3 . METHOD_2 ( query ) ; if ( VAR_2 > 0 ) { VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; } TYPE_3 . METHOD_4 ( VAR_5 , VAR_3 ) ; if ( VAR_1 ! = 0 ) { VAR_5 . METHOD_3 ( STRING_2 , VAR_1 ) ; } VAR_5 . get ( VAR_4 ) ; } } ; ) VAR_4 ( get . VAR_5 } ; ) VAR_1 , STRING_2 ( METHOD_3 . VAR_5 { ) 0 = ! VAR_1 ( if ; ) VAR_3 , VAR_5 ( METHOD_4 . TYPE_3 } ; ) VAR_2 , STRING_1 ( METHOD_3 . VAR_5 { ) 0 > VAR_2 ( if ; ) query ( METHOD_2 . TYPE_3 = VAR_5 TYPE_4 { ) VAR_4 > TYPE_3 < TYPE_2 , VAR_3 > TYPE_1 < java.util.Set , VAR_2 int , VAR_1 int , query java.lang.String ( METHOD_1 void static public 
private boolean METHOD_1 ( ) { try ( org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) ) ) { TYPE_1 ref = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; if ( ( ref == null ) || ( ( ref . METHOD_6 ( ) ) == null ) ) { return true ; } return ! ( ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ) ; } catch ( java.io.IOException VAR_3 ) { return true ; } } } } ; true return { ) VAR_3 java.io.IOException ( catch } ; ) ) ) ( getRevision . config ( equals . ) ( METHOD_6 . ref ( ! return } ; true return { ) ) null == ) ) ( METHOD_6 . ref ( ( || ) null == ref ( ( if ; ) VAR_2 ( METHOD_5 . ) ( METHOD_4 . git = ref TYPE_1 { ) ) ) ( METHOD_3 . ) ( getProject ( METHOD_2 . VAR_1 = git org.eclipse.jgit.lib.Repository ( try { ) ( METHOD_1 boolean private 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_2 { TYPE_3 < TYPE_1 > view = TYPE_4 . METHOD_2 ( ) ; TYPE_5 res = new TYPE_5 ( ) ; METHOD_3 ( VAR_1 , view , res ) ; METHOD_4 ( ( STRING_1 + ( res . getStatus ( ) ) ) , ( ( ( res . getStatus ( ) ) < INT_1 ) || ( ( res . getStatus ( ) ) > = INT_2 ) ) ) ; return view . get ( ) ; } } ; ) ( get . view return ; ) ) ) INT_2 = > ) ) ( getStatus . res ( ( || ) INT_1 < ) ) ( getStatus . res ( ( ( , ) ) ) ( getStatus . res ( + STRING_1 ( ( METHOD_4 ; ) res , view , VAR_1 ( METHOD_3 ; ) ( TYPE_5 new = res TYPE_5 ; ) ( METHOD_2 . TYPE_4 = view > TYPE_1 < TYPE_3 { TYPE_2 , java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( STRING_1 ) ) ; METHOD_2 ( b , b . METHOD_4 ( ) ) ; assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . b , STRING_2 ( assertEquals ; ) ) ( METHOD_4 . b , b ( METHOD_2 ; ) ) STRING_1 ( append . b , b ( METHOD_2 ; ) ) ( METHOD_3 . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( ) { TYPE_1 p = new TYPE_1 ( ) ; VAR_1 = VAR_2 ; VAR_3 = true ; VAR_4 = true ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; VAR_9 = VAR_10 ; VAR_11 = null ; VAR_12 = VAR_13 ; VAR_14 = VAR_15 ; VAR_16 = VAR_17 ; VAR_18 = false ; VAR_19 = true ; VAR_20 = false ; VAR_21 = VAR_22 ; VAR_23 = true ; VAR_24 = false ; VAR_25 = true ; VAR_26 = false ; VAR_27 = VAR_28 ; return p ; } } ; p return ; VAR_28 = VAR_27 ; false = VAR_26 ; true = VAR_25 ; false = VAR_24 ; true = VAR_23 ; VAR_22 = VAR_21 ; false = VAR_20 ; true = VAR_19 ; false = VAR_18 ; VAR_17 = VAR_16 ; VAR_15 = VAR_14 ; VAR_13 = VAR_12 ; null = VAR_11 ; VAR_10 = VAR_9 ; VAR_8 = VAR_7 ; VAR_6 = VAR_5 ; true = VAR_4 ; true = VAR_3 ; VAR_2 = VAR_1 ; ) ( TYPE_1 new = p TYPE_1 { ) ( METHOD_1 TYPE_1 static public 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ; VAR_2 = TYPE_3 . METHOD_4 ( ) ; if ( TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ) { VAR_3 . METHOD_7 ( VAR_2 ) ; VAR_1 . add ( TYPE_2 . METHOD_8 ( ) , VAR_2 ) ; } VAR_4 = TYPE_3 . METHOD_4 ( ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) , VAR_4 ) ; } } ; ) VAR_4 , ) ( METHOD_10 . TYPE_2 ( METHOD_9 . VAR_1 ; ) VAR_4 ( METHOD_7 . VAR_3 ; ) ( METHOD_4 . TYPE_3 = VAR_4 } ; ) VAR_2 , ) ( METHOD_8 . TYPE_2 ( add . VAR_1 ; ) VAR_2 ( METHOD_7 . VAR_3 { ) ) ( METHOD_6 . ) ( METHOD_5 . TYPE_4 ( if ; ) ( METHOD_4 . TYPE_3 = VAR_2 ; ) ) ) ( METHOD_3 . TYPE_2 ( TYPE_1 new ( METHOD_2 . VAR_1 { ) ( METHOD_1 void private 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 u = util . user ( VAR_3 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . u , STRING_2 ( METHOD_5 ; ) VAR_3 ( user . util = u TYPE_2 ; ) ( METHOD_4 . ) STRING_1 , VAR_2 , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 ; ) STRING_1 , VAR_2 , VAR_1 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { java.util.List < TYPE_1 > result = new TYPE_4 ( args . rw , VAR_2 , VAR_3 ) . METHOD_1 ( VAR_1 ) ; java.util.Collections . METHOD_1 ( result , VAR_4 ) ; return result ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; result return ; ) VAR_4 , result ( METHOD_1 . java.util.Collections ; ) VAR_1 ( METHOD_1 . ) VAR_3 , VAR_2 , rw . args ( TYPE_4 new = result > TYPE_1 < java.util.List { try { TYPE_3 throws ) VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } for ( TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_4 ( ) ) { if ( ( cmd . METHOD_5 ( ) ) == ( VAR_4 ) ) { METHOD_1 ( project , cmd , util . METHOD_6 ( VAR_2 ) ) ; } } } } } } ; ) ) VAR_2 ( METHOD_6 . util , cmd , project ( METHOD_1 { ) ) VAR_4 ( == ) ) ( METHOD_5 . cmd ( ( if { ) ) ( METHOD_4 . VAR_1 : cmd ReceiveCommand . TYPE_2 ( for } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_3 ( ! ( if { ) VAR_2 com.google.gerrit.reviewdb.client.Account.Id , VAR_1 TYPE_1 , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( change.getId ( ) ) ; org.eclipse.jgit.lib.ObjectId VAR_3 = VAR_1 . METHOD_3 ( repo , VAR_2 ) ; VAR_1 . add ( new TYPE_3 . ReceiveCommand ( VAR_3 , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , VAR_2 ) ) ; } } ; ) ) VAR_2 , ) ( METHOD_4 . org.eclipse.jgit.lib.ObjectId , VAR_3 ( ReceiveCommand . TYPE_3 new ( add . VAR_1 ; ) VAR_2 , repo ( METHOD_3 . VAR_1 = VAR_3 org.eclipse.jgit.lib.ObjectId ; ) ) ( change.getId ( METHOD_2 . TYPE_2 = VAR_2 java.lang.String { java.io.IOException throws ) VAR_1 TYPE_1 , repo org.eclipse.jgit.lib.Repository , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 void private 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change VAR_1 = VAR_2 . get ( ) . changes ( ) . METHOD_2 ( rsrc . getChange ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_3 ) ) { change . METHOD_3 ( VAR_4 ) ; TYPE_3 . METHOD_4 ( change ) ; } return change ; } } ) ; return VAR_1 ; } } ; VAR_1 return ; ) } } ; change return } ; ) change ( METHOD_4 . TYPE_3 ; ) VAR_4 ( METHOD_3 . change { ) ) VAR_3 ( == ) ) ( getStatus . change ( ( if { ) change com.google.gerrit.reviewdb.client.Change ( update com.google.gerrit.reviewdb.client.Change public { ) ( > com.google.gerrit.reviewdb.client.Change < TYPE_2 new , ) ( getId . ) ( getChange . rsrc ( METHOD_2 . ) ( changes . ) ( get . VAR_2 = VAR_1 com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) rsrc TYPE_1 ( METHOD_1 com.google.gerrit.reviewdb.client.Change private 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return ; } TYPE_7 rsp = new TYPE_7 ( req , ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , rsp ) ; } } } } ; ) rsp , req ( METHOD_1 . VAR_3 { ) ) rsp , req ( METHOD_3 ( if ; ) ) ) VAR_2 ( ) HttpServletResponse . TYPE_8 ( ( , req ( TYPE_7 new = rsp TYPE_7 } ; return ; ) VAR_2 , VAR_1 ( METHOD_1 . VAR_3 { ) ) ) req ( METHOD_2 . TYPE_6 ( ! ( if ; ) ) VAR_1 ( ) TYPE_5 ( ( = req TYPE_5 { TYPE_4 , java.io.IOException throws ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ; VAR_1 . project = project . get ( ) ; VAR_1 . branch = STRING_1 ; TYPE_2 r = VAR_2 . METHOD_2 ( STRING_2 , VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_3 ) ) ; } } ; ) ) STRING_3 ( contains . ) ( METHOD_5 . r ( METHOD_4 . org.junit.Assert ; ) ) ( METHOD_3 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) VAR_1 , STRING_2 ( METHOD_2 . VAR_2 = r TYPE_2 ; STRING_1 = branch . VAR_1 ; ) ( get . project = project . VAR_1 ; ) ( ChangeInfo . TYPE_1 new = VAR_1 ChangeInfo . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , admin , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( admin ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_2 ) ; } } ; ) VAR_2 ( to . ) VAR_10 ( METHOD_6 . ) VAR_9 ( to . ) admin ( METHOD_6 . ) VAR_8 , VAR_7 , VAR_6 , VAR_5 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_2 , admin , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ; if ( c == null ) { throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1 . create ( c ) ; } } ; ) c ( create . VAR_1 return } ; ) ) STRING_2 + ) changeId + STRING_1 ( ( ( error . TYPE_3 throw { ) null == c ( if ; ) changeId ( get . ) ( changes . ) ( get . db = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException , TYPE_2 throws ) changeId Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 private 
private java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( ) { com.google.gerrit.reviewdb.server.ReviewDb db = null ; try { db = VAR_1 . METHOD_2 ( ) ; return db . changes ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2 . METHOD_5 ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; return java.util.Collections . METHOD_6 ( ) ; } finally { if ( db ! = null ) { db . close ( ) ; } } } } } } ; ) ( close . db { ) null = ! db ( if { finally } ; ) ( METHOD_6 . java.util.Collections return ; ) ) ) ) ( getMessage . e ( + STRING_1 ( ( METHOD_5 . VAR_2 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ( METHOD_4 . ) ( METHOD_3 . ) ( changes . db return ; ) ( METHOD_2 . VAR_1 = db { try ; null = db com.google.gerrit.reviewdb.server.ReviewDb { ) ( METHOD_1 > com.google.gerrit.reviewdb.client.Change < java.util.List private 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( change.getId ( ) ) ; cm . METHOD_1 ( change . METHOD_2 ( ) ) ; cm . METHOD_3 ( patchSet , VAR_2 ) ; cm . METHOD_4 ( VAR_3 ) ; cm . METHOD_5 ( reviewers ) ; cm . METHOD_6 ( VAR_4 ) ; cm . METHOD_7 ( ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } } } ; ) e , ) ) ) ( change.getId ( + STRING_1 ( ( error . VAR_5 { ) e java.lang.Exception ( catch } ; ) ( METHOD_7 . cm ; ) VAR_4 ( METHOD_6 . cm ; ) reviewers ( METHOD_5 . cm ; ) VAR_3 ( METHOD_4 . cm ; ) VAR_2 , patchSet ( METHOD_3 . cm ; ) ) ( METHOD_2 . change ( METHOD_1 . cm ; ) ) ( change.getId ( create . VAR_1 = cm TYPE_1 { try { ) ( run void public 
public synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_1 { VAR_4 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_2 , VAR_2 ) ; VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_3 , VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . VAR_4 ; ) VAR_3 , STRING_3 , VAR_1 , STRING_1 ( METHOD_3 . VAR_4 ; ) VAR_2 , STRING_2 , VAR_1 , STRING_1 ( METHOD_3 . VAR_4 ; ) ( METHOD_2 . VAR_4 { TYPE_1 , java.io.IOException throws ) VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 void synchronized public 
private java.util.List < ? > METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; try { return TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new TYPE_2 ( TYPE_2 . METHOD_5 ( ) ) , rw , VAR_1 ) ; } finally { rw . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . rw { finally } ; ) VAR_1 , rw , ) ) ( METHOD_5 . TYPE_2 ( TYPE_2 new , ) ( METHOD_4 ( METHOD_3 . TYPE_1 return { try ; ) ) ( METHOD_2 . repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk { java.lang.Exception throws ) ( METHOD_1 > ? < java.util.List private 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 , TYPE_5 , java.lang.Exception { if ( ( format ) == ( VAR_2 ) ) { TYPE_6 VAR_3 = new TYPE_6 ( ) ; display ( VAR_3 ) ; return TYPE_7 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) ; } format = VAR_4 ; return display ( null ) ; } } ; ) null ( display return ; VAR_4 = format } ; ) STRING_2 ( METHOD_3 . ) STRING_1 ( METHOD_2 . ) ) ( METHOD_1 . VAR_3 ( create . TYPE_7 return ; ) VAR_3 ( display ; ) ( TYPE_6 new = VAR_3 TYPE_6 { ) ) VAR_2 ( == ) format ( ( if { java.lang.Exception , TYPE_5 , TYPE_4 , TYPE_3 throws ) VAR_1 TYPE_2 ( apply TYPE_1 public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , com.google.gwtorm.server.OrmException , TYPE_5 { java.util.List < com.google.gerrit.reviewdb.client.Change > changes = METHOD_2 ( id . METHOD_3 ( ) ) ; if ( ( changes . size ( ) ) ! = 1 ) { throw new TYPE_4 ( id ) ; } TYPE_6 VAR_2 ; try { VAR_2 = VAR_3 . METHOD_4 ( changes . get ( 0 ) ) ; } catch ( TYPE_7 e ) { throw new TYPE_4 ( id ) ; } return new TYPE_1 ( VAR_2 ) ; } } ; ) VAR_2 ( TYPE_1 new return } ; ) id ( TYPE_4 new throw { ) e TYPE_7 ( catch } ; ) ) 0 ( get . changes ( METHOD_4 . VAR_3 = VAR_2 { try ; VAR_2 TYPE_6 } ; ) id ( TYPE_4 new throw { ) 1 = ! ) ) ( size . changes ( ( if ; ) ) ( METHOD_3 . id ( METHOD_2 = changes > com.google.gerrit.reviewdb.client.Change < java.util.List { TYPE_5 , com.google.gwtorm.server.OrmException , TYPE_4 throws ) id TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) { final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ( ( reviewers . size ( ) ) + ( VAR_2 . size ( ) ) ) ) ; VAR_1 . METHOD_2 ( reviewers ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return java.util.Collections . METHOD_3 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_3 . java.util.Collections return ; ) VAR_2 ( METHOD_2 . VAR_1 ; ) reviewers ( METHOD_2 . VAR_1 ; ) ) ) ) ( size . VAR_2 ( + ) ) ( size . reviewers ( ( ( > com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 new = VAR_1 > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set final { ) ( METHOD_1 > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set public 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 ) ; db . changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; TYPE_2 u = VAR_2 . create ( VAR_3 . METHOD_3 ( c , VAR_4 . create ( VAR_1 ) ) ) ; u . METHOD_4 ( c . METHOD_5 ( ) ) ; u . METHOD_6 ( c . METHOD_7 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } } ; c return ; ) ( commit . u ; ) ) ( get . ) ( METHOD_7 . c ( METHOD_6 . u ; ) ) ( METHOD_5 . c ( METHOD_4 . u ; ) ) ) VAR_1 ( create . VAR_4 , c ( METHOD_3 . VAR_3 ( create . VAR_2 = u TYPE_2 ; ) ) c ( java.util.Collections.singleton ( insert . ) ( changes . db ; ) VAR_1 , project ( METHOD_2 . TYPE_1 = c com.google.gerrit.reviewdb.client.Change { java.lang.Exception throws ) ( METHOD_1 com.google.gerrit.reviewdb.client.Change private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; TYPE_2 info = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_3 class ) ; TYPE_3 . METHOD_5 ( admin , info ) ; com.google.gerrit.reviewdb.client.Account account = VAR_4 . get ( admin . getId ( ) ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . isEqualTo ( account . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . account ( isEqualTo . ) VAR_5 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_6 . ) ) ( getId . admin ( get . VAR_4 = account com.google.gerrit.reviewdb.client.Account ; ) info , admin ( METHOD_5 . TYPE_3 ; ) class VAR_3 , ) ( METHOD_4 . r ( METHOD_3 . ) ( METHOD_2 = info TYPE_2 ; ) ) STRING_2 + ) ) VAR_2 ( + STRING_1 ( ( ( get . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 ! = null ) & & ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; } } } } ; ) ) ( METHOD_2 . VAR_2 , STRING_1 ( METHOD_6 . ) ( METHOD_5 . view ; ) ) ) VAR_1 ( METHOD_4 . TYPE_3 , 0 ( METHOD_3 . TYPE_2 ( METHOD_2 . VAR_2 { ) ) 0 > ) ) ( length . VAR_1 ( ( & & ) null = ! VAR_1 ( ( if ; ) ( getValue . e = VAR_1 java.lang.String { ) e > java.lang.String < TYPE_1 ( METHOD_1 void 
public TYPE_1 to ( java.lang.String ref ) throws java.io.IOException , TYPE_2 { TYPE_3 . add ( git , VAR_1 , VAR_2 ) ; changeId = TYPE_3 . METHOD_1 ( git , VAR_3 . METHOD_2 ( ) , VAR_4 ) ; return TYPE_3 . METHOD_3 ( git , ref ) ; } } ; ) ref , git ( METHOD_3 . TYPE_3 return ; ) VAR_4 , ) ( METHOD_2 . VAR_3 , git ( METHOD_1 . TYPE_3 = changeId ; ) VAR_2 , VAR_1 , git ( add . TYPE_3 { TYPE_2 , java.io.IOException throws ) ref java.lang.String ( to TYPE_1 public 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . info ( ( STRING_1 + VAR_1 ) ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { TYPE_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . info ( ( STRING_2 + VAR_1 ) ) ; } else { VAR_2 . METHOD_6 ( java.lang.String.format ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) ; } } } } ; ) ) VAR_1 , ) ) STRING_5 + STRING_4 ( + STRING_3 ( ( java.lang.String.format ( METHOD_6 . VAR_2 { else } ; ) ) VAR_1 + STRING_2 ( ( info . VAR_2 ; ) VAR_1 ( METHOD_5 . TYPE_2 { ) ) VAR_1 ( METHOD_4 . TYPE_2 ( if else } ; ) ) VAR_1 + STRING_1 ( ( info . VAR_2 ; ) VAR_1 ( METHOD_3 . TYPE_2 { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; install ( TYPE_1 . METHOD_3 ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ; install ( new TYPE_2 ( ) ) ; factory ( VAR_5 . Factory class ) ; } } ; ) class Factory . VAR_5 ( factory ; ) ) ( TYPE_2 new ( install ; ) class VAR_4 ( to . ) class VAR_3 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) ) ( METHOD_3 . TYPE_1 ( install ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( install { ) ( METHOD_1 void public 
public int METHOD_1 ( TYPE_1 key , TYPE_2 value ) { int size = ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ; for ( TYPE_3 e : value . METHOD_2 ( ) ) { size += e . METHOD_1 ( ) ; } return size ; } } ; size return } ; ) ( METHOD_1 . e += size { ) ) ( METHOD_2 . value : e TYPE_3 ( for ; INT_6 + ) ) INT_2 * INT_5 ( + ) ) INT_3 * INT_5 ( + ) INT_1 + ) ) INT_4 * 2 ( + ) ) INT_3 * INT_2 ( + INT_1 ( ( ( ( ( = size int { ) value TYPE_2 , key TYPE_1 ( METHOD_1 int public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_3 ( this ) ; VAR_2 = new TYPE_4 ( ) ; VAR_2 . add ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; db = VAR_3 . METHOD_5 ( ) ; VAR_4 . create ( db ) ; VAR_5 = VAR_6 . METHOD_6 ( TYPE_5 . METHOD_7 ( STRING_1 ) ) . getAccountId ( ) ; user = VAR_7 . create ( VAR_5 ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } } ; ) ( METHOD_9 ; ) ( METHOD_8 ; ) VAR_5 ( create . VAR_7 = user ; ) ( getAccountId . ) ) STRING_1 ( METHOD_7 . TYPE_5 ( METHOD_6 . VAR_6 = VAR_5 ; ) db ( create . VAR_4 ; ) ( METHOD_5 . VAR_3 = db ; ) ( METHOD_4 . VAR_2 ; ) VAR_1 ( add . VAR_2 ; ) ( TYPE_4 new = VAR_2 ; ) this ( METHOD_3 . VAR_1 ; ) ) ( TYPE_3 new ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getRefName ( ) ) ) { return METHOD_4 ( VAR_1 . commit ) ; } else { return java.util.Collections . METHOD_5 ( ) ; } } } } ; ) ( METHOD_5 . java.util.Collections return { else } ; ) commit . VAR_1 ( METHOD_4 return { ) ) ) ( getRefName . VAR_1 , ) ( METHOD_3 . VAR_1 ( METHOD_2 . VAR_2 ( if { TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List public 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException , TYPE_1 { java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_2 , repo ) ) ; VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_3 , repo ) ) ; return TYPE_4 . METHOD_1 ( repo , STRING_1 , VAR_1 ) ; } } ; ) VAR_1 , STRING_1 , repo ( METHOD_1 . TYPE_4 return ; ) ) repo , VAR_3 ( METHOD_2 . TYPE_4 ( add . VAR_1 ; ) ) repo , VAR_2 ( METHOD_2 . TYPE_4 ( add . VAR_1 ; ) ( > < TYPE_3 new = VAR_1 > TYPE_2 < java.util.Set { TYPE_1 , java.io.IOException throws ) ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit private 
void display ( final TYPE_1 result ) { project = result . project ; VAR_1 . METHOD_1 ( project . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_4 , VAR_5 ) ; TYPE_2 . METHOD_3 ( VAR_6 , VAR_7 ) ; TYPE_2 . METHOD_3 ( VAR_8 , VAR_9 ) ; METHOD_4 ( project . METHOD_5 ( ) ) ; METHOD_6 ( project . METHOD_7 ( ) ) ; VAR_10 . METHOD_8 ( false ) ; } } ; ) false ( METHOD_8 . VAR_10 ; ) ) ( METHOD_7 . project ( METHOD_6 ; ) ) ( METHOD_5 . project ( METHOD_4 ; ) VAR_9 , VAR_8 ( METHOD_3 . TYPE_2 ; ) VAR_7 , VAR_6 ( METHOD_3 . TYPE_2 ; ) VAR_5 , VAR_4 ( METHOD_3 . TYPE_2 ; ) VAR_3 , VAR_2 ( METHOD_3 . TYPE_2 ; ) ) ( METHOD_2 . project ( METHOD_1 . VAR_1 ; project . result = project { ) result TYPE_1 final ( display void 
private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final boolean VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) { final java.lang.String url = METHOD_5 ( ) ; METHOD_6 ( VAR_2 , url , VAR_3 , false ) ; } if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ) { final java.lang.String url = METHOD_8 ( ) ; METHOD_6 ( VAR_2 , url , VAR_3 , true ) ; } } } } ; ) true , VAR_3 , url , VAR_2 ( METHOD_6 ; ) ( METHOD_8 = url java.lang.String final { ) ) VAR_4 ( == ) ) ( METHOD_7 . VAR_1 ( ( if } ; ) false , VAR_3 , url , VAR_2 ( METHOD_6 ; ) ( METHOD_5 = url java.lang.String final { ) ) VAR_4 ( == ) ) ( METHOD_4 . VAR_1 ( ( if ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 = VAR_3 boolean final { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 void private 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( err ) ; } } } } ; ) err ( METHOD_3 . TYPE_2 return { else } ; ) ( METHOD_2 . TYPE_2 return } ; ) e , err ( error . VAR_2 { else } ; ) err ( error . VAR_2 { ) null == e ( if { ) VAR_1 ( if { ) e java.lang.Exception , err java.lang.String ( METHOD_1 > TYPE_1 < java.util.List private 
private static TYPE_1 METHOD_1 ( TYPE_2 res , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( TYPE_3 . create ( res ) . METHOD_2 ( ) , true , VAR_2 ) ; if ( VAR_1 ! = null ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } return VAR_3 ; } } ; VAR_3 return } ; ) VAR_1 ( METHOD_3 . VAR_3 { ) null = ! VAR_1 ( if ; ) VAR_2 , true , ) ( METHOD_2 . ) res ( create . TYPE_3 ( TYPE_1 new = VAR_3 TYPE_1 { ) VAR_2 java.lang.String , VAR_1 java.lang.String , res TYPE_2 ( METHOD_1 TYPE_1 static private 
private static java.lang.String METHOD_1 ( final long VAR_1 , final long VAR_2 ) { if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( TYPE_2 new ( format . ) STRING_2 ( TYPE_1 new return } ; ) ) VAR_2 ( TYPE_2 new ( format . ) STRING_1 ( TYPE_1 new return { ) ) INT_3 * ) INT_2 * ) INT_2 * INT_1 ( ( ( < ) VAR_1 - VAR_2 ( ( if { ) VAR_2 long final , VAR_1 long final ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_5 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_7 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) ) VAR_3 ( + ) ) ) STRING_7 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_6 ( METHOD_5 . TYPE_2 ( + ) ) VAR_2 ( + STRING_5 ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) ) ) STRING_4 + ) STRING_3 + STRING_2 ( ( + STRING_1 ( ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_1 p , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_7 = VAR_1 ; VAR_8 = VAR_9 . METHOD_2 ( ) ; VAR_10 = ++ ( VAR_11 ) ; VAR_12 . METHOD_3 ( VAR_2 ) ; return p ; } } ; p return ; ) VAR_2 ( METHOD_3 . VAR_12 ; ) VAR_11 ( ++ = VAR_10 ; ) ( METHOD_2 . VAR_9 = VAR_8 ; VAR_1 = VAR_7 ; VAR_6 = VAR_5 ; VAR_4 = VAR_3 { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 , p TYPE_1 ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ; VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 ) ) ; } } ; ) ) VAR_3 , ) 1 + ) VAR_4 - VAR_3 ( ( , ) VAR_5 ( METHOD_6 ( TYPE_3 new ( add . VAR_9 ; ) ) VAR_4 , VAR_2 , ) null , VAR_8 , 0 , VAR_2 , ) ( METHOD_5 . VAR_7 , VAR_1 ( METHOD_4 ( TYPE_2 new , ) VAR_3 ( METHOD_3 . VAR_5 ( put . VAR_6 ; ) VAR_1 ( METHOD_2 = VAR_5 TYPE_1 { ) VAR_4 int , VAR_3 int , VAR_2 int , VAR_1 TYPE_1 ( METHOD_1 void private 
public int run ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) { protected void METHOD_2 ( ) { bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) . in ( VAR_5 ) ; } } ) ; TYPE_7 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( VAR_6 class ) . METHOD_6 ( ) ; return METHOD_7 ( ) ; } } ; ) ( METHOD_7 return ; ) ( METHOD_6 . ) class VAR_6 ( METHOD_5 . VAR_1 ; ) ) class VAR_3 ( METHOD_5 . VAR_1 ( METHOD_4 . TYPE_7 ; ) } } ; ) VAR_5 ( in . ) class VAR_4 ( METHOD_3 . ) class VAR_3 ( bind { ) ( METHOD_2 void protected { ) ( TYPE_6 new , ) ( TYPE_5 new , ) ( TYPE_4 new , ) ( TYPE_3 new , VAR_2 ( METHOD_1 . TYPE_2 = VAR_1 TYPE_1 final { java.lang.Exception throws ) ( run int public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( c ) . METHOD_2 ( ) ; com.google.gerrit.reviewdb.client . PatchSetApproval a = VAR_3 . METHOD_3 ( db , notes , VAR_1 ) ; org.junit.Assert . METHOD_4 ( a . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( 1 , a . getValue ( ) ) ; org.junit.Assert.assertEquals ( admin . id , a . getAccountId ( ) ) ; } } ; ) ) ( getAccountId . a , id . admin ( org.junit.Assert.assertEquals ; ) ) ( getValue . a , 1 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_5 . a ( METHOD_4 . org.junit.Assert ; ) VAR_1 , notes , db ( METHOD_3 . VAR_3 = a PatchSetApproval . com.google.gerrit.reviewdb.client ; ) ( METHOD_2 . ) c ( create . VAR_2 = notes TYPE_1 ; ) ) ( getParentKey . VAR_1 ( get . ) ( changes . db = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 void private 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final java.lang.String value = STRING_2 ; final TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( name , value ) ; METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ; METHOD_3 ( value , VAR_1 . getValue ( ) ) ; assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; } } ; ) ) ( size . ) ( METHOD_5 . VAR_1 , 0 ( assertEquals ; ) ) ( getValue . VAR_1 , value ( METHOD_3 ; ) ) ( METHOD_4 . VAR_1 , name ( METHOD_3 ; ) value , name ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < TYPE_1 final ; STRING_2 = value java.lang.String final ; STRING_1 = name java.lang.String final { ) ( METHOD_1 void public 
void add ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ; for ( TYPE_1 input : VAR_1 ) { java.lang.String VAR_2 = input . getValue ( ) . METHOD_1 ( ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { input . METHOD_2 ( STRING_1 ) ; values . add ( VAR_2 ) ; } } t . insert ( values ) ; } } ; ) values ( insert . t } } ; ) VAR_2 ( add . values ; ) STRING_1 ( METHOD_2 . input { ) ) ) ( isEmpty . VAR_2 ( ! ( if ; ) ( METHOD_1 . ) ( getValue . input = VAR_2 java.lang.String { ) VAR_1 : input TYPE_1 ( for ; ) ( > < java.util.ArrayList new = values > java.lang.String < java.util.List { ) ( add void 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_1 = git . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; METHOD_5 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ; r . METHOD_8 ( ) ; r . METHOD_9 ( VAR_4 , null , admin ) ; r . METHOD_10 ( TYPE_2 . getMessage ( ) ) ; } } ; ) ) ( getMessage . TYPE_2 ( METHOD_10 . r ; ) admin , null , VAR_4 ( METHOD_9 . r ; ) ( METHOD_8 . r ; ) STRING_9 , STRING_4 , STRING_8 , STRING_7 ( METHOD_5 = r Result . TYPE_1 ; ) STRING_6 , project , VAR_3 ( METHOD_7 ; ) VAR_1 ( METHOD_6 . VAR_2 ; ) STRING_5 , STRING_4 , STRING_3 , STRING_2 ( METHOD_5 ; ) ( METHOD_4 . ) STRING_1 ( METHOD_3 . ) ( METHOD_2 . git = VAR_1 org.eclipse.jgit.lib.ObjectId { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , true ) ; TYPE_1 . METHOD_2 ( VAR_2 , false ) ; TYPE_1 . METHOD_2 ( error , false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_3 ( true ) ; VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_5 ) ) ; VAR_4 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . VAR_4 ; ) ) VAR_5 ( METHOD_5 . TYPE_2 ( METHOD_4 . VAR_4 ; ) true ( METHOD_3 . VAR_4 ; ) false ( METHOD_2 . VAR_3 ; ) false , error ( METHOD_2 . TYPE_1 ; ) false , VAR_2 ( METHOD_2 . TYPE_1 ; ) true , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void 
public boolean equals ( TYPE_1 VAR_1 ) { if ( ( VAR_1 == null ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ( this . VAR_3 ) ! = ( VAR_4 ) ) || ( ( this . VAR_5 ) ! = ( VAR_6 ) ) ) { return false ; } return true ; } } ; true return } ; false return { ) ) ) VAR_6 ( = ! ) VAR_5 . this ( ( || ) ) VAR_4 ( = ! ) VAR_3 . this ( ( ( if ; ) ) VAR_1 ( ) TYPE_2 ( ( = VAR_2 TYPE_2 } ; false return { ) ) ) TYPE_2 instanceof VAR_1 ( ! ( || ) null == VAR_1 ( ( if { ) VAR_1 TYPE_1 ( equals boolean public 
private static java.util.Set < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 < TYPE_2 > refs ) throws java.io.IOException , TYPE_3 { java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_1 = TYPE_4 . METHOD_2 ( ) ; for ( TYPE_2 r : refs ) { try { VAR_1 . add ( rw . parseCommit ( r . METHOD_3 ( ) ) ) ; } catch ( TYPE_5 VAR_2 ) { } } return VAR_1 ; } } ; VAR_1 return } } { ) VAR_2 TYPE_5 ( catch } ; ) ) ) ( METHOD_3 . r ( parseCommit . rw ( add . VAR_1 { try { ) refs : r TYPE_2 ( for ; ) ( METHOD_2 . TYPE_4 = VAR_1 > org.eclipse.jgit.revwalk.RevCommit < java.util.Set { TYPE_3 , java.io.IOException throws ) refs > TYPE_2 < TYPE_1 , rw org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 > org.eclipse.jgit.revwalk.RevCommit < java.util.Set static private 
private com.google.gerrit.server.query.change.ChangeData METHOD_1 ( ) { if ( ( cd ) == null ) { com.google.gerrit.reviewdb.server.ReviewDb VAR_1 = db ( ) ; TYPE_1 . METHOD_2 ( ( VAR_1 ! = null ) , STRING_1 ) ; cd = VAR_2 . create ( VAR_1 , METHOD_3 ( ) ) ; } return cd ; } } ; cd return } ; ) ) ( METHOD_3 , VAR_1 ( create . VAR_2 = cd ; ) STRING_1 , ) null = ! VAR_1 ( ( METHOD_2 . TYPE_1 ; ) ( db = VAR_1 com.google.gerrit.reviewdb.server.ReviewDb { ) null == ) cd ( ( if { ) ( METHOD_1 com.google.gerrit.server.query.change.ChangeData private 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; } } ; ) ) ) ( METHOD_1 . ) ) VAR_1 ( ) TYPE_2 ( ( ( TYPE_3 new ( equals . ) ) ( METHOD_1 ( > TYPE_4 < TYPE_3 new return } ; false return { ) ) ) TYPE_2 instanceof VAR_1 ( ! ( || ) ) ) VAR_1 ( equals . super ( ! ( ( if { ) VAR_1 TYPE_1 final ( equals boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( r , STRING_2 ) ; METHOD_6 ( r ) . METHOD_7 ( STRING_2 ) ; METHOD_8 ( r , STRING_3 ) ; } } ; ) STRING_3 , r ( METHOD_8 ; ) STRING_2 ( METHOD_7 . ) r ( METHOD_6 ; ) STRING_2 , r ( METHOD_5 ; ) user ( METHOD_4 ; ) VAR_2 , false , STRING_1 , project , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } else { java.lang.String projectName = name . get ( ) ; for ( java.lang.String VAR_2 : VAR_1 ) { if ( METHOD_2 ( projectName , VAR_2 ) ) { return true ; } } } return false ; } } ; false return } } } ; true return { ) ) VAR_2 , projectName ( METHOD_2 ( if { ) VAR_1 : VAR_2 java.lang.String ( for ; ) ( get . name = projectName java.lang.String { else } ; true return { ) ) ( isEmpty . VAR_1 ( if { ) name com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 boolean public 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) { throw new TYPE_2 ( ) ; } } finally { rw . METHOD_3 ( ) ; } } } } ; ) ( METHOD_3 . rw { finally } } ; ) ( TYPE_2 new throw { ) ) ) commit , rw , ) ( get . db ( METHOD_2 . VAR_1 ( ! ( if ; ) VAR_2 ( parseCommit . rw = commit org.eclipse.jgit.revwalk.RevCommit { try ; ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk { java.io.IOException , TYPE_2 throws ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 TYPE_1 , repo org.eclipse.jgit.lib.Repository ( METHOD_1 void private 
private boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return false ; } if ( VAR_2 . isEmpty ( ) ) { return false ; } if ( ( ( VAR_2 . size ( ) ) == 1 ) & & ( VAR_2 . contains ( VAR_3 ) ) ) { return false ; } return true ; } } ; true return } ; false return { ) ) ) VAR_3 ( contains . VAR_2 ( & & ) 1 == ) ) ( size . VAR_2 ( ( ( if } ; false return { ) ) ( isEmpty . VAR_2 ( if } ; false return { ) 0 == ) ) ( length . VAR_1 ( ( if { ) ( METHOD_1 boolean private 
public void update ( ) throws TYPE_1 { try { schema = VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } finally { if ( ( schema ) ! = null ) { schema . close ( ) ; schema = null ; } } } } } } ; null = schema ; ) ( close . schema { ) null = ! ) schema ( ( if { finally } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) null , ) ( METHOD_4 . ) ( getId . VAR_3 , VAR_2 ( METHOD_3 ; ) ( METHOD_2 ; ) ( METHOD_1 . VAR_1 = schema { try { TYPE_1 throws ) ( update void public 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , new com.google.gerrit.reviewdb.client.Account.Id ( 2 ) , new TYPE_2 . NameKey ( VAR_2 , STRING_2 ) , TYPE_3 . METHOD_2 ( ) ) ; VAR_1 . set ( VAR_3 , change ) ; VAR_1 . set ( VAR_4 , util . user ( VAR_5 ) . METHOD_3 ( change ) ) ; } } ; ) ) change ( METHOD_3 . ) VAR_5 ( user . util , VAR_4 ( set . VAR_1 ; ) change , VAR_3 ( set . VAR_1 ; ) ) ( METHOD_2 . TYPE_3 , ) STRING_2 , VAR_2 ( NameKey . TYPE_2 new , ) 2 ( com.google.gerrit.reviewdb.client.Account.Id new , ) 1 ( Id . com.google.gerrit.reviewdb.client.Change new , ) STRING_1 ( Key . com.google.gerrit.reviewdb.client.Change new ( com.google.gerrit.reviewdb.client.Change new = change com.google.gerrit.reviewdb.client.Change { ) VAR_1 TYPE_1 ( METHOD_1 void protected 
public void display ( final java.util.List < TYPE_1 > result ) { while ( 1 < ( table . METHOD_1 ( ) ) ) table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ; for ( TYPE_1 VAR_1 : result ) { final int row = table . METHOD_1 ( ) ; table . METHOD_3 ( row ) ; METHOD_4 ( row ) ; METHOD_5 ( row , VAR_1 ) ; } } } } ; ) VAR_1 , row ( METHOD_5 ; ) row ( METHOD_4 ; ) row ( METHOD_3 . table ; ) ( METHOD_1 . table = row int final { ) result : VAR_1 TYPE_1 ( for ; ) ) 1 - ) ) ( METHOD_1 . table ( ( ( METHOD_2 . table ) ) ) ( METHOD_1 . table ( < 1 ( while { ) result > TYPE_1 < java.util.List final ( display void public 
private < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) { TYPE_5 < TYPE_1 > VAR_4 = new TYPE_5 < TYPE_1 > ( VAR_5 , VAR_3 ) ; try { if ( ! ( VAR_5 ) ) { TYPE_6 . METHOD_2 ( ) ; } TYPE_7 req = METHOD_3 ( VAR_1 ) ; req . METHOD_4 ( STRING_1 , VAR_6 ) ; req . METHOD_5 ( VAR_2 , VAR_4 ) ; } catch ( TYPE_8 e ) { VAR_4 . METHOD_6 ( null , e ) ; } } } } ; ) e , null ( METHOD_6 . VAR_4 { ) e TYPE_8 ( catch } ; ) VAR_4 , VAR_2 ( METHOD_5 . req ; ) VAR_6 , STRING_1 ( METHOD_4 . req ; ) VAR_1 ( METHOD_3 = req TYPE_7 } ; ) ( METHOD_2 . TYPE_6 { ) ) VAR_5 ( ! ( if { try ; ) VAR_3 , VAR_5 ( > TYPE_1 < TYPE_5 new = VAR_4 > TYPE_1 < TYPE_5 { ) VAR_3 > TYPE_1 < TYPE_4 , VAR_2 java.lang.String , VAR_1 TYPE_3 ( METHOD_1 void > TYPE_2 extends TYPE_1 < private 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ; } } ; ) VAR_1 , ) STRING_1 ( of . TYPE_3 ( assertEquals } ; ) ) ( getName . label ( add . VAR_1 { ) ) ( METHOD_3 . ) ( METHOD_3 : label TYPE_2 ( for ; ) ( METHOD_2 . TYPE_1 = VAR_1 > java.lang.String < java.util.List { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) ) , out . METHOD_8 ( ) ) ; } } ; ) ) ( METHOD_8 . out , ) ) 1 ( METHOD_7 . in , ) ) ) 2 ( METHOD_7 . in , ) 0 ( METHOD_7 . in ( METHOD_6 . TYPE_1 ( query ( of . TYPE_2 ( assertEquals ; ) ) ( METHOD_5 . out , class VAR_1 ( METHOD_4 ; ) in ( METHOD_3 = out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) STRING_1 ( METHOD_2 = in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 d = new TYPE_1 ( ) ; VAR_1 = c . getId ( ) . toString ( ) ; d . id = c . getKey ( ) . toString ( ) ; d . revision = ps . getRevision ( ) . get ( ) ; d . ref = ps . getRefName ( ) ; return d ; } } ; d return ; ) ( getRefName . ps = ref . d ; ) ( get . ) ( getRevision . ps = revision . d ; ) ( toString . ) ( getKey . c = id . d ; ) ( toString . ) ( getId . c = VAR_1 ; ) ( TYPE_1 new = d TYPE_1 { ) ps com.google.gerrit.reviewdb.client.PatchSet , c com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 private 
private byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { final long VAR_2 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 b = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( b , VAR_1 ) ; final byte [ ] key = b . METHOD_5 ( ) ; return TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_6 ( VAR_2 , key ) ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) ) key , VAR_2 ( METHOD_6 . TYPE_6 ( METHOD_4 . TYPE_5 return ; ) ( METHOD_5 . b = key ] [ byte final ; ) VAR_1 , b ( METHOD_4 . ) ( METHOD_3 . TYPE_4 ; ) ( TYPE_3 new = b TYPE_3 final ; ) ( METHOD_2 . TYPE_2 = VAR_2 long final { ) VAR_1 TYPE_1 ( METHOD_1 ] [ byte private 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String revision ) throws TYPE_1 , java.io.IOException { org.eclipse.jgit.lib.ObjectId VAR_1 = repo . METHOD_2 ( TYPE_2 . METHOD_3 ( revision , VAR_2 ) ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ( TYPE_1 new throw { ) null == VAR_1 ( if ; ) ) VAR_2 , revision ( METHOD_3 . TYPE_2 ( METHOD_2 . repo = VAR_1 org.eclipse.jgit.lib.ObjectId { java.io.IOException , TYPE_1 throws ) revision java.lang.String , repo org.eclipse.jgit.lib.Repository ( METHOD_1 org.eclipse.jgit.lib.ObjectId static private 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( c ) . METHOD_2 ( ) ; return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; } } ; ) VAR_1 , notes , db ( METHOD_1 . VAR_3 return ; ) ( METHOD_2 . ) c ( create . VAR_2 = notes TYPE_1 ; ) ) ( getParentKey . VAR_1 ( get . ) ( changes . db = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 PatchSetApproval . com.google.gerrit.reviewdb.client private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ; } } ; ) STRING_6 , STRING_1 , ) STRING_5 + ) VAR_4 ( ( , ) STRING_4 + ) VAR_4 ( ( , ) STRING_5 + ) VAR_3 ( ( , ) STRING_4 + ) VAR_3 ( ( , STRING_3 ( METHOD_5 ; ) user ( METHOD_4 ; ) VAR_2 , VAR_1 , STRING_2 ( METHOD_3 ; ) STRING_1 , VAR_2 , VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_2 VAR_4 = util . user ( VAR_1 , VAR_5 ) ; TYPE_2 VAR_6 = util . user ( VAR_1 , VAR_5 , VAR_3 ) ; METHOD_3 ( STRING_2 , VAR_4 . METHOD_4 ( ) ) ; METHOD_5 ( STRING_3 , VAR_6 . METHOD_4 ( ) ) ; } } ; ) ) ( METHOD_4 . VAR_6 , STRING_3 ( METHOD_5 ; ) ) ( METHOD_4 . VAR_4 , STRING_2 ( METHOD_3 ; ) VAR_3 , VAR_5 , VAR_1 ( user . util = VAR_6 TYPE_2 ; ) VAR_5 , VAR_1 ( user . util = VAR_4 TYPE_2 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; java.util.List < TYPE_1 . ChangeInfo > VAR_1 = VAR_2 . changes ( ) . query ( STRING_1 ) . get ( ) ; org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ; VAR_1 = VAR_2 . changes ( ) . query ( STRING_2 ) . get ( ) ; org.junit.Assert . METHOD_3 ( VAR_1 . isEmpty ( ) ) ; } } ; ) ) ( isEmpty . VAR_1 ( METHOD_3 . org.junit.Assert ; ) ( get . ) STRING_2 ( query . ) ( changes . VAR_2 = VAR_1 ; ) ) ( size . VAR_1 , 1 ( org.junit.Assert.assertEquals ; ) ( get . ) STRING_1 ( query . ) ( changes . VAR_2 = VAR_1 > ChangeInfo . TYPE_1 < java.util.List ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , com.google.gerrit.reviewdb.client.PatchSet ps , TYPE_2 < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { ps . METHOD_1 ( VAR_1 ) ; update . METHOD_1 ( VAR_1 ) ; db . patchSets ( ) . update ( java.util.Collections.singleton ( ps ) ) ; } } ; ) ) ps ( java.util.Collections.singleton ( update . ) ( patchSets . db ; ) VAR_1 ( METHOD_1 . update ; ) VAR_1 ( METHOD_1 . ps { com.google.gwtorm.server.OrmException throws ) VAR_1 > java.lang.String < TYPE_2 , ps com.google.gerrit.reviewdb.client.PatchSet , update TYPE_1 , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( cd . METHOD_3 ( ) . getRevision ( ) . get ( ) ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( cd . change ( ) . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk rw = TYPE_1 . METHOD_5 ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ; return ( commit . METHOD_6 ( ) ) > 1 ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( e ) ; } } } } ; ) e ( TYPE_2 new throw { ) e java.io.IOException ( catch } ; 1 > ) ) ( METHOD_6 . commit ( return ; ) id ( parseCommit . rw = commit org.eclipse.jgit.revwalk.RevCommit { ) ) repo ( METHOD_5 . TYPE_1 = rw org.eclipse.jgit.revwalk.RevWalk ; ) ) ( getProject . ) ( change . cd ( METHOD_4 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try ; ) ) ( get . ) ( getRevision . ) ( METHOD_3 . cd ( METHOD_2 . org.eclipse.jgit.lib.ObjectId = id org.eclipse.jgit.lib.ObjectId { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData ( METHOD_1 boolean public 
private TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String name , final java.lang.String value ) throws TYPE_3 { final TYPE_4 VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 == null ) { throw TYPE_5 . error ( ( ( ( STRING_1 + name ) + STRING_2 ) + value ) ) ; } return VAR_1 . create ( this , value ) ; } } ; ) value , this ( create . VAR_1 return } ; ) ) value + ) STRING_2 + ) name + STRING_1 ( ( ( ( error . TYPE_5 throw { ) null == VAR_1 ( if ; ) name ( get . VAR_2 = VAR_1 TYPE_4 final { TYPE_3 throws ) value java.lang.String final , name java.lang.String final ( METHOD_1 > TYPE_2 < TYPE_1 private 
protected void METHOD_1 ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = VAR_2 . create ( db , TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ) psId , ) ( getChangeId . VAR_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id new , VAR_1 , db ( METHOD_4 . VAR_5 = VAR_4 PatchSetApproval . com.google.gerrit.reviewdb.client ; ) ) ( change . ) ) changeId ( METHOD_3 . ) ( get . VAR_3 ( METHOD_2 . TYPE_2 , db ( create . VAR_2 = VAR_1 TYPE_1 { com.google.gwtorm.server.OrmException throws ) psId int , changeId java.lang.String ( METHOD_1 void protected 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( commit . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; if ( VAR_2 ) { METHOD_6 ( ) ; } else { java.lang.String VAR_3 = TYPE_1 . METHOD_7 ( ) ; if ( ( VAR_3 ! = null ) & & ( VAR_3 . METHOD_8 ( STRING_1 ) ) ) { METHOD_9 ( VAR_3 . METHOD_10 ( INT_1 ) ) ; } } METHOD_11 ( ) ; } } ; ) ( METHOD_11 } } ; ) ) INT_1 ( METHOD_10 . VAR_3 ( METHOD_9 { ) ) ) STRING_1 ( METHOD_8 . VAR_3 ( & & ) null = ! VAR_3 ( ( if ; ) ( METHOD_7 . TYPE_1 = VAR_3 java.lang.String { else } ; ) ( METHOD_6 { ) VAR_2 ( if ; ) ) ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . commit ( METHOD_2 . VAR_1 ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ; try { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } } } ; false return ; ) e , msg ( error . VAR_1 ; ) ) ( METHOD_5 . ) ( getProject , ) ( name . commit , STRING_1 ( java.lang.String.format = msg java.lang.String { ) e java.io.IOException ( catch } } ; ) ( close . repo { finally } ; ) ) ( values . ) ( METHOD_4 . repo , commit , rw , db , repo ( METHOD_3 return { try ; ) ( METHOD_2 = repo org.eclipse.jgit.lib.Repository { try { ) commit org.eclipse.jgit.revwalk.RevCommit , rw org.eclipse.jgit.revwalk.RevWalk , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } } ; cd return ; ) ) currentPatchSetId , id ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( com.google.gerrit.reviewdb.client.PatchSet new = VAR_1 ; ) id , null , null , null , null , null , null , null , null , null , null , null , null , null , null ( com.google.gerrit.server.query.change.ChangeData new = cd com.google.gerrit.server.query.change.ChangeData { ) currentPatchSetId int , id Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 com.google.gerrit.server.query.change.ChangeData static public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( server , user ) ; TYPE_2 VAR_2 = new TYPE_2 ( server , user ) ; TYPE_3 . METHOD_2 ( user ) ; VAR_2 . METHOD_3 ( ) ; METHOD_4 ( TYPE_3 . METHOD_5 ( ( ( ( VAR_2 . METHOD_6 ( ) ) + STRING_1 ) + ( project . get ( ) ) ) ) ) ; VAR_2 . close ( ) ; VAR_3 = VAR_4 . METHOD_7 ( ) ; VAR_5 = new TYPE_1 ( server , VAR_3 ) ; } } ; ) VAR_3 , server ( TYPE_1 new = VAR_5 ; ) ( METHOD_7 . VAR_4 = VAR_3 ; ) ( close . VAR_2 ; ) ) ) ) ) ( get . project ( + ) STRING_1 + ) ) ( METHOD_6 . VAR_2 ( ( ( ( METHOD_5 . TYPE_3 ( METHOD_4 ; ) ( METHOD_3 . VAR_2 ; ) user ( METHOD_2 . TYPE_3 ; ) user , server ( TYPE_2 new = VAR_2 TYPE_2 ; ) user , server ( TYPE_1 new = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( req , res , VAR_2 ) ; METHOD_4 ( req , res ) ; TYPE_3 out = res . METHOD_5 ( ) ; out . METHOD_6 ( message ) ; out . close ( ) ; } } ; ) ( close . out ; ) message ( METHOD_6 . out ; ) ( METHOD_5 . res = out TYPE_3 ; ) res , req ( METHOD_4 ; ) VAR_2 , res , req ( METHOD_3 ; ) VAR_1 ( METHOD_2 . res { java.io.IOException throws ) message java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { boolean s = VAR_1 . METHOD_2 ( ) ; view . METHOD_4 ( VAR_2 ) . METHOD_5 ( STRING_1 , s ) ; view . METHOD_4 ( VAR_3 ) . METHOD_5 ( STRING_1 , s ) ; } } ) ; } } ; ) } } ; ) s , STRING_1 ( METHOD_5 . ) VAR_3 ( METHOD_4 . view ; ) s , STRING_1 ( METHOD_5 . ) VAR_2 ( METHOD_4 . view ; ) ( METHOD_2 . VAR_1 = s boolean { ) ( run void public { ) ( TYPE_3 new ( METHOD_3 . view ; ) ) ( getValue . e ( METHOD_2 . VAR_1 { ) e > TYPE_2 < TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; final TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ; db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) ; VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ; } } ; ) ( > TYPE_3 < java.util.ArrayList new = VAR_4 ; ) class VAR_3 , ) p ( TYPE_4 new ( > TYPE_3 < TYPE_2 new = db ; ) ) ) ++ ) VAR_2 ( ( + STRING_3 ( , STRING_2 ( METHOD_2 . p ; ) ) ( getName . class VAR_1 , STRING_1 ( METHOD_2 . p ; ) ( TYPE_1 new = p TYPE_1 final ; ) ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 account ) throws TYPE_3 , TYPE_4 { try { return VAR_1 . METHOD_2 ( ) . apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_5 | java.io.IOException e ) { throw new TYPE_4 ( e ) ; } } } } ; ) e ( TYPE_4 new throw { ) e java.io.IOException | TYPE_5 | com.google.gwtorm.server.OrmException ( catch } ; ) account ( apply . ) ( METHOD_2 . VAR_1 return { try { TYPE_4 , TYPE_3 throws ) account TYPE_2 ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map public 
public void METHOD_1 ( TYPE_1 event ) { for ( TYPE_2 p : VAR_1 . METHOD_2 ( ) ) { TYPE_3 VAR_2 = new TYPE_3 ( p . METHOD_3 ( ) , p . getKey ( ) , 0 , null ) ; TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . toString ( ) , p . METHOD_3 ( ) , null ) ; } } } } ; ) null , ) ( METHOD_3 . p , ) ( toString . ) ( METHOD_5 . VAR_2 ( METHOD_4 . TYPE_4 ; ) null , 0 , ) ( getKey . p , ) ( METHOD_3 . p ( TYPE_3 new = VAR_2 TYPE_3 { ) ) ( METHOD_2 . VAR_1 : p TYPE_2 ( for { ) event TYPE_1 ( METHOD_1 void public 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( repo . METHOD_2 ( ) ) , new TYPE_8 ( ) ) ; } } ; ) ) ( TYPE_8 new , ) ) ( METHOD_2 . repo ( TYPE_7 new , ) ( TYPE_6 new ( TYPE_5 new = servlet ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 r = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) ; r . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . r ; ) ) ( METHOD_5 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ) ) ( METHOD_4 . branch ( + ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( ( delete . VAR_1 = r TYPE_1 ; ) ( METHOD_3 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( name ( STRING_1 ) ) . getChangeId ( ) ; java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ; } } ; ) 2 ( METHOD_5 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) STRING_3 ( METHOD_4 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) STRING_2 ( METHOD_4 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) changeId ( METHOD_3 = VAR_1 > TYPE_1 , java.lang.String < java.util.Map ; ) ( getChangeId . ) ) STRING_1 ( name ( METHOD_2 = changeId java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 info = METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 class ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; VAR_4 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( info . id ) . get ( true ) ; } } ; ) true ( get . ) id . info ( METHOD_5 . ) ) ( get . project ( name . ) ( projects . VAR_4 ; ) STRING_2 ( METHOD_4 . VAR_2 ; ) class VAR_3 ( METHOD_3 . VAR_2 ; ) STRING_1 , VAR_1 ( METHOD_2 = info TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) ! = null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) ! = null ) { VAR_1 = VAR_2 . METHOD_3 ( change , user ) ; } else { VAR_1 = VAR_2 . METHOD_3 ( VAR_3 , user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_4 ( catch } } ; ) user , VAR_3 ( METHOD_3 . VAR_2 = VAR_1 { else } ; ) user , change ( METHOD_3 . VAR_2 = VAR_1 { ) null = ! ) change ( ( if { try } ; ) ) ) ) ( METHOD_2 . VAR_1 ( + STRING_1 ( ( TYPE_3 new throw { ) null = ! ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) user TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String [ ] VAR_5 ) { this . VAR_6 = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) ; this . VAR_2 = VAR_2 ; this . VAR_5 = VAR_5 ; } } ; VAR_5 = VAR_5 . this ; VAR_2 = VAR_2 . this ; ) ( METHOD_3 . ) name ( METHOD_2 . TYPE_1 = VAR_6 . this { ) VAR_5 ] [ java.lang.String , VAR_4 java.lang.String , VAR_3 java.lang.String , name java.lang.String , VAR_2 int , VAR_1 int ( METHOD_1 void public 
protected void METHOD_1 ( final int row , final boolean VAR_1 ) { super . METHOD_1 ( row , VAR_1 ) ; if ( ( ! ( VAR_2 ) ) || ( STRING_1 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) { VAR_3 . METHOD_3 ( METHOD_4 ( row ) . getName ( ) ) ; } } } } ; ) ) ( getName . ) row ( METHOD_4 ( METHOD_3 . VAR_3 { ) ) ) ) ( METHOD_2 . VAR_3 ( equals . STRING_1 ( || ) ) VAR_2 ( ! ( ( if ; ) VAR_1 , row ( METHOD_1 . super { ) VAR_1 boolean final , row int final ( METHOD_1 void protected 
public boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; } return false ; } } ; false return } ; ) ) ( METHOD_8 . ) ( METHOD_7 . ) ( METHOD_6 ( || ) ) ) ( METHOD_3 . ) ( METHOD_5 ( || ) ) ) ( METHOD_3 . ) ( METHOD_4 ( || ) ) ( METHOD_3 ( ( ( return { ) ) ( METHOD_2 . ) ( getStatus . ) ( getChange ( if { ) ( METHOD_1 boolean public 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id ! = null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 = null ; } } } } ; null = VAR_1 { finally } ; ) ( METHOD_3 ; null : ) id ( parseCommit . ) VAR_1 ( org.eclipse.jgit.revwalk.RevWalk new ? ) null = ! id ( = revision { try ; ) ( METHOD_2 . walk = VAR_1 . this { TYPE_1 , java.io.IOException throws ) id org.eclipse.jgit.lib.ObjectId , walk org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 void public 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try { org.eclipse.jgit.lib.Repository repo = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; try { if ( VAR_2 ! = null ) { TYPE_3 u = repo . METHOD_3 ( VAR_3 ) ; u . METHOD_4 ( VAR_2 ) ; } } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { VAR_4 . error ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_2 ) , e ) ; } } } } ; ) e , ) VAR_2 , ) ( METHOD_2 . VAR_1 , STRING_1 ( java.lang.String.format ( error . VAR_4 { ) e java.io.IOException ( catch } } ; ) ( close . repo { finally } } ; ) VAR_2 ( METHOD_4 . u ; ) VAR_3 ( METHOD_3 . repo = u TYPE_3 { ) null = ! VAR_2 ( if { try ; ) ) ( METHOD_2 . VAR_1 ( TYPE_2 new = repo org.eclipse.jgit.lib.Repository { try { ) VAR_2 java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void static private 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = METHOD_2 ( VAR_1 ) ; final TYPE_3 VAR_4 = TYPE_4 . METHOD_3 ( VAR_2 ) ; assert VAR_4 ! = null ; final TYPE_3 VAR_5 = TYPE_5 . METHOD_4 ( VAR_3 ) ; TYPE_5 . METHOD_5 ( VAR_5 , VAR_3 ) ; TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 ) ; TYPE_5 . METHOD_7 ( VAR_5 , VAR_4 ) ; } } ; ) VAR_4 , VAR_5 ( METHOD_7 . TYPE_5 ; ) VAR_4 , VAR_1 ( METHOD_6 . TYPE_4 ; ) VAR_3 , VAR_5 ( METHOD_5 . TYPE_5 ; ) VAR_3 ( METHOD_4 . TYPE_5 = VAR_5 TYPE_3 final ; null = ! VAR_4 assert ; ) VAR_2 ( METHOD_3 . TYPE_4 = VAR_4 TYPE_3 final ; ) VAR_1 ( METHOD_2 = VAR_3 TYPE_3 final { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 void public 
public java.lang.String METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) ; } else { return TYPE_1 . METHOD_2 ( cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) , VAR_1 ) ; } } } } ; ) VAR_1 , ) name , VAR_3 , VAR_2 ( METHOD_1 . cfg ( METHOD_2 . TYPE_1 return { else } ; ) name , VAR_3 , VAR_2 ( METHOD_1 . cfg return { ) null == VAR_1 ( if { ) VAR_1 java.lang.String , name java.lang.String ( METHOD_1 java.lang.String public 
public void METHOD_1 ( TYPE_1 . Key VAR_1 , TYPE_2 VAR_2 , int VAR_3 , TYPE_3 VAR_4 ) { VAR_5 = VAR_1 ; VAR_6 = VAR_2 ; VAR_7 = METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_8 . METHOD_3 ( ) ; VAR_9 = METHOD_4 ( ) ; VAR_8 . add ( VAR_9 ) ; VAR_8 . add ( METHOD_5 ( ) ) ; VAR_10 . METHOD_3 ( ) ; VAR_11 = METHOD_4 ( ) ; VAR_10 . add ( VAR_11 ) ; VAR_10 . add ( METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 ( add . VAR_10 ; ) VAR_11 ( add . VAR_10 ; ) ( METHOD_4 = VAR_11 ; ) ( METHOD_3 . VAR_10 ; ) ) ( METHOD_5 ( add . VAR_8 ; ) VAR_9 ( add . VAR_8 ; ) ( METHOD_4 = VAR_9 ; ) ( METHOD_3 . VAR_8 ; ) VAR_4 , VAR_3 ( METHOD_2 = VAR_7 ; VAR_2 = VAR_6 ; VAR_1 = VAR_5 { ) VAR_4 TYPE_3 , VAR_3 int , VAR_2 TYPE_2 , VAR_1 Key . TYPE_1 ( METHOD_1 void public 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 account , java.util.List < java.lang.String > add , java.util.List < java.lang.String > delete ) throws TYPE_3 , TYPE_4 { TYPE_5 in = new TYPE_5 ( ) ; in . add = add ; in . delete = delete ; try { return VAR_1 . apply ( account , in ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_7 e ) { throw new TYPE_4 ( e ) ; } } } } ; ) e ( TYPE_4 new throw { ) e TYPE_7 | java.io.IOException | com.google.gwtorm.server.OrmException | TYPE_6 ( catch } ; ) in , account ( apply . VAR_1 return { try ; delete = delete . in ; add = add . in ; ) ( TYPE_5 new = in TYPE_5 { TYPE_4 , TYPE_3 throws ) delete > java.lang.String < java.util.List , add > java.lang.String < java.util.List , account TYPE_2 ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( repo . file ( STRING_2 , VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( METHOD_4 , VAR_3 ( org.junit.Assert.assertEquals ; ) ) VAR_1 ( METHOD_4 , VAR_3 ( org.junit.Assert.assertEquals ; ) ) VAR_1 , STRING_2 ( file . repo ( METHOD_3 . repo = VAR_2 TYPE_2 ; ) STRING_1 ( METHOD_2 . repo = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected TYPE_1 < ? > . VAR_1 METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; TYPE_1 < ? > . VAR_1 b = VAR_3 . METHOD_5 ( STRING_1 ) ; TYPE_2 < java.lang.String > id = TYPE_3 . getChangeId ( VAR_3 , VAR_2 ) ; if ( id . METHOD_6 ( ) ) { b . METHOD_7 ( id . get ( ) . METHOD_8 ( 1 ) ) ; } else { b . METHOD_7 ( ) ; } return b ; } } ; b return } ; ) ( METHOD_7 . b { else } ; ) ) 1 ( METHOD_8 . ) ( get . id ( METHOD_7 . b { ) ) ( METHOD_6 . id ( if ; ) VAR_2 , VAR_3 ( getChangeId . TYPE_3 = id > java.lang.String < TYPE_2 ; ) STRING_1 ( METHOD_5 . VAR_3 = b VAR_1 . > ? < TYPE_1 ; ) ( METHOD_4 . ) STRING_1 ( METHOD_3 . ) ( METHOD_2 . VAR_3 = VAR_2 org.eclipse.jgit.lib.ObjectId { java.lang.Exception throws ) ( METHOD_1 VAR_1 . > ? < TYPE_1 protected 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key , java.lang.String [ ] values ) { if ( ( values . length ) > 0 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; for ( java.lang.String VAR_3 : values ) { VAR_2 . add ( new TYPE_3 ( VAR_3 ) ) ; } VAR_1 . add ( key , VAR_2 ) ; } } } } ; ) VAR_2 , key ( add . VAR_1 } ; ) ) VAR_3 ( TYPE_3 new ( add . VAR_2 { ) values : VAR_3 java.lang.String ( for ; ) ( TYPE_2 new = VAR_2 TYPE_2 { ) 0 > ) length . values ( ( if { ) values ] [ java.lang.String , key java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
public boolean METHOD_1 ( ) { return ( ( ( ( ( user ) instanceof TYPE_1 ) || ( user . METHOD_2 ( group . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) || ( user . METHOD_5 ( ) . METHOD_6 ( ) ) ) || ( VAR_1 . METHOD_7 ( group . METHOD_3 ( ) ) ) ; } } ; ) ) ) ( METHOD_3 . group ( METHOD_7 . VAR_1 ( || ) ) ) ( METHOD_6 . ) ( METHOD_5 . user ( || ) ) ) ( METHOD_4 ( || ) ) ) ) ( METHOD_3 . group ( METHOD_2 . user ( || ) TYPE_1 instanceof ) user ( ( ( ( ( return { ) ( METHOD_1 boolean public 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 . METHOD_2 ( ) ) { return ; } if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ) ! = null ) { if ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) || ( ! ( VAR_3 . get ( ) . METHOD_6 ( ) ) ) ) { VAR_1 . METHOD_7 ( new TYPE_2 ( ) ) ; return ; } } } } } } ; return ; ) ) ( TYPE_2 new ( METHOD_7 . VAR_1 { ) ) ) ) ( METHOD_6 . ) ( get . VAR_3 ( ! ( || ) ) ) ( METHOD_5 . VAR_1 ( ! ( ( if { ) null = ! ) ) class VAR_2 ( METHOD_4 . ) ( METHOD_3 . VAR_1 ( ( if } ; return { ) ) ( METHOD_2 . VAR_1 ( if ; ) VAR_1 ( METHOD_1 . super { ) VAR_1 TYPE_1 final ( METHOD_1 void protected 
private static java.lang.String url ( com.google.gerrit.reviewdb.client.PatchSet.Id ps , TYPE_1 info ) { return TYPE_2 . METHOD_1 ( null , ps , info . path ( ) , ( ( info . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : VAR_3 ) , info . line ( ) ) ; } } ; ) ) ( line . info , ) VAR_3 : VAR_2 ? ) VAR_1 ( == ) ) ( METHOD_2 . info ( ( , ) ( path . info , ps , null ( METHOD_1 . TYPE_2 return { ) info TYPE_1 , ps com.google.gerrit.reviewdb.client.PatchSet.Id ( url java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ; TYPE_1 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) , VAR_2 ) ; update . commit ( ) ; TYPE_2 notes = METHOD_6 ( c ) ; TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id , TYPE_4 > VAR_3 = notes . METHOD_7 ( ) ; org.junit.Assert.assertEquals ( 0 , VAR_3 . METHOD_8 ( ) . size ( ) ) ; } } ; ) ) ( size . ) ( METHOD_8 . VAR_3 , 0 ( org.junit.Assert.assertEquals ; ) ( METHOD_7 . notes = VAR_3 > TYPE_4 , com.google.gerrit.reviewdb.client.PatchSet.Id < TYPE_3 ; ) c ( METHOD_6 = notes TYPE_2 ; ) ( commit . update ; ) VAR_2 , ) ( getId . ) ( METHOD_5 . VAR_1 ( METHOD_4 . update ; ) VAR_1 , c ( METHOD_3 = update TYPE_1 ; ) ( METHOD_2 = c com.google.gerrit.reviewdb.client.Change { java.lang.Exception throws ) ( METHOD_1 void public 
private boolean METHOD_1 ( ) { java.lang.String msg = VAR_1 . getValue ( ) . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { return ( msg . length ( ) ) > 0 ; } return msg . equals ( ( ( VAR_2 . message ( ) ) ! = null ? VAR_2 . message ( ) . METHOD_2 ( ) : STRING_1 ) ) ; } } ; ) ) STRING_1 : ) ( METHOD_2 . ) ( message . VAR_2 ? null = ! ) ) ( message . VAR_2 ( ( ( equals . msg return } ; 0 > ) ) ( length . msg ( return { ) ) ( METHOD_3 ( if ; ) ( METHOD_2 . ) ( getValue . VAR_1 = msg java.lang.String { ) ( METHOD_1 boolean private 
private java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > result = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ; for ( java.lang.String email : VAR_1 ) { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( email ) ; result . METHOD_3 ( VAR_2 ) ; } return result ; } } ; result return } ; ) VAR_2 ( METHOD_3 . result ; ) email ( METHOD_2 . VAR_3 = VAR_2 > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set { ) VAR_1 : email java.lang.String ( for ; ) ( > com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 new = result > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set { com.google.gwtorm.server.OrmException throws ) VAR_1 > java.lang.String < java.util.Set ( METHOD_1 > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set private 
private static void METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { java.lang.String token = TYPE_1 . METHOD_2 ( ps ) ; new TYPE_2 ( token ) { public void onSuccess ( ) { TYPE_3 . display ( this . token , METHOD_3 ( ) ) ; } private TYPE_4 METHOD_3 ( ) { return new TYPE_5 ( ps ) ; } } . onSuccess ( ) ; } } ; ) ( onSuccess . } } ; ) ps ( TYPE_5 new return { ) ( METHOD_3 TYPE_4 private } ; ) ) ( METHOD_3 , token . this ( display . TYPE_3 { ) ( onSuccess void public { ) token ( TYPE_2 new ; ) ps ( METHOD_2 . TYPE_1 = token java.lang.String { ) ps com.google.gerrit.reviewdb.client.PatchSet.Id final ( METHOD_1 void static private 
public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 cm = TYPE_3 . METHOD_2 ( VAR_1 ) ; final TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) ; VAR_4 = new TYPE_4 ( ) { protected void METHOD_3 ( ) { install ( VAR_5 ) ; install ( cm ) ; install ( VAR_2 ) ; } } ; } } ; } } ; ) VAR_2 ( install ; ) cm ( install ; ) VAR_5 ( install { ) ( METHOD_3 void protected { ) ( TYPE_4 new = VAR_4 ; ) VAR_3 ( METHOD_2 . TYPE_3 = VAR_2 TYPE_2 final ; ) VAR_1 ( METHOD_2 . TYPE_3 = cm TYPE_2 final { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String n = VAR_1 . getName ( ) ; return ( ( ( n . METHOD_2 ( STRING_1 ) ) || ( n . METHOD_2 ( STRING_2 ) ) ) & & ( VAR_1 . METHOD_3 ( ) ) ) & & ( ( n . METHOD_4 ( STRING_3 ) ) > = 0 ) ; } } ; ) 0 = > ) ) STRING_3 ( METHOD_4 . n ( ( & & ) ) ) ( METHOD_3 . VAR_1 ( & & ) ) ) STRING_2 ( METHOD_2 . n ( || ) ) STRING_1 ( METHOD_2 . n ( ( ( return ; ) ( getName . VAR_1 = n java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 boolean public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account a ) { TYPE_1 VAR_1 = new TYPE_1 ( a . getId ( ) . get ( ) ) ; VAR_1 . email = a . METHOD_2 ( ) ; VAR_1 . name = a . METHOD_3 ( ) ; VAR_2 = a . METHOD_4 ( ) ; return VAR_1 ; } } ; VAR_1 return ; ) ( METHOD_4 . a = VAR_2 ; ) ( METHOD_3 . a = name . VAR_1 ; ) ( METHOD_2 . a = email . VAR_1 ; ) ) ( get . ) ( getId . a ( TYPE_1 new = VAR_1 TYPE_1 { ) a com.google.gerrit.reviewdb.client.Account ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { VAR_1 . append ( ( STRING_1 + line ) ) ; try { final java.lang.String VAR_4 = VAR_2 . METHOD_2 ( VAR_3 , line ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( VAR_4 ) ; } catch ( TYPE_2 e ) { VAR_1 . append ( STRING_3 ) ; } VAR_1 . append ( STRING_4 ) ; } } ; ) STRING_4 ( append . VAR_1 } ; ) STRING_3 ( append . VAR_1 { ) e TYPE_2 ( catch } ; ) VAR_4 ( append . VAR_1 ; ) STRING_2 ( append . VAR_1 ; ) line , VAR_3 ( METHOD_2 . VAR_2 = VAR_4 java.lang.String final { try ; ) ) line + STRING_1 ( ( append . VAR_1 { ) line int , VAR_3 short , VAR_2 TYPE_1 , VAR_1 java.lang.StringBuilder ( METHOD_1 void private 
private boolean METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . equals ( VAR_2 . METHOD_2 ( ) ) ; return ! ( ( VAR_1 || ( ( ( VAR_3 ) == ( VAR_4 ) ) & & ( 0 > = ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) ) ) || ( ( ( VAR_3 ) == ( VAR_5 ) ) & & ( 0 > = ( VAR_2 . METHOD_4 ( ) . size ( ) ) ) ) ) ; } } ; ) ) ) ) ) ( size . ) ( METHOD_4 . VAR_2 ( = > 0 ( & & ) ) VAR_5 ( == ) VAR_3 ( ( ( || ) ) ) ) ) ( size . ) ( METHOD_3 . VAR_2 ( = > 0 ( & & ) ) VAR_4 ( == ) VAR_3 ( ( ( || VAR_1 ( ( ! return ; ) ) ( METHOD_2 . VAR_2 ( equals . TYPE_1 = VAR_1 boolean { ) ( METHOD_1 boolean private 
public boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; } return METHOD_4 ( ) . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . ) ( METHOD_4 return } ; ) ) ( METHOD_1 . ) ( METHOD_4 ( || ) ) ) ( METHOD_8 . ) ( METHOD_7 . ) ( METHOD_6 ( || ) ) ) ( METHOD_3 . ) ( METHOD_5 ( || ) ) ) ( METHOD_3 . ) ( METHOD_4 ( || ) ) ( METHOD_3 ( ( ( ( return { ) ) ( METHOD_2 . ) ( getStatus . ) ( getChange ( if { ) ( METHOD_1 boolean public 
private boolean METHOD_1 ( TYPE_1 . NameKey VAR_1 , TYPE_2 user ) { final TYPE_3 VAR_2 = VAR_3 . get ( VAR_1 . getParentKey ( ) ) ; if ( VAR_2 == null ) { return false ; } final TYPE_4 VAR_4 = VAR_2 . METHOD_2 ( user ) ; return VAR_4 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) VAR_1 ( METHOD_3 . VAR_4 return ; ) user ( METHOD_2 . VAR_2 = VAR_4 TYPE_4 final } ; false return { ) null == VAR_2 ( if ; ) ) ( getParentKey . VAR_1 ( get . VAR_3 = VAR_2 TYPE_3 final { ) user TYPE_2 , VAR_1 NameKey . TYPE_1 ( METHOD_1 boolean private 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) & & ( ! ( METHOD_5 ( db ) ) ) ; } } ; ) ) ) db ( METHOD_5 ( ! ( & & ) ) ) ( METHOD_1 . ) ( METHOD_3 ( || ) ) ) ) ( METHOD_2 ( METHOD_4 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( return { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . email ( ) ) ! = null ) { return VAR_1 . email ( ) ; } else if ( ( VAR_1 . name ( ) ) ! = null ) { return VAR_1 . name ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) ! = 0 ) { return STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; } else { return STRING_1 ; } } } } ; STRING_1 return { else } ; ) ) ( METHOD_2 . VAR_1 ( + STRING_1 return { ) 0 = ! ) ) ( METHOD_2 . VAR_1 ( ( if else } ; ) ( name . VAR_1 return { ) null = ! ) ) ( name . VAR_1 ( ( if else } ; ) ( email . VAR_1 return { ) null = ! ) ) ( email . VAR_1 ( ( if { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . name ( VAR_1 ) . create ( ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } } ; ) STRING_2 , VAR_1 ( METHOD_4 ; ) p , ) ( getProject . VAR_3 ( METHOD_3 . TYPE_3 ; ) ( METHOD_2 . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ) VAR_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( get . VAR_4 = VAR_3 TYPE_2 ; ) VAR_1 ( isEqualTo . ) name . p ( com.google.common.truth.Truth.assertThat ; ) ( get . ) ( create . ) VAR_1 ( name . ) ( projects . VAR_2 = p TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; VAR_2 . METHOD_4 ( rsrc ) ; VAR_2 . apply ( account , new TYPE_4 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ( TYPE_4 new , account ( apply . VAR_2 ; ) rsrc ( METHOD_4 . VAR_2 ; ) ) id ( METHOD_3 . TYPE_3 , VAR_1 ( METHOD_2 . changes = rsrc TYPE_2 { try { TYPE_1 throws ) id java.lang.String ( METHOD_1 void public 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { return rw . parseCommit ( repo . METHOD_2 ( name ) . METHOD_3 ( ) ) ; } finally { rw . METHOD_4 ( ) ; } } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } } ; ) ( METHOD_4 . rw { finally } ; ) ) ( METHOD_3 . ) name ( METHOD_2 . repo ( parseCommit . rw return { try ; ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk { try { java.io.IOException throws ) name java.lang.String , repo org.eclipse.jgit.lib.Repository ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit private 
public java.lang.String get ( ) { java.lang.String VAR_1 = super . get ( ) ; if ( VAR_1 ! = null ) { return VAR_1 ; } if ( ( VAR_2 ) ! = null ) { final TYPE_1 req ; try { req = VAR_2 . get ( ) ; } catch ( TYPE_2 VAR_3 ) { if ( ( VAR_3 . METHOD_1 ( ) ) instanceof TYPE_3 ) { return null ; } else { throw VAR_3 ; } } return TYPE_4 . METHOD_2 ( req ) ; } return null ; } } ; null return } ; ) req ( METHOD_2 . TYPE_4 return } } ; VAR_3 throw { else } ; null return { ) TYPE_3 instanceof ) ) ( METHOD_1 . VAR_3 ( ( if { ) VAR_3 TYPE_2 ( catch } ; ) ( get . VAR_2 = req { try ; req TYPE_1 final { ) null = ! ) VAR_2 ( ( if } ; VAR_1 return { ) null = ! VAR_1 ( if ; ) ( get . super = VAR_1 java.lang.String { ) ( get java.lang.String public 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_3 < ? > > VAR_2 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { VAR_2 . add ( METHOD_1 ( id ) ) ; } return TYPE_4 . METHOD_2 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_2 . TYPE_4 return } ; ) ) id ( METHOD_1 ( add . VAR_2 { ) VAR_1 : id Id . com.google.gerrit.reviewdb.client.Change ( for ; ) ) ( size . VAR_1 ( java.util.ArrayList new = VAR_2 > > ? < TYPE_3 < java.util.List { ) VAR_1 > Id . com.google.gerrit.reviewdb.client.Change < TYPE_2 ( METHOD_1 > java.io.IOException , ? < TYPE_1 public 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , java.io.IOException { try { VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e . getMessage ( ) ) ; } return TYPE_1 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . TYPE_1 return } ; ) ) ( getMessage . e ( TYPE_5 new throw { ) e java.io.IOException | TYPE_7 ( catch } ; ) ) ) ( METHOD_5 . VAR_2 ( METHOD_4 . TYPE_6 , ) ( METHOD_3 . rsrc , ) ( METHOD_2 . rsrc ( METHOD_1 . VAR_1 { try { java.io.IOException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > ? < TYPE_1 public 
protected TYPE_1 . Result METHOD_1 ( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String topic ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( git , ( STRING_1 + topic ) ) ; } } ; ) ) topic + STRING_1 ( , git ( to . VAR_4 return ; ) VAR_3 , VAR_2 , VAR_1 , ) ( METHOD_2 . admin , db ( create . VAR_5 = VAR_4 TYPE_4 { TYPE_3 , java.io.IOException throws ) topic java.lang.String , VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String , git TYPE_2 ( METHOD_1 Result . TYPE_1 protected 
static final TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { return new TYPE_1 ( TYPE_4 . METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( ) , VAR_1 . get ( ) . METHOD_4 ( ) ) , ( ( int ) ( ( VAR_1 . get ( ) . METHOD_4 ( ) ) * ( VAR_1 . get ( ) . METHOD_3 ( ) ) ) ) ) ; } } ; ) ) ) ) ) ( METHOD_3 . ) ( get . VAR_1 ( * ) ) ( METHOD_4 . ) ( get . VAR_1 ( ( ) int ( ( , ) ) ( METHOD_4 . ) ( get . VAR_1 , ) ( METHOD_3 . ) ( get . VAR_1 ( METHOD_2 . TYPE_4 ( TYPE_1 new return { ) VAR_1 > TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 final static 
public void name ( java.lang.String name ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = name ; try { VAR_1 . apply ( rsrc , in ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( name , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) e , name ( TYPE_4 new throw { ) e TYPE_3 ( catch } ; ) in , rsrc ( apply . VAR_1 { try ; name = name . in ; ) ( TYPE_2 new = in TYPE_2 { TYPE_1 throws ) name java.lang.String ( name void public 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; if ( ! ( VAR_3 ) ) { modules.add ( new TYPE_3 ( ) ) ; } modules.add ( new TYPE_4 ( VAR_4 , VAR_1 . METHOD_2 ( VAR_5 class ) , VAR_1 . METHOD_2 ( VAR_6 class ) ) ) ; if ( ! ( VAR_4 ) ) { modules.add ( new TYPE_5 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } } ; ) modules ( METHOD_3 . VAR_1 return } ; ) ) ( TYPE_5 new ( modules.add { ) ) VAR_4 ( ! ( if ; ) ) ) class VAR_6 ( METHOD_2 . VAR_1 , ) class VAR_5 ( METHOD_2 . VAR_1 , VAR_4 ( TYPE_4 new ( modules.add } ; ) ) ( TYPE_3 new ( modules.add { ) ) VAR_3 ( ! ( if ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( modules.add ; ) ( > < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) ( METHOD_1 TYPE_1 private 
private int METHOD_1 ( TYPE_1 cm , int line , int VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { cm . METHOD_2 ( line , VAR_2 , VAR_3 . diff ( ) ) ; } return line + VAR_1 ; } } ; VAR_1 + line return } ; ) ) ( diff . VAR_3 , VAR_2 , line ( METHOD_2 . cm { ) ++ i ; VAR_1 < i ; 0 = i int ( for { ) VAR_1 int , line int , cm TYPE_1 ( METHOD_1 int private 
private java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; if ( ( VAR_4 ) == null ) { try { VAR_3 . add ( VAR_2 . METHOD_2 ( VAR_5 , VAR_6 ) ) ; } catch ( TYPE_3 e ) { VAR_3 . add ( STRING_1 ) ; } } else { VAR_3 . METHOD_3 ( METHOD_4 ( VAR_4 , VAR_2 , VAR_5 ) ) ; } return VAR_3 ; } } ; VAR_3 return } ; ) ) VAR_5 , VAR_2 , VAR_4 ( METHOD_4 ( METHOD_3 . VAR_3 { else } } ; ) STRING_1 ( add . VAR_3 { ) e TYPE_3 ( catch } ; ) ) VAR_6 , VAR_5 ( METHOD_2 . VAR_2 ( add . VAR_3 { try { ) null == ) VAR_4 ( ( if ; ) ( > < java.util.ArrayList new = VAR_3 > java.lang.String < java.util.List { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 > java.lang.String < java.util.List private 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( project , METHOD_3 ( ) , message . METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ; } } ; ) } } ; ) VAR_2 ( METHOD_8 . super ; ) true ( METHOD_9 { ) VAR_2 TYPE_6 ( METHOD_8 void public } ; ) ) ) ( METHOD_7 . result ( METHOD_6 . TYPE_5 ( display . TYPE_4 ; ) ( METHOD_5 ; true = VAR_1 { ) result ChangeInfo . TYPE_3 ( onSuccess void public { ) ( > ChangeInfo . TYPE_3 < TYPE_2 new , ) ( METHOD_4 . message , ) ( METHOD_3 , project ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
protected TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 ) ; TYPE_2 . Result result = VAR_1 . to ( STRING_1 ) ; result . METHOD_3 ( ) ; return result ; } } ; result return ; ) ( METHOD_3 . result ; ) STRING_1 ( to . VAR_1 = result Result . TYPE_2 ; ) VAR_3 , ) ( METHOD_2 . admin , db ( create . VAR_2 = VAR_1 TYPE_2 { java.lang.Exception throws ) ( METHOD_1 Result . TYPE_1 protected 
private int METHOD_1 ( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 ) { while ( i . METHOD_2 ( ) ) { final TYPE_2 c = i . METHOD_3 ( ) ; table . METHOD_4 ( row ) ; table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) ; METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) ) ; row ++ ; } return row ; } } ; row return } ; ++ row ; ) ) ) ) ( METHOD_2 . i ( ! ( , c , VAR_1 , row ( METHOD_7 ; ) VAR_2 , 0 , row ( METHOD_6 . ) ( METHOD_5 . table ; ) row ( METHOD_4 . table ; ) ( METHOD_3 . i = c TYPE_2 final { ) ) ( METHOD_2 . i ( while { ) VAR_1 int final , row int , i > TYPE_2 < TYPE_1 final ( METHOD_1 int private 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ; try { VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } finally { VAR_3 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_5 ( STRING_1 , err ) ; } } } } ; ) err , STRING_1 ( TYPE_5 new throw { ) err java.io.IOException ( catch } } ; ) ( close . VAR_3 { finally } ; ) ( METHOD_3 . VAR_3 ; ) VAR_1 ( METHOD_2 . VAR_3 { try ; ) ) VAR_2 ( TYPE_4 new ( TYPE_3 new = VAR_3 TYPE_3 { try { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . change ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } } catch ( com.google.gwtorm.server.OrmException | TYPE_1 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_1 | com.google.gwtorm.server.OrmException ( catch } } ; ) VAR_2 ( commit ; ) id ( METHOD_2 . VAR_2 { else } ; ) VAR_1 ( commit ; ) id ( METHOD_2 . VAR_1 { ) ) ( METHOD_1 . ) ( getStatus . ) ( change . cd ( if { try ; ) ( toString . ) ( getId . cd = id java.lang.String { java.io.IOException throws ) cd com.google.gerrit.server.query.change.ChangeData ( delete void public 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } } ; ) } } ; true return { ) event TYPE_2 ( METHOD_4 boolean public { ) null , null , null , null ( TYPE_1 new ( METHOD_3 . ) class VAR_7 ( bind ; ) VAR_5 ( METHOD_3 . ) class VAR_6 ( bind ; ) class VAR_6 ( METHOD_2 = VAR_5 ; ) VAR_3 ( METHOD_3 . ) class VAR_4 ( bind ; ) class VAR_4 ( METHOD_2 = VAR_3 ; ) VAR_1 ( METHOD_3 . ) class VAR_2 ( bind ; ) class VAR_2 ( METHOD_2 = VAR_1 { ) ( METHOD_1 void protected 
public static void message ( int id , java.lang.String commit , java.lang.String message , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_1 ( message ) ; TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . METHOD_3 ( input , VAR_1 ) ; } } ; ) VAR_1 , input ( METHOD_3 . ) STRING_1 , commit , id ( METHOD_2 . TYPE_4 ; ) message ( METHOD_1 . input ; ) ( create . TYPE_3 = input TYPE_3 { ) VAR_1 > TYPE_2 < TYPE_1 , message java.lang.String , commit java.lang.String , id int ( message void static public 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) { throw new TYPE_2 ( ) ; } } } } } } ; ) ( TYPE_2 new throw { ) ) ) commit , rw , ) ( get . db ( METHOD_2 . VAR_1 ( ! ( if ; ) VAR_2 ( parseCommit . rw = commit org.eclipse.jgit.revwalk.RevCommit { ) ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk ( try { java.io.IOException , TYPE_2 throws ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 TYPE_1 , repo org.eclipse.jgit.lib.Repository ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = METHOD_2 ( changeId ) ; if ( changes . isEmpty ( ) ) { throw new TYPE_2 ( changeId ) ; } return create ( db , project , changeId ) ; } } ; ) changeId , project , db ( create return } ; ) changeId ( TYPE_2 new throw { ) ) ( isEmpty . changes ( if ; ) changeId ( METHOD_2 = changes > com.google.gerrit.server.query.change.ChangeData < java.util.List { com.google.gwtorm.server.OrmException , TYPE_2 throws ) changeId Id . com.google.gerrit.reviewdb.client.Change , project com.google.gerrit.reviewdb.client.Project.NameKey , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 TYPE_1 public 
private int METHOD_1 ( final int VAR_1 ) throws TYPE_1 { int VAR_2 = VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) ; if ( VAR_2 == 0 ) { throw new TYPE_1 ( STRING_1 ) ; } return ( 0 < VAR_1 ) & & ( VAR_1 < = VAR_2 ) ? VAR_1 : VAR_2 ; } } ; VAR_2 : VAR_1 ? ) VAR_2 = < VAR_1 ( & & ) VAR_1 < 0 ( return } ; ) STRING_1 ( TYPE_1 new throw { ) 0 == VAR_2 ( if ; ) ( METHOD_4 . ) VAR_4 ( METHOD_3 . ) ( METHOD_2 . ) ( get . VAR_3 = VAR_2 int { TYPE_1 throws ) VAR_1 int final ( METHOD_1 int private 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , line , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } } ; ) VAR_3 , res , VAR_2 , VAR_1 ( METHOD_8 ; ) ) ( METHOD_7 , ) false , line , 0 , 0 , ) ( METHOD_6 . cm ( TYPE_1 new , VAR_1 ( METHOD_5 . java.util.Collections = res int ; 0 : ) ) ( METHOD_4 . ) ( METHOD_1 . cm ( METHOD_3 . cm ? ) ) ( METHOD_2 . ) ( METHOD_1 . cm ( = line int { ) ( run void public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . METHOD_3 ( STRING_1 ) ) ; METHOD_2 ( b , b . METHOD_4 ( INT_1 ) ) ; METHOD_2 ( b , b . METHOD_5 ( INT_2 ) ) ; METHOD_2 ( b , b . METHOD_6 ( ) ) ; assertEquals ( STRING_2 , b . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . b , STRING_2 ( assertEquals ; ) ) ( METHOD_6 . b , b ( METHOD_2 ; ) ) INT_2 ( METHOD_5 . b , b ( METHOD_2 ; ) ) INT_1 ( METHOD_4 . b , b ( METHOD_2 ; ) ) STRING_1 ( METHOD_3 . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final java.lang.String name = STRING_2 ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; METHOD_5 ( r ) ; assertEquals ( name , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_7 . TYPE_1 ; ) email . r , ) ( METHOD_6 . VAR_2 ( assertEquals ; ) name . r , name ( assertEquals ; ) r ( METHOD_5 ; ) user ( METHOD_4 . ) ( create = r TYPE_2 final ; ) VAR_1 ( METHOD_3 . TYPE_1 ; ) null , name ( user = user com.google.gerrit.reviewdb.client.Account.Id final ; STRING_2 = name java.lang.String final ; ) STRING_1 ( METHOD_2 { ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 ref , TYPE_3 VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { TYPE_1 b = new TYPE_1 ( ) ; b . ref = ref . getName ( ) ; if ( ( ref . METHOD_2 ( ) ) ! = null ) { b . revision = ref . METHOD_2 ( ) . name ( ) ; } b . METHOD_3 ( ( ( ! ( VAR_2 . contains ( ref . getName ( ) ) ) ) & & ( VAR_1 . METHOD_4 ( ) ) ) ) ; return b ; } } ; b return ; ) ) ) ) ( METHOD_4 . VAR_1 ( & & ) ) ) ) ( getName . ref ( contains . VAR_2 ( ! ( ( ( METHOD_3 . b } ; ) ( name . ) ( METHOD_2 . ref = revision . b { ) null = ! ) ) ( METHOD_2 . ref ( ( if ; ) ( getName . ref = ref . b ; ) ( TYPE_1 new = b TYPE_1 { ) VAR_2 > java.lang.String < java.util.Set , VAR_1 TYPE_3 , ref TYPE_2 ( METHOD_1 TYPE_1 static private 
public TYPE_1 < TYPE_2 > add ( TYPE_3 . Key < TYPE_2 > key , TYPE_4 < TYPE_2 > VAR_1 ) { TYPE_5 < TYPE_4 < TYPE_2 > > ref = new TYPE_5 < TYPE_4 < TYPE_2 > > ( VAR_1 ) ; VAR_2 . add ( ref ) ; return new TYPE_6 ( ref , key , VAR_1 ) ; } } ; ) VAR_1 , key , ref ( TYPE_6 new return ; ) ref ( add . VAR_2 ; ) VAR_1 ( > > TYPE_2 < TYPE_4 < TYPE_5 new = ref > > TYPE_2 < TYPE_4 < TYPE_5 { ) VAR_1 > TYPE_2 < TYPE_4 , key > TYPE_2 < Key . TYPE_3 ( add > TYPE_2 < TYPE_1 public 
public static void METHOD_1 ( ) { VAR_1 = null ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; for ( final TYPE_2 VAR_4 : VAR_5 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_3 . METHOD_4 ( ) ; if ( ( ( VAR_6 ) ! = null ) & & ( VAR_6 . METHOD_5 ( ) ) ) { TYPE_4 . METHOD_6 ( VAR_7 ) ; } } } } ; ) VAR_7 ( METHOD_6 . TYPE_4 { ) ) ) ( METHOD_5 . VAR_6 ( & & ) null = ! ) VAR_6 ( ( ( if ; ) ( METHOD_4 . TYPE_3 } ; ) ( METHOD_3 . VAR_4 { ) VAR_5 : VAR_4 TYPE_2 final ( for ; ) VAR_3 ( METHOD_2 . TYPE_1 ; ) VAR_2 ( METHOD_2 . TYPE_1 ; null = VAR_1 { ) ( METHOD_1 void static public 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) ! = null ) & & ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ! = null ) ) { return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; } return TYPE_1 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . TYPE_1 return } ; ) ) ) VAR_1 ( get . ) ( METHOD_2 . VAR_2 ( of . TYPE_2 ( of . TYPE_1 return { ) ) null = ! ) ) VAR_1 ( get . ) ( METHOD_2 . VAR_2 ( ( & & ) null = ! ) VAR_2 ( ( ( if { ) VAR_1 java.lang.String ( METHOD_1 > TYPE_2 < TYPE_1 public 
private static < TYPE_1 > void METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 < TYPE_1 > VAR_2 , TYPE_4 < TYPE_1 > b ) { TYPE_5 n = VAR_2 . METHOD_1 ( b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) ; if ( n ! = null ) { VAR_1 . add ( n ) ; } } } } ; ) n ( add . VAR_1 { ) null = ! n ( if ; ) ) ( get . ) ( METHOD_2 . b , ) ( getKey . b ( METHOD_1 . VAR_2 = n TYPE_5 { ) b > TYPE_1 < TYPE_4 , VAR_2 > TYPE_1 < TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 void > TYPE_1 < static private 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : this . VAR_3 = revision ; break ; default : TYPE_3 . METHOD_2 ( ( revision == null ) , STRING_1 , type ) ; this . VAR_3 = revision ; break ; } return this ; } } ; this return } ; break ; revision = VAR_3 . this ; ) type , STRING_1 , ) null == revision ( ( METHOD_2 . TYPE_3 : default ; break ; revision = VAR_3 . this : VAR_2 case : VAR_1 case { ) type ( switch { ) revision TYPE_2 ( METHOD_1 TYPE_1 public 
private static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { return ; } TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 ! = null ) { for ( TYPE_1 d : VAR_2 ) { if ( d . METHOD_5 ( ) ) { TYPE_2 . METHOD_1 ( d ) ; } else { TYPE_2 . METHOD_6 ( d ) ; } } } TYPE_2 . METHOD_6 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_6 . TYPE_2 } } } ; ) d ( METHOD_6 . TYPE_2 { else } ; ) d ( METHOD_1 . TYPE_2 { ) ) ( METHOD_5 . d ( if { ) VAR_2 : d TYPE_1 ( for { ) null = ! VAR_2 ( if ; ) ( METHOD_4 . VAR_1 = VAR_2 ] [ TYPE_1 } ; return { ) ) ) ) ( METHOD_3 . VAR_1 ( equals . ) ( METHOD_2 . VAR_1 ( ! ( if { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 void static private 
public void METHOD_1 ( TYPE_1 ctx ) throws java.io.IOException { if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_1 ( ctx ) ; return ; } ctx . METHOD_2 ( new TYPE_2 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( patchSet . getRevision ( ) . get ( ) ) , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , patchSet . getRefName ( ) ) ) ; } } ; ) ) ) ( getRefName . patchSet , ) ( METHOD_4 . org.eclipse.jgit.lib.ObjectId , ) ) ( get . ) ( getRevision . patchSet ( METHOD_3 . org.eclipse.jgit.lib.ObjectId ( ReceiveCommand . TYPE_2 new ( METHOD_2 . ctx } ; return ; ) ctx ( METHOD_1 . VAR_1 { ) null = ! ) VAR_1 ( ( if { java.io.IOException throws ) ctx TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final TYPE_1 VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_4 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_5 ( ) ) ; VAR_1 . append ( CHAR_3 ) ; } } ; ) CHAR_3 ( append . VAR_1 ; ) ) ( METHOD_5 . VAR_2 ( append . VAR_1 ; ) CHAR_2 ( append . VAR_1 ; ) ) ( METHOD_4 . VAR_2 ( append . VAR_1 ; ) CHAR_2 ( append . VAR_1 ; ) ) ( METHOD_3 . VAR_2 ( append . VAR_1 ; ) CHAR_2 ( append . VAR_1 ; ) ) ( METHOD_2 . VAR_2 ( append . VAR_1 ; ) CHAR_1 ( append . VAR_1 { ) VAR_2 TYPE_1 final , VAR_1 java.lang.StringBuilder final ( METHOD_1 void public 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return TYPE_5 . apply ( VAR_1 . get ( ) . METHOD_1 ( s ) . format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_4 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) change ( format . ) s ( METHOD_1 . ) ( get . VAR_1 ( apply . TYPE_5 return { try { TYPE_4 throws ) s > TYPE_3 < TYPE_2 ( get ChangeInfo . TYPE_1 public 
private void METHOD_1 ( final TYPE_1 m , final int VAR_1 ) { m . METHOD_2 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( VAR_2 ) ; m . METHOD_5 ( ) ; m . METHOD_6 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( STRING_1 ) ; m . METHOD_7 ( STRING_2 , INT_1 ) ; m . append ( TYPE_2 . METHOD_8 ( VAR_1 ) ) ; m . METHOD_6 ( ) ; m . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . m ; ) ( METHOD_6 . m ; ) ) VAR_1 ( METHOD_8 . TYPE_2 ( append . m ; ) INT_1 , STRING_2 ( METHOD_7 . m ; ) STRING_1 ( METHOD_4 . m ; ) ( METHOD_3 . m ; ) ( METHOD_6 . m ; ) ( METHOD_5 . m ; ) VAR_2 ( METHOD_4 . m ; ) ( METHOD_3 . m ; ) ( METHOD_2 . m { ) VAR_1 int final , m TYPE_1 final ( METHOD_1 void private 
private TYPE_1 < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId commit ) throws java.io.IOException , TYPE_2 { rw . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( null , VAR_1 ) ; VAR_2 . METHOD_3 ( rw , commit ) ; return VAR_2 . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . VAR_2 return ; ) commit , rw ( METHOD_3 . VAR_2 ; ) VAR_1 , null ( TYPE_3 new = VAR_2 TYPE_3 ; ) ( METHOD_2 . rw { TYPE_2 , java.io.IOException throws ) commit org.eclipse.jgit.lib.ObjectId , rw org.eclipse.jgit.revwalk.RevWalk , VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 > com.google.gerrit.reviewdb.client.Account < TYPE_1 private 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; } } ; ) ) ) ( change.getId ( get . ) ( METHOD_4 . VAR_1 , change ( METHOD_3 . TYPE_1 return ; ) VAR_2 , VAR_1 ( METHOD_2 ; ) ) ( getChange . VAR_2 ( com.google.gerrit.reviewdb.client.Change new = change com.google.gerrit.reviewdb.client.Change { TYPE_5 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 throws ) VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) throws java.io.IOException { METHOD_2 ( req , res , VAR_3 ) ; res . METHOD_3 ( VAR_4 ) ; TYPE_5 VAR_5 = res . METHOD_4 ( ) ; new TYPE_6 ( ) . METHOD_5 ( VAR_6 ) . METHOD_6 ( ) . METHOD_7 ( ) . create ( ) . METHOD_8 ( VAR_1 , VAR_2 , VAR_5 ) ; VAR_5 . METHOD_9 ( CHAR_1 ) ; VAR_5 . close ( ) ; } } ; ) ( close . VAR_5 ; ) CHAR_1 ( METHOD_9 . VAR_5 ; ) VAR_5 , VAR_2 , VAR_1 ( METHOD_8 . ) ( create . ) ( METHOD_7 . ) ( METHOD_6 . ) VAR_6 ( METHOD_5 . ) ( TYPE_6 new ; ) ( METHOD_4 . res = VAR_5 TYPE_5 ; ) VAR_4 ( METHOD_3 . res ; ) VAR_3 , res , req ( METHOD_2 { java.io.IOException throws ) VAR_2 TYPE_4 , VAR_1 TYPE_3 , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) + STRING_5 ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) STRING_5 + ) ) VAR_3 ( + ) ) ) STRING_4 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_3 ( METHOD_5 . TYPE_2 ( + ) ) VAR_2 ( + STRING_2 ( ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_3 , STRING_4 ) ) , TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_5 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_6 , STRING_7 , STRING_4 , STRING_8 , STRING_9 , STRING_10 , STRING_5 ) ) ; } } ; ) ) STRING_5 , STRING_10 , STRING_9 , STRING_8 , STRING_4 , STRING_7 , STRING_6 ( of . TYPE_4 ( METHOD_8 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ) ) STRING_5 , STRING_1 ( METHOD_7 . TYPE_3 ( METHOD_6 . TYPE_2 , ) ) STRING_4 , STRING_3 ( METHOD_7 . TYPE_3 ( METHOD_6 . TYPE_2 ( METHOD_5 . ) ) VAR_3 ( METHOD_4 . TYPE_2 ( com.google.common.truth.Truth.assertThat ; ) VAR_4 , VAR_3 , VAR_1 , VAR_2 ( METHOD_3 ; ) STRING_2 , STRING_1 ( METHOD_2 . TYPE_1 = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 r = VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_5 ( r . METHOD_6 ( ) . contains ( STRING_2 ) ) ; } } ; ) ) STRING_2 ( contains . ) ( METHOD_6 . r ( METHOD_5 . org.junit.Assert ; ) ) ( METHOD_4 . r , VAR_4 ( org.junit.Assert.assertEquals ; ) VAR_1 , STRING_1 ( METHOD_3 . VAR_3 = r TYPE_2 ; ) VAR_2 ( METHOD_2 = VAR_1 ChangeInfo . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { final TYPE_2 user = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public TYPE_2 METHOD_2 ( ) { return user ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_4 ( ) { return VAR_4 . get ( ) ; } } ) ; try { return VAR_5 . METHOD_1 ( ) ; } finally { VAR_3 . METHOD_3 ( VAR_2 ) ; } } } } ; ) VAR_2 ( METHOD_3 . VAR_3 { finally } ; ) ( METHOD_1 . VAR_5 return { try ; ) } } ; ) ( get . VAR_4 return { ) ( METHOD_4 > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_4 public } ; user return { ) ( METHOD_2 TYPE_2 public { ) ( TYPE_3 new ( METHOD_3 . VAR_3 = VAR_2 TYPE_3 ; ) ( METHOD_2 . VAR_1 = user TYPE_2 final { java.lang.Exception throws ) ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( final TYPE_1 . Change change , final TYPE_2 event , final TYPE_1 . ReviewDb db ) throws TYPE_3 . OrmException { for ( TYPE_4 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( change , VAR_1 . user , db ) ) { VAR_3 . METHOD_3 ( event ) ; } } } } } } ; ) event ( METHOD_3 . VAR_3 { ) ) db , user . VAR_1 , change ( METHOD_2 ( if { ) ) ( values . VAR_2 : VAR_1 TYPE_4 ( for { OrmException . TYPE_3 throws ) db ReviewDb . TYPE_1 final , event TYPE_2 final , change Change . TYPE_1 final ( METHOD_1 void private 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . getKey ( ) . getParentKey ( ) . get ( ) ; java.lang.String VAR_4 = VAR_2 . getKey ( ) . getParentKey ( ) . get ( ) ; return TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_1 ( VAR_3 , VAR_4 ) . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) . result ( ) ; } } ; ) ( result . ) ) ( METHOD_4 . VAR_2 , ) ( METHOD_4 . VAR_1 ( METHOD_1 . ) VAR_4 , VAR_3 ( METHOD_1 . ) ) ( METHOD_3 . VAR_2 , ) ( METHOD_3 . VAR_1 ( METHOD_1 . ) ( METHOD_2 . TYPE_2 return ; ) ( get . ) ( getParentKey . ) ( getKey . VAR_2 = VAR_4 java.lang.String ; ) ( get . ) ( getParentKey . ) ( getKey . VAR_1 = VAR_3 java.lang.String { ) VAR_2 TYPE_1 , VAR_1 TYPE_1 ( METHOD_1 int public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ; } } ; ) ) 1 , VAR_3 ( METHOD_8 . TYPE_1 ( METHOD_7 . ) ) ( METHOD_6 . ) ( METHOD_5 ( com.google.common.truth.Truth.assertThat ; ) user ( METHOD_4 ; ) STRING_2 , VAR_2 , VAR_1 ( METHOD_3 ; ) STRING_1 , VAR_2 , VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Status status ) { switch ( status ) { case VAR_1 : case VAR_2 : return ( ( METHOD_2 ( ) ) & & ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; case VAR_3 : default : return false ; } } } } ; false return : default : VAR_3 case ; ) ) ( METHOD_6 . ) ( METHOD_5 ( || ) ) ) ( METHOD_4 . ) ( METHOD_3 ( & & ) ) ( METHOD_2 ( ( return : VAR_2 case : VAR_1 case { ) status ( switch { ) status Status . com.google.gerrit.reviewdb.client.Change ( METHOD_1 boolean public 
private void METHOD_1 ( TYPE_1 VAR_1 , int line , int VAR_2 , int VAR_3 , boolean edit ) { VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , ( ( line - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ; } } ; ) ) edit , VAR_2 , ) 1 + ) VAR_3 - line ( ( , ) 1 + ) VAR_3 - VAR_2 ( ( , ) ( METHOD_3 . ) VAR_1 ( METHOD_2 . VAR_5 ( TYPE_2 new ( add . VAR_4 { ) edit boolean , VAR_3 int , VAR_2 int , line int , VAR_1 TYPE_1 ( METHOD_1 void private 
public static TYPE_1 change ( java.lang.String project , int id ) { if ( project == null ) { return new TYPE_1 ( STRING_1 ) . id ( java.lang.String . METHOD_1 ( id ) ) ; } else { return new TYPE_1 ( STRING_1 ) . id ( project , id ) ; } } } } ; ) id , project ( id . ) STRING_1 ( TYPE_1 new return { else } ; ) ) id ( METHOD_1 . java.lang.String ( id . ) STRING_1 ( TYPE_1 new return { ) null == project ( if { ) id int , project java.lang.String ( change TYPE_1 static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; TYPE_2 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_4 ( git , false ) ; org.junit.Assert.assertEquals ( change . METHOD_5 ( ) . METHOD_6 ( 0 ) , METHOD_7 ( ) . METHOD_6 ( 0 ) ) ; } } ; ) ) 0 ( METHOD_6 . ) ( METHOD_7 , ) 0 ( METHOD_6 . ) ( METHOD_5 . change ( org.junit.Assert.assertEquals ; ) false , git ( METHOD_4 ; ) ) ( getChangeId . change ( submit ; ) git ( METHOD_3 = change Result . TYPE_2 ; ) ( METHOD_2 = git TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private java.util.List < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit c , boolean VAR_1 , TYPE_1 cfg ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( null , null , null , VAR_2 ) ; java.lang.String VAR_4 = TYPE_3 . METHOD_2 ( cfg ) ; java.util.List < TYPE_4 > m = VAR_3 . METHOD_3 ( repo , c , rw , VAR_4 , VAR_1 ) ; return TYPE_5 . METHOD_4 ( m ) ; } } ; ) m ( METHOD_4 . TYPE_5 return ; ) VAR_1 , VAR_4 , rw , c , repo ( METHOD_3 . VAR_3 = m > TYPE_4 < java.util.List ; ) cfg ( METHOD_2 . TYPE_3 = VAR_4 java.lang.String ; ) VAR_2 , null , null , null ( TYPE_3 new = VAR_3 TYPE_3 ; ) ( TYPE_2 new = VAR_2 TYPE_2 { java.lang.Exception throws ) cfg TYPE_1 , VAR_1 boolean , c org.eclipse.jgit.revwalk.RevCommit , rw org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 > java.lang.String < java.util.List private 
private static void METHOD_1 ( final TYPE_1 r , final java.lang.String n , final java.lang.String VAR_1 ) { if ( ( r . length ( ) ) > 0 ) { r . append ( STRING_1 ) ; } r . append ( n ) ; r . append ( STRING_2 ) ; r . append ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_2 . TYPE_2 ( append . r ; ) STRING_2 ( append . r ; ) n ( append . r } ; ) STRING_1 ( append . r { ) 0 > ) ) ( length . r ( ( if { ) VAR_1 java.lang.String final , n java.lang.String final , r TYPE_1 final ( METHOD_1 void static private 
protected void METHOD_1 ( TYPE_1 view ) { final java.lang.String token = view . METHOD_2 ( ) ; if ( ! ( token . equals ( TYPE_2 . METHOD_2 ( ) ) ) ) { TYPE_2 . METHOD_3 ( token , false ) ; if ( ( VAR_1 ) ! = null ) { TYPE_3 . METHOD_4 ( token ) ; } } if ( view instanceof TYPE_4 ) { VAR_2 = token ; } super . METHOD_1 ( view ) ; view . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . view ; ) view ( METHOD_1 . super } ; token = VAR_2 { ) TYPE_4 instanceof view ( if } } ; ) token ( METHOD_4 . TYPE_3 { ) null = ! ) VAR_1 ( ( if ; ) false , token ( METHOD_3 . TYPE_2 { ) ) ) ) ( METHOD_2 . TYPE_2 ( equals . token ( ! ( if ; ) ( METHOD_2 . view = token java.lang.String final { ) view TYPE_1 ( METHOD_1 void protected 
private boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ; msg . append ( STRING_1 ) ; msg . append ( STRING_2 ) ; if ( VAR_2 ) { msg . append ( STRING_3 ) ; } else { msg . append ( STRING_4 ) ; msg . append ( STRING_5 ) ; } msg . append ( STRING_6 ) ; return VAR_1 . METHOD_3 ( true , msg . toString ( ) , name ) ; } } } } ; ) name , ) ( toString . msg , true ( METHOD_3 . VAR_1 return ; ) STRING_6 ( append . msg } ; ) STRING_5 ( append . msg ; ) STRING_4 ( append . msg { else } ; ) STRING_3 ( append . msg { ) VAR_2 ( if ; ) STRING_2 ( append . msg ; ) STRING_1 ( append . msg ; ) ( java.lang.StringBuilder new = msg java.lang.StringBuilder final { else } ; VAR_2 return { ) ) ( METHOD_2 . VAR_1 ( if { ) ( METHOD_1 boolean private 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = null ; if ( VAR_1 ! = null ) { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; } if ( VAR_2 == null ) { VAR_2 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; } return new TYPE_1 ( VAR_2 ) ; } } ; ) VAR_2 ( TYPE_1 new return } ; ) VAR_5 , VAR_4 ( METHOD_3 . TYPE_3 = VAR_2 { ) null == VAR_2 ( if } ; ) VAR_3 ( METHOD_2 . VAR_1 = VAR_2 { ) null = ! VAR_1 ( if ; null = VAR_2 java.lang.String { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static public 
public boolean apply ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String name , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey ( project . getName ( ) ) ; org.eclipse.jgit.lib.Repository db = VAR_2 . METHOD_1 ( p ) ; TYPE_3 git = new TYPE_3 ( db ) ; git . METHOD_2 ( ) . METHOD_3 ( branch ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; git . close ( ) ; return true ; } } ; true return ; ) ( close . git ; ) ( METHOD_5 . ) VAR_1 ( METHOD_4 . ) branch ( METHOD_3 . ) ( METHOD_2 . git ; ) db ( TYPE_3 new = git TYPE_3 ; ) p ( METHOD_1 . VAR_2 = db org.eclipse.jgit.lib.Repository ; ) ) ( getName . project ( com.google.gerrit.reviewdb.client.Project.NameKey new = p com.google.gerrit.reviewdb.client.Project.NameKey { TYPE_2 , java.io.IOException throws ) VAR_2 TYPE_1 , name java.lang.String , VAR_1 java.lang.String , project com.google.gerrit.reviewdb.client.Project ( apply boolean public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; table . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( new TYPE_3 < java.util.List < TYPE_4 . ChangeInfo > > ( ) { public void onSuccess ( final java.util.List < TYPE_4 . ChangeInfo > result ) { VAR_1 . display ( result ) ; table . METHOD_5 ( ) ; } } ) ; } } ; ) } } ; ) ( METHOD_5 . table ; ) result ( display . VAR_1 { ) result > ChangeInfo . TYPE_4 < java.util.List final ( onSuccess void public { ) ( > > ChangeInfo . TYPE_4 < java.util.List < TYPE_3 new ( METHOD_4 . TYPE_2 ; ) ) ( METHOD_3 . TYPE_1 ( METHOD_2 . table ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
private TYPE_1 user ( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , null , VAR_5 , VAR_6 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_2 , ) VAR_2 , name ( TYPE_4 new , VAR_6 , VAR_5 , null , VAR_4 , ) ( METHOD_1 > TYPE_3 < Collections . VAR_3 , ) ( METHOD_1 > TYPE_3 < Collections . VAR_3 ( TYPE_1 new return { ) VAR_2 ... AccountGroup . com.google.gerrit.reviewdb.client , name java.lang.String , VAR_1 ProjectConfig . TYPE_2 ( user TYPE_1 private 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base ! = null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) ! = null ) ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } } ; ) VAR_9 , ) 0 ( get . VAR_8 , ) 0 ( get . VAR_7 , VAR_6 , m ( METHOD_2 . VAR_1 ; ) ) null = ! ) edit ( ( , VAR_5 , VAR_4 , VAR_3 , ) ) ( METHOD_1 . VAR_2 , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new , ) null : ) ) ( METHOD_1 . base , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new ? null = ! base ( ( set . VAR_1 { ) m > TYPE_2 < TYPE_1 ( onSuccess void public 
private static boolean METHOD_1 ( final TYPE_1 id , final TYPE_2 < TYPE_3 > VAR_1 ) { if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) { return true ; } if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) { return true ; } for ( final TYPE_3 t : VAR_1 ) { if ( t . METHOD_4 ( id ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) id ( METHOD_4 . t ( if { ) VAR_1 : t TYPE_3 final ( for } ; true return { ) ) STRING_2 ( METHOD_3 . ) ( METHOD_2 . id ( if } ; true return { ) ) STRING_1 ( METHOD_3 . ) ( METHOD_2 . id ( if { ) VAR_1 > TYPE_3 < TYPE_2 final , id TYPE_1 final ( METHOD_1 boolean static private 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String projectName ) throws java.io.IOException { java.lang.String n = projectName + ( VAR_2 ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( n ) . METHOD_4 ( ) , VAR_4 ) ; org.eclipse.jgit.lib.Repository db = TYPE_3 . METHOD_5 ( VAR_3 , false ) ; try { db . create ( true ) ; } finally { db . close ( ) ; } } } } ; ) ( close . db { finally } ; ) true ( create . db { try ; ) false , VAR_3 ( METHOD_5 . TYPE_3 = db org.eclipse.jgit.lib.Repository ; ) VAR_4 , ) ( METHOD_4 . ) n ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = VAR_3 TYPE_2 ; ) VAR_2 ( + projectName = n java.lang.String { java.io.IOException throws ) projectName java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . change ( ) . METHOD_3 ( ) ) ; try { VAR_3 = index . METHOD_4 ( VAR_2 , VAR_4 ) ; } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_5 ( ) ; } } ; ) ( METHOD_5 return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_3 ( catch } ; ) VAR_4 , VAR_2 ( METHOD_4 . index = VAR_3 { try ; ) ) ( METHOD_3 . ) ( change . VAR_1 , VAR_2 ( METHOD_2 . TYPE_2 = VAR_2 { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 public 
private TYPE_1 METHOD_1 ( TYPE_2 cm , int line , final TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { VAR_1 . METHOD_2 ( false ) ; TYPE_1 VAR_3 = cm . METHOD_1 ( line , VAR_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_3 . METHOD_4 ( new TYPE_5 ( ) { public void run ( ) { VAR_1 . METHOD_2 ( true ) ; } } ) ; return VAR_3 ; } } ; VAR_3 return ; ) } } ; ) true ( METHOD_2 . VAR_1 { ) ( run void public { ) ( TYPE_5 new ( METHOD_4 . VAR_3 ; ) VAR_2 , ) ( METHOD_3 . VAR_1 , line ( METHOD_1 . cm = VAR_3 TYPE_1 ; ) false ( METHOD_2 . VAR_1 { ) VAR_2 TYPE_4 , VAR_1 TYPE_3 final , line int , cm TYPE_2 ( METHOD_1 TYPE_1 private 
private org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String name ) throws java.io.IOException { name = TYPE_1 . METHOD_2 ( VAR_1 , name ) ; if ( VAR_2 . METHOD_3 ( name ) ) { return VAR_2 . get ( name ) ; } org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; VAR_2 . put ( name , repo ) ; return repo ; } } ; repo return ; ) repo , name ( put . VAR_2 ; ) ) name ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_1 . VAR_3 = repo org.eclipse.jgit.lib.Repository } ; ) name ( get . VAR_2 return { ) ) name ( METHOD_3 . VAR_2 ( if ; ) name , VAR_1 ( METHOD_2 . TYPE_1 = name { java.io.IOException throws ) name java.lang.String ( METHOD_1 org.eclipse.jgit.lib.Repository private 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; if ( ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ! = null ) { java.lang.String [ ] VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; for ( java.lang.String VAR_4 : VAR_3 ) { VAR_2 . add ( TYPE_3 . METHOD_4 ( VAR_5 class , VAR_4 . METHOD_5 ( ) ) ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) ) ) ( METHOD_5 . VAR_4 , class VAR_5 ( METHOD_4 . TYPE_3 ( add . VAR_2 { ) VAR_3 : VAR_4 java.lang.String ( for ; ) STRING_1 ( METHOD_3 . VAR_1 = VAR_3 ] [ java.lang.String { ) null = ! ) ) VAR_1 ( METHOD_2 . TYPE_2 ( ( if ; ) ( > < java.util.ArrayList new = VAR_2 > TYPE_1 < java.util.ArrayList { ) VAR_1 java.lang.String ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > schema = METHOD_2 ( VAR_1 class ) ; com.google.gerrit.reviewdb.server.ReviewDb db = METHOD_2 ( VAR_2 . ReviewDb class ) ; TYPE_2 . METHOD_3 ( schema . METHOD_4 ( ) ) . METHOD_5 ( db ) . METHOD_6 ( ) ; VAR_3 = new TYPE_3 ( VAR_4 , schema ) ; req = METHOD_2 ( VAR_5 class ) ; rsp = METHOD_2 ( VAR_6 . HttpServletResponse class ) ; TYPE_2 . METHOD_3 ( req . METHOD_7 ( ) ) . METHOD_5 ( TYPE_4 . toString ( ) ) ; } } ; ) ) ( toString . TYPE_4 ( METHOD_5 . ) ) ( METHOD_7 . req ( METHOD_3 . TYPE_2 ; ) class HttpServletResponse . VAR_6 ( METHOD_2 = rsp ; ) class VAR_5 ( METHOD_2 = req ; ) schema , VAR_4 ( TYPE_3 new = VAR_3 ; ) ( METHOD_6 . ) db ( METHOD_5 . ) ) ( METHOD_4 . schema ( METHOD_3 . TYPE_2 ; ) class ReviewDb . VAR_2 ( METHOD_2 = db com.google.gerrit.reviewdb.server.ReviewDb ; ) class VAR_1 ( METHOD_2 = schema > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( STRING_2 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_3 ) ) ) ) ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) . toString ( ) ) . isEqualTo ( VAR_1 ) ; } } ; ) VAR_1 ( isEqualTo . ) ) ( toString . ) ) STRING_2 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_3 . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_4 . ) ) ) ) ) STRING_3 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_3 . VAR_2 ( ) TYPE_1 ( ( ( com.google.common.truth.Truth.assertThat ; ) VAR_1 , STRING_2 ( METHOD_2 ; STRING_1 = VAR_1 java.lang.String { ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { com.google.gerrit.reviewdb.client.Change change = TYPE_3 . getChange ( VAR_1 ) ; com.google.gerrit.reviewdb.client.PatchSet ps = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_3 ) ) ; TYPE_5 VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; try { return VAR_4 . get ( change , ps ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e ( TYPE_7 new throw { ) e TYPE_6 ( catch } ; ) ps , change ( get . VAR_4 return { try ; ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 = VAR_4 TYPE_5 ; ) ) VAR_3 ( ) TYPE_4 ( ( = VAR_2 TYPE_4 ; ) VAR_1 ( METHOD_2 . TYPE_3 = ps com.google.gerrit.reviewdb.client.PatchSet ; ) VAR_1 ( getChange . TYPE_3 = change com.google.gerrit.reviewdb.client.Change { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
private org.eclipse.jgit.revwalk.RevCommit parseCommit ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { if ( id instanceof org.eclipse.jgit.revwalk.RevCommit ) { return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.revwalk.RevCommit commit = walk . parseCommit ( id ) ; walk . METHOD_1 ( commit ) ; return commit ; } finally { walk . METHOD_2 ( ) ; } } } } ; ) ( METHOD_2 . walk { finally } ; commit return ; ) commit ( METHOD_1 . walk ; ) id ( parseCommit . walk = commit org.eclipse.jgit.revwalk.RevCommit { try ; ) repo ( org.eclipse.jgit.revwalk.RevWalk new = walk org.eclipse.jgit.revwalk.RevWalk } ; ) ) id ( ) org.eclipse.jgit.revwalk.RevCommit ( ( return { ) org.eclipse.jgit.revwalk.RevCommit instanceof id ( if { java.lang.Exception throws ) id org.eclipse.jgit.lib.ObjectId ( parseCommit org.eclipse.jgit.revwalk.RevCommit private 
public void METHOD_1 ( final TYPE_1 event ) { new TYPE_2 ( patchSet . getId ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { VAR_1 . update ( result ) ; } public void METHOD_2 ( TYPE_5 VAR_2 ) { b . METHOD_3 ( true ) ; } } ) . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . ) } } ; ) true ( METHOD_3 . b { ) VAR_2 TYPE_5 ( METHOD_2 void public } ; ) result ( update . VAR_1 { ) result TYPE_4 ( onSuccess void public { ) ( > TYPE_4 < TYPE_3 new , ) ( getId . patchSet ( TYPE_2 new { ) event TYPE_1 final ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_2 project , java.lang.String path , final TYPE_3 VAR_1 , byte [ ] VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 ) { return TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) . METHOD_3 ( VAR_3 . toString ( ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( path , VAR_4 ) ) ; } } ; ) ) VAR_4 , path ( METHOD_5 . TYPE_5 ( METHOD_4 . ) ) ( toString . VAR_3 ( METHOD_3 . ) VAR_1 , VAR_2 ( METHOD_2 . TYPE_5 return { ) VAR_4 java.lang.String , VAR_3 TYPE_4 , VAR_2 ] [ byte , VAR_1 TYPE_3 final , path java.lang.String , project TYPE_2 ( METHOD_1 TYPE_1 private 
public TYPE_1 . Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1 = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( 2 ) ; TYPE_6 VAR_3 = TYPE_6 . METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Account.Id > VAR_4 ; try { VAR_4 = METHOD_4 ( VAR_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; } return METHOD_5 ( index , VAR_4 , VAR_1 ) ; } } ; ) VAR_1 , VAR_4 , index ( METHOD_5 return } ; ) 0 , 0 , false , VAR_3 ( Result . TYPE_7 new return ; ) e , STRING_1 ( error . VAR_5 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_1 ( METHOD_4 = VAR_4 { try ; VAR_4 > com.google.gerrit.reviewdb.client.Account.Id < java.util.List ; ) ( METHOD_3 . TYPE_6 = VAR_3 TYPE_6 ; ) 2 ( METHOD_2 . VAR_1 ; ) ) VAR_2 ( TYPE_5 new ( TYPE_4 new = VAR_1 TYPE_3 { ) index TYPE_2 final ( METHOD_1 Result . TYPE_1 public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ; try { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) ) ; } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } } } ; false return ; ) e , msg ( error . VAR_1 ; ) ) ( METHOD_5 . ) ( getProject , ) ( name . commit , STRING_1 ( java.lang.String.format = msg java.lang.String { ) e java.io.IOException ( catch } } ; ) ( close . repo { finally } ; ) ) ( METHOD_4 . repo , commit , rw , db , repo ( METHOD_3 return { try ; ) ( METHOD_2 = repo org.eclipse.jgit.lib.Repository { try { ) commit org.eclipse.jgit.revwalk.RevCommit , rw org.eclipse.jgit.revwalk.RevWalk , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
private java.lang.String METHOD_1 ( final java.lang.String token , final java.lang.String VAR_1 ) { if ( token . METHOD_2 ( STRING_1 ) ) { return TYPE_1 . METHOD_3 ( group . METHOD_4 ( ) , VAR_1 ) ; } else { return TYPE_1 . METHOD_3 ( group . METHOD_5 ( ) , VAR_1 ) ; } } } } ; ) VAR_1 , ) ( METHOD_5 . group ( METHOD_3 . TYPE_1 return { else } ; ) VAR_1 , ) ( METHOD_4 . group ( METHOD_3 . TYPE_1 return { ) ) STRING_1 ( METHOD_2 . token ( if { ) VAR_1 java.lang.String final , token java.lang.String final ( METHOD_1 java.lang.String private 
private TYPE_1 METHOD_1 ( final TYPE_2 rsrc ) { if ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; } else { return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( account ) ; return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } } ; } } } } ; } } ; ) ( METHOD_7 . ) VAR_1 ( METHOD_6 . ) ( METHOD_2 . rsrc return ; ) account ( create . VAR_2 = VAR_1 TYPE_3 { com.google.gwtorm.server.OrmException throws ) account com.google.gerrit.reviewdb.client.Account.Id ( METHOD_5 boolean public { ) ( TYPE_1 new return { else } ; } } ; true return { com.google.gwtorm.server.OrmException throws ) account com.google.gerrit.reviewdb.client.Account.Id ( METHOD_5 boolean public { ) ( TYPE_1 new return { ) ) ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 . rsrc ( if { ) rsrc TYPE_2 final ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; METHOD_2 ( p , c . getParentKey ( ) ) ; METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) ! = ( c . METHOD_4 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_4 . c ( = ! ) ) ( METHOD_4 . VAR_2 ( ( ( METHOD_3 ; ) ) ( getParentKey . c , p ( METHOD_2 ; ) VAR_2 , p ( TYPE_2 new = c TYPE_2 final ; ) VAR_1 ( TYPE_1 new = p TYPE_1 final ; STRING_2 = VAR_2 java.lang.String final ; STRING_1 = VAR_1 java.lang.String final { ) ( METHOD_1 void public 
public TYPE_1 get ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws TYPE_5 { java.lang.String name = METHOD_1 ( VAR_1 ) ; return new TYPE_1 ( name , VAR_4 , VAR_3 . user , VAR_1 , VAR_2 , new TYPE_6 ( name ) , VAR_5 , VAR_6 , METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_7 class , null ) ; } } ; ) null , class VAR_7 , null , ) ( METHOD_3 . ) ( METHOD_2 , VAR_6 , VAR_5 , ) name ( TYPE_6 new , VAR_2 , VAR_1 , user . VAR_3 , VAR_4 , name ( TYPE_1 new return ; ) VAR_1 ( METHOD_1 = name java.lang.String { TYPE_5 throws ) VAR_3 TYPE_4 , VAR_2 TYPE_3 , VAR_1 TYPE_2 ( get TYPE_1 public 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( VAR_2 ) ) { final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , p . getAccountId ( ) ) ; if ( VAR_3 . METHOD_2 ( ) . contains ( VAR_5 ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) VAR_5 ( contains . ) ( METHOD_2 . VAR_3 ( if ; ) ) ( getAccountId . p , VAR_2 ( create . VAR_4 = VAR_3 TYPE_1 final { ) ) VAR_2 ( approvals . VAR_1 : p PatchSetApproval . com.google.gerrit.reviewdb.client ( for { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
private void set ( TYPE_1 info ) { VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( info . METHOD_3 ( ) ) ) ; if ( ( info . message ( ) ) ! = null ) { java.lang.String msg = info . message ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( msg ) ; message . METHOD_5 ( VAR_3 . apply ( new TYPE_3 ( ) . append ( msg ) . METHOD_6 ( ) ) ) ; } this . VAR_4 = info ; } } ; info = VAR_4 . this } ; ) ) ) ( METHOD_6 . ) msg ( append . ) ( TYPE_3 new ( apply . VAR_3 ( METHOD_5 . message ; ) msg ( METHOD_1 . VAR_2 ; ) ( METHOD_4 . ) ( message . info = msg java.lang.String { ) null = ! ) ) ( message . info ( ( if ; ) ) ) ( METHOD_3 . info ( METHOD_2 . TYPE_2 ( METHOD_1 . VAR_1 { ) info TYPE_1 ( set void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , METHOD_2 ( STRING_3 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . r ; ) ) ( METHOD_3 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) STRING_3 ( METHOD_2 , ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( put . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
static < TYPE_1 extends TYPE_2 . Key < ? > > boolean METHOD_1 ( final TYPE_1 a , final TYPE_1 b ) { if ( a == b ) { return true ; } if ( ( a == null ) || ( b == null ) ) { return false ; } return a . equals ( b ) ; } } ; ) b ( equals . a return } ; false return { ) ) null == b ( || ) null == a ( ( if } ; true return { ) b == a ( if { ) b TYPE_1 final , a TYPE_1 final ( METHOD_1 boolean > > ? < Key . TYPE_2 extends TYPE_1 < static 
public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_3 args ) { if ( VAR_1 ) { try { return VAR_2 . get ( key , VAR_3 . create ( key , args ) ) ; } catch ( TYPE_4 | TYPE_5 e ) { VAR_4 . METHOD_2 ( ( STRING_1 + key ) , e ) ; return new TYPE_1 ( VAR_5 ) ; } } else { return new TYPE_1 ( VAR_6 ) ; } } } } ; ) VAR_6 ( TYPE_1 new return { else } } ; ) VAR_5 ( TYPE_1 new return ; ) e , ) key + STRING_1 ( ( METHOD_2 . VAR_4 { ) e TYPE_5 | TYPE_4 ( catch } ; ) ) args , key ( create . VAR_3 , key ( get . VAR_2 return { try { ) VAR_1 ( if { ) args TYPE_3 , key TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; TYPE_1 . HttpServletResponse VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_4 ( null , VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; METHOD_7 ( ) ; VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_4 ( null , VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; METHOD_7 ( ) ; } } ; ) ( METHOD_7 ; ) VAR_3 ( METHOD_6 . ) VAR_1 ( METHOD_5 . TYPE_2 ; ) VAR_1 , null ( METHOD_4 . servlet ; ) class HttpServletResponse . VAR_2 ( METHOD_3 = VAR_1 ; ) ( METHOD_7 ; ) VAR_3 ( METHOD_6 . ) VAR_1 ( METHOD_5 . TYPE_2 ; ) VAR_1 , null ( METHOD_4 . servlet ; ) class HttpServletResponse . VAR_2 ( METHOD_3 = VAR_1 HttpServletResponse . TYPE_1 ; ) ( METHOD_2 { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , VAR_1 ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_3 : VAR_1 ) { VAR_2 . add ( ( STRING_1 + VAR_3 ) ) ; } com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_5 . ) ) m ( METHOD_4 . TYPE_3 ( com.google.common.truth.Truth.assertThat } ; ) ) VAR_3 + STRING_1 ( ( add . VAR_2 { ) VAR_1 : VAR_3 java.lang.String ( for ; ) ( > < java.util.ArrayList new = VAR_2 > java.lang.String < java.util.List ; ) VAR_1 , c , repo ( METHOD_3 . TYPE_2 = m > TYPE_1 < java.util.List ; ) VAR_1 ( METHOD_2 = c org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) ; java.lang.String VAR_4 = ( STRING_1 + ( VAR_5 ) ) + STRING_2 ; if ( VAR_2 > 0 ) { return ( TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ( VAR_2 + 1 ) ) ) + VAR_4 ; } else { return VAR_4 ; } } } } ; VAR_4 return { else } ; VAR_4 + ) ) ) 1 + VAR_2 ( ( METHOD_4 . ) VAR_1 ( METHOD_2 . TYPE_2 ( return { ) 0 > VAR_2 ( if ; STRING_2 + ) ) VAR_5 ( + STRING_1 ( = VAR_4 java.lang.String ; ) VAR_3 ( METHOD_3 . ) VAR_1 ( METHOD_2 . TYPE_2 = VAR_2 int { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String static public 
private TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { if ( ( ( path ) == null ) || ( VAR_1 == null ) ) { return null ; } final org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; final TYPE_5 VAR_3 = rw . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( VAR_2 , path , VAR_3 ) ; } } ; ) VAR_3 , path , VAR_2 ( METHOD_3 . TYPE_1 return ; ) VAR_1 ( METHOD_2 . rw = VAR_3 TYPE_5 final ; ) VAR_2 ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk final } ; null return { ) ) null == VAR_1 ( || ) null == ) path ( ( ( if { TYPE_4 , TYPE_3 , TYPE_2 , java.io.IOException throws ) VAR_1 org.eclipse.jgit.lib.ObjectId final ( METHOD_1 TYPE_1 private 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ; } } ; ) ) ) 0 ( METHOD_5 . ) ( METHOD_4 . TYPE_8 , false ( TYPE_7 new , ) null ( METHOD_3 . ) ) ( METHOD_2 . repo ( TYPE_6 new , ) ( METHOD_2 . repo ( TYPE_5 new = VAR_1 ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void protected 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_2 , res . getStatus ( ) ) ; assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( METHOD_3 . res , VAR_1 ( assertEquals ; ) ) ( getStatus . res , VAR_2 ( assertEquals ; ) res , req ( METHOD_2 . servlet ; ) ( TYPE_2 new = res TYPE_2 { java.lang.Exception throws ) req TYPE_1 , VAR_1 java.lang.String ( METHOD_1 void private 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; TYPE_3 < TYPE_4 > VAR_2 = java.util.Collections . METHOD_3 ( ) ; java.util.Set < TYPE_5 > VAR_3 = TYPE_6 . of ( VAR_4 ) ; return new TYPE_1 ( account , VAR_3 , VAR_2 ) ; } } ; ) VAR_2 , VAR_3 , account ( TYPE_1 new return ; ) VAR_4 ( of . TYPE_6 = VAR_3 > TYPE_5 < java.util.Set ; ) ( METHOD_3 . java.util.Collections = VAR_2 > TYPE_4 < TYPE_3 ; ) ) ( METHOD_2 . TYPE_2 , VAR_1 ( com.google.gerrit.reviewdb.client.Account new = account com.google.gerrit.reviewdb.client.Account { ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_2 , INT_1 ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_1 . METHOD_5 ( VAR_3 . ReviewDb class ) ) ; TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( VAR_1 ) ; VAR_4 . METHOD_9 ( STRING_1 , STRING_2 , INT_1 ) ; TYPE_1 . METHOD_10 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_10 . TYPE_1 ; ) INT_1 , STRING_2 , STRING_1 ( METHOD_9 . VAR_4 ; ) VAR_1 ( METHOD_8 . TYPE_1 ; ) ( METHOD_7 . ) ( METHOD_6 . TYPE_1 ; ) ) class ReviewDb . VAR_3 ( METHOD_5 . TYPE_1 , ) VAR_2 ( METHOD_4 . TYPE_3 ( METHOD_3 . VAR_1 ; ) INT_1 , STRING_2 , STRING_1 ( TYPE_2 new = VAR_2 TYPE_2 ; ) VAR_1 ( METHOD_2 . TYPE_1 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { try { TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 . METHOD_5 ( ) ) . METHOD_6 ( ) , STRING_1 , VAR_3 ) ; } catch ( TYPE_7 e ) { throw new TYPE_8 ( e ) ; } VAR_1 . add ( VAR_3 ) ; } return VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . ) ( METHOD_7 . VAR_1 return } ; ) VAR_3 ( add . VAR_1 } ; ) e ( TYPE_8 new throw { ) e TYPE_7 ( catch } ; ) VAR_3 , STRING_1 , ) ( METHOD_6 . ) ) ( METHOD_5 . VAR_3 ( TYPE_6 new ( METHOD_4 . TYPE_5 { try { ) VAR_4 : VAR_3 TYPE_4 ( for ; ) VAR_2 ( METHOD_3 . ) ( METHOD_2 . TYPE_3 = VAR_1 TYPE_2 { ) ( METHOD_1 TYPE_1 protected 
public static TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.Repository repo , final TYPE_2 VAR_1 , final boolean VAR_2 ) { TYPE_1 m ; if ( VAR_2 ) { m = TYPE_3 . METHOD_2 ( repo , true ) ; } else { m = TYPE_4 . METHOD_2 ( repo ) ; } m . METHOD_3 ( new TYPE_5 ( ) { protected TYPE_2 METHOD_4 ( ) { return VAR_1 ; } public void METHOD_5 ( ) { } public void METHOD_6 ( ) { } } ) ; return m ; } } ; m return ; ) } } { ) ( METHOD_6 void public } { ) ( METHOD_5 void public } ; VAR_1 return { ) ( METHOD_4 TYPE_2 protected { ) ( TYPE_5 new ( METHOD_3 . m } ; ) repo ( METHOD_2 . TYPE_4 = m { else } ; ) true , repo ( METHOD_2 . TYPE_3 = m { ) VAR_2 ( if ; m TYPE_1 { ) VAR_2 boolean final , VAR_1 TYPE_2 final , repo org.eclipse.jgit.lib.Repository final ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . METHOD_5 ( ) ; METHOD_6 ( ) ; TYPE_2 . ChangeInfo info = METHOD_7 ( METHOD_8 ( VAR_1 ) ) ; java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_9 ( ) . METHOD_10 ( ) ) ) ; } } ; ) ) ) ( METHOD_10 . ) ( METHOD_9 . admin , VAR_4 , STRING_1 ( java.lang.String.format ( contains . ) message ( com.google.common.truth.Truth.assertThat ; message . commit . ) VAR_3 ( get . VAR_2 = message java.lang.String ; ) ) VAR_1 ( METHOD_8 ( METHOD_7 = info ChangeInfo . TYPE_2 ; ) ( METHOD_6 ; ) ( METHOD_5 . ) ) ( METHOD_4 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) throws java.io.IOException { METHOD_2 ( new TYPE_1 < java.lang.String > ( ) { public java.lang.String METHOD_3 ( ) throws java.lang.Exception { log . METHOD_4 ( STRING_1 , VAR_2 , VAR_1 ) ; client ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; log . METHOD_4 ( STRING_2 , VAR_2 , VAR_1 ) ; return VAR_1 ; } } ) ; } } ; ) } } ; VAR_1 return ; ) VAR_1 , VAR_2 , STRING_2 ( METHOD_4 . log ; ) VAR_2 , VAR_1 ( METHOD_1 . ) ( client ; ) VAR_1 , VAR_2 , STRING_1 ( METHOD_4 . log { java.lang.Exception throws ) ( METHOD_3 java.lang.String public { ) ( > java.lang.String < TYPE_1 new ( METHOD_2 { java.io.IOException throws ) VAR_2 java.lang.String final , VAR_1 java.lang.String final ( METHOD_1 void public 
public java.lang.String apply ( TYPE_1 rsrc , TYPE_2 input ) { final java.lang.String VAR_1 = ( VAR_2 ) ? STRING_1 : STRING_2 ; return java.lang.String.format ( STRING_3 , VAR_1 , ( TYPE_3 . METHOD_1 ( input . message ) ? TYPE_4 . METHOD_2 ( user . get ( ) . METHOD_3 ( ) , STRING_4 ) : input . message ) , rsrc . getName ( ) ) ; } } ; ) ) ( getName . rsrc , ) message . input : ) STRING_4 , ) ( METHOD_3 . ) ( get . user ( METHOD_2 . TYPE_4 ? ) message . input ( METHOD_1 . TYPE_3 ( , VAR_1 , STRING_3 ( java.lang.String.format return ; STRING_2 : STRING_1 ? ) VAR_2 ( = VAR_1 java.lang.String final { ) input TYPE_2 , rsrc TYPE_1 ( apply java.lang.String public 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t . METHOD_3 ( ) ) ) return false ; else return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; } } ; ) ) ( value . ) ) t ( ) TYPE_4 ( ( ( == ) VAR_2 . this ( return else ; false return ) ) ) ( METHOD_3 . t ( ! ( if ; ) VAR_1 , this ( METHOD_1 . ) ) t ( ) TYPE_3 ( ( return ) ) ( METHOD_2 . t ( if { ) VAR_1 TYPE_2 , t TYPE_1 ( METHOD_1 boolean public 
public void METHOD_1 ( TYPE_1 rp ) throws TYPE_2 { VAR_1 = rp . METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) { try { VAR_1 = rp . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { TYPE_2 VAR_3 = new TYPE_2 ( e . getMessage ( ) ) ; VAR_3 . METHOD_6 ( e ) ; throw VAR_3 ; } } rp . METHOD_7 ( VAR_1 , rp . METHOD_8 ( ) ) ; } } ; ) ) ( METHOD_8 . rp , VAR_1 ( METHOD_7 . rp } } ; VAR_3 throw ; ) e ( METHOD_6 . VAR_3 ; ) ) ( getMessage . e ( TYPE_2 new = VAR_3 TYPE_2 { ) e java.io.IOException ( catch } ; ) VAR_2 ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . rp = VAR_1 { try { ) null == ) VAR_1 ( ( if ; ) ( METHOD_2 . rp = VAR_1 { TYPE_2 throws ) rp TYPE_1 ( METHOD_1 void public 
protected TYPE_1 METHOD_1 ( TYPE_2 req , TYPE_3 . HttpServletResponse res , java.lang.String VAR_1 , java.util.Map < java.lang.String , ? > VAR_2 ) throws java.io.IOException { req . METHOD_2 ( VAR_3 , true ) ; return VAR_4 . METHOD_3 ( res , VAR_1 , METHOD_4 ( req , res , VAR_2 ) ) ; } } ; ) ) VAR_2 , res , req ( METHOD_4 , VAR_1 , res ( METHOD_3 . VAR_4 return ; ) true , VAR_3 ( METHOD_2 . req { java.io.IOException throws ) VAR_2 > ? , java.lang.String < java.util.Map , VAR_1 java.lang.String , res HttpServletResponse . TYPE_3 , req TYPE_2 ( METHOD_1 TYPE_1 protected 
protected void METHOD_1 ( ) { bind ( VAR_1 . Factory class ) . to ( VAR_2 . Factory class ) ; bind ( new TYPE_1 < TYPE_2 < TYPE_3 > > ( ) { } ) . to ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_2 ( VAR_5 class ) ; METHOD_3 ( ) . to ( VAR_6 class ) ; } } ; ) class VAR_6 ( to . ) ( METHOD_3 ; ) class VAR_5 ( METHOD_2 . ) class VAR_4 ( bind ; ) class VAR_3 ( to . ) } { ) ( > > TYPE_3 < TYPE_2 < TYPE_1 new ( bind ; ) class Factory . VAR_2 ( to . ) class Factory . VAR_1 ( bind { ) ( METHOD_1 void protected 
private boolean METHOD_1 ( final TYPE_1 id ) { if ( id . METHOD_2 ( VAR_1 ) ) { return METHOD_3 ( ) ; } if ( id . METHOD_2 ( VAR_2 ) ) { return true ; } if ( id . METHOD_2 ( VAR_3 ) ) { return true ; } if ( id . METHOD_2 ( VAR_4 ) ) { return true ; } for ( final TYPE_2 p : VAR_5 ) { if ( p . METHOD_4 ( id ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) id ( METHOD_4 . p ( if { ) VAR_5 : p TYPE_2 final ( for } ; true return { ) ) VAR_4 ( METHOD_2 . id ( if } ; true return { ) ) VAR_3 ( METHOD_2 . id ( if } ; true return { ) ) VAR_2 ( METHOD_2 . id ( if } ; ) ( METHOD_3 return { ) ) VAR_1 ( METHOD_2 . id ( if { ) id TYPE_1 final ( METHOD_1 boolean private 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( VAR_2 ) ; TYPE_4 < TYPE_5 > VAR_3 = METHOD_3 ( VAR_2 ) ; if ( VAR_3 . METHOD_4 ( ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_2 . getId ( ) ) ) ; } com.google.gerrit.reviewdb.client.PatchSet VAR_4 = METHOD_5 ( VAR_2 ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = TYPE_6 . METHOD_6 ( VAR_4 ) ; METHOD_7 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , TYPE_7 . METHOD_8 ( ) ) ; } } ; ) ) ( METHOD_8 . TYPE_7 , VAR_5 , VAR_4 , VAR_2 , VAR_1 ( METHOD_7 ; ) VAR_4 ( METHOD_6 . TYPE_6 = VAR_5 org.eclipse.jgit.lib.ObjectId ; ) VAR_2 ( METHOD_5 = VAR_4 com.google.gerrit.reviewdb.client.PatchSet } ; ) ) ) ( getId . VAR_2 , STRING_1 ( java.lang.String.format ( TYPE_3 new throw { ) ) ( METHOD_4 . VAR_3 ( if ; ) VAR_2 ( METHOD_3 = VAR_3 > TYPE_5 < TYPE_4 ; ) VAR_2 ( METHOD_2 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 throws ) VAR_2 TYPE_1 , VAR_1 org.eclipse.jgit.lib.Repository ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( VAR_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_2 , VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ; } } ; ) VAR_12 ( METHOD_7 . ) VAR_11 ( METHOD_7 . ) VAR_10 ( METHOD_6 . ) VAR_9 , VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 ( to . ) VAR_4 , VAR_2 ( to . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_1 ( METHOD_4 ; ) VAR_3 , VAR_2 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; } } ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) ) ( TYPE_1 new ( install ; ) class VAR_2 ( to . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.String p = STRING_1 + i ; TYPE_2 . METHOD_2 ( VAR_1 , p ) ; TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ; } return null ; } } ; null return } ; ) ) p + ) STRING_2 + ) ) ( METHOD_4 . VAR_1 ( ( ( ( METHOD_3 . TYPE_2 ; ) p , VAR_1 ( METHOD_2 . TYPE_2 ; i + STRING_1 = p java.lang.String { ) ++ i ; INT_1 < i ; 1 = i int ( for { java.lang.Exception throws ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = METHOD_2 ( ) ; final TYPE_2 VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( VAR_5 , VAR_6 ) ; assertEquals ( VAR_7 , VAR_8 ) ; assertEquals ( VAR_9 , VAR_10 ) ; assertEquals ( VAR_11 , VAR_12 ) ; } } ; ) VAR_12 , VAR_11 ( assertEquals ; ) VAR_10 , VAR_9 ( assertEquals ; ) VAR_8 , VAR_7 ( assertEquals ; ) VAR_6 , VAR_5 ( assertEquals ; ) VAR_4 , VAR_3 ( assertEquals ; ) VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_2 TYPE_2 final ; ) ( METHOD_2 = VAR_1 TYPE_2 final ; ) ( create . db { OrmException . TYPE_1 throws ) ( METHOD_1 void public 
public synchronized < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.String name , TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) { TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 < TYPE_1 > m = new TYPE_6 ( this , name , VAR_1 , VAR_2 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_3 . put ( name , m ) ; return m . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . m return ; ) m , name ( put . VAR_3 ; ) VAR_1 , name ( METHOD_3 ; ) VAR_2 , VAR_1 , name , this ( TYPE_6 new = m > TYPE_1 < TYPE_6 ; ) VAR_1 ( METHOD_2 . TYPE_5 { ) VAR_2 > TYPE_1 < TYPE_4 , VAR_1 TYPE_3 , name java.lang.String ( METHOD_1 > TYPE_1 < TYPE_2 > TYPE_1 < synchronized public 
public boolean equals ( final TYPE_1 VAR_1 ) { return ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) & & ( METHOD_2 ( ) . equals ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . METHOD_2 ( ) ) ) ; } } ; ) ) ) ( METHOD_2 . ) ) VAR_1 ( ) > ? < TYPE_2 ( ( ( equals . ) ( METHOD_2 ( & & ) ) ) ( METHOD_1 . VAR_1 ( == ) ) ( METHOD_1 ( ( return { ) VAR_1 TYPE_1 final ( equals boolean public 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws java.io.IOException , TYPE_1 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( project . METHOD_2 ( ) , VAR_2 ) ; } } } } ; ) VAR_2 , ) ( METHOD_2 . project ( METHOD_4 { ) VAR_1 ! ( if ; ) VAR_2 ( METHOD_3 } ; ) STRING_1 ( TYPE_1 new throw { ) null == VAR_2 ( if ; ) ) ( METHOD_2 . project ( METHOD_1 . VAR_3 = VAR_2 org.eclipse.jgit.lib.Repository final { TYPE_1 , java.io.IOException throws ) VAR_1 boolean , project com.google.gerrit.reviewdb.client.Project ( delete void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_3 ( METHOD_6 . u , STRING_2 ( METHOD_5 ; ) VAR_4 , VAR_1 ( user . util = u TYPE_2 ; ) true ( METHOD_4 . ) STRING_1 , VAR_4 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 ; ) ( METHOD_3 . ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 , change ) ; } } ; ) change , STRING_8 ( METHOD_5 ; ) STRING_7 ( METHOD_5 ; ) ) commit , repo ( METHOD_4 ( insert = change com.google.gerrit.reviewdb.client.Change ; ) ) ( create . ) STRING_6 , STRING_5 ( add . ) STRING_4 , STRING_3 ( add . ) STRING_2 ( message . ) ( commit . repo ( METHOD_3 . repo = commit org.eclipse.jgit.revwalk.RevCommit ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { boolean VAR_3 = false ; if ( VAR_1 < = ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return table . METHOD_1 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_1 . table return } } ; ++ ) VAR_5 ( { ) ) VAR_5 ( < VAR_1 ( if } ; ++ ) VAR_4 ( { ) ) VAR_4 ( = < VAR_1 ( if ; false = VAR_3 boolean { ) VAR_2 : s TYPE_1 final ( for { ) VAR_1 int final ( METHOD_1 int private 
private void METHOD_1 ( final TYPE_1 ctl , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_2 VAR_2 ) throws java.lang.Exception { if ( ! ( VAR_3 . isEmpty ( ) ) ) { VAR_4 . get ( ) . apply ( new TYPE_3 ( new TYPE_4 ( ctl ) , db . patchSets ( ) . get ( VAR_1 ) ) , VAR_2 ) ; } } } } ; ) VAR_2 , ) ) VAR_1 ( get . ) ( patchSets . db , ) ctl ( TYPE_4 new ( TYPE_3 new ( apply . ) ( get . VAR_4 { ) ) ) ( isEmpty . VAR_3 ( ! ( if { java.lang.Exception throws ) VAR_2 TYPE_2 final , VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id final , ctl TYPE_1 final ( METHOD_1 void private 
protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 user ) throws TYPE_3 { java.lang.String project = VAR_2 . getProject ( ) . getName ( ) ; java.lang.String VAR_3 = ( TYPE_4 . METHOD_2 ( user . METHOD_3 ( ) ) ) ? STRING_1 : user . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_1 , VAR_3 , project ) ) ; throw new TYPE_3 ( VAR_1 , project ) ; } } ; ) project , VAR_1 ( TYPE_3 new throw ; ) ) project , VAR_3 , VAR_1 , STRING_2 ( java.lang.String.format ( METHOD_4 . VAR_4 ; ) ( METHOD_3 . user : STRING_1 ? ) ) ) ( METHOD_3 . user ( METHOD_2 . TYPE_4 ( = VAR_3 java.lang.String ; ) ( getName . ) ( getProject . VAR_2 = project java.lang.String { TYPE_3 throws ) user TYPE_2 , VAR_2 TYPE_1 , VAR_1 java.lang.String ( METHOD_1 void protected 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } } ; cd return ; ) ) currentPatchSetId , id ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( com.google.gerrit.reviewdb.client.PatchSet new = VAR_1 ; ) id , project , null , null , null , null , null , null , null , null , null , null , null , null , null , null ( com.google.gerrit.server.query.change.ChangeData new = cd com.google.gerrit.server.query.change.ChangeData { ) currentPatchSetId int , id Id . com.google.gerrit.reviewdb.client.Change , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 com.google.gerrit.server.query.change.ChangeData static public 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_1 c : db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . METHOD_6 ( ) ) ) { VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) c , ) ( get . ) ( getKey . c ( put . VAR_1 { ) ) ) ( METHOD_6 . rsrc , ) ( getId . ) ( METHOD_5 . rsrc ( METHOD_4 . ) ( METHOD_3 . db : c TYPE_1 ( for ; ) ( METHOD_2 . TYPE_3 = VAR_1 > TYPE_1 , java.lang.String < java.util.Map { com.google.gwtorm.server.OrmException throws ) rsrc TYPE_2 ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map private 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( ( ( change ) ! = null ) & & ( VAR_1 ) ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( new TYPE_3 ( repo ) , VAR_3 ) ) ) ) { return METHOD_4 ( repo ) ; } } return super . METHOD_1 ( repo ) ; } } ; ) repo ( METHOD_1 . super return } } ; ) repo ( METHOD_4 return { ) ) ) ) VAR_3 , ) repo ( TYPE_3 new ( METHOD_3 . VAR_2 ( ! ( || ) null == VAR_2 ( ( if ; ) change ( METHOD_2 . TYPE_2 = VAR_2 TYPE_2 { ) ) VAR_1 ( & & ) null = ! ) change ( ( ( if { java.io.IOException throws ) repo org.eclipse.jgit.lib.Repository ( METHOD_1 TYPE_1 protected 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; java.lang.String VAR_2 = STRING_1 ; VAR_1 . put ( STRING_2 , VAR_2 ) ; java.lang.String query = VAR_3 . METHOD_2 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( query . contains ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ) ; } } ; ) ) ) VAR_2 , STRING_3 ( java.lang.String.format ( contains . query ( METHOD_3 . org.junit.Assert ; ) VAR_1 ( METHOD_2 . VAR_3 = query java.lang.String ; ) VAR_2 , STRING_2 ( put . VAR_1 ; STRING_1 = VAR_2 java.lang.String ; ) ( > < TYPE_1 new = VAR_1 > java.lang.String , java.lang.String < java.util.Map { java.lang.Exception throws ) ( METHOD_1 void public 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 < org.eclipse.jgit.lib.Repository > repo , org.eclipse.jgit.revwalk.RevCommit ... VAR_2 ) throws java.lang.Exception { final TYPE_3 VAR_3 = repo . METHOD_2 ( VAR_1 ) ; org.eclipse.jgit.revwalk.RevCommit c = ( VAR_2 == null ) ? repo . commit ( VAR_3 ) : repo . commit ( VAR_3 , VAR_2 ) ; repo . METHOD_3 ( c ) ; return c ; } } ; c return ; ) c ( METHOD_3 . repo ; ) VAR_2 , VAR_3 ( commit . repo : ) VAR_3 ( commit . repo ? ) null == VAR_2 ( = c org.eclipse.jgit.revwalk.RevCommit ; ) VAR_1 ( METHOD_2 . repo = VAR_3 TYPE_3 final { java.lang.Exception throws ) VAR_2 ... org.eclipse.jgit.revwalk.RevCommit , repo > org.eclipse.jgit.lib.Repository < TYPE_2 , VAR_1 ] [ TYPE_1 ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit static public 
private void METHOD_1 ( TYPE_1 < TYPE_2 . NameKey > VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . get ( ) ; try { VAR_2 . METHOD_1 ( db , VAR_1 , VAR_4 , VAR_5 ) ; METHOD_2 ( STRING_2 ) ; } catch ( TYPE_4 e ) { METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ; } } } } ; ) e , ) STRING_4 + STRING_3 ( ( METHOD_3 { ) e TYPE_4 ( catch } ; ) STRING_2 ( METHOD_2 ; ) VAR_5 , VAR_4 , VAR_1 , db ( METHOD_1 . VAR_2 { try ; ) ( get . VAR_3 = VAR_2 TYPE_3 ; ) STRING_1 ( METHOD_2 { ) VAR_1 > NameKey . TYPE_2 < TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( final TYPE_1 . Id VAR_1 ) { if ( ( VAR_2 ) ! = null ) { for ( final TYPE_2 p : VAR_2 ) { p . METHOD_2 ( VAR_1 ) ; if ( p . METHOD_3 ( ) ) { p . METHOD_1 ( ) ; } } } } } } } } ; ) ( METHOD_1 . p { ) ) ( METHOD_3 . p ( if ; ) VAR_1 ( METHOD_2 . p { ) VAR_2 : p TYPE_2 final ( for { ) null = ! ) VAR_2 ( ( if { ) VAR_1 Id . TYPE_1 final ( METHOD_1 void public 
protected void METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 ) ) { TYPE_1 . info ( STRING_1 ) ; bind ( VAR_2 class ) . to ( VAR_3 class ) . in ( VAR_4 ) ; bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( new TYPE_3 ( VAR_1 , VAR_6 ) ) ; install ( new TYPE_4 ( VAR_1 , VAR_6 ) ) ; } } } } ; ) ) VAR_6 , VAR_1 ( TYPE_4 new ( install ; ) ) VAR_6 , VAR_1 ( TYPE_3 new ( METHOD_5 . ) ) STRING_2 ( METHOD_4 . TYPE_2 ( METHOD_3 . ) class VAR_5 ( bind ; ) VAR_4 ( in . ) class VAR_3 ( to . ) class VAR_2 ( bind ; ) STRING_1 ( info . TYPE_1 { ) ) VAR_1 ( METHOD_2 ( if { ) ( METHOD_1 void protected 
private static boolean METHOD_1 ( TYPE_1 type ) { type = type . METHOD_2 ( ) ; while ( ! ( VAR_1 class . getName ( ) . equals ( type . METHOD_3 ( ) ) ) ) { if ( ( TYPE_2 . METHOD_4 ( type ) . length ) > 0 ) { return true ; } type = type . METHOD_2 ( ) ; } return false ; } } ; false return } ; ) ( METHOD_2 . type = type } ; true return { ) 0 > ) length . ) type ( METHOD_4 . TYPE_2 ( ( if { ) ) ) ) ( METHOD_3 . type ( equals . ) ( getName . class VAR_1 ( ! ( while ; ) ( METHOD_2 . type = type { ) type TYPE_1 ( METHOD_1 boolean static private 
public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) & & ( ! ( METHOD_2 ( VAR_2 ) ) ) ) & & ( ! ( METHOD_3 ( ) ) ) ) { return new TYPE_1 ( ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) ) ; } if ( VAR_3 . METHOD_4 ( ) ) { return METHOD_5 ( ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) ( METHOD_5 return { ) ) ( METHOD_4 . VAR_3 ( if } ; ) ) STRING_2 + ) ) ) ( getName . VAR_3 ( + STRING_1 ( ( ( TYPE_1 new return { ) ) ) ) ( METHOD_3 ( ! ( & & ) ) ) ) VAR_2 ( METHOD_2 ( ! ( & & ) ) ) VAR_1 ( METHOD_2 ( ! ( ( ( if { ) ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( ) ; TYPE_1 . Result r = METHOD_4 ( ) ; revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) ; METHOD_6 ( r , ( - 2 ) ) ; r = METHOD_7 ( r . getChangeId ( ) ) ; METHOD_6 ( r , ( - 2 ) ) ; } } ; ) ) 2 - ( , r ( METHOD_6 ; ) ) ( getChangeId . r ( METHOD_7 = r ; ) ) 2 - ( , r ( METHOD_6 ; ) ) ( reject . TYPE_2 ( METHOD_5 . ) r ( revision ; ) ( METHOD_4 = r Result . TYPE_1 ; ) ( METHOD_3 ; ) true ( METHOD_2 . VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 . Result r ) throws java.lang.Exception { revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; revision ( r ) . submit ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( project ) ; try { com.google.common.truth.Truth.assertThat ( repo . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) . isEqualTo ( r . METHOD_7 ( ) ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) ) ( METHOD_7 . r ( isEqualTo . ) ) ( METHOD_6 . ) STRING_1 ( METHOD_5 . repo ( com.google.common.truth.Truth.assertThat { try ; ) project ( METHOD_4 . VAR_1 = repo org.eclipse.jgit.lib.Repository ; ) ( submit . ) r ( revision ; ) ) ( METHOD_3 . TYPE_2 ( METHOD_2 . ) r ( revision { java.lang.Exception throws ) r Result . TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) ) ) ; assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_5 ) + STRING_6 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) + ( VAR_1 ) ) ) ) ; } } ; ) ) ) ) VAR_1 ( + ) ) STRING_5 + STRING_2 ( + STRING_1 ( ( ( METHOD_2 , ) ) VAR_1 ( + ) ) STRING_6 + ) STRING_5 + STRING_2 ( ( + STRING_1 ( ( ( assertEquals ; ) ) ) ) VAR_1 ( + ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( ( METHOD_2 , ) ) VAR_1 ( + ) ) STRING_4 + ) STRING_3 + STRING_2 ( ( + STRING_1 ( ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; } } ; ) class Factory . VAR_7 ( factory ; ) class Factory . VAR_6 ( factory ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class VAR_2 ( to . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . Id VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( TYPE_4 . METHOD_2 ( getRefName ( ) , VAR_4 . METHOD_3 ( ) ) ) & & ( VAR_4 . METHOD_4 ( ) . equals ( VAR_2 ) ) ) { VAR_3 . add ( VAR_4 ) ; } } return VAR_3 ; } } ; VAR_3 return } } ; ) VAR_4 ( add . VAR_3 { ) ) ) VAR_2 ( equals . ) ( METHOD_4 . VAR_4 ( & & ) ) ) ( METHOD_3 . VAR_4 , ) ( getRefName ( METHOD_2 . TYPE_4 ( ( if { ) VAR_1 : VAR_4 TYPE_1 ( for ; ) ) ( size . VAR_1 ( > TYPE_1 < java.util.ArrayList new = VAR_3 > TYPE_1 < java.util.List { ) VAR_2 Id . TYPE_3 , VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
public static int METHOD_1 ( ) { int VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_3 . METHOD_2 ( ) ) ; if ( VAR_4 . METHOD_3 ( ) ) { VAR_1 += VAR_4 . METHOD_2 ( ) ; } if ( VAR_5 . METHOD_3 ( ) ) { VAR_1 += VAR_5 . METHOD_2 ( ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ( METHOD_2 . VAR_5 += VAR_1 { ) ) ( METHOD_3 . VAR_5 ( if } ; ) ( METHOD_2 . VAR_4 += VAR_1 { ) ) ( METHOD_3 . VAR_4 ( if ; ) ) ( METHOD_2 . VAR_3 ( + ) ) ( METHOD_2 . VAR_2 ( = VAR_1 int { ) ( METHOD_1 int static public 
private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 set ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( set . METHOD_2 ( ) ) ; java.util.Collections . METHOD_1 ( VAR_1 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; } } ) ; return VAR_1 ; } } ; VAR_1 return ; ) } } ; ) ) ( METHOD_4 . VAR_3 ( METHOD_5 . ) ( METHOD_4 . VAR_2 return { ) VAR_3 TYPE_1 , VAR_2 TYPE_1 ( METHOD_3 int public { ) ( > TYPE_1 < TYPE_3 new , VAR_1 ( METHOD_1 . java.util.Collections ; ) ) ( METHOD_2 . set ( > TYPE_1 < java.util.ArrayList new = VAR_1 > TYPE_1 < java.util.List final { ) set TYPE_2 final ( METHOD_1 > TYPE_1 < java.util.List private 
private static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.lang.String > c , TYPE_1 < java.lang.String > p ) { assertEquals ( ( VAR_1 + STRING_1 ) , 1 , p . METHOD_2 ( ) ) ; METHOD_3 ( ( VAR_1 + STRING_1 ) , c , p . METHOD_4 ( 0 ) ) ; } } ; ) ) 0 ( METHOD_4 . p , c , ) STRING_1 + VAR_1 ( ( METHOD_3 ; ) ) ( METHOD_2 . p , 1 , ) STRING_1 + VAR_1 ( ( assertEquals { ) p > java.lang.String < TYPE_1 , c > java.lang.String < TYPE_1 , VAR_1 java.lang.String ( METHOD_1 void static private 
private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ; switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) ! = null ? VAR_5 : new TYPE_5 ( ) ; case VAR_6 : return new TYPE_6 ( ) ; default : throw new TYPE_7 ( ( STRING_1 + VAR_2 ) ) ; } } } } ; ) ) VAR_2 + STRING_1 ( ( TYPE_7 new throw : default ; ) ( TYPE_6 new return : VAR_6 case ; ) ( TYPE_5 new : VAR_5 ? null = ! ) VAR_5 ( return : VAR_4 case { ) VAR_2 ( switch ; ) VAR_3 ( METHOD_2 . TYPE_4 = VAR_2 TYPE_3 } ; ) ( TYPE_2 new return { ) VAR_1 ( if { ) ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 class ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_4 ( ) ; TYPE_4 VAR_4 = VAR_1 . METHOD_3 ( VAR_3 class ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_4 ) ; } } ; ) VAR_4 ( isEqualTo . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) class VAR_3 ( METHOD_3 . VAR_1 = VAR_4 TYPE_4 ; ) ( METHOD_4 . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) class VAR_3 ( METHOD_3 . VAR_1 = VAR_2 TYPE_4 ; ) ) ( TYPE_3 new ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 ! = null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } } ; ) CHAR_3 ( append . VAR_1 } } ; ) VAR_6 ( append . VAR_1 { else } ; ) VAR_4 , VAR_1 ( METHOD_1 . VAR_5 { ) null = ! VAR_4 ( if } ; ) CHAR_2 ( append . VAR_1 { else } ; false = VAR_3 { ) VAR_3 ( if { ) VAR_2 : VAR_4 TYPE_2 final ( for ; true = VAR_3 boolean ; ) CHAR_1 ( append . VAR_1 { ) VAR_2 > TYPE_2 < java.util.List final , VAR_1 TYPE_1 final ( METHOD_1 void public 
protected Project . NameKey METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = ( VAR_4 ) + VAR_1 ; VAR_5 = ( VAR_2 ! = null ) ? VAR_2 . get ( ) : null ; VAR_6 = VAR_3 ; return METHOD_1 ( in ) ; } } ; ) in ( METHOD_1 return ; VAR_3 = VAR_6 ; null : ) ( get . VAR_2 ? ) null = ! VAR_2 ( = VAR_5 ; VAR_1 + ) VAR_4 ( = name . in ; ) ( TYPE_2 new = in TYPE_2 { TYPE_1 throws ) VAR_3 boolean , VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey , VAR_1 java.lang.String ( METHOD_1 NameKey . Project protected 
private void METHOD_1 ( java.lang.String changeId ) throws java.io.IOException { TYPE_1 r = VAR_1 . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_2 ( ) . label ( STRING_3 , 2 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . r ; ) ) ( METHOD_3 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) 2 , STRING_3 ( label . ) ( TYPE_2 new , ) STRING_2 + ) changeId + STRING_1 ( ( ( METHOD_2 . VAR_1 = r TYPE_1 { java.io.IOException throws ) changeId java.lang.String ( METHOD_1 void private 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ; assertEquals ( STRING_3 , VAR_3 . toString ( ) ) ; final TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( STRING_4 ) , STRING_4 ) ; VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) ; assertEquals ( VAR_3 , VAR_4 ) ; } } ; ) VAR_4 , VAR_3 ( assertEquals ; ) ) ( toString . VAR_3 ( METHOD_2 . VAR_4 ; ) STRING_4 , ) STRING_4 ( TYPE_2 new ( TYPE_1 new = VAR_4 TYPE_1 final ; ) ) ( toString . VAR_3 , STRING_3 ( assertEquals ; ) VAR_2 , ) VAR_1 ( TYPE_2 new ( TYPE_1 new = VAR_3 TYPE_1 final ; STRING_2 = VAR_2 java.lang.String final ; STRING_1 = VAR_1 java.lang.String final { ) ( METHOD_1 void public 
public PatchSet . Id METHOD_1 ( ) throws TYPE_1 , com.google.gwtorm.server.OrmException , java.io.IOException { try { if ( magicBranch . edit ) { return METHOD_2 ( ) ; } else if ( VAR_1 == ( TYPE_2 . METHOD_3 ( ) ) ) { return METHOD_4 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_5 ( ) ; try { return METHOD_4 ( db ) ; } finally { db . close ( ) ; } } } finally { synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } } } } ; ) 1 ( update . VAR_3 { ) VAR_3 ( synchronized { finally } } } ; ) ( close . db { finally } ; ) db ( METHOD_4 return { try ; ) ( METHOD_5 . VAR_2 = db com.google.gerrit.reviewdb.server.ReviewDb { else } ; ) db ( METHOD_4 return { ) ) ) ( METHOD_3 . TYPE_2 ( == VAR_1 ( if else } ; ) ( METHOD_2 return { ) edit . magicBranch ( if { try { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_1 throws ) ( METHOD_1 Id . PatchSet public 
protected void METHOD_1 ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = VAR_2 . create ( TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ) psId , ) ( getChangeId . VAR_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id new , VAR_1 , db ( METHOD_4 . VAR_5 = VAR_4 PatchSetApproval . com.google.gerrit.reviewdb.client ; ) ) ( change . ) ) changeId ( METHOD_3 . ) ( get . VAR_3 ( METHOD_2 . TYPE_2 ( create . VAR_2 = VAR_1 TYPE_1 { com.google.gwtorm.server.OrmException throws ) psId int , changeId java.lang.String ( METHOD_1 void protected 
private TYPE_1 . ChangeInfo getChange ( TYPE_2 . Result VAR_1 ) throws java.io.IOException { TYPE_3 r = VAR_2 . get ( ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_1 ( ) ) ; return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 . ChangeInfo class ) ; } } ; ) class ChangeInfo . VAR_4 , ) ( METHOD_4 . r ( METHOD_3 . ) ( METHOD_2 . TYPE_4 return ; ) ) ( METHOD_1 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) ) STRING_2 + ) ) ) ( getChangeId . VAR_1 ( + STRING_1 ( ( ( get . VAR_2 = r TYPE_3 { java.io.IOException throws ) VAR_1 Result . TYPE_2 ( getChange ChangeInfo . TYPE_1 private 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; if ( sshd ) { modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; if ( ! ( VAR_3 ) ) { modules.add ( new TYPE_3 ( ) ) ; } if ( VAR_4 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; } } else { modules.add ( new TYPE_6 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } } ; ) modules ( METHOD_3 . VAR_1 return } ; ) ) ( TYPE_6 new ( modules.add { else } } ; ) ) ( TYPE_5 new ( modules.add { else } ; ) ) ( TYPE_4 new ( modules.add { ) VAR_4 ( if } ; ) ) ( TYPE_3 new ( modules.add { ) ) VAR_3 ( ! ( if ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( modules.add { ) sshd ( if ; ) ( > TYPE_2 < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) ( METHOD_1 TYPE_1 private 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ; return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . ) change , ) ( getProject . change , args ( TYPE_1 new return ; ) changeId , STRING_3 , change ( METHOD_5 . TYPE_2 ; ) changeId ( get . ) ( changes . ) db ( METHOD_4 . TYPE_1 = change com.google.gerrit.reviewdb.client.Change ; ) ) STRING_2 + STRING_1 ( , ) ) ) ( METHOD_3 . VAR_1 ( ! ( ( METHOD_2 . TYPE_2 { com.google.gwtorm.server.OrmException throws ) changeId Id . com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin , VAR_2 ) ; METHOD_4 ( admin ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 , admin , VAR_3 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_11 ) ; } } ; ) VAR_11 ( METHOD_8 . ) VAR_10 ( METHOD_8 . ) VAR_9 ( METHOD_7 . ) VAR_3 , admin , VAR_8 , VAR_7 ( METHOD_7 . ) VAR_6 ( to . ) VAR_5 ( to . ) VAR_1 , STRING_1 ( METHOD_6 . ) VAR_4 ( assertThat ; ) VAR_3 , VAR_1 ( METHOD_5 ; ) admin ( METHOD_4 ; ) VAR_2 , admin ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_4 in = new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 , STRING_1 ) , STRING_2 ) ) ; try { VAR_2 . METHOD_2 ( in ) ; } finally { in . close ( ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ( close . in { finally } ; ) in ( METHOD_2 . VAR_2 { try ; ) ) STRING_2 , ) STRING_1 , VAR_1 ( TYPE_2 new ( TYPE_2 new ( TYPE_5 new = in TYPE_4 ; ) ( TYPE_1 new = VAR_2 TYPE_1 { java.io.IOException , TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static private 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 ) ; try ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_3 ( ) , VAR_1 . METHOD_2 ( ) , TYPE_7 . METHOD_4 ( ) ) ) { u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ; } return VAR_4 . change ; } } ; change . VAR_4 return } ; ) ( METHOD_6 . ) VAR_4 , ) ( getId . VAR_1 ( METHOD_5 . u { ) ) ) ( METHOD_4 . TYPE_7 , ) ( METHOD_2 . VAR_1 , ) ( METHOD_3 . ) ( getProject . VAR_1 , ) ( get . VAR_6 ( create . VAR_5 = u TYPE_6 ( try ; ) VAR_3 , VAR_2 , ) ( METHOD_2 . VAR_1 ( TYPE_5 new = VAR_4 TYPE_5 { TYPE_4 , TYPE_3 throws ) VAR_3 TYPE_2 , VAR_2 java.lang.String , VAR_1 TYPE_1 ( METHOD_1 com.google.gerrit.reviewdb.client.Change public 
private static TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { if ( ! ( id . equals ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ) ) ) ) { TYPE_2 p = new TYPE_2 ( ) ; p . METHOD_3 ( walk . METHOD_4 ( ) , walk . METHOD_5 ( id ) ) ; return p ; } else { return new TYPE_3 ( ) ; } } } } ; ) ( TYPE_3 new return { else } ; p return ; ) ) id ( METHOD_5 . walk , ) ( METHOD_4 . walk ( METHOD_3 . p ; ) ( TYPE_2 new = p TYPE_2 { ) ) ) ) ( METHOD_2 . org.eclipse.jgit.lib.ObjectId ( equals . id ( ! ( if { java.io.IOException throws ) id org.eclipse.jgit.lib.ObjectId , walk org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 TYPE_1 static private 
public TYPE_1 format ( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; TYPE_4 ctl = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ; return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , ctl , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) ) ) ; } } ; ) ) ) VAR_3 ( com.google.gerrit.reviewdb.client.Account.Id new , psId , ctl , ) ( get . db ( METHOD_3 . VAR_2 , cd , VAR_1 , out ( format return ; ) ) ( user . VAR_1 ( METHOD_2 . ) ( METHOD_1 . cd = ctl TYPE_4 ; ) ( currentPatchSetId . ) ( change . cd = psId com.google.gerrit.reviewdb.client.PatchSet.Id { com.google.gwtorm.server.OrmException , TYPE_3 throws ) cd com.google.gerrit.server.query.change.ChangeData , VAR_1 TYPE_2 , out TYPE_1 ( format TYPE_1 public 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { try { TYPE_5 VAR_1 = new TYPE_5 ( ) ; for ( int i = 0 ; i < ( p . METHOD_2 ( ) ) ; i ++ ) { VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , p . METHOD_4 ( i ) ) , VAR_2 ) ; } return VAR_1 ; } catch ( TYPE_5 e ) { throw new TYPE_4 ( ( STRING_1 + p ) , e ) ; } } } } ; ) e , ) p + STRING_1 ( ( TYPE_4 new throw { ) e TYPE_5 ( catch } ; VAR_1 return } ; ) VAR_2 , ) ) i ( METHOD_4 . p , schema ( METHOD_3 . TYPE_6 ( add . VAR_1 { ) ++ i ; ) ) ( METHOD_2 . p ( < i ; 0 = i int ( for ; ) ( TYPE_5 new = VAR_1 TYPE_5 { try { TYPE_4 throws ) p > com.google.gerrit.server.query.change.ChangeData < TYPE_3 , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( METHOD_1 TYPE_1 static private 
public static void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { final TYPE_1 p = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ; VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ; } } } } ; ) ) ( METHOD_6 . p ( METHOD_5 . VAR_3 ; ) ) ( METHOD_6 . p ( METHOD_5 . VAR_2 ; ) ) ( METHOD_4 . p ( METHOD_3 . TYPE_2 ; ) ( METHOD_2 . VAR_1 = p TYPE_1 final { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void static public 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; } } ; ) VAR_1 ( create . VAR_4 return } ; VAR_1 = VAR_2 ; ) ) ( METHOD_5 . ) ( METHOD_4 , ) ( METHOD_3 . ) ( getProject ( METHOD_2 . VAR_3 = VAR_1 { ) null == VAR_1 ( if ; VAR_2 = VAR_1 TYPE_3 { TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( psId . getParentKey ( ) ) ; if ( c == null ) { return null ; } TYPE_1 notes = VAR_1 . create ( db , c ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ; return ps ! = null ? ps . METHOD_2 ( ) : null ; } } ; null : ) ( METHOD_2 . ps ? null = ! ps return ; ) psId , notes , db ( get . VAR_2 = ps com.google.gerrit.reviewdb.client.PatchSet ; ) c , db ( create . VAR_1 = notes TYPE_1 } ; null return { ) null == c ( if ; ) ) ( getParentKey . psId ( get . ) ( changes . db = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) psId com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 > java.lang.String < java.util.List public 
private TYPE_1 METHOD_1 ( byte [ ] VAR_1 , int VAR_2 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 VAR_3 = new TYPE_7 ( VAR_1 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_5 = TYPE_8 . METHOD_2 ( VAR_6 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 , key . get ( ) , VAR_5 ) ; return VAR_4 ; } } ; VAR_4 return ; ) VAR_5 , ) ( get . key , VAR_2 ( METHOD_3 . VAR_4 ; ) VAR_3 ( METHOD_3 . VAR_5 ; ) VAR_6 ( METHOD_2 . TYPE_8 = VAR_5 TYPE_8 ; ) STRING_1 ( METHOD_2 . TYPE_1 = VAR_4 TYPE_1 ; ) VAR_1 ( TYPE_7 new = VAR_3 TYPE_7 { TYPE_6 , TYPE_5 , TYPE_4 , TYPE_3 , TYPE_2 throws ) VAR_2 int , VAR_1 ] [ byte ( METHOD_1 TYPE_1 private 
public TYPE_1 apply ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_2 , TYPE_3 , java.io.IOException { try { return this . apply ( new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 , VAR_3 . get ( ) ) ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( VAR_1 . get ( ) ) ; } } } } ; ) ) ( get . VAR_1 ( TYPE_3 new throw { ) e TYPE_5 ( catch } ; ) ) ) ) ( get . VAR_3 , VAR_1 ( METHOD_1 . VAR_2 ( TYPE_4 new ( apply . this return { try { java.io.IOException , TYPE_3 , TYPE_2 throws ) VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey ( apply TYPE_1 public 
private void METHOD_1 ( ) { if ( TYPE_1 . equals ( TYPE_2 . METHOD_2 ( VAR_1 . getValue ( VAR_1 . METHOD_3 ( ) ) ) ) ) { VAR_2 . METHOD_4 ( false ) ; final TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_5 ( VAR_4 . FALSE ) ; TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 ) ; } else { VAR_2 . METHOD_4 ( VAR_1 . METHOD_7 ( ) ) ; } } } } ; ) ) ( METHOD_7 . VAR_1 ( METHOD_4 . VAR_2 { else } ; ) VAR_3 , VAR_2 ( METHOD_6 . TYPE_4 ; ) FALSE . VAR_4 ( METHOD_5 . VAR_3 ; ) ( TYPE_3 new = VAR_3 TYPE_3 final ; ) false ( METHOD_4 . VAR_2 { ) ) ) ) ) ( METHOD_3 . VAR_1 ( getValue . VAR_1 ( METHOD_2 . TYPE_2 ( equals . TYPE_1 ( if { ) ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) throws java.lang.Exception { try { final java.util.List < ? > VAR_2 = VAR_3 . METHOD_2 ( ( ( java.lang.String ) ( VAR_1 ) ) ) ; return ( VAR_2 ! = null ) & & ( ! ( VAR_2 . isEmpty ( ) ) ) ? VAR_2 : null ; } catch ( TYPE_2 e ) { return null ; } } } } ; null return { ) e TYPE_2 ( catch } ; null : VAR_2 ? ) ) ) ( isEmpty . VAR_2 ( ! ( & & ) null = ! VAR_2 ( return ; ) ) ) VAR_1 ( ) java.lang.String ( ( ( METHOD_2 . VAR_3 = VAR_2 > ? < java.util.List final { try { java.lang.Exception throws ) VAR_1 TYPE_1 final ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ; r . METHOD_2 ( ) ; final java.lang.String VAR_3 = STRING_3 ; TYPE_2 in = new TYPE_2 ( ) ; VAR_4 = VAR_1 ; r = VAR_2 . put ( ( STRING_2 + VAR_3 ) , in ) ; com.google.gerrit.reviewdb.client.Project project = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_3 ) ) . getProject ( ) ; org.junit.Assert.assertEquals ( VAR_4 , project . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . project , VAR_4 ( org.junit.Assert.assertEquals ; ) ( getProject . ) ) VAR_3 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( get . VAR_5 = project com.google.gerrit.reviewdb.client.Project ; ) in , ) VAR_3 + STRING_2 ( ( put . VAR_2 = r ; VAR_1 = VAR_4 ; ) ( TYPE_2 new = in TYPE_2 ; STRING_3 = VAR_3 java.lang.String final ; ) ( METHOD_2 . r ; ) ) VAR_1 + STRING_2 ( ( put . VAR_2 = r TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 . Change update ( TYPE_1 . Change change ) { if ( ( ( change . getStatus ( ) ) == ( VAR_1 ) ) & & ( change . currentPatchSetId ( ) . equals ( VAR_2 ) ) ) { change . METHOD_1 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( change ) ; return change ; } else { return null ; } } } } ; null return { else } ; change return ; ) change ( METHOD_2 . TYPE_2 ; ) VAR_3 ( METHOD_1 . change { ) ) ) VAR_2 ( equals . ) ( currentPatchSetId . change ( & & ) ) VAR_1 ( == ) ) ( getStatus . change ( ( ( if { ) change Change . TYPE_1 ( update Change . TYPE_1 public 
private static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String path , TYPE_2 < TYPE_1 > VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { VAR_1 . get ( i ) . METHOD_2 ( path ) ; } return TYPE_3 . METHOD_3 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_3 . TYPE_3 return } ; ) path ( METHOD_2 . ) i ( get . VAR_1 { ) ++ i ; ) ) ( length . VAR_1 ( < i ; 0 = i int ( for { ) VAR_1 > TYPE_1 < TYPE_2 , path java.lang.String ( METHOD_1 > TYPE_1 < java.util.List static private 
private com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ; if ( VAR_2 == null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ; } TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_4 . get ( VAR_3 ) ; } } ; ) VAR_3 ( get . VAR_4 return ; ) ) ( METHOD_3 . ) ) ( getName . TYPE_3 ( get . ) ( METHOD_2 . VAR_2 ( TYPE_2 new = VAR_3 TYPE_2 } ; ) STRING_2 ( get . ) ( METHOD_2 . VAR_1 = VAR_2 { ) null == VAR_2 ( if ; ) STRING_1 ( get . ) ( METHOD_2 . VAR_1 = VAR_2 TYPE_1 { ) VAR_1 TYPE_1 ( METHOD_1 AccountGroup . com.google.gerrit.reviewdb.client private 
public TYPE_1 < TYPE_2 > get ( ) { TYPE_3 < TYPE_2 > m = new TYPE_3 < TYPE_2 > ( ) ; java.util.List < TYPE_4 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_1 ( type ) ; if ( VAR_1 ! = null ) { for ( TYPE_4 < TYPE_2 > b : VAR_1 ) { m . put ( STRING_1 , b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) ; } } return m ; } } ; m return } } ; ) ) ( get . ) ( METHOD_2 . b , ) ( getKey . b , STRING_1 ( put . m { ) VAR_1 : b > TYPE_2 < TYPE_4 ( for { ) null = ! VAR_1 ( if ; ) type ( METHOD_1 . VAR_2 = VAR_1 > > TYPE_2 < TYPE_4 < java.util.List ; ) ( > TYPE_2 < TYPE_3 new = m > TYPE_2 < TYPE_3 { ) ( get > TYPE_2 < TYPE_1 public 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_1 > ( this , new TYPE_3 < TYPE_1 > ( ) { public void onSuccess ( final TYPE_1 result ) { VAR_2 . display ( result , VAR_1 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_3 ( ) ; } } } ) ) ; } } ; ) ) } } } ; ) ( METHOD_3 ; false = VAR_3 { ) VAR_3 ( if ; ) VAR_1 , result ( display . VAR_2 { ) result TYPE_1 final ( onSuccess void public { ) ( > TYPE_1 < TYPE_3 new , this ( > TYPE_1 < TYPE_2 new , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void protected 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ; TYPE_3 refs = ( ( this . refs ) ! = null ) ? this . refs : new TYPE_4 ( repo ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( refs ) ) ) ) { return METHOD_4 ( repo ) ; } } return super . METHOD_1 ( repo ) ; } } ; ) repo ( METHOD_1 . super return } } ; ) repo ( METHOD_4 return { ) ) ) ) refs ( METHOD_3 . VAR_2 ( ! ( || ) null == VAR_2 ( ( if ; ) repo ( TYPE_4 new : refs . this ? ) null = ! ) refs . this ( ( = refs TYPE_3 ; ) change ( METHOD_2 . TYPE_2 = VAR_2 TYPE_2 { ) VAR_1 ( if { java.io.IOException throws ) repo org.eclipse.jgit.lib.Repository ( METHOD_1 TYPE_1 protected 
public void METHOD_1 ( java.lang.String path , boolean VAR_1 ) throws TYPE_1 { try { TYPE_2 < TYPE_3 , TYPE_4 > view ; if ( VAR_1 ) { view = VAR_2 ; } else { view = VAR_3 ; } view . apply ( VAR_4 . get ( ) . METHOD_2 ( revision , TYPE_5 . METHOD_3 ( path ) ) , new TYPE_4 ( ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e java.lang.Exception ( catch } ; ) ) ( TYPE_4 new , ) ) path ( METHOD_3 . TYPE_5 , revision ( METHOD_2 . ) ( get . VAR_4 ( apply . view } ; VAR_3 = view { else } ; VAR_2 = view { ) VAR_1 ( if ; view > TYPE_4 , TYPE_3 < TYPE_2 { try { TYPE_1 throws ) VAR_1 boolean , path java.lang.String ( METHOD_1 void public 
public static TYPE_1 METHOD_1 ( TYPE_2 group ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( TYPE_3 . METHOD_2 ( group ) ) & & ( ( ( TYPE_4 ) ( group ) ) . METHOD_3 ( ) ) ) { VAR_2 = true ; } return VAR_1 ; } } ; VAR_1 return } ; true = VAR_2 { ) ) ) ( METHOD_3 . ) ) group ( ) TYPE_4 ( ( ( & & ) ) group ( METHOD_2 . TYPE_3 ( ( if ; ) ( TYPE_1 new = VAR_1 TYPE_1 { ) group TYPE_2 ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_11 ( METHOD_7 . ) VAR_10 ( METHOD_6 . ) VAR_9 , VAR_8 ( METHOD_6 . ) VAR_7 ( to . ) VAR_3 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_6 ( assertThat ; ) VAR_5 , VAR_4 , changeId . VAR_1 , VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 , TYPE_2 . ChangeInfo VAR_2 , TYPE_3 VAR_3 ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_6 ) . isEqualTo ( 1 ) ; if ( name . equals ( STRING_1 ) ) { return false ; } if ( name . equals ( STRING_2 ) ) { VAR_1 . label = STRING_3 ; } return true ; } } ; true return } ; STRING_3 = label . VAR_1 { ) ) STRING_2 ( equals . name ( if } ; false return { ) ) STRING_1 ( equals . name ( if ; ) 1 ( isEqualTo . ) VAR_6 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) VAR_5 ( isEqualTo . ) VAR_4 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 . ) VAR_2 ( com.google.common.truth.Truth.assertThat { ) VAR_3 TYPE_3 , VAR_2 ChangeInfo . TYPE_2 , VAR_1 TYPE_1 , name java.lang.String ( METHOD_1 boolean public 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else if ( ( VAR_2 ) == null ) { TYPE_2 VAR_3 = METHOD_5 ( ) ; if ( ! ( METHOD_6 ( ) . METHOD_7 ( ) ) ) { VAR_1 . METHOD_8 ( VAR_3 , VAR_4 . METHOD_9 ( ) ) ; } } else { METHOD_10 ( ) ; } } } } ; ) ( METHOD_10 { else } } ; ) ) ( METHOD_9 . VAR_4 , VAR_3 ( METHOD_8 . VAR_1 { ) ) ) ( METHOD_7 . ) ( METHOD_6 ( ! ( if ; ) ( METHOD_5 = VAR_3 TYPE_2 { ) null == ) VAR_2 ( ( if else } ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . TYPE_1 { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) ( METHOD_1 void 
boolean METHOD_1 ( ) { java.lang.String [ ] projects = config . METHOD_2 ( ) ; boolean VAR_1 = ( projects . length ) == 1 ; if ( VAR_1 ) { java.lang.String VAR_2 = projects [ 0 ] ; if ( ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ! = ( VAR_3 ) ) { VAR_1 = false ; } } return VAR_1 ; } } ; VAR_1 return } } ; false = VAR_1 { ) ) VAR_3 ( = ! ) ) VAR_2 ( METHOD_3 . TYPE_1 ( ( if ; ] 0 [ projects = VAR_2 java.lang.String { ) VAR_1 ( if ; 1 == ) length . projects ( = VAR_1 boolean ; ) ( METHOD_2 . config = projects ] [ java.lang.String { ) ( METHOD_1 boolean 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_1 value , TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ; TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ; METHOD_5 ( VAR_2 , ( ) - > { VAR_2 . set ( value ) ; } ) ; } } ; ) } ; ) value ( set . VAR_2 { > - ) ( , VAR_2 ( METHOD_5 ; ) VAR_1 , type , name ( METHOD_4 = VAR_2 > TYPE_1 < TYPE_4 ; ) ) ) ( METHOD_3 . value ( ) > TYPE_1 < TYPE_3 ( ( = type > TYPE_1 < TYPE_3 ; ) ( METHOD_2 . VAR_1 { ) VAR_1 TYPE_2 , value TYPE_1 , name java.lang.String ( METHOD_1 void > TYPE_1 < public 
private java.lang.String METHOD_1 ( final TYPE_1 . Account account ) { if ( account ! = null ) { java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ; if ( ( account . METHOD_3 ( ) ) ! = null ) { result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } } ; VAR_1 return } ; result return } ; STRING_2 + ) ) ) ( METHOD_3 . account ( + STRING_1 ( += result { ) null = ! ) ) ( METHOD_3 . account ( ( if ; ) ( METHOD_2 . account : VAR_1 ? ) null == ) ) ( METHOD_2 . account ( ( = result java.lang.String { ) null = ! account ( if { ) account Account . TYPE_1 final ( METHOD_1 java.lang.String private 
public static void METHOD_1 ( int changeId , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ( ( ( VAR_3 ) + changeId ) + STRING_1 ) ) ; TYPE_4 msg = new TYPE_4 ( ) ; msg . METHOD_2 ( message ) ; VAR_2 . METHOD_3 ( msg , VAR_1 ) ; } } ; ) VAR_1 , msg ( METHOD_3 . VAR_2 ; ) message ( METHOD_2 . msg ; ) ( TYPE_4 new = msg TYPE_4 ; ) ) STRING_1 + ) changeId + ) VAR_3 ( ( ( ( TYPE_3 new = VAR_2 TYPE_3 { ) VAR_1 > ChangeInfo . TYPE_2 < TYPE_1 , message java.lang.String , changeId int ( METHOD_1 void static public 
public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; VAR_2 = VAR_1 ; try { VAR_3 . apply ( rsrc , in ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) in , rsrc ( apply . VAR_3 { try ; VAR_1 = VAR_2 ; ) ( TYPE_2 new = in TYPE_2 { TYPE_1 throws ) VAR_1 java.lang.String ( METHOD_1 void public 
public static void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_1 . Change change ) throws TYPE_2 . OrmException { final java.util.List < TYPE_1 . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ; for ( TYPE_1 . PatchSetApproval a : approvals ) { a . METHOD_5 ( change ) ; } db . METHOD_2 ( ) . update ( approvals ) ; } } ; ) approvals ( update . ) ( METHOD_2 . db } ; ) change ( METHOD_5 . a { ) approvals : a PatchSetApproval . TYPE_1 ( for ; ) ( METHOD_4 . ) ) ( change.getId ( METHOD_3 . ) ( METHOD_2 . db = approvals > PatchSetApproval . TYPE_1 < java.util.List final { OrmException . TYPE_2 throws ) change Change . TYPE_1 final , db ReviewDb . TYPE_1 final ( METHOD_1 void static public 
public void display ( final TYPE_1 VAR_1 ) { METHOD_1 ( ) ; final TYPE_2 . PatchSet VAR_2 = VAR_1 . METHOD_2 ( ) ; currentPatchSetId = VAR_2 . METHOD_3 ( ) ; for ( final TYPE_2 . PatchSet ps : VAR_1 . METHOD_4 ( ) ) { if ( ps == VAR_2 ) { add ( new TYPE_3 ( VAR_3 , VAR_1 , VAR_1 . METHOD_5 ( ) ) ) ; } else { add ( new TYPE_3 ( VAR_3 , VAR_1 , ps ) ) ; } } } } } } ; ) ) ps , VAR_1 , VAR_3 ( TYPE_3 new ( add { else } ; ) ) ) ( METHOD_5 . VAR_1 , VAR_1 , VAR_3 ( TYPE_3 new ( add { ) VAR_2 == ps ( if { ) ) ( METHOD_4 . VAR_1 : ps PatchSet . TYPE_2 final ( for ; ) ( METHOD_3 . VAR_2 = currentPatchSetId ; ) ( METHOD_2 . VAR_1 = VAR_2 PatchSet . TYPE_2 final ; ) ( METHOD_1 { ) VAR_1 TYPE_1 final ( display void public 
private boolean METHOD_1 ( TYPE_1 . Id id , TYPE_2 . ReviewDb db ) throws TYPE_3 . OrmException { TYPE_2 . PatchSet ps = db . patchSets ( ) . get ( id ) ; if ( ps == null ) { throw new TYPE_3 . OrmException ( ( ( STRING_1 + id ) + STRING_2 ) ) ; } return ps . METHOD_2 ( ) ; } } ; ) ( METHOD_2 . ps return } ; ) ) STRING_2 + ) id + STRING_1 ( ( ( OrmException . TYPE_3 new throw { ) null == ps ( if ; ) id ( get . ) ( patchSets . db = ps PatchSet . TYPE_2 { OrmException . TYPE_3 throws ) db ReviewDb . TYPE_2 , id Id . TYPE_1 ( METHOD_1 boolean private 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { java.lang.String VAR_1 ; if ( info . METHOD_2 ( ) . equals ( info . METHOD_3 ( ) ) ) { VAR_1 = TYPE_2 . METHOD_4 ( ) ; } else { VAR_1 = TYPE_2 . METHOD_5 ( ) ; } VAR_2 . METHOD_6 ( VAR_1 ) ; VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( info . METHOD_3 ( ) ) ) ; METHOD_8 ( ( ( FLOAT_1 - ( VAR_4 ) ) - ( METHOD_9 ( VAR_5 ) ) ) ) ; } } ; ) ) ) ) VAR_5 ( METHOD_9 ( - ) ) VAR_4 ( - FLOAT_1 ( ( ( METHOD_8 ; ) ) ) ( METHOD_3 . info ( METHOD_7 . TYPE_3 ( METHOD_6 . VAR_3 ; ) VAR_1 ( METHOD_6 . VAR_2 } ; ) ( METHOD_5 . TYPE_2 = VAR_1 { else } ; ) ( METHOD_4 . TYPE_2 = VAR_1 { ) ) ) ( METHOD_3 . info ( equals . ) ( METHOD_2 . info ( if ; VAR_1 java.lang.String { ) info ChangeInfo . TYPE_1 ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_1 group ) { if ( group ! = null ) { TYPE_1 ref = VAR_1 . get ( group . METHOD_2 ( ) ) ; if ( ref ! = null ) { return ref ; } VAR_1 . put ( group . METHOD_2 ( ) , group ) ; } return group ; } } ; group return } ; ) group , ) ( METHOD_2 . group ( put . VAR_1 } ; ref return { ) null = ! ref ( if ; ) ) ( METHOD_2 . group ( get . VAR_1 = ref TYPE_1 { ) null = ! group ( if { ) group TYPE_1 ( METHOD_1 TYPE_1 public 
private static void codemirror ( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line , final boolean edit ) { TYPE_3 . METHOD_1 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , ( edit ? new TYPE_6 ( VAR_1 , id , line ) : new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } } ) ; } } ; ) } } ; ) ) ) line , VAR_2 , ) ( get . id , ) ( getParentKey . id , VAR_1 ( TYPE_7 new : ) line , id , VAR_1 ( TYPE_6 new ? edit ( , token ( display . TYPE_5 { ) ( onSuccess void public { ) token ( TYPE_4 new ( METHOD_1 . TYPE_3 { ) edit boolean final , line int final , VAR_2 TYPE_2 final , id Key . TYPE_1 final , VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id final , token java.lang.String final ( codemirror void static private 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } } ; ) } } ; true return { ) event TYPE_2 ( METHOD_4 boolean public { ) null , null , null ( TYPE_1 new ( METHOD_3 . ) class VAR_7 ( bind ; ) VAR_5 ( METHOD_3 . ) class VAR_6 ( bind ; ) class VAR_6 ( METHOD_2 = VAR_5 ; ) VAR_3 ( METHOD_3 . ) class VAR_4 ( bind ; ) class VAR_4 ( METHOD_2 = VAR_3 ; ) VAR_1 ( METHOD_3 . ) class VAR_2 ( bind ; ) class VAR_2 ( METHOD_2 = VAR_1 { ) ( METHOD_1 void protected 
private synchronized TYPE_1 get ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws TYPE_2 { TYPE_1 repo = VAR_1 . get ( name . get ( ) . METHOD_1 ( ) ) ; if ( repo ! = null ) { return repo ; } else { throw new TYPE_2 ( name . get ( ) ) ; } } } } ; ) ) ( get . name ( TYPE_2 new throw { else } ; repo return { ) null = ! repo ( if ; ) ) ( METHOD_1 . ) ( get . name ( get . VAR_1 = repo TYPE_1 { TYPE_2 throws ) name com.google.gerrit.reviewdb.client.Project.NameKey ( get TYPE_1 synchronized private 
public void METHOD_1 ( TYPE_1 p , TYPE_2 < TYPE_3 . PatchSetApproval > VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { p . approvals = new java.util.ArrayList < TYPE_4 > ( VAR_1 . size ( ) ) ; for ( TYPE_3 . PatchSetApproval a : VAR_1 ) { if ( ( a . getValue ( ) ) ! = 0 ) { VAR_2 . add ( METHOD_2 ( a ) ) ; } } if ( VAR_2 . isEmpty ( ) ) { p . approvals = null ; } } } } } } ; null = approvals . p { ) ) ( isEmpty . VAR_2 ( if } } ; ) ) a ( METHOD_2 ( add . VAR_2 { ) 0 = ! ) ) ( getValue . a ( ( if { ) VAR_1 : a PatchSetApproval . TYPE_3 ( for ; ) ) ( size . VAR_1 ( > TYPE_4 < java.util.ArrayList new = approvals . p { ) ) ) ( isEmpty . VAR_1 ( ! ( if { ) VAR_1 > PatchSetApproval . TYPE_3 < TYPE_2 , p TYPE_1 ( METHOD_1 void public 
public long METHOD_1 ( TYPE_1 p ) { long VAR_1 = METHOD_2 ( ) ; long VAR_2 = p . METHOD_2 ( ) ; if ( ( VAR_1 > 0 ) & & ( VAR_2 > 0 ) ) { return TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_1 ( METHOD_4 . TYPE_2 return { else } ; ) VAR_2 , VAR_1 ( METHOD_3 . TYPE_2 return { ) ) 0 > VAR_2 ( & & ) 0 > VAR_1 ( ( if ; ) ( METHOD_2 . p = VAR_2 long ; ) ( METHOD_2 = VAR_1 long { ) p TYPE_1 ( METHOD_1 long public 
void METHOD_1 ( final TYPE_1 . NameKey project , final java.lang.String ref , final TYPE_2 VAR_1 ) { synchronized ( VAR_2 ) { TYPE_3 e = VAR_2 . get ( VAR_1 ) ; if ( e == null ) { e = new TYPE_3 ( this , project . get ( ) , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_1 ( e , VAR_5 , VAR_6 ) ; VAR_2 . put ( VAR_1 , e ) ; } e . METHOD_2 ( ref ) ; } } } } ; ) ref ( METHOD_2 . e } ; ) e , VAR_1 ( put . VAR_2 ; ) VAR_6 , VAR_5 , e ( METHOD_1 . VAR_4 ; ) VAR_1 , VAR_3 , ) ( get . project , this ( TYPE_3 new = e { ) null == e ( if ; ) VAR_1 ( get . VAR_2 = e TYPE_3 { ) VAR_2 ( synchronized { ) VAR_1 TYPE_2 final , ref java.lang.String final , project NameKey . TYPE_1 final ( METHOD_1 void 
TYPE_1 METHOD_1 ( TYPE_2 user , TYPE_3 revision ) { return new TYPE_1 ( user . METHOD_2 ( ) , revision . METHOD_3 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; } } ; ) ) ( of . TYPE_5 , VAR_2 , VAR_1 , null , ) ) ( getAccountId . user ( of . TYPE_4 , ) ( METHOD_3 . revision , ) ( METHOD_2 . user ( TYPE_1 new return { ) revision TYPE_3 , user TYPE_2 ( METHOD_1 TYPE_1 
public void METHOD_1 ( ) throws TYPE_1 { VAR_1 = new TYPE_2 ( ) ; TYPE_3 update = METHOD_2 ( VAR_2 , VAR_1 ) ; try { VAR_3 . update ( VAR_4 ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_4 . OrmException e ) { org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ; } METHOD_6 ( update , 1 ) ; } } ; ) 1 , update ( METHOD_6 } ; ) VAR_1 , ) ( METHOD_5 . e ( METHOD_4 . org.junit.Assert { ) e OrmException . TYPE_4 ( catch } ; ) STRING_1 ( METHOD_3 . org.junit.Assert ; ) VAR_4 ( update . VAR_3 { try ; ) VAR_1 , VAR_2 ( METHOD_2 = update TYPE_3 ; ) ( TYPE_2 new = VAR_1 { TYPE_1 throws ) ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_4 . get ( ) . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ) { if ( ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . name ) ) ) & & ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . url ) ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) VAR_3 ( add . VAR_2 { ) ) ) ) url . VAR_3 ( METHOD_3 . TYPE_2 ( ! ( & & ) ) ) name . VAR_3 ( METHOD_3 . TYPE_2 ( ! ( ( if { ) ) file , VAR_1 , ) ( getName . project ( METHOD_2 . ) ( get . VAR_4 : VAR_3 TYPE_1 ( for ; ) ( > < java.util.ArrayList new = VAR_2 > TYPE_1 < java.util.List { ) file java.lang.String , VAR_1 java.lang.String , project com.google.gerrit.reviewdb.client.Project ( METHOD_1 > TYPE_1 < java.util.List private 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . get ( ) . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_2 . ) ) ( get . ) ( getRevision . patchSet ( revision . ) ) ( get . ) ( getParentKey . ) ( getId . patchSet ( id . ) ( changes . ) ( get . VAR_2 { TYPE_2 throws ) VAR_1 TYPE_1 final , patchSet com.google.gerrit.reviewdb.client.PatchSet ( METHOD_1 void private 
public boolean METHOD_1 ( ) { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ; } } ; ) ) ( METHOD_1 . ) ( METHOD_3 ( || ) ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 ( || ) ) ) ( METHOD_2 . ) ( METHOD_4 ( || ) ) ) ( METHOD_2 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( ( return { ) ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 , VAR_11 ) . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . ) VAR_11 , VAR_10 ( METHOD_6 . ) VAR_9 ( METHOD_5 . ) VAR_8 , VAR_7 ( METHOD_5 . ) VAR_6 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_2 . of ( STRING_1 , TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) ) ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_6 , VAR_7 . Collections < java.lang.String , java.util.ArrayList < TYPE_4 > > METHOD_4 ( ) ) ; } } ; ) ) ( METHOD_4 > > TYPE_4 < java.util.ArrayList , java.lang.String < Collections . VAR_7 , VAR_6 , VAR_1 ( METHOD_2 . TYPE_1 ; ) ) ) VAR_5 , VAR_4 , VAR_3 ( METHOD_3 . TYPE_3 , STRING_1 ( of . TYPE_2 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; METHOD_4 ( INT_1 ) ; TYPE_2 . a VAR_3 ; TYPE_3 to ; TYPE_4 revision ; } } ; revision TYPE_4 ; to TYPE_3 ; VAR_3 a . TYPE_2 ; ) INT_1 ( METHOD_4 ; id return ; ) ( METHOD_3 . VAR_1 ; ) } { ] [ byte new , VAR_2 ( insert . VAR_1 = id org.eclipse.jgit.lib.ObjectId ; ) ( METHOD_2 . repo = VAR_1 TYPE_1 { java.io.IOException throws ) repo org.eclipse.jgit.lib.Repository final ( METHOD_1 org.eclipse.jgit.lib.ObjectId static private 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ; final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) ! = null ) { VAR_4 . METHOD_3 ( key ) ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 , null ) ; METHOD_6 ( ) ; } } ; ) ( METHOD_6 ; ) null , VAR_2 , VAR_1 , id , key ( METHOD_5 . VAR_4 = VAR_3 ; ) id ( METHOD_4 . VAR_4 = key } ; ) key ( METHOD_3 . VAR_4 { ) null = ! ) VAR_3 ( ( if ; ) ( METHOD_2 . res = VAR_2 Key . TYPE_2 final ; ) ( getAccountId . res = id com.google.gerrit.reviewdb.client.Account.Id final { ) VAR_1 boolean final , res TYPE_1 final ( METHOD_1 void public 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_2 > VAR_1 = VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ; for ( TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = VAR_3 . getValue ( ) ; if ( ( VAR_4 . type ) == null ) { VAR_4 . type = VAR_5 ; } VAR_4 . name = VAR_3 . getKey ( ) ; } return VAR_1 . values ( ) ; } } ; ) ( values . VAR_1 return } ; ) ( getKey . VAR_3 = name . VAR_4 } ; VAR_5 = type . VAR_4 { ) null == ) type . VAR_4 ( ( if ; ) ( getValue . VAR_3 = VAR_4 TYPE_2 { ) ) ( METHOD_2 . VAR_1 : VAR_3 > TYPE_2 , java.lang.String < TYPE_4 ( for ; ) ) ( TYPE_3 new ( apply . ) ( get . VAR_2 = VAR_1 > TYPE_2 , java.lang.String < java.util.Map { ) ( METHOD_1 > TYPE_2 < TYPE_1 private 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ; install ( VAR_11 ) ; } } ; ) VAR_11 ( install ; ) class VAR_10 ( to . ) class VAR_9 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) class Factory . VAR_8 ( factory ; ) class Factory . VAR_7 ( factory ; ) VAR_6 ( in . ) class VAR_5 ( METHOD_3 . ) class VAR_4 ( bind ; ) class VAR_3 ( METHOD_3 . ) class VAR_2 ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return null ; } for ( TYPE_2 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . METHOD_3 ( STRING_1 ) ) { return VAR_3 . getValue ( ) ; } } return null ; } } ; null return } } ; ) ( getValue . VAR_3 return { ) ) STRING_1 ( METHOD_3 . ) ( getName . VAR_3 ( if { ) VAR_2 : VAR_3 TYPE_2 ( for } ; null return { ) null == VAR_2 ( if ; ) ( METHOD_2 . VAR_1 = VAR_2 ] [ TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , VAR_2 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_4 : VAR_1 ) { VAR_3 . add ( ( STRING_1 + VAR_4 ) ) ; } com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_5 . ) ) m ( METHOD_4 . TYPE_3 ( com.google.common.truth.Truth.assertThat } ; ) ) VAR_4 + STRING_1 ( ( add . VAR_3 { ) VAR_1 : VAR_4 java.lang.String ( for ; ) ( > < java.util.ArrayList new = VAR_3 > java.lang.String < java.util.List ; ) VAR_2 , c , repo ( METHOD_3 . TYPE_2 = m > TYPE_1 < java.util.List ; ) VAR_1 ( METHOD_2 = c org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 revision ( java.lang.String id ) throws TYPE_2 { try { return VAR_1 . create ( VAR_2 . METHOD_1 ( change , TYPE_3 . METHOD_2 ( id ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ) id ( METHOD_2 . TYPE_3 , change ( METHOD_1 . VAR_2 ( create . VAR_1 return { try { TYPE_2 throws ) id java.lang.String ( revision TYPE_1 public 
private void METHOD_1 ( final TYPE_1 . ReviewDb db ) throws TYPE_2 . OrmException { VAR_1 . METHOD_2 ( db . METHOD_3 ( ) . METHOD_4 ( changeId ) . METHOD_5 ( ) ) ; for ( final TYPE_3 m : VAR_1 . METHOD_6 ( ) ) { VAR_2 . METHOD_7 ( m . METHOD_8 ( ) ) ; } } } } ; ) ) ( METHOD_8 . m ( METHOD_7 . VAR_2 { ) ) ( METHOD_6 . VAR_1 : m TYPE_3 final ( for ; ) ) ( METHOD_5 . ) changeId ( METHOD_4 . ) ( METHOD_3 . db ( METHOD_2 . VAR_1 { OrmException . TYPE_2 throws ) db ReviewDb . TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( TYPE_1 . Factory VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 user , TYPE_3 < TYPE_4 > VAR_2 , java.lang.String VAR_3 ) throws TYPE_5 , TYPE_6 { METHOD_1 ( VAR_1 , project , user , VAR_2 , VAR_3 , VAR_4 , TYPE_7 . of ( ) ) ; } } ; ) ) ( of . TYPE_7 , VAR_4 , VAR_3 , VAR_2 , user , project , VAR_1 ( METHOD_1 { TYPE_6 , TYPE_5 throws ) VAR_3 java.lang.String , VAR_2 > TYPE_4 < TYPE_3 , user TYPE_2 , project com.google.gerrit.reviewdb.client.Project.NameKey , VAR_1 Factory . TYPE_1 ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 r = VAR_3 . get ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 class ) ; } } ; ) class VAR_5 , ) ( METHOD_5 . r ( METHOD_4 . ) ( METHOD_3 return ; ) ) ( METHOD_2 . r , VAR_4 ( org.junit.Assert.assertEquals ; ) ) VAR_2 + ) STRING_3 + ) VAR_1 + ) STRING_2 + ) changeId + STRING_1 ( ( ( ( ( ( get . VAR_3 = r TYPE_2 { java.io.IOException throws ) VAR_2 java.lang.String , VAR_1 java.lang.String , changeId java.lang.String ( METHOD_1 TYPE_1 private 
public TYPE_1 run ( TYPE_2 . ReviewDb db ) throws TYPE_3 . OrmException { TYPE_4 . Id VAR_1 = getAccountId ( ) ; if ( ! ( VAR_2 . getAccountId ( ) . equals ( getAccountId ( ) ) ) ) { throw new TYPE_5 ( ( ( ( ( STRING_1 + ( VAR_2 . getAccountId ( ) ) ) + STRING_2 ) + STRING_3 ) + ( getAccountId ( ) ) ) ) ; } db . METHOD_1 ( ) . METHOD_2 ( java.util.Collections.singleton ( VAR_2 ) ) ; return VAR_3 ; } } ; VAR_3 return ; ) ) VAR_2 ( java.util.Collections.singleton ( METHOD_2 . ) ( METHOD_1 . db } ; ) ) ) ) ( getAccountId ( + ) STRING_3 + ) STRING_2 + ) ) ) ( getAccountId . VAR_2 ( + STRING_1 ( ( ( ( ( TYPE_5 new throw { ) ) ) ) ( getAccountId ( equals . ) ( getAccountId . VAR_2 ( ! ( if ; ) ( getAccountId = VAR_1 Id . TYPE_4 { OrmException . TYPE_3 throws ) db ReviewDb . TYPE_2 ( run TYPE_1 public 
private static TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 p = VAR_1 . METHOD_2 ( ) ; final java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( 2 ) ; TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_3 ) ; TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_4 ) ; return java.util.Collections . METHOD_4 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_4 . java.util.Collections return ; ) VAR_4 , p , VAR_2 ( METHOD_3 . TYPE_4 ; ) VAR_3 , p , VAR_2 ( METHOD_3 . TYPE_4 ; ) 2 ( > TYPE_2 < java.util.ArrayList new = VAR_2 > TYPE_2 < java.util.List final ; ) ( METHOD_2 . VAR_1 = p TYPE_3 final { ) ( METHOD_1 > TYPE_2 < TYPE_1 static private 
public Account . Id METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ; return VAR_2 ! = null ? VAR_2 . getAccountId ( ) : null ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } } } ; ) e , ) VAR_1 + STRING_1 ( ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } } ; ) ( close . db { finally } ; null : ) ( getAccountId . VAR_2 ? null = ! VAR_2 return ; ) ) VAR_1 ( Key . TYPE_2 new ( get . ) ( METHOD_3 . db = VAR_2 TYPE_2 final { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { try { TYPE_1 throws ) VAR_1 java.lang.String final ( METHOD_1 Id . Account public 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; com.google.gerrit.extensions.registration.DynamicSet < TYPE_2 > VAR_3 = com.google.gerrit.extensions.registration.DynamicSet . METHOD_3 ( ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 = new TYPE_3 ( null , VAR_3 , null , null , null ) ; } } ; ) null , null , null , VAR_3 , null ( TYPE_3 new = VAR_4 ; ) VAR_1 ( add . VAR_3 ; ) ( METHOD_3 . com.google.gerrit.extensions.registration.DynamicSet = VAR_3 > TYPE_2 < com.google.gerrit.extensions.registration.DynamicSet ; ) class VAR_2 ( METHOD_2 . TYPE_1 = VAR_1 { ) ( METHOD_1 void public 
public final void onSuccess ( TYPE_1 result ) { if ( METHOD_1 ( ) ) { if ( ( ( result . length ( ) ) == 1 ) & & ( TYPE_2 . METHOD_2 ( query ) ) ) { TYPE_3 . ChangeInfo c = result . get ( 0 ) ; com.google.gerrit.reviewdb.client.Change . Id id = c . METHOD_3 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ; } else { display ( result ) ; this . display ( ) ; } } } } } } ; ) ( display . this ; ) result ( display { else } ; ) ) id ( TYPE_6 new , ) id ( METHOD_4 . TYPE_5 ( display . TYPE_4 ; ) ( METHOD_3 . c = id Id . com.google.gerrit.reviewdb.client.Change ; ) 0 ( get . result = c ChangeInfo . TYPE_3 { ) ) ) query ( METHOD_2 . TYPE_2 ( & & ) 1 == ) ) ( length . result ( ( ( if { ) ) ( METHOD_1 ( if { ) result TYPE_1 ( onSuccess void final public 
public void index ( TYPE_1 VAR_1 ) throws java.io.IOException { for ( TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( ) ) { TYPE_4 < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_2 . get ( ) ) ; } else { i . delete ( VAR_1 ) ; } } METHOD_5 ( VAR_1 . get ( ) ) ; } } ; ) ) ( get . VAR_1 ( METHOD_5 } } ; ) VAR_1 ( delete . i { else } ; ) ) ( get . VAR_2 ( METHOD_4 . i { ) ) ( METHOD_3 . VAR_2 ( if ; ) VAR_1 ( METHOD_2 . VAR_3 = VAR_2 > TYPE_3 < TYPE_4 { ) ) ( METHOD_1 : i > TYPE_3 , TYPE_1 < TYPE_2 ( for { java.io.IOException throws ) VAR_1 TYPE_1 ( index void public 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_5 . TYPE_5 ( METHOD_4 . ) ) ) ) STRING_3 , STRING_2 ( METHOD_3 . ) ) ( get . project ( METHOD_2 . TYPE_4 ( + STRING_1 ( ( TYPE_3 new { ) VAR_1 > TYPE_2 < TYPE_1 , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void static public 
public java.util.List < TYPE_1 > get ( ) { java.util.Set < java.lang.String > VAR_1 = cfg . METHOD_1 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( java.lang.String name : VAR_1 ) { VAR_3 . add ( TYPE_3 . METHOD_3 ( cfg , name ) ) ; } return TYPE_4 . METHOD_4 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_4 . TYPE_4 return } ; ) ) name , cfg ( METHOD_3 . TYPE_3 ( add . VAR_3 { ) VAR_1 : name java.lang.String ( for ; ) ) ( size . VAR_1 ( METHOD_2 . TYPE_2 = VAR_3 > TYPE_1 < java.util.List ; ) VAR_2 ( METHOD_1 . cfg = VAR_1 > java.lang.String < java.util.Set { ) ( get > TYPE_1 < java.util.List public 
java.util.Set < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( ) ; if ( VAR_1 ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( VAR_3 ) ) { return TYPE_2 . METHOD_1 ( repo , TYPE_2 . METHOD_4 ( repo ) ) ; } } return TYPE_1 . METHOD_5 ( db . METHOD_6 ( ) . METHOD_1 ( ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) ( METHOD_1 . ) ( METHOD_6 . db ( METHOD_5 . TYPE_1 return } } ; ) ) repo ( METHOD_4 . TYPE_2 , repo ( METHOD_1 . TYPE_2 return { ) ) VAR_3 ( METHOD_3 . VAR_2 = repo org.eclipse.jgit.lib.Repository ( try { ) VAR_1 ( if ; ) ( METHOD_2 { java.io.IOException , com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 > TYPE_1 < java.util.Set 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . get ( STRING_1 ) ) == null ) ) { return new TYPE_1 [ 0 ] ; } else { return VAR_1 . get ( STRING_1 ) . METHOD_2 ( new TYPE_1 [ 0 ] ) ; } } } } ; ) ] 0 [ TYPE_1 new ( METHOD_2 . ) STRING_1 ( get . VAR_1 return { else } ; ] 0 [ TYPE_1 new return { ) ) null == ) ) STRING_1 ( get . VAR_1 ( ( || ) null == ) VAR_1 ( ( ( if { ) ( METHOD_1 ] [ TYPE_1 public 
public void run ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { for ( final TYPE_1 t : TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ) { if ( ! ( VAR_2 . METHOD_3 ( t ) ) ) { VAR_2 . METHOD_4 ( VAR_1 , false ) ; return ; } } VAR_2 . METHOD_4 ( VAR_1 , true ) ; } } ; ) true , VAR_1 ( METHOD_4 . VAR_2 } } ; return ; ) false , VAR_1 ( METHOD_4 . VAR_2 { ) ) ) t ( METHOD_3 . VAR_2 ( ! ( if { ) ) ( METHOD_2 . ) ( METHOD_1 . TYPE_3 : t TYPE_1 final ( for { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( run void public 
private org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String name ) throws java.io.IOException { if ( VAR_1 . METHOD_2 ( name ) ) { return VAR_1 . get ( name ) ; } name = TYPE_1 . METHOD_3 ( VAR_2 , name ) ; org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; VAR_1 . put ( name , repo ) ; return repo ; } } ; repo return ; ) repo , name ( put . VAR_1 ; ) ) name ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_1 . VAR_3 = repo org.eclipse.jgit.lib.Repository ; ) name , VAR_2 ( METHOD_3 . TYPE_1 = name } ; ) name ( get . VAR_1 return { ) ) name ( METHOD_2 . VAR_1 ( if { java.io.IOException throws ) name java.lang.String ( METHOD_1 org.eclipse.jgit.lib.Repository private 
public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 ctx = VAR_2 . METHOD_2 ( VAR_3 , null ) ; final TYPE_2 VAR_4 = VAR_2 . set ( ctx ) ; try { VAR_5 . METHOD_3 ( ) ; } finally { VAR_2 . set ( VAR_4 ) ; } } } } ; ) VAR_4 ( set . VAR_2 { finally } ; ) ( METHOD_3 . VAR_5 { try ; ) ctx ( set . VAR_2 = VAR_4 TYPE_2 final ; ) null , VAR_3 ( METHOD_2 . VAR_2 = ctx TYPE_2 final { ) VAR_1 TYPE_1 ( METHOD_1 void public 
public boolean METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { try { final TYPE_2 . ReviewDb db = schema . METHOD_2 ( ) ; try { final java.util.List < TYPE_3 > VAR_2 = db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; return ! ( VAR_2 . isEmpty ( ) ) ; } finally { db . close ( ) ; } } catch ( TYPE_4 . OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } } } ; ) e , ) VAR_1 + STRING_1 ( ( TYPE_1 new throw { ) e OrmException . TYPE_4 ( catch } } ; ) ( close . db { finally } ; ) ) ( isEmpty . VAR_2 ( ! return ; ) ( METHOD_5 . ) VAR_1 ( METHOD_4 . ) ( METHOD_3 . db = VAR_2 > TYPE_3 < java.util.List final { try ; ) ( METHOD_2 . schema = db ReviewDb . TYPE_2 final { try { TYPE_1 throws ) VAR_1 java.lang.String final ( METHOD_1 boolean public 
private static void p ( final TYPE_1 r , final TYPE_2 . NameKey project ) { java.lang.String n = project . get ( ) ; if ( ! ( n . METHOD_1 ( STRING_1 ) ) ) { n += STRING_1 ; } TYPE_3 . METHOD_2 ( r , STRING_2 , n ) ; } } ; ) n , STRING_2 , r ( METHOD_2 . TYPE_3 } ; STRING_1 += n { ) ) ) STRING_1 ( METHOD_1 . n ( ! ( if ; ) ( get . project = n java.lang.String { ) project NameKey . TYPE_2 final , r TYPE_1 final ( p void static private 
public TYPE_1 METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; } } ; ) group , ) ( get . user , VAR_2 ( TYPE_1 new return } ; ) VAR_1 ( TYPE_3 new throw { ) null == group ( if ; ) VAR_1 ( get . VAR_2 = group AccountGroup . com.google.gerrit.reviewdb.client final { TYPE_3 throws ) VAR_1 Id . TYPE_2 final ( METHOD_1 TYPE_1 public 
protected java.util.List < TYPE_1 . ChangeInfo > METHOD_1 ( TYPE_2 query , com.google.gerrit.reviewdb.client.Change ... changes ) throws java.lang.Exception { java.util.List < TYPE_1 . ChangeInfo > result = query . get ( ) ; TYPE_3 < TYPE_4 > VAR_1 = TYPE_5 . METHOD_2 ( result ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( query . METHOD_4 ( ) ) . METHOD_5 ( TYPE_5 . METHOD_2 ( changes ) ) . METHOD_6 ( ) ; return result ; } } ; result return ; ) ( METHOD_6 . ) ) changes ( METHOD_2 . TYPE_5 ( METHOD_5 . ) ) ( METHOD_4 . query ( METHOD_3 . ) VAR_1 ( com.google.common.truth.Truth.assertThat ; ) result ( METHOD_2 . TYPE_5 = VAR_1 > TYPE_4 < TYPE_3 ; ) ( get . query = result > ChangeInfo . TYPE_1 < java.util.List { java.lang.Exception throws ) changes ... com.google.gerrit.reviewdb.client.Change , query TYPE_2 ( METHOD_1 > ChangeInfo . TYPE_1 < java.util.List protected 
public void METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 args = VAR_2 . args ; com.google.gerrit.reviewdb.client.Account account = VAR_4 . get ( VAR_5 . getAccountId ( ) ) . METHOD_2 ( ) ; VAR_6 . METHOD_3 ( VAR_7 , VAR_8 . METHOD_4 ( ) , VAR_8 . METHOD_5 ( ) , account ) ; } } } } ; ) account , ) ( METHOD_5 . VAR_8 , ) ( METHOD_4 . VAR_8 , VAR_7 ( METHOD_3 . VAR_6 ; ) ( METHOD_2 . ) ) ( getAccountId . VAR_5 ( get . VAR_4 = account com.google.gerrit.reviewdb.client.Account ; args . VAR_2 = args TYPE_3 { ) VAR_3 : VAR_2 TYPE_2 ( for } ; ) STRING_1 ( TYPE_1 new throw { ) VAR_1 ( if { TYPE_1 throws ) ( METHOD_1 void public 
private java.lang.String [ ] METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( p ) ; try { TYPE_2 VAR_2 = new TYPE_2 ( repo . METHOD_3 ( ) , STRING_1 ) ; return VAR_2 . METHOD_4 ( new TYPE_3 ( ) { public boolean METHOD_5 ( TYPE_2 VAR_3 , java.lang.String name ) { return name . METHOD_6 ( STRING_2 ) ; } } ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) } } ; ) STRING_2 ( METHOD_6 . name return { ) name java.lang.String , VAR_3 TYPE_2 ( METHOD_5 boolean public { ) ( TYPE_3 new ( METHOD_4 . VAR_2 return ; ) STRING_1 , ) ( METHOD_3 . repo ( TYPE_2 new = VAR_2 TYPE_2 { try ; ) p ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository { TYPE_1 , java.io.IOException throws ) p com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 ] [ java.lang.String private 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; } else { return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; } } } } ; ) user , ) cd ( TYPE_1 new , db ( METHOD_5 return { else } ; ) user , ) cd ( TYPE_1 new , db ( METHOD_4 return { ) ) cfg ( METHOD_3 . TYPE_5 ( if ; ) user ( METHOD_2 . cd ; ) ) ( change.getId , ) ( getProject . change , db ( create . VAR_1 = cd com.google.gerrit.server.query.change.ChangeData { TYPE_4 , TYPE_3 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) user TYPE_2 , change com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; synchronized ( this ) { boolean VAR_2 = ! ( VAR_3 . isEmpty ( ) ) ; for ( TYPE_1 p : VAR_3 . values ( ) ) { p . METHOD_1 ( ) ; } VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_3 ( ) ; if ( VAR_2 ) { TYPE_2 . METHOD_4 ( ) ; METHOD_5 ( ) ; } } } } } } ; ) ( METHOD_5 ; ) ( METHOD_4 . TYPE_2 { ) VAR_2 ( if ; ) ( METHOD_3 . VAR_4 ; ) ( METHOD_3 . VAR_3 } ; ) ( METHOD_1 . p { ) ) ( values . VAR_3 : p TYPE_1 ( for ; ) ) ( isEmpty . VAR_3 ( ! = VAR_2 boolean { ) this ( synchronized ; ) ( METHOD_2 . VAR_1 { ) ( METHOD_1 void public 
public TYPE_1 apply ( TYPE_2 VAR_1 ) { TYPE_3 info = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( project , revision , file ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . name = info . name ; VAR_3 = VAR_4 ; VAR_2 . url = info . url ; VAR_5 = VAR_6 ; return VAR_2 ; } } ; VAR_2 return ; VAR_6 = VAR_5 ; url . info = url . VAR_2 ; VAR_4 = VAR_3 ; name . info = name . VAR_2 ; ) ( TYPE_1 new = VAR_2 TYPE_1 ; ) file , revision , project ( METHOD_1 . ) ) VAR_1 ( ) TYPE_4 ( ( = info TYPE_3 { ) VAR_1 TYPE_2 ( apply TYPE_1 public 
protected void rpc ( final java.lang.String name , TYPE_1 < ? extends TYPE_2 > VAR_1 ) { final TYPE_3 . Key < TYPE_4 > VAR_2 = TYPE_5 . get ( VAR_3 class , TYPE_6 . create ( ) ) ; final TYPE_7 VAR_4 = new TYPE_7 ( VAR_1 ) ; METHOD_1 ( ( ( VAR_5 ) + name ) ) . METHOD_2 ( VAR_2 ) ; bind ( VAR_2 ) . METHOD_3 ( VAR_4 ) . in ( VAR_6 ) ; } } ; ) VAR_6 ( in . ) VAR_4 ( METHOD_3 . ) VAR_2 ( bind ; ) VAR_2 ( METHOD_2 . ) ) name + ) VAR_5 ( ( ( METHOD_1 ; ) VAR_1 ( TYPE_7 new = VAR_4 TYPE_7 final ; ) ) ( create . TYPE_6 , class VAR_3 ( get . TYPE_5 = VAR_2 > TYPE_4 < Key . TYPE_3 final { ) VAR_1 > TYPE_2 extends ? < TYPE_1 , name java.lang.String final ( rpc void protected 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ; VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ; VAR_4 . METHOD_3 ( name , STRING_3 , new java.lang.String [ ] { } ) ; } } ; ) } { ] [ java.lang.String new , STRING_3 , name ( METHOD_3 . VAR_4 ; ) VAR_2 , null , VAR_3 , name ( METHOD_3 . VAR_4 ; ) VAR_3 , name ( METHOD_2 = VAR_2 org.eclipse.jgit.revwalk.RevCommit ; ) name . ) ( get . ) ) STRING_2 + name ( ( create . ) ( projects . VAR_1 ( isEqualTo . ) name ( com.google.common.truth.Truth.assertThat ; ) STRING_1 ( name = name java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 , java.lang.String line ) throws TYPE_2 { if ( VAR_1 == null ) { throw METHOD_2 ( STRING_1 , psId . get ( ) ) ; } if ( line . METHOD_3 ( STRING_2 ) ) { METHOD_4 ( psId , VAR_1 , line ) ; } else { METHOD_5 ( psId , VAR_1 , VAR_2 , line ) ; } } } } ; ) line , VAR_2 , VAR_1 , psId ( METHOD_5 { else } ; ) line , VAR_1 , psId ( METHOD_4 { ) ) STRING_2 ( METHOD_3 . line ( if } ; ) ) ( get . psId , STRING_1 ( METHOD_2 throw { ) null == VAR_1 ( if { TYPE_2 throws ) line java.lang.String , VAR_2 TYPE_1 , VAR_1 com.google.gerrit.reviewdb.client.Account.Id , psId com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 void private 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ; final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) ! = null ) { VAR_4 . METHOD_3 ( key ) ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; } } ; ) ( METHOD_6 ; ) VAR_2 , VAR_1 , id , key ( METHOD_5 . VAR_4 = VAR_3 ; ) id ( METHOD_4 . VAR_4 = key } ; ) key ( METHOD_3 . VAR_4 { ) null = ! ) VAR_3 ( ( if ; ) ( METHOD_2 . res = VAR_2 Key . TYPE_2 final ; ) ( getAccountId . res = id com.google.gerrit.reviewdb.client.Account.Id final { ) VAR_1 boolean final , res TYPE_1 final ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 { try { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( rsrc . METHOD_3 ( ) ) ; try { if ( ! ( repo . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . isEmpty ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , rsrc . getName ( ) ) ) ; } } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( e ) ; } } } } ; ) e ( TYPE_2 new throw { ) e java.io.IOException ( catch } } ; ) ( close . repo { finally } } ; ) ) ) ( getName . rsrc , STRING_1 ( java.lang.String.format ( TYPE_2 new throw { ) ) ) ( isEmpty . ) VAR_2 ( METHOD_5 . ) ( METHOD_4 . repo ( ! ( if { try ; ) ) ( METHOD_3 . rsrc ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository { try { TYPE_2 throws ) rsrc TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( final boolean VAR_1 ) { try { for ( TYPE_1 . PatchSetApproval VAR_2 : VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { if ( ( ! VAR_1 ) & & ( ( VAR_2 . getValue ( ) ) == 0 ) ) { continue ; } add ( VAR_4 , VAR_2 . getAccountId ( ) ) ; } } catch ( TYPE_2 . OrmException err ) { } } } } { ) err OrmException . TYPE_2 ( catch } } ; ) ) ( getAccountId . VAR_2 , VAR_4 ( add } ; continue { ) ) 0 == ) ) ( getValue . VAR_2 ( ( & & ) VAR_1 ! ( ( if { ) ) ) ( change.getId ( METHOD_3 . ) ( METHOD_2 . ) ( get . VAR_3 : VAR_2 PatchSetApproval . TYPE_1 ( for { try { ) VAR_1 boolean final ( METHOD_1 void private 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { throw new TYPE_4 ( ) ; } try { VAR_2 . METHOD_2 ( db . get ( ) , rsrc . getId ( ) ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( TYPE_7 . METHOD_3 ( rsrc . getId ( ) . toString ( ) ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . TYPE_1 return } ; ) ) ) ( toString . ) ( getId . rsrc ( METHOD_3 . TYPE_7 ( TYPE_4 new throw { ) e TYPE_6 ( catch } ; ) ) ( getId . rsrc , ) ( get . db ( METHOD_2 . VAR_2 { try } ; ) ( TYPE_4 new throw { ) ) ) ( METHOD_1 . VAR_1 ( ! ( if { TYPE_5 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > ? < TYPE_1 public 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; if ( p == null ) { p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) ; } result . METHOD_6 ( p ) ; TYPE_6 . METHOD_7 ( p ) ; } } ) ; close ( ) ; } } ; ) ( close ; ) } } ; ) p ( METHOD_7 . TYPE_6 ; ) p ( METHOD_6 . result } ; ) ) ( getId . ) ( METHOD_5 . TYPE_6 ( METHOD_4 . TYPE_5 = p { ) null == p ( if ; ) ( METHOD_3 . TYPE_6 = p TYPE_5 { ) result TYPE_4 ( onSuccess void public { ) ( > TYPE_4 < TYPE_3 new , VAR_1 ( METHOD_2 . TYPE_2 { ) e TYPE_1 ( METHOD_1 void 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return VAR_2 ; if ( VAR_3 . equals ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 ) ) return VAR_4 ; return ( VAR_3 . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . VAR_3 . ) ) VAR_1 ( ) TYPE_2 ( ( ( - ) ) ( METHOD_3 . VAR_3 ( return ; VAR_4 return ) ) VAR_3 . ) ) VAR_1 ( ) TYPE_2 ( ( ( equals . VAR_3 ( if ; VAR_2 return ) ) ) ( METHOD_2 . VAR_1 ( ! ( if { ) VAR_1 TYPE_1 ( METHOD_1 int public 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } } ; cd return ; ) ) currentPatchSetId , id ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( com.google.gerrit.reviewdb.client.PatchSet new = VAR_1 ; ) id , null , null , null , null , null , null , null , null , null , null , null , null , null ( com.google.gerrit.server.query.change.ChangeData new = cd com.google.gerrit.server.query.change.ChangeData { ) currentPatchSetId int , id Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 com.google.gerrit.server.query.change.ChangeData static public 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 ! = null ) & & ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ; } } } } ; ) VAR_1 , STRING_1 ( METHOD_6 . ) ( METHOD_5 . view ; ) ) ) VAR_1 ( METHOD_4 . TYPE_3 , 1 ( METHOD_3 . TYPE_2 ( METHOD_2 . VAR_2 { ) ) 0 > ) ) ( length . VAR_1 ( ( & & ) null = ! VAR_1 ( ( if ; ) ( getValue . e = VAR_1 java.lang.String { ) e > java.lang.String < TYPE_1 ( METHOD_1 void 
protected void METHOD_1 ( TYPE_1 view ) { VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.String token = view . METHOD_2 ( ) ; if ( ! ( token . equals ( VAR_1 ) ) ) { TYPE_2 . METHOD_3 ( token , false ) ; TYPE_3 . METHOD_4 ( token ) ; } if ( view instanceof TYPE_4 ) { VAR_2 = token ; } super . METHOD_1 ( view ) ; view . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . view ; ) view ( METHOD_1 . super } ; token = VAR_2 { ) TYPE_4 instanceof view ( if } ; ) token ( METHOD_4 . TYPE_3 ; ) false , token ( METHOD_3 . TYPE_2 { ) ) ) VAR_1 ( equals . token ( ! ( if ; ) ( METHOD_2 . view = token java.lang.String ; ) ( METHOD_2 . TYPE_2 = VAR_1 { ) view TYPE_1 ( METHOD_1 void protected 
private void METHOD_1 ( TYPE_1 . NameKey VAR_1 , TYPE_2 event ) { for ( TYPE_3 VAR_2 : VAR_3 . values ( ) ) { if ( METHOD_2 ( VAR_1 , VAR_2 . user ) ) { VAR_4 . METHOD_3 ( event ) ; } } METHOD_4 ( event ) ; } } ; ) event ( METHOD_4 } } ; ) event ( METHOD_3 . VAR_4 { ) ) user . VAR_2 , VAR_1 ( METHOD_2 ( if { ) ) ( values . VAR_3 : VAR_2 TYPE_3 ( for { ) event TYPE_2 , VAR_1 NameKey . TYPE_1 ( METHOD_1 void private 
public java.util.List METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 t = this ; while ( t . METHOD_2 ( ) ) { VAR_1 . add ( ( ( TYPE_3 ) ( t ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( ) ) ; t = ( ( TYPE_3 ) ( t ) ) . METHOD_5 ( ) . METHOD_4 ( ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ( METHOD_4 . ) ( METHOD_5 . ) ) t ( ) TYPE_3 ( ( = t ; ) ) ( METHOD_1 . ) ( METHOD_4 . ) ( METHOD_3 . ) ) t ( ) TYPE_3 ( ( ( add . VAR_1 { ) ) ( METHOD_2 . t ( while ; this = t TYPE_2 ; ) ( > TYPE_1 < java.util.ArrayList new = VAR_1 > TYPE_1 < java.util.List { ) ( METHOD_1 java.util.List public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_1 { try { METHOD_2 ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_3 ( VAR_1 ) ) { METHOD_4 ( cd . change ( ) ) ; } db . close ( ) ; db = null ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { METHOD_5 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( METHOD_5 { ) e com.google.gwtorm.server.OrmException | java.io.IOException ( catch } ; null = db ; ) ( close . db } ; ) ) ( change . cd ( METHOD_4 { ) ) VAR_1 ( METHOD_3 . VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( METHOD_2 { try { TYPE_1 throws ) VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ; assertThat ( VAR_5 ) . METHOD_12 ( ) ; } } ; ) ( METHOD_12 . ) VAR_5 ( assertThat ; ) VAR_3 ( METHOD_11 . ) VAR_10 ( METHOD_11 . ) VAR_9 ( METHOD_10 . ) VAR_8 ( to . ) VAR_7 , VAR_6 ( to . ) VAR_4 ( METHOD_9 . ) VAR_2 , STRING_2 ( METHOD_8 . ) VAR_5 ( assertThat ; ) VAR_4 , STRING_1 , VAR_2 ( METHOD_7 ; ) VAR_3 ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , VAR_3 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 d = util . user ( VAR_4 , VAR_3 ) ; METHOD_5 ( STRING_2 , d . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_3 ( METHOD_6 . d , STRING_2 ( METHOD_5 ; ) VAR_3 , VAR_4 ( user . util = d TYPE_2 ; ) ( METHOD_4 . ) STRING_1 , VAR_3 , VAR_1 , VAR_4 ( METHOD_2 . TYPE_1 ; ) STRING_1 , VAR_3 , VAR_1 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 ; ) ( METHOD_4 . ) STRING_1 , VAR_2 , VAR_1 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_1 in = new TYPE_1 ( ) ; in . account = user . email ; VAR_3 = STRING_2 ; VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ; } } ; ) in ( METHOD_4 . ) ) ( get . VAR_5 ( name . ) ( projects . VAR_4 ; STRING_2 = VAR_3 ; email . user = account . in ; ) ( TYPE_1 new = in TYPE_1 ; ) STRING_1 ( METHOD_3 . VAR_1 ; ) class VAR_2 ( METHOD_2 . VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ) ( METHOD_3 . c ( create . VAR_3 , c ( METHOD_2 . VAR_2 = VAR_1 ; ) ( change = c com.google.gerrit.reviewdb.client.Change { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
public static void METHOD_1 ( int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_2 ( user ) ; TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( user , VAR_1 ) ; } } ; ) VAR_1 , user ( put . ) STRING_1 ( view . ) id ( change . TYPE_4 ; ) user ( METHOD_2 . input ; ) ( create . TYPE_3 = input TYPE_3 { ) VAR_1 > TYPE_2 < TYPE_1 , user java.lang.String , id int ( METHOD_1 void static public 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ; } } ; ) ) ( toString . ) STRING_8 , STRING_7 ( METHOD_2 . TYPE_1 , STRING_6 ( org.junit.Assert.assertEquals ; ) ) ( toString . ) STRING_5 , STRING_2 ( METHOD_2 . TYPE_1 , STRING_4 ( org.junit.Assert.assertEquals ; ) ) ( toString . ) STRING_3 , STRING_2 ( METHOD_2 . TYPE_1 , STRING_1 ( org.junit.Assert.assertEquals { ) ( METHOD_1 void public 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 . OrmException { if ( ! ( user . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , user . METHOD_4 ( ) ) ) ; } final TYPE_4 VAR_1 = VAR_2 . create ( ) ; final TYPE_5 . Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_5 ( VAR_3 , null , false , null , java.util.Collections.singleton ( me ) , null ) ; } } ; ) null , ) me ( java.util.Collections.singleton , null , false , null , VAR_3 ( METHOD_5 . VAR_1 return ; ) ( getAccountId . user = me Id . TYPE_5 final ; ) ( create . VAR_2 = VAR_1 TYPE_4 final } ; ) ) ) ( METHOD_4 . user , STRING_1 ( java.lang.String.format ( TYPE_2 new throw { ) ) ) ( METHOD_3 . ) ( METHOD_2 . user ( ! ( if { OrmException . TYPE_3 , TYPE_2 , TYPE_1 throws ) ( METHOD_1 Id . AccountGroup public 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Map < TYPE_1 , byte [ ] > VAR_1 ) throws java.io.IOException , TYPE_2 { try ( TYPE_3 git = new TYPE_3 ( repo ) ) { if ( VAR_1 ! = null ) { TYPE_4 . METHOD_2 ( git , VAR_1 ) ; } return git . commit ( ) . METHOD_3 ( message ) . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . ) message ( METHOD_3 . ) ( commit . git return } ; ) VAR_1 , git ( METHOD_2 . TYPE_4 { ) null = ! VAR_1 ( if { ) ) repo ( TYPE_3 new = git TYPE_3 ( try { TYPE_2 , java.io.IOException throws ) VAR_1 > ] [ byte , TYPE_1 < java.util.Map , message java.lang.String , repo org.eclipse.jgit.lib.Repository ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit static public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) . to ( VAR_1 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) ; bind ( VAR_5 class ) ; bind ( VAR_6 class ) ; install ( new TYPE_1 ( ) { protected void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_5 class ) ; } } ) ; } } ; ) } } ; ) class VAR_5 ( to . ) ( METHOD_2 { ) ( METHOD_1 void protected { ) ( TYPE_1 new ( install ; ) class VAR_6 ( bind ; ) class VAR_5 ( bind ; ) class VAR_4 ( bind ; ) class VAR_3 ( bind ; ) class VAR_1 ( to . ) class VAR_2 ( bind ; ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
private static java.lang.String METHOD_1 ( long VAR_1 , long VAR_2 ) { if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( TYPE_2 new ( format . ) STRING_2 ( TYPE_1 new return } ; ) ) VAR_2 ( TYPE_2 new ( format . ) STRING_1 ( TYPE_1 new return { ) ) INT_3 * ) INT_2 * ) INT_2 * INT_1 ( ( ( < ) VAR_1 - VAR_2 ( ( if { ) VAR_2 long , VAR_1 long ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ; } } ; ) changeId . ) VAR_2 ( METHOD_3 . TYPE_3 , ) ( getChangeId . VAR_1 ( org.junit.Assert.assertEquals ; ) ) ) ) ( getChangeId . VAR_1 ( + STRING_1 ( ( query = VAR_2 > ChangeInfo . TYPE_2 < java.util.List ; ) ( METHOD_2 ; ) ( METHOD_2 = VAR_1 Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void onSuccess ( TYPE_1 VAR_1 ) { diff = VAR_1 ; VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; TYPE_3 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 ) ; if ( VAR_3 . METHOD_4 ( ) ) { if ( ( VAR_2 . METHOD_5 ( VAR_5 ) ) > 0 ) { VAR_6 . onSuccess ( null ) ; } else { METHOD_6 ( VAR_1 , VAR_6 ) ; } } else { VAR_6 . onSuccess ( null ) ; } } } } ; ) null ( onSuccess . VAR_6 { else } } ; ) VAR_6 , VAR_1 ( METHOD_6 { else } ; ) null ( onSuccess . VAR_6 { ) 0 > ) ) VAR_5 ( METHOD_5 . VAR_2 ( ( if { ) ) ( METHOD_4 . VAR_3 ( if ; ) VAR_4 , ) ( METHOD_3 . VAR_3 ( METHOD_2 . TYPE_3 ; ) VAR_1 ( METHOD_1 . TYPE_2 = VAR_2 ; VAR_1 = diff { ) VAR_1 TYPE_1 ( onSuccess void public 
public java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 . Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ; for ( final TYPE_3 e : VAR_2 ) { r . add ( e . METHOD_2 ( VAR_1 ) ) ; } return r ; } } ; r return } ; ) ) VAR_1 ( METHOD_2 . e ( add . r { ) VAR_2 : e TYPE_3 final ( for ; ) length . VAR_2 ( > TYPE_1 < java.util.ArrayList new = r > TYPE_1 < java.util.ArrayList final { ) VAR_1 Id . TYPE_2 final ( METHOD_1 > TYPE_1 < java.util.List public 
public static void put ( int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { if ( TYPE_3 . equals ( path ) ) { TYPE_4 . METHOD_1 ( id , VAR_1 , VAR_2 ) ; } else { TYPE_4 . METHOD_2 ( id , path ) . put ( VAR_1 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_1 ( put . ) path , id ( METHOD_2 . TYPE_4 { else } ; ) VAR_2 , VAR_1 , id ( METHOD_1 . TYPE_4 { ) ) path ( equals . TYPE_3 ( if { ) VAR_2 > TYPE_2 < TYPE_1 , VAR_1 java.lang.String , path java.lang.String , id int ( put void static public 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . METHOD_2 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } patchSet . METHOD_3 ( false ) ; if ( ! ( VAR_1 ) ) { TYPE_4 . METHOD_4 ( change ) ; ctx . METHOD_5 ( ) ; } ctx . METHOD_6 ( ) . patchSets ( ) . update ( java.util.Collections.singleton ( patchSet ) ) ; } } ; ) ) patchSet ( java.util.Collections.singleton ( update . ) ( patchSets . ) ( METHOD_6 . ctx } ; ) ( METHOD_5 . ctx ; ) change ( METHOD_4 . TYPE_4 { ) ) VAR_1 ( ! ( if ; ) false ( METHOD_3 . patchSet } ; ) STRING_1 ( TYPE_3 new throw { ) ) ) ( METHOD_2 . patchSet ( ! ( if { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void private 
public void run ( ) { try { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ; java.lang.String line ; while ( ( line = VAR_1 . METHOD_1 ( ) ) ! = null ) { VAR_2 . error ( ( STRING_2 + line ) ) ; } VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } } } ; ) e , STRING_3 ( METHOD_2 . VAR_2 { ) e java.io.IOException ( catch } ; ) ( close . VAR_1 } ; ) ) line + STRING_2 ( ( error . VAR_2 { ) null = ! ) ) ( METHOD_1 . VAR_1 = line ( ( while ; line java.lang.String ; ) ) STRING_1 , in ( TYPE_2 new ( TYPE_1 new = VAR_1 TYPE_1 final { try { ) ( run void public 
private boolean isEmpty ( ) { return ( ( ( ( ( ( ( approvals . isEmpty ( ) ) & & ( ( VAR_1 ) == null ) ) & & ( VAR_2 . isEmpty ( ) ) ) & & ( reviewers . isEmpty ( ) ) ) & & ( ( status ) == null ) ) & & ( ( VAR_3 ) == null ) ) & & ( ( VAR_4 ) == null ) ) & & ( ( VAR_5 ) == null ) ; } } ; ) null == ) VAR_5 ( ( & & ) ) null == ) VAR_4 ( ( & & ) ) null == ) VAR_3 ( ( & & ) ) null == ) status ( ( & & ) ) ) ( isEmpty . reviewers ( & & ) ) ) ( isEmpty . VAR_2 ( & & ) ) null == ) VAR_1 ( ( & & ) ) ( isEmpty . approvals ( ( ( ( ( ( ( return { ) ( isEmpty boolean private 
private int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = VAR_1 . METHOD_1 ( ) ; if ( VAR_3 == ( - 1 ) ) { return VAR_2 . equals ( STRING_1 ) ? INT_1 : INT_2 ; } else { return VAR_3 ; } } } } ; VAR_3 return { else } ; INT_2 : INT_1 ? ) STRING_1 ( equals . VAR_2 return { ) ) 1 - ( == VAR_3 ( if ; ) ( METHOD_1 . VAR_1 = VAR_3 int ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 int private 
private TYPE_1 < ? extends TYPE_1 < ? , java.lang.String , TYPE_2 < java.lang.String > > , java.lang.String , TYPE_2 < java.lang.String > > METHOD_1 ( TYPE_3 . Result r ) throws java.lang.Exception { return com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < java.lang.String > ) ( VAR_1 . changes ( ) . id ( r . getChange ( ) . getId ( ) . get ( ) ) . METHOD_2 ( ) ) ) ) ; } } ; ) ) ) ) ( METHOD_2 . ) ) ( get . ) ( getId . ) ( getChange . r ( id . ) ( changes . VAR_1 ( ) > java.lang.String < TYPE_2 ( ( ( com.google.common.truth.Truth.assertThat return { java.lang.Exception throws ) r Result . TYPE_3 ( METHOD_1 > > java.lang.String < TYPE_2 , java.lang.String , > > java.lang.String < TYPE_2 , java.lang.String , ? < TYPE_1 extends ? < TYPE_1 private 
private static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse rsp , TYPE_3 VAR_1 ) { java.lang.String VAR_2 = ( VAR_1 ! = null ) ? VAR_1 . METHOD_2 ( ) : STRING_1 ; TYPE_4 c = new TYPE_4 ( VAR_3 , VAR_2 ) ; c . METHOD_3 ( STRING_2 ) ; c . METHOD_4 ( false ) ; c . METHOD_5 ( TYPE_5 . METHOD_6 ( req ) ) ; c . METHOD_7 ( ( VAR_1 ! = null ? - 1 : 0 ) ) ; rsp . METHOD_8 ( c ) ; } } ; ) c ( METHOD_8 . rsp ; ) ) 0 : 1 - ? null = ! VAR_1 ( ( METHOD_7 . c ; ) ) req ( METHOD_6 . TYPE_5 ( METHOD_5 . c ; ) false ( METHOD_4 . c ; ) STRING_2 ( METHOD_3 . c ; ) VAR_2 , VAR_3 ( TYPE_4 new = c TYPE_4 ; STRING_1 : ) ( METHOD_2 . VAR_1 ? ) null = ! VAR_1 ( = VAR_2 java.lang.String { ) VAR_1 TYPE_3 , rsp HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void static private 
public TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( java.lang.String query ) throws TYPE_3 { TYPE_4 VAR_1 = null ; TYPE_5 VAR_2 = null ; try { VAR_1 = VAR_3 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; return METHOD_4 ( VAR_2 , query ) ; } catch ( TYPE_6 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } finally { METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_1 ) ; } } } } ; ) VAR_1 ( METHOD_6 ; ) VAR_2 ( METHOD_5 { finally } ; ) e , STRING_1 ( TYPE_3 new throw { ) e TYPE_6 ( catch } ; ) query , VAR_2 ( METHOD_4 return ; ) ( METHOD_3 . VAR_1 = VAR_2 ; ) ( METHOD_2 . VAR_3 = VAR_1 { try ; null = VAR_2 TYPE_5 ; null = VAR_1 TYPE_4 { TYPE_3 throws ) query java.lang.String ( METHOD_1 > TYPE_2 , java.lang.String < TYPE_1 public 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { TYPE_3 . METHOD_3 ( VAR_1 ) ; final TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 ) ; org.junit.Assert . METHOD_4 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) ; } finally { TYPE_3 . delete ( VAR_1 ) ; } } } } ; ) VAR_1 ( delete . TYPE_3 { finally } ; ) VAR_4 , ) ( METHOD_5 . VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_3 ( METHOD_4 . org.junit.Assert ; ) VAR_1 ( TYPE_4 new = VAR_2 TYPE_4 final ; ) VAR_1 ( METHOD_3 . TYPE_3 { try ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) { TYPE_5 p = METHOD_2 ( ) ; if ( ( VAR_2 ) ! = null ) { return new TYPE_6 ( VAR_1 , VAR_2 . METHOD_3 ( STRING_1 ) , false ) ; } else { return new TYPE_6 ( VAR_1 , METHOD_4 ( STRING_2 ) , true ) ; } } } } ; ) true , ) STRING_2 ( METHOD_4 , VAR_1 ( TYPE_6 new return { else } ; ) false , ) STRING_1 ( METHOD_3 . VAR_2 , VAR_1 ( TYPE_6 new return { ) null = ! ) VAR_2 ( ( if ; ) ( METHOD_2 = p TYPE_5 { ) VAR_1 > TYPE_4 , TYPE_3 < TYPE_2 ( METHOD_1 TYPE_1 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) & & ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) || ( METHOD_7 ( db ) ) ) { return false ; } if ( METHOD_8 ( ) ) { return true ; } return VAR_1 . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . VAR_1 return } ; true return { ) ) ( METHOD_8 ( if } ; false return { ) ) ) db ( METHOD_7 ( || ) ) ) ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 ( & & ) ) VAR_2 ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( ( ! ( ( if { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 t = METHOD_2 ( STRING_1 ) ; METHOD_3 ( t ) ; assertEquals ( VAR_1 , t . METHOD_4 ( ) ) ; assertEquals ( 1 , t . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( t . METHOD_7 ( 0 ) , STRING_2 ) ; } } ; ) STRING_2 , ) 0 ( METHOD_7 . t ( METHOD_6 . TYPE_3 ; ) ) ( METHOD_5 . t , 1 ( assertEquals ; ) ) ( METHOD_4 . t , VAR_1 ( assertEquals ; ) t ( METHOD_3 ; ) STRING_1 ( METHOD_2 = t TYPE_2 final { TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 . METHOD_4 ( ) ) || ( TYPE_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; VAR_1 . METHOD_7 ( name ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , cfg ) ; VAR_2 . METHOD_8 ( ) ; VAR_2 . METHOD_7 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) ; } } ; ) ) STRING_2 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_7 . VAR_2 ; ) ( METHOD_8 . VAR_2 ; ) cfg , VAR_3 ( TYPE_3 new = VAR_2 TYPE_3 ; ) name ( METHOD_7 . VAR_1 ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = name com.google.gerrit.reviewdb.client.Project.NameKey ; ) ( METHOD_6 . ) ) ) ) ( METHOD_5 . TYPE_2 ( || ) ) ( METHOD_4 . TYPE_2 ( ( ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String , java.lang.String > config , TYPE_3 req ) { TYPE_4 VAR_1 = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_1 , config , req ) ; TYPE_6 . METHOD_5 ( VAR_1 , config ) ; return VAR_1 . create ( ) ; } } ; ) ( create . VAR_1 return ; ) config , VAR_1 ( METHOD_5 . TYPE_6 ; ) req , config , VAR_1 ( METHOD_4 . TYPE_6 ; ) VAR_2 ( METHOD_3 . ) ( METHOD_2 . TYPE_5 = VAR_1 TYPE_4 { ) req TYPE_3 , config > java.lang.String , java.lang.String < TYPE_2 ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { java.lang.String changeId = METHOD_2 ( ) ; TYPE_3 . ChangeInfo c = METHOD_3 ( ( STRING_1 + changeId ) ) ; org.junit.Assert . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) ; } } ; ) message . ) ( METHOD_6 . ) ( METHOD_5 . VAR_1 , STRING_2 ( org.junit.Assert.assertEquals ; ) ) ( size . VAR_1 , 1 ( org.junit.Assert.assertEquals ; ) VAR_1 ( METHOD_4 . org.junit.Assert ; ) ) changeId + STRING_1 ( ( METHOD_3 = c ChangeInfo . TYPE_3 ; ) ( METHOD_2 = changeId java.lang.String { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) throws java.io.IOException { TYPE_1 ref = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 , changeId ) ) ; if ( ref == null ) { return ! ( VAR_3 . METHOD_4 ( VAR_2 ) ) ; } return ref . METHOD_5 ( ) . equals ( VAR_3 . get ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( get . VAR_3 ( equals . ) ( METHOD_5 . ref return } ; ) ) VAR_2 ( METHOD_4 . VAR_3 ( ! return { ) null == ref ( if ; ) ) changeId , VAR_2 ( METHOD_3 . TYPE_2 ( METHOD_2 . VAR_1 = ref TYPE_1 { java.io.IOException throws ) VAR_2 com.google.gerrit.reviewdb.client.Account.Id , VAR_1 org.eclipse.jgit.lib.Repository ( METHOD_1 boolean public 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; VAR_1 . add ( STRING_2 ) ; VAR_1 . add ( STRING_3 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( getName . c ( add . VAR_1 { ) ) ( METHOD_2 : c TYPE_3 final ( for ; ) STRING_3 ( add . VAR_1 ; ) STRING_2 ( add . VAR_1 ; ) STRING_1 ( add . VAR_1 ; ) ( > java.lang.String < TYPE_2 new = VAR_1 > java.lang.String < TYPE_1 final { ) ( METHOD_1 > java.lang.String < TYPE_1 protected 
public java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 db ) throws TYPE_2 { TYPE_3 s = db . METHOD_2 ( ) ; try { TYPE_4 VAR_1 = s . METHOD_3 ( STRING_1 ) ; try { TYPE_5 < java.lang.String > VAR_2 = new TYPE_5 < java.lang.String > ( ) ; while ( VAR_1 . METHOD_4 ( ) ) { VAR_2 . add ( VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; } return VAR_2 ; } finally { VAR_1 . close ( ) ; } } finally { s . close ( ) ; } } } } ; ) ( close . s { finally } } ; ) ( close . VAR_1 { finally } ; VAR_2 return } ; ) ) ( METHOD_6 . ) 1 ( METHOD_5 . VAR_1 ( add . VAR_2 { ) ) ( METHOD_4 . VAR_1 ( while ; ) ( > java.lang.String < TYPE_5 new = VAR_2 > java.lang.String < TYPE_5 { try ; ) STRING_1 ( METHOD_3 . s = VAR_1 TYPE_4 { try ; ) ( METHOD_2 . db = s TYPE_3 { TYPE_2 throws ) db TYPE_1 ( METHOD_1 > java.lang.String < java.util.Set public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_4 ) ; METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ; } } ; ) VAR_3 , VAR_4 , STRING_6 ( METHOD_4 ; ) VAR_4 , STRING_5 ( METHOD_4 ; ) VAR_3 , STRING_4 ( METHOD_4 ; ) STRING_3 ( METHOD_4 ; ) ) null , null , null , null , VAR_2 ( METHOD_3 ( insert = VAR_4 com.google.gerrit.reviewdb.client.Change ; ) ) null , null , null , null , VAR_1 ( METHOD_3 ( insert = VAR_3 com.google.gerrit.reviewdb.client.Change ; ) STRING_2 ( METHOD_2 = VAR_2 > TYPE_2 < TYPE_1 ; ) STRING_1 ( METHOD_2 = VAR_1 > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , boolean VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) ; } } ; ) ) VAR_2 ( METHOD_6 . TYPE_5 ( METHOD_5 . ) STRING_4 ( METHOD_4 . ) ) ) ) STRING_3 , STRING_2 ( METHOD_3 . ) ) ( get . project ( METHOD_2 . TYPE_4 ( + STRING_1 ( ( TYPE_3 new { ) VAR_2 > TYPE_2 < TYPE_1 , VAR_1 boolean , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_2 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_3 ) ; } } ; ) VAR_3 ( to . ) VAR_10 ( METHOD_6 . ) VAR_9 ( to . ) VAR_2 ( METHOD_6 . ) VAR_8 , VAR_7 , VAR_6 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . toString ( ) ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { return VAR_2 . METHOD_4 ( 0 , VAR_2 . METHOD_5 ( CHAR_1 ) ) ; } if ( VAR_3 . METHOD_6 ( VAR_1 ) ) { return VAR_3 . METHOD_7 ( VAR_1 ) ; } return null ; } } ; null return } ; ) VAR_1 ( METHOD_7 . VAR_3 return { ) ) VAR_1 ( METHOD_6 . VAR_3 ( if } ; ) ) CHAR_1 ( METHOD_5 . VAR_2 , 0 ( METHOD_4 . VAR_2 return { ) ) VAR_2 ( METHOD_3 . TYPE_2 ( if ; ) ( toString . ) ( METHOD_2 . VAR_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String public 
private static void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) throws java.io.IOException { try { if ( ! ( path . equals ( STRING_1 ) ) ) { diff . METHOD_2 ( TYPE_3 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } } } ; ) ( METHOD_5 . diff { finally } ; ) VAR_2 , VAR_1 ( format . diff ; ) true ( METHOD_4 . diff ; ) repo ( METHOD_3 . diff } ; ) ) path ( create . TYPE_3 ( METHOD_2 . diff { ) ) ) STRING_1 ( equals . path ( ! ( if { try { java.io.IOException throws ) diff TYPE_2 , path java.lang.String , VAR_2 TYPE_1 , VAR_1 TYPE_1 , repo org.eclipse.jgit.lib.Repository ( METHOD_1 void static private 
public void METHOD_1 ( TYPE_1 ctx ) { if ( ( VAR_1 ) == null ) { return ; } METHOD_2 ( ctx . getProject ( ) , VAR_2 , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 , VAR_5 , VAR_6 , ctx . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 . getMessage ( ) , VAR_7 , VAR_8 , ctx . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ctx , VAR_8 , VAR_7 , ) ( getMessage . VAR_1 , ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 . ctx , VAR_6 , VAR_5 , VAR_2 ( METHOD_3 . VAR_4 ; ) VAR_1 , VAR_3 , VAR_2 , ) ( getProject . ctx ( METHOD_2 } ; return { ) null == ) VAR_1 ( ( if { ) ctx TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_1 . get ( VAR_1 class , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ; if ( ( VAR_3 ) == null ) { METHOD_5 ( STRING_2 ) . METHOD_6 ( new TYPE_3 ( VAR_4 , VAR_5 ) ) ; } } } } ; ) ) VAR_5 , VAR_4 ( TYPE_3 new ( METHOD_6 . ) STRING_2 ( METHOD_5 { ) null == ) VAR_3 ( ( if ; ) ) ) VAR_2 ( METHOD_4 . TYPE_2 , class VAR_1 ( get . TYPE_1 ( METHOD_3 . ) STRING_1 ( METHOD_2 { ) ( METHOD_1 void private 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 ) ; bind ( VAR_3 class ) . in ( VAR_2 ) ; bind ( VAR_4 class ) . to ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; TYPE_3 . METHOD_2 ( binder ( ) , VAR_5 ) ; METHOD_3 ( VAR_6 , STRING_1 ) . to ( VAR_7 class ) ; get ( VAR_5 ) . to ( VAR_8 class ) ; } } ; ) class VAR_8 ( to . ) VAR_5 ( get ; ) class VAR_7 ( to . ) STRING_1 , VAR_6 ( METHOD_3 ; ) VAR_5 , ) ( binder ( METHOD_2 . TYPE_3 ; ) ) ( TYPE_2 new ( install ; ) ) ( TYPE_1 new ( install ; ) class VAR_3 ( to . ) class VAR_4 ( bind ; ) VAR_2 ( in . ) class VAR_3 ( bind ; ) VAR_2 ( in . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) . METHOD_3 ( VAR_8 class ) . in ( VAR_6 ) ; bind ( VAR_9 . String class ) . METHOD_2 ( VAR_10 class ) . METHOD_3 ( VAR_11 class ) ; } } ; ) class VAR_11 ( METHOD_3 . ) class VAR_10 ( METHOD_2 . ) class String . VAR_9 ( bind ; ) VAR_6 ( in . ) class VAR_8 ( METHOD_3 . ) class VAR_7 ( bind ; ) VAR_6 ( in . ) class VAR_5 ( METHOD_3 . ) class VAR_4 ( bind ; ) class VAR_3 ( METHOD_3 . ) class VAR_2 ( METHOD_2 . ) class VAR_1 ( bind ; ) ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
private boolean METHOD_1 ( ) { if ( VAR_1 . get ( ) . METHOD_2 ( ) ) { TYPE_1 ctl = VAR_1 . get ( ) . METHOD_3 ( ) ; return ( ctl . METHOD_4 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) || ( ctl . METHOD_5 ( ) ) ; } else { return false ; } } } } ; false return { else } ; ) ) ( METHOD_5 . ctl ( || ) ) ) ) VAR_3 ( + ) STRING_1 + ) VAR_2 ( ( ( ( METHOD_4 . ctl ( return ; ) ( METHOD_3 . ) ( get . VAR_1 = ctl TYPE_1 { ) ) ( METHOD_2 . ) ( get . VAR_1 ( if { ) ( METHOD_1 boolean private 
protected void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { final TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; final TYPE_2 e = new TYPE_2 ( s ) ; try { s . METHOD_1 ( e , VAR_1 , to ) ; } finally { e . close ( ) ; } } } } ; ) ( close . e { finally } ; ) to , VAR_1 , e ( METHOD_1 . s { try ; ) s ( TYPE_2 new = e TYPE_2 final ; ) ) db ( ) TYPE_1 ( ( = s TYPE_1 final { com.google.gwtorm.server.OrmException throws ) to java.lang.String , VAR_1 java.lang.String , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void protected 
public TYPE_1 format ( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; TYPE_4 ctl = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ; return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , cd . notes ( ) , ctl . METHOD_4 ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; } } ; ) ) null , null , ) VAR_3 ( com.google.gerrit.reviewdb.client.Account.Id new , psId , ) ( METHOD_4 . ctl , ) ( notes . cd , ) ( get . db ( METHOD_3 . VAR_2 , cd , VAR_1 , out ( format return ; ) ) ( user . VAR_1 ( METHOD_2 . ) ( METHOD_1 . cd = ctl TYPE_4 ; ) ( currentPatchSetId . ) ( change . cd = psId com.google.gerrit.reviewdb.client.PatchSet.Id { com.google.gwtorm.server.OrmException , TYPE_3 throws ) cd com.google.gerrit.server.query.change.ChangeData , VAR_1 TYPE_2 , out TYPE_1 ( format TYPE_1 public 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 { try { VAR_2 . METHOD_2 ( TYPE_5 ) ; return ; } catch ( TYPE_3 VAR_3 ) { } if ( VAR_4 . METHOD_3 ( VAR_1 , repo , commit ) ) { return ; } throw new TYPE_3 ( java.lang.String.format ( STRING_1 , TYPE_5 . METHOD_4 ( ) ) ) ; } } ; ) ) ) ( METHOD_4 . TYPE_5 , STRING_1 ( java.lang.String.format ( TYPE_3 new throw } ; return { ) ) commit , repo , VAR_1 ( METHOD_3 . VAR_4 ( if } { ) VAR_3 TYPE_3 ( catch } ; return ; ) TYPE_5 ( METHOD_2 . VAR_2 { try { TYPE_4 , TYPE_3 throws ) VAR_2 TYPE_2 , VAR_1 TYPE_1 , commit org.eclipse.jgit.revwalk.RevCommit , repo org.eclipse.jgit.lib.Repository ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , java.io.IOException { TYPE_2 p = VAR_2 . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_6 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_3 ( ) ) ; } } throw new TYPE_4 ( id ) ; } } ; ) id ( TYPE_4 new throw } } ; ) ) ( METHOD_3 . p , VAR_1 ( TYPE_1 new return { ) ) ) ( METHOD_5 . ) ( getProject . VAR_4 ( equals . ) ( METHOD_5 . VAR_1 ( if { ) ) ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 . p : VAR_4 TYPE_6 ( for ; ) id , VAR_3 ( METHOD_1 . VAR_2 = p TYPE_2 { java.io.IOException , TYPE_5 , TYPE_4 throws ) id TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( null ) ; METHOD_5 ( r ) ; assertEquals ( VAR_2 . getName ( ) , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_7 . TYPE_1 ; ) email . r , ) ( METHOD_6 . VAR_2 ( assertEquals ; ) name . r , ) ( getName . VAR_2 ( assertEquals ; ) r ( METHOD_5 ; ) null ( METHOD_4 . ) ( create = r TYPE_2 final ; ) VAR_1 ( METHOD_3 . TYPE_1 ; ) STRING_1 ( METHOD_2 { ) ( METHOD_1 void public 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) ! = null ) & & ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ! = null ) ) { return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; } else { return TYPE_1 . METHOD_3 ( ) ; } } } } ; ) ( METHOD_3 . TYPE_1 return { else } ; ) ) ) VAR_1 ( get . ) ( METHOD_2 . VAR_2 ( of . TYPE_2 ( of . TYPE_1 return { ) ) null = ! ) ) VAR_1 ( get . ) ( METHOD_2 . VAR_2 ( ( & & ) null = ! ) VAR_2 ( ( ( if { ) VAR_1 java.lang.String ( METHOD_1 > TYPE_2 < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 err = new TYPE_1 ( name ) ; METHOD_2 ( ) . METHOD_3 ( err ) ; METHOD_4 ( ) ; try { new TYPE_2 ( VAR_1 , VAR_2 , name ) . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_7 ( err , VAR_3 ) ; } METHOD_8 ( ) ; } } ; ) ( METHOD_8 } ; ) VAR_3 , err ( METHOD_7 { ) VAR_3 TYPE_1 ( catch } ; ) STRING_1 ( METHOD_6 ; ) ( METHOD_5 . ) name , VAR_2 , VAR_1 ( TYPE_2 new { try ; ) ( METHOD_4 ; ) err ( METHOD_3 . ) ( METHOD_2 ; ) name ( TYPE_1 new = err TYPE_1 final { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_2 VAR_1 ) { return VAR_1 . submit ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( db , id ) ; } return null ; } } ) ; } } ; ) } } ; null return } ; ) id , db ( METHOD_4 { ) ) ( METHOD_3 . VAR_2 = db com.google.gerrit.reviewdb.server.ReviewDb ( try { java.lang.Exception throws ) ( METHOD_2 TYPE_4 public { ) ( > TYPE_4 < TYPE_3 new ( submit . VAR_1 return { ) VAR_1 TYPE_2 , id Id . com.google.gerrit.reviewdb.client.Change final ( METHOD_1 > ? < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . add ( METHOD_3 ( STRING_1 , null ) ) ; changeId = VAR_1 . get ( 0 ) . getChangeId ( ) ; VAR_1 . add ( METHOD_3 ( STRING_2 , changeId ) ) ; VAR_1 . add ( METHOD_3 ( STRING_3 , changeId ) ) ; } } ; ) ) changeId , STRING_3 ( METHOD_3 ( add . VAR_1 ; ) ) changeId , STRING_2 ( METHOD_3 ( add . VAR_1 ; ) ( getChangeId . ) 0 ( get . VAR_1 = changeId ; ) ) null , STRING_1 ( METHOD_3 ( add . VAR_1 ; ) ( METHOD_2 . TYPE_1 = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( java.util.List < TYPE_2 > plugins ) throws java.io.IOException { TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . create ( ) ; for ( TYPE_2 VAR_2 : plugins ) { VAR_1 . put ( TYPE_4 . METHOD_2 ( VAR_2 ) , VAR_2 ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) VAR_2 , ) VAR_2 ( METHOD_2 . TYPE_4 ( put . VAR_1 { ) plugins : VAR_2 TYPE_2 ( for ; ) ( create . TYPE_3 = VAR_1 > TYPE_2 , java.lang.String < TYPE_1 { java.io.IOException throws ) plugins > TYPE_2 < java.util.List ( METHOD_1 > TYPE_2 , java.lang.String < TYPE_1 static private 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_1 , VAR_4 ) ; assertEquals ( new TYPE_1 ( VAR_1 , STRING_1 ) , VAR_5 ) ; } } ; ) VAR_5 , ) STRING_1 , VAR_1 ( TYPE_1 new ( assertEquals ; ) VAR_4 , VAR_1 ( assertEquals ; ) VAR_3 ( METHOD_3 ; ) VAR_1 ( TYPE_3 new = VAR_2 TYPE_3 final ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
public final java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) ! = null ) { return METHOD_2 ( ) . METHOD_3 ( ) ; } else { if ( ( METHOD_2 ( ) . METHOD_4 ( ) ) ! = ( - 1 ) ) { return TYPE_1 . toString ( METHOD_2 ( ) . METHOD_4 ( ) ) ; } else { return STRING_1 ; } } } } } } ; STRING_1 return { else } ; ) ) ( METHOD_4 . ) ( METHOD_2 ( toString . TYPE_1 return { ) ) 1 - ( = ! ) ) ( METHOD_4 . ) ( METHOD_2 ( ( if { else } ; ) ( METHOD_3 . ) ( METHOD_2 return { ) null = ! ) ) ( METHOD_3 . ) ( METHOD_2 ( ( if { ) ( METHOD_1 java.lang.String final public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ; TYPE_2 . Result change = METHOD_4 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ; org.junit.Assert.assertEquals ( change . METHOD_5 ( ) , VAR_2 . getId ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_6 ( 0 ) ) ; METHOD_7 ( change . getChangeId ( ) , 1 ) ; } } ; ) 1 , ) ( getChangeId . change ( METHOD_7 ; ) ) 0 ( METHOD_6 . VAR_2 , VAR_1 ( org.junit.Assert.assertEquals ; ) ) ( getId . VAR_2 , ) ( METHOD_5 . change ( org.junit.Assert.assertEquals ; ) ( METHOD_3 = VAR_2 org.eclipse.jgit.revwalk.RevCommit ; ) ) ( getChangeId . change ( submit ; ) git ( METHOD_4 = change Result . TYPE_2 ; ) ( METHOD_3 = VAR_1 org.eclipse.jgit.revwalk.RevCommit ; ) ( METHOD_2 = git TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; for ( int i = ( VAR_1 . size ( ) ) - 1 ; i > = 0 ; i -- ) { VAR_2 = new TYPE_2 ( VAR_1 . get ( i ) , VAR_2 ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) VAR_2 , ) i ( get . VAR_1 ( TYPE_2 new = VAR_2 { ) -- i ; 0 = > i ; 1 - ) ) ( size . VAR_1 ( = i int ( for ; VAR_3 = VAR_2 TYPE_1 { ) VAR_1 > TYPE_1 < java.util.List ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) == VAR_1 ) { METHOD_3 ( ) ; } else if ( ( VAR_3 ) == VAR_1 ) { VAR_4 = false ; METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 ; false = VAR_4 { ) VAR_1 == ) VAR_3 ( ( if else } ; ) ( METHOD_3 { ) VAR_1 == ) VAR_2 ( ( if ; ) ) ) ( METHOD_2 . event ( ) TYPE_2 ( ( = VAR_1 TYPE_2 final { ) event TYPE_1 final ( METHOD_1 void public 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } } } } ; STRING_6 + ) ) VAR_6 ( + ) STRING_5 + ) ) VAR_5 ( + ) STRING_4 + ) ) VAR_4 ( + STRING_3 ( ( ( ( ( return : default ; STRING_2 return : VAR_3 case ; STRING_1 return : VAR_2 case { ) status ( switch { else } ; ) VAR_1 ( METHOD_2 return { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 java.lang.String public 
public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2 . values ( ) ; } else { java.util.List < TYPE_2 > plugins = new java.util.ArrayList ( VAR_2 . values ( ) ) ; plugins . METHOD_2 ( VAR_3 . values ( ) ) ; return plugins ; } } } } ; plugins return ; ) ) ( values . VAR_3 ( METHOD_2 . plugins ; ) ) ( values . VAR_2 ( java.util.ArrayList new = plugins > TYPE_2 < java.util.List { else } ; ) ( values . VAR_2 return { ) VAR_1 ! ( if { ) VAR_1 boolean ( METHOD_1 > TYPE_2 < TYPE_1 public 
public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { return ; } TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 ! = null ) { for ( TYPE_1 d : VAR_2 ) { if ( d . METHOD_5 ( ) ) { TYPE_2 . METHOD_1 ( d ) ; } else { TYPE_2 . METHOD_6 ( d ) ; } } } TYPE_2 . METHOD_6 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_6 . TYPE_2 } } } ; ) d ( METHOD_6 . TYPE_2 { else } ; ) d ( METHOD_1 . TYPE_2 { ) ) ( METHOD_5 . d ( if { ) VAR_2 : d TYPE_1 ( for { ) null = ! VAR_2 ( if ; ) ( METHOD_4 . VAR_1 = VAR_2 ] [ TYPE_1 } ; return { ) ) ) ) ( METHOD_3 . VAR_1 ( equals . ) ( METHOD_2 . VAR_1 ( ! ( if { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 void static public 
public static void METHOD_1 ( int id , java.lang.String commit , java.lang.String VAR_1 , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) { TYPE_3 VAR_3 = TYPE_3 . create ( ) ; VAR_3 . METHOD_2 ( message ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; TYPE_4 . METHOD_4 ( id , commit , STRING_1 ) . METHOD_5 ( VAR_3 , VAR_2 ) ; } } ; ) VAR_2 , VAR_3 ( METHOD_5 . ) STRING_1 , commit , id ( METHOD_4 . TYPE_4 ; ) VAR_1 ( METHOD_3 . VAR_3 ; ) message ( METHOD_2 . VAR_3 ; ) ( create . TYPE_3 = VAR_3 TYPE_3 { ) VAR_2 > ChangeInfo . TYPE_2 < TYPE_1 , message java.lang.String , VAR_1 java.lang.String , commit java.lang.String , id int ( METHOD_1 void static public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.Map < java.lang.String , TYPE_1 > res = METHOD_5 ( STRING_1 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_6 ( 1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_7 ( name ) ; TYPE_1 d = res . get ( name ) ; com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( name ) ; } } ; ) name ( isEqualTo . ) name . d ( com.google.common.truth.Truth.assertThat ; ) name ( get . res = d TYPE_1 ; ) name ( METHOD_7 . ) res ( com.google.common.truth.Truth.assertThat ; ) 1 ( METHOD_6 . ) res ( com.google.common.truth.Truth.assertThat ; ) VAR_1 , STRING_1 ( METHOD_5 = res > TYPE_1 , java.lang.String < java.util.Map ; ) ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 . repo = name java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; for ( TYPE_3 w : this ) { if ( w instanceof TYPE_2 ) { final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ; if ( VAR_2 == null ) { VAR_2 = d ; } if ( ( d . METHOD_2 ( ) ) == VAR_1 ) { d . METHOD_1 ( ) ; return ; } } } if ( VAR_2 ! = null ) { VAR_2 . METHOD_1 ( ) ; } } } } ; ) ( METHOD_1 . VAR_2 { ) null = ! VAR_2 ( if } } } ; return ; ) ( METHOD_1 . d { ) VAR_1 == ) ) ( METHOD_2 . d ( ( if } ; d = VAR_2 { ) null == VAR_2 ( if ; ) ) w ( ) TYPE_2 ( ( = d TYPE_2 final { ) TYPE_2 instanceof w ( if { ) this : w TYPE_3 ( for ; null = VAR_2 TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 void public 
private < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_2 , TYPE_1 > METHOD_1 ( java.lang.String name , TYPE_4 < TYPE_2 > VAR_1 , long VAR_2 ) { TYPE_5 db = new TYPE_5 ( VAR_3 , name ) . METHOD_2 ( ) ; java.lang.String url = STRING_1 + ( db . METHOD_3 ( ) . toString ( ) ) ; return new TYPE_3 < TYPE_2 , TYPE_1 > ( url , VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 , url ( > TYPE_1 , TYPE_2 < TYPE_3 new return ; ) ) ( toString . ) ( METHOD_3 . db ( + STRING_1 = url java.lang.String ; ) ( METHOD_2 . ) name , VAR_3 ( TYPE_5 new = db TYPE_5 { ) VAR_2 long , VAR_1 > TYPE_2 < TYPE_4 , name java.lang.String ( METHOD_1 > TYPE_1 , TYPE_2 < TYPE_3 > TYPE_2 , TYPE_1 < private 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . METHOD_2 ( git , STRING_1 ) . getChangeId ( ) ; } } ; ) ( getChangeId . ) STRING_1 , git ( METHOD_2 . VAR_2 return ; ) ) VAR_6 ( java.lang.String new , VAR_5 , VAR_4 , VAR_1 , db ( create . VAR_3 = VAR_2 TYPE_3 { java.lang.Exception throws ) VAR_1 TYPE_2 , git TYPE_1 ( METHOD_1 java.lang.String private 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws TYPE_2 , java.io.IOException , TYPE_3 { org.eclipse.jgit.lib.Repository repo ; try { repo = VAR_1 . METHOD_2 ( change . getProject ( ) ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( change . getProject ( ) , e ) ; } try { return new TYPE_1 ( repo , change ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) change , repo ( TYPE_1 new return { try } ; ) e , ) ( getProject . change ( TYPE_2 new throw { ) e TYPE_4 ( catch } ; ) ) ( getProject . change ( METHOD_2 . VAR_1 = repo { try ; repo org.eclipse.jgit.lib.Repository { TYPE_3 , java.io.IOException , TYPE_2 throws ) change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( final boolean VAR_1 ) throws TYPE_1 { if ( ( db ) ! = null ) { try { for ( TYPE_2 VAR_2 : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { if ( ( ! VAR_1 ) & & ( ( VAR_2 . getValue ( ) ) == 0 ) ) { continue ; } add ( VAR_3 , VAR_2 . getAccountId ( ) ) ; } } catch ( TYPE_3 . OrmException err ) { } } } } } } { ) err OrmException . TYPE_3 ( catch } } ; ) ) ( getAccountId . VAR_2 , VAR_3 ( add } ; continue { ) ) 0 == ) ) ( getValue . VAR_2 ( ( & & ) VAR_1 ! ( ( if { ) ) ) ( change.getId ( METHOD_3 . ) ( METHOD_2 . db : VAR_2 TYPE_2 ( for { try { ) null = ! ) db ( ( if { TYPE_1 throws ) VAR_1 boolean final ( METHOD_1 void private 
public void METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { if ( ( METHOD_2 ( VAR_1 ) ) ! = ( - 1 ) ) { if ( ! ( VAR_1 . equals ( VAR_2 ) ) ) { METHOD_3 ( ) ; TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; VAR_3 . METHOD_4 ( true ) ; VAR_3 . METHOD_5 ( true ) ; VAR_2 = VAR_1 ; } } else { TYPE_2 . display ( TYPE_3 . METHOD_6 ( VAR_1 . getParentKey ( ) ) ) ; } } } } ; ) ) ) ( getParentKey . VAR_1 ( METHOD_6 . TYPE_3 ( display . TYPE_2 { else } } ; VAR_1 = VAR_2 ; ) true ( METHOD_5 . VAR_3 ; ) true ( METHOD_4 . VAR_3 ; ) VAR_1 ( get . VAR_4 = VAR_3 TYPE_1 ; ) ( METHOD_3 { ) ) ) VAR_2 ( equals . VAR_1 ( ! ( if { ) ) 1 - ( = ! ) ) VAR_1 ( METHOD_2 ( ( if { ) VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id final ( METHOD_1 void public 
private void METHOD_1 ( ) { final TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_2 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { METHOD_2 ( ) ; } } } ; for ( final TYPE_3 p : VAR_3 ) { p . METHOD_3 ( VAR_1 ) ; } } } } ; ) VAR_1 ( METHOD_3 . p { ) VAR_3 : p TYPE_3 final ( for ; } } } ; ) ( METHOD_2 { ) ) ) ( size . VAR_3 ( == ) ) VAR_2 ( ++ ( ( if { ) result TYPE_2 final ( onSuccess void public ; VAR_2 int private { ) ( > TYPE_2 < TYPE_1 new = VAR_1 > TYPE_2 < TYPE_1 final { ) ( METHOD_1 void private 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { TYPE_2 VAR_2 = TYPE_3 . create ( VAR_3 , name , 0 ) ; if ( ! ( VAR_1 . METHOD_2 ( VAR_4 , STRING_1 , VAR_2 ) ) ) { METHOD_3 ( ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + name ) ) ; } } } } ; ) ) name + ) STRING_3 + ) ) VAR_3 ( + STRING_2 ( ( ( ( METHOD_3 { ) ) ) VAR_2 , STRING_1 , VAR_4 ( METHOD_2 . VAR_1 ( ! ( if ; ) 0 , name , VAR_3 ( create . TYPE_3 = VAR_2 TYPE_2 { ) name java.lang.String , VAR_1 TYPE_1 ( METHOD_1 void private 
public java.lang.String METHOD_1 ( ) { if ( ( value ( ) ) < = ( ( short ) ( 0 ) ) ) { return ( ( label ( ) ) + CHAR_1 ) + ( value ( ) ) ; } else { return ( ( label ( ) ) + STRING_1 ) + ( value ( ) ) ; } } } } ; ) ) ( value ( + ) STRING_1 + ) ) ( label ( ( return { else } ; ) ) ( value ( + ) CHAR_1 + ) ) ( label ( ( return { ) ) ) 0 ( ) short ( ( = < ) ) ( value ( ( if { ) ( METHOD_1 java.lang.String public 
public void METHOD_1 ( ) { final java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_1 , STRING_2 , STRING_2 , STRING_3 , STRING_3 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 } ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i += 2 ) { assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) , VAR_1 [ ( i + 1 ) ] ) ; } } } } ; ) ] ) 1 + i ( [ VAR_1 , ) ] i [ VAR_1 ( METHOD_2 . TYPE_1 ( assertEquals { ) 2 += i ; ) length . VAR_1 ( < i ; 0 = i int ( for ; } STRING_10 , STRING_9 , STRING_8 , STRING_7 , STRING_6 , STRING_5 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_3 , STRING_3 , STRING_2 , STRING_2 , STRING_1 , STRING_1 { ] [ java.lang.String new = VAR_1 ] [ java.lang.String final { ) ( METHOD_1 void public 
public void METHOD_1 ( com.google.gerrit.reviewdb.client . AccountGroup group ) throws java.io.IOException { try { METHOD_1 ( TYPE_1 . METHOD_2 ( group ) , METHOD_3 ( group , null ) ) . get ( ) ; } catch ( TYPE_2 | TYPE_3 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_3 | TYPE_2 ( catch } ; ) ( get . ) ) null , group ( METHOD_3 , ) group ( METHOD_2 . TYPE_1 ( METHOD_1 { try { java.io.IOException throws ) group AccountGroup . com.google.gerrit.reviewdb.client ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , TYPE_2 c ) throws java.io.IOException { TYPE_3 r = VAR_2 . put ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) , c ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; } } ; ) class VAR_4 , ) ( METHOD_5 . r ( METHOD_4 . ) ( METHOD_3 return ; ) ) ( METHOD_2 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) c , ) STRING_3 + ) VAR_1 + ) STRING_2 + ) changeId + STRING_1 ( ( ( ( ( put . VAR_2 = r TYPE_3 { java.io.IOException throws ) c TYPE_2 , VAR_1 java.lang.String , changeId java.lang.String ( METHOD_1 TYPE_1 private 
private TYPE_1 METHOD_1 ( TYPE_1 group ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_1 ( repo , TYPE_2 . METHOD_3 ( db , group . getId ( ) ) ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( repo , group . METHOD_5 ( ) ) ; TYPE_4 < TYPE_1 > result = VAR_4 . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( result ) . METHOD_7 ( ) ; return result . get ( ) ; } } } } ; ) ( get . result return ; ) ( METHOD_7 . ) result ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_6 . VAR_4 = result > TYPE_1 < TYPE_4 ; ) ) ( METHOD_5 . group , repo ( METHOD_4 . TYPE_3 = VAR_4 TYPE_3 ; ) ) ) ( getId . group , db ( METHOD_3 . TYPE_2 , repo ( METHOD_1 . VAR_3 { ) ) VAR_2 ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try { java.lang.Exception throws ) group TYPE_1 ( METHOD_1 TYPE_1 private 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { return new TYPE_4 ( args . rw , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , args . repo ) . METHOD_1 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException ( catch } ; ) VAR_1 ( METHOD_1 . ) repo . args , VAR_6 , VAR_5 , VAR_4 , VAR_3 , ) ( METHOD_2 . VAR_2 , rw . args ( TYPE_4 new return { try { TYPE_3 throws ) VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
public java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey n : METHOD_3 ( ) ) { TYPE_3 p = VAR_2 . METHOD_4 ( n ) ; if ( p ! = null ) { VAR_1 . METHOD_5 ( p . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) ) ( METHOD_7 . ) ( METHOD_6 . p ( METHOD_5 . VAR_1 { ) null = ! p ( if ; ) n ( METHOD_4 . VAR_2 = p TYPE_3 { ) ) ( METHOD_3 : n com.google.gerrit.reviewdb.client.Project.NameKey ( for ; ) ( METHOD_2 . TYPE_2 = VAR_1 > TYPE_1 < java.util.Set { ) ( METHOD_1 > TYPE_1 < java.util.Set public 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_5 ( true ) ; } } ) ; } } ; ) } } ; ) true ( METHOD_5 . VAR_1 ; ) result ( display . VAR_1 { ) result > AccountGroup . TYPE_3 < java.util.List final ( METHOD_4 void protected { ) this ( > > AccountGroup . TYPE_3 < java.util.List < TYPE_2 new ( METHOD_3 . TYPE_1 } ; ) ( METHOD_2 { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ctx ) ; return ; } if ( c . currentPatchSetId ( ) . equals ( psId ) ) { c . METHOD_4 ( METHOD_5 ( ctx ) ) ; } ctx . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . ctx } ; ) ) ctx ( METHOD_5 ( METHOD_4 . c { ) ) psId ( equals . ) ( currentPatchSetId . c ( if } ; return ; ) ctx ( METHOD_3 . VAR_1 ; ) ( get . VAR_2 = VAR_1 { ) ) ( METHOD_2 ( if ; ) ( getChange . ctx = c com.google.gerrit.reviewdb.client.Change { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void private 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } } ; ) STRING_1 ( METHOD_3 . TYPE_1 return ; ) rsrc ( METHOD_4 . VAR_1 } ; ) STRING_1 ( METHOD_3 . TYPE_1 return { ) ) ) ) ( getChange . rsrc ( METHOD_2 ( || ) ) ( METHOD_1 . rsrc ( ( if { com.google.gwtorm.server.OrmException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > java.lang.String < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = add ( TYPE_2 . METHOD_2 ( ) , user ) ; TYPE_1 VAR_2 = add ( TYPE_2 . METHOD_3 ( ) , METHOD_4 ( STRING_1 ) ) ; TYPE_3 VAR_3 = VAR_4 . create ( ) . METHOD_5 ( user ) . METHOD_6 ( VAR_5 ) ; METHOD_7 ( VAR_3 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_6 , STRING_2 , ( ( STRING_3 + ( TYPE_4 . METHOD_10 ( VAR_2 . METHOD_9 ( ) ) ) ) + STRING_4 ) , STRING_5 ) ; } } ; ) STRING_5 , ) STRING_4 + ) ) ) ) ( METHOD_9 . VAR_2 ( METHOD_10 . TYPE_4 ( + STRING_3 ( ( , STRING_2 , VAR_6 , ) ) ( METHOD_9 . VAR_1 ( METHOD_8 . VAR_3 ( METHOD_7 ; ) VAR_5 ( METHOD_6 . ) user ( METHOD_5 . ) ( create . VAR_4 = VAR_3 TYPE_3 ; ) ) STRING_1 ( METHOD_4 , ) ( METHOD_3 . TYPE_2 ( add = VAR_2 TYPE_1 ; ) user , ) ( METHOD_2 . TYPE_2 ( add = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public synchronized void METHOD_1 ( ) { VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; VAR_3 = VAR_4 ; METHOD_3 ( false ) ; VAR_3 = VAR_5 ; if ( ( VAR_6 ) ! = null ) { VAR_6 . METHOD_1 ( ) ; } } } } ; ) ( METHOD_1 . VAR_6 { ) null = ! ) VAR_6 ( ( if ; VAR_5 = VAR_3 ; ) false ( METHOD_3 ; VAR_4 = VAR_3 ; ) ) ) ) ( METHOD_2 . VAR_2 ( + STRING_1 ( ( info . VAR_1 { ) ( METHOD_1 void synchronized public 
public void onSuccess ( TYPE_1 VAR_1 ) { diff = VAR_1 ; if ( VAR_2 . METHOD_1 ( ) ) { VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 . METHOD_3 ( VAR_4 ) ) > 0 ) { VAR_5 . onSuccess ( null ) ; } else { METHOD_4 ( VAR_1 , VAR_5 ) ; } } else { VAR_5 . onSuccess ( null ) ; } } } } ; ) null ( onSuccess . VAR_5 { else } } ; ) VAR_5 , VAR_1 ( METHOD_4 { else } ; ) null ( onSuccess . VAR_5 { ) 0 > ) ) VAR_4 ( METHOD_3 . VAR_3 ( ( if ; ) VAR_1 ( METHOD_2 . TYPE_2 = VAR_3 { ) ) ( METHOD_1 . VAR_2 ( if ; VAR_1 = diff { ) VAR_1 TYPE_1 ( onSuccess void public 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 ctx ) { change = new com.google.gerrit.reviewdb.client.Change ( TYPE_2 . METHOD_2 ( commit ) , changeId , ctx . METHOD_3 ( ) . getAccountId ( ) , new TYPE_3 . NameKey ( ctx . getProject ( ) , VAR_1 ) , ctx . METHOD_4 ( ) ) ; change . METHOD_5 ( TYPE_4 . METHOD_6 ( status , VAR_2 ) ) ; change . METHOD_7 ( topic ) ; return change ; } } ; change return ; ) topic ( METHOD_7 . change ; ) ) VAR_2 , status ( METHOD_6 . TYPE_4 ( METHOD_5 . change ; ) ) ( METHOD_4 . ctx , ) VAR_1 , ) ( getProject . ctx ( NameKey . TYPE_3 new , ) ( getAccountId . ) ( METHOD_3 . ctx , changeId , ) commit ( METHOD_2 . TYPE_2 ( com.google.gerrit.reviewdb.client.Change new = change { ) ctx TYPE_1 ( METHOD_1 com.google.gerrit.reviewdb.client.Change public 
public TYPE_1 METHOD_1 ( TYPE_2 group , boolean create ) { METHOD_2 ( ) ; for ( TYPE_1 r : VAR_1 ) { if ( TYPE_3 . METHOD_3 ( r , group ) ) { return r ; } } if ( create ) { TYPE_1 r = new TYPE_1 ( group ) ; VAR_1 . add ( r ) ; return r ; } else { return null ; } } } } ; null return { else } ; r return ; ) r ( add . VAR_1 ; ) group ( TYPE_1 new = r TYPE_1 { ) create ( if } } ; r return { ) ) group , r ( METHOD_3 . TYPE_3 ( if { ) VAR_1 : r TYPE_1 ( for ; ) ( METHOD_2 { ) create boolean , group TYPE_2 ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( ) { if ( ( ( ! ( VAR_1 ) ) & & ( ( METHOD_2 ( ) ) ! = null ) ) & & ( STRING_1 . equals ( super . METHOD_3 ( ) ) ) ) { super . METHOD_4 ( METHOD_2 ( ) ) ; VAR_1 = true ; if ( ( METHOD_5 ( ) ) ! = null ) { METHOD_6 ( METHOD_5 ( ) ) ; } } } } } } ; ) ) ( METHOD_5 ( METHOD_6 { ) null = ! ) ) ( METHOD_5 ( ( if ; true = VAR_1 ; ) ) ( METHOD_2 ( METHOD_4 . super { ) ) ) ) ( METHOD_3 . super ( equals . STRING_1 ( & & ) ) null = ! ) ) ( METHOD_2 ( ( & & ) ) VAR_1 ( ! ( ( ( if { ) ( METHOD_1 void protected 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.util.Set < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { r . add ( new TYPE_4 ( schema , id ) ) ; } return r ; } } ; r return } ; ) ) id , schema ( TYPE_4 new ( add . r { ) VAR_1 : id Id . com.google.gerrit.reviewdb.client.Change ( for ; ) ) ( size . VAR_1 ( METHOD_2 . TYPE_3 = r > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List { ) VAR_1 > Id . com.google.gerrit.reviewdb.client.Change < java.util.Set , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( METHOD_1 > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List static private 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_4 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ; } com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_6 . ) ) ) ) ( METHOD_5 . VAR_2 ( ) > ? < TYPE_1 ( ( ( com.google.common.truth.Truth.assertThat } ; ) ( METHOD_3 . ) repo ( com.google.common.truth.Truth.assertThat { ) ) VAR_1 ( METHOD_4 . VAR_2 = repo org.eclipse.jgit.lib.Repository ( try } ; ) ( METHOD_3 . ) repo ( com.google.common.truth.Truth.assertThat { ) ) VAR_1 ( METHOD_2 . VAR_2 = repo org.eclipse.jgit.lib.Repository ( try ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey { java.lang.Exception throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 == null ) { return VAR_3 ; } if ( VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) ; } else { if ( VAR_1 . equals ( STRING_1 ) ) { return VAR_3 ; } else if ( VAR_1 . equals ( STRING_2 ) ) { return VAR_4 ; } else { throw new com.google.gwtorm.server.OrmException ( ( STRING_3 + VAR_1 ) ) ; } } } } } } ; ) ) VAR_1 + STRING_3 ( ( com.google.gwtorm.server.OrmException new throw { else } ; VAR_4 return { ) ) STRING_2 ( equals . VAR_1 ( if else } ; VAR_3 return { ) ) STRING_1 ( equals . VAR_1 ( if { else } ; ) VAR_1 ( METHOD_2 . TYPE_1 return { ) VAR_2 ( if } ; VAR_3 return { ) null == VAR_1 ( if { com.google.gwtorm.server.OrmException throws ) VAR_2 boolean , VAR_1 java.lang.String ( METHOD_1 TYPE_1 static private 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( VAR_1 < TYPE_9 > METHOD_3 ( ) ) , new TYPE_10 ( ) ) ; } } ; ) ) ( TYPE_10 new , ) ) ( METHOD_3 > TYPE_9 < VAR_1 ( TYPE_8 new , ) ( TYPE_7 new , ) ) ( METHOD_2 . repo ( TYPE_6 new ( TYPE_5 new = servlet ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void protected 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { t = t . METHOD_2 ( ) ; if ( t . METHOD_3 ( ) ) { ( ( TYPE_3 ) ( t ) ) . bind ( this , VAR_1 ) ; return true ; } return TYPE_4 . METHOD_4 ( this , t ) ; } } ; ) t , this ( METHOD_4 . TYPE_4 return } ; true return ; ) VAR_1 , this ( bind . ) ) t ( ) TYPE_3 ( ( { ) ) ( METHOD_3 . t ( if ; ) ( METHOD_2 . t = t { ) VAR_1 TYPE_2 , t TYPE_1 ( METHOD_1 boolean public 
void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { if ( VAR_2 ) { TYPE_5 VAR_3 = new TYPE_5 ( VAR_4 ) ; VAR_3 . METHOD_2 ( false ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; while ( ( VAR_3 . METHOD_4 ( ) ) & & ( ! ( METHOD_5 ( ) ) ) ) { METHOD_6 ( VAR_3 ) ; } } } } } } ; ) VAR_3 ( METHOD_6 { ) ) ) ) ( METHOD_5 ( ! ( & & ) ) ( METHOD_4 . VAR_3 ( ( while ; ) VAR_1 ( METHOD_3 . VAR_3 ; ) false ( METHOD_2 . VAR_3 ; ) VAR_4 ( TYPE_5 new = VAR_3 TYPE_5 { ) VAR_2 ( if { TYPE_4 , TYPE_3 , TYPE_2 , java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 void 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_1 . ChangeInfo VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_3 event = new TYPE_3 ( change , VAR_1 , VAR_2 ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_5 . log , e ) ; } } } } } } ; ) e , log . TYPE_5 ( METHOD_5 . util { ) e java.lang.Exception ( catch } ; ) event ( METHOD_4 . VAR_4 { try { ) VAR_3 : VAR_4 TYPE_4 ( for ; ) VAR_2 , VAR_1 , change ( TYPE_3 new = event TYPE_3 } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_3 ( ! ( if { ) VAR_2 TYPE_2 , VAR_1 ChangeInfo . TYPE_1 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < TYPE_3 > m ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < java.lang.String > ( m . METHOD_2 ( ) ) ; for ( java.lang.String id : VAR_2 ) { VAR_1 . METHOD_3 ( id ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) id ( METHOD_3 . VAR_1 { ) VAR_2 : id java.lang.String ( for ; ) ) ( METHOD_2 . m ( > java.lang.String < TYPE_1 new = VAR_1 > java.lang.String < TYPE_1 { ) m > TYPE_3 < TYPE_2 ( METHOD_1 > java.lang.String < TYPE_1 static private 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 r = label ( VAR_1 . METHOD_2 ( ) . get ( ) ) ; if ( ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) & & ( r . isEmpty ( ) ) ) { return false ; } return r . contains ( VAR_1 . value ( ) ) ; } } ; ) ) ( value . VAR_1 ( contains . r return } ; false return { ) ) ) ( isEmpty . r ( & & ) ) VAR_2 ( == ) ) ( METHOD_3 . VAR_1 ( ( ( if ; ) ) ( get . ) ( METHOD_2 . VAR_1 ( label = r TYPE_2 { ) VAR_1 TYPE_1 ( METHOD_1 boolean private 
public TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; p . ref = patchSet . getRefName ( ) ; VAR_2 = METHOD_3 ( patchSet . METHOD_4 ( ) ) ; VAR_3 = ( patchSet . METHOD_5 ( ) . METHOD_6 ( ) ) / INT_1 ; return p ; } } ; p return ; INT_1 / ) ) ( METHOD_6 . ) ( METHOD_5 . patchSet ( = VAR_3 ; ) ) ( METHOD_4 . patchSet ( METHOD_3 = VAR_2 ; ) ( getRefName . patchSet = ref . p ; ) ) ( METHOD_2 . patchSet ( toString . TYPE_3 = VAR_1 ; ) ( get . ) ( getRevision . patchSet = revision . p ; ) ( TYPE_1 new = p TYPE_1 { ) patchSet PatchSet . TYPE_2 final ( METHOD_1 TYPE_1 public 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , com.google.gerrit.server.query.change.ChangeData cd , TYPE_1 < TYPE_2 > VAR_2 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; com.google.gerrit.reviewdb.client.Account.Id VAR_4 = cd . change ( ) . METHOD_4 ( ) ; for ( TYPE_2 cm : VAR_3 ) { if ( VAR_1 . equals ( cm . METHOD_5 ( ) ) ) { return true ; } else if ( VAR_4 . equals ( cm . METHOD_5 ( ) ) ) { return false ; } } return false ; } } ; false return } } ; false return { ) ) ) ( METHOD_5 . cm ( equals . VAR_4 ( if else } ; true return { ) ) ) ( METHOD_5 . cm ( equals . VAR_1 ( if { ) VAR_3 : cm TYPE_2 ( for ; ) ( METHOD_4 . ) ( change . cd = VAR_4 com.google.gerrit.reviewdb.client.Account.Id ; ) VAR_2 ( METHOD_3 . ) ( METHOD_2 . TYPE_3 = VAR_3 > TYPE_2 < java.util.List { com.google.gwtorm.server.OrmException throws ) VAR_2 > TYPE_2 < TYPE_1 , cd com.google.gerrit.server.query.change.ChangeData , VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 boolean private 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 ) { try { METHOD_1 ( util . METHOD_2 ( change ) , util . METHOD_3 ( change . getProject ( ) , patchSet ) , util . METHOD_4 ( VAR_1 ) , VAR_2 ) ; } catch ( TYPE_2 | TYPE_3 | java.io.IOException | com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( error . VAR_3 { ) e com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_3 | TYPE_2 ( catch } ; ) VAR_2 , ) VAR_1 ( METHOD_4 . util , ) patchSet , ) ( getProject . change ( METHOD_3 . util , ) change ( METHOD_2 . util ( METHOD_1 { try { ) VAR_2 TYPE_1 , VAR_1 com.google.gerrit.reviewdb.client.Account.Id , patchSet com.google.gerrit.reviewdb.client.PatchSet , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ; TYPE_1 update = METHOD_3 ( c , VAR_1 ) ; TYPE_2 < java.lang.String > VAR_2 = new TYPE_2 < > ( ) ; VAR_2 . add ( STRING_1 ) ; VAR_2 . add ( STRING_2 ) ; update . METHOD_4 ( VAR_2 ) ; update . commit ( ) ; TYPE_3 notes = METHOD_5 ( c ) ; org.junit.Assert.assertEquals ( VAR_2 , notes . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . notes , VAR_2 ( org.junit.Assert.assertEquals ; ) c ( METHOD_5 = notes TYPE_3 ; ) ( commit . update ; ) VAR_2 ( METHOD_4 . update ; ) STRING_2 ( add . VAR_2 ; ) STRING_1 ( add . VAR_2 ; ) ( > < TYPE_2 new = VAR_2 > java.lang.String < TYPE_2 ; ) VAR_1 , c ( METHOD_3 = update TYPE_1 ; ) ( METHOD_2 = c com.google.gerrit.reviewdb.client.Change { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 close ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_1 ( ( ( TYPE_3 . contains ( VAR_1 ) ) & & ( ! ( TYPE_4 . equals ( VAR_1 ) ) ) ) , STRING_1 , VAR_1 ) ; METHOD_2 ( ) ; VAR_2 . append ( STRING_2 ) . append ( VAR_1 ) . append ( CHAR_1 ) ; return this ; } } ; this return ; ) CHAR_1 ( append . ) VAR_1 ( append . ) STRING_2 ( append . VAR_2 ; ) ( METHOD_2 ; ) VAR_1 , STRING_1 , ) ) ) ) VAR_1 ( equals . TYPE_4 ( ! ( & & ) ) VAR_1 ( contains . TYPE_3 ( ( ( METHOD_1 . TYPE_2 { ) VAR_1 java.lang.String ( close TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + STRING_2 ; repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_7 + STRING_7 ) + STRING_8 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_9 + STRING_10 ) + STRING_11 ) ) ) ; } } ; ) ) ) STRING_11 + ) STRING_10 + STRING_9 ( ( + STRING_6 ( ( contains . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ) ) STRING_8 + ) STRING_7 + STRING_7 ( ( + STRING_6 ( ( contains . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) STRING_5 ( METHOD_2 = VAR_2 java.lang.String ; ) ( create . ) VAR_1 , STRING_4 ( add . ) ( commit . ) STRING_3 ( branch . repo ; STRING_2 + STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public PatchSet . Id METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { try { if ( VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ) { return METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { return METHOD_3 ( db ) ; } finally { db . close ( ) ; } } } finally { synchronized ( VAR_3 ) { VAR_4 . update ( 1 ) ; } } } } } } ; ) 1 ( update . VAR_4 { ) VAR_3 ( synchronized { finally } } } ; ) ( close . db { finally } ; ) db ( METHOD_3 return { try ; ) ( METHOD_4 . VAR_2 = db com.google.gerrit.reviewdb.server.ReviewDb { else } ; ) db ( METHOD_3 return { ) ) ) ( METHOD_2 . TYPE_1 ( == VAR_1 ( if { try { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 Id . PatchSet public 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_3 VAR_2 = VAR_3 . get ( TYPE_4 . create ( VAR_4 , VAR_1 ) ) ; if ( VAR_2 == null ) { return TYPE_1 . METHOD_2 ( ) ; } return METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } catch ( java.io.IOException | TYPE_5 e ) { VAR_5 . METHOD_5 ( ( STRING_1 + VAR_1 ) , e ) ; return null ; } } } } ; null return ; ) e , ) VAR_1 + STRING_1 ( ( METHOD_5 . VAR_5 { ) e TYPE_5 | java.io.IOException ( catch } ; ) ) ( METHOD_4 . VAR_2 ( METHOD_3 return } ; ) ( METHOD_2 . TYPE_1 return { ) null == VAR_2 ( if ; ) ) VAR_1 , VAR_4 ( create . TYPE_4 ( get . VAR_3 = VAR_2 TYPE_3 { try { ) VAR_1 java.lang.String ( METHOD_1 > TYPE_2 < TYPE_1 public 
private static void METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 . sshd ( config , VAR_1 ) ; TYPE_4 . METHOD_2 ( config , VAR_1 ) ; TYPE_4 . user ( config , VAR_1 ) ; TYPE_4 . auth ( config , VAR_1 ) ; TYPE_4 . METHOD_3 ( config , VAR_1 ) ; TYPE_4 . repo ( config , VAR_1 ) ; } } ; ) VAR_1 , config ( repo . TYPE_4 ; ) VAR_1 , config ( METHOD_3 . TYPE_4 ; ) VAR_1 , config ( auth . TYPE_4 ; ) VAR_1 , config ( user . TYPE_4 ; ) VAR_1 , config ( METHOD_2 . TYPE_4 ; ) VAR_1 , config ( sshd . TYPE_4 { TYPE_3 throws ) VAR_1 TYPE_2 , config TYPE_1 ( METHOD_1 void static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . add ( STRING_1 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_3 ( input ) ; org.junit.Assert . METHOD_4 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_7 ( ) ; } } ; ) ( METHOD_7 } ; ) ) ) STRING_1 ( of . TYPE_4 ( METHOD_6 ( isEqualTo . ) ( METHOD_5 . ) e ( com.google.common.truth.Truth.assertThat { ) e TYPE_3 ( catch } ; ) STRING_2 ( METHOD_4 . org.junit.Assert ; ) input ( METHOD_3 . ) ( project { try ; VAR_1 = VAR_3 ; ) STRING_1 ( add . VAR_1 ; ) VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < java.util.List ; ) ( TYPE_1 new = input TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_4 VAR_1 = VAR_2 . METHOD_1 ( name ) ; if ( ! ( VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( name ) ; } return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; } } ; ) VAR_6 , VAR_5 , ) name ( METHOD_4 . VAR_4 , ) ( get . VAR_3 , VAR_1 ( TYPE_1 new return } ; ) name ( TYPE_3 new throw { ) ) ) ( METHOD_3 . ) ( METHOD_2 . ) ( getProject . VAR_1 ( ! ( if ; ) name ( METHOD_1 . VAR_2 = VAR_1 TYPE_4 { java.io.IOException , TYPE_3 , TYPE_2 throws ) name com.google.gerrit.reviewdb.client.Project.NameKey ( create TYPE_1 
public void METHOD_1 ( final boolean on ) { VAR_1 = on ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( getValue ( ) . METHOD_3 ( ) ) ; } else { VAR_2 . METHOD_2 ( false ) ; } METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . VAR_3 ( METHOD_4 } ; ) false ( METHOD_2 . VAR_2 { else } ; ) ) ( METHOD_3 . ) ( getValue ( METHOD_2 . VAR_2 { ) VAR_1 ( if ; on = VAR_1 { ) on boolean final ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_4 ( ps ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEmpty ( ) ; } } ; ) ( isEmpty . ) VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ps ( METHOD_4 = VAR_3 > TYPE_2 < java.util.List ; ) ( METHOD_3 . ) STRING_1 , git ( to . VAR_1 = ps com.google.gerrit.reviewdb.client.PatchSet.Id ; ) ) ( METHOD_2 . admin , db ( create . VAR_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 == null ) { throw new TYPE_5 ( STRING_1 ) ; } bind ( TYPE_6 . key ( VAR_1 , VAR_3 . name ( ) , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ; } } ; ) VAR_2 ( to . ) ) ) VAR_3 ( METHOD_3 . TYPE_7 , ) ( name . VAR_3 , VAR_1 ( key . TYPE_6 ( bind } ; ) STRING_1 ( TYPE_5 new throw { ) null == VAR_3 ( if ; ) class VAR_4 ( METHOD_2 . VAR_2 = VAR_3 TYPE_4 { ) VAR_2 > TYPE_3 extends ? < TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 void protected 
void METHOD_1 ( TYPE_1 e ) { e . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 . line ( ) ) ; java.lang.String token = TYPE_3 . METHOD_4 ( psId , VAR_1 . path ( ) ) ; if ( ! ( TYPE_4 . METHOD_5 ( ) ) ) { TYPE_4 . METHOD_6 ( token ) ; } else { TYPE_4 . display ( token ) ; } } } } ; ) token ( display . TYPE_4 { else } ; ) token ( METHOD_6 . TYPE_4 { ) ) ) ( METHOD_5 . TYPE_4 ( ! ( if ; ) ) ( path . VAR_1 , psId ( METHOD_4 . TYPE_3 = token java.lang.String ; ) ) ( line . VAR_1 ( METHOD_3 . TYPE_2 ; ) ( METHOD_2 . e { ) e TYPE_1 ( METHOD_1 void 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_8 , TYPE_9 { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 . getAccountId ( ) ) ; return VAR_4 . create ( VAR_2 . getParentKey ( ) ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ) ( getParentKey . VAR_2 ( create . VAR_4 return ; ) ) ( getAccountId . VAR_3 , VAR_2 ( METHOD_2 . VAR_1 { TYPE_9 , TYPE_8 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_7 , TYPE_6 , TYPE_5 , TYPE_4 , TYPE_3 , TYPE_2 throws ) ( METHOD_1 TYPE_1 public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . get ( key , new TYPE_3 ( key , VAR_5 , project , repo ) ) ; } catch ( TYPE_4 e ) { VAR_6 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) ; return VAR_7 ; } } } } ; VAR_7 return ; ) e , ) project + ) STRING_2 + ) ) ) ( name . VAR_2 ( + STRING_1 ( ( ( ( METHOD_2 . VAR_6 { ) e TYPE_4 ( catch } ; ) ) repo , project , VAR_5 , key ( TYPE_3 new , key ( get . VAR_4 return ; ) VAR_3 , VAR_2 , VAR_1 ( Key . TYPE_2 new = key Key . TYPE_2 { try { ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 org.eclipse.jgit.lib.ObjectId , repo org.eclipse.jgit.lib.Repository , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 ) ; bind ( TYPE_1 . get ( VAR_6 class , TYPE_2 . METHOD_4 ( STRING_1 ) ) ) . METHOD_5 ( VAR_7 class ) . in ( VAR_8 ) ; METHOD_6 ( ) . to ( VAR_7 class ) ; } } ; ) class VAR_7 ( to . ) ( METHOD_6 ; ) VAR_8 ( in . ) class VAR_7 ( METHOD_5 . ) ) ) STRING_1 ( METHOD_4 . TYPE_2 , class VAR_6 ( get . TYPE_1 ( bind ; ) VAR_5 ( METHOD_3 . ) class VAR_4 ( bind ; ) VAR_3 ( METHOD_3 . ) class VAR_2 ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result r = METHOD_3 ( ) ; TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ; TYPE_3 in = new TYPE_3 ( ) ; VAR_2 = VAR_3 . toString ( ) ; VAR_4 = true ; in . label ( STRING_1 , INT_1 ) ; VAR_5 . METHOD_5 ( VAR_6 class ) ; VAR_5 . METHOD_6 ( STRING_2 ) ; revision . METHOD_7 ( in ) ; } } ; ) in ( METHOD_7 . revision ; ) STRING_2 ( METHOD_6 . VAR_5 ; ) class VAR_6 ( METHOD_5 . VAR_5 ; ) INT_1 , STRING_1 ( label . in ; true = VAR_4 ; ) ( toString . VAR_3 = VAR_2 ; ) ( TYPE_3 new = in TYPE_3 ; ) ( METHOD_4 . ) ) ( getChangeId . r ( id . ) ( changes . VAR_1 = revision TYPE_2 ; ) ( METHOD_3 = r Result . TYPE_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_2 u = user ( VAR_4 ) ; METHOD_4 ( u ) ; METHOD_5 ( STRING_3 , u ) ; METHOD_5 ( STRING_4 , u ) ; METHOD_5 ( STRING_5 , u ) ; } } ; ) u , STRING_5 ( METHOD_5 ; ) u , STRING_4 ( METHOD_5 ; ) u , STRING_3 ( METHOD_5 ; ) u ( METHOD_4 ; ) VAR_4 ( user = u TYPE_2 ; ) STRING_2 , VAR_3 , VAR_2 , VAR_4 ( METHOD_3 . TYPE_1 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_3 = VAR_4 . changes ( ) . query ( STRING_1 ) . get ( ) ; org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ; } } ; ) changeId . ) 1 ( get . VAR_3 , ) ( getChangeId . VAR_1 ( org.junit.Assert.assertEquals ; ) changeId . ) 0 ( get . VAR_3 , ) ( getChangeId . VAR_2 ( org.junit.Assert.assertEquals ; ) ) ( size . VAR_3 , 2 ( org.junit.Assert.assertEquals ; ) ( get . ) STRING_1 ( query . ) ( changes . VAR_4 = VAR_3 > ChangeInfo . TYPE_2 < java.util.List ; ) ( METHOD_2 = VAR_2 Result . TYPE_1 ; ) ( METHOD_2 = VAR_1 Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void run ( ) { if ( VAR_1 . METHOD_1 ( ) ) { return ; } TYPE_1 VAR_2 = cm . METHOD_2 ( ) ; int size = ( ( VAR_2 . METHOD_3 ( ) ) - ( VAR_2 . METHOD_4 ( ) ) ) + 1 ; if ( ( cm . METHOD_5 ( ) ) == size ) { return ; } cm . METHOD_6 ( size ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; } } ; ) VAR_4 ( METHOD_7 . VAR_3 ; ) size ( METHOD_6 . cm } ; return { ) size == ) ) ( METHOD_5 . cm ( ( if ; 1 + ) ) ) ( METHOD_4 . VAR_2 ( - ) ) ( METHOD_3 . VAR_2 ( ( = size int ; ) ( METHOD_2 . cm = VAR_2 TYPE_1 } ; return { ) ) ( METHOD_1 . VAR_1 ( if { ) ( run void public 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( id ) ; cm . METHOD_1 ( user . getAccountId ( ) ) ; cm . METHOD_2 ( VAR_2 , result . info ) ; cm . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 = VAR_2 . getId ( ) ; VAR_4 . error ( ( STRING_1 + VAR_3 ) , e ) ; } } } } ; ) e , ) VAR_3 + STRING_1 ( ( error . VAR_4 ; ) ( getId . VAR_2 = VAR_3 com.google.gerrit.reviewdb.client.PatchSet.Id final { ) e java.lang.Exception ( catch } ; ) ( METHOD_3 . cm ; ) info . result , VAR_2 ( METHOD_2 . cm ; ) ) ( getAccountId . user ( METHOD_1 . cm ; ) id ( create . VAR_1 = cm TYPE_1 final { try { ) ( run void public 
private void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 ) throws java.io.IOException { METHOD_2 ( res , VAR_1 . type ) ; try ( TYPE_4 VAR_2 = METHOD_3 ( req , res , null ) ; TYPE_5 out = TYPE_6 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) { VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . id ) . METHOD_8 ( out ) ; } } } } ; ) out ( METHOD_8 . ) id . VAR_1 ( METHOD_7 . ) ( METHOD_6 . VAR_1 { ) ) VAR_2 ( METHOD_5 . ) ( METHOD_4 . TYPE_6 = out TYPE_5 ; ) null , res , req ( METHOD_3 = VAR_2 TYPE_4 ( try ; ) type . VAR_1 , res ( METHOD_2 { java.io.IOException throws ) VAR_1 TYPE_3 , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_7 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_8 . ) VAR_10 ( METHOD_8 . ) VAR_9 ( METHOD_7 . ) VAR_8 ( METHOD_7 . ) VAR_7 ( to . ) VAR_6 ( to . ) VAR_3 ( METHOD_6 . ) VAR_1 , STRING_1 ( METHOD_5 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 ( METHOD_4 ; ) VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_4 = VAR_5 . get ( ( ( TYPE_6 ) ( VAR_1 ) ) ) ; if ( ! ( VAR_4 . METHOD_2 ( VAR_6 ) ) ) { VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_6 ) ; return ; } else { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_1 ( METHOD_1 . VAR_3 { else } ; return ; ) VAR_6 , VAR_2 , VAR_1 ( METHOD_3 . VAR_4 { ) ) ) VAR_6 ( METHOD_2 . VAR_4 ( ! ( if ; ) ) ) VAR_1 ( ) TYPE_6 ( ( ( get . VAR_5 = VAR_4 TYPE_5 { TYPE_4 , java.io.IOException throws ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_4 event = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_5 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_6 . log , e ) ; } } } } } } ; ) e , log . TYPE_6 ( METHOD_5 . util { ) e java.lang.Exception ( catch } ; ) event ( METHOD_4 . VAR_5 { try { ) VAR_4 : VAR_5 TYPE_5 ( for ; ) VAR_3 , VAR_2 , VAR_1 , change ( TYPE_4 new = event TYPE_4 } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_4 ( ! ( if { ) VAR_3 TYPE_3 , VAR_2 java.lang.String , VAR_1 TYPE_2 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
private TYPE_1 . Result METHOD_1 ( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String changeId ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 , changeId ) ; return VAR_4 . to ( git , ref ) ; } } ; ) ref , git ( to . VAR_4 return ; ) changeId , VAR_3 , VAR_2 , VAR_1 , ) ( METHOD_2 . admin , db ( create . VAR_5 = VAR_4 TYPE_3 { TYPE_2 , java.io.IOException throws ) changeId java.lang.String , VAR_3 java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String , ref java.lang.String ( METHOD_1 Result . TYPE_1 private 
private java.lang.String METHOD_1 ( final TYPE_1 req ) throws TYPE_2 { java.lang.String VAR_1 = req . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( TYPE_3 ) ) ) ) { return null ; } else { return new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( TYPE_3 . length ( ) ) ) , TYPE_5 . METHOD_6 ( req ) ) ; } } } } ; ) ) req ( METHOD_6 . TYPE_5 , ) ) ) ( length . TYPE_3 ( METHOD_5 . VAR_1 ( METHOD_4 . TYPE_4 ( java.lang.String new return { else } ; null return { ) ) ) ) TYPE_3 ( METHOD_3 . VAR_1 ( ! ( || ) null == VAR_1 ( ( if ; ) VAR_2 ( METHOD_2 . req = VAR_1 java.lang.String { TYPE_2 throws ) req TYPE_1 final ( METHOD_1 java.lang.String private 
public void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 , com.google.gwtorm.server.OrmException { try { VAR_1 . METHOD_1 ( rsrc ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e . getMessage ( ) ) ; } try { VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e ( TYPE_2 new throw { ) e TYPE_3 ( catch } ; ) ) ( getProject . ) ( METHOD_2 . rsrc ( METHOD_1 . VAR_2 { try } ; ) ) ( getMessage . e ( TYPE_2 new throw { ) e TYPE_3 ( catch } ; ) rsrc ( METHOD_1 . VAR_1 { try { com.google.gwtorm.server.OrmException , TYPE_2 throws ) rsrc TYPE_1 ( METHOD_1 void public 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 . Result result = TYPE_2 . METHOD_2 ( repo , VAR_1 ) ; org.junit.Assert.assertEquals ( INT_1 , result . METHOD_3 ( ) . getStatus ( ) ) ; return result . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_4 . ) ( METHOD_3 . result return ; ) ) ( getStatus . ) ( METHOD_3 . result , INT_1 ( org.junit.Assert.assertEquals ; ) VAR_1 , repo ( METHOD_2 . TYPE_2 = result Result . TYPE_2 { TYPE_1 , java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_3 = query ( STRING_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ; } } ; ) changeId . ) 1 ( get . VAR_3 , ) ( getChangeId . VAR_1 ( org.junit.Assert.assertEquals ; ) changeId . ) 0 ( get . VAR_3 , ) ( getChangeId . VAR_2 ( org.junit.Assert.assertEquals ; ) ) ( size . VAR_3 , 2 ( org.junit.Assert.assertEquals ; ) STRING_1 ( query = VAR_3 > ChangeInfo . TYPE_2 < java.util.List ; ) ( METHOD_2 = VAR_2 Result . TYPE_1 ; ) ( METHOD_2 = VAR_1 Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private static java.lang.String METHOD_1 ( final java.lang.String token ) { if ( TYPE_1 . METHOD_2 ( STRING_1 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( token ) ) ; } if ( TYPE_1 . METHOD_2 ( STRING_3 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_4 , TYPE_1 . METHOD_4 ( token ) ) ; } if ( TYPE_1 . METHOD_2 ( STRING_5 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( token ) ) ; } return null ; } } ; null return } ; ) ) token ( METHOD_4 . TYPE_1 , STRING_6 ( METHOD_3 . TYPE_2 return { ) ) token , STRING_5 ( METHOD_2 . TYPE_1 ( if } ; ) ) token ( METHOD_4 . TYPE_1 , STRING_4 ( METHOD_3 . TYPE_2 return { ) ) token , STRING_3 ( METHOD_2 . TYPE_1 ( if } ; ) ) token ( METHOD_4 . TYPE_1 , STRING_2 ( METHOD_3 . TYPE_2 return { ) ) token , STRING_1 ( METHOD_2 . TYPE_1 ( if { ) token java.lang.String final ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) throws TYPE_2 { try ( TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ) { VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ; } } } } ; ) ) ) ) event , VAR_1 , projectName , STRING_2 ( java.lang.String.format ( + ) ) VAR_8 , VAR_7 , VAR_6 , VAR_5 , STRING_1 ( java.lang.String.format ( ( ( METHOD_4 . VAR_4 { ) ) ( METHOD_3 . VAR_2 = VAR_4 TYPE_4 ; ) ( METHOD_2 . VAR_3 = VAR_2 TYPE_3 ( try { TYPE_2 throws ) event java.lang.String , VAR_1 TYPE_1 , projectName java.lang.String ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( final TYPE_2 branch , org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , TYPE_3 , TYPE_4 { final TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_5 b = VAR_1 . METHOD_3 ( ) ; b . METHOD_4 ( new byte [ 0 ] , VAR_2 , rw . METHOD_5 ( ) , rw . METHOD_6 ( branch . METHOD_7 ( ) ) ) ; b . METHOD_8 ( ) ; return VAR_1 ; } } ; VAR_1 return ; ) ( METHOD_8 . b ; ) ) ) ( METHOD_7 . branch ( METHOD_6 . rw , ) ( METHOD_5 . rw , VAR_2 , ] 0 [ byte new ( METHOD_4 . b ; ) ( METHOD_3 . VAR_1 = b TYPE_5 final ; ) ( METHOD_2 . TYPE_1 = VAR_1 TYPE_1 final { TYPE_4 , TYPE_3 , java.io.IOException throws ) rw org.eclipse.jgit.revwalk.RevWalk , branch TYPE_2 final ( METHOD_1 TYPE_1 static private 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , java.io.IOException { if ( ( VAR_1 ) == null ) { throw new TYPE_5 ( STRING_1 ) ; } try { VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e . getMessage ( ) ) ; } return TYPE_1 . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . TYPE_1 return } ; ) ) ( getMessage . e ( TYPE_5 new throw { ) e java.io.IOException | TYPE_7 ( catch } ; ) ) ) ( METHOD_5 . VAR_1 ( METHOD_4 . TYPE_6 , ) ( METHOD_3 . rsrc , ) ( METHOD_2 . rsrc ( METHOD_1 . VAR_2 { try } ; ) STRING_1 ( TYPE_5 new throw { ) null == ) VAR_1 ( ( if { java.io.IOException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > ? < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( METHOD_4 ( STRING_2 ) ) ) + STRING_4 ) , res . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . res , ) STRING_4 + ) ) ) STRING_2 ( METHOD_4 ( + ) STRING_3 + ) ) STRING_2 ( id ( ( ( ( ( org.junit.Assert.assertEquals ; ) STRING_1 ( METHOD_3 = res TYPE_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 create ( ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 ) ) { VAR_1 = true ; final com.google.gerrit.reviewdb.server.ReviewDb c = METHOD_1 ( ) ; try { try { VAR_2 . create ( c ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; } } finally { c . close ( ) ; } } return this ; } } ; this return } } ; ) ( close . c { finally } } ; ) e , STRING_1 ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_2 ( catch } ; ) e , STRING_1 ( com.google.gwtorm.server.OrmException new throw { ) e java.io.IOException ( catch } ; ) c ( create . VAR_2 { try { try ; ) ( METHOD_1 = c com.google.gerrit.reviewdb.server.ReviewDb final ; true = VAR_1 { ) ) VAR_1 ( ! ( if { com.google.gwtorm.server.OrmException throws ) ( create TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ; VAR_1 . project = project . get ( ) ; TYPE_2 r = VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_2 ) ) ; } } ; ) ) STRING_2 ( contains . ) ( METHOD_5 . r ( METHOD_4 . org.junit.Assert ; ) ) ( METHOD_3 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) VAR_1 , STRING_1 ( METHOD_2 . VAR_2 = r TYPE_2 ; ) ( get . project = project . VAR_1 ; ) ( ChangeInfo . TYPE_1 new = VAR_1 ChangeInfo . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { return true ; } if ( ! ( VAR_2 . METHOD_1 ( ) ) ) { return false ; } com.google.gerrit.reviewdb.client.Project.NameKey r = VAR_2 . METHOD_2 ( ) ; if ( r . get ( ) . METHOD_3 ( VAR_3 ) ) { VAR_1 = r ; return true ; } else { VAR_2 = VAR_4 . Collections < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_4 ( ) . METHOD_5 ( ) ; return false ; } } } } ; false return ; ) ( METHOD_5 . ) ( METHOD_4 > com.google.gerrit.reviewdb.client.Project.NameKey < Collections . VAR_4 = VAR_2 { else } ; true return ; r = VAR_1 { ) ) VAR_3 ( METHOD_3 . ) ( get . r ( if ; ) ( METHOD_2 . VAR_2 = r com.google.gerrit.reviewdb.client.Project.NameKey } ; false return { ) ) ) ( METHOD_1 . VAR_2 ( ! ( if } ; true return { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 boolean public 
TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 , int VAR_2 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_1 . size ( ) ) > VAR_2 ) { return METHOD_2 ( repo , db , branch , VAR_1 ) ; } else { return METHOD_3 ( branch , VAR_1 ) ; } } } } ; ) VAR_1 , branch ( METHOD_3 return { else } ; ) VAR_1 , branch , db , repo ( METHOD_2 return { ) VAR_2 > ) ) ( size . VAR_1 ( ( if { java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_2 int , VAR_1 > java.lang.String < java.util.List , branch NameKey . TYPE_2 , db com.google.gerrit.reviewdb.server.ReviewDb , repo org.eclipse.jgit.lib.Repository ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_9 ( ) ; } } } } ; ) ( TYPE_9 new throw { else } ; ) 0 ( get . VAR_3 return { ) 1 == ) ) ( size . VAR_3 ( ( if ; ) in , VAR_1 ( apply . ) ( get . put = VAR_3 > TYPE_8 < java.util.List ; id = VAR_2 ; ) ( TYPE_7 new = in TYPE_7 { com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 throws ) input TYPE_3 , VAR_1 TYPE_2 ( apply TYPE_1 public 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ; try { TYPE_3 . METHOD_4 ( VAR_1 ) ; TYPE_3 . METHOD_5 ( VAR_2 ) ; final TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ; org.junit.Assert . METHOD_6 ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_5 ) ; } finally { TYPE_3 . delete ( VAR_2 ) ; TYPE_3 . delete ( VAR_1 ) ; } } } } ; ) VAR_1 ( delete . TYPE_3 ; ) VAR_2 ( delete . TYPE_3 { finally } ; ) VAR_5 , ) ( METHOD_7 . VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_4 ( METHOD_6 . org.junit.Assert ; ) VAR_1 ( TYPE_4 new = VAR_3 TYPE_4 final ; ) VAR_2 ( METHOD_5 . TYPE_3 ; ) VAR_1 ( METHOD_4 . TYPE_3 { try ; ) STRING_1 ( METHOD_3 . VAR_1 = VAR_2 TYPE_1 final ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_2 > VAR_1 = ( ( java.util.Map < java.lang.String , TYPE_2 > ) ( VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) ) ; for ( TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = VAR_3 . getValue ( ) ; VAR_4 . name = VAR_3 . getKey ( ) ; } return VAR_1 . values ( ) ; } } ; ) ( values . VAR_1 return } ; ) ( getKey . VAR_3 = name . VAR_4 ; ) ( getValue . VAR_3 = VAR_4 TYPE_2 { ) ) ( METHOD_2 . VAR_1 : VAR_3 > TYPE_2 , java.lang.String < TYPE_4 ( for ; ) ) ) ) ( TYPE_3 new ( apply . ) ( get . VAR_2 ( ) > TYPE_2 , java.lang.String < java.util.Map ( ( = VAR_1 > TYPE_2 , java.lang.String < java.util.Map { ) ( METHOD_1 > TYPE_2 < TYPE_1 private 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) . values ( ) ) { if ( ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) & & ( ( p . getValue ( ) ) ! = 0 ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) 0 = ! ) ) ( getValue . p ( ( & & ) ) VAR_2 ( equals . ) ( METHOD_2 . p ( ( if { ) ) ( values . ) ( approvals . VAR_1 : p PatchSetApproval . com.google.gerrit.reviewdb.client ( for ; ) ( currentPatchSetId . c = VAR_2 com.google.gerrit.reviewdb.client.PatchSet.Id } ; false return { ) null == c ( if ; ) ( change . VAR_1 = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.String s = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( ( s ! = null ) & & ( ! ( s . isEmpty ( ) ) ) ) { try { VAR_3 = TYPE_2 . METHOD_3 ( s ) ; } catch ( TYPE_3 err ) { VAR_3 = INT_1 ; } } METHOD_4 ( new TYPE_4 ( ) { public void run ( ) throws java.lang.Exception { METHOD_5 ( ) ; VAR_4 this . display ( ) ; } } ) ; } } ; ) } } ; ) ( display . this VAR_4 ; ) ( METHOD_5 { java.lang.Exception throws ) ( run void public { ) ( TYPE_4 new ( METHOD_4 } } ; INT_1 = VAR_3 { ) err TYPE_3 ( catch } ; ) s ( METHOD_3 . TYPE_2 = VAR_3 { try { ) ) ) ) ( isEmpty . s ( ! ( & & ) null = ! s ( ( if ; ) VAR_2 ( get . ) ( METHOD_2 . VAR_1 = s java.lang.String { ) VAR_1 TYPE_1 final ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) . append ( TYPE_2 . ps ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . commit ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_7 ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_8 ( ) ) . METHOD_6 ( ) . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . ) ( METHOD_6 . ) ) ( METHOD_8 . TYPE_2 ( append . ) ( METHOD_3 . ) ( METHOD_6 . ) ) ( METHOD_7 . TYPE_2 ( append . ) ( METHOD_3 . ) ( METHOD_6 . ) ) ( commit . TYPE_2 ( append . ) ( METHOD_3 . ) ( METHOD_6 . ) ) ( ps . TYPE_2 ( append . ) ) ( METHOD_5 . VAR_2 ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 { ) VAR_1 TYPE_1 ( METHOD_1 void private 
public TYPE_1 . Change update ( TYPE_1 . Change change ) { if ( change . getStatus ( ) . METHOD_1 ( ) ) { if ( ( VAR_1 ) ! = null ) { change . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? null : VAR_1 ) ) ; } change . METHOD_3 ( VAR_2 ) ; change . METHOD_4 ( result . info ) ; TYPE_2 . METHOD_5 ( change ) ; return change ; } else { return null ; } } } } ; null return { else } ; change return ; ) change ( METHOD_5 . TYPE_2 ; ) info . result ( METHOD_4 . change ; ) VAR_2 ( METHOD_3 . change } ; ) ) VAR_1 : null ? ) ( isEmpty . VAR_1 ( ( METHOD_2 . change { ) null = ! ) VAR_1 ( ( if { ) ) ( METHOD_1 . ) ( getStatus . change ( if { ) change Change . TYPE_1 ( update Change . TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 ( METHOD_6 . ) VAR_7 ( to . ) VAR_6 ( to . ) VAR_4 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 ( METHOD_3 ; ) VAR_3 , VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) & & ( config . METHOD_3 ( ) ) ) { TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 , VAR_6 ) ) ; VAR_7 . set ( VAR_8 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_9 ) ) ; } } } } ; ) ) VAR_9 , INT_1 ( METHOD_5 . ) VAR_4 , ) ( METHOD_4 . TYPE_3 , null ( create . VAR_8 ( set . VAR_7 ; ) ) VAR_6 , VAR_5 ( TYPE_2 new ( TYPE_1 new = VAR_4 TYPE_1 { ) ) ) ( METHOD_3 . config ( & & ) ) VAR_3 ( == ) ) ( METHOD_2 . VAR_2 ( ( ( if ; ) ( METHOD_1 . VAR_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 req , TYPE_2 rsp , TYPE_3 VAR_1 ) throws java.io.IOException , TYPE_4 { TYPE_5 s = ( user . get ( ) . METHOD_2 ( ) ) ? VAR_2 . get ( ) : null ; TYPE_6 . METHOD_3 ( ( ( TYPE_7 ) ( req ) ) , ( ( TYPE_8 . HttpServletResponse ) ( rsp ) ) , s ) ; VAR_1 . METHOD_1 ( req , rsp ) ; } } ; ) rsp , req ( METHOD_1 . VAR_1 ; ) s , ) ) rsp ( ) HttpServletResponse . TYPE_8 ( ( , ) ) req ( ) TYPE_7 ( ( ( METHOD_3 . TYPE_6 ; null : ) ( get . VAR_2 ? ) ) ( METHOD_2 . ) ( get . user ( = s TYPE_5 { TYPE_4 , java.io.IOException throws ) VAR_1 TYPE_3 , rsp TYPE_2 , req TYPE_1 ( METHOD_1 void public 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 , com.google.gwtorm.server.OrmException { final TYPE_3 VAR_1 = VAR_2 . create ( ) ; final com.google.gerrit.reviewdb.client.Account.Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_2 ( VAR_3 , null , VAR_4 , null , java.util.Collections.singleton ( me ) , null ) ; } } ; ) null , ) me ( java.util.Collections.singleton , null , VAR_4 , null , VAR_3 ( METHOD_2 . VAR_1 return ; ) ( getAccountId . user = me com.google.gerrit.reviewdb.client.Account.Id final ; ) ( create . VAR_2 = VAR_1 TYPE_3 final { com.google.gwtorm.server.OrmException , TYPE_2 , TYPE_1 throws ) ( METHOD_1 Id . AccountGroup public 
public TYPE_1 METHOD_1 ( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_4 . METHOD_3 ( ctl . getProject ( ) . METHOD_4 ( ) ) ) { TYPE_1 VAR_5 = METHOD_5 ( ctl , VAR_6 . create ( db . get ( ) , ctl ) , in , repo ) ; VAR_1 . METHOD_6 ( ) ; return VAR_5 ; } } } } ; VAR_5 return ; ) ( METHOD_6 . VAR_1 ; ) repo , in , ) ctl , ) ( get . db ( create . VAR_6 , ctl ( METHOD_5 = VAR_5 TYPE_1 { ) ) ) ( METHOD_4 . ) ( getProject . ctl ( METHOD_3 . VAR_4 = repo org.eclipse.jgit.lib.Repository ( try ; ) ) VAR_3 ( METHOD_2 ( create . VAR_2 = VAR_1 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 , TYPE_3 throws ) in com.google.gerrit.reviewdb.client.PatchSet , ctl TYPE_2 ( METHOD_1 TYPE_1 public 
public boolean METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 , ( ( short ) ( 1 ) ) ) ) { return true ; } if ( ( getRefName ( ) . equals ( TYPE_1 . METHOD_3 ( 0 , ( ( TYPE_1 . length ( ) ) - 1 ) ) ) ) & & ( METHOD_4 ( ) . METHOD_1 ( ) ) ) { return true ; } return false ; } } ; false return } ; true return { ) ) ) ( METHOD_1 . ) ( METHOD_4 ( & & ) ) ) ) 1 - ) ) ( length . TYPE_1 ( ( , 0 ( METHOD_3 . TYPE_1 ( equals . ) ( getRefName ( ( if } ; true return { ) ) ) ) 1 ( ) short ( ( , VAR_1 ( METHOD_2 ( if { ) ( METHOD_1 boolean public 
public TYPE_1 < ? > apply ( TYPE_2 project , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( ( input == null ) || ( ( VAR_1 ) == null ) ) || ( VAR_1 . isEmpty ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } VAR_2 . create ( project ) . refs ( VAR_1 ) . delete ( ) ; return TYPE_1 . METHOD_1 ( ) ; METHOD_2 ( 2 ) ; TYPE_6 VAR_3 ; } } ; VAR_3 TYPE_6 ; ) 2 ( METHOD_2 ; ) ( METHOD_1 . TYPE_1 return ; ) ( delete . ) VAR_1 ( refs . ) project ( create . VAR_2 } ; ) STRING_1 ( TYPE_5 new throw { ) ) ) ( isEmpty . VAR_1 ( || ) ) null == ) VAR_1 ( ( || ) null == input ( ( ( if { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_4 throws ) input TYPE_3 , project TYPE_2 ( apply > ? < TYPE_1 public 
private void plugins ( TYPE_1 w ) { java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_1 ( ) ; for ( TYPE_3 u : plugins ) { VAR_1 . add ( java.lang.String.format ( STRING_1 , u . METHOD_2 ( ) , u . METHOD_3 ( ) ) ) ; } if ( ! ( VAR_1 . isEmpty ( ) ) ) { w . METHOD_4 ( ( ( VAR_2 ) + STRING_2 ) ) ; METHOD_5 ( VAR_1 , w ) ; w . METHOD_4 ( STRING_3 ) ; } } } } ; ) STRING_3 ( METHOD_4 . w ; ) w , VAR_1 ( METHOD_5 ; ) ) STRING_2 + ) VAR_2 ( ( ( METHOD_4 . w { ) ) ) ( isEmpty . VAR_1 ( ! ( if } ; ) ) ) ( METHOD_3 . u , ) ( METHOD_2 . u , STRING_1 ( java.lang.String.format ( add . VAR_1 { ) plugins : u TYPE_3 ( for ; ) ( METHOD_1 . TYPE_2 = VAR_1 > java.lang.String < java.util.List { ) w TYPE_1 ( plugins void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( config . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_5 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_7 ( ) ) . METHOD_4 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( config . METHOD_8 ( ) ) . METHOD_4 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_4 . ) ) ( METHOD_8 . config ( METHOD_2 . TYPE_1 ; ) VAR_2 ( METHOD_4 . ) ) ( METHOD_7 . config ( METHOD_2 . TYPE_1 ; ) VAR_1 ( METHOD_4 . ) ) ( METHOD_6 . config ( METHOD_2 . TYPE_1 ; ) VAR_1 ( METHOD_4 . ) ) ( METHOD_5 . config ( METHOD_2 . TYPE_1 ; ) VAR_1 ( METHOD_4 . ) ) ( METHOD_3 . config ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , TYPE_2 ... VAR_2 ) { TYPE_3 < TYPE_2 > VAR_3 = new TYPE_3 < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ; VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ; return new TYPE_5 < TYPE_2 > ( VAR_3 ) ; } } ; ) VAR_3 ( > TYPE_2 < TYPE_5 new return ; ) ) VAR_2 ( METHOD_4 . TYPE_4 ( METHOD_3 . VAR_3 ; ) ) VAR_1 ( METHOD_2 ( > TYPE_2 < TYPE_3 new = VAR_3 > TYPE_2 < TYPE_3 { ) VAR_2 ... TYPE_2 , VAR_1 java.lang.String ( METHOD_1 > TYPE_2 < TYPE_1 private 
public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_2 ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event ) ) ; VAR_2 . put ( VAR_3 , VAR_4 ) ; } else if ( event instanceof TYPE_3 ) { TYPE_3 e = ( ( TYPE_3 ) ( event ) ) ; TYPE_4 r = VAR_5 ; VAR_6 . put ( ( ( ( r . project ) + STRING_1 ) + ( VAR_7 ) ) , VAR_8 ) ; } } } } ; ) VAR_8 , ) ) VAR_7 ( + ) STRING_1 + ) project . r ( ( ( ( put . VAR_6 ; VAR_5 = r TYPE_4 ; ) ) event ( ) TYPE_3 ( ( = e TYPE_3 { ) TYPE_3 instanceof event ( if else } ; ) VAR_4 , VAR_3 ( put . VAR_2 ; ) ) event ( ) TYPE_2 ( ( = VAR_1 TYPE_2 { ) TYPE_2 instanceof event ( if { ) event TYPE_1 ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.io.IOException { assertEquals ( 0 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) ; assertEquals ( INT_1 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 ) ) ) ) ; assertEquals ( INT_2 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( ( INT_3 | INT_4 ) , 1 ) ) ) ) ; } } ; ) ) ) ) 1 , ) INT_4 | INT_3 ( ( b . TYPE_2 ( r . TYPE_2 ( METHOD_2 . TYPE_1 , INT_2 ( assertEquals ; ) ) ) ) INT_1 ( b . TYPE_2 ( r . TYPE_2 ( METHOD_2 . TYPE_1 , INT_1 ( assertEquals ; ) ) ) ) 0 ( b . TYPE_2 ( r . TYPE_2 ( METHOD_2 . TYPE_1 , 0 ( assertEquals { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) . METHOD_4 ( ) , VAR_5 ) ; } } ; ) VAR_5 , ) ( METHOD_4 . ) STRING_1 ( METHOD_5 . VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_4 , ) ( METHOD_4 . VAR_1 ( org.junit.Assert.assertEquals ; ) VAR_3 ( METHOD_3 . org.junit.Assert ; ) VAR_1 ( TYPE_3 new = VAR_2 TYPE_3 final ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
private static java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > in ) { java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > out = new TYPE_2 ( new TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id > ( ) { public int METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id a , com.google.gerrit.reviewdb.client.PatchSet.Id b ) { return TYPE_4 . METHOD_3 ( a , b ) . result ( ) ; } } ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : in ) { out . put ( ps . getId ( ) , ps ) ; } return out ; } } ; out return } ; ) ps , ) ( getId . ps ( put . out { ) in : ps com.google.gerrit.reviewdb.client.PatchSet ( for ; ) } } ; ) ( result . ) b , a ( METHOD_3 . TYPE_4 return { ) b com.google.gerrit.reviewdb.client.PatchSet.Id , a com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_2 int public { ) ( > com.google.gerrit.reviewdb.client.PatchSet.Id < TYPE_3 new ( TYPE_2 new = out > com.google.gerrit.reviewdb.client.PatchSet , com.google.gerrit.reviewdb.client.PatchSet.Id < java.util.Map { ) in > com.google.gerrit.reviewdb.client.PatchSet < TYPE_1 ( METHOD_1 > com.google.gerrit.reviewdb.client.PatchSet , com.google.gerrit.reviewdb.client.PatchSet.Id < java.util.Map static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( project , VAR_1 , VAR_2 , STRING_1 ) ; org.eclipse.jgit.lib.ObjectId id = repo . branch ( STRING_2 ) . commit ( ) . create ( ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; org.eclipse.jgit.revwalk.RevWalk rw = repo . METHOD_4 ( ) ; org.junit.Assert . METHOD_5 ( VAR_3 . METHOD_6 ( db , rw , rw . parseCommit ( id ) ) ) ; } } ; ) ) ) id ( parseCommit . rw , rw , db ( METHOD_6 . VAR_3 ( METHOD_5 . org.junit.Assert ; ) ( METHOD_4 . repo = rw org.eclipse.jgit.revwalk.RevWalk ; ) ( METHOD_3 = VAR_3 TYPE_2 ; ) ( create . ) ( commit . ) STRING_2 ( branch . repo = id org.eclipse.jgit.lib.ObjectId ; ) STRING_1 , VAR_2 , VAR_1 , project ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ; } } } } ; ) ) change ( java.util.Collections.singleton ( update . ) ( changes . ) ( METHOD_5 . ctx ; ) change ( METHOD_4 . TYPE_3 ; ) ) ( getStatus . change ( METHOD_3 . update ; ) VAR_3 ( METHOD_3 . change { ) VAR_1 ( if ; ) VAR_2 ( == ) ) ( getStatus . change ( = VAR_1 ; ) ( METHOD_2 . ctx = update TYPE_2 ; ) ( getChange . ctx = change { com.google.gwtorm.server.OrmException throws ) ctx TYPE_1 ( METHOD_1 void private 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } } ; cd return ; ) ) currentPatchSetId , id ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( com.google.gerrit.reviewdb.client.PatchSet new = VAR_1 ; ) id , null , null , null , null , null , null , null , null , null , null , null ( com.google.gerrit.server.query.change.ChangeData new = cd com.google.gerrit.server.query.change.ChangeData { ) currentPatchSetId int , id Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 com.google.gerrit.server.query.change.ChangeData static public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , boolean VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_2 VAR_2 = new TYPE_2 ( id . get ( ) , VAR_1 ) ; if ( VAR_3 . add ( VAR_2 ) ) { VAR_4 . METHOD_3 ( VAR_2 ) ; } } } } } } ; ) VAR_2 ( METHOD_3 . VAR_4 { ) ) VAR_2 ( add . VAR_3 ( if ; ) VAR_1 , ) ( get . id ( TYPE_2 new = VAR_2 TYPE_2 { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) VAR_1 boolean , id Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 void private 
void METHOD_1 ( int VAR_1 ) { java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ; TYPE_1 . delete ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_3 ( TYPE_6 VAR_4 ) { } } ) ; } } ; ) } } { ) VAR_4 TYPE_6 ( METHOD_3 void public } ; ) ) ) ( getParentKey . VAR_3 ( METHOD_2 . TYPE_5 ( display . TYPE_4 { ) result TYPE_3 ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , path , ) ( get . ) ( getParentKey . VAR_3 ( delete . TYPE_1 ; ) ( path . ) VAR_1 ( get . VAR_2 = path java.lang.String { ) VAR_1 int ( METHOD_1 void 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_2 c : VAR_1 ) { if ( c . METHOD_2 ( ) ) { r . METHOD_3 ( c . METHOD_4 ( ) ) ; } else { r . add ( c ) ; } } return r ; } } ; r return } } ; ) c ( add . r { else } ; ) ) ( METHOD_4 . c ( METHOD_3 . r { ) ) ( METHOD_2 . c ( if { ) VAR_1 : c TYPE_2 final ( for ; ) ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.ArrayList final { ) ( METHOD_1 > TYPE_2 < TYPE_1 public 
private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data = new byte [ VAR_2 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) ] ; TYPE_3 in = VAR_1 . METHOD_4 ( VAR_2 ) ; try { TYPE_4 . METHOD_5 ( in , data , 0 , data . length ) ; } finally { in . close ( ) ; } return data ; } } ; data return } ; ) ( close . in { finally } ; ) length . data , 0 , data , in ( METHOD_5 . TYPE_4 { try ; ) VAR_2 ( METHOD_4 . VAR_1 = in TYPE_3 ; ] ) ( METHOD_3 . ) ( get . ) ( METHOD_2 . VAR_2 [ byte new = data ] [ byte { java.io.IOException throws ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 ] [ byte static private 
public TYPE_1 format ( TYPE_2 user , TYPE_1 out , TYPE_3 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_4 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; return format ( user , out , VAR_1 , cd , VAR_2 . METHOD_1 ( db . get ( ) , cd . notes ( ) , VAR_1 . user ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; } } ; ) ) null , null , ) VAR_3 ( com.google.gerrit.reviewdb.client.Account.Id new , psId , ) ( user . VAR_1 , ) ( notes . cd , ) ( get . db ( METHOD_1 . VAR_2 , cd , VAR_1 , out , user ( format return ; ) ( currentPatchSetId . ) ( change . cd = psId com.google.gerrit.reviewdb.client.PatchSet.Id { com.google.gwtorm.server.OrmException , TYPE_4 throws ) cd com.google.gerrit.server.query.change.ChangeData , VAR_1 TYPE_3 , out TYPE_1 , user TYPE_2 ( format TYPE_1 public 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_1 , VAR_4 ) ; } finally { VAR_1 . delete ( ) ; } } } } ; ) ( delete . VAR_1 { finally } ; ) VAR_4 , VAR_1 ( assertEquals ; ) VAR_3 ( METHOD_3 ; ) VAR_1 ( TYPE_3 new = VAR_2 TYPE_3 final ; ) ) ( METHOD_4 . VAR_1 ( METHOD_3 { try ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( server , admin ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; METHOD_2 ( VAR_2 . get ( ) ) ; VAR_1 . close ( ) ; TYPE_2 VAR_3 = VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_3 ( VAR_2 . get ( ) ) . get ( ) ; TYPE_3 . METHOD_4 ( VAR_6 . get ( VAR_2 ) . getProject ( ) , VAR_3 ) ; } } ; ) VAR_3 , ) ( getProject . ) VAR_2 ( get . VAR_6 ( METHOD_4 . TYPE_3 ; ) ( get . ) ) ( get . VAR_2 ( METHOD_3 . ) ) ( get . VAR_5 ( name . ) ( projects . VAR_4 = VAR_3 TYPE_2 ; ) ( close . VAR_1 ; ) ) ( get . VAR_2 ( METHOD_2 ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey ; ) admin , server ( TYPE_1 new = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t . METHOD_3 ( ) ) ) return false ; return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; } } ; ) ) ( value . ) ) t ( ) TYPE_4 ( ( ( == ) VAR_2 . this ( return ; false return ) ) ) ( METHOD_3 . t ( ! ( if ; ) VAR_1 , this ( METHOD_1 . ) ) t ( ) TYPE_3 ( ( return ) ) ( METHOD_2 . t ( if { ) VAR_1 TYPE_2 , t TYPE_1 ( METHOD_1 boolean public 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 class ) ; bind ( VAR_3 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ; TYPE_1 . METHOD_2 ( binder ( ) , VAR_6 class ) ; TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ; } } ; ) class VAR_7 ( to . ) class VAR_6 , ) ( binder ( bind . TYPE_1 ; ) class VAR_6 , ) ( binder ( METHOD_2 . TYPE_1 ; ) class VAR_5 ( to . ) class VAR_4 , ) ( binder ( bind . com.google.gerrit.extensions.registration.DynamicSet ; ) class VAR_3 ( bind ; ) class VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void protected 
TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , org.eclipse.jgit.lib.Repository repo , TYPE_8 VAR_6 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_7 , java.util.Set < TYPE_9 > VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 , TYPE_12 < TYPE_13 , com.google.gerrit.reviewdb.client.Account.Id > VAR_11 , TYPE_14 VAR_12 , boolean VAR_13 ) ; ; ) VAR_13 boolean , VAR_12 TYPE_14 , VAR_11 > com.google.gerrit.reviewdb.client.Account.Id , TYPE_13 < TYPE_12 , VAR_10 TYPE_11 , VAR_9 TYPE_10 , VAR_8 > TYPE_9 < java.util.Set , VAR_7 > org.eclipse.jgit.revwalk.RevCommit < java.util.Set , db com.google.gerrit.reviewdb.server.ReviewDb , VAR_6 TYPE_8 , repo org.eclipse.jgit.lib.Repository , VAR_5 TYPE_7 , VAR_4 TYPE_6 , rw TYPE_5 , VAR_3 TYPE_4 , VAR_2 NameKey . TYPE_3 , VAR_1 TYPE_2 ( create TYPE_1 
void METHOD_1 ( TYPE_1 e ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( 0 < = VAR_1 ) { java.lang.String n = VAR_2 . getValue ( VAR_1 ) ; VAR_2 . METHOD_3 ( false ) ; TYPE_2 . display ( TYPE_3 . METHOD_4 ( changeId , n ) , new TYPE_4 ( changeId , n ) ) ; } } } } ; ) ) n , changeId ( TYPE_4 new , ) n , changeId ( METHOD_4 . TYPE_3 ( display . TYPE_2 ; ) false ( METHOD_3 . VAR_2 ; ) VAR_1 ( getValue . VAR_2 = n java.lang.String { ) VAR_1 = < 0 ( if ; ) ( METHOD_2 . VAR_2 = VAR_1 int { ) e TYPE_1 ( METHOD_1 void 
public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( ) ) { if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) { VAR_1 = p ; return p ; } } } return VAR_1 ; } } ; VAR_1 return } } } ; p return ; p = VAR_1 { ) ) ) ( currentPatchSetId . c ( equals . ) ( getId . p ( if { ) ) ( METHOD_2 : p com.google.gerrit.reviewdb.client.PatchSet ( for } ; null return { ) null == c ( if ; ) ( change = c com.google.gerrit.reviewdb.client.Change { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 com.google.gerrit.reviewdb.client.PatchSet public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( VAR_2 . get ( ) ) ) + STRING_2 ) , METHOD_2 ( project . get ( ) ) ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . r ; ) ) ( METHOD_3 . r , VAR_3 ( org.junit.Assert.assertEquals ; ) ) ) ( get . project ( METHOD_2 , ) STRING_2 + ) ) ) ( get . VAR_2 ( + STRING_1 ( ( ( put . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; rpc ( VAR_5 class ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; rpc ( VAR_8 class ) ; rpc ( VAR_9 class ) ; install ( new TYPE_1 ( ) ) ; } } ; ) ) ( TYPE_1 new ( install ; ) class VAR_9 ( rpc ; ) class VAR_8 ( rpc ; ) class VAR_7 ( rpc ; ) class VAR_6 ( rpc ; ) class VAR_5 ( rpc ; ) class VAR_4 ( rpc ; ) class VAR_3 ( rpc ; ) class VAR_2 ( rpc ; ) class VAR_1 ( rpc { ) ( METHOD_1 void protected 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.lang.String cmd = STRING_1 + VAR_2 ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( ) ; try { TYPE_4 . METHOD_5 ( VAR_1 , cmd , VAR_3 ) ; } catch ( java.io.IOException e ) { VAR_4 . error ( java.lang.String.format ( ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , VAR_1 , e , cmd , VAR_3 ) , e ) ; } } } } ; ) e , ) VAR_3 , cmd , e , VAR_1 , ) ) STRING_5 + ) STRING_4 + STRING_3 ( ( + STRING_2 ( ( java.lang.String.format ( error . VAR_4 { ) e java.io.IOException ( catch } ; ) VAR_3 , cmd , VAR_1 ( METHOD_5 . TYPE_4 { try ; ) ( METHOD_4 . TYPE_4 = VAR_3 TYPE_3 ; VAR_2 + STRING_1 = cmd java.lang.String ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_2 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 void static private 
private boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) { return true ; } try { return VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } catch ( TYPE_3 e ) { VAR_3 . METHOD_4 ( STRING_1 , e ) ; return true ; } } } } ; true return ; ) e , STRING_1 ( METHOD_4 . VAR_3 { ) e TYPE_3 ( catch } ; ) ) ( METHOD_2 . VAR_1 ( METHOD_3 . VAR_2 return { try } ; true return { ) ) ) ( METHOD_2 . VAR_1 ( equals . TYPE_2 ( if { ) VAR_1 TYPE_1 final ( METHOD_1 boolean private 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { c . METHOD_1 ( VAR_1 ) ; c . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_3 . equals ( c . currentPatchSetId ( ) ) ) ) { try { c . METHOD_3 ( VAR_4 . get ( db , VAR_3 ) ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_4 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ; } } TYPE_2 . METHOD_5 ( c ) ; return c ; } } ; c return ; ) c ( METHOD_5 . TYPE_2 } } ; ) VAR_5 , ) VAR_3 + STRING_1 ( ( METHOD_4 { ) VAR_5 TYPE_1 ( catch } ; ) ) VAR_3 , db ( get . VAR_4 ( METHOD_3 . c { try { ) ) ) ) ( currentPatchSetId . c ( equals . VAR_3 ( ! ( if ; ) VAR_2 ( METHOD_2 . c ; ) VAR_1 ( METHOD_1 . c { ) c com.google.gerrit.reviewdb.client.Change ( update com.google.gerrit.reviewdb.client.Change public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } } } ; ) e , ) ( change.getId ( TYPE_3 new throw { ) e TYPE_4 ( catch } ; ) change ( METHOD_1 . ) user , VAR_1 ( METHOD_1 . VAR_2 return { try ; ) ( getProject . change = VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey final { TYPE_3 throws ) user TYPE_2 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 public 
private static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) { return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; } else { return VAR_2 ; } } } } ; VAR_2 return { else } ; ) ) ( length . TYPE_3 ( METHOD_7 . VAR_2 return { ) ) TYPE_3 ( METHOD_6 . VAR_2 ( if ; ) ) ) ( METHOD_5 . VAR_1 ( METHOD_4 . TYPE_2 , ) ( METHOD_3 . VAR_1 ( METHOD_2 . TYPE_1 = VAR_2 java.lang.String final { ) VAR_1 com.google.gerrit.reviewdb.client.Project ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 = VAR_2 . METHOD_5 ( 0 , ( ( VAR_2 . length ( ) ) - INT_1 ) ) ; VAR_3 = TYPE_2 . METHOD_6 ( VAR_2 , VAR_1 ) ; } } ; ) VAR_1 , VAR_2 ( METHOD_6 . TYPE_2 = VAR_3 ; ) ) INT_1 - ) ) ( length . VAR_2 ( ( , 0 ( METHOD_5 . VAR_2 = VAR_2 ; ) ( METHOD_4 . ) ( METHOD_3 . this = VAR_2 ; ) ( METHOD_2 . TYPE_1 = VAR_1 ; ) ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 . ProjectConfig config , TYPE_4 VAR_2 , boolean VAR_3 ) throws TYPE_5 , TYPE_6 , java.io.IOException , TYPE_7 { org.eclipse.jgit.revwalk.RevCommit commit = config . commit ( VAR_2 ) ; VAR_4 . METHOD_2 ( config . getProject ( ) . METHOD_3 ( ) , VAR_5 , base , commit . getId ( ) , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; VAR_6 . METHOD_7 ( config . getProject ( ) ) ; return VAR_7 . create ( projectName ) . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . ) projectName ( create . VAR_7 return ; ) ) ( getProject . config ( METHOD_7 . VAR_6 ; ) ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 . VAR_1 , ) ( getId . commit , base , VAR_5 , ) ( METHOD_3 . ) ( getProject . config ( METHOD_2 . VAR_4 ; ) VAR_2 ( commit . config = commit org.eclipse.jgit.revwalk.RevCommit { TYPE_7 , java.io.IOException , TYPE_6 , TYPE_5 throws ) VAR_3 boolean , VAR_2 TYPE_4 , config ProjectConfig . TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 protected 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = group ( STRING_1 ) ; VAR_2 = group ( STRING_2 ) ; VAR_3 = group ( STRING_3 ) ; METHOD_2 ( INT_1 ) ; TYPE_1 VAR_4 ; TYPE_2 to ; TYPE_3 revision ; VAR_5 = user ( STRING_4 , STRING_5 , VAR_1 ) ; VAR_6 = user ( STRING_6 , STRING_7 , VAR_2 ) ; VAR_7 = user ( STRING_8 , STRING_9 , VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 , STRING_9 , STRING_8 ( user = VAR_7 ; ) VAR_2 , STRING_7 , STRING_6 ( user = VAR_6 ; ) VAR_1 , STRING_5 , STRING_4 ( user = VAR_5 ; revision TYPE_3 ; to TYPE_2 ; VAR_4 TYPE_1 ; ) INT_1 ( METHOD_2 ; ) STRING_3 ( group = VAR_3 ; ) STRING_2 ( group = VAR_2 ; ) STRING_1 ( group = VAR_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 < TYPE_2 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) throws TYPE_3 { TYPE_1 < TYPE_2 > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ! ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) { VAR_2 = VAR_2 . METHOD_4 ( new TYPE_5 ( VAR_3 ) ) ; } else if ( ! ( TYPE_4 . METHOD_3 ( VAR_4 ) ) ) { VAR_2 = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_4 ) ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ) VAR_4 ( TYPE_6 new ( METHOD_4 . VAR_2 = VAR_2 { ) ) ) VAR_4 ( METHOD_3 . TYPE_4 ( ! ( if else } ; ) ) VAR_3 ( TYPE_5 new ( METHOD_4 . VAR_2 = VAR_2 { ) ) ) VAR_3 ( METHOD_3 . TYPE_4 ( ! ( if ; ) VAR_1 ( METHOD_2 . TYPE_1 = VAR_2 > TYPE_2 < TYPE_1 { TYPE_3 throws ) VAR_1 > TYPE_2 < java.util.List ( METHOD_1 > TYPE_2 < TYPE_1 private 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey n , java.lang.String VAR_1 ) { if ( TYPE_1 . equals ( VAR_1 ) ) { return STRING_1 + ( n . toString ( ) ) ; } return ( ( STRING_1 + ( n . toString ( ) ) ) + STRING_2 ) + VAR_1 ; } } ; VAR_1 + ) STRING_2 + ) ) ) ( toString . n ( + STRING_1 ( ( return } ; ) ) ( toString . n ( + STRING_1 return { ) ) VAR_1 ( equals . TYPE_1 ( if { ) VAR_1 java.lang.String , n com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 java.lang.String static public 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( values . size ( ) ) ; for ( TYPE_2 VAR_2 : values ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) ) ) ; } java.util.Collections . METHOD_3 ( VAR_1 ) ; java.util.Collections . METHOD_4 ( VAR_1 ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) VAR_1 ( METHOD_4 . java.util.Collections ; ) VAR_1 ( METHOD_3 . java.util.Collections } ; ) ) ) ( getValue . VAR_2 ( METHOD_2 . TYPE_1 ( add . VAR_1 { ) values : VAR_2 TYPE_2 ( for ; ) ) ( size . values ( > TYPE_1 < java.util.ArrayList new = VAR_1 { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 > TYPE_1 < java.util.List public 
private void METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > projects ) throws TYPE_2 { for ( com.google.gerrit.reviewdb.client.Project.NameKey project : projects ) { try { VAR_1 . METHOD_2 ( project , true ) ; } catch ( TYPE_3 VAR_2 ) { METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . project ( ) ) ) + STRING_2 ) + STRING_3 ) ) ; METHOD_4 ( VAR_2 . project ( ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( ( STRING_4 + project ) , e ) ; } } } } } } ; ) e , ) project + STRING_4 ( ( TYPE_2 new throw { ) e java.io.IOException ( catch } ; ) ) ( project . VAR_2 ( METHOD_4 ; ) ) STRING_3 + ) STRING_2 + ) ) ) ( project . VAR_2 ( + STRING_1 ( ( ( ( METHOD_3 { ) VAR_2 TYPE_3 ( catch } ; ) true , project ( METHOD_2 . VAR_1 { try { ) projects : project com.google.gerrit.reviewdb.client.Project.NameKey ( for { TYPE_2 throws ) projects > com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : default : this . revision = TYPE_4 . METHOD_2 ( revision ) ; return this ; } } } } ; this return ; ) revision ( METHOD_2 . TYPE_4 = revision . this : default : VAR_13 case : VAR_12 case : VAR_11 case : VAR_10 case : VAR_9 case : VAR_8 case : VAR_7 case : VAR_6 case : VAR_5 case ; ) ) type , STRING_1 ( java.lang.String.format ( TYPE_3 new throw : VAR_4 case : VAR_3 case : VAR_2 case : VAR_1 case { ) type ( switch { ) revision TYPE_2 ( METHOD_1 TYPE_1 public 
public int METHOD_1 ( TYPE_1 key , TYPE_2 value ) { int size = ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ; for ( java.lang.String p : value . METHOD_2 ( ) ) { size += p . length ( ) ; } size += ( value . METHOD_2 ( ) . size ( ) ) - 1 ; return size ; } } ; size return ; 1 - ) ) ( size . ) ( METHOD_2 . value ( += size } ; ) ( length . p += size { ) ) ( METHOD_2 . value : p java.lang.String ( for ; ) INT_4 * 2 ( + ) ) INT_3 * INT_2 ( + INT_1 ( = size int { ) value TYPE_2 , key TYPE_1 ( METHOD_1 int public 
void METHOD_1 ( final TYPE_1 . Account result ) { final TYPE_1 . Account me = TYPE_2 . METHOD_2 ( ) ; me . METHOD_3 ( result . METHOD_4 ( ) ) ; me . METHOD_5 ( result . METHOD_6 ( ) ) ; me . METHOD_7 ( result . METHOD_8 ( ) ) ; TYPE_2 . METHOD_9 ( ) ; if ( ( VAR_1 ) ! = null ) { VAR_1 . display ( me ) ; } } } } ; ) me ( display . VAR_1 { ) null = ! ) VAR_1 ( ( if ; ) ( METHOD_9 . TYPE_2 ; ) ) ( METHOD_8 . result ( METHOD_7 . me ; ) ) ( METHOD_6 . result ( METHOD_5 . me ; ) ) ( METHOD_4 . result ( METHOD_3 . me ; ) ( METHOD_2 . TYPE_2 = me Account . TYPE_1 final { ) result Account . TYPE_1 final ( METHOD_1 void 
private void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 . OrmException { if ( VAR_1 ! = null ) { for ( TYPE_3 < TYPE_1 > VAR_3 : TYPE_4 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( VAR_1 ) ) { final byte [ ] VAR_4 = METHOD_4 ( VAR_3 , VAR_1 ) ; if ( ! ( METHOD_5 ( VAR_3 , VAR_2 , VAR_4 ) ) ) { db . delete ( VAR_4 ) ; } } } } } } } } } } ; ) VAR_4 ( delete . db { ) ) ) VAR_4 , VAR_2 , VAR_3 ( METHOD_5 ( ! ( if ; ) VAR_1 , VAR_3 ( METHOD_4 = VAR_4 ] [ byte final { ) ) VAR_1 ( METHOD_3 . VAR_3 ( if { ) ) ( METHOD_2 . TYPE_4 : VAR_3 > TYPE_1 < TYPE_3 ( for { ) null = ! VAR_1 ( if { OrmException . TYPE_2 throws ) VAR_2 TYPE_1 , VAR_1 TYPE_1 final ( METHOD_1 void private 
Project . NameKey projectName ( org.eclipse.jgit.lib.Repository repo ) { TYPE_1 VAR_1 = repo . METHOD_1 ( ) . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( VAR_2 ) ) { java.lang.String p = VAR_2 . METHOD_4 ( VAR_1 ) . toString ( ) ; java.lang.String n = p . METHOD_5 ( 0 , ( ( p . length ( ) ) - ( STRING_1 . length ( ) ) ) ) ; return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; } else { VAR_3 . METHOD_6 ( ( STRING_2 + VAR_1 ) ) ; return null ; } } } } ; null return ; ) ) VAR_1 + STRING_2 ( ( METHOD_6 . VAR_3 { else } ; ) n ( com.google.gerrit.reviewdb.client.Project.NameKey new return ; ) ) ) ) ( length . STRING_1 ( - ) ) ( length . p ( ( , 0 ( METHOD_5 . p = n java.lang.String ; ) ( toString . ) VAR_1 ( METHOD_4 . VAR_2 = p java.lang.String { ) ) VAR_2 ( METHOD_3 . VAR_1 ( if ; ) ( METHOD_2 . ) ( METHOD_1 . repo = VAR_1 TYPE_1 { ) repo org.eclipse.jgit.lib.Repository ( projectName NameKey . Project 
public TYPE_1 METHOD_1 ( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return VAR_3 . get ( new TYPE_3 . Key ( project , repo , VAR_1 , VAR_2 , VAR_4 ) ) ; } catch ( TYPE_4 e ) { VAR_5 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ; return VAR_6 ; } } } } ; VAR_6 return ; ) e , ) ) ) ( getName . ) ( getProject . project ( + ) STRING_2 + ) ) ) ( name . VAR_2 ( + STRING_1 ( ( ( ( METHOD_2 . VAR_5 { ) e TYPE_4 ( catch } ; ) ) VAR_4 , VAR_2 , VAR_1 , repo , project ( Key . TYPE_3 new ( get . VAR_3 return { try { ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 org.eclipse.jgit.lib.ObjectId , repo org.eclipse.jgit.lib.Repository , project TYPE_2 ( METHOD_1 TYPE_1 public 
public void run ( ) { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { int VAR_2 = ( TYPE_1 . METHOD_2 ( ) ) - ( ( TYPE_2 . METHOD_3 ( ) ) + INT_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; } METHOD_5 ( diff ) ; VAR_5 . METHOD_5 ( VAR_6 , VAR_1 . METHOD_6 ( ) ) ; VAR_7 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , diff ) ; } } ; ) diff , ) ( METHOD_7 . VAR_1 ( METHOD_5 . VAR_7 ; ) ) ( METHOD_6 . VAR_1 , VAR_6 ( METHOD_5 . VAR_5 ; ) diff ( METHOD_5 } ; ) VAR_2 ( METHOD_4 . VAR_4 ; ) VAR_2 ( METHOD_4 . VAR_3 ; ) INT_1 + ) ) ( METHOD_3 . TYPE_2 ( ( - ) ) ( METHOD_2 . TYPE_1 ( = VAR_2 int { ) ) ) ( METHOD_1 . VAR_1 ( ! ( if { ) ( run void public 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_2 . METHOD_2 ( VAR_3 . get ( 0 ) ) ; METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; VAR_1 = VAR_2 . METHOD_5 ( ) ; VAR_4 = VAR_2 . METHOD_6 ( ) ; METHOD_3 ( ) . METHOD_7 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_8 ( ) . METHOD_9 ( ( ( VAR_1 ) * ( VAR_3 . size ( ) ) ) , VAR_5 ) ; } } } } ; ) VAR_5 , ) ) ) ( size . VAR_3 ( * ) VAR_1 ( ( ( METHOD_9 . ) ( METHOD_8 . ) ( METHOD_3 ; ) VAR_2 ( METHOD_7 . ) ( METHOD_3 ; ) ( METHOD_6 . VAR_2 = VAR_4 ; ) ( METHOD_5 . VAR_2 = VAR_1 ; ) VAR_2 ( METHOD_4 . ) ( METHOD_3 ; ) ) 0 ( get . VAR_3 ( METHOD_2 . VAR_2 { ) 0 == ) VAR_1 ( ( if { ) ( METHOD_1 void private 
public void METHOD_1 ( final int row ) { for ( final TYPE_1 s : VAR_1 ) { if ( row < ( VAR_2 ) ) { ( VAR_2 ) -- ; } if ( row < ( VAR_3 ) ) { ( VAR_3 ) -- ; } } super . METHOD_1 ( row ) ; } } ; ) row ( METHOD_1 . super } } ; -- ) VAR_3 ( { ) ) VAR_3 ( < row ( if } ; -- ) VAR_2 ( { ) ) VAR_2 ( < row ( if { ) VAR_1 : s TYPE_1 final ( for { ) row int final ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_1 { try { for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_2 ( VAR_1 ) ) { METHOD_3 ( cd . change ( ) ) ; } } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { METHOD_4 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( METHOD_4 { ) e com.google.gwtorm.server.OrmException | java.io.IOException ( catch } } ; ) ) ( change . cd ( METHOD_3 { ) ) VAR_1 ( METHOD_2 . VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for { try { TYPE_1 throws ) VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_4 ) ; try { if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_5 ) { throw new TYPE_2 ( STRING_2 ) ; } } } } ; ) STRING_2 ( TYPE_2 new throw { ) VAR_5 java.io.IOException ( catch } } ; ) STRING_1 ( TYPE_2 new throw { else } ; VAR_3 return { ) ) ( METHOD_3 . VAR_3 ( if { try ; ) VAR_4 , VAR_1 ( TYPE_1 new = VAR_3 TYPE_1 ; ) ) ( get . VAR_2 ( METHOD_2 . TYPE_4 = VAR_1 TYPE_3 { TYPE_2 throws ) ( METHOD_1 TYPE_1 private 
public TYPE_1 format ( TYPE_1 out , TYPE_2 ctl , TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ; return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , ctl , psId , VAR_3 ) ) ; } } ; ) ) VAR_3 , psId , ctl , ) ( get . db ( METHOD_1 . VAR_2 , ctl , out ( format return ; ) ( currentPatchSetId . ) ( getChange . ctl = psId com.google.gerrit.reviewdb.client.PatchSet.Id { com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_3 , ctl TYPE_2 , out TYPE_1 ( format TYPE_1 public 
void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 . get ( ) ) ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . add ( VAR_1 ) ; } METHOD_4 ( ) ; } } ; ) ( METHOD_4 } ; ) VAR_1 ( add . VAR_3 ; ) ( METHOD_3 . VAR_3 ; ) ) ) ( get . VAR_2 ( METHOD_2 . TYPE_2 ( TYPE_1 new = VAR_1 { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 void 
public int METHOD_1 ( ) { int VAR_1 = 0 ; if ( ( VAR_2 ) ! = null ) { for ( TYPE_1 r : VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , r ) ) ; } VAR_1 = VAR_2 . METHOD_4 ( ) . size ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 = null ; } return VAR_1 ; } } ; VAR_1 return } ; null = VAR_2 ; ) ( METHOD_5 . VAR_2 ; ) ( size . ) ( METHOD_4 . VAR_2 = VAR_1 } ; ) ) r , STRING_1 ( java.lang.String.format ( METHOD_3 . VAR_3 { ) ) ( METHOD_2 . VAR_2 : r TYPE_1 ( for { ) null = ! ) VAR_2 ( ( if ; 0 = VAR_1 int { ) ( METHOD_1 int public 
public < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_1 out , java.lang.String path , byte [ ] data ) throws java.io.IOException { TYPE_3 < TYPE_1 > VAR_1 = ( ( TYPE_3 < TYPE_1 > ) ( format ) ) ; VAR_1 . METHOD_1 ( out , path , VAR_2 , new TYPE_4 ( VAR_3 , data ) ) ; } } ; ) ) data , VAR_3 ( TYPE_4 new , VAR_2 , path , out ( METHOD_1 . VAR_1 ; ) ) format ( ) > TYPE_1 < TYPE_3 ( ( = VAR_1 > TYPE_1 < TYPE_3 { java.io.IOException throws ) data ] [ byte , path java.lang.String , out TYPE_1 ( METHOD_1 void > TYPE_2 extends TYPE_1 < public 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { if ( err ! = null ) { TYPE_5 . METHOD_2 ( req , err ) ; } TYPE_6 . METHOD_3 ( req , res , null , c ) ; res . METHOD_4 ( VAR_1 ) ; TYPE_6 . METHOD_5 ( req , res , msg ) ; } } ; ) msg , res , req ( METHOD_5 . TYPE_6 ; ) VAR_1 ( METHOD_4 . res ; ) c , null , res , req ( METHOD_3 . TYPE_6 } ; ) err , req ( METHOD_2 . TYPE_5 { ) null = ! err ( if { java.io.IOException throws ) err TYPE_4 , c TYPE_3 , msg java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void static public 
private boolean METHOD_1 ( ) { if ( VAR_1 . get ( ) . METHOD_2 ( ) ) { return ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_4 ) ) ) & & ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( VAR_5 ) ) ; } else { return false ; } } } } ; false return { else } ; ) ) VAR_5 ( METHOD_3 . ) VAR_1 ( user . VAR_2 ( & & ) ) ) VAR_4 , VAR_3 ( TYPE_1 new ( METHOD_3 . ) VAR_1 ( user . VAR_2 ( return { ) ) ( METHOD_2 . ) ( get . VAR_1 ( if { ) ( METHOD_1 boolean private 
public boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 { final TYPE_4 ctx = VAR_2 . METHOD_2 ( ) ; try { TYPE_5 schema = VAR_2 . METHOD_3 ( ctx ) ; VAR_2 . METHOD_4 ( schema , ctx , VAR_1 , false ) ; return true ; } catch ( TYPE_6 e ) { return false ; } finally { try { ctx . close ( ) ; } catch ( TYPE_2 e ) { VAR_3 . METHOD_5 ( STRING_1 , e ) ; } } } } } } ; ) e , STRING_1 ( METHOD_5 . VAR_3 { ) e TYPE_2 ( catch } ; ) ( close . ctx { try { finally } ; false return { ) e TYPE_6 ( catch } ; true return ; ) false , VAR_1 , ctx , schema ( METHOD_4 . VAR_2 ; ) ctx ( METHOD_3 . VAR_2 = schema TYPE_5 { try ; ) ( METHOD_2 . VAR_2 = ctx TYPE_4 final { TYPE_3 , TYPE_2 , TYPE_1 throws ) VAR_1 java.lang.String ( METHOD_1 boolean public 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base ! = null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } } ; ) VAR_9 , ) 0 ( get . VAR_8 , ) 0 ( get . VAR_7 , VAR_6 , m ( METHOD_2 . VAR_1 ; ) VAR_5 , VAR_4 , VAR_3 , ) ) ( METHOD_1 . VAR_2 , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new , ) null : ) ) ( METHOD_1 . base , changeId ( com.google.gerrit.reviewdb.client.PatchSet.Id new ? null = ! base ( ( set . VAR_1 { ) m > TYPE_2 < TYPE_1 ( onSuccess void public 
private void METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = new TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_3 ) ; n . add ( VAR_1 ) ; VAR_3 = java.util.Collections . METHOD_3 ( n ) ; } finally { VAR_2 . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . VAR_2 { finally } ; ) n ( METHOD_3 . java.util.Collections = VAR_3 ; ) VAR_1 ( add . n ; ) VAR_3 ( > com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_2 new = n > com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 { try ; ) ( METHOD_2 . VAR_2 { ) VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey final ( METHOD_1 void private 
static TYPE_1 METHOD_1 ( final TYPE_2 ctx ) throws TYPE_3 { final TYPE_4 VAR_1 = new TYPE_4 ( ) ; final TYPE_5 < TYPE_6 > res ; final TYPE_7 VAR_2 = ctx . METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_3 = VAR_2 . get ( STRING_2 ) ; if ( ( VAR_3 ! = null ) & & ( VAR_3 . contains ( STRING_3 ) ) ) { return new TYPE_9 ( VAR_2 ) ; } return VAR_4 ; } } ; VAR_4 return } ; ) VAR_2 ( TYPE_9 new return { ) ) ) STRING_3 ( contains . VAR_3 ( & & ) null = ! VAR_3 ( ( if ; ) STRING_2 ( get . VAR_2 = VAR_3 TYPE_8 ; ) STRING_1 ( METHOD_2 . ctx = VAR_2 TYPE_7 final ; res > TYPE_6 < TYPE_5 final ; ) ( TYPE_4 new = VAR_1 TYPE_4 final { TYPE_3 throws ) ctx TYPE_2 final ( METHOD_1 TYPE_1 static 
public void run ( ) { try { final TYPE_1 cm ; cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( me ) ; cm . METHOD_2 ( ps , info ) ; cm . METHOD_3 ( reviewers ) ; cm . METHOD_4 ( VAR_2 ) ; cm . METHOD_5 ( ) ; } catch ( TYPE_2 e ) { VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } } } ; ) e , ) ) ) ( change.getId ( + STRING_1 ( ( error . VAR_3 { ) e TYPE_2 ( catch } ; ) ( METHOD_5 . cm ; ) VAR_2 ( METHOD_4 . cm ; ) reviewers ( METHOD_3 . cm ; ) info , ps ( METHOD_2 . cm ; ) me ( METHOD_1 . cm ; ) change ( create . VAR_1 = cm ; cm TYPE_1 final { try { ) ( run void public 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) ( name . VAR_1 , STRING_1 ( METHOD_6 . ) ( METHOD_5 . view ; ) VAR_1 ( METHOD_4 . VAR_3 ; ) ) ) ( METHOD_3 . VAR_2 ( getValue . VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_2 { ) e TYPE_1 ( METHOD_1 void 
public TYPE_1 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_4 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) cd , ) ( METHOD_2 . ) ( change . cd ( put . VAR_1 { ) VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( create . TYPE_4 = VAR_1 > com.google.gerrit.server.query.change.ChangeData , NameKey . TYPE_2 < TYPE_3 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData , NameKey . TYPE_2 < TYPE_1 public 
private void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ; for ( final TYPE_1 VAR_5 : VAR_4 ) { final boolean VAR_6 = VAR_4 . METHOD_4 ( ) . equals ( VAR_5 ) ; METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ; } } } } ; ) VAR_6 , ) 1 + VAR_2 ( , VAR_5 ( METHOD_1 ; ) VAR_5 ( equals . ) ( METHOD_4 . VAR_4 = VAR_6 boolean final { ) VAR_4 : VAR_5 TYPE_1 final ( for ; ) ( METHOD_3 . VAR_1 = VAR_4 > TYPE_1 extends ? < TYPE_2 final ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_2 { ) VAR_3 boolean final , VAR_2 int final , VAR_1 TYPE_1 final ( METHOD_1 void private 
public static TYPE_1 METHOD_1 ( TYPE_2 cfg ) { return TYPE_1 . create ( cfg . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_3 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_4 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_5 , VAR_1 ) ) ; } } ; ) ) VAR_1 , STRING_5 , null , STRING_1 ( METHOD_2 . cfg , ) 0 , STRING_4 , null , STRING_1 ( METHOD_2 . cfg , ) 0 , STRING_3 , null , STRING_1 ( METHOD_2 . cfg , ) 0 , STRING_2 , null , STRING_1 ( METHOD_2 . cfg ( create . TYPE_1 return { ) cfg TYPE_2 ( METHOD_1 TYPE_1 static public 
public static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( INT_1 ) ; for ( final com.google.gerrit.reviewdb.client.Change . Status e : TYPE_3 . values ( ) ) { if ( e . METHOD_2 ( ) ) { r . add ( new TYPE_4 ( e ) ) ; } } return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; } } ; ) r ( METHOD_3 : ) 0 ( get . r ? 1 == ) ) ( size . r ( return } } ; ) ) e ( TYPE_4 new ( add . r { ) ) ( METHOD_2 . e ( if { ) ) ( values . TYPE_3 : e Status . com.google.gerrit.reviewdb.client.Change final ( for ; ) INT_1 ( > < java.util.ArrayList new = r > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List { ) VAR_1 > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_2 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 static public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( db , c ) ) . values ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ; } } ; ) ) ) VAR_1 ( METHOD_5 . TYPE_1 ( METHOD_4 . TYPE_3 ( METHOD_3 . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ( values . ) ) c , db ( create . VAR_4 , db ( METHOD_2 . VAR_3 = VAR_2 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_2 { com.google.gwtorm.server.OrmException throws ) VAR_1 ... TYPE_1 , c com.google.gerrit.reviewdb.client.Change ( METHOD_1 void private 
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { final TYPE_2 r = VAR_1 . METHOD_2 ( ) ; assert r instanceof TYPE_3 : STRING_1 + r ; final TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ; if ( VAR_2 == null ) { return null ; } else { return TYPE_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_3 ( METHOD_4 . TYPE_4 return { else } ; null return { ) null == VAR_2 ( if ; ) ) ) r ( ) TYPE_3 ( ( ( METHOD_3 . TYPE_3 = VAR_2 TYPE_2 final ; r + STRING_1 : TYPE_3 instanceof r assert ; ) ( METHOD_2 . VAR_1 = r TYPE_2 final { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 TYPE_1 protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; TYPE_2 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_4 ( git , false ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( 0 ) ) . isEqualTo ( change . METHOD_7 ( ) . METHOD_6 ( 0 ) ) ; } } ; ) ) 0 ( METHOD_6 . ) ( METHOD_7 . change ( isEqualTo . ) ) 0 ( METHOD_6 . ) ( METHOD_5 ( com.google.common.truth.Truth.assertThat ; ) false , git ( METHOD_4 ; ) ) ( getChangeId . change ( submit ; ) git ( METHOD_3 = change Result . TYPE_2 ; ) ( METHOD_2 = git TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { return METHOD_1 ( repo , changeId ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } } } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e java.io.IOException ( catch } ; ) changeId , repo ( METHOD_1 return { ) ) VAR_2 ( METHOD_2 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try { com.google.gwtorm.server.OrmException throws ) changeId Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map private 
private static TYPE_1 METHOD_1 ( boolean VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_2 ) { return VAR_1 ? TYPE_2 . METHOD_2 ( id . getParentKey ( ) , VAR_2 ) : TYPE_3 . revision ( id ) . view ( STRING_1 ) . id ( VAR_2 ) . view ( STRING_2 ) ; } } ; ) STRING_2 ( view . ) VAR_2 ( id . ) STRING_1 ( view . ) id ( revision . TYPE_3 : ) VAR_2 , ) ( getParentKey . id ( METHOD_2 . TYPE_2 ? VAR_1 return { ) VAR_2 java.lang.String , id com.google.gerrit.reviewdb.client.PatchSet.Id , VAR_1 boolean ( METHOD_1 TYPE_1 static private 
public java.util.List < com.google.gerrit.reviewdb.client.Change > submit ( TYPE_1 rsrc , TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { java.lang.String topic = rsrc . getChange ( ) . METHOD_1 ( ) ; if ( ( VAR_3 ) & & ( ! ( TYPE_4 . METHOD_2 ( topic ) ) ) ) { return METHOD_3 ( rsrc , VAR_1 , VAR_2 , topic ) ; } else { return TYPE_5 . METHOD_4 ( METHOD_5 ( rsrc , VAR_1 , VAR_2 ) ) ; } } } } ; ) ) VAR_2 , VAR_1 , rsrc ( METHOD_5 ( METHOD_4 . TYPE_5 return { else } ; ) topic , VAR_2 , VAR_1 , rsrc ( METHOD_3 return { ) ) ) ) topic ( METHOD_2 . TYPE_4 ( ! ( & & ) VAR_3 ( ( if ; ) ( METHOD_1 . ) ( getChange . rsrc = topic java.lang.String { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 throws ) VAR_2 boolean , VAR_1 TYPE_2 , rsrc TYPE_1 ( submit > com.google.gerrit.reviewdb.client.Change < java.util.List public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; } } ; ) user , ) cd ( TYPE_1 new , db ( METHOD_5 return } ; ) user , ) cd ( TYPE_1 new , db ( METHOD_4 return { ) ) cfg ( METHOD_3 . TYPE_5 ( if ; ) user ( METHOD_2 . cd ; ) ) ( change.getId , ) ( getProject . change , db ( create . VAR_1 = cd com.google.gerrit.server.query.change.ChangeData { TYPE_4 , TYPE_3 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) user TYPE_2 , change com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ; int i = 0 ; for ( final TYPE_1 VAR_5 : VAR_4 ) { final boolean VAR_6 = ( ++ i ) == ( VAR_4 . size ( ) ) ; METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ; } } } } ; ) VAR_6 , ) 1 + VAR_2 ( , VAR_5 ( METHOD_1 ; ) ) ( size . VAR_4 ( == ) i ++ ( = VAR_6 boolean final { ) VAR_4 : VAR_5 TYPE_1 final ( for ; 0 = i int ; ) ( METHOD_3 . VAR_1 = VAR_4 > TYPE_1 extends ? < TYPE_2 final ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_2 { ) VAR_3 boolean final , VAR_2 int final , VAR_1 TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = db . METHOD_2 ( ) ; final TYPE_2 VAR_2 = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( VAR_5 , VAR_6 ) ; assertEquals ( VAR_7 , VAR_8 ) ; assertEquals ( VAR_9 , VAR_10 ) ; assertEquals ( VAR_11 , VAR_12 ) ; } } ; ) VAR_12 , VAR_11 ( assertEquals ; ) VAR_10 , VAR_9 ( assertEquals ; ) VAR_8 , VAR_7 ( assertEquals ; ) VAR_6 , VAR_5 ( assertEquals ; ) VAR_4 , VAR_3 ( assertEquals ; ) VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 . db = VAR_2 TYPE_2 final ; ) ( METHOD_2 . db = VAR_1 TYPE_2 final ; ) ( create . db { OrmException . TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_3 = TYPE_2 . METHOD_4 ( cfg . METHOD_5 ( ) . get ( STRING_1 ) ) ; VAR_3 . METHOD_6 ( false ) ; VAR_3 . METHOD_7 ( false ) ; VAR_3 . METHOD_8 ( false ) ; VAR_3 . METHOD_9 ( false ) ; VAR_3 . METHOD_10 ( false ) ; VAR_3 . METHOD_11 ( ( ( short ) ( - 1 ) ) ) ; METHOD_12 ( cfg ) ; } } ; ) cfg ( METHOD_12 ; ) ) ) 1 - ( ) short ( ( ( METHOD_11 . VAR_3 ; ) false ( METHOD_10 . VAR_3 ; ) false ( METHOD_9 . VAR_3 ; ) false ( METHOD_8 . VAR_3 ; ) false ( METHOD_7 . VAR_3 ; ) false ( METHOD_6 . VAR_3 ; ) ) STRING_1 ( get . ) ( METHOD_5 . cfg ( METHOD_4 . TYPE_2 = VAR_3 ; ) ( METHOD_3 . ) VAR_2 ( METHOD_2 . VAR_1 = cfg ProjectConfig . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String error , boolean VAR_1 , java.lang.Exception e ) { if ( VAR_1 ) { this . VAR_1 . update ( 1 ) ; } if ( e ! = null ) { VAR_2 . METHOD_2 ( error , e ) ; } else { VAR_2 . METHOD_2 ( error ) ; } if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_3 ( error ) ; } } } } ; ) error ( METHOD_3 . VAR_3 { ) null = ! ) VAR_3 ( ( if } ; ) error ( METHOD_2 . VAR_2 { else } ; ) e , error ( METHOD_2 . VAR_2 { ) null = ! e ( if } ; ) 1 ( update . VAR_1 . this { ) VAR_1 ( if { ) e java.lang.Exception , VAR_1 boolean , error java.lang.String ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_9 ( METHOD_7 . ) VAR_8 ( METHOD_6 . ) VAR_7 ( to . ) VAR_6 , VAR_5 ( METHOD_6 . ) VAR_3 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( false ) ; TYPE_4 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; org.junit.Assert.assertEquals ( change . METHOD_4 ( ) , METHOD_5 ( ) . getId ( ) ) ; } } ; ) ) ( getId . ) ( METHOD_5 , ) ( METHOD_4 . change ( org.junit.Assert.assertEquals ; ) ) ( getChangeId . change ( submit ; ) git ( METHOD_3 = change Result . TYPE_4 ; ) false ( METHOD_2 = git TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException , TYPE_3 , TYPE_4 { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ! = null ) { TYPE_5 b = VAR_2 . METHOD_3 ( ) ; b . METHOD_4 ( new byte [ 0 ] , VAR_3 , VAR_4 , VAR_1 ) ; b . METHOD_5 ( ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ( METHOD_5 . b ; ) VAR_1 , VAR_4 , VAR_3 , ] 0 [ byte new ( METHOD_4 . b ; ) ( METHOD_3 . VAR_2 = b TYPE_5 { ) null = ! VAR_1 ( if ; ) ( METHOD_2 . TYPE_1 = VAR_2 TYPE_1 { TYPE_4 , TYPE_3 , java.io.IOException throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 ) { for ( TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_2 ( ) ) { if ( ( cmd . METHOD_3 ( ) ) == ( VAR_2 ) ) { METHOD_1 ( project , cmd . getRefName ( ) , cmd . METHOD_4 ( ) , cmd . METHOD_5 ( ) ) ; } } } } } } ; ) ) ( METHOD_5 . cmd , ) ( METHOD_4 . cmd , ) ( getRefName . cmd , project ( METHOD_1 { ) ) VAR_2 ( == ) ) ( METHOD_3 . cmd ( ( if { ) ) ( METHOD_2 . VAR_1 : cmd ReceiveCommand . TYPE_2 ( for { ) VAR_1 TYPE_1 , project com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void public 
private boolean METHOD_1 ( TYPE_1 . Change change , TYPE_2 user , TYPE_1 . ReviewDb db ) throws TYPE_3 . OrmException { final TYPE_4 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } final TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; } } ; ) db ( METHOD_3 . ) change ( METHOD_2 . VAR_3 return ; ) user ( METHOD_2 . VAR_1 = VAR_3 TYPE_5 final } ; false return { ) null == VAR_1 ( if ; ) ) ( getProject . change ( get . VAR_2 = VAR_1 TYPE_4 final { OrmException . TYPE_3 throws ) db ReviewDb . TYPE_1 , user TYPE_2 , change Change . TYPE_1 ( METHOD_1 boolean private 
private void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { com.google.common.truth.Truth.assertThat ( repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) . isEqualTo ( VAR_1 ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) VAR_1 ( isEqualTo . ) ) ( getName . ) ( METHOD_4 . ) VAR_3 ( METHOD_3 . repo ( com.google.common.truth.Truth.assertThat { try ; ) ) projectName ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_2 . VAR_2 = repo org.eclipse.jgit.lib.Repository { TYPE_1 , java.io.IOException throws ) VAR_1 java.lang.String , projectName java.lang.String ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) ! = null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) ! = null ) { VAR_1 = VAR_2 . METHOD_3 ( change , user ) ; } else { VAR_1 = VAR_2 . METHOD_3 ( project , VAR_3 , user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_4 ( catch } } ; ) user , VAR_3 , project ( METHOD_3 . VAR_2 = VAR_1 { else } ; ) user , change ( METHOD_3 . VAR_2 = VAR_1 { ) null = ! ) change ( ( if { try } ; ) ) ) ) ( METHOD_2 . VAR_1 ( + STRING_1 ( ( TYPE_3 new throw { ) null = ! ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) user TYPE_2 ( METHOD_1 TYPE_1 public 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_3 = TYPE_5 . get ( VAR_1 ) ; TYPE_6 VAR_4 = ( ( TYPE_6 ) ( VAR_5 ) ) ; try { return new TYPE_1 ( VAR_6 , VAR_3 , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e ( TYPE_7 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_2 , VAR_3 , VAR_6 ( TYPE_1 new return { try ; ) ) VAR_5 ( ) TYPE_6 ( ( = VAR_4 TYPE_6 ; ) VAR_1 ( get . TYPE_5 = VAR_3 org.eclipse.jgit.lib.Repository ; ) VAR_1 ( get . TYPE_4 = VAR_2 TYPE_3 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 protected 
private void METHOD_1 ( boolean VAR_1 ) { java.lang.String b = ( ( base ) ! = null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ; java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ; TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 ) ) ; } } ; ) ) VAR_1 , VAR_2 , b , changeId ( TYPE_3 new , ) VAR_2 , changeId ( METHOD_3 . TYPE_2 ( display . TYPE_1 ; ) ) ( get . revision ( METHOD_2 . java.lang.String = VAR_2 java.lang.String ; null : ) ) ( get . base ( METHOD_2 . java.lang.String ? ) null = ! ) base ( ( = b java.lang.String { ) VAR_1 boolean ( METHOD_1 void private 
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { return java.util.Collections . METHOD_2 ( ) ; } VAR_1 = new TYPE_1 < > ( ) ; for ( TYPE_2 VAR_2 : VAR_3 . METHOD_3 ( db , notes ) ) { VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) ) ( METHOD_4 . VAR_2 ( add . VAR_1 { ) ) notes , db ( METHOD_3 . VAR_3 : VAR_2 TYPE_2 ( for ; ) ( > < TYPE_1 new = VAR_1 } ; ) ( METHOD_2 . java.util.Collections return { ) null == c ( if ; ) ( change = c com.google.gerrit.reviewdb.client.Change { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; TYPE_2 < TYPE_3 > edit = VAR_3 . METHOD_4 ( change ) ; try { VAR_4 . METHOD_5 ( edit . get ( ) . getChange ( ) . getProject ( ) , edit . get ( ) . getRevision ( ) . get ( ) , VAR_5 ) ; org.junit.Assert . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { } } } } { ) VAR_6 TYPE_4 ( catch } ; ) STRING_1 ( METHOD_6 . org.junit.Assert ; ) VAR_5 , ) ( get . ) ( getRevision . ) ( get . edit , ) ( getProject . ) ( getChange . ) ( get . edit ( METHOD_5 . VAR_4 { try ; ) change ( METHOD_4 . VAR_3 = edit > TYPE_3 < TYPE_2 ; ) ) ( METHOD_3 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_2 ( delete . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) ) { VAR_2 = new TYPE_1 ( args , getChangeId ( ) , VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; } } } } ; ) ( METHOD_3 . VAR_2 ; ) VAR_1 , ) ( getChangeId , args ( TYPE_1 new = VAR_2 { ) ) ) ) ) ( METHOD_2 . VAR_2 ( equals . VAR_1 ( ! ( || ) null == ) VAR_2 ( ( ( if { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 void private 
private java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; try { final TYPE_1 VAR_3 = METHOD_3 ( STRING_1 ) ; assertEquals ( 0 , METHOD_4 ( VAR_4 , VAR_3 , VAR_2 . METHOD_5 ( ) ) ) ; return METHOD_6 ( VAR_2 ) ; } finally { VAR_2 . delete ( ) ; } } } } ; ) ( delete . VAR_2 { finally } ; ) VAR_2 ( METHOD_6 return ; ) ) ) ( METHOD_5 . VAR_2 , VAR_3 , VAR_4 ( METHOD_4 , 0 ( assertEquals ; ) STRING_1 ( METHOD_3 = VAR_3 TYPE_1 final { try ; ) VAR_1 ( METHOD_2 = VAR_2 TYPE_1 final { java.lang.Exception throws ) VAR_1 java.lang.String final ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ; } } ; ) ) 1 , VAR_3 ( METHOD_8 . TYPE_1 ( METHOD_7 . ) ) ( METHOD_6 . ) ( METHOD_5 ( com.google.common.truth.Truth.assertThat ; ) user ( METHOD_4 ; ) VAR_2 , VAR_1 , STRING_2 ( METHOD_3 ; ) STRING_1 , VAR_2 , VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; METHOD_2 ( STRING_3 ) ; METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; } } ; ) ) TYPE_1 instanceof ) ) ( create ( ( ( METHOD_3 ; ) STRING_3 ( METHOD_2 ; ) ) TYPE_1 instanceof ) ) ( create ( ( ( METHOD_3 ; ) STRING_2 ( METHOD_2 ; ) ) TYPE_1 instanceof ) ) ( create ( ( ( METHOD_3 ; ) STRING_1 ( METHOD_2 { ) ( METHOD_1 void public 
TYPE_1 METHOD_1 ( final TYPE_2 . Key key , final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2 = VAR_1 . getAccountId ( ) ; final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_3 . Key VAR_4 = VAR_1 . METHOD_3 ( ) ; final java.lang.String VAR_5 = VAR_1 . METHOD_4 ( ) ; return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } } ; ) VAR_5 , VAR_4 , VAR_3 , VAR_2 , key ( METHOD_1 return ; ) ( METHOD_4 . VAR_1 = VAR_5 java.lang.String final ; ) ( METHOD_3 . VAR_1 = VAR_4 Key . TYPE_3 final ; ) ( METHOD_2 . VAR_1 = VAR_3 boolean final ; ) ( getAccountId . VAR_1 = VAR_2 com.google.gerrit.reviewdb.client.Account.Id final { ) VAR_1 TYPE_1 final , key Key . TYPE_2 final ( METHOD_1 TYPE_1 
public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( change . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_2 ( VAR_2 , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2 . METHOD_3 ( e ) ; } } } } ; ) e ( METHOD_3 . TYPE_2 throw { ) e java.io.IOException ( catch } ; ) patchSet , VAR_2 ( METHOD_2 . VAR_3 return { ) ) repo ( org.eclipse.jgit.revwalk.RevWalk new = VAR_2 org.eclipse.jgit.revwalk.RevWalk ; ) ) ( getProject . change ( METHOD_1 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try { ) ( get TYPE_1 public 
public TYPE_1 diff ( java.lang.String base ) throws TYPE_2 { try { return VAR_1 . get ( ) . METHOD_1 ( base ) . apply ( file ) . value ( ) ; } catch ( java.io.IOException | TYPE_3 | com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e com.google.gwtorm.server.OrmException | TYPE_3 | java.io.IOException ( catch } ; ) ( value . ) file ( apply . ) base ( METHOD_1 . ) ( get . VAR_1 return { try { TYPE_2 throws ) base java.lang.String ( diff TYPE_1 public 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 { com.google.gerrit.reviewdb.client . AccountGroup group = VAR_1 . METHOD_1 ( ) ; if ( group == null ) { throw new TYPE_3 ( ) ; } try { TYPE_4 c = VAR_2 . METHOD_2 ( group . METHOD_3 ( ) ) ; return VAR_3 . METHOD_4 ( VAR_4 ) . format ( c . METHOD_5 ( ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( ) ; } } } } ; ) ( TYPE_3 new throw { ) e TYPE_5 ( catch } ; ) ) ( METHOD_5 . c ( format . ) VAR_4 ( METHOD_4 . VAR_3 return ; ) ) ( METHOD_3 . group ( METHOD_2 . VAR_2 = c TYPE_4 { try } ; ) ( TYPE_3 new throw { ) null == group ( if ; ) ( METHOD_1 . VAR_1 = group AccountGroup . com.google.gerrit.reviewdb.client { TYPE_3 throws ) VAR_1 TYPE_2 ( apply TYPE_1 public 
public void run ( ) { ui . METHOD_1 ( STRING_1 ) ; METHOD_2 ( ) ; if ( ( auth . METHOD_3 ( STRING_2 ) ) == null ) { auth . METHOD_4 ( STRING_2 , TYPE_1 . METHOD_5 ( ) ) ; } if ( ( auth . METHOD_3 ( STRING_3 ) ) == null ) { auth . METHOD_4 ( STRING_3 , TYPE_1 . METHOD_5 ( ) ) ; } METHOD_6 ( ) ; } } ; ) ( METHOD_6 } ; ) ) ( METHOD_5 . TYPE_1 , STRING_3 ( METHOD_4 . auth { ) null == ) ) STRING_3 ( METHOD_3 . auth ( ( if } ; ) ) ( METHOD_5 . TYPE_1 , STRING_2 ( METHOD_4 . auth { ) null == ) ) STRING_2 ( METHOD_3 . auth ( ( if ; ) ( METHOD_2 ; ) STRING_1 ( METHOD_1 . ui { ) ( run void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_1 , STRING_2 , VAR_3 ) ; TYPE_2 d = util . user ( VAR_1 , STRING_3 , VAR_3 ) ; METHOD_3 ( STRING_4 , u . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ; METHOD_6 ( STRING_6 , d . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . ) STRING_5 ( METHOD_4 . d , STRING_6 ( METHOD_6 ; ) ) ( METHOD_5 . ) STRING_5 ( METHOD_4 . u , STRING_4 ( METHOD_3 ; ) VAR_3 , STRING_3 , VAR_1 ( user . util = d TYPE_2 ; ) VAR_3 , STRING_2 , VAR_1 ( user . util = u TYPE_2 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; if ( ( view ) ! = null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ; } } } } ; ) ) ( METHOD_7 . ) ( name . VAR_1 , STRING_1 ( METHOD_6 . ) ( METHOD_5 . view { ) null = ! ) view ( ( if ; ) VAR_1 ( METHOD_4 . VAR_3 ; ) ) ) ( METHOD_3 . VAR_2 ( getValue . VAR_2 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_2 { ) e TYPE_1 ( METHOD_1 void 
private void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , TYPE_2 rsrc ) { TYPE_3 VAR_2 = rsrc . METHOD_2 ( ) . METHOD_3 ( ) ; for ( java.lang.String name : TYPE_4 . METHOD_4 ( ) ) { if ( ( METHOD_5 ( name ) ) & & ( VAR_2 . METHOD_6 ( name ) ) ) { VAR_1 . put ( name , new TYPE_5 ( VAR_2 . METHOD_7 ( name ) ) ) ; } } } } } } ; ) ) ) name ( METHOD_7 . VAR_2 ( TYPE_5 new , name ( put . VAR_1 { ) ) ) name ( METHOD_6 . VAR_2 ( & & ) ) name ( METHOD_5 ( ( if { ) ) ( METHOD_4 . TYPE_4 : name java.lang.String ( for ; ) ( METHOD_3 . ) ( METHOD_2 . rsrc = VAR_2 TYPE_3 { ) rsrc TYPE_2 , VAR_1 > TYPE_1 , java.lang.String < java.util.Map ( METHOD_1 void private 
private static synchronized void METHOD_1 ( byte [ ] VAR_1 , TYPE_1 . ReviewDb db ) throws TYPE_2 . OrmException { if ( ( VAR_2 ) == 0 ) { VAR_3 = db . METHOD_2 ( ) ; VAR_2 = VAR_4 ; } TYPE_3 . METHOD_3 ( VAR_1 , 0 , VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , ( ( VAR_2 ) -- ) ) ; } } ; ) ) -- ) VAR_2 ( ( , INT_1 , VAR_1 ( METHOD_3 . TYPE_3 ; ) VAR_3 , 0 , VAR_1 ( METHOD_3 . TYPE_3 } ; VAR_4 = VAR_2 ; ) ( METHOD_2 . db = VAR_3 { ) 0 == ) VAR_2 ( ( if { OrmException . TYPE_2 throws ) db ReviewDb . TYPE_1 , VAR_1 ] [ byte ( METHOD_1 void synchronized static private 
public TYPE_1 get ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey project = change . getProject ( ) ; org.eclipse.jgit.lib.ObjectId a = null ; if ( ( patchSet . getRevision ( ) ) == null ) { throw new TYPE_2 ( ( STRING_1 + ( patchSet . getId ( ) ) ) ) ; } org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId . METHOD_1 ( patchSet . getRevision ( ) . get ( ) ) ; TYPE_3 VAR_1 = VAR_2 ; return get ( new TYPE_4 ( a , b , VAR_1 ) , project ) ; } } ; ) project , ) VAR_1 , b , a ( TYPE_4 new ( get return ; VAR_2 = VAR_1 TYPE_3 ; ) ) ( get . ) ( getRevision . patchSet ( METHOD_1 . org.eclipse.jgit.lib.ObjectId = b org.eclipse.jgit.lib.ObjectId } ; ) ) ) ) ( getId . patchSet ( + STRING_1 ( ( TYPE_2 new throw { ) null == ) ) ( getRevision . patchSet ( ( if ; null = a org.eclipse.jgit.lib.ObjectId ; ) ( getProject . change = project com.google.gerrit.reviewdb.client.Project.NameKey { TYPE_2 throws ) patchSet com.google.gerrit.reviewdb.client.PatchSet , change com.google.gerrit.reviewdb.client.Change ( get TYPE_1 public 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 < java.lang.String , TYPE_1 > ( ) ; if ( ( VAR_2 ) ! = null ) { for ( final TYPE_1 t : VAR_2 ) { VAR_1 . put ( t . getId ( ) , t ) ; } } } return VAR_1 ; } } ; VAR_1 return } } } ; ) t , ) ( getId . t ( put . VAR_1 { ) VAR_2 : t TYPE_1 final ( for { ) null = ! ) VAR_2 ( ( if ; ) ( > TYPE_1 , java.lang.String < TYPE_2 new = VAR_1 { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ; TYPE_2 . Result change = METHOD_4 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_5 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_6 ( 0 ) ) . isEqualTo ( VAR_1 ) ; METHOD_7 ( change . getChangeId ( ) , 1 ) ; } } ; ) 1 , ) ( getChangeId . change ( METHOD_7 ; ) VAR_1 ( isEqualTo . ) ) 0 ( METHOD_6 . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ) ( METHOD_5 . change ( isEqualTo . ) ) ( getId . VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_3 = VAR_2 org.eclipse.jgit.revwalk.RevCommit ; ) ) ( getChangeId . change ( submit ; ) git ( METHOD_4 = change Result . TYPE_2 ; ) ( METHOD_3 = VAR_1 org.eclipse.jgit.revwalk.RevCommit ; ) ( METHOD_2 = git TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public Account . Id METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { try { com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ; return VAR_2 ! = null ? VAR_2 . getAccountId ( ) : null ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } } } ; ) e , ) VAR_1 + STRING_1 ( ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } } ; ) ( close . db { finally } ; null : ) ( getAccountId . VAR_2 ? null = ! VAR_2 return ; ) ) VAR_1 ( Key . TYPE_2 new ( get . ) ( METHOD_3 . db = VAR_2 TYPE_2 { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb { try { TYPE_1 throws ) VAR_1 java.lang.String ( METHOD_1 Id . Account public 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = VAR_1 . get ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ; METHOD_4 ( changes ) ; db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ; db . METHOD_6 ( ) . delete ( db . METHOD_6 ( ) . METHOD_7 ( project . METHOD_3 ( ) ) ) ; } } ; ) ) ) ( METHOD_3 . project ( METHOD_7 . ) ( METHOD_6 . db ( delete . ) ( METHOD_6 . db ; ) ) ) ( METHOD_3 . project ( METHOD_2 . ) ( METHOD_5 . db ( delete . ) ( METHOD_5 . db ; ) changes ( METHOD_4 ; ) ) ( METHOD_3 . project ( METHOD_2 . ) ( get . VAR_1 = changes > com.google.gerrit.server.query.change.ChangeData < java.util.List { com.google.gwtorm.server.OrmException throws ) project com.google.gerrit.reviewdb.client.Project ( METHOD_1 void public 
private java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Account account ) { if ( account ! = null ) { java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ; if ( ( account . METHOD_3 ( ) ) ! = null ) { result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } } ; VAR_1 return } ; result return } ; STRING_2 + ) ) ) ( METHOD_3 . account ( + STRING_1 ( += result { ) null = ! ) ) ( METHOD_3 . account ( ( if ; ) ( METHOD_2 . account : VAR_1 ? ) null == ) ) ( METHOD_2 . account ( ( = result java.lang.String { ) null = ! account ( if { ) account com.google.gerrit.reviewdb.client.Account final ( METHOD_1 java.lang.String private 
public TYPE_1 create ( TYPE_1 . Id id , java.lang.String VAR_1 ) throws TYPE_2 { try { final TYPE_1 key = new TYPE_1 ( id , TYPE_3 . METHOD_1 ( VAR_1 ) ) ; TYPE_3 . METHOD_2 ( key ) ; return key ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_5 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_6 e ) { VAR_2 . error ( STRING_1 , e ) ; throw new TYPE_2 ( ) ; } } } } ; ) ( TYPE_2 new throw ; ) e , STRING_1 ( error . VAR_2 { ) e TYPE_6 ( catch } ; ) ( TYPE_2 new throw { ) e TYPE_5 ( catch } ; ) ( TYPE_2 new throw { ) e TYPE_4 ( catch } ; key return ; ) key ( METHOD_2 . TYPE_3 ; ) ) VAR_1 ( METHOD_1 . TYPE_3 , id ( TYPE_1 new = key TYPE_1 final { try { TYPE_2 throws ) VAR_1 java.lang.String , id Id . TYPE_1 ( create TYPE_1 public 
protected void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( METHOD_2 ( change , VAR_1 . METHOD_3 ( ) , db ) ) { VAR_1 . METHOD_4 ( event ) ; } } METHOD_5 ( event ) ; } } ; ) event ( METHOD_5 } } ; ) event ( METHOD_4 . VAR_1 { ) ) db , ) ( METHOD_3 . VAR_1 , change ( METHOD_2 ( if { ) VAR_2 : VAR_1 TYPE_2 ( for { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb , event TYPE_1 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 void protected 
public java.lang.String METHOD_1 ( ) { TYPE_1 user = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( user . METHOD_6 ( ) . contains ( getChange ( ) . getId ( ) ) ) ; METHOD_7 ( VAR_2 , user ) ; return VAR_2 . METHOD_8 ( ) . toString ( ) ; } } ; ) ( toString . ) ( METHOD_8 . VAR_2 return ; ) user , VAR_2 ( METHOD_7 ; ) ) ) ( getId . ) ( getChange ( contains . ) ( METHOD_6 . user ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . TYPE_3 = VAR_2 TYPE_2 ; ) ( METHOD_2 . VAR_1 = user TYPE_1 { ) ( METHOD_1 java.lang.String public 
public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 , int n , boolean e ) { TYPE_1 api = TYPE_2 . change ( id ) . view ( STRING_1 ) . METHOD_2 ( STRING_2 , n ) . METHOD_2 ( STRING_3 , e ) ; if ( VAR_1 ! = null ) { api . METHOD_2 ( STRING_4 , VAR_1 ) ; } return api ; } } ; api return } ; ) VAR_1 , STRING_4 ( METHOD_2 . api { ) null = ! VAR_1 ( if ; ) e , STRING_3 ( METHOD_2 . ) n , STRING_2 ( METHOD_2 . ) STRING_1 ( view . ) id ( change . TYPE_2 = api TYPE_1 { ) e boolean , n int , VAR_1 java.lang.String , id int ( METHOD_1 TYPE_1 static public 
public void METHOD_1 ( final TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) { try { final TYPE_3 . ReviewDb db = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ; try { VAR_1 . onSuccess ( db . METHOD_1 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; } finally { db . close ( ) ; } } catch ( TYPE_5 . OrmException e ) { VAR_1 . METHOD_6 ( e ) ; } } } } ; ) e ( METHOD_6 . VAR_1 { ) e OrmException . TYPE_5 ( catch } } ; ) ( close . db { finally } ; ) ) ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_1 . db ( onSuccess . VAR_1 { try ; ) ( METHOD_3 . ) ( METHOD_2 . TYPE_4 = db ReviewDb . TYPE_3 final { try { ) VAR_1 > > TYPE_2 < java.util.List < TYPE_1 final ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( change , METHOD_3 ( changeId ) ) ) . isEqualTo ( VAR_2 ) ; TYPE_1 < TYPE_2 > edit = VAR_3 . METHOD_4 ( change ) ; METHOD_5 ( FLOAT_1 ) ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; METHOD_6 ( VAR_6 ) ; VAR_7 . METHOD_7 ( VAR_8 class ) ; VAR_7 . METHOD_8 ( STRING_1 ) ; VAR_1 . METHOD_9 ( edit . get ( ) , edit . get ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ; } } ; ) ) ( METHOD_11 . ) ( METHOD_10 . ) ( get . edit , ) ( get . edit ( METHOD_9 . VAR_1 ; ) STRING_1 ( METHOD_8 . VAR_7 ; ) class VAR_8 ( METHOD_7 . VAR_7 ; ) VAR_6 ( METHOD_6 ; VAR_5 TYPE_4 ; VAR_4 TYPE_3 ; ) FLOAT_1 ( METHOD_5 ; ) change ( METHOD_4 . VAR_3 = edit > TYPE_2 < TYPE_1 ; ) VAR_2 ( isEqualTo . ) ) ) changeId ( METHOD_3 , change ( METHOD_2 . VAR_1 ( com.google.common.truth.Truth.assertThat { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( ) throws TYPE_1 . OrmException , java.io.IOException { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ; VAR_4 . run ( new TYPE_2 ( ) { public void METHOD_4 ( java.lang.String msg ) { VAR_2 . METHOD_2 ( msg ) ; VAR_2 . METHOD_5 ( ) ; } } ) ; } } } } ; ) } } ; ) ( METHOD_5 . VAR_2 ; ) msg ( METHOD_2 . VAR_2 { ) msg java.lang.String ( METHOD_4 void public { ) ( TYPE_2 new ( run . VAR_4 ; ) ) ) ) ( METHOD_3 . VAR_3 ( + STRING_1 ( ( METHOD_2 . VAR_2 { ) VAR_1 ( if { java.io.IOException , OrmException . TYPE_1 throws ) ( METHOD_1 void 
public TYPE_1 . ChangeInfo format ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , rsrc . METHOD_1 ( ) ) ; return format ( cd , TYPE_3 . of ( rsrc . METHOD_2 ( ) . getId ( ) ) ) ; } } ; ) ) ) ( getId . ) ( METHOD_2 . rsrc ( of . TYPE_3 , cd ( format return ; ) ) ( METHOD_1 . rsrc , ) ( get . db ( create . VAR_1 = cd com.google.gerrit.server.query.change.ChangeData { com.google.gwtorm.server.OrmException throws ) rsrc TYPE_2 ( format ChangeInfo . TYPE_1 public 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) { TYPE_1 a = new TYPE_1 ( ) ; a . METHOD_2 ( VAR_1 ) ; a . METHOD_3 ( TYPE_2 . METHOD_4 ( name ) ) ; TYPE_3 VAR_2 = a . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_6 . VAR_3 ; ) ( METHOD_5 . a = VAR_2 TYPE_3 ; ) ) name ( METHOD_4 . TYPE_2 ( METHOD_3 . a ; ) VAR_1 ( METHOD_2 . a ; ) ( TYPE_1 new = a TYPE_1 { ) name java.lang.String , VAR_1 java.lang.String ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; } } ; ) group , ) ( get . user , VAR_2 ( TYPE_1 new return } ; ) VAR_1 ( TYPE_3 new throw { ) null == group ( if ; ) VAR_1 ( get . VAR_2 = group AccountGroup . com.google.gerrit.reviewdb.client final { TYPE_3 throws ) VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( java.lang.StringBuilder out , int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_3 instanceof TYPE_3 ) { TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_3 ) ) ; out . append ( STRING_1 ) . append ( VAR_5 ) . append ( STRING_2 ) . append ( VAR_6 ) . append ( STRING_3 ) ; } if ( ( VAR_7 ) ! = null ) { METHOD_2 ( out , VAR_1 , VAR_2 , VAR_3 ) ; } else { METHOD_3 ( out , VAR_1 , VAR_2 , VAR_3 ) ; } } } } ; ) VAR_3 , VAR_2 , VAR_1 , out ( METHOD_3 { else } ; ) VAR_3 , VAR_2 , VAR_1 , out ( METHOD_2 { ) null = ! ) VAR_7 ( ( if } ; ) STRING_3 ( append . ) VAR_6 ( append . ) STRING_2 ( append . ) VAR_5 ( append . ) STRING_1 ( append . out ; ) ) VAR_3 ( ) TYPE_3 ( ( = VAR_4 TYPE_3 { ) TYPE_3 instanceof VAR_3 ( if { ) VAR_3 TYPE_2 , VAR_2 TYPE_1 , VAR_1 int , out java.lang.StringBuilder ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( TYPE_2 rsrc , com.google.gerrit.reviewdb.client.Change . Id id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ; if ( c == null ) { return null ; } return rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( c ) ; } } ; ) c ( METHOD_1 . ) ( METHOD_3 . ) ( METHOD_2 . rsrc return } ; null return { ) null == c ( if ; ) id ( get . ) ( changes . ) ( get . VAR_1 = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) id Id . com.google.gerrit.reviewdb.client.Change , rsrc TYPE_2 ( METHOD_1 TYPE_1 private 
public TYPE_1 . ChangeInfo apply ( TYPE_2 req , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { TYPE_6 VAR_1 = req . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( VAR_2 . get ( ) ) ) ) { throw new TYPE_7 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change = METHOD_3 ( VAR_1 , input . message , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; return VAR_3 . create ( VAR_4 ) . format ( change ) ; } } ; ) change ( format . ) VAR_4 ( create . VAR_3 return ; ) ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 . VAR_1 , message . input , VAR_1 ( METHOD_3 = change com.google.gerrit.reviewdb.client.Change } ; ) STRING_1 ( TYPE_7 new throw { ) ) ) ) ( get . VAR_2 ( METHOD_2 . VAR_1 ( ! ( if ; ) ( METHOD_1 . req = VAR_1 TYPE_6 { com.google.gwtorm.server.OrmException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , req TYPE_2 ( apply ChangeInfo . TYPE_1 public 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = null ; TYPE_3 . NameKey VAR_2 = new TYPE_3 . NameKey ( STRING_1 ) ; TYPE_4 VAR_3 = null ; TYPE_5 . Project project = new TYPE_5 . Project ( ) ; project . METHOD_2 ( VAR_4 . get ( ) ) ; TYPE_1 ps = new TYPE_1 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , project , VAR_6 ) ; ps . METHOD_3 ( VAR_7 ) ; return ps ; } } ; ps return ; ) VAR_7 ( METHOD_3 . ps ; ) VAR_6 , project , VAR_3 , VAR_2 , VAR_1 , VAR_5 ( TYPE_1 new = ps TYPE_1 ; ) ) ( get . VAR_4 ( METHOD_2 . project ; ) ( Project . TYPE_5 new = project Project . TYPE_5 ; null = VAR_3 TYPE_4 ; ) STRING_1 ( NameKey . TYPE_3 new = VAR_2 NameKey . TYPE_3 ; null = VAR_1 TYPE_2 { ) ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( CHAR_1 ) ) ; METHOD_2 ( b , b . append ( CHAR_2 ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) CHAR_2 ( append . b , b ( METHOD_2 ; ) ) CHAR_1 ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 key = TYPE_2 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_1 = new TYPE_3 ( ) . create ( ) . METHOD_3 ( key ) ; TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( VAR_3 ) , VAR_1 ) ) . METHOD_7 ( new TYPE_5 ( VAR_4 , VAR_5 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_6 . METHOD_8 ( VAR_3 , key ) ) . METHOD_9 ( ) ; } } ; ) ( METHOD_9 . ) ) key , VAR_3 ( METHOD_8 . VAR_6 ( com.google.common.truth.Truth.assertThat ; ) ) VAR_5 , VAR_4 ( TYPE_5 new ( METHOD_7 . ) ) VAR_1 , ) VAR_3 ( METHOD_6 ( METHOD_5 . VAR_2 ( METHOD_4 . TYPE_4 ; ) key ( METHOD_3 . ) ( create . ) ( TYPE_3 new = VAR_1 java.lang.String ; ) STRING_1 ( METHOD_2 . TYPE_2 = key TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_1 ) ; assertEquals ( STRING_1 , VAR_1 . getName ( ) ) ; assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( STRING_3 , VAR_1 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; METHOD_9 ( VAR_1 , 2 , 1 , 0 , ( - 1 ) , ( - 2 ) ) ; } } ; ) ) 2 - ( , ) 1 - ( , 0 , 1 , 2 , VAR_1 ( METHOD_9 ; ) ) ( METHOD_8 . VAR_1 ( METHOD_7 ; ) ) ( METHOD_6 . VAR_1 , STRING_3 ( assertEquals ; ) ) ( METHOD_5 . VAR_1 , STRING_2 ( assertEquals ; ) ) ( getName . VAR_1 , STRING_1 ( assertEquals ; ) VAR_1 ( METHOD_4 ; ) STRING_1 ( METHOD_3 . ) ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.io.IOException , java.lang.Exception , TYPE_1 { java.lang.String changeId = METHOD_2 ( admin ) ; java.util.List < TYPE_2 > reviewers = METHOD_3 ( changeId , STRING_1 , INT_1 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_1 ) ; reviewers = METHOD_3 ( changeId , STRING_1 , INT_2 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_2 ) ; reviewers = METHOD_3 ( changeId , STRING_2 , INT_3 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , 1 ) ; } } ; ) 1 , ) ( size . reviewers ( org.junit.Assert.assertEquals ; ) INT_3 , STRING_2 , changeId ( METHOD_3 = reviewers ; ) INT_2 , ) ( size . reviewers ( org.junit.Assert.assertEquals ; ) INT_2 , STRING_1 , changeId ( METHOD_3 = reviewers ; ) INT_1 , ) ( size . reviewers ( org.junit.Assert.assertEquals ; ) INT_1 , STRING_1 , changeId ( METHOD_3 = reviewers > TYPE_2 < java.util.List ; ) admin ( METHOD_2 = changeId java.lang.String { TYPE_1 , java.lang.Exception , java.io.IOException throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( final java.lang.String name , final java.lang.String email ) { final TYPE_2 . Id VAR_1 = new TYPE_2 . Id ( INT_1 ) ; final TYPE_3 . Account account = new TYPE_3 . Account ( VAR_1 ) ; account . METHOD_2 ( name ) ; account . METHOD_3 ( email ) ; final TYPE_1 s = new TYPE_1 ( account , VAR_2 . Collections < TYPE_4 . Id > METHOD_4 ( ) , VAR_2 . Collections < TYPE_5 > METHOD_4 ( ) ) ; return s ; } } ; s return ; ) ) ( METHOD_4 > TYPE_5 < Collections . VAR_2 , ) ( METHOD_4 > Id . TYPE_4 < Collections . VAR_2 , account ( TYPE_1 new = s TYPE_1 final ; ) email ( METHOD_3 . account ; ) name ( METHOD_2 . account ; ) VAR_1 ( Account . TYPE_3 new = account Account . TYPE_3 final ; ) INT_1 ( Id . TYPE_2 new = VAR_1 Id . TYPE_2 final { ) email java.lang.String final , name java.lang.String final ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ; } } } } ; ) ) change ( java.util.Collections.singleton ( update . ) ( changes . ) ( METHOD_5 . ctx ; ) change ( METHOD_4 . TYPE_3 ; ) ) ( getStatus . change ( METHOD_3 . update ; ) VAR_3 ( METHOD_3 . change { ) VAR_1 ( if ; ) VAR_2 ( == ) ) ( getStatus . change ( = VAR_1 ; ) psId ( METHOD_2 . ctx = update TYPE_2 ; ) ( getChange . ctx = change { com.google.gwtorm.server.OrmException throws ) ctx TYPE_1 ( METHOD_1 void private 
private static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 , TYPE_3 { org.eclipse.jgit.revwalk.RevCommit VAR_3 = walk . parseCommit ( VAR_2 . getId ( ) ) ; if ( ( VAR_3 . METHOD_2 ( ) ) > 0 ) { return TYPE_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . contains ( VAR_1 . getId ( ) ) ; } else { return VAR_1 == ( VAR_4 ) ; } } } } ; ) VAR_4 ( == VAR_1 return { else } ; ) ) ( getId . VAR_1 ( contains . ) ) ( METHOD_4 . VAR_3 ( METHOD_3 . TYPE_4 return { ) 0 > ) ) ( METHOD_2 . VAR_3 ( ( if ; ) ) ( getId . VAR_2 ( parseCommit . walk = VAR_3 org.eclipse.jgit.revwalk.RevCommit { TYPE_3 , TYPE_2 , java.io.IOException throws ) VAR_2 TYPE_1 , VAR_1 TYPE_1 , walk org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 boolean static private 
void display ( TYPE_1 . ChangeInfo info , java.lang.String revision , boolean VAR_1 ) { this . revision = revision ; boolean VAR_2 = TYPE_2 . METHOD_1 ( ) ; TYPE_3 VAR_3 = info . revision ( revision ) ; TYPE_4 commit = VAR_3 . commit ( ) ; changeId = info . METHOD_2 ( ) ; project = info . project ( ) ; VAR_4 = commit . METHOD_3 ( ) ; message = commit . message ( ) ; METHOD_4 ( info , VAR_2 ) ; METHOD_5 ( info , VAR_3 , VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 , VAR_3 , info ( METHOD_5 ; ) VAR_2 , info ( METHOD_4 ; ) ( message . commit = message ; ) ( METHOD_3 . commit = VAR_4 ; ) ( project . info = project ; ) ( METHOD_2 . info = changeId ; ) ( commit . VAR_3 = commit TYPE_4 ; ) revision ( revision . info = VAR_3 TYPE_3 ; ) ( METHOD_1 . TYPE_2 = VAR_2 boolean ; revision = revision . this { ) VAR_1 boolean , revision java.lang.String , info ChangeInfo . TYPE_1 ( display void 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( STRING_1 , 2 ) ; java.lang.String VAR_2 = ( ( METHOD_3 ( ) ) + STRING_2 ) + ( METHOD_4 ( ) ) ; VAR_1 . update ( 1 ) ; VAR_3 . METHOD_5 ( METHOD_3 ( ) , VAR_4 , VAR_5 ) ; VAR_1 . update ( 1 ) ; VAR_3 . METHOD_6 ( METHOD_3 ( ) , ( ( VAR_6 ) + STRING_3 ) , VAR_2 ) ; VAR_1 . METHOD_7 ( ) ; } } ; ) ( METHOD_7 . VAR_1 ; ) VAR_2 , ) STRING_3 + ) VAR_6 ( ( , ) ( METHOD_3 ( METHOD_6 . VAR_3 ; ) 1 ( update . VAR_1 ; ) VAR_5 , VAR_4 , ) ( METHOD_3 ( METHOD_5 . VAR_3 ; ) 1 ( update . VAR_1 ; ) ) ( METHOD_4 ( + ) STRING_2 + ) ) ( METHOD_3 ( ( = VAR_2 java.lang.String ; ) 2 , STRING_1 ( METHOD_2 . VAR_1 { java.lang.Exception throws ) VAR_1 TYPE_1 ( METHOD_1 void public 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 in ) throws TYPE_4 , com.google.gwtorm.server.OrmException { if ( ( VAR_1 . get ( ) ) ! = ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } try { VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , change.getId ( ) ) ; } catch ( TYPE_5 e ) { return TYPE_1 . METHOD_3 ( ) ; } return TYPE_1 . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . TYPE_1 return } ; ) ( METHOD_3 . TYPE_1 return { ) e TYPE_5 ( catch } ; ) ) ( change.getId , ) ( getAccountId . ) ( get . VAR_1 ( METHOD_2 . VAR_2 { try } ; ) STRING_1 ( TYPE_4 new throw { ) ) ) ( METHOD_1 . rsrc ( = ! ) ) ( get . VAR_1 ( ( if { com.google.gwtorm.server.OrmException , TYPE_4 throws ) in TYPE_3 , rsrc TYPE_2 ( apply > ? < TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result change = METHOD_3 ( ) ; TYPE_1 . Result VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . getId ( ) ) . isEqualTo ( VAR_1 . getId ( ) ) ; } } ; ) ) ( getId . VAR_1 ( isEqualTo . ) ) ( getId . VAR_3 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_2 = VAR_3 org.eclipse.jgit.revwalk.RevCommit ; ) ) ( getChangeId . VAR_2 ( METHOD_4 ; ) ( METHOD_3 = VAR_2 Result . TYPE_1 ; ) ( METHOD_3 = change Result . TYPE_1 ; ) ( METHOD_2 = VAR_1 org.eclipse.jgit.revwalk.RevCommit { java.lang.Exception throws ) ( METHOD_1 void public 
void add ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ; for ( TYPE_1 input : VAR_1 ) { java.lang.String VAR_2 = input . getValue ( ) . METHOD_1 ( ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { input . METHOD_2 ( STRING_1 ) ; values . add ( VAR_2 ) ; } } insert ( values ) ; } } ; ) values ( insert } } ; ) VAR_2 ( add . values ; ) STRING_1 ( METHOD_2 . input { ) ) ) ( isEmpty . VAR_2 ( ! ( if ; ) ( METHOD_1 . ) ( getValue . input = VAR_2 java.lang.String { ) VAR_1 : input TYPE_1 ( for ; ) ( > < java.util.ArrayList new = values > java.lang.String < java.util.List { ) ( add void 
public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 . Key key ) throws java.io.IOException { try { TYPE_3 VAR_1 = new TYPE_3 ( key . repo , key . path ) ; try { VAR_1 . METHOD_2 ( null , VAR_2 ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } finally { key . repo = null ; } } } } ; null = repo . key { finally } } ; ) ( METHOD_4 . VAR_1 { finally } ; ) VAR_1 ( METHOD_3 . TYPE_2 return ; ) VAR_2 , null ( METHOD_2 . VAR_1 { try ; ) path . key , repo . key ( TYPE_3 new = VAR_1 TYPE_3 { try { java.io.IOException throws ) key Key . TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List static public 
public void run ( ) { while ( true ) { if ( VAR_1 ) { break ; } VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_1 ( ) ; synchronized ( this ) { try { METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 e ) { VAR_4 . METHOD_3 ( STRING_1 , e ) ; } } } } } } } } ; ) e , STRING_1 ( METHOD_3 . VAR_4 { ) e TYPE_1 ( catch } ; ) INT_1 ( METHOD_2 { try { ) this ( synchronized ; ) ( METHOD_1 . VAR_3 ; ) ( METHOD_1 . VAR_2 } ; break { ) VAR_1 ( if { ) true ( while { ) ( run void public 
private void METHOD_1 ( TYPE_1 info , boolean r ) { TYPE_2 api = TYPE_3 . revision ( VAR_1 ) . view ( STRING_1 ) . id ( info . path ( ) ) . view ( STRING_2 ) ; if ( r ) { api . put ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ; } else { api . delete ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ; } } } } ; ) ) ( METHOD_2 > TYPE_4 < VAR_2 ( delete . api { else } ; ) ) ( METHOD_2 > TYPE_4 < VAR_2 ( put . api { ) r ( if ; ) STRING_2 ( view . ) ) ( path . info ( id . ) STRING_1 ( view . ) VAR_1 ( revision . TYPE_3 = api TYPE_2 { ) r boolean , info TYPE_1 ( METHOD_1 void private 
public static TYPE_1 METHOD_1 ( TYPE_2 config , java.lang.String VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( config ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_9 . ) VAR_1 ( METHOD_8 . ) config ( METHOD_7 . ) VAR_4 ( METHOD_6 . ) VAR_3 ( METHOD_5 . ) ) ) ( METHOD_4 . TYPE_5 ( METHOD_3 . TYPE_4 ( METHOD_2 . ) ( TYPE_3 new return { ) VAR_2 java.lang.String , VAR_1 java.lang.String , config TYPE_2 ( METHOD_1 TYPE_1 static public 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ) ( getId . cd , ) ( getProject . ) ( change . cd ( put . VAR_1 { ) VAR_2 : cd com.google.gerrit.server.query.change.ChangeData ( for ; ) ( create . TYPE_3 = VAR_1 > Id . com.google.gerrit.reviewdb.client.Change , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_2 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 > Id . com.google.gerrit.reviewdb.client.Change , com.google.gerrit.reviewdb.client.Project.NameKey < TYPE_1 public 
TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , TYPE_8 VAR_6 , org.eclipse.jgit.lib.Repository repo , TYPE_9 VAR_7 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_8 , java.util.Set < TYPE_10 > VAR_9 , TYPE_11 VAR_10 , TYPE_12 VAR_11 , TYPE_13 < TYPE_14 , com.google.gerrit.reviewdb.client.Account.Id > VAR_12 , TYPE_15 VAR_13 , boolean VAR_14 ) ; ; ) VAR_14 boolean , VAR_13 TYPE_15 , VAR_12 > com.google.gerrit.reviewdb.client.Account.Id , TYPE_14 < TYPE_13 , VAR_11 TYPE_12 , VAR_10 TYPE_11 , VAR_9 > TYPE_10 < java.util.Set , VAR_8 > org.eclipse.jgit.revwalk.RevCommit < java.util.Set , db com.google.gerrit.reviewdb.server.ReviewDb , VAR_7 TYPE_9 , repo org.eclipse.jgit.lib.Repository , VAR_6 TYPE_8 , VAR_5 TYPE_7 , VAR_4 TYPE_6 , rw TYPE_5 , VAR_3 TYPE_4 , VAR_2 NameKey . TYPE_3 , VAR_1 TYPE_2 ( create TYPE_1 
private static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new java.lang.String ( VAR_1 , VAR_3 ) ) ; TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( TYPE_3 . of ( ) , p . METHOD_5 ( ) ) ; return p ; } } ; p return ; ) ) ( METHOD_5 . p , ) ( of . TYPE_3 ( org.junit.Assert.assertEquals ; ) length . VAR_2 , 0 , VAR_2 ( METHOD_4 . p ; ) ( TYPE_1 new = p TYPE_1 ; ) ) VAR_3 , VAR_1 ( java.lang.String new ( METHOD_3 . ) ( METHOD_2 . TYPE_2 = VAR_2 ] [ byte { ) VAR_1 ] [ byte ( METHOD_1 TYPE_1 static private 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_1 > result = new TYPE_2 < > ( ) ; TYPE_3 VAR_2 = VAR_3 . create ( true ) ; for ( com.google.gerrit.reviewdb.client.Account.Id VAR_4 : VAR_1 ) { result . add ( VAR_2 . get ( VAR_4 ) ) ; } VAR_2 . METHOD_2 ( ) ; return result ; } } ; result return ; ) ( METHOD_2 . VAR_2 } ; ) ) VAR_4 ( get . VAR_2 ( add . result { ) VAR_1 : VAR_4 com.google.gerrit.reviewdb.client.Account.Id ( for ; ) true ( create . VAR_3 = VAR_2 TYPE_3 ; ) ( > < TYPE_2 new = result > TYPE_1 < java.util.List { com.google.gwtorm.server.OrmException throws ) VAR_1 > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set ( METHOD_1 > TYPE_1 < java.util.List private 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.String name = VAR_1 . METHOD_2 ( ) ; final java.lang.String t = METHOD_3 ( ) ; final java.lang.String VAR_3 = METHOD_4 ( ) ; final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( STRING_1 ) ; if ( VAR_1 . METHOD_5 ( ) ) { r . append ( ( STRING_2 + VAR_3 ) ) ; r . append ( STRING_3 ) ; } return r . toString ( ) ; } } ; ) ( toString . r return } ; ) STRING_3 ( append . r ; ) ) VAR_3 + STRING_2 ( ( append . r { ) ) ( METHOD_5 . VAR_1 ( if ; ) STRING_1 ( append . r ; ) ( java.lang.StringBuilder new = r java.lang.StringBuilder final ; ) ( METHOD_4 = VAR_3 java.lang.String final ; ) ( METHOD_3 = t java.lang.String final ; ) ( METHOD_2 . VAR_1 = name java.lang.String final { ) VAR_2 TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 java.lang.String public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ) ) ( METHOD_2 . branch ( + ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( ( put . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_2 . Id VAR_1 ) throws TYPE_3 { try { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( new TYPE_4 ( ) ) ; } } catch ( TYPE_5 e ) { throw new TYPE_3 ( new TYPE_4 ( ) ) ; } } } } ; ) ) ( TYPE_4 new ( TYPE_3 new throw { ) e TYPE_5 ( catch } } ; ) ) ( TYPE_4 new ( TYPE_3 new throw { ) ) ) ( METHOD_3 . ) VAR_1 ( METHOD_2 . VAR_2 ( ! ( if { try { TYPE_3 throws ) VAR_1 Id . TYPE_2 final , db ReviewDb . TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null ) ) ; } } ; ) ) null ( TYPE_5 new , VAR_2 ( TYPE_4 new = VAR_4 ; ) VAR_2 ( TYPE_3 new = VAR_3 ; ) index ( METHOD_2 . VAR_2 ; ) ( TYPE_2 new = VAR_2 ; ) VAR_1 ( TYPE_1 new = index { java.lang.Exception throws ) ( METHOD_1 void public 
TYPE_1 METHOD_1 ( TYPE_2 config , TYPE_3 VAR_1 ) { if ( ( VAR_2 ) ! = null ) { return VAR_2 ; } int VAR_3 = config . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) ; if ( VAR_3 < = 0 ) { VAR_3 = config . METHOD_2 ( STRING_3 , null , STRING_4 , 0 ) ; } if ( VAR_3 < = 0 ) { VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ; } return TYPE_5 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_3 , STRING_5 ) ) ; } } ; ) ) STRING_5 , VAR_3 ( METHOD_6 . VAR_1 ( METHOD_5 . TYPE_5 return } ; ) ( METHOD_4 . ) ( METHOD_3 . TYPE_4 = VAR_3 { ) 0 = < VAR_3 ( if } ; ) 0 , STRING_4 , null , STRING_3 ( METHOD_2 . config = VAR_3 { ) 0 = < VAR_3 ( if ; ) 0 , STRING_2 , null , STRING_1 ( METHOD_2 . config = VAR_3 int } ; VAR_2 return { ) null = ! ) VAR_2 ( ( if { ) VAR_1 TYPE_3 , config TYPE_2 ( METHOD_1 TYPE_1 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 ; int VAR_4 ; VAR_2 = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_2 . METHOD_4 ( ) ) ) throw new TYPE_4 ( this , 1 , STRING_1 , VAR_2 ) ; VAR_4 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_4 ) ; return VAR_6 ; } } ; VAR_6 return ; ) VAR_4 ( METHOD_6 . VAR_5 ; ) ( METHOD_5 . ) ) VAR_2 ( ) TYPE_5 ( ( = VAR_4 ; ) VAR_2 , STRING_1 , 1 , this ( TYPE_4 new throw ) ) ) ( METHOD_4 . VAR_2 ( ! ( if ; ) ( METHOD_3 . VAR_2 = VAR_2 ; VAR_4 int ; VAR_3 = VAR_2 TYPE_3 ; ) ( METHOD_2 . VAR_1 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 } ; java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , true ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_3 ) ; } } ; ) STRING_3 ( METHOD_5 . ) ) m ( METHOD_4 . TYPE_2 ( com.google.common.truth.Truth.assertThat ; ) true , VAR_1 , ) ( METHOD_3 , repo ( METHOD_2 . VAR_2 = m > TYPE_1 < java.util.List ; } STRING_2 , STRING_1 { ] [ java.lang.String new = VAR_1 ] [ java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; try { new TYPE_1 ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) ; METHOD_4 ( STRING_4 ) ; } catch ( TYPE_2 e ) { assertEquals ( ( STRING_5 + VAR_1 ) , e . getMessage ( ) ) ; } } } } ; ) ) ( getMessage . e , ) VAR_1 + STRING_5 ( ( assertEquals { ) e TYPE_2 ( catch } ; ) STRING_4 ( METHOD_4 ; ) VAR_1 , STRING_3 ( METHOD_3 . ) STRING_2 ( METHOD_2 . ) ( TYPE_1 new { try ; STRING_1 = VAR_1 java.lang.String final { ) ( METHOD_1 void public 
private TYPE_1 . Key < TYPE_2 > METHOD_1 ( ) { new TYPE_2 ( ) { private static final long VAR_1 = INT_1 ; VAR_2 ( TYPE_3 VAR_3 ) { } protected void METHOD_2 ( final TYPE_4 req , final TYPE_5 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) ; METHOD_7 ( VAR_4 ) ; TYPE_7 VAR_5 ; TYPE_8 VAR_6 ; TYPE_9 . to VAR_7 ; } } ; } } ; } } ; VAR_7 to . TYPE_9 ; VAR_6 TYPE_8 ; VAR_5 TYPE_7 ; ) VAR_4 ( METHOD_7 ; ) rsp , req , ) ) ( length . ) ( METHOD_6 . req ( METHOD_5 . ) ( METHOD_4 . req ( METHOD_3 . TYPE_6 { java.io.IOException throws ) rsp HttpServletResponse . TYPE_5 final , req TYPE_4 final ( METHOD_2 void protected } { ) VAR_3 TYPE_3 ( VAR_2 ; INT_1 = VAR_1 long final static private { ) ( TYPE_2 new { ) ( METHOD_1 > TYPE_2 < Key . TYPE_1 private 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . METHOD_2 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_1 . METHOD_3 ( ctx . METHOD_4 ( ) , ctx . METHOD_5 ( psId ) , patchSet ) ; if ( ! ( VAR_2 ) ) { ctx . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . ctx { ) ) VAR_2 ( ! ( if ; ) patchSet , ) psId ( METHOD_5 . ctx , ) ( METHOD_4 . ctx ( METHOD_3 . VAR_1 } ; ) STRING_1 ( TYPE_3 new throw { ) ) ) ( METHOD_2 . patchSet ( ! ( if { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) , new TYPE_6 ( null ) ) ; } } ; ) ) null ( TYPE_6 new , ) VAR_2 , null ( TYPE_5 new , null , VAR_2 ( TYPE_4 new = VAR_4 ; ) VAR_2 ( TYPE_3 new = VAR_3 ; ) index ( METHOD_2 . VAR_2 ; ) ( TYPE_2 new = VAR_2 ; ) VAR_1 ( TYPE_1 new = index ; ) ( METHOD_1 . super { java.lang.Exception throws ) ( METHOD_1 void public 
protected void add ( final TYPE_1 r ) throws TYPE_2 . OrmException { final java.lang.String n = r . METHOD_1 ( ) ; METHOD_2 ( n ) ; if ( ( VAR_1 . put ( n , r ) ) ! = null ) { throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; } VAR_2 . add ( n ) ; } } ; ) n ( add . VAR_2 } ; ) ) n + STRING_1 ( ( OrmException . TYPE_2 new throw { ) null = ! ) ) r , n ( put . VAR_1 ( ( if ; ) n ( METHOD_2 ; ) ( METHOD_1 . r = n java.lang.String final { OrmException . TYPE_2 throws ) r TYPE_1 final ( add void protected 
public TYPE_1 . OrmException METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_2 err ) { if ( ( ( err . METHOD_2 ( ) ) == null ) & & ( ( err . METHOD_3 ( ) ) ! = null ) ) { err . METHOD_4 ( err . METHOD_3 ( ) ) ; } return new TYPE_1 . OrmException ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , err ) ; } } ; ) err , ) VAR_2 + ) STRING_1 + VAR_1 ( ( ( OrmException . TYPE_1 new return } ; ) ) ( METHOD_3 . err ( METHOD_4 . err { ) ) null = ! ) ) ( METHOD_3 . err ( ( & & ) null == ) ) ( METHOD_2 . err ( ( ( if { ) err TYPE_2 final , VAR_2 java.lang.String final , VAR_1 java.lang.String final ( METHOD_1 OrmException . TYPE_1 public 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { final java.lang.String VAR_1 = STRING_1 ; TYPE_2 VAR_2 = VAR_3 . projects ( ) . name ( VAR_1 ) . create ( ) ; TYPE_3 p = VAR_2 . get ( ) ; org.junit.Assert.assertEquals ( VAR_1 , p . name ) ; TYPE_4 VAR_4 = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; org.junit.Assert . METHOD_2 ( VAR_4 ) ; TYPE_5 . METHOD_3 ( VAR_4 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } } ; ) STRING_2 , VAR_1 ( METHOD_4 ; ) p , ) ( getProject . VAR_4 ( METHOD_3 . TYPE_5 ; ) VAR_4 ( METHOD_2 . org.junit.Assert ; ) ) VAR_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new ( get . VAR_5 = VAR_4 TYPE_4 ; ) name . p , VAR_1 ( org.junit.Assert.assertEquals ; ) ( get . VAR_2 = p TYPE_3 ; ) ( create . ) VAR_1 ( name . ) ( projects . VAR_3 = VAR_2 TYPE_2 ; STRING_1 = VAR_1 java.lang.String final { java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
private static Account . Id METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) throws TYPE_2 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( a == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a . getId ( ) ; } } ; ) ( getId . a return } ; ) ) STRING_2 + ) VAR_2 + STRING_1 ( ( ( TYPE_2 new throw { ) null == a ( if ; ) VAR_2 ( METHOD_2 . VAR_1 = a com.google.gerrit.reviewdb.client.Account final { com.google.gwtorm.server.OrmException , TYPE_2 throws ) VAR_2 java.lang.String final , VAR_1 TYPE_1 final ( METHOD_1 Id . Account static private 
private boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } for ( java.lang.String name : VAR_2 ) { VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ; VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ; } return ! ( VAR_2 . isEmpty ( ) ) ; } } ; ) ) ( isEmpty . VAR_2 ( ! return } ; ) ( METHOD_6 . ) name ( METHOD_4 . VAR_3 ; ) ) name , STRING_1 ( java.lang.String.format ( info . VAR_5 { ) VAR_2 : name java.lang.String ( for } ; ) ) VAR_4 ( METHOD_5 . TYPE_3 ( METHOD_4 . VAR_2 { ) VAR_1 : VAR_4 TYPE_1 ( for ; ) ) ( METHOD_3 . VAR_3 ( METHOD_2 . TYPE_2 = VAR_2 > java.lang.String < java.util.Set { ) VAR_1 > TYPE_1 < java.util.List ( METHOD_1 boolean private 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , boolean edit ) { VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ; } } ; ) ) edit , VAR_2 , ) 1 + ) VAR_3 - VAR_2 ( ( , ) ( METHOD_3 . ) VAR_1 ( METHOD_2 . VAR_5 ( TYPE_2 new ( add . VAR_4 { ) edit boolean , VAR_3 int , VAR_2 int , VAR_1 TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , org.eclipse.jgit.revwalk.RevCommit commit , TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 , TYPE_3 info , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) throws com.google.gwtorm.server.OrmException { METHOD_1 ( db , change , null , ps , commit , VAR_1 , VAR_2 , info , reviewers ) ; } } ; ) reviewers , info , VAR_2 , VAR_1 , commit , ps , null , change , db ( METHOD_1 { com.google.gwtorm.server.OrmException throws ) reviewers > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set , info TYPE_3 , VAR_2 > TYPE_2 < java.util.List , VAR_1 TYPE_1 , commit org.eclipse.jgit.revwalk.RevCommit , ps com.google.gerrit.reviewdb.client.PatchSet , change com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void public 
private static byte [ ] METHOD_1 ( final TYPE_1 p ) throws java.io.IOException { final TYPE_2 in = p . METHOD_2 ( ) . METHOD_3 ( p . getName ( ) ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; try { TYPE_4 . METHOD_4 ( in , VAR_1 ) ; } finally { in . close ( ) ; VAR_1 . close ( ) ; } return VAR_1 . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . VAR_1 return } ; ) ( close . VAR_1 ; ) ( close . in { finally } ; ) VAR_1 , in ( METHOD_4 . TYPE_4 { try ; ) ( TYPE_3 new = VAR_1 TYPE_3 ; ) ) ( getName . p ( METHOD_3 . ) ( METHOD_2 . p = in TYPE_2 final { java.io.IOException throws ) p TYPE_1 final ( METHOD_1 ] [ byte static private 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_3 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_3 ( METHOD_6 . u , STRING_2 ( METHOD_5 ; ) VAR_4 , VAR_3 ( user . util = u TYPE_2 ; ) STRING_1 , VAR_4 , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 ; ) ( METHOD_4 . ) STRING_1 , VAR_2 , VAR_1 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) ) ; } } ; ) ) VAR_2 , null ( TYPE_5 new , null , VAR_2 ( TYPE_4 new = VAR_4 ; ) VAR_2 ( TYPE_3 new = VAR_3 ; ) index ( METHOD_2 . VAR_2 ; ) ( TYPE_2 new = VAR_2 ; ) VAR_1 ( TYPE_1 new = index { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 . get ( ) ) instanceof TYPE_2 ) { } else if ( ! ( VAR_2 ) ) { throw new TYPE_1 ( 1 , STRING_1 ) ; } else if ( ! ( VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_1 ( 1 , STRING_2 ) ; } } } } ; ) STRING_2 , 1 ( TYPE_1 new throw { ) ) ) ( METHOD_3 . ) ( METHOD_2 . ) ( get . VAR_1 ( ! ( if else } ; ) STRING_1 , 1 ( TYPE_1 new throw { ) ) VAR_2 ( ! ( if else } { ) TYPE_2 instanceof ) ) ( get . VAR_1 ( ( if { TYPE_1 throws ) ( METHOD_1 void private 
private void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; } TYPE_1 . METHOD_1 ( VAR_3 , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_4 VAR_4 ) { } public void onSuccess ( TYPE_3 result ) { } } ) ; } } ; ) } } { ) result TYPE_3 ( onSuccess void public } { ) VAR_4 TYPE_4 ( METHOD_3 void public { ) ( > TYPE_3 < TYPE_2 new , VAR_1 , VAR_3 ( METHOD_1 . TYPE_1 } ; ) VAR_1 , VAR_3 ( METHOD_2 . VAR_2 { ) null = ! ) VAR_2 ( ( if { ) VAR_1 boolean ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) ) ) ( METHOD_4 . branch ( + ) STRING_2 + ) ) ) ( get . project ( + STRING_1 ( ( ( ( put . VAR_1 = r TYPE_1 ; ) ( METHOD_3 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
protected TYPE_1 . ReviewDb METHOD_1 ( ) throws TYPE_2 { if ( ( db ) == null ) { try { db = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( TYPE_3 . OrmException e ) { throw new TYPE_2 ( 1 , STRING_1 , e ) ; } } return db ; } } ; db return } } ; ) e , STRING_1 , 1 ( TYPE_2 new throw { ) e OrmException . TYPE_3 ( catch } ; ) ( METHOD_4 . ) ( METHOD_3 . ) ( METHOD_2 = db { try { ) null == ) db ( ( if { TYPE_2 throws ) ( METHOD_1 ReviewDb . TYPE_1 protected 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ; TYPE_2 u = util . user ( VAR_3 , VAR_5 ) ; METHOD_6 ( STRING_2 , u . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ) ; } } ; ) ) ( METHOD_8 . ) STRING_3 ( METHOD_7 . u , STRING_2 ( METHOD_6 ; ) VAR_5 , VAR_3 ( user . util = u TYPE_2 ; ) true ( METHOD_5 . ) STRING_1 , VAR_4 , VAR_1 , VAR_3 ( METHOD_2 . TYPE_1 ; ) ( METHOD_4 . ) STRING_1 , VAR_2 , VAR_1 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
public java.lang.String diff ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = VAR_4 ; TYPE_3 VAR_5 = VAR_3 . diff ( VAR_6 , VAR_1 , VAR_2 ) ; TYPE_4 VAR_7 = new TYPE_4 ( ) ; TYPE_5 VAR_8 = new TYPE_5 ( VAR_7 ) ; VAR_8 . format ( VAR_5 , VAR_1 , VAR_2 ) ; return VAR_7 . toString ( VAR_9 ) ; } } ; ) VAR_9 ( toString . VAR_7 return ; ) VAR_2 , VAR_1 , VAR_5 ( format . VAR_8 ; ) VAR_7 ( TYPE_5 new = VAR_8 TYPE_5 ; ) ( TYPE_4 new = VAR_7 TYPE_4 ; ) VAR_2 , VAR_1 , VAR_6 ( diff . VAR_3 = VAR_5 TYPE_3 ; VAR_4 = VAR_3 TYPE_2 { java.io.IOException throws ) VAR_2 TYPE_1 , VAR_1 TYPE_1 ( diff java.lang.String public 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey projectName : VAR_3 . METHOD_3 ( ) ) { TYPE_3 e = VAR_3 . get ( projectName ) ; if ( e == null ) { continue ; } if ( VAR_1 . equals ( e . getProject ( ) . METHOD_4 ( VAR_4 ) ) ) { VAR_2 . add ( VAR_5 . format ( e . getProject ( ) ) ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) ) ) ( getProject . e ( format . VAR_5 ( add . VAR_2 { ) ) ) VAR_4 ( METHOD_4 . ) ( getProject . e ( equals . VAR_1 ( if } ; continue { ) null == e ( if ; ) projectName ( get . VAR_3 = e TYPE_3 { ) ) ( METHOD_3 . VAR_3 : projectName com.google.gerrit.reviewdb.client.Project.NameKey ( for ; ) ( METHOD_2 . TYPE_2 = VAR_2 > TYPE_1 < java.util.List { ) VAR_1 com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( insert ( VAR_4 , VAR_1 ) ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( ) ; TYPE_4 result = client . METHOD_7 ( VAR_2 ) ; if ( ! ( result . METHOD_8 ( ) ) ) { throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_9 ( ) . getId ( ) , VAR_3 , result . METHOD_10 ( ) ) ) ; } } } } ; ) ) ) ( METHOD_10 . result , VAR_3 , ) ( getId . ) ( METHOD_9 . VAR_1 , STRING_1 ( java.lang.String.format ( java.io.IOException new throw { ) ) ) ( METHOD_8 . result ( ! ( if ; ) VAR_2 ( METHOD_7 . client = result TYPE_4 ; ) ( METHOD_6 . ) VAR_5 ( METHOD_5 . ) ) VAR_1 , VAR_4 ( insert ( METHOD_4 . ) VAR_4 ( METHOD_3 . ) VAR_3 ( METHOD_2 . ) ( TYPE_3 new = VAR_2 TYPE_2 { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 void public 
public boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1 = notes . getChange ( ) . METHOD_2 ( ) ; if ( ( VAR_1 ! = null ) & & ( METHOD_3 ( ) . METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_3 ( ) . getAccountId ( ) ; return id . equals ( VAR_1 ) ; } return false ; } } ; false return } ; ) VAR_1 ( equals . id return ; ) ( getAccountId . ) ( METHOD_3 = id com.google.gerrit.reviewdb.client.Account.Id { ) ) ) ( METHOD_4 . ) ( METHOD_3 ( & & ) null = ! VAR_1 ( ( if ; ) ( METHOD_2 . ) ( getChange . notes = VAR_1 com.google.gerrit.reviewdb.client.Account.Id { ) ( METHOD_1 boolean public 
public TYPE_1 change ( TYPE_2 notes ) { com.google.gerrit.reviewdb.client.Change change = notes . getChange ( ) ; TYPE_3 . METHOD_1 ( METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) . equals ( change . getProject ( ) ) , STRING_1 ) ; return METHOD_2 ( ) . METHOD_4 ( notes ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) notes ( METHOD_4 . ) ( METHOD_2 return ; ) STRING_1 , ) ) ( getProject . change ( equals . ) ( METHOD_3 . ) ( getProject . ) ( METHOD_2 ( METHOD_1 . TYPE_3 ; ) ( getChange . notes = change com.google.gerrit.reviewdb.client.Change { ) notes TYPE_2 ( change TYPE_1 public 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , java.lang.String path , TYPE_3 VAR_2 , byte [ ] VAR_3 ) throws TYPE_4 , java.io.IOException { final org.eclipse.jgit.lib.ObjectId VAR_4 = ( VAR_1 == ( VAR_5 ) ) ? VAR_2 . insert ( VAR_6 , VAR_3 ) : TYPE_5 . METHOD_2 ( repo , rw , base , path ) ; return new TYPE_1 ( path ) { public void apply ( TYPE_6 VAR_7 ) { VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; } } ; } } ; } } ; ) VAR_4 ( METHOD_4 . VAR_7 ; ) VAR_8 ( METHOD_3 . VAR_7 { ) VAR_7 TYPE_6 ( apply void public { ) path ( TYPE_1 new return ; ) path , base , rw , repo ( METHOD_2 . TYPE_5 : ) VAR_3 , VAR_6 ( insert . VAR_2 ? ) ) VAR_5 ( == VAR_1 ( = VAR_4 org.eclipse.jgit.lib.ObjectId final { java.io.IOException , TYPE_4 throws ) VAR_3 ] [ byte , VAR_2 TYPE_3 , path java.lang.String , base org.eclipse.jgit.revwalk.RevCommit , rw org.eclipse.jgit.revwalk.RevWalk , repo org.eclipse.jgit.lib.Repository , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( TYPE_1 a , TYPE_2 . Change change ) { VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_3 = change . METHOD_5 ( ) ; VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ; a . status = change . getStatus ( ) ; } } ; ) ( getStatus . change = status . a ; ) ( METHOD_6 . ) ( getStatus . change = VAR_4 ; ) ( METHOD_5 . change = VAR_3 ; INT_1 / ) ) ( METHOD_3 . ) ( METHOD_4 . change ( = VAR_2 ; INT_1 / ) ) ( METHOD_3 . ) ( METHOD_2 . change ( = VAR_1 { ) change Change . TYPE_2 , a TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { org.junit.Assert.assertEquals ( VAR_1 , repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) ; } finally { repo . close ( ) ; } } } } ; ) ( close . repo { finally } ; ) ) ( getName . ) ( METHOD_4 . ) VAR_3 ( METHOD_3 . repo , VAR_1 ( org.junit.Assert.assertEquals { try ; ) ) projectName ( com.google.gerrit.reviewdb.client.Project.NameKey new ( METHOD_2 . VAR_2 = repo org.eclipse.jgit.lib.Repository { TYPE_1 , java.io.IOException throws ) VAR_1 java.lang.String , projectName java.lang.String ( METHOD_1 void private 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; } } ; ) ) ) STRING_4 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_5 ; ) ) ) STRING_3 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_5 ; ) ) ) STRING_2 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_3 ; ) STRING_1 ( METHOD_2 . TYPE_2 = p TYPE_1 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String id ) throws TYPE_3 , java.lang.Exception { final TYPE_4 user = VAR_2 . get ( ) ; if ( user instanceof TYPE_5 ) { throw new TYPE_6 ( STRING_1 ) ; } else if ( ! ( user instanceof TYPE_7 ) ) { throw new TYPE_3 ( id ) ; } return TYPE_8 . METHOD_1 ( id , VAR_3 ) ; } } ; ) VAR_3 , id ( METHOD_1 . TYPE_8 return } ; ) id ( TYPE_3 new throw { ) ) TYPE_7 instanceof user ( ! ( if else } ; ) STRING_1 ( TYPE_6 new throw { ) TYPE_5 instanceof user ( if ; ) ( get . VAR_2 = user TYPE_4 final { java.lang.Exception , TYPE_3 throws ) id java.lang.String , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws java.io.IOException , TYPE_1 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( VAR_2 ) ; } } } } ; ) VAR_2 ( METHOD_4 { ) VAR_1 ! ( if ; ) VAR_2 ( METHOD_3 } ; ) STRING_1 ( TYPE_1 new throw { ) null == VAR_2 ( if ; ) ) ( METHOD_2 . project ( METHOD_1 . VAR_3 = VAR_2 org.eclipse.jgit.lib.Repository final { TYPE_1 , java.io.IOException throws ) VAR_1 boolean , project com.google.gerrit.reviewdb.client.Project ( delete void public 
private TYPE_1 < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals ( com.google.gerrit.reviewdb.server.ReviewDb db , final TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { return TYPE_3 . METHOD_1 ( db . METHOD_2 ( ) . METHOD_3 ( rsrc . getChange ( ) . getId ( ) ) , new TYPE_4 < com.google.gerrit.reviewdb.client . PatchSetApproval > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client . PatchSetApproval input ) { return input . getAccountId ( ) . equals ( rsrc . METHOD_4 ( ) . getAccountId ( ) ) ; } } ) ; } } ; ) } } ; ) ) ( getAccountId . ) ( METHOD_4 . rsrc ( equals . ) ( getAccountId . input return { ) input PatchSetApproval . com.google.gerrit.reviewdb.client ( apply boolean public { ) ( > PatchSetApproval . com.google.gerrit.reviewdb.client < TYPE_4 new , ) ) ( getId . ) ( getChange . rsrc ( METHOD_3 . ) ( METHOD_2 . db ( METHOD_1 . TYPE_3 return { com.google.gwtorm.server.OrmException throws ) rsrc TYPE_2 final , db com.google.gerrit.reviewdb.server.ReviewDb ( approvals > PatchSetApproval . com.google.gerrit.reviewdb.client < TYPE_1 private 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 type ) { res . METHOD_2 ( type . METHOD_3 ( ) ) ; res . METHOD_4 ( TYPE_4 . name ( ) ) ; res . METHOD_5 ( VAR_1 , STRING_1 ) ; res . METHOD_5 ( VAR_2 , STRING_2 ) ; METHOD_6 ( req , res ) ; } } ; ) res , req ( METHOD_6 ; ) STRING_2 , VAR_2 ( METHOD_5 . res ; ) STRING_1 , VAR_1 ( METHOD_5 . res ; ) ) ( name . TYPE_4 ( METHOD_4 . res ; ) ) ( METHOD_3 . type ( METHOD_2 . res { ) type TYPE_3 , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { if ( METHOD_4 ( ) ) { display ( r ) ; } } } ) ; } } ; ) } } } ; ) r ( display { ) ) ( METHOD_4 ( if { ) r TYPE_3 final ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , VAR_2 ( METHOD_3 . TYPE_1 ; ) ( METHOD_1 . super } ; ) ( METHOD_2 { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { for ( final TYPE_1 < ? , ? > TYPE_2 : VAR_2 ) { VAR_1 . METHOD_2 ( new TYPE_3 ( ) { public void run ( ) { TYPE_2 . METHOD_1 ( ) ; } } ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { TYPE_2 . METHOD_4 ( VAR_3 ) ; } } , INT_1 , VAR_4 ) ; } } } } } } ; ) VAR_4 , INT_1 , } } ; ) VAR_3 ( METHOD_4 . TYPE_2 { ) ( run void public { ) ( TYPE_3 new ( METHOD_3 . VAR_3 ; ) } } ; ) ( METHOD_1 . TYPE_2 { ) ( run void public { ) ( TYPE_3 new ( METHOD_2 . VAR_1 { ) VAR_2 : TYPE_2 > ? , ? < TYPE_1 final ( for { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( java.lang.String file , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > set = VAR_2 . get ( file ) ; if ( set ! = null ) { set . METHOD_2 ( VAR_1 ) ; } else { VAR_2 . put ( file , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; } } } } ; ) ) VAR_1 ( METHOD_3 . TYPE_1 , file ( put . VAR_2 { else } ; ) VAR_1 ( METHOD_2 . set { ) null = ! set ( if ; ) file ( get . VAR_2 = set > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set { ) VAR_1 > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set , file java.lang.String ( METHOD_1 void public 
protected void METHOD_1 ( ) throws TYPE_1 { if ( ( db ) ! = null ) { try { for ( TYPE_2 w : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } catch ( TYPE_3 . OrmException err ) { } } } } } } { ) err OrmException . TYPE_3 ( catch } } ; ) ) ( getAccountId . w , VAR_1 ( add { ) ) ) ( change.getId ( METHOD_3 . ) ( METHOD_2 . db : w TYPE_2 ( for { try { ) null = ! ) db ( ( if { TYPE_1 throws ) ( METHOD_1 void protected 
public TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ; VAR_2 . run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref == null ) { VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ; VAR_4 = VAR_5 . get ( ) ; } else { VAR_3 = ref . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( rw , VAR_3 ) ; } return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } } ; ) ) ) VAR_6 ( + ) VAR_4 ( ( , VAR_3 , rw , repo ( METHOD_6 return } ; ) VAR_3 , rw ( METHOD_5 = VAR_4 ; ) ( METHOD_4 . ref = VAR_3 { else } ; ) ( get . VAR_5 = VAR_4 ; ) ( METHOD_3 . org.eclipse.jgit.lib.ObjectId = VAR_3 { ) null == ref ( if ; VAR_3 org.eclipse.jgit.lib.ObjectId ; ) ( run . VAR_2 ; ) VAR_1 ( METHOD_2 . repo = ref TYPE_2 { java.lang.Exception throws ) ( METHOD_1 Result . TYPE_1 public 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) & & ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) & & ( ! ( METHOD_7 ( db ) ) ) ; } } ; ) ) ) db ( METHOD_7 ( ! ( & & ) ) ) VAR_2 ( METHOD_6 . ) ( METHOD_5 . VAR_1 ( & & ) ) ) ( METHOD_1 . ) ( METHOD_3 ( || ) ) ) ) ( METHOD_2 ( METHOD_4 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( ( return { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
protected void METHOD_1 ( final java.lang.String p ) { TYPE_1 in = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( p ) ; if ( in ! = null ) { METHOD_4 ( in , ( STRING_1 + p ) ) ; } else { VAR_2 . error ( ( STRING_2 + p ) ) ; } } } } ; ) ) p + STRING_2 ( ( error . VAR_2 { else } ; ) ) p + STRING_1 ( , in ( METHOD_4 { ) null = ! in ( if ; ) p ( METHOD_3 . ) ( METHOD_2 . class VAR_1 = in TYPE_1 { ) p java.lang.String final ( METHOD_1 void protected 
public int length ( ) { int VAR_1 = 0 ; TYPE_1 t = this ; while ( t . METHOD_1 ( ) ) { VAR_1 ++ ; t = ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) . METHOD_3 ( ) ; } return VAR_1 ; } } ; VAR_1 return } ; ) ( METHOD_3 . ) ( METHOD_2 . ) ) t ( ) TYPE_2 ( ( = t ; ++ VAR_1 { ) ) ( METHOD_1 . t ( while ; this = t TYPE_1 ; 0 = VAR_1 int { ) ( length int public 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . Change change , TYPE_2 . PatchSet patchSet ) { TYPE_3 VAR_2 = VAR_3 . get ( change , patchSet ) ; for ( TYPE_4 patch : VAR_2 . METHOD_2 ( ) ) { if ( ( VAR_4 ) == null ) { VAR_4 = new java.util.ArrayList < TYPE_5 > ( ) ; } TYPE_5 p = new TYPE_5 ( ) ; p . file = patch . METHOD_3 ( ) ; p . type = patch . METHOD_4 ( ) ; VAR_4 . add ( p ) ; } } } } ; ) p ( add . VAR_4 ; ) ( METHOD_4 . patch = type . p ; ) ( METHOD_3 . patch = file . p ; ) ( TYPE_5 new = p TYPE_5 } ; ) ( > TYPE_5 < java.util.ArrayList new = VAR_4 { ) null == ) VAR_4 ( ( if { ) ) ( METHOD_2 . VAR_2 : patch TYPE_4 ( for ; ) patchSet , change ( get . VAR_3 = VAR_2 TYPE_3 { ) patchSet PatchSet . TYPE_2 , change Change . TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; commit . METHOD_2 ( ( VAR_1 & & ( ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) ) ) ) ; VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_2 . VAR_6 ; ) VAR_1 ( METHOD_2 . VAR_5 ; ) ) false : ) ( METHOD_4 . VAR_3 ? VAR_1 ( ( METHOD_2 . VAR_4 ; ) ) ) ) ) ( isEmpty . ) ( METHOD_3 . VAR_3 ( ! ( & & VAR_1 ( ( METHOD_2 . commit ; ) VAR_1 ( METHOD_2 . VAR_2 { ) VAR_1 boolean ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . ChangeInfo info = METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_5 ( ) . METHOD_6 ( ) ) ) ; } } ; ) ) ) ( METHOD_6 . ) ( METHOD_5 . admin , VAR_4 , STRING_1 ( java.lang.String.format ( contains . ) message ( com.google.common.truth.Truth.assertThat ; message . commit . ) VAR_3 ( get . VAR_2 = message java.lang.String ; ) ) VAR_1 ( METHOD_4 ( METHOD_3 = info ChangeInfo . TYPE_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void topic ( java.lang.String topic ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . topic = topic ; try { VAR_1 . apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_3 e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e TYPE_3 | java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; ) in , change ( apply . VAR_1 { try ; topic = topic . in ; ) ( TYPE_2 new = in TYPE_2 { TYPE_1 throws ) topic java.lang.String ( topic void public 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( db , VAR_1 . getId ( ) ) , this ) ) . METHOD_4 ( ) ) { if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } } ; false return } ; ) e ( com.google.gwtorm.server.OrmException new throw { ) e TYPE_3 ( catch } } } ; true return { ) ) ) ( getId . VAR_1 ( equals . ) ( getId . VAR_2 ( if { ) ) ( METHOD_4 . ) ) this , ) ) ( getId . VAR_1 , db ( TYPE_2 new ( METHOD_3 . TYPE_1 ( METHOD_2 . index : VAR_2 com.google.gerrit.server.query.change.ChangeData ( for { try { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData ( METHOD_1 boolean public 
private TYPE_1 user ( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , VAR_5 , null , VAR_6 , VAR_7 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_2 , ) VAR_2 , name ( TYPE_4 new , VAR_7 , VAR_6 , null , VAR_5 , VAR_4 , ) ( METHOD_1 > TYPE_3 < Collections . VAR_3 , ) ( METHOD_1 > TYPE_3 < Collections . VAR_3 ( TYPE_1 new return { ) VAR_2 ... AccountGroup . com.google.gerrit.reviewdb.client , name java.lang.String , VAR_1 ProjectConfig . TYPE_2 ( user TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 . Result > VAR_1 = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; METHOD_3 ( VAR_2 , VAR_3 , STRING_5 , project ) ; TYPE_2 in = METHOD_4 ( VAR_4 ) ; in . branch = STRING_3 ; VAR_5 = VAR_1 . get ( STRING_1 ) . getChangeId ( ) ; METHOD_5 ( in , VAR_6 class , ( STRING_6 + ( VAR_5 ) ) ) ; } } ; ) ) ) VAR_5 ( + STRING_6 ( , class VAR_6 , in ( METHOD_5 ; ) ( getChangeId . ) STRING_1 ( get . VAR_1 = VAR_5 ; STRING_3 = branch . in ; ) VAR_4 ( METHOD_4 = in TYPE_2 ; ) project , STRING_5 , VAR_3 , VAR_2 ( METHOD_3 ; ) STRING_4 , STRING_3 , STRING_2 , STRING_1 ( METHOD_2 = VAR_1 > Result . TYPE_1 , java.lang.String < java.util.Map { java.lang.Exception throws ) ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . Id VAR_2 ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( TYPE_4 . METHOD_2 ( change . METHOD_3 ( ) . get ( ) , VAR_3 . METHOD_4 ( ) ) ) & & ( VAR_2 . equals ( VAR_3 . METHOD_5 ( ) ) ) ) { result . add ( VAR_3 ) ; } } return result ; } } ; result return } } ; ) VAR_3 ( add . result { ) ) ) ) ( METHOD_5 . VAR_3 ( equals . VAR_2 ( & & ) ) ) ( METHOD_4 . VAR_3 , ) ( get . ) ( METHOD_3 . change ( METHOD_2 . TYPE_4 ( ( if { ) VAR_1 : VAR_3 TYPE_1 ( for ; ) ( > TYPE_1 < java.util.ArrayList new = result > TYPE_1 < java.util.List { ) VAR_2 Id . TYPE_3 , VAR_1 > TYPE_1 < TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
void METHOD_1 ( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ; if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ; } } } } ; ) ) VAR_1 , VAR_2 , b , a , STRING_1 ( java.lang.String.format ( METHOD_3 . org.junit.Assert { ) ) ) VAR_1 ( equals . VAR_2 ( ! ( if ; ) ( toString . ) ) b ( create . TYPE_2 , ) a ( create . TYPE_2 ( METHOD_2 . TYPE_1 = VAR_2 java.lang.String { ) VAR_1 java.lang.String , b java.lang.String , a java.lang.String ( METHOD_1 void 
public void METHOD_1 ( ) throws TYPE_1 . OrmException , TYPE_2 { METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) ; METHOD_4 ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; java.util.Set < java.lang.String > s = VAR_1 . METHOD_3 ( db ) ; assertEquals ( 1 , s . size ( ) ) ; METHOD_2 ( s . contains ( STRING_3 ) ) ; METHOD_5 ( s . contains ( STRING_4 ) ) ; } } ; ) ) STRING_4 ( contains . s ( METHOD_5 ; ) ) STRING_3 ( contains . s ( METHOD_2 ; ) ) ( size . s , 1 ( assertEquals ; ) db ( METHOD_3 . VAR_1 = s > java.lang.String < java.util.Set ; ) STRING_2 ( METHOD_4 ; ) STRING_1 ( METHOD_4 ; ) ) ( isEmpty . ) db ( METHOD_3 . VAR_1 ( METHOD_2 { TYPE_2 , OrmException . TYPE_1 throws ) ( METHOD_1 void public 
private static TYPE_1 METHOD_1 ( TYPE_2 s ) { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ( s . METHOD_3 ( ) . METHOD_4 ( ) ? s . METHOD_3 ( ) . get ( ) : TYPE_4 . METHOD_2 ( s . METHOD_5 ( ) . getId ( ) ) ) ) ; return new TYPE_1 ( VAR_1 , TYPE_4 . METHOD_6 ( VAR_1 , s ) ) ; } } ; ) ) s , VAR_1 ( METHOD_6 . TYPE_4 , VAR_1 ( TYPE_1 new return ; ) ) ) ) ( getId . ) ( METHOD_5 . s ( METHOD_2 . TYPE_4 : ) ( get . ) ( METHOD_3 . s ? ) ( METHOD_4 . ) ( METHOD_3 . s ( ( METHOD_2 . TYPE_4 = VAR_1 TYPE_3 { ) s TYPE_2 ( METHOD_1 TYPE_1 static private 
private static boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } TYPE_1 ui = null ; if ( TYPE_2 . METHOD_2 ( ) ) { ui = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; } if ( ui == null ) { ui = TYPE_2 . METHOD_6 ( ) . METHOD_5 ( ) ; } return ui == ( VAR_2 ) ; } } ; ) VAR_2 ( == ui return } ; ) ( METHOD_5 . ) ( METHOD_6 . TYPE_2 = ui { ) null == ui ( if } ; ) ( METHOD_5 . ) ( METHOD_4 . ) ( METHOD_3 . TYPE_2 = ui { ) ) ( METHOD_2 . TYPE_2 ( if ; null = ui TYPE_1 } ; true return { ) VAR_1 ( if { ) ( METHOD_1 boolean static private 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < ? extends TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_1 ) { java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( VAR_1 ) ; java.util.Collections . METHOD_1 ( r , VAR_2 ) ; return r ; } } ; r return ; ) VAR_2 , r ( METHOD_1 . java.util.Collections ; ) VAR_1 ( > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.ArrayList new = r > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.ArrayList { ) VAR_1 > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 extends ? < TYPE_2 ( METHOD_1 > > com.google.gerrit.server.query.change.ChangeData < TYPE_1 < java.util.List static private 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { user = ctx . METHOD_2 ( ) . METHOD_3 ( ) ; notes = ctx . METHOD_4 ( ) ; ps = VAR_1 . get ( ctx . METHOD_5 ( ) , ctx . METHOD_4 ( ) , psId ) ; boolean VAR_2 = false ; VAR_2 |= METHOD_6 ( ctx ) ; VAR_2 |= METHOD_7 ( ctx ) ; VAR_2 |= METHOD_8 ( ctx ) ; if ( VAR_2 ) { ctx . METHOD_9 ( ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ( METHOD_9 . ctx { ) VAR_2 ( if ; ) ctx ( METHOD_8 |= VAR_2 ; ) ctx ( METHOD_7 |= VAR_2 ; ) ctx ( METHOD_6 |= VAR_2 ; false = VAR_2 boolean ; ) psId , ) ( METHOD_4 . ctx , ) ( METHOD_5 . ctx ( get . VAR_1 = ps ; ) ( METHOD_4 . ctx = notes ; ) ( METHOD_3 . ) ( METHOD_2 . ctx = user { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 boolean public 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 p ) { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_2 c : p . METHOD_3 ( ) ) { if ( c . METHOD_4 ( ) ) { VAR_1 . add ( VAR_2 . format ( c . getProject ( ) ) ) ; VAR_1 . METHOD_5 ( METHOD_1 ( c ) ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) ) c ( METHOD_1 ( METHOD_5 . VAR_1 ; ) ) ) ( getProject . c ( format . VAR_2 ( add . VAR_1 { ) ) ( METHOD_4 . c ( if { ) ) ( METHOD_3 . p : c TYPE_2 ( for ; ) ( METHOD_2 . TYPE_3 = VAR_1 > TYPE_1 < java.util.List { ) p TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List private 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 = null ; } TYPE_1 . METHOD_6 ( true ) ; TYPE_2 . METHOD_7 ( true ) ; } } ; ) true ( METHOD_7 . TYPE_2 ; ) true ( METHOD_6 . TYPE_1 } ; null = VAR_3 ; ) ( METHOD_5 . ) ( METHOD_4 . VAR_3 { ) null = ! ) VAR_3 ( ( if } ; null = VAR_2 ; ) ( METHOD_5 . ) ( METHOD_4 . VAR_2 { ) null = ! ) VAR_2 ( ( if } ; null = VAR_1 ; ) ( METHOD_3 . VAR_1 { ) null = ! ) VAR_1 ( ( if ; ) ( METHOD_2 ; ) ( METHOD_1 . super { ) ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 ) ; METHOD_4 ( STRING_5 , VAR_3 ) ; METHOD_4 ( STRING_6 , VAR_4 ) ; } } ; ) VAR_4 , STRING_6 ( METHOD_4 ; ) VAR_3 , STRING_5 ( METHOD_4 ; ) STRING_4 ( METHOD_4 ; ) STRING_3 ( METHOD_4 ; ) ) VAR_2 ( METHOD_3 ( insert = VAR_4 com.google.gerrit.reviewdb.client.Change ; ) ) VAR_1 ( METHOD_3 ( insert = VAR_3 com.google.gerrit.reviewdb.client.Change ; ) STRING_2 ( METHOD_2 = VAR_2 > TYPE_2 < TYPE_1 ; ) STRING_1 ( METHOD_2 = VAR_1 > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 r = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; r . METHOD_3 ( ) ; r . METHOD_4 ( true ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ; TYPE_3 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . ) STRING_3 ( METHOD_6 . u , STRING_2 ( METHOD_5 ; ) VAR_4 , VAR_1 ( user . util = u TYPE_3 ; ) true ( METHOD_4 . ) STRING_1 , VAR_4 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_2 ; ) true ( METHOD_4 . r ; ) ( METHOD_3 . r ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_2 = r TYPE_1 { ) ( METHOD_1 void public 
public static boolean METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , TYPE_1 . NameKey VAR_1 , org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.reviewdb.server.ReviewDb db ) { try { TYPE_2 . METHOD_2 ( patchSet , VAR_1 , git , rw , db ) ; return true ; } catch ( TYPE_3 e ) { return false ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , patchSet . getId ( ) , VAR_1 ) , e ) ; return false ; } } } } ; false return ; ) e , ) VAR_1 , ) ( getId . patchSet , STRING_1 ( java.lang.String.format ( METHOD_3 . VAR_2 { ) e java.io.IOException | com.google.gwtorm.server.OrmException ( catch } ; false return { ) e TYPE_3 ( catch } ; true return ; ) db , rw , git , VAR_1 , patchSet ( METHOD_2 . TYPE_2 { try { ) db com.google.gerrit.reviewdb.server.ReviewDb , rw org.eclipse.jgit.revwalk.RevWalk , git org.eclipse.jgit.lib.Repository , VAR_1 NameKey . TYPE_1 , patchSet com.google.gerrit.reviewdb.client.PatchSet ( METHOD_1 boolean static public 
private void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { METHOD_2 ( res . METHOD_3 ( ) . close ( ) ) ; METHOD_4 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ; } else { METHOD_2 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ; METHOD_4 ( res . METHOD_3 ( ) . close ( ) ) ; } } } } ; ) ) ( close . ) ( METHOD_3 . res ( METHOD_4 ; ) ) ( METHOD_5 . ) ( METHOD_3 . res ( METHOD_2 { else } ; ) ) ( METHOD_5 . ) ( METHOD_3 . res ( METHOD_4 ; ) ) ( close . ) ( METHOD_3 . res ( METHOD_2 { ) VAR_1 ( if { ) VAR_1 boolean ( METHOD_1 void private 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } } catch ( TYPE_1 e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e TYPE_1 ( catch } } ; ) VAR_2 ( commit ; ) id ( METHOD_2 . VAR_2 { else } ; ) VAR_1 ( commit ; ) id ( METHOD_2 . VAR_1 { ) ) ( METHOD_1 . ) ( getStatus . ) ( getChange . cd ( if { try ; ) ( toString . ) ( getId . cd = id java.lang.String { java.io.IOException throws ) cd com.google.gerrit.server.query.change.ChangeData ( delete void public 
public TYPE_1 METHOD_1 ( TYPE_1 . Factory VAR_1 ) { TYPE_2 . METHOD_2 ( ( ( db ) ! = null ) , STRING_1 ) ; if ( ( update ) == null ) { update = VAR_1 . create ( db , METHOD_3 ( ) , VAR_2 , VAR_3 ) . METHOD_4 ( repo , rw , VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 . create ( ) ) ; } return update ; } } ; update return } ; ) ) ( create . VAR_6 ( METHOD_6 . ) VAR_5 ( METHOD_5 . ) VAR_4 , rw , repo ( METHOD_4 . ) VAR_3 , VAR_2 , ) ( METHOD_3 , db ( create . VAR_1 = update { ) null == ) update ( ( if ; ) STRING_1 , ) null = ! ) db ( ( ( METHOD_2 . TYPE_2 { ) VAR_1 Factory . TYPE_1 ( METHOD_1 TYPE_1 public 
public void onSuccess ( final TYPE_1 result ) { VAR_1 . METHOD_1 ( false ) ; final TYPE_2 . Account me = TYPE_3 . METHOD_2 ( ) ; me . METHOD_3 ( VAR_2 ) ; me . METHOD_4 ( VAR_3 ) ; me . METHOD_5 ( info ) ; TYPE_3 . METHOD_6 ( ) ; VAR_4 . display ( me ) ; } } ; ) me ( display . VAR_4 ; ) ( METHOD_6 . TYPE_3 ; ) info ( METHOD_5 . me ; ) VAR_3 ( METHOD_4 . me ; ) VAR_2 ( METHOD_3 . me ; ) ( METHOD_2 . TYPE_3 = me Account . TYPE_2 final ; ) false ( METHOD_1 . VAR_1 { ) result TYPE_1 final ( onSuccess void public 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ; for ( int i = 1 ; i < ( args . length ) ; i ++ ) { VAR_2 = ( VAR_2 + STRING_1 ) + ( args [ i ] ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ] i [ args ( + ) STRING_1 + VAR_2 ( = VAR_2 { ) ++ i ; ) length . args ( < i ; 1 = i int ( for ; ) ( METHOD_3 . VAR_1 = args ] [ java.lang.String ; ) ( METHOD_2 . VAR_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; assertEquals ( ( STRING_4 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_4 ) ) ; assertEquals ( ( STRING_6 + ( STRING_2 + STRING_7 ) ) , METHOD_2 ( STRING_6 ) ) ; assertEquals ( ( STRING_8 + ( STRING_2 + STRING_9 ) ) , METHOD_2 ( STRING_8 ) ) ; assertEquals ( ( STRING_10 + ( STRING_2 + STRING_11 ) ) , METHOD_2 ( STRING_10 ) ) ; } } ; ) ) STRING_10 ( METHOD_2 , ) ) STRING_11 + STRING_2 ( + STRING_10 ( ( assertEquals ; ) ) STRING_8 ( METHOD_2 , ) ) STRING_9 + STRING_2 ( + STRING_8 ( ( assertEquals ; ) ) STRING_6 ( METHOD_2 , ) ) STRING_7 + STRING_2 ( + STRING_6 ( ( assertEquals ; ) ) STRING_4 ( METHOD_2 , ) ) STRING_5 + STRING_2 ( + STRING_4 ( ( assertEquals ; ) ) STRING_1 ( METHOD_2 , ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { METHOD_2 ( ) ; } else { final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_3 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ) { METHOD_2 ( ) ; } } } ; for ( final TYPE_3 p : VAR_1 ) { p . METHOD_3 ( VAR_2 ) ; } } } } } } ; ) VAR_2 ( METHOD_3 . p { ) VAR_1 : p TYPE_3 final ( for ; } } } ; ) ( METHOD_2 { ) ) ) ( size . VAR_1 ( == ) ) VAR_3 ( ++ ( ( if { ) result TYPE_2 final ( onSuccess void public ; VAR_3 int private { ) ( > TYPE_2 < TYPE_1 new = VAR_2 > TYPE_2 < TYPE_1 final { else } ; ) ( METHOD_2 { ) ) ( isEmpty . VAR_1 ( if { ) ( METHOD_1 void private 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; } } ) ; rpc ( VAR_4 class ) ; rpc ( VAR_5 class ) ; } } ; ) class VAR_5 ( rpc ; ) class VAR_4 ( rpc ; ) } } ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_2 void protected { ) ( TYPE_1 new ( install { ) ( METHOD_1 void protected 
protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) throws TYPE_5 , TYPE_6 { return VAR_2 . apply ( VAR_1 , rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; } } ; ) null , ) ( currentPatchSetId . ) ( getChange . rsrc , ) ( getChange . rsrc , ) ( METHOD_3 . ) ( METHOD_2 . rsrc , VAR_1 ( apply . VAR_2 return { TYPE_6 , TYPE_5 throws ) input TYPE_4 , rsrc TYPE_3 , VAR_1 Factory . TYPE_2 ( METHOD_1 > ? < TYPE_1 protected 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1 . Change change ) { TYPE_2 . NameKey name = change . getProject ( ) ; try { return VAR_1 . METHOD_1 ( name . get ( ) ) ; } catch ( TYPE_3 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } } } ; null return ; ) err , ) ) ) ( get . name ( + STRING_1 ( ( METHOD_2 . VAR_2 { ) err TYPE_3 ( catch } ; ) ) ( get . name ( METHOD_1 . VAR_1 return { try ; ) ( getProject . change = name NameKey . TYPE_2 { ) change Change . TYPE_1 final ( METHOD_1 org.eclipse.jgit.lib.Repository private 
public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : TYPE_4 . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) { VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) VAR_2 , ) ( METHOD_5 . VAR_2 ( put . VAR_1 { ) ) ) VAR_3 ( METHOD_4 . ) ( METHOD_3 . ) ( get . db ( METHOD_2 . TYPE_4 : VAR_2 PatchSetApproval . com.google.gerrit.reviewdb.client ( for ; ) ( create . TYPE_3 = VAR_1 { ) null == ) VAR_1 ( ( if { com.google.gwtorm.server.OrmException throws ) db > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_2 ( METHOD_1 > PatchSetApproval . com.google.gerrit.reviewdb.client , com.google.gerrit.reviewdb.client.PatchSet.Id < TYPE_1 public 
private int METHOD_1 ( TYPE_1 cm , int line , int VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { cm . METHOD_2 ( ( line + i ) , VAR_2 , VAR_3 . diff ( ) ) ; } return line + VAR_1 ; } } ; VAR_1 + line return } ; ) ) ( diff . VAR_3 , VAR_2 , ) i + line ( ( METHOD_2 . cm { ) ++ i ; VAR_1 < i ; 0 = i int ( for { ) VAR_1 int , line int , cm TYPE_1 ( METHOD_1 int private 
public void onSuccess ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_1 . METHOD_1 ( STRING_1 ) ; display ( VAR_3 , VAR_4 . METHOD_2 ( ) , ( ( VAR_5 . METHOD_3 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_4 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_5 ( ) ) || VAR_2 ) ) ; } } ; ) ) VAR_2 || ) ) ( METHOD_5 . VAR_5 ( ( , ) VAR_2 || ) ) ( METHOD_4 . VAR_5 ( ( , ) VAR_2 || ) ) ( METHOD_3 . VAR_5 ( ( , ) ( METHOD_2 . VAR_4 , VAR_3 ( display ; ) STRING_1 ( METHOD_1 . VAR_1 = VAR_2 boolean { ) VAR_1 TYPE_1 ( onSuccess void public 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 ! = null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } } ; ) CHAR_3 ( append . VAR_1 } } ; ) VAR_6 ( append . VAR_1 { else } ; ) VAR_4 , VAR_1 ( METHOD_1 . VAR_5 { ) null = ! VAR_4 ( if } ; ) CHAR_2 ( append . VAR_1 { else } ; false = VAR_3 { ) VAR_3 ( if { ) VAR_2 : VAR_4 TYPE_2 final ( for ; true = VAR_3 boolean ; ) CHAR_1 ( append . VAR_1 { ) VAR_2 > TYPE_2 < java.util.Set final , VAR_1 TYPE_1 final ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { TYPE_2 c = METHOD_2 ( branch ) ; if ( c ! = null ) { ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) ; METHOD_5 ( branch , c ) ; } } } } ; ) c , branch ( METHOD_5 ; ) ) ) ( get . branch , c , ) 0 ( METHOD_4 . c ( ReceiveCommand . TYPE_3 new ( METHOD_3 . ctx { ) null = ! c ( if ; ) branch ( METHOD_2 = c TYPE_2 { java.lang.Exception throws ) ctx TYPE_1 ( METHOD_1 void public 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; result . METHOD_4 ( p ) ; TYPE_6 . METHOD_5 ( p ) ; } } ) ; close ( ) ; } } ; ) ( close ; ) } } ; ) p ( METHOD_5 . TYPE_6 ; ) p ( METHOD_4 . result ; ) ( METHOD_3 . TYPE_6 = p TYPE_5 { ) result TYPE_4 ( onSuccess void public { ) ( > TYPE_4 < TYPE_3 new , VAR_1 ( METHOD_2 . TYPE_2 { ) e TYPE_1 ( METHOD_1 void 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) & & ( ! ( METHOD_8 ( db ) ) ) ; } } ; ) ) ) db ( METHOD_8 ( ! ( & & ) ) ) ( METHOD_1 . ) ( METHOD_3 ( || ) ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 ( || ) ) ) ( METHOD_2 . ) ( METHOD_4 ( || ) ) ) ( METHOD_2 . ) ( METHOD_3 ( || ) ) ( METHOD_2 ( ( ( ( ( return { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 schema = METHOD_2 ( ) ; METHOD_3 ( schema . METHOD_4 ( ) ) ; assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ; assertEquals ( 1 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) ( METHOD_4 . schema , 1 ( assertEquals ; ) ) ( METHOD_5 . ) ( METHOD_4 . schema , STRING_1 ( assertEquals ; ) ) ( METHOD_4 . schema ( METHOD_3 ; ) ( METHOD_2 = schema TYPE_1 final { java.lang.Exception throws ) ( METHOD_1 void public 
protected TYPE_1 . Result METHOD_1 ( java.lang.String changeId ) throws java.io.IOException , TYPE_2 { java.util.Collections . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ; return VAR_2 . to ( git , STRING_1 ) ; } } ; ) STRING_1 , git ( to . VAR_2 return ; ) changeId , ) ) VAR_1 ( METHOD_4 . TYPE_4 ( java.lang.String new , VAR_5 , VAR_4 , ) ( METHOD_3 . admin , db ( create . VAR_3 = VAR_2 TYPE_3 ; ) VAR_1 ( METHOD_2 . java.util.Collections { TYPE_2 , java.io.IOException throws ) changeId java.lang.String ( METHOD_1 Result . TYPE_1 protected 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 1 ) ) , in . METHOD_6 ( 0 ) ) , out . METHOD_7 ( ) ) ; } } ; ) ) ( METHOD_7 . out , ) ) 0 ( METHOD_6 . in , ) ) 1 ( METHOD_6 . in ( query ( of . TYPE_2 ( assertEquals ; ) ) ( METHOD_5 . out , class VAR_1 ( METHOD_4 ; ) in ( METHOD_3 = out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) STRING_1 ( METHOD_2 = in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void run ( ) throws TYPE_1 { try { TYPE_2 in = new TYPE_2 ( ) ; in . revision = revision ; VAR_1 . projects ( ) . name ( project . getProject ( ) . METHOD_1 ( ) . get ( ) ) . branch ( name ) . create ( in ) ; } catch ( TYPE_3 e ) { throw METHOD_2 ( e ) ; } } } } ; ) e ( METHOD_2 throw { ) e TYPE_3 ( catch } ; ) in ( create . ) name ( branch . ) ) ( get . ) ( METHOD_1 . ) ( getProject . project ( name . ) ( projects . VAR_1 ; revision = revision . in ; ) ( TYPE_2 new = in TYPE_2 { try { TYPE_1 throws ) ( run void protected 
protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 < TYPE_4 . ReviewDb > VAR_2 = VAR_1 . METHOD_3 ( ) ; final TYPE_5 VAR_3 = VAR_1 . METHOD_4 ( ) ; final TYPE_6 config = VAR_1 . METHOD_5 ( ) ; return new TYPE_7 ( VAR_2 , VAR_3 , config ) ; } } ; ) config , VAR_3 , VAR_2 ( TYPE_7 new return ; ) ( METHOD_5 . VAR_1 = config TYPE_6 final ; ) ( METHOD_4 . VAR_1 = VAR_3 TYPE_5 final ; ) ( METHOD_3 . VAR_1 = VAR_2 > ReviewDb . TYPE_4 < TYPE_3 final ; ) ( METHOD_2 . TYPE_2 = VAR_1 TYPE_2 final { java.lang.Exception throws ) ( METHOD_1 TYPE_1 protected 
private TYPE_1 METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_1 . error ( err ) ; } } } } ; ) err ( error . TYPE_1 return { else } ; ) ( METHOD_2 . TYPE_2 return } ; ) e , err ( error . VAR_2 { else } ; ) err ( error . VAR_2 { ) null == e ( if { ) VAR_1 ( if { ) e java.lang.Exception , err java.lang.String ( METHOD_1 TYPE_1 private 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( new TYPE_3 ( ) ) ; modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ; if ( ( VAR_5 ) == ( VAR_6 ) ) { modules.add ( new TYPE_5 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } } ; ) modules ( METHOD_3 . VAR_1 return } ; ) ) ( TYPE_5 new ( modules.add { ) ) VAR_6 ( == ) VAR_5 ( ( if ; ) ) ) class VAR_4 ( METHOD_2 . VAR_1 , ) class VAR_3 ( METHOD_2 . VAR_1 , false ( TYPE_4 new ( modules.add ; ) ) ( TYPE_3 new ( modules.add ; ) ) class VAR_2 ( METHOD_2 . VAR_1 ( modules.add ; ) ( > < java.util.ArrayList new = modules > TYPE_2 < java.util.List final { ) ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( final TYPE_1 VAR_1 , final short VAR_2 , final short VAR_3 ) { final int n = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( TYPE_2 . METHOD_3 ( VAR_1 . getValue ( i ) ) ) == VAR_3 ) { VAR_1 . METHOD_4 ( i ) ; return ; } } if ( VAR_3 ! = VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_2 , VAR_1 ( METHOD_1 { ) VAR_2 = ! VAR_3 ( if } } ; return ; ) i ( METHOD_4 . VAR_1 { ) VAR_3 == ) ) ) i ( getValue . VAR_1 ( METHOD_3 . TYPE_2 ( ( if { ) ++ i ; n < i ; 0 = i int ( for ; ) ( METHOD_2 . VAR_1 = n int final { ) VAR_3 short final , VAR_2 short final , VAR_1 TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) STRING_7 + ) STRING_6 + ) ) ) STRING_5 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_4 ( METHOD_5 . TYPE_2 ( + ) STRING_3 + STRING_2 ( ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) & & ( user . METHOD_3 ( ) . METHOD_4 ( ) ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } } } ; ) ) VAR_2 ( submit . VAR_4 ( set . VAR_3 { else } ; ) ( METHOD_5 . ) ) ( toString . VAR_2 , VAR_2 ( TYPE_3 new { ) ) ) ( METHOD_4 . ) ( METHOD_3 . user ( & & ) ) ( METHOD_2 ( ( if ; ) VAR_1 ( TYPE_2 new = VAR_2 TYPE_2 final { ) VAR_1 TYPE_1 final ( METHOD_1 void protected 
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { TYPE_1 msg = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( rsrc . getChange ( ) . getId ( ) ) . METHOD_7 ( ) ) , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . METHOD_8 ( ) ) == null ; } } ) , null ) ; return msg ; } } ; msg return ; ) null , ) } } ; null == ) ) ( METHOD_8 . input ( return { ) input TYPE_1 ( apply boolean public { ) ( > TYPE_1 < TYPE_5 new , ) ) ( METHOD_7 . ) ) ( getId . ) ( getChange . rsrc ( METHOD_6 . ) ( METHOD_5 . ) ( get . VAR_1 ( METHOD_4 . TYPE_4 ( METHOD_3 . TYPE_3 ( METHOD_2 . TYPE_3 = msg TYPE_1 { com.google.gwtorm.server.OrmException throws ) rsrc TYPE_2 ( METHOD_1 TYPE_1 public 
private void METHOD_1 ( final org.eclipse.jgit.lib.Repository VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) ) { throw new TYPE_1 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) ; } METHOD_6 ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( METHOD_6 } ; ) ) ) ) ( METHOD_5 . ) ( METHOD_2 . VAR_1 ( + STRING_1 ( ( TYPE_1 new throw { ) ) ) ) ( METHOD_2 . VAR_1 ( METHOD_4 ( ! ( if ; ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 = VAR_2 TYPE_2 { TYPE_1 throws ) VAR_1 org.eclipse.jgit.lib.Repository final ( METHOD_1 void private 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; try { TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_4 ( ) ; return VAR_4 . getValue ( VAR_5 ) ; } finally { VAR_2 . close ( ) ; } } } } ; ) ( close . VAR_2 { finally } ; ) VAR_5 ( getValue . VAR_4 return ; ) ( METHOD_4 . VAR_3 = VAR_4 TYPE_4 ; ) ( METHOD_3 . VAR_2 = VAR_3 TYPE_3 { try ; ) ) ( METHOD_2 . VAR_1 ( TYPE_2 new = VAR_2 TYPE_2 { java.io.IOException throws ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String static private 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) & & ( VAR_4 ) ) { TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 ) ; VAR_7 . set ( VAR_8 . create ( null , VAR_5 ) . METHOD_3 ( INT_1 , VAR_9 ) ) ; } } } } ; ) ) VAR_9 , INT_1 ( METHOD_3 . ) VAR_5 , null ( create . VAR_8 ( set . VAR_7 ; ) VAR_6 ( TYPE_1 new = VAR_5 TYPE_1 { ) ) VAR_4 ( & & ) ) VAR_3 ( == ) ) ( METHOD_2 . VAR_2 ( ( ( if ; ) ( METHOD_1 . VAR_1 { ) ( METHOD_1 void public 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } } ; ) STRING_1 ( METHOD_3 . TYPE_1 return ; ) ) ( getChange . rsrc , ) ( getProject . rsrc , ) ( getAccountId . ) ( get . VAR_2 ( METHOD_4 . VAR_1 } ; ) STRING_1 ( METHOD_3 . TYPE_1 return { ) ) ) ) ) ( getChange . rsrc ( METHOD_2 ( ! ( || ) ) ( METHOD_1 . rsrc ( ( if { com.google.gwtorm.server.OrmException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > java.lang.String < TYPE_1 public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) . METHOD_2 ( ) ) & & ( ! ( METHOD_3 ( db , cd ) ) ) ) { return false ; } if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) & & ( ! ( METHOD_4 ( db , cd ) ) ) ) { return false ; } return METHOD_5 ( ) . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . ) ( METHOD_5 return } ; false return { ) ) ) ) cd , db ( METHOD_4 ( ! ( & & ) ) VAR_1 ( == ) ) ( getStatus . ) ( getChange ( ( ( if } ; false return { ) ) ) ) cd , db ( METHOD_3 ( ! ( & & ) ) ( METHOD_2 . ) ( getChange ( ( if { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
private static TYPE_1 type ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_1 . METHOD_1 ( VAR_2 ) ) ! = null ) { return VAR_1 . METHOD_1 ( VAR_2 ) ; } for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) { return VAR_3 ; } } return null ; } } ; null return } } ; VAR_3 return { ) ) ) ( getName . VAR_3 ( METHOD_3 . VAR_2 ( if { ) ) ( METHOD_2 . VAR_1 : VAR_3 TYPE_1 ( for } ; ) VAR_2 ( METHOD_1 . VAR_1 return { ) null = ! ) ) VAR_2 ( METHOD_1 . VAR_1 ( ( if { ) VAR_2 java.lang.String , VAR_1 TYPE_2 ( type TYPE_1 static private 
public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String name ) { java.lang.String [ ] VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , name ) ; if ( VAR_3 ! = null ) { return VAR_3 ; } return super . METHOD_1 ( VAR_1 , VAR_2 , name ) ; } } ; ) name , VAR_2 , VAR_1 ( METHOD_1 . super return } ; VAR_3 return { ) null = ! VAR_3 ( if ; ) name , VAR_2 , VAR_1 ( METHOD_2 . VAR_4 = VAR_3 ] [ java.lang.String { ) name java.lang.String , VAR_2 java.lang.String , VAR_1 java.lang.String ( METHOD_1 ] [ java.lang.String public 
protected void METHOD_1 ( ) { file . set ( id , VAR_1 ) ; file . METHOD_2 ( VAR_2 ) ; file . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( false ) ; TYPE_1 . get ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_1 . METHOD_6 ( true ) ; } } ) ; } } ; ) } } ; ) true ( METHOD_6 . VAR_1 { ) ( METHOD_5 void public { ) ( TYPE_2 new ( METHOD_4 . ) ( get . TYPE_1 ; ) false ( METHOD_3 . VAR_4 ; ) VAR_3 ( METHOD_2 . VAR_1 ; ) ) ( isEmpty . VAR_2 ( METHOD_3 . file ; ) VAR_2 ( METHOD_2 . file ; ) VAR_1 , id ( set . file { ) ( METHOD_1 void protected 
private boolean METHOD_1 ( TYPE_1 . Change c ) throws TYPE_2 . OrmException { final TYPE_3 commit = VAR_1 . get ( c . getId ( ) ) ; final TYPE_4 s = ( commit ! = null ) ? VAR_2 : null ; boolean VAR_3 = false ; if ( ( s ! = null ) & & ( ( ( s . equals ( VAR_4 ) ) || ( s . equals ( VAR_5 ) ) ) || ( s . equals ( VAR_6 ) ) ) ) { VAR_3 = true ; } return VAR_3 ; } } ; VAR_3 return } ; true = VAR_3 { ) ) ) ) VAR_6 ( equals . s ( || ) ) ) VAR_5 ( equals . s ( || ) ) VAR_4 ( equals . s ( ( ( & & ) null = ! s ( ( if ; false = VAR_3 boolean ; null : VAR_2 ? ) null = ! commit ( = s TYPE_4 final ; ) ) ( getId . c ( get . VAR_1 = commit TYPE_3 final { OrmException . TYPE_2 throws ) c Change . TYPE_1 ( METHOD_1 boolean private 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name , java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( name . get ( ) ) ; if ( VAR_4 ! = null ) { TYPE_2 VAR_6 = VAR_7 ; if ( VAR_6 ! = null ) { TYPE_3 VAR_8 = VAR_6 . METHOD_3 ( ) ; if ( VAR_8 ! = null ) { VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } } } } } } } } ; ) VAR_3 , VAR_2 , VAR_1 ( METHOD_1 . VAR_8 { ) null = ! VAR_8 ( if ; ) ( METHOD_3 . VAR_6 = VAR_8 TYPE_3 { ) null = ! VAR_6 ( if ; VAR_7 = VAR_6 TYPE_2 { ) null = ! VAR_4 ( if ; ) ) ( get . name ( METHOD_2 . VAR_5 = VAR_4 TYPE_1 { ) VAR_3 org.eclipse.jgit.lib.ObjectId , VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 java.lang.String , name com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 { final TYPE_5 group = VAR_3 . get ( VAR_2 ) ; if ( group == null ) { throw new TYPE_4 ( VAR_2 ) ; } return new TYPE_1 ( VAR_1 , group ) ; } } ; ) group , VAR_1 ( TYPE_1 new return } ; ) VAR_2 ( TYPE_4 new throw { ) null == group ( if ; ) VAR_2 ( get . VAR_3 = group TYPE_5 final { TYPE_4 throws ) VAR_2 TYPE_3 final , VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 public 
private void status ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; VAR_3 . append ( VAR_4 ) ; VAR_3 . append ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) ) ; METHOD_1 ( VAR_6 , VAR_3 . toString ( ) ) ; } else if ( METHOD_2 ( VAR_6 ) ) { METHOD_1 ( VAR_6 , null ) ; } } } } ; ) null , VAR_6 ( METHOD_1 { ) ) VAR_6 ( METHOD_2 ( if else } ; ) ) ( toString . VAR_3 , VAR_6 ( METHOD_1 ; ) ) STRING_2 + ) ) VAR_5 ( + STRING_1 ( ( ( append . VAR_3 ; ) VAR_4 ( append . VAR_3 ; ) ( java.lang.StringBuilder new = VAR_3 java.lang.StringBuilder { ) ) VAR_2 ( == VAR_1 ( if { ) VAR_1 int ( status void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; long VAR_2 = ( VAR_1 . METHOD_3 ( ) ) + 1 ; TYPE_2 result = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 , VAR_1 . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_3 . METHOD_7 ( STRING_1 ) , result . METHOD_8 ( ) ) ; } } ; ) ) ( METHOD_8 . result , ) STRING_1 ( METHOD_7 . TYPE_3 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_6 . VAR_1 , VAR_2 , ) ( METHOD_5 . VAR_1 ( METHOD_4 . VAR_3 = result TYPE_2 ; 1 + ) ) ( METHOD_3 . VAR_1 ( = VAR_2 long ; ) ( METHOD_2 . TYPE_1 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id ! = null ) ? walk . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 = null ; } } } } ; null = VAR_1 { finally } ; ) ( METHOD_3 ; null : ) id ( parseCommit . walk ? ) null = ! id ( = revision { try ; ) ( METHOD_2 . walk = VAR_1 . this { TYPE_1 , java.io.IOException throws ) id org.eclipse.jgit.lib.ObjectId , walk org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 void public 
TYPE_1 METHOD_1 ( java.lang.String name ) { try { TYPE_2 p = METHOD_2 ( name ) ; return VAR_1 . get ( p , METHOD_3 ( name , p ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) ; return null ; } } } } ; null return ; ) e , ) name , STRING_1 ( java.lang.String.format ( METHOD_4 . VAR_2 { ) e TYPE_3 ( catch } ; ) ) p , name ( METHOD_3 , p ( get . VAR_1 return ; ) name ( METHOD_2 = p TYPE_2 { try { ) name java.lang.String ( METHOD_1 TYPE_1 
void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; TYPE_1 . METHOD_1 ( ( VAR_1 & & ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ) ; TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ; if ( VAR_1 ) { VAR_5 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ; } else { VAR_5 . METHOD_7 ( VAR_6 . METHOD_6 ( ) ) ; } VAR_3 . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . VAR_3 } ; ) ) ( METHOD_6 . VAR_6 ( METHOD_7 . VAR_5 { else } ; ) ) ( METHOD_6 . VAR_6 ( METHOD_5 . VAR_5 { ) VAR_1 ( if ; ) VAR_1 , VAR_4 ( METHOD_4 . TYPE_2 ; ) ) ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_3 ( ! ( & & VAR_1 ( ( METHOD_1 . TYPE_1 ; VAR_1 = VAR_2 { ) VAR_1 boolean ( METHOD_1 void 
private TYPE_1 METHOD_1 ( TYPE_2 . NameKey branch ) throws TYPE_3 { final TYPE_4 p = VAR_1 . get ( branch . getParentKey ( ) ) ; if ( p == null ) { throw new TYPE_3 ( branch . getParentKey ( ) ) ; } return p . METHOD_1 ( ) ; } } ; ) ( METHOD_1 . p return } ; ) ) ( getParentKey . branch ( TYPE_3 new throw { ) null == p ( if ; ) ) ( getParentKey . branch ( get . VAR_1 = p TYPE_4 final { TYPE_3 throws ) branch NameKey . TYPE_2 ( METHOD_1 TYPE_1 private 
private TYPE_1 [ ] METHOD_1 ( TYPE_2 cfg ) { TYPE_1 c = new TYPE_3 ( ) ; c . METHOD_2 ( null ) ; c . METHOD_3 ( cfg . METHOD_4 ( STRING_1 , null , STRING_2 , INT_1 ) ) ; c . METHOD_5 ( false ) ; return new TYPE_1 [ ] { c } ; } } ; } c { ] [ TYPE_1 new return ; ) false ( METHOD_5 . c ; ) ) INT_1 , STRING_2 , null , STRING_1 ( METHOD_4 . cfg ( METHOD_3 . c ; ) null ( METHOD_2 . c ; ) ( TYPE_3 new = c TYPE_1 { ) cfg TYPE_2 ( METHOD_1 ] [ TYPE_1 private 
private void METHOD_1 ( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( db , change . change ( ) , user ( admin ) ) ; com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) . isEmpty ( ) ) . isEqualTo ( VAR_1 ) ; } } ; ) VAR_1 ( isEqualTo . ) ) ( isEmpty . ) VAR_2 ( METHOD_3 . submit ( com.google.common.truth.Truth.assertThat ; ) ) admin ( user , ) ( change . change , db ( METHOD_2 . VAR_3 = VAR_2 TYPE_3 { TYPE_2 , TYPE_1 , java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_1 boolean , change com.google.gerrit.server.query.change.ChangeData ( METHOD_1 void private 
public static void METHOD_1 ( ) { VAR_1 = null ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; for ( final TYPE_2 VAR_4 : VAR_5 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_3 . METHOD_4 ( ) ; if ( ( VAR_6 ) ! = null ) { VAR_6 . METHOD_3 ( ) ; } } } } ; ) ( METHOD_3 . VAR_6 { ) null = ! ) VAR_6 ( ( if ; ) ( METHOD_4 . TYPE_3 } ; ) ( METHOD_3 . VAR_4 { ) VAR_5 : VAR_4 TYPE_2 final ( for ; ) VAR_3 ( METHOD_2 . TYPE_1 ; ) VAR_2 ( METHOD_2 . TYPE_1 ; null = VAR_1 { ) ( METHOD_1 void static public 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( db , TYPE_1 . of ( user . email , admin . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . METHOD_4 ( user . id ) ; } } ; ) id . user ( METHOD_4 . ) reviewers ( com.google.common.truth.Truth.assertThat ; ) ) ( get . ) ) ( get . VAR_3 ( id . ) ( METHOD_3 . VAR_2 , change , project , ) email . admin , email . user ( of . TYPE_1 , db ( METHOD_2 . VAR_1 = reviewers > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( STRING_1 , new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( 1 , res . size ( ) ) ; TYPE_1 d = res . get ( STRING_2 ) ; METHOD_4 ( STRING_3 , d ) ; org.junit.Assert.assertEquals ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , d . name ) ; } } ; ) name . d , ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 . repo ( org.junit.Assert.assertEquals ; ) d , STRING_3 ( METHOD_4 ; ) STRING_2 ( get . res = d TYPE_1 ; ) ) ( size . res , 1 ( org.junit.Assert.assertEquals ; ) ) ( METHOD_3 . } { ) ( > > TYPE_1 , java.lang.String < java.util.Map < TYPE_2 new , STRING_1 ( METHOD_2 = res > TYPE_1 , java.lang.String < java.util.Map { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } } ; ) } } ; true return { ) event TYPE_2 ( METHOD_4 boolean public { ) null , null ( TYPE_1 new ( METHOD_3 . ) class VAR_7 ( bind ; ) VAR_5 ( METHOD_3 . ) class VAR_6 ( bind ; ) class VAR_6 ( METHOD_2 = VAR_5 ; ) VAR_3 ( METHOD_3 . ) class VAR_4 ( bind ; ) class VAR_4 ( METHOD_2 = VAR_3 ; ) VAR_1 ( METHOD_3 . ) class VAR_2 ( bind ; ) class VAR_2 ( METHOD_2 = VAR_1 { ) ( METHOD_1 void protected 
private TYPE_1 METHOD_1 ( final java.lang.String email ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { java.util.List < com.google.gerrit.reviewdb.client.Account > VAR_1 = db . METHOD_3 ( ) . METHOD_1 ( email ) . METHOD_4 ( ) ; return ( VAR_1 . size ( ) ) == 1 ? auth ( VAR_1 . get ( 0 ) ) : null ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) . log ( STRING_1 , e ) ; return null ; } } } } ; null return ; ) e , STRING_1 ( log . ) ( METHOD_5 { ) e com.google.gwtorm.server.OrmException ( catch } } ; ) ( close . db { finally } ; null : ) ) 0 ( get . VAR_1 ( auth ? 1 == ) ) ( size . VAR_1 ( return ; ) ( METHOD_4 . ) email ( METHOD_1 . ) ( METHOD_3 . db = VAR_1 > com.google.gerrit.reviewdb.client.Account < java.util.List { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { try { ) email java.lang.String final ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) { VAR_1 . append ( info . status ( ) ) ; } VAR_1 . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . VAR_1 } ; ) ) ( status . info ( append . VAR_1 { ) ) ) ) ( path . info ( equals . TYPE_4 ( ! ( if ; ) ) ( METHOD_4 . ) ( css . TYPE_3 ( METHOD_3 . ) ( METHOD_2 . VAR_1 { ) info TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , java.io.IOException , TYPE_3 { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ; TYPE_4 out = new TYPE_4 ( VAR_3 ) ; try { git . METHOD_3 ( VAR_1 ) . METHOD_4 ( out ) ; } finally { out . close ( ) ; } return VAR_3 ; } } ; VAR_3 return } ; ) ( close . out { finally } ; ) out ( METHOD_4 . ) VAR_1 ( METHOD_3 . git { try ; ) VAR_3 ( TYPE_4 new = out TYPE_4 ; ) VAR_2 , STRING_2 , STRING_1 ( METHOD_2 . TYPE_1 = VAR_3 TYPE_1 { TYPE_3 , java.io.IOException , TYPE_2 throws ) VAR_2 TYPE_1 , VAR_1 org.eclipse.jgit.lib.ObjectId ( METHOD_1 TYPE_1 private 
private static void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) throws java.io.IOException { try { if ( ! ( path . isEmpty ( ) ) ) { diff . METHOD_2 ( TYPE_3 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } } } ; ) ( METHOD_5 . diff { finally } ; ) VAR_2 , VAR_1 ( format . diff ; ) true ( METHOD_4 . diff ; ) repo ( METHOD_3 . diff } ; ) ) path ( create . TYPE_3 ( METHOD_2 . diff { ) ) ) ( isEmpty . path ( ! ( if { try { java.io.IOException throws ) diff TYPE_2 , path java.lang.String , VAR_2 TYPE_1 , VAR_1 TYPE_1 , repo org.eclipse.jgit.lib.Repository ( METHOD_1 void static private 
private TYPE_1 . ChangeInfo METHOD_1 ( final TYPE_2 . Change VAR_1 , java.util.Map < TYPE_3 . Id , TYPE_4 . Id > VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . ChangeInfo VAR_4 ; if ( VAR_2 == null ) { VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 ) ; } else { VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 , VAR_2 . get ( VAR_1 . getId ( ) ) ) ; } VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 ) ) ; return VAR_4 ; } } ; VAR_4 return ; ) ) VAR_1 ( METHOD_5 ( METHOD_4 . VAR_4 } ; ) ) ) ( getId . VAR_1 ( get . VAR_2 , VAR_1 ( ChangeInfo . TYPE_1 new = VAR_4 { else } ; ) VAR_1 ( ChangeInfo . TYPE_1 new = VAR_4 { ) null == VAR_2 ( if ; VAR_4 ChangeInfo . TYPE_1 ; ) ) ( METHOD_3 . VAR_1 ( METHOD_2 . VAR_3 { ) VAR_2 > Id . TYPE_4 , Id . TYPE_3 < java.util.Map , VAR_1 Change . TYPE_2 final ( METHOD_1 ChangeInfo . TYPE_1 private 
public void METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_5 . format ( null , null , null , null , cfg , VAR_1 ) , VAR_2 ) ; } } ; ) VAR_2 , ) VAR_1 , cfg , null , null , null , null ( format . VAR_5 ( org.junit.Assert.assertEquals ; ) VAR_4 ( + ) STRING_2 + ) VAR_3 ( ( = VAR_2 java.lang.String ; STRING_1 = VAR_1 java.lang.String { java.io.IOException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_10 ( METHOD_7 . ) VAR_9 ( METHOD_6 . ) VAR_8 ( METHOD_6 . ) VAR_7 ( to . ) VAR_6 ( to . ) VAR_3 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_5 ( assertThat ; ) VAR_4 , changeId . VAR_1 , VAR_3 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p , boolean VAR_1 ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = ( VAR_1 ) ? VAR_2 . METHOD_2 ( p ) : VAR_2 . METHOD_3 ( p ) ; TYPE_2 VAR_3 = repo . METHOD_4 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_5 ( ) ) , VAR_3 , new TYPE_3 ( ) , true ) ; } } ; ) true , ) ( TYPE_3 new , VAR_3 , ) ) ( METHOD_5 . VAR_3 ( org.eclipse.jgit.revwalk.RevWalk new , repo ( TYPE_1 new return ; ) ( METHOD_4 . repo = VAR_3 TYPE_2 ; ) p ( METHOD_3 . VAR_2 : ) p ( METHOD_2 . VAR_2 ? ) VAR_1 ( = repo org.eclipse.jgit.lib.Repository { java.io.IOException throws ) VAR_1 boolean , p com.google.gerrit.reviewdb.client.Project.NameKey ( METHOD_1 TYPE_1 private 
public void onSuccess ( TYPE_1 info ) { if ( info . METHOD_1 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) , STRING_1 ) ; } if ( info . METHOD_3 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) , STRING_2 ) ; } if ( info . METHOD_4 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) , STRING_3 ) ; } } } } ; ) STRING_3 , ) ( Factory . TYPE_5 new , VAR_2 ( METHOD_2 . ) ( get . TYPE_2 { ) ) ( METHOD_4 . info ( if } ; ) STRING_2 , ) ( Factory . TYPE_4 new , VAR_1 ( METHOD_2 . ) ( get . TYPE_2 { ) ) ( METHOD_3 . info ( if } ; ) STRING_1 , ) ( Factory . TYPE_3 new , VAR_1 ( METHOD_2 . ) ( get . TYPE_2 { ) ) ( METHOD_1 . info ( if { ) info TYPE_1 ( onSuccess void public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b . isEmpty ( ) ) ; METHOD_3 ( b . METHOD_4 ( ) ) ; assertEquals ( STRING_1 , b . METHOD_5 ( ) ) ; b . append ( STRING_2 ) ; METHOD_2 ( b . METHOD_4 ( ) ) ; assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . b , STRING_2 ( assertEquals ; ) ) ( METHOD_4 . b ( METHOD_2 ; ) STRING_2 ( append . b ; ) ) ( METHOD_5 . b , STRING_1 ( assertEquals ; ) ) ( METHOD_4 . b ( METHOD_3 ; ) ) ( isEmpty . b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 in , TYPE_2 < ? extends TYPE_3 > VAR_1 ) throws java.lang.Exception { { VAR_2 . projects ( ) . create ( in ) ; org.junit.Assert . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; } com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( INT_1 ) ; TYPE_4 VAR_4 ; } } ; VAR_4 TYPE_4 ; ) INT_1 ( METHOD_5 ; ) VAR_1 ( METHOD_4 . ) VAR_3 ( com.google.common.truth.Truth.assertThat } ; ) ) ) ) ( METHOD_3 . VAR_1 ( + STRING_1 ( ( METHOD_2 . org.junit.Assert ; ) in ( create . ) ( projects . VAR_2 { { java.lang.Exception throws ) VAR_1 > TYPE_3 extends ? < TYPE_2 , in TYPE_1 ( METHOD_1 void private 
private final void METHOD_1 ( final TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > patchSets , final com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet patchSet : patchSets ) { db . METHOD_2 ( ) . delete ( db . METHOD_2 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ; db . METHOD_4 ( ) . delete ( db . METHOD_4 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ; db . patchSets ( ) . delete ( java.util.Collections.singleton ( patchSet ) ) ; } } } } ; ) ) patchSet ( java.util.Collections.singleton ( delete . ) ( patchSets . db ; ) ) ) ( getId . patchSet ( METHOD_3 . ) ( METHOD_4 . db ( delete . ) ( METHOD_4 . db ; ) ) ) ( getId . patchSet ( METHOD_3 . ) ( METHOD_2 . db ( delete . ) ( METHOD_2 . db { ) patchSets : patchSet com.google.gerrit.reviewdb.client.PatchSet ( for { com.google.gwtorm.server.OrmException throws ) change com.google.gerrit.reviewdb.client.Change final , patchSets > com.google.gerrit.reviewdb.client.PatchSet < TYPE_1 final ( METHOD_1 void final private 
private TYPE_1 METHOD_1 ( TYPE_2 ... VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; VAR_5 . METHOD_6 ( ) ; return VAR_2 ; } } ; VAR_2 return ; ) ( METHOD_6 . VAR_5 ; ) ) ( METHOD_5 . TYPE_3 ( METHOD_4 . ) STRING_1 ( revision . ) changeId . VAR_2 ( id . ) ( changes . VAR_4 ; ) VAR_3 ( METHOD_3 ; ) VAR_1 ( METHOD_2 = VAR_2 TYPE_1 { java.lang.Exception throws ) VAR_1 ... TYPE_2 ( METHOD_1 TYPE_1 private 
public java.lang.String toString ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_1 ( user ) ; if ( ( VAR_1 . METHOD_2 ( CHAR_1 ) ) < 0 ) { return ( ( VAR_2 ) + STRING_1 ) + VAR_1 ; } else { return ( ( ( VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; } } } } ; STRING_3 + ) VAR_1 + ) STRING_2 + ) VAR_2 ( ( ( return { else } ; VAR_1 + ) STRING_1 + ) VAR_2 ( ( return { ) 0 < ) ) CHAR_1 ( METHOD_2 . VAR_1 ( ( if ; ) user ( METHOD_1 . TYPE_1 = VAR_1 java.lang.String { ) ( toString java.lang.String public 
private void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { TYPE_3 VAR_1 = METHOD_2 ( req ) ; res . METHOD_3 ( VAR_2 ) ; res . METHOD_4 ( STRING_1 ) ; res . METHOD_5 ( ( ( int ) ( VAR_1 . length ( ) ) ) ) ; TYPE_4 out = res . METHOD_6 ( ) ; TYPE_5 in = new TYPE_6 ( VAR_1 ) ; try { TYPE_7 . METHOD_7 ( in , out ) ; } finally { in . close ( ) ; } } } } ; ) ( close . in { finally } ; ) out , in ( METHOD_7 . TYPE_7 { try ; ) VAR_1 ( TYPE_6 new = in TYPE_5 ; ) ( METHOD_6 . res = out TYPE_4 ; ) ) ) ) ( length . VAR_1 ( ) int ( ( ( METHOD_5 . res ; ) STRING_1 ( METHOD_4 . res ; ) VAR_2 ( METHOD_3 . res ; ) req ( METHOD_2 = VAR_1 TYPE_3 { java.io.IOException throws ) res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { final java.lang.StringBuilder url = new java.lang.StringBuilder ( ) ; url . append ( req . METHOD_2 ( ) ) ; url . append ( CHAR_1 ) ; url . append ( CHAR_2 ) ; url . append ( VAR_1 ) ; rsp . METHOD_3 ( url . toString ( ) ) ; } } ; ) ) ( toString . url ( METHOD_3 . rsp ; ) VAR_1 ( append . url ; ) CHAR_2 ( append . url ; ) CHAR_1 ( append . url ; ) ) ( METHOD_2 . req ( append . url ; ) ( java.lang.StringBuilder new = url java.lang.StringBuilder final { java.io.IOException throws ) rsp HttpServletResponse . TYPE_2 final , req TYPE_1 final , VAR_1 java.lang.String final ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ( VAR_2 ) ! = null ) , STRING_1 ) ; int VAR_3 = ( VAR_2 . isEmpty ( ) ) ? 1 : ( VAR_2 . size ( ) ) + 1 ; TYPE_1 . Id VAR_4 = new TYPE_1 . Id ( VAR_5 , VAR_3 ) ; TYPE_1 key = new TYPE_3 ( ) . create ( VAR_4 , VAR_1 ) ; VAR_2 . add ( TYPE_4 . of ( key ) ) ; return key ; } } ; key return ; ) ) key ( of . TYPE_4 ( add . VAR_2 ; ) VAR_1 , VAR_4 ( create . ) ( TYPE_3 new = key TYPE_1 ; ) VAR_3 , VAR_5 ( Id . TYPE_1 new = VAR_4 Id . TYPE_1 ; 1 + ) ) ( size . VAR_2 ( : 1 ? ) ) ( isEmpty . VAR_2 ( = VAR_3 int ; ) STRING_1 , ) null = ! ) VAR_2 ( ( ( METHOD_2 . TYPE_2 { ) VAR_1 java.lang.String ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_5 ) . METHOD_6 ( ) ) ; METHOD_7 ( STRING_6 , u . METHOD_5 ( STRING_7 ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) STRING_7 ( METHOD_5 . u , STRING_6 ( METHOD_7 ; ) ) ( METHOD_6 . ) STRING_5 ( METHOD_5 . u , STRING_3 ( METHOD_4 ; ) ) ( METHOD_6 . ) STRING_4 ( METHOD_5 . u , STRING_3 ( METHOD_4 ; ) ( user = u TYPE_1 ; ) STRING_2 , VAR_3 , VAR_2 , VAR_4 ( METHOD_2 ; ) true ( METHOD_3 . ) STRING_1 , VAR_3 , VAR_2 , VAR_4 ( METHOD_2 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( VAR_2 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_5 ( ) ; } com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) ) ) ) ( METHOD_6 . VAR_1 ( ) > ? < TYPE_1 ( ( ( com.google.common.truth.Truth.assertThat } ; ) ( METHOD_5 . ) repo ( com.google.common.truth.Truth.assertThat { ) ) VAR_2 ( METHOD_4 . VAR_1 = repo org.eclipse.jgit.lib.Repository ( try ; ) STRING_1 ( com.google.gerrit.reviewdb.client.Project.NameKey new = VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey ; ) STRING_1 , ) ( METHOD_3 . VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 ) ; java.lang.String master = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ; METHOD_3 ( STRING_1 ) ; METHOD_5 ( user ) ; TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_3 , STRING_4 , false ) , TYPE_3 . branch ( STRING_2 , master , false ) ) , METHOD_7 ( ) . get ( ) ) ; } } ; ) ) ( get . ) ( METHOD_7 , ) ) false , master , STRING_2 ( branch . TYPE_3 , ) false , STRING_4 , STRING_3 ( branch . TYPE_3 ( of . TYPE_2 ( METHOD_6 . TYPE_1 ; ) user ( METHOD_5 ; ) STRING_1 ( METHOD_3 ; ) ( name . ) ( METHOD_4 . ) STRING_2 ( METHOD_3 = master java.lang.String ; ) STRING_1 , project ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 . Result r , int VAR_1 ) throws java.lang.Exception { TYPE_2 . ChangeInfo c = get ( r . getChangeId ( ) , VAR_2 ) ; TYPE_3 VAR_3 = VAR_4 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( 1 , VAR_5 . size ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_5 . get ( 0 ) . name ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( 0 ) . value . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . value . ) 0 ( get . VAR_5 , VAR_1 ( org.junit.Assert.assertEquals ; ) name . ) 0 ( get . VAR_5 , STRING_2 ( org.junit.Assert.assertEquals ; ) ) ( size . VAR_5 , 1 ( org.junit.Assert.assertEquals ; ) STRING_1 ( get . VAR_4 = VAR_3 TYPE_3 ; ) VAR_2 , ) ( getChangeId . r ( get = c ChangeInfo . TYPE_2 { java.lang.Exception throws ) VAR_1 int , r Result . TYPE_1 ( METHOD_1 void private 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) STRING_6 + ) ) ) STRING_5 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_4 ( METHOD_5 . TYPE_2 ( + ) STRING_3 + STRING_2 ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { for ( TYPE_3 VAR_3 : VAR_2 ) { if ( ( VAR_4 ) == ( TYPE_4 . METHOD_2 ( VAR_5 ) ) ) { if ( ( VAR_6 ) == null ) { VAR_6 = new java.util.ArrayList < > ( ) ; } VAR_6 . add ( METHOD_3 ( VAR_3 ) ) ; } } } } } } ; ) ) VAR_3 ( METHOD_3 ( add . VAR_6 } ; ) ( > < java.util.ArrayList new = VAR_6 { ) null == ) VAR_6 ( ( if { ) ) ) VAR_5 ( METHOD_2 . TYPE_4 ( == ) VAR_4 ( ( if { ) VAR_2 : VAR_3 TYPE_3 ( for { ) VAR_2 > TYPE_3 < TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public void run ( ) { int VAR_1 = ( TYPE_1 . METHOD_1 ( ) ) - ( ( TYPE_2 . METHOD_2 ( ) ) + INT_1 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( diff ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; if ( VAR_6 . METHOD_5 ( ) ) { VAR_4 . METHOD_6 ( true ) ; } VAR_7 . METHOD_4 ( VAR_6 . METHOD_7 ( ) , diff ) ; } } ; ) diff , ) ( METHOD_7 . VAR_6 ( METHOD_4 . VAR_7 } ; ) true ( METHOD_6 . VAR_4 { ) ) ( METHOD_5 . VAR_6 ( if ; ) VAR_5 ( METHOD_4 . VAR_4 ; ) diff ( METHOD_4 ; ) VAR_1 ( METHOD_3 . VAR_3 ; ) VAR_1 ( METHOD_3 . VAR_2 ; ) INT_1 + ) ) ( METHOD_2 . TYPE_2 ( ( - ) ) ( METHOD_1 . TYPE_1 ( = VAR_1 int { ) ( run void public 
private void METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 ... VAR_3 ) throws java.lang.Exception { java.util.List < TYPE_3 > VAR_4 = new java.util.ArrayList ( ( 1 + ( VAR_3 . length ) ) ) ; VAR_4 . add ( VAR_2 ) ; VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . METHOD_4 ( METHOD_5 ( notes ) , VAR_1 ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_4 ) . METHOD_8 ( ) ; } } ; ) ( METHOD_8 . ) VAR_4 ( METHOD_7 . ) ) ( METHOD_6 . ) VAR_1 , ) notes ( METHOD_5 ( METHOD_4 . VAR_5 ( com.google.common.truth.Truth.assertThat ; ) ) VAR_3 ( METHOD_3 . TYPE_4 ( METHOD_2 . VAR_4 ; ) VAR_2 ( add . VAR_4 ; ) ) ) length . VAR_3 ( + 1 ( ( java.util.ArrayList new = VAR_4 > TYPE_3 < java.util.List { java.lang.Exception throws ) VAR_3 ... TYPE_3 , VAR_2 TYPE_3 , VAR_1 TYPE_2 , notes TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( ) { if ( ( 0 < = ( VAR_1 ) ) & & ( ( VAR_1 ) < ( table . METHOD_2 ( ) ) ) ) { final TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 ! = null ) { METHOD_4 ( VAR_2 ) ; } } } } } } ; ) VAR_2 ( METHOD_4 { ) null = ! VAR_2 ( if ; ) VAR_1 ( METHOD_3 = VAR_2 TYPE_1 final { ) ) ) ) ( METHOD_2 . table ( < ) VAR_1 ( ( & & ) ) VAR_1 ( = < 0 ( ( if { ) ( METHOD_1 void private 
public TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ; VAR_2 . run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref == null ) { VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ; VAR_4 = VAR_5 . get ( ) ; } else { VAR_3 = ref . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_3 ) ; } return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } } ; ) ) ) VAR_6 ( + ) VAR_4 ( ( , VAR_3 , rw , repo ( METHOD_6 return } ; ) VAR_3 ( METHOD_5 = VAR_4 ; ) ( METHOD_4 . ref = VAR_3 { else } ; ) ( get . VAR_5 = VAR_4 ; ) ( METHOD_3 . org.eclipse.jgit.lib.ObjectId = VAR_3 { ) null == ref ( if ; VAR_3 org.eclipse.jgit.lib.ObjectId ; ) ( run . VAR_2 ; ) VAR_1 ( METHOD_2 . repo = ref TYPE_2 { java.lang.Exception throws ) ( METHOD_1 Result . TYPE_1 public 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return ; } TYPE_7 rsp = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , rsp ) ; } } } } ; ) rsp , req ( METHOD_1 . VAR_3 { ) ) rsp , req ( METHOD_3 ( if ; ) ) ) VAR_2 ( ) HttpServletResponse . TYPE_8 ( ( ( TYPE_7 new = rsp TYPE_7 } ; return ; ) VAR_2 , VAR_1 ( METHOD_1 . VAR_3 { ) ) ) req ( METHOD_2 . TYPE_6 ( ! ( if ; ) ) VAR_1 ( ) TYPE_5 ( ( = req TYPE_5 { TYPE_4 , java.io.IOException throws ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } throw new TYPE_8 ( ) ; } } ; ) ( TYPE_8 new throw } ; ) 0 ( get . VAR_3 return { ) 1 == ) ) ( size . VAR_3 ( ( if ; ) in , VAR_1 ( apply . ) ( get . put = VAR_3 > TYPE_1 < java.util.List ; id = VAR_2 ; ) ( TYPE_7 new = in TYPE_7 { com.google.gwtorm.server.OrmException , TYPE_6 , TYPE_5 , TYPE_4 throws ) input TYPE_3 , VAR_1 TYPE_2 ( apply TYPE_1 public 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 a = new TYPE_1 ( VAR_1 , STRING_2 ) ; assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ; } } ; ) ) VAR_1 ( METHOD_4 . a , ) STRING_4 + ) VAR_1 + STRING_3 ( ( ( assertEquals ; ) ) ( METHOD_3 . ) ( METHOD_2 . a , VAR_1 ( assertEquals ; ) STRING_2 , VAR_1 ( TYPE_1 new = a TYPE_1 ; STRING_1 = VAR_1 java.lang.String { ) ( METHOD_1 void public 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } } ; cd return ; ) ) currentPatchSetId , id ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( com.google.gerrit.reviewdb.client.PatchSet new = VAR_1 ; ) id , null , null , null , null , null , null , null , null , null ( com.google.gerrit.server.query.change.ChangeData new = cd com.google.gerrit.server.query.change.ChangeData { ) currentPatchSetId int , id Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 com.google.gerrit.server.query.change.ChangeData static 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } } ; cd return ; ) ) currentPatchSetId , id ( com.google.gerrit.reviewdb.client.PatchSet.Id new ( com.google.gerrit.reviewdb.client.PatchSet new = VAR_1 ; ) id , null , null , null , null , null , null , null , null ( com.google.gerrit.server.query.change.ChangeData new = cd com.google.gerrit.server.query.change.ChangeData { ) currentPatchSetId int , id Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 com.google.gerrit.server.query.change.ChangeData static 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ; db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) ; VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ; } } ; ) ( > TYPE_3 < java.util.ArrayList new = VAR_4 ; ) class VAR_3 , ) p ( TYPE_4 new ( > TYPE_3 < TYPE_2 new = db ; ) ) ) ++ ) VAR_2 ( ( + STRING_3 ( , STRING_2 ( METHOD_2 . p ; ) ) ( getName . class VAR_1 , STRING_1 ( METHOD_2 . p ; ) ( TYPE_1 new = p TYPE_1 final { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( admin . email ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; TYPE_2 VAR_3 = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; TYPE_3 . METHOD_6 ( new TYPE_4 ( admin . id ) , VAR_3 ) ; } } ; ) VAR_3 , ) id . admin ( TYPE_4 new ( METHOD_6 . TYPE_3 ; ) class VAR_4 , ) ( METHOD_5 . r ( METHOD_4 . ) ( METHOD_3 = VAR_3 TYPE_2 ; ) ) ( METHOD_2 . r , VAR_2 ( org.junit.Assert.assertEquals ; ) ) STRING_2 + ) ) email . admin ( + STRING_1 ( ( ( get . VAR_1 = r TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws TYPE_1 , TYPE_2 , java.io.IOException { TYPE_3 < TYPE_4 > edit = VAR_1 . METHOD_2 ( change ) ; if ( edit . METHOD_3 ( ) ) { return edit . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; } throw new TYPE_2 ( change.getId ( ) ) ; } } ; ) ) ( change.getId ( TYPE_2 new throw } ; ) ( METHOD_5 . ) ( METHOD_4 . ) ( get . edit return { ) ) ( METHOD_3 . edit ( if ; ) change ( METHOD_2 . VAR_1 = edit > TYPE_4 < TYPE_3 { java.io.IOException , TYPE_2 , TYPE_1 throws ) ( METHOD_1 org.eclipse.jgit.lib.ObjectId private 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey name , org.eclipse.jgit.lib.Repository VAR_1 , TYPE_2 user , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = factory . create ( name , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( user ) ) ; VAR_3 . METHOD_1 ( ) . METHOD_4 ( VAR_4 ) ; return VAR_3 ; } } ; VAR_3 return ; ) VAR_4 ( METHOD_4 . ) ( METHOD_1 . VAR_3 ; ) ) user ( METHOD_3 ( METHOD_2 . ) ( METHOD_1 . VAR_3 ; ) VAR_2 , VAR_1 , name ( create . factory = VAR_3 TYPE_1 { ) VAR_2 TYPE_3 , user TYPE_2 , VAR_1 org.eclipse.jgit.lib.Repository , name com.google.gerrit.reviewdb.client.Project.NameKey ( create TYPE_1 public 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException , TYPE_1 { java.util.Map < TYPE_2 , byte [ ] > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( new TYPE_2 ( repo . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) , null ) ; return TYPE_4 . METHOD_4 ( repo , STRING_2 , VAR_1 ) ; } } ; ) VAR_1 , STRING_2 , repo ( METHOD_4 . TYPE_4 return ; ) null , ) STRING_1 , ) ( METHOD_3 . ) ( METHOD_2 . repo ( TYPE_2 new ( put . VAR_1 ; ) ( > < TYPE_3 new = VAR_1 > ] [ byte , TYPE_2 < java.util.Map { TYPE_1 , java.io.IOException throws ) ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit private 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 config = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , 1 , 2 ) ; METHOD_3 ( VAR_1 , VAR_3 , ( - 1 ) , 1 ) ; } } ; ) 1 , ) 1 - ( , VAR_3 , VAR_1 ( METHOD_3 ; ) 2 , 1 , VAR_2 , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = config TYPE_2 final ; ) ( create . db { OrmException . TYPE_1 throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) ) ) ; assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) ) ) ; } } ; ) ) ) ) VAR_2 ( + ) ) VAR_1 ( + ) STRING_2 + STRING_1 ( ( ( ( METHOD_2 , ) ) VAR_2 ( + ) ) VAR_1 ( + ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( ( ( assertEquals ; ) ) ) ) VAR_1 ( + ) STRING_2 + STRING_1 ( ( ( METHOD_2 , ) ) VAR_1 ( + ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , repo , commit ) ) ) { throw new TYPE_2 ( ) ; } } } } } } ; ) ( TYPE_2 new throw { ) ) ) commit , repo , ) ( get . db ( METHOD_2 . VAR_1 ( ! ( if ; ) VAR_2 ( parseCommit . rw = commit org.eclipse.jgit.revwalk.RevCommit { ) ) repo ( org.eclipse.jgit.revwalk.RevWalk new = rw org.eclipse.jgit.revwalk.RevWalk ( try { java.io.IOException , TYPE_2 throws ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 TYPE_1 , repo org.eclipse.jgit.lib.Repository ( METHOD_1 void private 
private void METHOD_1 ( java.lang.String msg , TYPE_1 t ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( t ! = null ) { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ; } else { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ; } } } } } } ; ) ) msg + ) STRING_2 + ) ) VAR_2 ( + STRING_1 ( ( ( ( error . VAR_1 { else } ; ) t , ) msg + ) STRING_2 + ) ) VAR_2 ( + STRING_1 ( ( ( ( error . VAR_1 { ) null = ! t ( if { ) ) ( METHOD_2 . VAR_1 ( if { ) t TYPE_1 , msg java.lang.String ( METHOD_1 void private 
public TYPE_1 < TYPE_2 > get ( final TYPE_3 < TYPE_4 > VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_4 key : VAR_1 ) { final TYPE_2 VAR_2 = get ( key ) ; if ( VAR_2 ! = null ) { r . add ( VAR_2 ) ; } } return new TYPE_5 < TYPE_2 > ( r ) ; } } ; ) r ( > TYPE_2 < TYPE_5 new return } } ; ) VAR_2 ( add . r { ) null = ! VAR_2 ( if ; ) key ( get = VAR_2 TYPE_2 final { ) VAR_1 : key TYPE_4 final ( for ; ) ( > TYPE_2 < java.util.ArrayList new = r > TYPE_2 < java.util.ArrayList final { com.google.gwtorm.server.OrmException throws ) VAR_1 > TYPE_4 < TYPE_3 final ( get > TYPE_2 < TYPE_1 public 
private void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 ) { final int n = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( VAR_1 . getValue ( i ) . equals ( VAR_3 ) ) { VAR_1 . METHOD_3 ( i ) ; return ; } } if ( VAR_3 ! = VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ; } } } } ; ) VAR_2 , VAR_2 , VAR_1 ( METHOD_1 { ) VAR_2 = ! VAR_3 ( if } } ; return ; ) i ( METHOD_3 . VAR_1 { ) ) VAR_3 ( equals . ) i ( getValue . VAR_1 ( if { ) ++ i ; n < i ; 0 = i int ( for ; ) ( METHOD_2 . VAR_1 = n int final { ) VAR_3 java.lang.String final , VAR_2 java.lang.String final , VAR_1 TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ; } } ; ) ) ) 0 ( METHOD_5 . ) ( METHOD_4 . TYPE_8 , false ( TYPE_7 new , ) null ( METHOD_3 . ) ) ( METHOD_2 . repo ( TYPE_6 new , ) ( METHOD_2 . repo ( TYPE_5 new = VAR_1 ; ) ) ) STRING_1 ( TYPE_4 new ( TYPE_3 new ( > TYPE_2 < TYPE_1 new = repo { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( id ) ; if ( c == null ) { c = db . changes ( ) . get ( id ) ; } TYPE_2 notes = VAR_2 . METHOD_2 ( c ) ; TYPE_1 ctx = new TYPE_1 ( VAR_3 . METHOD_3 ( notes , user ) , new TYPE_3 ( db ) ) ; if ( VAR_4 . METHOD_4 ( ) ) { ctx . METHOD_5 ( ) . METHOD_6 ( ) ; } return ctx ; } } ; ctx return } ; ) ( METHOD_6 . ) ( METHOD_5 . ctx { ) ) ( METHOD_4 . VAR_4 ( if ; ) ) db ( TYPE_3 new , ) user , notes ( METHOD_3 . VAR_3 ( TYPE_1 new = ctx TYPE_1 ; ) c ( METHOD_2 . VAR_2 = notes TYPE_2 } ; ) id ( get . ) ( changes . db = c { ) null == c ( if ; ) id ( get . VAR_1 = c com.google.gerrit.reviewdb.client.Change { java.lang.Exception throws ) id Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) { if ( ( VAR_1 ) ! = null ) { TYPE_1 . METHOD_2 ( this , VAR_1 ) ; } TYPE_1 . METHOD_3 ( this ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( this ) ) ; TYPE_1 . METHOD_5 ( null ) ; METHOD_6 ( ) ; if ( ( VAR_2 ) ! = null ) { TYPE_4 . set ( VAR_2 ) ; VAR_3 = true ; } else { TYPE_4 . METHOD_7 ( ) ; } } } } ; ) ( METHOD_7 . TYPE_4 { else } ; true = VAR_3 ; ) VAR_2 ( set . TYPE_4 { ) null = ! ) VAR_2 ( ( if ; ) ( METHOD_6 ; ) null ( METHOD_5 . TYPE_1 ; ) ) this ( TYPE_3 new ( METHOD_4 . TYPE_2 ; ) this ( METHOD_3 . TYPE_1 } ; ) VAR_1 , this ( METHOD_2 . TYPE_1 { ) null = ! ) VAR_1 ( ( if { ) ( METHOD_1 void public 
public java.util.List < java.lang.String > METHOD_1 ( ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.String [ ] VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 ! = null ) { for ( java.lang.String VAR_3 : VAR_2 ) { java.lang.String VAR_4 = VAR_3 . METHOD_5 ( 0 , ( ( VAR_3 . length ( ) ) - ( TYPE_3 . length ( ) ) ) ) ; VAR_1 . add ( VAR_4 ) ; } } return VAR_1 ; } } ; VAR_1 return } } ; ) VAR_4 ( add . VAR_1 ; ) ) ) ) ( length . TYPE_3 ( - ) ) ( length . VAR_3 ( ( , 0 ( METHOD_5 . VAR_3 = VAR_4 java.lang.String { ) VAR_2 : VAR_3 java.lang.String ( for { ) null = ! VAR_2 ( if ; ) ( METHOD_4 . ) ( METHOD_3 = VAR_2 ] [ java.lang.String ; ) ( METHOD_2 . TYPE_2 = VAR_1 > java.lang.String < java.util.List { TYPE_1 throws ) ( METHOD_1 > java.lang.String < java.util.List public 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = TYPE_4 . schema ( VAR_2 ) ; if ( schema . METHOD_2 ( VAR_3 ) ) { return query ( TYPE_4 . METHOD_3 ( branch , TYPE_4 . METHOD_4 ( schema , VAR_1 ) ) ) ; } else { return METHOD_1 ( schema , branch , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; } } } } ; ) ) ( METHOD_5 . VAR_4 , VAR_1 , branch , schema ( METHOD_1 return { else } ; ) ) ) VAR_1 , schema ( METHOD_4 . TYPE_4 , branch ( METHOD_3 . TYPE_4 ( query return { ) ) VAR_3 ( METHOD_2 . schema ( if ; ) VAR_2 ( schema . TYPE_4 = schema > com.google.gerrit.server.query.change.ChangeData < TYPE_3 { com.google.gwtorm.server.OrmException throws ) VAR_1 > java.lang.String < java.util.List , branch NameKey . TYPE_2 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 public 
public final void METHOD_1 ( int line ) { int VAR_1 = METHOD_2 ( ) ; if ( ( METHOD_3 ( ( VAR_1 - INT_1 ) ) ) < line ) { METHOD_4 ( ( ( METHOD_5 ( line , STRING_1 ) ) - ( FLOAT_1 * VAR_1 ) ) ) ; } METHOD_6 ( TYPE_1 . create ( line ) ) ; } } ; ) ) line ( create . TYPE_1 ( METHOD_6 } ; ) ) ) VAR_1 * FLOAT_1 ( - ) ) STRING_1 , line ( METHOD_5 ( ( ( METHOD_4 { ) line < ) ) ) INT_1 - VAR_1 ( ( METHOD_3 ( ( if ; ) ( METHOD_2 = VAR_1 int { ) line int ( METHOD_1 void final public 
public void update ( ) throws TYPE_1 { try { schema = VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( VAR_2 , rw , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } finally { if ( ( schema ) ! = null ) { schema . close ( ) ; schema = null ; } } } } } } ; null = schema ; ) ( close . schema { ) null = ! ) schema ( ( if { finally } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) null , ) ( METHOD_4 . ) ( getId . VAR_3 , rw , VAR_2 ( METHOD_3 ; ) ( METHOD_2 ; ) ( METHOD_1 . VAR_1 = schema { try { TYPE_1 throws ) ( update void public 
public static java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Status status ) { if ( status == null ) { return STRING_1 ; } switch ( status ) { case VAR_1 : return TYPE_1 . METHOD_2 ( ) ; case VAR_2 : return TYPE_1 . METHOD_3 ( ) ; case VAR_3 : return TYPE_1 . METHOD_4 ( ) ; case VAR_4 : return TYPE_1 . METHOD_5 ( ) ; case VAR_5 : return TYPE_1 . METHOD_6 ( ) ; default : return status . name ( ) ; } } } } ; ) ( name . status return : default ; ) ( METHOD_6 . TYPE_1 return : VAR_5 case ; ) ( METHOD_5 . TYPE_1 return : VAR_4 case ; ) ( METHOD_4 . TYPE_1 return : VAR_3 case ; ) ( METHOD_3 . TYPE_1 return : VAR_2 case ; ) ( METHOD_2 . TYPE_1 return : VAR_1 case { ) status ( switch } ; STRING_1 return { ) null == status ( if { ) status Status . com.google.gerrit.reviewdb.client.Change final ( METHOD_1 java.lang.String static public 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; rsp . METHOD_3 ( VAR_3 , INT_1 ) ; rsp . METHOD_4 ( VAR_4 , STRING_1 ) ; rsp . METHOD_4 ( VAR_5 , STRING_2 ) ; rsp . METHOD_5 ( STRING_3 ) ; rsp . METHOD_6 ( VAR_2 . length ) ; final TYPE_3 out = rsp . METHOD_7 ( ) ; try { out . METHOD_8 ( VAR_2 ) ; } finally { out . close ( ) ; } } } } ; ) ( close . out { finally } ; ) VAR_2 ( METHOD_8 . out { try ; ) ( METHOD_7 . rsp = out TYPE_3 final ; ) length . VAR_2 ( METHOD_6 . rsp ; ) STRING_3 ( METHOD_5 . rsp ; ) STRING_2 , VAR_5 ( METHOD_4 . rsp ; ) STRING_1 , VAR_4 ( METHOD_4 . rsp ; ) INT_1 , VAR_3 ( METHOD_3 . rsp ; ) ( METHOD_2 . VAR_1 = VAR_2 ] [ byte { java.io.IOException throws ) rsp HttpServletResponse . TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( final TYPE_1 . Id me , final TYPE_2 . ReviewDb db ) { final TYPE_3 c = server . METHOD_2 ( ) ; final TYPE_2 . Account a = TYPE_4 . METHOD_3 ( ) . get ( me , db ) ; if ( ( a ! = null ) & & ( ( a . METHOD_4 ( ) ) ! = null ) ) { c . METHOD_5 ( a . METHOD_4 ( ) ) ; } } } } ; ) ) ( METHOD_4 . a ( METHOD_5 . c { ) ) null = ! ) ) ( METHOD_4 . a ( ( & & ) null = ! a ( ( if ; ) db , me ( get . ) ( METHOD_3 . TYPE_4 = a Account . TYPE_2 final ; ) ( METHOD_2 . server = c TYPE_3 final { ) db ReviewDb . TYPE_2 final , me Id . TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( db , java.util.Collections.singleton ( user . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; } } ; ) ( isEmpty . ) reviewers ( com.google.common.truth.Truth.assertThat ; ) ) ( get . ) ) ( get . VAR_3 ( id . ) ( METHOD_3 . VAR_2 , change , project , ) email . user ( java.util.Collections.singleton , db ( METHOD_2 . VAR_1 = reviewers > com.google.gerrit.reviewdb.client.Account.Id < java.util.Set { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ; VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ; VAR_4 . METHOD_3 ( name , STRING_2 , new java.lang.String [ ] { } ) ; } } ; ) } { ] [ java.lang.String new , STRING_2 , name ( METHOD_3 . VAR_4 ; ) VAR_2 , null , VAR_3 , name ( METHOD_3 . VAR_4 ; ) VAR_3 , name ( METHOD_2 = VAR_2 org.eclipse.jgit.revwalk.RevCommit ; ) name . ) ( get . ) name ( create . ) ( projects . VAR_1 ( isEqualTo . ) name ( com.google.common.truth.Truth.assertThat ; ) STRING_1 ( name = name java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ; try { VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ; } finally { METHOD_5 ( VAR_4 ) ; METHOD_6 ( VAR_2 ) ; } } } } ; ) VAR_2 ( METHOD_6 ; ) VAR_4 ( METHOD_5 { finally } ; ) ) ) ) event , VAR_1 , projectName , STRING_2 ( java.lang.String.format ( + ) ) VAR_8 , VAR_7 , VAR_6 , VAR_5 , STRING_1 ( java.lang.String.format ( ( ( METHOD_4 . VAR_4 { try ; ) ( METHOD_3 . VAR_2 = VAR_4 TYPE_4 ; ) ( METHOD_2 . VAR_3 = VAR_2 TYPE_3 { TYPE_2 throws ) event java.lang.String , VAR_1 TYPE_1 , projectName java.lang.String ( METHOD_1 void public 
private boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) . METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( ( METHOD_6 ( ) ) & & ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; } } } } ; ) ) ( METHOD_8 . VAR_8 ( || ) ) ) ) VAR_7 ( METHOD_7 ( ! ( & & ) ) ( METHOD_6 ( ( return : default : VAR_6 case : VAR_5 case : VAR_4 case : VAR_3 case : VAR_2 case ; false return : VAR_1 case { ) ) ( METHOD_5 . ) ( METHOD_4 ( switch } ; true return { ) ) ( METHOD_3 ( if } ; false return { ) ) ) ( METHOD_2 ( ! ( if { ) ( METHOD_1 boolean private 
protected TYPE_1 METHOD_1 ( ) { switch ( status ) { case VAR_1 : return new TYPE_2 ( project , STRING_1 ) ; case VAR_2 : return new TYPE_3 ( project , STRING_1 ) ; case VAR_3 : case VAR_4 : default : return new TYPE_4 ( project , STRING_1 ) ; } } } } ; ) STRING_1 , project ( TYPE_4 new return : default : VAR_4 case : VAR_3 case ; ) STRING_1 , project ( TYPE_3 new return : VAR_2 case ; ) STRING_1 , project ( TYPE_2 new return : VAR_1 case { ) status ( switch { ) ( METHOD_1 TYPE_1 protected 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) , null ) ; } } ; ) null , ) ( of . TYPE_6 , ) ( of . TYPE_6 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( METHOD_1 . TYPE_5 , ) ( of . TYPE_4 , ) ( of . TYPE_4 , ) ( of . TYPE_3 , ) ( of . TYPE_3 , null , ) ( change.getId , null ( TYPE_2 new return { ) change com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 static 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( db , change ) . METHOD_3 ( db ) ; } } ; ) db ( METHOD_3 . ) change , db ( METHOD_2 . VAR_3 return ; ) user ( METHOD_2 . VAR_1 = VAR_3 TYPE_3 } ; false return { ) null == VAR_1 ( if ; ) ) ( getProject . change ( get . VAR_2 = VAR_1 TYPE_2 { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb , user TYPE_1 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 boolean private 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) throws TYPE_1 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { final org.eclipse.jgit.lib.Repository git ; try { git = VAR_1 . METHOD_2 ( project ) ; } catch ( TYPE_3 e ) { return ; } try { TYPE_4 notes = VAR_2 . create ( db , git ) ; notes . create ( changes , null , STRING_1 , VAR_3 ) ; } finally { git . close ( ) ; } } } } ; ) ( close . git { finally } ; ) VAR_3 , STRING_1 , null , changes ( create . notes ; ) git , db ( create . VAR_2 = notes TYPE_4 { try } ; return { ) e TYPE_3 ( catch } ; ) project ( METHOD_2 . VAR_1 = git { try ; git org.eclipse.jgit.lib.Repository final { TYPE_2 , java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_1 throws ) changes > com.google.gerrit.reviewdb.client.Change < java.util.List , project com.google.gerrit.reviewdb.client.Project.NameKey , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void private 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } } ; ) STRING_1 ( METHOD_3 . TYPE_1 return ; ) rsrc ( METHOD_4 . VAR_1 } ; ) STRING_1 ( METHOD_3 . TYPE_1 return { ) ) ) ) ) ( getChange . rsrc ( METHOD_2 ( ! ( || ) ) ( METHOD_1 . rsrc ( ( if { com.google.gwtorm.server.OrmException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > java.lang.String < TYPE_1 public 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 ) ; try ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , TYPE_7 . METHOD_4 ( ) ) ) { u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ; } return VAR_4 . change ; } } ; change . VAR_4 return } ; ) ( METHOD_6 . ) VAR_4 , ) ( getId . VAR_1 ( METHOD_5 . u { ) ) ) ( METHOD_4 . TYPE_7 , ) ( METHOD_3 . VAR_1 , ) ( METHOD_2 . ) ( getProject . VAR_1 , ) ( get . VAR_6 ( create . VAR_5 = u TYPE_6 ( try ; ) VAR_3 , VAR_2 , VAR_1 ( TYPE_5 new = VAR_4 TYPE_5 { TYPE_4 , TYPE_3 throws ) VAR_3 TYPE_2 , VAR_2 java.lang.String , VAR_1 TYPE_1 ( METHOD_1 com.google.gerrit.reviewdb.client.Change public 
public boolean METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 , int value ) throws TYPE_3 , TYPE_4 { if ( METHOD_2 ( notes , VAR_1 , VAR_2 , value ) ) { return true ; } return VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; } } ; ) VAR_5 ( METHOD_4 . ) VAR_4 ( METHOD_3 . ) notes ( change . ) VAR_1 ( user . VAR_3 return } ; true return { ) ) value , VAR_2 , VAR_1 , notes ( METHOD_2 ( if { TYPE_4 , TYPE_3 throws ) value int , VAR_2 com.google.gerrit.reviewdb.client.Account.Id , VAR_1 TYPE_2 , notes TYPE_1 ( METHOD_1 boolean public 
public TYPE_1 create ( TYPE_2 req , org.eclipse.jgit.lib.Repository repo ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_1 = TYPE_6 . METHOD_1 ( req ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_1 VAR_2 = new TYPE_1 ( repo ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( new TYPE_7 ( repo , VAR_1 , db . get ( ) ) ) ; } return VAR_2 ; } } ; VAR_2 return } ; ) ) ) ( get . db , VAR_1 , repo ( TYPE_7 new ( METHOD_5 . VAR_2 { ) ) ) ( METHOD_4 . VAR_1 ( ! ( if ; ) VAR_3 ( METHOD_3 . VAR_2 ; ) repo ( TYPE_1 new = VAR_2 TYPE_1 } ; ) ( TYPE_3 new throw { ) ) ) ( METHOD_2 . VAR_1 ( ! ( if ; ) req ( METHOD_1 . TYPE_6 = VAR_1 TYPE_5 { TYPE_4 , TYPE_3 throws ) repo org.eclipse.jgit.lib.Repository , req TYPE_2 ( create TYPE_1 public 
public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) { return false ; } if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) > = ( VAR_4 ) ) { METHOD_5 ( VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) ) ; return true ; } return false ; } } ; false return } ; true return ; ) ) ( METHOD_6 . ) ( METHOD_3 . VAR_1 ( METHOD_5 { ) ) VAR_4 ( = > ) ) ( METHOD_4 . ) ( METHOD_3 . VAR_1 ( ( if } ; false return { ) ) ) ( METHOD_2 . cfg ( > VAR_2 ( if { ) VAR_3 TYPE_2 , VAR_2 int , VAR_1 TYPE_1 ( METHOD_1 boolean public 
public void bind ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_1 ( ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( t ) ) ; if ( ( VAR_3 ) > = ( this . VAR_4 ) ) { VAR_5 = this ; if ( ( VAR_3 ) < ( VAR_6 ) ) VAR_1 . METHOD_2 ( VAR_2 ) ; return ; } } VAR_7 = t ; if ( ( VAR_4 ) < ( VAR_6 ) ) VAR_1 . METHOD_2 ( this ) ; } } ; ) this ( METHOD_2 . VAR_1 ) ) VAR_6 ( < ) VAR_4 ( ( if ; t = VAR_7 } } ; return ; ) VAR_2 ( METHOD_2 . VAR_1 ) ) VAR_6 ( < ) VAR_3 ( ( if ; this = VAR_5 { ) ) VAR_4 . this ( = > ) VAR_3 ( ( if ; ) ) t ( ) TYPE_3 ( ( = VAR_2 TYPE_3 { ) ) ( METHOD_1 . t ( if { ) VAR_1 TYPE_2 , t TYPE_1 ( bind void public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 . projects ( ) . create ( in ) ; METHOD_2 ( VAR_1 , STRING_2 ) ; } } ; ) STRING_2 , VAR_1 ( METHOD_2 ; ) in ( create . ) ( projects . VAR_3 ; true = VAR_2 ; VAR_1 = name . in ; ) ( TYPE_1 new = in TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . METHOD_5 ( ) ; return VAR_1 . contains ( METHOD_2 ( ) . getAccountId ( ) ) ; } return false ; } } ; false return } ; ) ) ( getAccountId . ) ( METHOD_2 ( contains . VAR_1 return ; ) ( METHOD_5 . ) ( reviewers . ) cd , db ( METHOD_4 = VAR_1 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 { ) ) ( METHOD_3 . ) ( METHOD_2 ( if { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } else { VAR_1 . METHOD_2 ( ) ; } VAR_1 . METHOD_3 ( new TYPE_2 ( ) { public void run ( ) { VAR_2 this . METHOD_4 ( ) ; } } , INT_1 , ( ( VAR_3 ) * INT_2 ) ) ; } } ; ) ) INT_2 * ) VAR_3 ( ( , INT_1 , } } ; ) ( METHOD_4 . this VAR_2 { ) ( run void public { ) ( TYPE_2 new ( METHOD_3 . VAR_1 } ; ) ( METHOD_2 . VAR_1 { else } ; ) ( TYPE_1 new = VAR_1 { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 void public 
public boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) . METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) & & ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; } } } } ; ) ) ) ) VAR_7 ( METHOD_9 ( ! ( & & ) ) ( METHOD_8 ( ( || ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_4 ( return : default : VAR_6 case : VAR_5 case : VAR_4 case : VAR_3 case : VAR_2 case ; false return : VAR_1 case { ) ) ( METHOD_5 . ) ( METHOD_4 ( switch } ; true return { ) ) ( METHOD_3 ( if } ; false return { ) ) ) ( METHOD_2 ( ! ( if { ) ( METHOD_1 boolean public 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } } ; ) STRING_1 ( METHOD_3 . TYPE_1 return ; ) ) ( getChange . rsrc , ) ( getProject . rsrc , ) ( getAccountId . ) ( get . VAR_2 ( METHOD_4 . VAR_1 } ; ) STRING_1 ( METHOD_3 . TYPE_1 return { ) ) ) ) ( getChange . rsrc ( METHOD_2 ( || ) ) ( METHOD_1 . rsrc ( ( if { com.google.gwtorm.server.OrmException , TYPE_5 , TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > java.lang.String < TYPE_1 public 
private static com.google.gerrit.server.query.change.ChangeData change ( java.lang.String ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_1 . METHOD_1 ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ) ; cd . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ; return cd ; } } ; cd return ; ) ) VAR_1 ( METHOD_4 . TYPE_1 ( METHOD_3 . cd ; ) ) 1 ( Id . com.google.gerrit.reviewdb.client.Change new ( METHOD_2 . com.google.gerrit.server.query.change.ChangeData = cd com.google.gerrit.server.query.change.ChangeData ; ) VAR_1 ( METHOD_1 . TYPE_1 { com.google.gwtorm.server.OrmException throws ) VAR_1 ... java.lang.String ( change com.google.gerrit.server.query.change.ChangeData static private 
protected void METHOD_1 ( ) { TYPE_1 cfg = new TYPE_1 ( ) ; cfg . METHOD_2 ( STRING_1 , null , STRING_2 , INT_1 ) ; cfg . METHOD_2 ( STRING_1 , null , STRING_3 , ( ( int ) ( FLOAT_1 ) ) ) ; bind ( VAR_1 class ) . METHOD_3 ( new TYPE_2 ( null , null , null , null , null , null , cfg ) ) ; } } ; ) ) cfg , null , null , null , null , null , null ( TYPE_2 new ( METHOD_3 . ) class VAR_1 ( bind ; ) ) ) FLOAT_1 ( ) int ( ( , STRING_3 , null , STRING_1 ( METHOD_2 . cfg ; ) INT_1 , STRING_2 , null , STRING_1 ( METHOD_2 . cfg ; ) ( TYPE_1 new = cfg TYPE_1 { ) ( METHOD_1 void protected 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this : : METHOD_4 ) . collect ( TYPE_3 . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . TYPE_3 ( collect . ) METHOD_4 : : this ( METHOD_3 . ) ( METHOD_2 . VAR_1 return } ; null return { ) ) ( isEmpty . VAR_1 ( if { ) VAR_1 > TYPE_2 < java.util.List ( METHOD_1 > TYPE_1 < java.util.List private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 in = new TYPE_2 ( ) ; VAR_1 = user . email ; VAR_2 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( in ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( METHOD_3 ( r . getChangeId ( ) ) ) ) ) . METHOD_4 ( TYPE_4 . of ( user . id ) ) ; } } ; ) ) id . user ( of . TYPE_4 ( METHOD_4 . ) ) ) ) ) ( getChangeId . r ( METHOD_3 ( ) > ? < TYPE_3 ( ( ( com.google.common.truth.Truth.assertThat ; ) in ( METHOD_1 . ) ) ( getChangeId . r ( id . ) ( changes . VAR_2 ; email . user = VAR_1 ; ) ( TYPE_2 new = in TYPE_2 ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + STRING_2 ; repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ; org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ) ; org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_9 + STRING_10 ) ) ) ) ; } } ; ) ) ) ) STRING_10 + STRING_9 ( + STRING_6 ( ( contains . VAR_2 ( METHOD_3 . org.junit.Assert ; ) ) ) ) STRING_8 + STRING_7 ( + STRING_6 ( ( contains . VAR_2 ( METHOD_3 . org.junit.Assert ; ) STRING_5 ( METHOD_2 = VAR_2 java.lang.String ; ) ( create . ) VAR_1 , STRING_4 ( add . ) ( commit . ) STRING_3 ( branch . repo ; STRING_2 + STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 . ReviewDb class ) . METHOD_2 ( VAR_4 class ) ; bind ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) ; bind ( VAR_8 . Factory class ) . in ( VAR_6 ) ; bind ( VAR_9 . Factory class ) . in ( VAR_6 ) ; bind ( VAR_10 . Factory class ) . in ( VAR_6 ) ; } } ; ) VAR_6 ( in . ) class Factory . VAR_10 ( bind ; ) VAR_6 ( in . ) class Factory . VAR_9 ( bind ; ) VAR_6 ( in . ) class Factory . VAR_8 ( bind ; ) class VAR_7 ( bind ; ) VAR_6 ( in . ) class VAR_5 ( bind ; ) class VAR_4 ( METHOD_2 . ) class ReviewDb . VAR_3 ( bind ; ) class VAR_2 ( in . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , final TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { return db . changes ( ) . METHOD_2 ( change.getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_3 ( ) ) { change . METHOD_4 ( VAR_2 ) ; change . METHOD_5 ( VAR_1 ) ; return change ; } return null ; } } ) ; } } ; ) } } ; null return } ; change return ; ) VAR_1 ( METHOD_5 . change ; ) VAR_2 ( METHOD_4 . change { ) ) ( METHOD_3 . ) ( getStatus . change ( if { ) change com.google.gerrit.reviewdb.client.Change ( update com.google.gerrit.reviewdb.client.Change public { ) ( > com.google.gerrit.reviewdb.client.Change < TYPE_2 new , ) ( change.getId ( METHOD_2 . ) ( changes . db return { com.google.gwtorm.server.OrmException throws ) VAR_1 TYPE_1 final , change com.google.gerrit.reviewdb.client.Change , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 com.google.gerrit.reviewdb.client.Change private 
TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { final TYPE_4 VAR_1 = METHOD_2 ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) ; VAR_1 . put ( VAR_4 , VAR_5 ) ; if ( STRING_1 . equals ( VAR_3 ) ) { return METHOD_3 ( VAR_1 ) ; } else { if ( ( VAR_6 ) ! = null ) { VAR_1 . put ( VAR_7 , VAR_6 ) ; VAR_1 . put ( VAR_8 , VAR_9 ) ; } return new TYPE_5 ( VAR_1 ) ; } } } } ; ) VAR_1 ( TYPE_5 new return } ; ) VAR_9 , VAR_8 ( put . VAR_1 ; ) VAR_6 , VAR_7 ( put . VAR_1 { ) null = ! ) VAR_6 ( ( if { else } ; ) VAR_1 ( METHOD_3 return { ) ) VAR_3 ( equals . STRING_1 ( if ; ) VAR_5 , VAR_4 ( put . VAR_1 ; ) VAR_3 , VAR_2 ( put . VAR_1 ; ) ( METHOD_2 = VAR_1 TYPE_4 final { TYPE_3 , TYPE_2 throws ) ( METHOD_1 TYPE_1 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ; if ( c == null ) { throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1 . create ( db . get ( ) , c ) ; } } ; ) c , ) ( get . db ( create . VAR_1 return } ; ) ) STRING_2 + ) changeId + STRING_1 ( ( ( error . TYPE_3 throw { ) null == c ( if ; ) changeId ( get . ) ( changes . ) ( get . db = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException , TYPE_2 throws ) changeId Id . com.google.gerrit.reviewdb.client.Change ( METHOD_1 TYPE_1 private 
static void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < ? > VAR_2 , final java.lang.String name ) throws java.io.IOException { final TYPE_3 in = TYPE_4 . METHOD_2 ( VAR_2 , name ) ; if ( in ! = null ) { TYPE_5 VAR_3 = TYPE_6 . METHOD_3 ( in , INT_1 ) ; TYPE_4 . METHOD_4 ( VAR_1 , VAR_3 ) ; } } } } ; ) VAR_3 , VAR_1 ( METHOD_4 . TYPE_4 ; ) INT_1 , in ( METHOD_3 . TYPE_6 = VAR_3 TYPE_5 { ) null = ! in ( if ; ) name , VAR_2 ( METHOD_2 . TYPE_4 = in TYPE_3 final { java.io.IOException throws ) name java.lang.String final , VAR_2 > ? < TYPE_2 final , VAR_1 TYPE_1 final ( METHOD_1 void static 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 p ) { TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) ; } } ) ; close ( ) ; } } ; ) ( close ; ) } } ; ) ) ) ( TYPE_6 new ( METHOD_4 . p ( METHOD_3 . TYPE_5 { ) p TYPE_4 ( onSuccess void public { ) ( > TYPE_4 < TYPE_3 new , VAR_1 ( METHOD_2 . TYPE_2 { ) e TYPE_1 ( METHOD_1 void 
private void METHOD_1 ( boolean VAR_1 ) { java.lang.String b = ( ( base ) ! = null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ; java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ; TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 , false ) ) ; } } ; ) ) false , VAR_1 , VAR_2 , b , changeId ( TYPE_3 new , ) VAR_2 , changeId ( METHOD_3 . TYPE_2 ( display . TYPE_1 ; ) ) ( get . revision ( METHOD_2 . java.lang.String = VAR_2 java.lang.String ; null : ) ) ( get . base ( METHOD_2 . java.lang.String ? ) null = ! ) base ( ( = b java.lang.String { ) VAR_1 boolean ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( id ( STRING_4 ) ) ) + STRING_5 ) , res . METHOD_4 ( ) ) ; } } ; ) ) ( METHOD_4 . res , ) STRING_5 + ) ) ) STRING_4 ( id ( + ) STRING_3 + ) ) STRING_2 ( id ( ( ( ( ( org.junit.Assert.assertEquals ; ) STRING_1 ( METHOD_3 = res TYPE_1 ; ) ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.lang.String METHOD_1 ( ) { if ( ( getValue ( ) ) < 0 ) { return TYPE_1 . toString ( getValue ( ) ) ; } else if ( ( getValue ( ) ) == 0 ) { return STRING_1 ; } else { return STRING_2 + ( TYPE_1 . toString ( getValue ( ) ) ) ; } } } } ; ) ) ) ( getValue ( toString . TYPE_1 ( + STRING_2 return { else } ; STRING_1 return { ) 0 == ) ) ( getValue ( ( if else } ; ) ) ( getValue ( toString . TYPE_1 return { ) 0 < ) ) ( getValue ( ( if { ) ( METHOD_1 java.lang.String public 
public static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n = c . getName ( ) ; n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n . METHOD_4 ( STRING_1 ) ) n = n . METHOD_2 ( 1 ) ; return TYPE_2 . METHOD_5 ( n ) ; } } ; ) n ( METHOD_5 . TYPE_2 return ; ) 1 ( METHOD_2 . n = n ) ) STRING_1 ( METHOD_4 . n ( while ; ) ) 1 + ) ) CHAR_1 ( METHOD_3 . n ( ( ( METHOD_2 . n = n ; ) ( getName . c = n java.lang.String { ) c > ? < TYPE_1 ( METHOD_1 int static public 
public static void METHOD_1 ( ) { final TYPE_1 p = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ; } if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ; } } } } ; ) ) ( METHOD_6 . p ( METHOD_5 . VAR_3 { ) null = ! ) VAR_3 ( ( if } ; ) ) ( METHOD_6 . p ( METHOD_5 . VAR_2 { ) null = ! ) VAR_2 ( ( if ; ) ) ( METHOD_4 . p ( METHOD_3 . TYPE_2 ; ) ( METHOD_2 . VAR_1 = p TYPE_1 final { ) ( METHOD_1 void static public 
TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final boolean VAR_2 , final TYPE_3 VAR_3 , final java.util.List < TYPE_4 > VAR_4 ) throws java.io.IOException { VAR_5 = db . METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } finally { VAR_5 . METHOD_4 ( ) ; } } } } ; ) ( METHOD_4 . VAR_5 { finally } ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 ( METHOD_3 return { try ; ) ( METHOD_2 . db = VAR_5 { java.io.IOException throws ) VAR_4 > TYPE_4 < java.util.List final , VAR_3 TYPE_3 final , VAR_2 boolean final , VAR_1 TYPE_2 final ( METHOD_1 TYPE_1 
private int METHOD_1 ( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 , boolean VAR_2 ) { while ( i . METHOD_2 ( ) ) { final TYPE_2 c = i . METHOD_3 ( ) ; if ( ( c . METHOD_4 ( ) ) == ( VAR_3 ) ) { METHOD_5 ( row ) ; } else { METHOD_6 ( row ) ; } METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) , VAR_2 ) ; row ++ ; } return row ; } } ; row return } ; ++ row ; ) VAR_2 , ) ) ) ( METHOD_2 . i ( ! ( , c , VAR_1 , row ( METHOD_7 } ; ) row ( METHOD_6 { else } ; ) row ( METHOD_5 { ) ) VAR_3 ( == ) ) ( METHOD_4 . c ( ( if ; ) ( METHOD_3 . i = c TYPE_2 final { ) ) ( METHOD_2 . i ( while { ) VAR_2 boolean , VAR_1 int final , row int , i > TYPE_2 < TYPE_1 final ( METHOD_1 int private 
public java.lang.String METHOD_1 ( java.lang.String input ) { java.lang.String VAR_1 = VAR_2 . METHOD_1 ( input , VAR_3 ) ; if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { throw new TYPE_2 ( ( ( ( STRING_1 + ( toString ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; } java.lang.String result = new TYPE_3 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_3 , VAR_1 ) . append ( TYPE_4 . METHOD_5 ( input ) ) . METHOD_6 ( ) . METHOD_7 ( ) ; return result ; } } ; result return ; ) ( METHOD_7 . ) ( METHOD_6 . ) ) input ( METHOD_5 . TYPE_4 ( append . ) VAR_1 , STRING_3 ( METHOD_4 . ) ( METHOD_3 . ) ( TYPE_3 new = result java.lang.String } ; ) ) VAR_1 + ) STRING_2 + ) ) ) ( toString ( + STRING_1 ( ( ( ( TYPE_2 new throw { ) ) ) VAR_1 ( METHOD_2 . TYPE_1 ( ! ( if ; ) VAR_3 , input ( METHOD_1 . VAR_2 = VAR_1 java.lang.String { ) input java.lang.String ( METHOD_1 java.lang.String public 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws com.google.gwtorm.server.OrmException { int VAR_3 = VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 . NameKey ( VAR_2 . getName ( ) ) ) . METHOD_5 ( new TYPE_4 . Id ( VAR_3 ) ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) . METHOD_10 ( ) ; } } ; ) ( METHOD_10 . ) ) ( METHOD_9 . TYPE_5 ( METHOD_8 . ) ) ( METHOD_7 . VAR_2 ( METHOD_6 . ) ) VAR_3 ( Id . TYPE_4 new ( METHOD_5 . ) ) ) ( getName . VAR_2 ( NameKey . TYPE_4 new ( METHOD_4 . ) ( METHOD_3 . TYPE_1 return ; ) ( METHOD_2 . VAR_1 = VAR_3 int { com.google.gwtorm.server.OrmException throws ) VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) ! = 1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 < TYPE_2 > ( getName ( ) , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 , ) ( getName ( > TYPE_2 < TYPE_5 new return } ; ) STRING_1 ( TYPE_4 new throw { ) 1 = ! ) ) ( size . VAR_1 ( ( if { ) VAR_1 > > TYPE_2 < TYPE_1 extends ? < TYPE_3 final ( METHOD_1 > TYPE_2 < TYPE_1 public 
public java.lang.String apply ( TYPE_1 rsrc ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_2 ( ) ; } java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) ) ; if ( TYPE_4 . METHOD_3 ( url ) ) { throw new TYPE_2 ( ) ; } else { return url ; } } } } ; url return { else } ; ) ( TYPE_2 new throw { ) ) url ( METHOD_3 . TYPE_4 ( if ; ) ) ( METHOD_2 . rsrc ( METHOD_1 . VAR_1 = url java.lang.String } ; ) ( TYPE_2 new throw { ) null == VAR_1 ( if ; ) ( get . VAR_2 = VAR_1 TYPE_3 { TYPE_2 throws ) rsrc TYPE_1 ( apply java.lang.String public 
public static void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 , STRING_5 ) . METHOD_5 ( STRING_6 , VAR_2 ) . METHOD_6 ( STRING_7 ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ; } } ; ) ) VAR_3 ( METHOD_8 . TYPE_5 ( METHOD_7 . ) STRING_7 ( METHOD_6 . ) VAR_2 , STRING_6 ( METHOD_5 . ) STRING_5 , STRING_4 ( METHOD_4 . ) ) ) ) STRING_3 , STRING_2 ( METHOD_3 . ) VAR_1 ( METHOD_2 . TYPE_4 ( + STRING_1 ( ( TYPE_3 new { ) VAR_3 > TYPE_2 < TYPE_1 , VAR_2 int , VAR_1 java.lang.String ( METHOD_1 void static public 
public TYPE_1 < java.util.List < TYPE_2 > > apply ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { java.util.List < TYPE_1 < TYPE_2 > > result = TYPE_3 . METHOD_1 ( changes . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change c : changes ) { result . add ( VAR_1 . submit ( new TYPE_4 ( event , c . METHOD_2 ( ) , c . getId ( ) ) ) ) ; } return TYPE_5 . METHOD_3 ( result ) ; } } ; ) result ( METHOD_3 . TYPE_5 return } ; ) ) ) ) ( getId . c , ) ( METHOD_2 . c , event ( TYPE_4 new ( submit . VAR_1 ( add . result { ) changes : c com.google.gerrit.reviewdb.client.Change ( for ; ) ) ( size . changes ( METHOD_1 . TYPE_3 = result > > TYPE_2 < TYPE_1 < java.util.List { ) changes > com.google.gerrit.reviewdb.client.Change < java.util.List ( apply > > TYPE_2 < java.util.List < TYPE_1 public 
public static void METHOD_1 ( TYPE_1 file , java.lang.String name , TYPE_2 VAR_1 ) throws java.io.IOException { VAR_1 . METHOD_2 ( new TYPE_3 ( name ) ) ; TYPE_4 input = new TYPE_4 ( file ) ; TYPE_5 . METHOD_3 ( input , VAR_1 ) ; input . close ( ) ; VAR_1 . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . VAR_1 ; ) ( close . input ; ) VAR_1 , input ( METHOD_3 . TYPE_5 ; ) file ( TYPE_4 new = input TYPE_4 ; ) ) name ( TYPE_3 new ( METHOD_2 . VAR_1 { java.io.IOException throws ) VAR_1 TYPE_2 , name java.lang.String , file TYPE_1 ( METHOD_1 void static public 
private void METHOD_1 ( ) { final TYPE_1 . Id me = TYPE_2 . getAccountId ( ) ; final java.util.Set < TYPE_3 . Id > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( me ) ; final TYPE_4 VAR_2 = VAR_3 . get ( change . METHOD_4 ( ) . getParentKey ( ) ) ; METHOD_1 ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; METHOD_1 ( VAR_1 , VAR_3 . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . VAR_3 , VAR_1 ( METHOD_1 ; ) ) ( METHOD_5 . VAR_2 , VAR_1 ( METHOD_1 ; ) ) ( getParentKey . ) ( METHOD_4 . change ( get . VAR_3 = VAR_2 TYPE_4 final ; ) me ( METHOD_3 . ) ( METHOD_2 . TYPE_2 = VAR_1 > Id . TYPE_3 < java.util.Set final ; ) ( getAccountId . TYPE_2 = me Id . TYPE_1 final { ) ( METHOD_1 void private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 ) ; METHOD_5 ( STRING_9 , change ) ; } } ; ) change , STRING_9 ( METHOD_5 ; ) STRING_8 ( METHOD_5 ; ) STRING_7 ( METHOD_5 ; ) ( insert . ) null , null , null , commit , repo ( METHOD_4 = change com.google.gerrit.reviewdb.client.Change ; ) ) ( create . ) STRING_6 , STRING_5 ( add . ) STRING_4 , STRING_3 ( add . ) STRING_2 ( message . ) ( commit . repo ( METHOD_3 . repo = commit org.eclipse.jgit.revwalk.RevCommit ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_5 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_6 , VAR_7 ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) VAR_7 , VAR_6 ( METHOD_4 . ) ) ) ( METHOD_3 . VAR_2 , db ( METHOD_6 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_5 . ) VAR_5 , VAR_4 , VAR_3 ( METHOD_4 . ) ) ) ( METHOD_3 . VAR_2 , db ( METHOD_2 . VAR_1 ( com.google.common.truth.Truth.assertThat { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ; TYPE_2 r = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) ; r . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . r ; ) ) ( METHOD_4 . r , VAR_4 ( org.junit.Assert.assertEquals ; ) ) VAR_1 ( METHOD_3 , ) STRING_3 + ) ) ) ( get . project ( + STRING_2 ( ( ( put . VAR_3 = r TYPE_2 ; ) true , null , VAR_1 , VAR_2 ( METHOD_2 . TYPE_1 ; STRING_1 = VAR_1 java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void onSuccess ( TYPE_1 < TYPE_2 > result ) { final java.util.List < TYPE_3 > r = new java.util.ArrayList < TYPE_3 > ( result . length ( ) ) ; for ( final TYPE_2 VAR_1 : TYPE_4 . METHOD_1 ( result ) ) { r . add ( new TYPE_3 ( VAR_1 ) ) ; } VAR_2 . METHOD_2 ( req , new TYPE_5 ( r ) ) ; } } ; ) ) r ( TYPE_5 new , req ( METHOD_2 . VAR_2 } ; ) ) VAR_1 ( TYPE_3 new ( add . r { ) ) result ( METHOD_1 . TYPE_4 : VAR_1 TYPE_2 final ( for ; ) ) ( length . result ( > TYPE_3 < java.util.ArrayList new = r > TYPE_3 < java.util.List final { ) result > TYPE_2 < TYPE_1 ( onSuccess void public 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 , java.lang.String changeId ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) , changeId ) ; return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; } } ; ) ( getChangeId . ) STRING_1 , git ( to . VAR_2 return ; ) changeId , ) VAR_6 ( java.lang.String new , VAR_5 , VAR_4 , VAR_1 , db ( create . VAR_3 = VAR_2 TYPE_3 { java.lang.Exception throws ) changeId java.lang.String , VAR_1 TYPE_2 , git TYPE_1 ( METHOD_1 java.lang.String private 
public TYPE_1 apply ( TYPE_2 rsrc ) throws java.io.IOException , TYPE_3 { org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_1 ( VAR_2 ) ; try { TYPE_4 p = TYPE_4 . METHOD_2 ( ) ; p . METHOD_3 ( git ) ; return new TYPE_1 ( null , p , git ) ; } finally { git . close ( ) ; } } } } ; ) ( close . git { finally } ; ) git , p , null ( TYPE_1 new return ; ) git ( METHOD_3 . p ; ) ( METHOD_2 . TYPE_4 = p TYPE_4 { try ; ) VAR_2 ( METHOD_1 . VAR_1 = git org.eclipse.jgit.lib.Repository { TYPE_3 , java.io.IOException throws ) rsrc TYPE_2 ( apply TYPE_1 public 
public static void METHOD_1 ( int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . message ( TYPE_4 . METHOD_2 ( msg ) ) ; TYPE_4 . METHOD_3 ( id , STRING_1 ) . METHOD_4 ( input , VAR_1 ) ; } } ; ) VAR_1 , input ( METHOD_4 . ) STRING_1 , id ( METHOD_3 . TYPE_4 ; ) ) msg ( METHOD_2 . TYPE_4 ( message . input ; ) ( create . TYPE_3 = input TYPE_3 { ) VAR_1 > ChangeInfo . TYPE_2 < TYPE_1 , msg java.lang.String , id int ( METHOD_1 void static public 
void display ( java.util.List < java.util.List < java.lang.String > > values ) { for ( int row = 2 ; row < ( table . METHOD_1 ( ) ) ; row ++ ) { table . METHOD_2 ( ( row -- ) ) ; } int row = 2 ; for ( java.util.List < java.lang.String > VAR_1 : values ) { METHOD_3 ( row , VAR_1 ) ; row ++ ; } } } } ; ++ row ; ) VAR_1 , row ( METHOD_3 { ) values : VAR_1 > java.lang.String < java.util.List ( for ; 2 = row int } ; ) ) -- row ( ( METHOD_2 . table { ) ++ row ; ) ) ( METHOD_1 . table ( < row ; 2 = row int ( for { ) values > > java.lang.String < java.util.List < java.util.List ( display void 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . Change change = db . changes ( ) . get ( id ) ; if ( change == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1 = new TYPE_6 ( db ) ; final TYPE_1 d = new TYPE_1 ( ) ; d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) ; return d ; } } ; d return ; ) change , VAR_1 , ) db ( TYPE_7 new , db ( METHOD_1 . d ; ) ( TYPE_1 new = d TYPE_1 final ; ) db ( TYPE_6 new = VAR_1 TYPE_6 final } ; ) ) ( TYPE_5 new ( TYPE_3 new throw { ) null == change ( if ; ) id ( get . ) ( changes . db = change Change . TYPE_2 final { OrmException . TYPE_4 , TYPE_3 throws ) db ReviewDb . TYPE_2 final ( run TYPE_1 public 
public boolean METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = null ; TYPE_3 VAR_2 = null ; try { VAR_1 = VAR_3 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( null , null , TYPE_4 . METHOD_5 ( ) , null ) ; return VAR_2 . METHOD_6 ( ) ; } finally { METHOD_7 ( VAR_2 ) ; METHOD_8 ( VAR_1 ) ; } } } } ; ) VAR_1 ( METHOD_8 ; ) VAR_2 ( METHOD_7 { finally } ; ) ( METHOD_6 . VAR_2 return ; ) null , ) ( METHOD_5 . TYPE_4 , null , null ( METHOD_4 . ) ( METHOD_3 . VAR_1 = VAR_2 ; ) ( METHOD_2 . VAR_3 = VAR_1 { try ; null = VAR_2 TYPE_3 ; null = VAR_1 TYPE_2 { TYPE_1 throws ) ( METHOD_1 boolean public 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 . size ( ) ) > 0 ) { java.util.Set < TYPE_3 > VAR_4 = new TYPE_4 < TYPE_3 > ( VAR_2 . METHOD_2 ( ) ) ; for ( TYPE_3 s : VAR_2 . METHOD_2 ( ) ) { if ( VAR_3 . contains ( s . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( s ) ; } } VAR_2 . METHOD_5 ( VAR_4 ) ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 ( METHOD_1 . VAR_5 } ; ) VAR_4 ( METHOD_5 . VAR_2 } } ; ) s ( METHOD_4 . VAR_4 { ) ) ) ( METHOD_3 . s ( contains . VAR_3 ( if { ) ) ( METHOD_2 . VAR_2 : s TYPE_3 ( for ; ) ) ( METHOD_2 . VAR_2 ( > TYPE_3 < TYPE_4 new = VAR_4 > TYPE_3 < java.util.Set { ) 0 > ) ) ( size . VAR_3 ( ( if { ) VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
public java.util.List < TYPE_1 > get ( ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 ) ) ) { return METHOD_2 ( ) ; } if ( VAR_2 ) { return METHOD_3 ( ( ( user ) ! = null ? VAR_3 . create ( user ) : VAR_4 . get ( ) ) ) ; } if ( ( user ) ! = null ) { return VAR_5 . get ( ) . apply ( new TYPE_4 ( VAR_3 . create ( user ) ) ) ; } return METHOD_4 ( ) ; } } ; ) ( METHOD_4 return } ; ) ) ) user ( create . VAR_3 ( TYPE_4 new ( apply . ) ( get . VAR_5 return { ) null = ! ) user ( ( if } ; ) ) ) ( get . VAR_4 : ) user ( create . VAR_3 ? null = ! ) user ( ( ( METHOD_3 return { ) VAR_2 ( if } ; ) ( METHOD_2 return { ) ) ) VAR_1 ( METHOD_1 . TYPE_3 ( ! ( if { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ( get > TYPE_1 < java.util.List public 
public TYPE_1 < com.google.gerrit.reviewdb.client . AccountGroup > METHOD_1 ( ) { try { com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { return java.util.Collections . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( ) . METHOD_5 ( ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { VAR_1 . METHOD_6 ( STRING_1 , e ) ; return java.util.Collections . METHOD_7 ( ) ; } } } } ; ) ( METHOD_7 . java.util.Collections return ; ) e , STRING_1 ( METHOD_6 . VAR_1 { ) e com.google.gwtorm.server.OrmException ( catch } } ; ) ( close . db { finally } ; ) ) ( METHOD_5 . ) ( METHOD_1 . ) ( METHOD_4 . db ( METHOD_3 . java.util.Collections return { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb { try { ) ( METHOD_1 > AccountGroup . com.google.gerrit.reviewdb.client < TYPE_1 public 
TYPE_1 get ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.server.query.change.ChangeData VAR_2 , int VAR_3 ) throws com.google.gwtorm.server.OrmException { java.lang.String branch = VAR_2 . change ( ) . METHOD_1 ( ) . get ( ) ; java.lang.String VAR_4 = TYPE_2 . METHOD_2 ( VAR_2 . getId ( ) . get ( ) , VAR_3 , branch ) ; return get ( VAR_4 , VAR_1 , branch , VAR_2 . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . VAR_2 , branch , VAR_1 , VAR_4 ( get return ; ) branch , VAR_3 , ) ( get . ) ( getId . VAR_2 ( METHOD_2 . TYPE_2 = VAR_4 java.lang.String ; ) ( get . ) ( METHOD_1 . ) ( change . VAR_2 = branch java.lang.String { com.google.gwtorm.server.OrmException throws ) VAR_3 int , VAR_2 com.google.gerrit.server.query.change.ChangeData , VAR_1 org.eclipse.jgit.lib.Repository ( get TYPE_1 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) . METHOD_3 ( true ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_4 ) . METHOD_5 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_5 ) . METHOD_5 ( ) ) ; METHOD_4 ( STRING_6 , u . METHOD_6 ( STRING_7 ) . METHOD_5 ( ) ) ; } } ; ) ) ( METHOD_5 . ) STRING_7 ( METHOD_6 . u , STRING_6 ( METHOD_4 ; ) ) ( METHOD_5 . ) STRING_5 ( METHOD_6 . u , STRING_3 ( METHOD_4 ; ) ) ( METHOD_5 . ) STRING_4 ( METHOD_6 . u , STRING_3 ( METHOD_4 ; ) ) ( METHOD_5 . u , STRING_3 ( METHOD_4 ; ) ( user = u TYPE_1 ; ) true ( METHOD_3 . ) STRING_2 , VAR_3 , VAR_2 , VAR_4 ( METHOD_2 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 { ) ( METHOD_1 void public 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; } } ; ) ) ) ( METHOD_1 . ) ) VAR_1 ( ) TYPE_2 ( ( ( > TYPE_4 < TYPE_3 new ( equals . ) ) ( METHOD_1 ( > TYPE_4 < TYPE_3 new return } ; false return { ) ) ) TYPE_2 instanceof VAR_1 ( ! ( || ) ) ) VAR_1 ( equals . super ( ! ( ( if { ) VAR_1 TYPE_1 final ( equals boolean public 
public TYPE_1 METHOD_1 ( final TYPE_2 . Change change ) throws TYPE_3 { try { final TYPE_4 . NameKey VAR_1 = change . getProject ( ) ; return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } } } ; ) e , ) ( change.getId ( TYPE_3 new throw { ) e TYPE_5 ( catch } ; ) change ( METHOD_1 . ) VAR_1 ( METHOD_2 . VAR_2 return ; ) ( getProject . change = VAR_1 NameKey . TYPE_4 final { try { TYPE_3 throws ) change Change . TYPE_2 final ( METHOD_1 TYPE_1 public 
private static final boolean METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3 . METHOD_3 ( STRING_1 ) ; } } ) ; return ( VAR_1 ! = null ) & & ( ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ) ! = ( - 1 ) ) ; } } ; ) ) 1 - ( = ! ) ) STRING_2 ( METHOD_5 . ) ( METHOD_4 . VAR_1 ( ( & & ) null = ! VAR_1 ( return ; ) } } ; ) STRING_1 ( METHOD_3 . TYPE_3 return { ) ( run java.lang.String public { ) ( > java.lang.String < TYPE_2 new ( METHOD_2 . TYPE_1 = VAR_1 java.lang.String final { ) ( METHOD_1 boolean final static private 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_2 ) ) ; assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_4 ) ) ; assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_5 ) ) ; assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ; assertEquals ( STRING_8 , TYPE_1 . METHOD_2 ( STRING_9 ) ) ; } } ; ) ) STRING_9 ( METHOD_2 . TYPE_1 , STRING_8 ( assertEquals ; ) ) STRING_7 ( METHOD_2 . TYPE_1 , STRING_6 ( assertEquals ; ) ) STRING_5 ( METHOD_2 . TYPE_1 , STRING_3 ( assertEquals ; ) ) STRING_4 ( METHOD_2 . TYPE_1 , STRING_3 ( assertEquals ; ) ) STRING_2 ( METHOD_2 . TYPE_1 , STRING_2 ( assertEquals ; ) ) STRING_1 ( METHOD_2 . TYPE_1 , STRING_1 ( assertEquals { ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_3 new throw { ) e java.io.IOException | TYPE_4 | com.google.gwtorm.server.OrmException ( catch } ; ) VAR_3 . ) in , change ( apply . ) ( get . VAR_2 ( id . VAR_1 return { try { TYPE_3 throws ) in TYPE_2 ( METHOD_1 TYPE_1 public 
private TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_3 . METHOD_2 ( TYPE_4 . ref ( branch ) , TYPE_4 . project ( branch . getParentKey ( ) ) , TYPE_3 . not ( TYPE_4 . status ( VAR_2 ) ) , TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_4 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; } } ; ) ) ) ) VAR_1 , ) VAR_3 ( schema . TYPE_4 ( METHOD_4 . TYPE_4 ( METHOD_3 . TYPE_3 , ) ) VAR_2 ( status . TYPE_4 ( not . TYPE_3 , ) ) ( getParentKey . branch ( project . TYPE_4 , ) branch ( ref . TYPE_4 ( METHOD_2 . TYPE_3 ( query return { com.google.gwtorm.server.OrmException throws ) VAR_1 > java.lang.String < java.util.List , branch NameKey . TYPE_2 ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_1 private 
public boolean METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { boolean VAR_2 = ( ( VAR_3 . equals ( VAR_1 ) ) & & ( ( token ) ! = null ) ) & & ( ( VAR_4 ) ! = null ) ; if ( VAR_2 ) { try { VAR_5 = VAR_4 . METHOD_2 ( ) ; } catch ( TYPE_2 e ) { VAR_6 . error ( STRING_1 , e ) ; METHOD_3 ( ) ; VAR_2 = false ; } } return VAR_2 ; } } ; VAR_2 return } } ; false = VAR_2 ; ) ( METHOD_3 ; ) e , STRING_1 ( error . VAR_6 { ) e TYPE_2 ( catch } ; ) ( METHOD_2 . VAR_4 = VAR_5 { try { ) VAR_2 ( if ; ) null = ! ) VAR_4 ( ( & & ) ) null = ! ) token ( ( & & ) ) VAR_1 ( equals . VAR_3 ( ( = VAR_2 boolean { ) VAR_1 > TYPE_1 < java.util.Set ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 , STRING_4 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 ) ) ) ; } } ; ) ) ) STRING_5 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_5 ; ) ) ) STRING_4 , STRING_2 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_3 ; ) ) ) STRING_3 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_5 ; ) ) ) STRING_2 ( change . TYPE_2 ( METHOD_4 . p ( METHOD_3 ; ) STRING_1 ( METHOD_2 . TYPE_2 = p TYPE_1 { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 = TYPE_2 . METHOD_2 ( INT_1 ) ; VAR_3 . add ( STRING_2 ) ; VAR_3 . add ( STRING_3 ) ; VAR_3 . add ( STRING_4 ) ; VAR_4 . projects ( ) . create ( in ) ; METHOD_3 ( VAR_1 , STRING_2 ) ; METHOD_4 ( VAR_1 , STRING_2 , STRING_3 , STRING_5 ) ; } } ; ) STRING_5 , STRING_3 , STRING_2 , VAR_1 ( METHOD_4 ; ) STRING_2 , VAR_1 ( METHOD_3 ; ) in ( create . ) ( projects . VAR_4 ; ) STRING_4 ( add . VAR_3 ; ) STRING_3 ( add . VAR_3 ; ) STRING_2 ( add . VAR_3 ; ) INT_1 ( METHOD_2 . TYPE_2 = VAR_3 ; true = VAR_2 ; VAR_1 = name . in ; ) ( TYPE_1 new = in TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ; } } ; ) changeId . ) VAR_2 ( METHOD_4 . TYPE_3 , ) ( getChangeId . VAR_1 ( org.junit.Assert.assertEquals ; ) ( get . ) 1 ( METHOD_3 . ) ( query . ) ( changes . VAR_3 = VAR_2 > ChangeInfo . TYPE_2 < java.util.List ; ) ( METHOD_2 ; ) ( METHOD_2 = VAR_1 Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( VAR_2 ) + ( TYPE_2 . METHOD_5 ( STRING_2 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( VAR_3 ) ) + STRING_4 ) , n . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . n , ) STRING_4 + ) ) VAR_3 ( + ) ) ) STRING_3 ( METHOD_5 . TYPE_2 ( + ) ) ) STRING_2 ( METHOD_5 . TYPE_2 ( + ) VAR_2 ( ( ( ( ( ( assertEquals ; ) n , VAR_1 ( METHOD_4 ; ) ( METHOD_3 . VAR_1 = n TYPE_1 final ; ) STRING_1 ( METHOD_2 . TYPE_2 = VAR_1 TYPE_1 final { ) ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( cd . METHOD_2 ( ) ) ! = null ) { return cd . METHOD_2 ( ) ; } com.google.gerrit.reviewdb.client.PatchSet ps = cd . METHOD_3 ( ) ; if ( ps == null ) { return TYPE_2 . of ( ) ; } cd . METHOD_4 ( new TYPE_3 ( cd ) . METHOD_5 ( ps ) . METHOD_6 ( true ) . METHOD_7 ( true ) . METHOD_8 ( ) ) ; return cd . METHOD_2 ( ) ; } } ; ) ( METHOD_2 . cd return ; ) ) ( METHOD_8 . ) true ( METHOD_7 . ) true ( METHOD_6 . ) ps ( METHOD_5 . ) cd ( TYPE_3 new ( METHOD_4 . cd } ; ) ( of . TYPE_2 return { ) null == ps ( if ; ) ( METHOD_3 . cd = ps com.google.gerrit.reviewdb.client.PatchSet } ; ) ( METHOD_2 . cd return { ) null = ! ) ) ( METHOD_2 . cd ( ( if { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData ( METHOD_1 > TYPE_1 < java.util.List private 
private void METHOD_1 ( TYPE_1 ctx , TYPE_2 msg ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) ; METHOD_3 ( STRING_1 , c . getId ( ) ) ; c . METHOD_4 ( VAR_1 ) ; c . METHOD_5 ( VAR_2 ) ; ctx . METHOD_6 ( ) ; if ( msg ! = null ) { VAR_3 . METHOD_7 ( db , ctx . METHOD_8 ( msg . METHOD_9 ( ) ) , msg ) ; } } } } ; ) msg , ) ) ( METHOD_9 . msg ( METHOD_8 . ctx , db ( METHOD_7 . VAR_3 { ) null = ! msg ( if ; ) ( METHOD_6 . ctx ; ) VAR_2 ( METHOD_5 . c ; ) VAR_1 ( METHOD_4 . c ; ) ) ( getId . c , STRING_1 ( METHOD_3 ; ) ( METHOD_2 . ctx = db com.google.gerrit.reviewdb.server.ReviewDb ; ) ( getChange . ctx = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) msg TYPE_2 , ctx TYPE_1 ( METHOD_1 void private 
public TYPE_1 get ( long VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 { if ( ! ( METHOD_1 ( ) ) ) { VAR_3 . METHOD_2 ( VAR_4 , ( ( int ) ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) ; set ( null ) ; } return super . get ( VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 ( get . super return } ; ) null ( set ; ) ) ) ) VAR_2 , VAR_1 ( METHOD_3 . TYPE_6 ( ) int ( ( , VAR_4 ( METHOD_2 . VAR_3 { ) ) ) ( METHOD_1 ( ! ( if { TYPE_5 , TYPE_4 , TYPE_3 throws ) VAR_2 TYPE_2 , VAR_1 long ( get TYPE_1 public 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 res = new TYPE_2 ( ) ; METHOD_2 ( VAR_1 , VAR_2 < TYPE_3 > METHOD_3 ( ) , res ) ; assertEquals ( INT_1 , res . getStatus ( ) ) ; return res . METHOD_4 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_4 . res return ; ) ) ( getStatus . res , INT_1 ( assertEquals ; ) res , ) ( METHOD_3 > TYPE_3 < VAR_2 , VAR_1 ( METHOD_2 ; ) ( TYPE_2 new = res TYPE_2 { TYPE_1 , java.io.IOException throws ) VAR_1 java.lang.String ( METHOD_1 java.lang.String private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( git , true ) ; TYPE_1 . Result VAR_1 = METHOD_2 ( git , true ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( git , true ) ; METHOD_2 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_3 ( change ) ; METHOD_4 ( changes , VAR_1 , VAR_2 ) ; } } ; ) VAR_2 , VAR_1 , changes ( METHOD_4 ; ) change ( METHOD_3 = changes > java.lang.String < java.util.Set ; ) false , git ( METHOD_2 ; ) true , git ( METHOD_2 = VAR_2 Result . TYPE_1 ; ) true , git ( METHOD_2 = VAR_1 Result . TYPE_1 ; ) true , git ( METHOD_2 = change Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
protected void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String name , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 == null ) { throw new TYPE_5 ( STRING_1 ) ; } bind ( TYPE_6 . key ( VAR_1 , name , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ; } } ; ) VAR_2 ( to . ) ) ) VAR_3 ( METHOD_3 . TYPE_7 , name , VAR_1 ( key . TYPE_6 ( bind } ; ) STRING_1 ( TYPE_5 new throw { ) null == VAR_3 ( if ; ) class VAR_4 ( METHOD_2 . VAR_2 = VAR_3 TYPE_4 { ) VAR_2 > TYPE_3 extends ? < TYPE_2 final , name java.lang.String final , VAR_1 TYPE_1 final ( METHOD_1 void protected 
protected void METHOD_1 ( TYPE_1 result ) { VAR_1 = new TYPE_2 ( this , base , revision , path , result . METHOD_2 ( ) , METHOD_3 ( ) . METHOD_4 ( ) ) ; METHOD_5 ( result . METHOD_6 ( ) ) ; display ( VAR_2 ) ; VAR_3 . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . VAR_3 ; ) VAR_2 ( display ; ) ) ( METHOD_6 . result ( METHOD_5 ; ) ) ( METHOD_4 . ) ( METHOD_3 , ) ( METHOD_2 . result , path , revision , base , this ( TYPE_2 new = VAR_1 { ) result TYPE_1 ( METHOD_1 void protected 
public TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change , TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final TYPE_3 VAR_3 , final org.eclipse.jgit.lib.Repository VAR_4 , final org.eclipse.jgit.lib.Repository VAR_5 ) { return VAR_1 . submit ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_2 ( ) throws java.lang.Exception { METHOD_3 ( change , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; return null ; } } ) ; } } ; ) } } ; null return ; ) VAR_5 , VAR_4 , VAR_3 , VAR_2 , change ( METHOD_3 { java.lang.Exception throws ) ( METHOD_2 TYPE_5 public { ) ( > TYPE_5 < TYPE_4 new ( submit . VAR_1 return { ) VAR_5 org.eclipse.jgit.lib.Repository final , VAR_4 org.eclipse.jgit.lib.Repository final , VAR_3 TYPE_3 final , VAR_2 TYPE_3 final , VAR_1 TYPE_2 , change com.google.gerrit.reviewdb.client.Change final ( METHOD_1 > ? < TYPE_1 public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . in ( VAR_2 class ) ; bind ( VAR_7 . Factory class ) . in ( VAR_5 ) ; bind ( VAR_8 . Factory class ) . in ( VAR_5 ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; } } ; ) class Factory . VAR_10 ( factory ; ) class Factory . VAR_9 ( factory ; ) VAR_5 ( in . ) class Factory . VAR_8 ( bind ; ) VAR_5 ( in . ) class Factory . VAR_7 ( bind ; ) class VAR_2 ( in . ) class VAR_6 ( bind ; ) VAR_5 ( in . ) class VAR_4 ( bind ; ) class VAR_3 ( bind ; ) class VAR_2 ( in . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
protected void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { final TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; final TYPE_2 e = new TYPE_2 ( s ) ; try { s . METHOD_2 ( e , table , VAR_1 , to ) ; } finally { e . close ( ) ; } } } } ; ) ( close . e { finally } ; ) to , VAR_1 , table , e ( METHOD_2 . s { try ; ) s ( TYPE_2 new = e TYPE_2 final ; ) ) db ( ) TYPE_1 ( ( = s TYPE_1 final { com.google.gwtorm.server.OrmException throws ) to java.lang.String , VAR_1 java.lang.String , table java.lang.String , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 void protected 
protected void run ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; input . ref = VAR_1 ; try { VAR_2 . apply ( new TYPE_2 ( project . METHOD_1 ( ) , project . METHOD_2 ( ) ) , input ) ; } catch ( TYPE_3 e ) { throw METHOD_3 ( e ) ; } } } } ; ) e ( METHOD_3 throw { ) e TYPE_3 ( catch } ; ) input , ) ) ( METHOD_2 . project , ) ( METHOD_1 . project ( TYPE_2 new ( apply . VAR_2 { try ; VAR_1 = ref . input ; ) ( TYPE_1 new = input TYPE_1 { java.lang.Exception throws ) ( run void protected 
public int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { boolean VAR_3 = false ; if ( VAR_1 < = ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return super . METHOD_1 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_1 . super return } } ; ++ ) VAR_5 ( { ) ) VAR_5 ( < VAR_1 ( if } ; ++ ) VAR_4 ( { ) ) VAR_4 ( = < VAR_1 ( if ; false = VAR_3 boolean { ) VAR_2 : s TYPE_1 final ( for { ) VAR_1 int final ( METHOD_1 int public 
public < TYPE_1 extends TYPE_2 > void METHOD_1 ( final TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 req = new TYPE_4 ( VAR_2 , url . toString ( ) ) ; req . METHOD_2 ( STRING_1 , VAR_3 ) ; req . METHOD_3 ( new TYPE_5 < TYPE_1 > ( true , VAR_1 ) ) ; try { TYPE_6 . METHOD_4 ( ) ; req . METHOD_1 ( ) ; } catch ( TYPE_7 e ) { TYPE_6 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( e ) ; } } } } ; ) e ( METHOD_6 . VAR_1 ; ) ( METHOD_5 . TYPE_6 { ) e TYPE_7 ( catch } ; ) ( METHOD_1 . req ; ) ( METHOD_4 . TYPE_6 { try ; ) ) VAR_1 , true ( > TYPE_1 < TYPE_5 new ( METHOD_3 . req ; ) VAR_3 , STRING_1 ( METHOD_2 . req ; ) ) ( toString . url , VAR_2 ( TYPE_4 new = req TYPE_4 { ) VAR_1 > TYPE_1 < TYPE_3 final ( METHOD_1 void > TYPE_2 extends TYPE_1 < public 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . email ( ) ) ! = null ) { return VAR_1 . email ( ) ; } else if ( ( VAR_1 . name ( ) ) ! = null ) { return VAR_1 . name ( ) ; } else { return STRING_1 ; } } } } ; STRING_1 return { else } ; ) ( name . VAR_1 return { ) null = ! ) ) ( name . VAR_1 ( ( if else } ; ) ( email . VAR_1 return { ) null = ! ) ) ( email . VAR_1 ( ( if { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String static public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } } ; ) VAR_2 , ) ( get . ) ( getId . VAR_2 ( METHOD_4 ; ) VAR_1 , ) ( get . ) ( getId . VAR_1 ( METHOD_4 ; ) STRING_2 ( METHOD_4 ; ) ( insert . ) null , null , null , null , repo ( METHOD_3 = VAR_2 com.google.gerrit.reviewdb.client.Change ; ) ( insert . ) null , null , null , null , repo ( METHOD_3 = VAR_1 com.google.gerrit.reviewdb.client.Change ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 get ( TYPE_2 VAR_1 ) { final TYPE_3 ref = TYPE_4 . METHOD_1 ( VAR_1 ) ; if ( ref ! = null ) { return new TYPE_5 ( ) { public java.lang.String getName ( ) { return ref . getName ( ) ; } public TYPE_6 METHOD_2 ( ) { return ref . METHOD_3 ( ) ; } public java.lang.String METHOD_4 ( ) { return null ; } public java.lang.String METHOD_5 ( ) { return null ; } } ; } return null ; } } ; null return } ; } } ; null return { ) ( METHOD_5 java.lang.String public } ; null return { ) ( METHOD_4 java.lang.String public } ; ) ( METHOD_3 . ref return { ) ( METHOD_2 TYPE_6 public } ; ) ( getName . ref return { ) ( getName java.lang.String public { ) ( TYPE_5 new return { ) null = ! ref ( if ; ) VAR_1 ( METHOD_1 . TYPE_4 = ref TYPE_3 final { ) VAR_1 TYPE_2 ( get TYPE_1 public 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { VAR_1 . append ( ( STRING_1 + line ) ) ; try { final java.lang.String VAR_4 = VAR_2 . METHOD_2 ( VAR_3 , line ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( VAR_4 ) ; } catch ( TYPE_2 e ) { } VAR_1 . append ( STRING_3 ) ; } } ; ) STRING_3 ( append . VAR_1 } { ) e TYPE_2 ( catch } ; ) VAR_4 ( append . VAR_1 ; ) STRING_2 ( append . VAR_1 ; ) line , VAR_3 ( METHOD_2 . VAR_2 = VAR_4 java.lang.String final { try ; ) ) line + STRING_1 ( ( append . VAR_1 { ) line int , VAR_3 short , VAR_2 TYPE_1 , VAR_1 java.lang.StringBuilder ( METHOD_1 void private 
private static void METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 . sshd ( config , VAR_1 ) ; TYPE_4 . METHOD_2 ( config , VAR_1 ) ; TYPE_4 . user ( config , VAR_1 ) ; TYPE_4 . auth ( config , VAR_1 ) ; TYPE_4 . METHOD_3 ( config , VAR_1 ) ; } } ; ) VAR_1 , config ( METHOD_3 . TYPE_4 ; ) VAR_1 , config ( auth . TYPE_4 ; ) VAR_1 , config ( user . TYPE_4 ; ) VAR_1 , config ( METHOD_2 . TYPE_4 ; ) VAR_1 , config ( sshd . TYPE_4 { TYPE_3 throws ) VAR_1 TYPE_2 , config TYPE_1 ( METHOD_1 void static private 
private static void METHOD_1 ( final byte [ ] VAR_1 , final TYPE_1 out ) { final byte [ ] VAR_2 = out . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) assertEquals ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } } ; ) ] i [ VAR_2 , ] i [ VAR_1 ( assertEquals ) ++ i ; ) length . VAR_1 ( < i ; 0 = i int ( for ; ) ( METHOD_2 . out = VAR_2 ] [ byte final { ) out TYPE_1 final , VAR_1 ] [ byte final ( METHOD_1 void static private 
public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( psId . getParentKey ( ) ) ; if ( c == null ) { return null ; } TYPE_1 notes = VAR_1 . create ( c ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ; return ps ! = null ? ps . METHOD_2 ( ) : null ; } } ; null : ) ( METHOD_2 . ps ? null = ! ps return ; ) psId , notes , db ( get . VAR_2 = ps com.google.gerrit.reviewdb.client.PatchSet ; ) c ( create . VAR_1 = notes TYPE_1 } ; null return { ) null == c ( if ; ) ) ( getParentKey . psId ( get . ) ( changes . db = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) psId com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 > java.lang.String < java.util.List public 
public boolean METHOD_1 ( ) { while ( ( ( VAR_1 ) == null ) & & ( VAR_2 . METHOD_1 ( ) ) ) { TYPE_1 < TYPE_2 > p = VAR_2 . METHOD_2 ( ) . get ( ) ; if ( p ! = null ) { try { VAR_1 = p . get ( ) ; } catch ( TYPE_3 e ) { VAR_3 . error ( ( ( STRING_1 + p ) + STRING_2 ) , e ) ; } } } return ( VAR_1 ) ! = null ; } } ; null = ! ) VAR_1 ( return } } } ; ) e , ) STRING_2 + ) p + STRING_1 ( ( ( error . VAR_3 { ) e TYPE_3 ( catch } ; ) ( get . p = VAR_1 { try { ) null = ! p ( if ; ) ( get . ) ( METHOD_2 . VAR_2 = p > TYPE_2 < TYPE_1 { ) ) ) ( METHOD_1 . VAR_2 ( & & ) null == ) VAR_1 ( ( ( while { ) ( METHOD_1 boolean public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) & & ( ! ( METHOD_2 ( db , null ) ) ) ) { return false ; } return METHOD_3 ( ) ; } } ; ) ( METHOD_3 return } ; false return { ) ) ) ) null , db ( METHOD_2 ( ! ( & & ) ) VAR_1 ( == ) ) ( getStatus . ) ( getChange ( ( ( if { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 ; if ( VAR_1 instanceof TYPE_3 ) { VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ; } else { VAR_2 = TYPE_3 . METHOD_4 ( ) ; } if ( VAR_2 ! = null ) { METHOD_5 ( true ) ; METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 , VAR_3 ) ) ; } else { METHOD_5 ( false ) ; } super . METHOD_1 ( event ) ; } } ; ) event ( METHOD_1 . super } ; ) false ( METHOD_5 { else } ; ) ) VAR_3 , VAR_2 ( METHOD_7 . TYPE_4 ( METHOD_6 ; ) true ( METHOD_5 { ) null = ! VAR_2 ( if } ; ) ( METHOD_4 . TYPE_3 = VAR_2 { else } ; ) ( METHOD_3 . ) ) VAR_1 ( ) TYPE_3 ( ( = VAR_2 { ) TYPE_3 instanceof VAR_1 ( if ; VAR_2 com.google.gerrit.reviewdb.client.Project.NameKey ; ) ( METHOD_2 . event = VAR_1 TYPE_2 { ) event TYPE_1 ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; } } ; } } ; ) db ( of . TYPE_3 return { ) ( METHOD_3 > com.google.gerrit.reviewdb.server.ReviewDb < TYPE_4 public } ; VAR_2 return { ) ( METHOD_2 TYPE_2 public { ) ( TYPE_1 new return ; ) VAR_1 , ) db ( of . TYPE_3 ( create . VAR_3 = VAR_2 TYPE_2 final { ) VAR_1 com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( METHOD_6 . ) VAR_11 ( METHOD_6 . ) VAR_10 ( METHOD_5 . ) VAR_9 , VAR_8 ( METHOD_5 . ) VAR_7 ( to . ) VAR_4 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_6 ( assertThat ; ) VAR_5 , VAR_4 , changeId . VAR_1 ( METHOD_3 ; ) VAR_3 , VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return ; } TYPE_7 rsp = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , VAR_2 ) ; } } } } ; ) VAR_2 , req ( METHOD_1 . VAR_3 { ) ) rsp , req ( METHOD_3 ( if ; ) ) ) VAR_2 ( ) HttpServletResponse . TYPE_8 ( ( ( TYPE_7 new = rsp TYPE_7 } ; return ; ) VAR_2 , VAR_1 ( METHOD_1 . VAR_3 { ) ) ) req ( METHOD_2 . TYPE_6 ( ! ( if ; ) ) VAR_1 ( ) TYPE_5 ( ( = req TYPE_5 { TYPE_4 , java.io.IOException throws ) VAR_3 TYPE_3 , VAR_2 TYPE_2 , VAR_1 TYPE_1 ( METHOD_1 void public 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( base , revision , path ) ) ; VAR_1 . METHOD_7 ( TYPE_5 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_8 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_8 . java.util.Collections return ; ) ) ( METHOD_4 . TYPE_5 ( METHOD_7 . VAR_1 ; ) ) path , revision , base ( METHOD_6 . TYPE_4 ( METHOD_5 . VAR_1 ; ) ) ) ( METHOD_4 . TYPE_3 ( METHOD_3 . ) ( TYPE_2 new ( METHOD_2 . VAR_1 ; ) ( TYPE_1 new = VAR_1 TYPE_1 { ) ( METHOD_1 > TYPE_1 < java.util.List private 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 { try { if ( rsrc . METHOD_1 ( ) ) { throw new TYPE_5 ( STRING_1 ) ; } if ( ! ( METHOD_2 ( rsrc ) ) ) { VAR_1 . METHOD_3 ( rsrc ) ; } return TYPE_1 . METHOD_4 ( STRING_2 ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_3 , e ) ; } } } } ; ) e , STRING_3 ( TYPE_4 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ( getMessage . e ( TYPE_7 new throw { ) e TYPE_6 ( catch } ; ) STRING_2 ( METHOD_4 . TYPE_1 return } ; ) rsrc ( METHOD_3 . VAR_1 { ) ) ) rsrc ( METHOD_2 ( ! ( if } ; ) STRING_1 ( TYPE_5 new throw { ) ) ( METHOD_1 . rsrc ( if { try { TYPE_4 throws ) input TYPE_3 , rsrc TYPE_2 ( apply > java.lang.String < TYPE_1 public 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . AccountGroup group = db . METHOD_1 ( ) . get ( VAR_1 ) ; METHOD_2 ( db , group ) ; group . METHOD_3 ( VAR_2 ) ; db . METHOD_1 ( ) . update ( java.util.Collections.singleton ( group ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; return VAR_4 ; } } ; VAR_4 return ; ) VAR_1 ( METHOD_4 . VAR_3 ; ) ) group ( java.util.Collections.singleton ( update . ) ( METHOD_1 . db ; ) VAR_2 ( METHOD_3 . group ; ) group , db ( METHOD_2 ; ) VAR_1 ( get . ) ( METHOD_1 . db = group AccountGroup . TYPE_2 final { OrmException . TYPE_4 , TYPE_3 throws ) db ReviewDb . TYPE_2 final ( run TYPE_1 public 
private static void METHOD_1 ( TYPE_1 req ) throws TYPE_2 { if ( ( ! ( STRING_1 . equals ( req . METHOD_2 ( ) ) ) ) & & ( ! ( STRING_2 . equals ( req . METHOD_2 ( ) ) ) ) ) { throw new TYPE_2 ( ) ; } } } } ; ) ( TYPE_2 new throw { ) ) ) ) ) ( METHOD_2 . req ( equals . STRING_2 ( ! ( & & ) ) ) ) ( METHOD_2 . req ( equals . STRING_1 ( ! ( ( if { TYPE_2 throws ) req TYPE_1 ( METHOD_1 void static private 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_7 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) ; } } ; ) ( METHOD_6 . ) ) ( METHOD_5 . ) ( METHOD_7 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ( METHOD_6 . ) ) ( METHOD_5 . ) ( METHOD_4 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) VAR_2 ( isEqualTo . ) ) ( METHOD_3 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) STRING_1 , ) 1 ( Id . com.google.gerrit.reviewdb.client.Change new ( METHOD_2 . TYPE_1 = VAR_1 TYPE_1 { ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( int index , TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; return VAR_4 ; } } ; VAR_4 return ; ) ) ) ( METHOD_5 . TYPE_4 ( METHOD_4 . TYPE_3 , null , VAR_1 , VAR_2 ( METHOD_3 = VAR_4 TYPE_1 } ; null return { ) 0 < VAR_2 ( if ; ) VAR_3 , false , index ( METHOD_2 = VAR_2 int { ) VAR_1 TYPE_2 , index int ( METHOD_1 TYPE_1 public 
public TYPE_1 METHOD_1 ( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return new TYPE_3 ( ) . METHOD_2 ( new TYPE_4 . Key ( project , repo , VAR_1 , VAR_2 , VAR_3 ) ) ; } catch ( java.io.IOException e ) { VAR_4 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ; return VAR_5 ; } } } } ; VAR_5 return ; ) e , ) ) ) ( getName . ) ( getProject . project ( + ) STRING_2 + ) ) ) ( name . VAR_2 ( + STRING_1 ( ( ( ( METHOD_3 . VAR_4 { ) e java.io.IOException ( catch } ; ) ) VAR_3 , VAR_2 , VAR_1 , repo , project ( Key . TYPE_4 new ( METHOD_2 . ) ( TYPE_3 new return { try { ) VAR_2 org.eclipse.jgit.lib.ObjectId , VAR_1 org.eclipse.jgit.lib.ObjectId , repo org.eclipse.jgit.lib.Repository , project TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , java.io.IOException { METHOD_2 ( ctx ) ; VAR_1 = VAR_2 . get ( ctx . METHOD_3 ( ) , commit , patchSet . getId ( ) ) ; change . METHOD_4 ( VAR_1 ) ; if ( ! ( VAR_3 ) ) { return ; } ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , patchSet . getRefName ( ) ) ) ; } } ; ) ) ) ( getRefName . patchSet , commit , ) ( METHOD_6 . org.eclipse.jgit.lib.ObjectId ( ReceiveCommand . TYPE_3 new ( METHOD_5 . ctx } ; return { ) ) VAR_3 ( ! ( if ; ) VAR_1 ( METHOD_4 . change ; ) ) ( getId . patchSet , commit , ) ( METHOD_3 . ctx ( get . VAR_2 = VAR_1 ; ) ctx ( METHOD_2 { java.io.IOException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 void public 
void METHOD_1 ( int VAR_1 , int VAR_2 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ; if ( VAR_1 < VAR_2 ) { int VAR_3 = VAR_2 - VAR_1 ; METHOD_4 ( VAR_3 ) ; } else if ( VAR_1 > VAR_2 ) { int VAR_4 = VAR_1 - VAR_2 ; METHOD_5 ( VAR_4 ) ; } } } } ; ) VAR_4 ( METHOD_5 ; VAR_2 - VAR_1 = VAR_4 int { ) VAR_2 > VAR_1 ( if else } ; ) VAR_3 ( METHOD_4 ; VAR_1 - VAR_2 = VAR_3 int { ) VAR_2 < VAR_1 ( if ; ) ) VAR_2 , VAR_1 ( METHOD_3 . TYPE_1 ( METHOD_2 { ) VAR_2 int , VAR_1 int ( METHOD_1 void 
private TYPE_1 METHOD_1 ( TYPE_2 rsrc , java.lang.String VAR_1 ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 VAR_2 = new TYPE_4 ( ) ; VAR_3 = VAR_1 ; VAR_4 = VAR_5 ; VAR_6 = true ; VAR_7 = VAR_8 ; return VAR_9 . METHOD_2 ( rsrc , VAR_2 ) ; } } ; ) VAR_2 , rsrc ( METHOD_2 . VAR_9 return ; VAR_8 = VAR_7 ; true = VAR_6 ; VAR_5 = VAR_4 ; VAR_1 = VAR_3 ; ) ( TYPE_4 new = VAR_2 TYPE_4 { java.io.IOException , com.google.gwtorm.server.OrmException , TYPE_3 throws ) VAR_1 java.lang.String , rsrc TYPE_2 ( METHOD_1 TYPE_1 private 
static TYPE_1 METHOD_1 ( TYPE_2 type ) { return new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( type . getName ( ) ) , TYPE_4 . METHOD_2 ( type . getId ( ) ) , TYPE_4 . METHOD_2 ( type . METHOD_3 ( ) ) , new TYPE_5 ( type . METHOD_4 ( ) . getValue ( ) ) , new TYPE_5 ( type . METHOD_5 ( ) . getValue ( ) ) ) ; } } ; ) ) ) ( getValue . ) ( METHOD_5 . type ( TYPE_5 new , ) ) ( getValue . ) ( METHOD_4 . type ( TYPE_5 new , ) ) ( METHOD_3 . type ( METHOD_2 . TYPE_4 , ) ) ( getId . type ( METHOD_2 . TYPE_4 , ) ) ( getName . type ( METHOD_2 . TYPE_4 , VAR_1 ( TYPE_3 new return { ) type TYPE_2 ( METHOD_1 TYPE_1 static 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = table . METHOD_2 ( event ) ; if ( VAR_1 == null ) { return ; } if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } else if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { } else if ( ( METHOD_6 ( VAR_1 . METHOD_5 ( ) ) ) ! = null ) { METHOD_7 ( VAR_1 . METHOD_5 ( ) ) ; } } } } ; ) ) ( METHOD_5 . VAR_1 ( METHOD_7 { ) null = ! ) ) ) ( METHOD_5 . VAR_1 ( METHOD_6 ( ( if else } { ) ) VAR_3 ( == ) ) ( METHOD_3 . VAR_1 ( ( if else } ; ) ) ( METHOD_5 . VAR_1 ( METHOD_4 { ) ) VAR_2 ( == ) ) ( METHOD_3 . VAR_1 ( ( if } ; return { ) null == VAR_1 ( if ; ) event ( METHOD_2 . table = VAR_1 TYPE_2 final { ) event TYPE_1 final ( METHOD_1 void public 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { java.lang.String name = METHOD_2 ( TYPE_3 . METHOD_3 ( req ) , TYPE_4 . METHOD_4 ( req ) , req , res ) ; if ( name == null ) { return ; } TYPE_5 out = METHOD_5 ( req , res ) ; out . METHOD_6 ( TYPE_6 . METHOD_7 ( name ) ) ; out . close ( ) ; } } ; ) ( close . out ; ) ) name ( METHOD_7 . TYPE_6 ( METHOD_6 . out ; ) res , req ( METHOD_5 = out TYPE_5 } ; return { ) null == name ( if ; ) res , req , ) req ( METHOD_4 . TYPE_4 , ) req ( METHOD_3 . TYPE_3 ( METHOD_2 = name java.lang.String { java.io.IOException throws ) res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void protected 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , TYPE_3 < java.lang.String > VAR_2 , TYPE_3 < java.lang.String > VAR_3 , TYPE_3 < java.lang.String > VAR_4 ) { TYPE_4 e = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( ! ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } for ( TYPE_5 VAR_6 : VAR_5 ) { VAR_6 . METHOD_4 ( e ) ; } } } } ; ) e ( METHOD_4 . VAR_6 { ) VAR_5 : VAR_6 TYPE_5 ( for } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_5 ( ! ( if ; ) VAR_4 , VAR_3 , VAR_2 , VAR_1 , change ( TYPE_4 new = e TYPE_4 { ) VAR_4 > java.lang.String < TYPE_3 , VAR_3 > java.lang.String < TYPE_3 , VAR_2 > java.lang.String < TYPE_3 , VAR_1 TYPE_2 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
private void METHOD_1 ( TYPE_1 s , java.lang.String changeId , int VAR_1 ) throws java.io.IOException { TYPE_2 r = s . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_3 ( ) . label ( STRING_3 , 2 ) ) ; org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } } ; ) ( METHOD_4 . r ; ) ) ( METHOD_3 . r , VAR_1 ( org.junit.Assert.assertEquals ; ) ) 2 , STRING_3 ( label . ) ( TYPE_3 new , ) STRING_2 + ) changeId + STRING_1 ( ( ( METHOD_2 . s = r TYPE_2 { java.io.IOException throws ) VAR_1 int , changeId java.lang.String , s TYPE_1 ( METHOD_1 void private 
static TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 group = ( ( VAR_3 ! = null ) & & ( ( VAR_3 . METHOD_1 ( ) ) ! = null ) ) ? VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) : null ; return new TYPE_6 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) , group ) ; } } ; ) group , ) ( getName . VAR_2 , ) ( getName . VAR_1 ( TYPE_6 new return ; null : ) ( METHOD_2 . ) ( METHOD_1 . VAR_3 ? ) ) null = ! ) ) ( METHOD_1 . VAR_3 ( ( & & ) null = ! VAR_3 ( ( = group TYPE_5 { ) VAR_3 TYPE_4 , VAR_2 TYPE_3 , VAR_1 TYPE_2 ( create TYPE_1 static 
private void METHOD_1 ( TYPE_1 cm ) { if ( cm . METHOD_2 ( ) ) { TYPE_2 VAR_1 = cm . METHOD_3 ( ) ; cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; cm . METHOD_6 ( null ) ; } } } } ; ) null ( METHOD_6 . cm ; ) ) ( METHOD_5 . VAR_3 , VAR_2 , VAR_1 ( METHOD_4 . cm ; ) ( METHOD_3 . cm = VAR_1 TYPE_2 { ) ) ( METHOD_2 . cm ( if { ) cm TYPE_1 ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 ) == null ) { VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ; } else { VAR_1 = VAR_2 ; } return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_4 . create ( VAR_5 , new TYPE_3 < TYPE_2 > ( ) { public TYPE_2 get ( ) { return VAR_1 ; } } , VAR_6 ) ) ; } } ; ) ) VAR_6 , } } ; VAR_1 return { ) ( get TYPE_2 public { ) ( > TYPE_2 < TYPE_3 new , VAR_5 ( create . VAR_4 , VAR_1 , ) ( get . VAR_3 ( TYPE_1 new return } ; VAR_2 = VAR_1 { else } ; ) ( METHOD_2 . ) ( get . VAR_3 = VAR_1 { ) null == ) VAR_2 ( ( if ; VAR_1 TYPE_2 final { ) ( METHOD_1 TYPE_1 private 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new TYPE_1 < java.lang.String > ( ) ; for ( TYPE_2 VAR_3 : METHOD_2 ( ) ) { TYPE_3 VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 ! = null ) { VAR_2 . add ( VAR_3 . METHOD_4 ( ) ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) ) ( METHOD_4 . VAR_3 ( add . VAR_2 { ) null = ! VAR_4 ( if ; ) VAR_1 ( METHOD_3 . VAR_3 = VAR_4 TYPE_3 { ) ) ( METHOD_2 : VAR_3 TYPE_2 ( for ; ) ( > java.lang.String < TYPE_1 new = VAR_2 > java.lang.String < java.util.Set { ) VAR_1 java.lang.String ( METHOD_1 > java.lang.String < java.util.Set private 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( STRING_2 + STRING_3 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_4 ) , new TYPE_4 ( new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_5 . NameKey ( STRING_5 ) , new TYPE_5 . Id ( 1 ) , new TYPE_6 ( STRING_4 ) ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ; } } ; ) ( METHOD_3 . ) ) STRING_7 , STRING_6 , projectName ( METHOD_2 . VAR_1 ( com.google.common.truth.Truth.assertThat ; ) ) ) ) STRING_4 ( TYPE_6 new , ) 1 ( Id . TYPE_5 new , ) STRING_5 ( NameKey . TYPE_5 new ( AccountGroup . com.google.gerrit.reviewdb.client new ( TYPE_4 new , ) STRING_4 ( TYPE_3 new , ) config , projectName ( TYPE_2 new ( TYPE_1 new = VAR_1 TYPE_1 ; ) STRING_3 + STRING_2 ( + STRING_1 = config java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_4 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } } ; ) VAR_3 , VAR_2 ( METHOD_6 . ) VAR_11 ( METHOD_6 . ) VAR_10 ( METHOD_5 . ) VAR_9 , VAR_4 ( METHOD_5 . ) VAR_8 ( to . ) VAR_7 ( to . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_6 ( assertThat ; ) VAR_5 , VAR_4 , changeId . VAR_1 ( METHOD_3 ; ) VAR_3 , VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out ; out = METHOD_3 ( in ) ; METHOD_4 ( ( ( out instanceof TYPE_2 ) || ( out instanceof TYPE_3 ) ) ) ; VAR_1 . METHOD_5 ( null ) ; out = METHOD_3 ( in ) ; METHOD_4 ( ( out instanceof TYPE_4 ) ) ; } } ; ) ) TYPE_4 instanceof out ( ( METHOD_4 ; ) in ( METHOD_3 = out ; ) null ( METHOD_5 . VAR_1 ; ) ) ) TYPE_3 instanceof out ( || ) TYPE_2 instanceof out ( ( ( METHOD_4 ; ) in ( METHOD_3 = out ; out > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ; ) STRING_1 ( METHOD_2 = in > com.google.gerrit.server.query.change.ChangeData < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2 = new TYPE_4 < > ( ) ; for ( TYPE_5 VAR_3 : VAR_4 ) { try { VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_2 ( e . METHOD_3 ( ) ) ; throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; } } return VAR_2 ; } } ; VAR_2 return } } ; ) VAR_2 , ) ( getMessage . e ( TYPE_3 new throw ; ) ) ( METHOD_3 . e ( METHOD_2 . VAR_2 { ) e TYPE_3 ( catch } ; ) ) VAR_1 ( METHOD_1 . VAR_3 ( METHOD_2 . VAR_2 { try { ) VAR_4 : VAR_3 TYPE_5 ( for ; ) ( > < TYPE_4 new = VAR_2 > TYPE_1 < java.util.List { TYPE_3 throws ) VAR_1 TYPE_2 ( METHOD_1 > TYPE_1 < java.util.List public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 . METHOD_6 ( project ) ) ) ) ; VAR_4 = VAR_2 . METHOD_7 ( ) . parseCommit ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( STRING_1 ) . METHOD_10 ( ) ) ; VAR_5 = admin . getId ( ) ; VAR_6 = VAR_7 . get ( ) ; } } ; ) ( get . VAR_7 = VAR_6 ; ) ( getId . admin = VAR_5 ; ) ) ( METHOD_10 . ) STRING_1 ( METHOD_9 . ) ( METHOD_8 . VAR_2 ( parseCommit . ) ( METHOD_7 . VAR_2 = VAR_4 ; ) ) ) ) project ( METHOD_6 . VAR_3 ( ) TYPE_3 ( ( ( TYPE_2 new = VAR_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ) { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } } } ; false return ; ) e , msg ( error . VAR_1 ; ) ) ( METHOD_5 . ) ( getProject , ) ( name . commit , STRING_1 ( java.lang.String.format = msg java.lang.String { ) e java.io.IOException ( catch } ; ) ) ( values . ) ( METHOD_4 . repo , commit , rw , db , repo ( METHOD_3 return { ) ) ( METHOD_2 = repo org.eclipse.jgit.lib.Repository ( try { ) commit org.eclipse.jgit.revwalk.RevCommit , rw org.eclipse.jgit.revwalk.RevWalk , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
private java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) ! = null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) ( METHOD_4 . TYPE_3 return } } { ) e TYPE_2 ( catch } ; ) ( METHOD_3 . ) ) ( METHOD_2 ( TYPE_1 new return { try { ) null = ! ) ) ( METHOD_2 ( ( if { ) ( METHOD_1 java.lang.String private 
public void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_1 . PatchSet ps ) throws TYPE_2 . OrmException { patchSet = ps ; info = db . METHOD_2 ( ) . get ( patchSet . getKey ( ) ) ; VAR_1 = db . METHOD_3 ( ) . METHOD_4 ( patchSet . getKey ( ) ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) ) ( getKey . patchSet ( METHOD_4 . ) ( METHOD_3 . db = VAR_1 ; ) ) ( getKey . patchSet ( get . ) ( METHOD_2 . db = info ; ps = patchSet { OrmException . TYPE_2 throws ) ps PatchSet . TYPE_1 final , db ReviewDb . TYPE_1 final ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_2 cfg , java.lang.String revision , TYPE_3 out ) { return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( METHOD_8 ( cfg , revision ) ) . METHOD_9 ( true ) . METHOD_10 ( out ) . get ( ) ; } } ; ) ( get . ) out ( METHOD_10 . ) true ( METHOD_9 . ) ) revision , cfg ( METHOD_8 ( METHOD_7 . ) VAR_4 ( METHOD_6 . ) VAR_3 ( METHOD_5 . ) VAR_2 ( METHOD_4 . ) VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_4 return { ) out TYPE_3 , revision java.lang.String , cfg TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_6 event = new TYPE_6 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_7 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_8 . log , e ) ; } } } } } } ; ) e , log . TYPE_8 ( METHOD_5 . util { ) e java.lang.Exception ( catch } ; ) event ( METHOD_4 . VAR_5 { try { ) VAR_4 : VAR_5 TYPE_7 ( for ; ) VAR_3 , VAR_2 , VAR_1 , revision , change ( TYPE_6 new = event TYPE_6 } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_4 ( ! ( if { ) VAR_3 TYPE_5 , VAR_2 TYPE_4 , VAR_1 TYPE_3 , revision TYPE_2 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_2 = VAR_4 . METHOD_3 ( ) ; if ( ! ( VAR_2 . METHOD_4 ( ) ) ) return VAR_1 . METHOD_5 ( ) ; VAR_3 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_6 ( ) ; VAR_5 = this . VAR_6 ; return VAR_3 ; } } ; VAR_3 return ; VAR_6 . this = VAR_5 ; ) ( METHOD_6 . ) ) VAR_2 ( ) TYPE_5 ( ( = VAR_3 ; ) ( METHOD_5 . VAR_1 return ) ) ) ( METHOD_4 . VAR_2 ( ! ( if ; ) ( METHOD_3 . VAR_4 = VAR_2 ; VAR_3 TYPE_4 ; VAR_2 TYPE_3 ; ) ( METHOD_2 . VAR_1 { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 public 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; final TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . add ( file ( STRING_4 ) ) ; METHOD_5 ( VAR_1 . commit ( ) ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ; } } ; ) ) STRING_1 ( METHOD_2 , ) ) STRING_5 + STRING_2 ( + STRING_1 ( ( assertEquals ; ) ) ( commit . VAR_1 ( METHOD_5 ; ) ) STRING_4 ( file ( add . VAR_1 ; ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 = VAR_1 TYPE_1 final ; ) ) STRING_1 ( METHOD_2 , ) ) STRING_3 + STRING_2 ( + STRING_1 ( ( assertEquals { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_6 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } } } } ; ) e , log . TYPE_7 ( METHOD_5 . util { ) e java.lang.Exception ( catch } ; ) event ( METHOD_4 . VAR_5 { try { ) VAR_4 : VAR_5 TYPE_6 ( for ; ) VAR_3 , VAR_2 , VAR_1 , revision , change ( TYPE_5 new = event TYPE_5 } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_4 ( ! ( if { ) VAR_3 TYPE_4 , VAR_2 java.lang.String , VAR_1 TYPE_3 , revision TYPE_2 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
private double METHOD_1 ( double VAR_1 ) { int line = VAR_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_1 p = VAR_3 . METHOD_1 ( VAR_4 , line ) ; double VAR_5 = VAR_2 . METHOD_3 ( VAR_6 , STRING_1 ) ; double VAR_7 = VAR_8 . METHOD_3 ( VAR_9 , STRING_1 ) ; return TYPE_2 . METHOD_4 ( 0 , ( VAR_7 + ( VAR_1 - VAR_5 ) ) ) ; } } ; ) ) ) VAR_5 - VAR_1 ( + VAR_7 ( , 0 ( METHOD_4 . TYPE_2 return ; ) STRING_1 , VAR_9 ( METHOD_3 . VAR_8 = VAR_7 double ; ) STRING_1 , VAR_6 ( METHOD_3 . VAR_2 = VAR_5 double ; ) line , VAR_4 ( METHOD_1 . VAR_3 = p TYPE_1 ; ) STRING_1 , VAR_1 ( METHOD_2 . VAR_2 = line int { ) VAR_1 double ( METHOD_1 double private 
private int insert ( final java.util.List < TYPE_1 > in , int row ) { for ( TYPE_2 < TYPE_1 > VAR_1 = in . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; ) { final TYPE_1 c = VAR_1 . METHOD_3 ( ) ; table . METHOD_4 ( row ) ; table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) ; METHOD_7 ( row , VAR_3 , c , ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ; row ++ ; } return row ; } } ; row return } ; ++ row ; ) ) ) ) ( METHOD_2 . VAR_1 ( ! ( , c , VAR_3 , row ( METHOD_7 ; ) VAR_2 , 0 , row ( METHOD_6 . ) ( METHOD_5 . table ; ) row ( METHOD_4 . table ; ) ( METHOD_3 . VAR_1 = c TYPE_1 final { ) ; ) ( METHOD_2 . VAR_1 ; ) ( METHOD_1 . in = VAR_1 > TYPE_1 < TYPE_2 ( for { ) row int , in > TYPE_1 < java.util.List final ( insert int private 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; } } ; ) db ( METHOD_3 . ) change ( METHOD_2 . VAR_3 return ; ) user ( METHOD_2 . VAR_1 = VAR_3 TYPE_3 } ; false return { ) null == VAR_1 ( if ; ) ) ( getProject . change ( get . VAR_2 = VAR_1 TYPE_2 { com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb , user TYPE_1 , change com.google.gerrit.reviewdb.client.Change ( METHOD_1 boolean private 
public void set ( TYPE_1 VAR_1 ) { set ( ( ( VAR_1 . css ( ) ) ! = null ? VAR_1 . css ( ) : VAR_2 ) , ( ( VAR_1 . METHOD_1 ( ) ) ! = null ? VAR_1 . METHOD_1 ( ) : VAR_3 ) , ( ( VAR_1 . METHOD_2 ( ) ) ! = null ? VAR_1 . METHOD_2 ( ) : VAR_4 ) ) ; } } ; ) ) VAR_4 : ) ( METHOD_2 . VAR_1 ? null = ! ) ) ( METHOD_2 . VAR_1 ( ( , ) VAR_3 : ) ( METHOD_1 . VAR_1 ? null = ! ) ) ( METHOD_1 . VAR_1 ( ( , ) VAR_2 : ) ( css . VAR_1 ? null = ! ) ) ( css . VAR_1 ( ( ( set { ) VAR_1 TYPE_1 ( set void public 
public static void METHOD_1 ( final TYPE_1 VAR_1 , int value ) throws java.io.IOException { while ( true ) { if ( ( value & ( ~ INT_1 ) ) == 0 ) { VAR_1 . METHOD_2 ( value ) ; return ; } else { VAR_1 . METHOD_2 ( ( ( value & INT_1 ) | INT_2 ) ) ; value > > > = INT_3 ; } } } } } } ; INT_3 = > > > value ; ) ) INT_2 | ) INT_1 & value ( ( ( METHOD_2 . VAR_1 { else } ; return ; ) value ( METHOD_2 . VAR_1 { ) 0 == ) ) INT_1 ~ ( & value ( ( if { ) true ( while { java.io.IOException throws ) value int , VAR_1 TYPE_1 final ( METHOD_1 void static public 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( req , res , c ) ; TYPE_4 . METHOD_4 ( null , res , msg ) ; } } ; ) msg , res , null ( METHOD_4 . TYPE_4 ; ) c , res , req ( METHOD_3 . TYPE_4 ; ) VAR_1 ( METHOD_2 . res { java.io.IOException throws ) c TYPE_3 , msg java.lang.String , VAR_1 int , res HttpServletResponse . TYPE_2 , req TYPE_1 ( METHOD_1 void static public 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final java.lang.String name = STRING_2 ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; METHOD_5 ( r ) ; assertEquals ( ( name + STRING_3 ) , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } } ; ) VAR_1 ( METHOD_7 . TYPE_1 ; ) email . r , ) ( METHOD_6 . VAR_2 ( assertEquals ; ) name . r , ) STRING_3 + name ( ( assertEquals ; ) r ( METHOD_5 ; ) user ( METHOD_4 . ) ( create = r TYPE_2 final ; ) VAR_1 ( METHOD_3 . TYPE_1 ; ) null , name ( user = user com.google.gerrit.reviewdb.client.Account.Id final ; STRING_2 = name java.lang.String final ; ) STRING_1 ( METHOD_2 { ) ( METHOD_1 void public 
public void onSuccess ( final TYPE_1 result ) { VAR_1 = result . config ; if ( ( result . account ) ! = null ) { VAR_2 = result . account ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; VAR_5 = VAR_6 ; } if ( ( VAR_7 ) ! = null ) { VAR_8 = VAR_7 ; METHOD_1 ( INT_1 ) ; TYPE_4 VAR_9 ; diff ( VAR_10 ) ; } METHOD_2 ( ) ; } } ; ) ( METHOD_2 } ; ) VAR_10 ( diff ; VAR_9 TYPE_4 ; ) INT_1 ( METHOD_1 ; VAR_7 = VAR_8 { ) null = ! ) VAR_7 ( ( if } ; VAR_6 = VAR_5 ; VAR_4 TYPE_3 ; VAR_3 TYPE_2 ; account . result = VAR_2 { ) null = ! ) account . result ( ( if ; config . result = VAR_1 { ) result TYPE_1 final ( onSuccess void public 
private static long METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String path , TYPE_3 t ) throws java.io.IOException { if ( ! ( TYPE_4 . METHOD_2 ( VAR_2 ) ) ) { return 0 ; } try ( TYPE_5 VAR_3 = TYPE_5 . METHOD_3 ( VAR_1 , path , t ) ) { return VAR_3 ! = null ? repo . METHOD_4 ( VAR_3 . METHOD_5 ( 0 ) , VAR_4 ) . METHOD_6 ( ) : 0 ; } } } } ; 0 : ) ( METHOD_6 . ) VAR_4 , ) 0 ( METHOD_5 . VAR_3 ( METHOD_4 . repo ? null = ! VAR_3 return { ) ) t , path , VAR_1 ( METHOD_3 . TYPE_5 = VAR_3 TYPE_5 ( try } ; 0 return { ) ) ) VAR_2 ( METHOD_2 . TYPE_4 ( ! ( if { java.io.IOException throws ) t TYPE_3 , path java.lang.String , VAR_2 TYPE_2 , VAR_1 TYPE_1 , repo org.eclipse.jgit.lib.Repository ( METHOD_1 long static private 
void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; VAR_3 += VAR_1 ; int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ; VAR_6 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ; VAR_7 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) ; } } ; ) ) VAR_4 , VAR_5 , VAR_5 ( TYPE_1 new ( add . VAR_7 ; ) ) ) VAR_4 - ( , ) 1 - ) VAR_3 ( ( , VAR_2 ( TYPE_1 new ( add . VAR_6 ; ) VAR_5 ( - ) VAR_3 ( = VAR_4 int ; VAR_1 += VAR_3 ; VAR_3 = VAR_2 int { ) VAR_1 int ( METHOD_1 void 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ; } else { VAR_1 = new TYPE_1 ( ) ; } } } } } } ; ) ( TYPE_1 new = VAR_1 { else } ; ) ) STRING_2 , config , ) ( METHOD_4 . TYPE_1 ( METHOD_3 . TYPE_2 ( TYPE_1 new = VAR_1 { ) ) STRING_2 ( contains . ) STRING_1 ( METHOD_2 . config ( if { ) null == ) VAR_1 ( ( if { ) ( METHOD_1 void private 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( METHOD_2 ( ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_3 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } } } ; ) ) VAR_2 ( submit . VAR_4 ( set . VAR_3 { else } ; ) ( METHOD_3 . ) ) ( toString . VAR_2 , VAR_2 ( TYPE_3 new { ) ) ( METHOD_2 ( if ; ) VAR_1 ( TYPE_2 new = VAR_2 TYPE_2 final { ) VAR_1 TYPE_1 final ( METHOD_1 void protected 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( project ) == null ) { notes = VAR_1 . METHOD_2 ( db , VAR_2 ) ; } else { notes = VAR_1 . create ( db , project , VAR_2 ) ; } change = notes . getChange ( ) ; if ( ( change ) == null ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + ( VAR_2 ) ) ) ; } METHOD_3 ( null ) ; return change ; } } ; change return ; ) null ( METHOD_3 } ; ) ) ) VAR_2 ( + STRING_1 ( ( com.google.gwtorm.server.OrmException new throw { ) null == ) change ( ( if ; ) ( getChange . notes = change } ; ) VAR_2 , project , db ( create . VAR_1 = notes { else } ; ) VAR_2 , db ( METHOD_2 . VAR_1 = notes { ) null == ) project ( ( if { com.google.gwtorm.server.OrmException throws ) ( METHOD_1 com.google.gerrit.reviewdb.client.Change public 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class , VAR_2 ) ; METHOD_2 ( VAR_3 class , VAR_4 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; bind ( VAR_5 class ) . to ( VAR_6 class ) . in ( VAR_7 ) ; bind ( VAR_8 class ) . METHOD_5 ( VAR_9 class ) ; bind ( VAR_10 class ) . to ( VAR_11 class ) ; install ( new TYPE_1 ( ) ) ; } } ; ) ) ( TYPE_1 new ( install ; ) class VAR_11 ( to . ) class VAR_10 ( bind ; ) class VAR_9 ( METHOD_5 . ) class VAR_8 ( bind ; ) VAR_7 ( in . ) class VAR_6 ( to . ) class VAR_5 ( bind ; ) ( METHOD_4 ; ) ( METHOD_3 ; ) VAR_4 , class VAR_3 ( METHOD_2 ; ) VAR_2 , class VAR_1 ( METHOD_2 { ) ( METHOD_1 void protected 
static TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_1 ) { TYPE_1 < java.lang.String , java.lang.String > result = new TYPE_2 < > ( ) ; for ( java.lang.String key : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) { result . put ( key , java.lang.String . METHOD_5 ( STRING_1 , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( key ) ) ) ) ; } return result ; } } ; result return } ; ) ) ) ) key ( get . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_3 , STRING_1 ( METHOD_5 . java.lang.String , key ( put . result { ) ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_3 : key java.lang.String ( for ; ) ( > < TYPE_2 new = result > java.lang.String , java.lang.String < TYPE_1 { ) VAR_1 > > java.lang.String < java.util.Set , java.lang.String < java.util.Map ( METHOD_1 > java.lang.String , java.lang.String < TYPE_1 static 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( r , user . email ) . VAR_3 ) . isEqualTo ( user . getId ( ) . get ( ) ) ; } } ; ) ) ( get . ) ( getId . user ( isEqualTo . ) VAR_3 . ) email . user , r ( METHOD_5 ( com.google.common.truth.Truth.assertThat ; ) user ( METHOD_4 ; ) VAR_2 , false , STRING_1 , project , VAR_1 ( METHOD_3 ; ) ( METHOD_2 = r Result . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } else if ( ( VAR_1 ) == null ) { METHOD_7 ( ) ; } else { METHOD_8 ( ) ; } } } } ; ) ( METHOD_8 { else } ; ) ( METHOD_7 { ) null == ) VAR_1 ( ( if else } ; ) ) ( METHOD_6 . ) ( METHOD_5 . ) ( METHOD_4 ( METHOD_3 . TYPE_1 { ) ) ) ( METHOD_2 . TYPE_1 ( ! ( if { ) ( METHOD_1 void 
public void METHOD_1 ( ) { if ( ( projects ) == null ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_5 ( true ) ; } } ) ; } } ; ) } } ; ) true ( METHOD_5 . projects ; ) result ( display . projects { ) result > Project . TYPE_3 < java.util.List final ( METHOD_4 void protected { ) this ( > > Project . TYPE_3 < java.util.List < TYPE_2 new ( METHOD_3 . TYPE_1 } ; ) ( METHOD_2 { ) null == ) projects ( ( if { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_1 = METHOD_3 ( repo ) ; insert ( VAR_1 ) ; java.lang.String VAR_2 = VAR_1 . METHOD_4 ( ) . getRevision ( ) . get ( ) ; METHOD_5 ( STRING_2 ) ; for ( int i = 0 ; i < = INT_1 ; i ++ ) { java.lang.String VAR_3 = VAR_2 . METHOD_6 ( 0 , ( INT_2 - i ) ) ; METHOD_5 ( VAR_3 , VAR_1 . getChange ( ) ) ; } } } } ; ) ) ( getChange . VAR_1 , VAR_3 ( METHOD_5 ; ) ) i - INT_2 ( , 0 ( METHOD_6 . VAR_2 = VAR_3 java.lang.String { ) ++ i ; INT_1 = < i ; 0 = i int ( for ; ) STRING_2 ( METHOD_5 ; ) ( get . ) ( getRevision . ) ( METHOD_4 . VAR_1 = VAR_2 java.lang.String ; ) VAR_1 ( insert ; ) repo ( METHOD_3 = VAR_1 TYPE_3 ; ) STRING_1 ( METHOD_2 = repo > TYPE_2 < TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) { TYPE_1 cfg = VAR_1 . METHOD_2 ( TYPE_2 . get ( VAR_2 class , VAR_3 class ) ) ; boolean VAR_4 = cfg . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( VAR_5 class ) . METHOD_4 ( ) ) ; int VAR_6 = cfg . METHOD_5 ( STRING_1 , STRING_3 , VAR_7 ) ; if ( VAR_4 & & ( ( VAR_8 ) > VAR_6 ) ) { VAR_9 . METHOD_6 ( ( ( STRING_4 + VAR_6 ) + STRING_5 ) ) ; VAR_8 = VAR_6 ; } } } } ; VAR_6 = VAR_8 ; ) ) STRING_5 + ) VAR_6 + STRING_4 ( ( ( METHOD_6 . VAR_9 { ) ) VAR_6 > ) VAR_8 ( ( & & VAR_4 ( if ; ) VAR_7 , STRING_3 , STRING_1 ( METHOD_5 . cfg = VAR_6 int ; ) ) ( METHOD_4 . ) class VAR_5 ( METHOD_2 . VAR_1 , STRING_2 , STRING_1 ( METHOD_3 . cfg = VAR_4 boolean ; ) ) class VAR_3 , class VAR_2 ( get . TYPE_2 ( METHOD_2 . VAR_1 = cfg TYPE_1 { ) ( METHOD_1 void private 
public boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; } else { return METHOD_4 ( ) . METHOD_9 ( ) ; } } } } ; ) ( METHOD_9 . ) ( METHOD_4 return { else } ; ) ) ( METHOD_1 . ) ( METHOD_4 ( || ) ) ) ( METHOD_8 . ) ( METHOD_7 . ) ( METHOD_6 ( || ) ) ) ( METHOD_3 . ) ( METHOD_5 ( || ) ) ) ( METHOD_3 . ) ( METHOD_4 ( || ) ) ( METHOD_3 ( ( ( ( return { ) ) ( METHOD_2 . ) ( getStatus . ) ( getChange ( if { ) ( METHOD_1 boolean public 
private TYPE_1 file ( final java.lang.String name ) throws java.io.IOException { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; final TYPE_1 e = new TYPE_1 ( name ) ; e . METHOD_2 ( VAR_3 ) ; e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ; VAR_1 . METHOD_5 ( ) ; return e ; METHOD_6 ( INT_1 ) ; TYPE_4 . a VAR_5 ; TYPE_5 to ; TYPE_6 revision ; } } ; revision TYPE_6 ; to TYPE_5 ; VAR_5 a . TYPE_4 ; ) INT_1 ( METHOD_6 ; e return ; ) ( METHOD_5 . VAR_1 ; ) ) ) name ( METHOD_4 . TYPE_3 , VAR_4 ( insert . VAR_1 ( METHOD_3 . e ; ) VAR_3 ( METHOD_2 . e ; ) name ( TYPE_1 new = e TYPE_1 final ; ) ( METHOD_1 . VAR_2 = VAR_1 TYPE_2 { java.io.IOException throws ) name java.lang.String final ( file TYPE_1 private 
private void METHOD_1 ( TYPE_1 . ProjectConfig VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = VAR_3 . create ( VAR_1 . getProject ( ) . METHOD_2 ( ) , user ) ; VAR_1 . commit ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_1 . getProject ( ) . METHOD_2 ( ) ) ; } } ; ) ) ( METHOD_2 . ) ( getProject . VAR_1 ( METHOD_3 . VAR_4 ; ) VAR_2 ( commit . VAR_1 ; ) user , ) ( METHOD_2 . ) ( getProject . VAR_1 ( create . VAR_3 = VAR_2 TYPE_2 { java.lang.Exception throws ) VAR_1 ProjectConfig . TYPE_1 ( METHOD_1 void private 
private void METHOD_1 ( final TYPE_1 event ) { synchronized ( VAR_1 ) { if ( ! ( VAR_2 . METHOD_1 ( event ) ) ) { VAR_3 = true ; } if ( ( ( VAR_4 ) == null ) & & ( ! ( VAR_5 ) ) ) { VAR_4 = VAR_6 . submit ( VAR_7 ) ; } } } } } } ; ) VAR_7 ( submit . VAR_6 = VAR_4 { ) ) ) VAR_5 ( ! ( & & ) null == ) VAR_4 ( ( ( if } ; true = VAR_3 { ) ) ) event ( METHOD_1 . VAR_2 ( ! ( if { ) VAR_1 ( synchronized { ) event TYPE_1 final ( METHOD_1 void private 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 ) ; VAR_5 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; return VAR_2 ; } } ; VAR_2 return ; ) ) ( METHOD_5 . TYPE_3 ( METHOD_4 . ) STRING_1 ( revision . ) changeId . VAR_2 ( id . ) ( changes . VAR_5 ; ) VAR_4 ( METHOD_3 ; ) VAR_3 ( METHOD_2 . VAR_1 = VAR_2 TYPE_1 { java.lang.Exception throws ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 ) { TYPE_4 e = new TYPE_4 ( change , revision , VAR_1 , VAR_2 ) ; if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } for ( TYPE_5 VAR_4 : VAR_3 ) { VAR_4 . METHOD_4 ( e ) ; } } } } ; ) e ( METHOD_4 . VAR_4 { ) VAR_3 : VAR_4 TYPE_5 ( for } ; return { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_3 ( ! ( if ; ) VAR_2 , VAR_1 , revision , change ( TYPE_4 new = e TYPE_4 { ) VAR_2 java.lang.String , VAR_1 TYPE_3 , revision TYPE_2 , change ChangeInfo . TYPE_1 ( METHOD_1 void public 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { com.google.gerrit.reviewdb.client.Change c = cd . change ( db ) ; if ( c == null ) { return false ; } TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( c , user ) ; if ( VAR_1 . METHOD_4 ( db . get ( ) ) ) { cd . METHOD_5 ( VAR_1 ) ; return true ; } } catch ( TYPE_2 e ) { } return false ; } } ; false return } { ) e TYPE_2 ( catch } } ; true return ; ) VAR_1 ( METHOD_5 . cd { ) ) ) ( get . db ( METHOD_4 . VAR_1 ( if ; ) user , c ( METHOD_3 . VAR_2 = VAR_1 TYPE_1 } ; false return { ) null == c ( if ; ) db ( change . cd = c com.google.gerrit.reviewdb.client.Change { try } ; true return { ) ) user ( METHOD_2 . cd ( if { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; install ( new TYPE_2 ( VAR_2 ) ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; METHOD_4 ( ) . to ( VAR_4 class ) ; if ( VAR_5 ) { METHOD_4 ( ) . to ( VAR_6 class ) ; } } } } ; ) class VAR_6 ( to . ) ( METHOD_4 { ) VAR_5 ( if ; ) class VAR_4 ( to . ) ( METHOD_4 ; ) class VAR_4 ( to . ) class VAR_3 ( bind ; ) ) VAR_2 ( TYPE_2 new ( install ; ) ) ( METHOD_3 . TYPE_1 ( METHOD_2 . ) class VAR_1 ( bind { ) ( METHOD_1 void protected 
public java.util.List < TYPE_1 > METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ; for ( final TYPE_2 e : VAR_2 ) { r . add ( e . METHOD_2 ( VAR_1 ) ) ; } return r ; } } ; r return } ; ) ) VAR_1 ( METHOD_2 . e ( add . r { ) VAR_2 : e TYPE_2 final ( for ; ) length . VAR_2 ( > TYPE_1 < java.util.ArrayList new = r > TYPE_1 < java.util.ArrayList final { ) VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id final ( METHOD_1 > TYPE_1 < java.util.List public 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) { if ( p instanceof TYPE_3 < ? > ) { return TYPE_4 . METHOD_2 ( p ) ; } else { return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; } } } } ; ) ) ) ( getValue . p , ) ( getName . ) ( METHOD_3 . p ( TYPE_6 new ( TYPE_5 new return { else } ; ) p ( METHOD_2 . TYPE_4 return { ) > ? < TYPE_3 instanceof p ( if { ) p > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( METHOD_1 TYPE_1 static private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 ) . to ( VAR_7 , VAR_4 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_11 ( VAR_11 ) . METHOD_11 ( VAR_3 ) ; } } ; ) VAR_3 ( METHOD_11 . ) VAR_11 ( METHOD_11 . ) VAR_10 ( METHOD_10 . ) VAR_9 ( METHOD_10 . ) VAR_8 ( to . ) VAR_4 , VAR_7 ( to . ) VAR_6 ( METHOD_9 . ) VAR_2 , STRING_2 ( METHOD_8 . ) VAR_5 ( assertThat ; ) VAR_4 , STRING_1 , VAR_2 ( METHOD_7 ; ) VAR_3 ( METHOD_6 = VAR_2 TYPE_2 ; ) ( METHOD_5 . ) ) ( METHOD_4 . VAR_1 ( METHOD_3 . ) ( METHOD_2 . TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t . METHOD_3 ( ) ) ) return false ; return VAR_2 . equals ( ( ( TYPE_4 ) ( t ) ) . VAR_2 ) ; } } ; ) VAR_2 . ) ) t ( ) TYPE_4 ( ( ( equals . VAR_2 return ; false return ) ) ) ( METHOD_3 . t ( ! ( if ; ) VAR_1 , this ( METHOD_1 . ) ) t ( ) TYPE_3 ( ( return ) ) ( METHOD_2 . t ( if { ) VAR_1 TYPE_2 , t TYPE_1 ( METHOD_1 boolean public 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id , java.lang.String VAR_1 ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ; rw . METHOD_2 ( commit ) ; this . commit = commit ; VAR_2 = commit . METHOD_3 ( ) ; this . VAR_1 = VAR_1 ; } } ; VAR_1 = VAR_1 . this ; ) ( METHOD_3 . commit = VAR_2 ; commit = commit . this ; ) commit ( METHOD_2 . rw ; ) id ( parseCommit . rw = commit org.eclipse.jgit.revwalk.RevCommit { java.io.IOException throws ) VAR_1 java.lang.String , id org.eclipse.jgit.lib.ObjectId , rw org.eclipse.jgit.revwalk.RevWalk ( METHOD_1 void public 
boolean METHOD_1 ( TYPE_1 t ) { if ( ! ( t . METHOD_2 ( ) ) ) return false ; if ( t . equals ( VAR_1 ) ) return true ; return ( ( ( TYPE_2 ) ( t ) ) . name ( ) . length ( ) ) == 1 ; } } ; 1 == ) ) ( length . ) ( name . ) ) t ( ) TYPE_2 ( ( ( return ; true return ) ) VAR_1 ( equals . t ( if ; false return ) ) ) ( METHOD_2 . t ( ! ( if { ) t TYPE_1 ( METHOD_1 boolean 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 ) ; METHOD_3 ( STRING_1 ) ; java.lang.String VAR_1 = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ; METHOD_5 ( user ) ; TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_2 , VAR_1 , false ) ) , METHOD_7 ( ) . get ( ) ) ; } } ; ) ) ( get . ) ( METHOD_7 , ) ) false , VAR_1 , STRING_2 ( branch . TYPE_3 ( of . TYPE_2 ( METHOD_6 . TYPE_1 ; ) user ( METHOD_5 ; ) ( name . ) ( METHOD_4 . ) STRING_2 ( METHOD_3 = VAR_1 java.lang.String ; ) STRING_1 ( METHOD_3 ; ) STRING_1 , project ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id key ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_1 VAR_1 = METHOD_1 ( db , key ) ; java.lang.String user = VAR_1 . METHOD_3 ( ) ; if ( user ! = null ) { VAR_2 . put ( user , TYPE_2 . of ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) ; } return VAR_1 ; } finally { db . close ( ) ; } } } } ; ) ( close . db { finally } ; VAR_1 return } ; ) ) ) ( getId . ) ( METHOD_4 . VAR_1 ( of . TYPE_2 , user ( put . VAR_2 { ) null = ! user ( if ; ) ( METHOD_3 . VAR_1 = user java.lang.String ; ) key , db ( METHOD_1 = VAR_1 TYPE_1 final { try ; ) ( METHOD_2 . schema = db com.google.gerrit.reviewdb.server.ReviewDb final { java.lang.Exception throws ) key com.google.gerrit.reviewdb.client.Account.Id ( METHOD_1 TYPE_1 public 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { TYPE_5 u = user . get ( ) ; if ( u . METHOD_1 ( ) ) { ( ( TYPE_6 ) ( u ) ) . METHOD_2 ( ) ; } return VAR_1 . get ( ) . METHOD_3 ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_4 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) change ( format . ) s ( METHOD_3 . ) ( get . VAR_1 return } ; ) ( METHOD_2 . ) ) u ( ) TYPE_6 ( ( { ) ) ( METHOD_1 . u ( if ; ) ( get . user = u TYPE_5 { try { TYPE_4 throws ) s > TYPE_3 < TYPE_2 ( get ChangeInfo . TYPE_1 public 
private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 ) == null ) { VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ; } else { VAR_1 = VAR_2 ; } TYPE_3 VAR_4 = VAR_5 . get ( ) ; if ( VAR_4 instanceof TYPE_4 ) { VAR_4 = null ; } return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_6 . METHOD_3 ( VAR_1 , VAR_7 , VAR_4 ) ) ; } } ; ) ) VAR_4 , VAR_7 , VAR_1 ( METHOD_3 . VAR_6 , VAR_1 , ) ( get . VAR_3 ( TYPE_1 new return } ; null = VAR_4 { ) TYPE_4 instanceof VAR_4 ( if ; ) ( get . VAR_5 = VAR_4 TYPE_3 } ; VAR_2 = VAR_1 { else } ; ) ( METHOD_2 . ) ( get . VAR_3 = VAR_1 { ) null == ) VAR_2 ( ( if ; VAR_1 TYPE_2 final { ) ( METHOD_1 TYPE_1 private 
protected void add ( final TYPE_1 s ) throws TYPE_2 . OrmException { final java.lang.String n = s . METHOD_1 ( ) ; METHOD_2 ( n ) ; if ( ( VAR_1 . put ( n , s ) ) ! = null ) { throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; } VAR_2 . add ( n ) ; } } ; ) n ( add . VAR_2 } ; ) ) n + STRING_1 ( ( OrmException . TYPE_2 new throw { ) null = ! ) ) s , n ( put . VAR_1 ( ( if ; ) n ( METHOD_2 ; ) ( METHOD_1 . s = n java.lang.String final { OrmException . TYPE_2 throws ) s TYPE_1 final ( add void protected 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . schema ( VAR_2 ) . METHOD_3 ( VAR_3 ) ) ) ) { return java.util.Collections . METHOD_4 ( ) ; } else { return query ( new TYPE_3 ( VAR_1 ) ) ; } } } } ; ) ) VAR_1 ( TYPE_3 new ( query return { else } ; ) ( METHOD_4 . java.util.Collections return { ) ) ) ) VAR_3 ( METHOD_3 . ) VAR_2 ( schema . TYPE_2 ( ! ( || ) ) VAR_1 ( METHOD_2 . TYPE_1 ( ( if { com.google.gwtorm.server.OrmException throws ) VAR_1 java.lang.String ( METHOD_1 > com.google.gerrit.server.query.change.ChangeData < java.util.List public 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 p ) { long VAR_1 = p . METHOD_2 ( schema ) ; long VAR_2 = p . METHOD_3 ( schema ) ; return TYPE_4 . METHOD_4 ( p . METHOD_5 ( ) . getName ( ) , ( VAR_1 ! = ( VAR_3 ) ? VAR_1 : null ) , ( VAR_2 ! = ( VAR_4 ) ? VAR_2 : null ) , false , false ) ; } } ; ) false , false , ) null : VAR_2 ? ) VAR_4 ( = ! VAR_2 ( , ) null : VAR_1 ? ) VAR_3 ( = ! VAR_1 ( , ) ( getName . ) ( METHOD_5 . p ( METHOD_4 . TYPE_4 return ; ) schema ( METHOD_3 . p = VAR_2 long ; ) schema ( METHOD_2 . p = VAR_1 long { ) p TYPE_3 , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( METHOD_1 TYPE_1 static private 
private void METHOD_1 ( TYPE_1 label , TYPE_2 status ) throws TYPE_3 { if ( ( status . METHOD_2 ( ) ) & & ( ( status . METHOD_3 ( ) ) == 1 ) ) { TYPE_2 VAR_1 = status . METHOD_4 ( 0 ) ; if ( TYPE_4 . METHOD_5 ( VAR_1 ) ) { VAR_2 = new com.google.gerrit.reviewdb.client.Account.Id ( ( ( TYPE_5 ) ( VAR_1 . METHOD_4 ( 0 ) ) ) . METHOD_6 ( ) ) ; } else { throw new TYPE_3 ( label ) ; } } } } } } ; ) label ( TYPE_3 new throw { else } ; ) ) ( METHOD_6 . ) ) ) 0 ( METHOD_4 . VAR_1 ( ) TYPE_5 ( ( ( com.google.gerrit.reviewdb.client.Account.Id new = VAR_2 { ) ) VAR_1 ( METHOD_5 . TYPE_4 ( if ; ) 0 ( METHOD_4 . status = VAR_1 TYPE_2 { ) ) 1 == ) ) ( METHOD_3 . status ( ( & & ) ) ( METHOD_2 . status ( ( if { TYPE_3 throws ) status TYPE_2 , label TYPE_1 ( METHOD_1 void private 
TYPE_1 get ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository VAR_3 , com.google.gerrit.server.query.change.ChangeData VAR_4 , int VAR_5 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_4 . change ( ) . getProject ( ) ; java.lang.String branch = VAR_4 . change ( ) . METHOD_1 ( ) . get ( ) ; java.lang.String VAR_6 = TYPE_4 . METHOD_2 ( VAR_4 . getId ( ) . get ( ) , VAR_5 , branch ) ; return get ( VAR_1 , VAR_2 , VAR_6 , VAR_3 , project , branch , VAR_4 . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . VAR_4 , branch , project , VAR_3 , VAR_6 , VAR_2 , VAR_1 ( get return ; ) branch , VAR_5 , ) ( get . ) ( getId . VAR_4 ( METHOD_2 . TYPE_4 = VAR_6 java.lang.String ; ) ( get . ) ( METHOD_1 . ) ( change . VAR_4 = branch java.lang.String ; ) ( getProject . ) ( change . VAR_4 = project com.google.gerrit.reviewdb.client.Project.NameKey { java.io.IOException , com.google.gwtorm.server.OrmException throws ) VAR_5 int , VAR_4 com.google.gerrit.server.query.change.ChangeData , VAR_3 org.eclipse.jgit.lib.Repository , VAR_2 TYPE_3 , VAR_1 TYPE_2 ( get TYPE_1 
public boolean METHOD_1 ( ) { return ( ( ( ( ( ( VAR_1 ) > = 0 ) & & ( ( VAR_2 ) > = 0 ) ) & & ( ( VAR_3 ) > = 0 ) ) & & ( ( VAR_4 ) > = 0 ) ) & & ( ( VAR_1 ) < = ( VAR_3 ) ) ) & & ( ( ( VAR_1 ) ! = ( VAR_3 ) ) || ( ( VAR_2 ) < = ( VAR_4 ) ) ) ; } } ; ) ) ) VAR_4 ( = < ) VAR_2 ( ( || ) ) VAR_3 ( = ! ) VAR_1 ( ( ( & & ) ) ) VAR_3 ( = < ) VAR_1 ( ( & & ) ) 0 = > ) VAR_4 ( ( & & ) ) 0 = > ) VAR_3 ( ( & & ) ) 0 = > ) VAR_2 ( ( & & ) 0 = > ) VAR_1 ( ( ( ( ( ( return { ) ( METHOD_1 boolean public 
public TYPE_1 < ? > METHOD_1 ( final int id ) { TYPE_1 < ? > result = null ; for ( final TYPE_2 e : VAR_1 ) { final TYPE_1 < ? > t = e . METHOD_1 ( id ) ; if ( t ! = null ) { if ( result ! = null ) { return null ; } else { result = t ; } } } return result ; } } ; result return } } } ; t = result { else } ; null return { ) null = ! result ( if { ) null = ! t ( if ; ) id ( METHOD_1 . e = t > ? < TYPE_1 final { ) VAR_1 : e TYPE_2 final ( for ; null = result > ? < TYPE_1 { ) id int final ( METHOD_1 > ? < TYPE_1 public 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new TYPE_2 ( ) { public java.lang.String toString ( ) { return STRING_2 ; } } ) ) ; assertEquals ( STRING_2 , b . METHOD_3 ( ) ) ; } } ; ) ) ( METHOD_3 . b , STRING_2 ( assertEquals ; ) ) } } ; STRING_2 return { ) ( toString java.lang.String public { ) ( TYPE_2 new ( append . b , b ( METHOD_2 ; ) ) ( METHOD_3 . b , STRING_1 ( assertEquals ; ) ) ) ) null ( ) TYPE_2 ( ( ( append . b , b ( METHOD_2 ; ) ( TYPE_1 new = b TYPE_1 final { ) ( METHOD_1 void public 
private static TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . METHOD_2 ( ) ; TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = TYPE_4 . METHOD_3 ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId ( ) . get ( ) , ps ) ; } return result ; } } ; result return } ; ) ps , ) ( get . ) ( getId . ps ( put . result { ) patchSets : ps com.google.gerrit.reviewdb.client.PatchSet ( for ; ) ( METHOD_3 . TYPE_4 = result > com.google.gerrit.reviewdb.client.PatchSet , TYPE_2 < TYPE_1 ; ) ( METHOD_2 . cd = patchSets > com.google.gerrit.reviewdb.client.PatchSet < TYPE_3 { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData ( METHOD_1 > com.google.gerrit.reviewdb.client.PatchSet , TYPE_2 < TYPE_1 static private 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) ! = null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) ! = null ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) ! = null ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_3 = null ; } TYPE_1 . METHOD_5 ( true ) ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; } } ; null = VAR_6 ; null = VAR_5 ; null = VAR_4 ; ) true ( METHOD_5 . TYPE_1 } ; null = VAR_3 ; ) ( METHOD_4 . ) ( METHOD_3 . VAR_3 { ) null = ! ) VAR_3 ( ( if } ; null = VAR_2 ; ) ( METHOD_4 . ) ( METHOD_3 . VAR_2 { ) null = ! ) VAR_2 ( ( if } ; null = VAR_1 ; ) ( METHOD_2 . VAR_1 { ) null = ! ) VAR_1 ( ( if ; ) ( METHOD_1 . super { ) ( METHOD_1 void protected 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx . getChange ( ) ; if ( ( change . getStatus ( ) ) == ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ; change . METHOD_3 ( VAR_2 ) ; change . METHOD_4 ( ctx . METHOD_5 ( ) ) ; update . METHOD_3 ( VAR_2 ) ; METHOD_6 ( ctx , update ) ; return true ; } } ; true return ; ) update , ctx ( METHOD_6 ; ) VAR_2 ( METHOD_3 . update ; ) ) ( METHOD_5 . ctx ( METHOD_4 . change ; ) VAR_2 ( METHOD_3 . change ; ) ) ( currentPatchSetId . change ( METHOD_2 . ctx = update TYPE_3 } ; ) STRING_1 ( TYPE_2 new throw { ) ) VAR_1 ( == ) ) ( getStatus . change ( ( if ; ) ( getChange . ctx = change com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException , TYPE_2 throws ) ctx TYPE_1 ( METHOD_1 boolean public 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; TYPE_3 VAR_1 = repo . METHOD_2 ( ) ; try { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; } finally { VAR_1 . METHOD_6 ( ) ; } } } } ; ) ( METHOD_6 . VAR_1 { finally } ; p return ; ) ) ) name ( METHOD_5 . repo ( METHOD_4 . ) repo ( org.eclipse.jgit.revwalk.RevWalk new , VAR_1 ( METHOD_3 . p { try ; ) ( METHOD_2 . repo = VAR_1 TYPE_3 ; ) ( TYPE_2 new = p TYPE_2 { java.io.IOException throws ) name java.lang.String , repo org.eclipse.jgit.lib.Repository ( METHOD_1 TYPE_1 private 
public TYPE_1 create ( TYPE_2 req , org.eclipse.jgit.lib.Repository db ) throws TYPE_3 { final TYPE_4 VAR_1 = ( ( TYPE_4 ) ( req . METHOD_1 ( VAR_2 ) ) ) ; if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_5 VAR_3 = factory . create ( VAR_1 , db , TYPE_6 . of ( ) ) ; TYPE_1 rp = VAR_3 . METHOD_4 ( ) ; req . METHOD_5 ( VAR_4 , VAR_3 ) ; return rp ; } } ; rp return ; ) VAR_3 , VAR_4 ( METHOD_5 . req ; ) ( METHOD_4 . VAR_3 = rp TYPE_1 ; ) ) ( of . TYPE_6 , db , VAR_1 ( create . factory = VAR_3 TYPE_5 } ; ) ( TYPE_3 new throw { ) ) ) ( METHOD_3 . ) ( METHOD_2 . VAR_1 ( ! ( if ; ) ) ) VAR_2 ( METHOD_1 . req ( ) TYPE_4 ( ( = VAR_1 TYPE_4 final { TYPE_3 throws ) db org.eclipse.jgit.lib.Repository , req TYPE_2 ( create TYPE_1 public 
public TYPE_1 METHOD_1 ( TYPE_2 account , TYPE_3 VAR_1 ) throws TYPE_4 , TYPE_5 { try { return VAR_2 . create ( VAR_3 . METHOD_2 ( account , VAR_1 ) ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_5 ( e ) ; } } } } ; ) e ( TYPE_5 new throw { ) e java.io.IOException | com.google.gwtorm.server.OrmException | TYPE_6 ( catch } ; ) ) VAR_1 , account ( METHOD_2 . VAR_3 ( create . VAR_2 return { try { TYPE_5 , TYPE_4 throws ) VAR_1 TYPE_3 , account TYPE_2 ( METHOD_1 TYPE_1 public 
void METHOD_1 ( boolean VAR_1 , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( changeId . get ( ) ) ; TYPE_5 . METHOD_3 ( VAR_3 , TYPE_6 . of ( VAR_4 , VAR_5 , VAR_6 ) ) ; if ( ! VAR_1 ) { VAR_3 . METHOD_4 ( ) ; } VAR_3 . get ( VAR_2 ) ; } } ; ) VAR_2 ( get . VAR_3 } ; ) ( METHOD_4 . VAR_3 { ) VAR_1 ! ( if ; ) ) VAR_6 , VAR_5 , VAR_4 ( of . TYPE_6 , VAR_3 ( METHOD_3 . TYPE_5 ; ) ) ( get . changeId ( METHOD_2 . TYPE_4 = VAR_3 TYPE_3 { ) VAR_2 > ChangeInfo . TYPE_2 < TYPE_1 , VAR_1 boolean ( METHOD_1 void 
public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { try { TYPE_2 VAR_3 = TYPE_3 . get ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . get ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData VAR_5 = TYPE_6 . get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_6 = TYPE_7 . get ( VAR_1 ) ; return new TYPE_8 ( VAR_6 , VAR_5 , VAR_2 ) . METHOD_1 ( VAR_3 , VAR_4 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_7 . error ( STRING_1 , e ) ; return 0 ; } } } } ; 0 return ; ) e , STRING_1 ( error . VAR_7 { ) e com.google.gwtorm.server.OrmException ( catch } ; ) VAR_4 , VAR_3 ( METHOD_1 . ) VAR_2 , VAR_5 , VAR_6 ( TYPE_8 new return ; ) VAR_1 ( get . TYPE_7 = VAR_6 org.eclipse.jgit.lib.Repository ; ) VAR_1 ( get . TYPE_6 = VAR_5 com.google.gerrit.server.query.change.ChangeData ; ) VAR_1 ( get . TYPE_5 = VAR_4 TYPE_4 ; ) VAR_1 ( get . TYPE_3 = VAR_3 TYPE_2 { try { ) VAR_2 int , VAR_1 TYPE_1 ( METHOD_1 int static public 
private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder m = new java.lang.StringBuilder ( ) ; m . append ( METHOD_2 ( ) ) ; if ( user . METHOD_3 ( ) ) { TYPE_1 u = user . METHOD_4 ( ) ; if ( u . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) { m . append ( STRING_1 ) . append ( u . METHOD_5 ( ) . METHOD_6 ( ) . get ( ) ) . append ( STRING_2 ) ; } } return m . toString ( ) ; } } ; ) ( toString . m return } } ; ) STRING_2 ( append . ) ) ( get . ) ( METHOD_6 . ) ( METHOD_5 . u ( append . ) STRING_1 ( append . m { ) ) ( METHOD_7 . ) ( METHOD_6 . ) ( METHOD_5 . u ( if ; ) ( METHOD_4 . user = u TYPE_1 { ) ) ( METHOD_3 . user ( if ; ) ) ( METHOD_2 ( append . m ; ) ( java.lang.StringBuilder new = m java.lang.StringBuilder { ) ( METHOD_1 java.lang.String private 
public TYPE_1 METHOD_1 ( TYPE_2 edit , boolean VAR_1 ) { TYPE_1 out = new TYPE_1 ( ) ; out . commit = TYPE_3 . METHOD_2 ( edit . METHOD_3 ( ) ) ; VAR_2 = edit . METHOD_4 ( ) . getRevision ( ) . get ( ) ; VAR_3 = TYPE_3 . METHOD_5 ( edit ) ; if ( VAR_1 ) { VAR_4 = METHOD_6 ( edit ) ; } return out ; } } ; out return } ; ) edit ( METHOD_6 = VAR_4 { ) VAR_1 ( if ; ) edit ( METHOD_5 . TYPE_3 = VAR_3 ; ) ( get . ) ( getRevision . ) ( METHOD_4 . edit = VAR_2 ; ) ) ( METHOD_3 . edit ( METHOD_2 . TYPE_3 = commit . out ; ) ( TYPE_1 new = out TYPE_1 { ) VAR_1 boolean , edit TYPE_2 ( METHOD_1 TYPE_1 public 
private static long METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String value ) { TYPE_2 < com.google.gerrit.server.query.change.ChangeData , ? > VAR_1 = schema . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) ; if ( VAR_1 == ( TYPE_4 ) ) { return TYPE_5 . METHOD_1 ( value ) ; } else { return TYPE_6 . METHOD_3 ( value ) ; } } } } ; ) value ( METHOD_3 . TYPE_6 return { else } ; ) value ( METHOD_1 . TYPE_5 return { ) ) TYPE_4 ( == VAR_1 ( if ; ) ) ( getName . TYPE_3 ( get . ) ( METHOD_2 . schema = VAR_1 > ? , com.google.gerrit.server.query.change.ChangeData < TYPE_2 { ) value java.lang.String , schema > com.google.gerrit.server.query.change.ChangeData < TYPE_1 ( METHOD_1 long static private 
public static TYPE_1 METHOD_1 ( TYPE_2 c ) throws TYPE_3 . OrmException , TYPE_4 { java.lang.String url = c . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 d : VAR_1 ) { if ( d . METHOD_4 ( url , c ) ) { return d . METHOD_5 ( c ) ; } } throw new TYPE_3 . OrmException ( ( STRING_1 + url ) ) ; } } ; ) ) url + STRING_1 ( ( OrmException . TYPE_3 new throw } } ; ) c ( METHOD_5 . d return { ) ) c , url ( METHOD_4 . d ( if { ) VAR_1 : d TYPE_1 ( for ; ) ( METHOD_3 . ) ( METHOD_2 . c = url java.lang.String { TYPE_4 , OrmException . TYPE_3 throws ) c TYPE_2 ( METHOD_1 TYPE_1 static public 
void METHOD_1 ( final java.lang.String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } } ; ) ) ( value . VAR_1 , ) ( label . VAR_1 ( put . VAR_4 } ; ) ) ( getMessage . e ( reject . VAR_3 throw { ) e TYPE_5 ( catch } ; ) ) ( value . VAR_1 , ) ( label . VAR_1 , VAR_2 ( METHOD_4 . TYPE_4 ; ) ) ( label . VAR_1 ( METHOD_3 . TYPE_3 { try ; ) token ( METHOD_2 . TYPE_2 = VAR_1 TYPE_2 { TYPE_1 throws ) token java.lang.String final ( METHOD_1 void 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; TYPE_4 in = new TYPE_4 ( ) ; VAR_1 = user . email ; TYPE_5 VAR_2 = VAR_3 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) ; VAR_2 . METHOD_1 ( in ) ; org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ; } } ; ) ) ) ( get . VAR_2 ( METHOD_3 . TYPE_7 , ) id . user ( of . TYPE_6 ( org.junit.Assert.assertEquals ; ) in ( METHOD_1 . VAR_2 ; ) ) ) ) ( getChangeId . r ( + STRING_1 ( ( id . ) ( changes . VAR_3 = VAR_2 TYPE_5 ; email . user = VAR_1 ; ) ( TYPE_4 new = in TYPE_4 ; ) ( METHOD_2 = r Result . TYPE_3 { TYPE_2 , java.io.IOException , TYPE_1 throws ) ( METHOD_1 void public 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( change . METHOD_2 ( ) ) ; cm . METHOD_3 ( patchSet , VAR_2 ) ; cm . METHOD_4 ( reviewers ) ; cm . METHOD_5 ( VAR_3 ) ; cm . METHOD_6 ( ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } } } ; ) e , ) ) ) ( change.getId ( + STRING_1 ( ( error . VAR_4 { ) e java.lang.Exception ( catch } ; ) ( METHOD_6 . cm ; ) VAR_3 ( METHOD_5 . cm ; ) reviewers ( METHOD_4 . cm ; ) VAR_2 , patchSet ( METHOD_3 . cm ; ) ) ( METHOD_2 . change ( METHOD_1 . cm ; ) change ( create . VAR_1 = cm TYPE_1 { try { ) ( run void public 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) & & ( ( METHOD_3 ( ) ) == ( p . METHOD_3 ( ) ) ) ; } return false ; } } ; false return } ; ) ) ) ( METHOD_3 . p ( == ) ) ( METHOD_3 ( ( & & ) ) ) ( METHOD_2 . p ( equals . ) ( METHOD_2 . TYPE_2 ( return ; ) ) VAR_1 ( ) > ? < TYPE_2 ( ( = p > ? < TYPE_2 final { ) ) ) ( METHOD_1 . VAR_1 ( == ) ) ( METHOD_1 ( ( if { ) VAR_1 TYPE_1 final ( equals boolean public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; final int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ( 0 < = VAR_1 ? VAR_1 : 0 ) ) ; display ( TYPE_1 . METHOD_4 ( ) ) ; display ( ) ; } } ; ) ( display ; ) ) ( METHOD_4 . TYPE_1 ( display ; ) ) 0 : VAR_1 ? VAR_1 = < 0 ( ( METHOD_3 . VAR_4 ; ) VAR_3 ( METHOD_2 . VAR_2 = VAR_1 int final ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( c ) ) . values ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ; } } ; ) ) ) VAR_1 ( METHOD_5 . TYPE_1 ( METHOD_4 . TYPE_3 ( METHOD_3 . ) VAR_2 ( com.google.common.truth.Truth.assertThat ; ) ( values . ) ) c ( create . VAR_4 , db ( METHOD_2 . VAR_3 = VAR_2 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_2 { com.google.gwtorm.server.OrmException throws ) VAR_1 ... TYPE_1 , c com.google.gerrit.reviewdb.client.Change ( METHOD_1 void private 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException , TYPE_1 { java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ; for ( java.lang.String VAR_2 : TYPE_4 . METHOD_2 ( ) ) { VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 ) ) ; } VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , STRING_1 ) ) ; return TYPE_5 . METHOD_1 ( repo , STRING_2 , VAR_1 ) ; } } ; ) VAR_1 , STRING_2 , repo ( METHOD_1 . TYPE_5 return ; ) ) STRING_1 , ) ( METHOD_4 . ) ( METHOD_3 . repo ( TYPE_2 new ( add . VAR_1 } ; ) ) VAR_2 , ) ( METHOD_4 . ) ( METHOD_3 . repo ( TYPE_2 new ( add . VAR_1 { ) ) ( METHOD_2 . TYPE_4 : VAR_2 java.lang.String ( for ; ) ( > < TYPE_3 new = VAR_1 > TYPE_2 < java.util.Set { TYPE_1 , java.io.IOException throws ) ( METHOD_1 org.eclipse.jgit.revwalk.RevCommit private 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } } ; ) VAR_2 ( METHOD_7 . ) VAR_9 ( METHOD_7 . ) VAR_8 , VAR_7 ( METHOD_6 . ) VAR_6 , VAR_5 ( METHOD_6 . ) VAR_3 ( METHOD_5 . ) VAR_1 , STRING_1 ( METHOD_4 . ) VAR_4 ( assertThat ; ) VAR_3 , changeId . VAR_1 ( METHOD_3 ; ) VAR_2 ( METHOD_2 = VAR_1 TYPE_1 { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ; } } ; ) STRING_6 , STRING_5 , STRING_2 , ) STRING_4 + ) VAR_4 ( ( , ) STRING_3 + ) VAR_4 ( ( , ) STRING_4 + ) VAR_3 ( ( , ) STRING_3 + ) VAR_3 ( ( ( METHOD_5 ; ) user ( METHOD_4 ; ) STRING_2 , VAR_2 , VAR_1 ( METHOD_3 ; ) STRING_1 , VAR_2 , VAR_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository repo ) { return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; } } ; ) ) ) VAR_6 ( TYPE_12 new , ) VAR_7 ( TYPE_11 new , ) VAR_6 , repo , VAR_1 ( TYPE_10 new , ) VAR_2 , VAR_5 , VAR_4 , VAR_1 ( TYPE_9 new , ) VAR_1 ( TYPE_8 new , ) VAR_4 , VAR_1 ( TYPE_7 new , ) VAR_3 , VAR_1 ( TYPE_6 new , ) VAR_1 ( TYPE_5 new ( of . TYPE_4 ( TYPE_1 new return { ) repo org.eclipse.jgit.lib.Repository , VAR_2 TYPE_3 , VAR_1 TYPE_2 ( METHOD_1 TYPE_1 private 
private boolean METHOD_1 ( TYPE_1 . ProjectConfig config , java.util.Set < java.lang.String > VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { for ( TYPE_4 VAR_3 : VAR_2 . METHOD_2 ( ) ) { for ( TYPE_5 VAR_4 : VAR_3 . METHOD_3 ( ) ) { METHOD_4 ( VAR_4 ) ; } } boolean VAR_5 = ! ( VAR_2 . equals ( config . METHOD_5 ( VAR_2 . getName ( ) ) ) ) ; config . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_6 ( VAR_2 . getName ( ) ) ; return VAR_5 ; } } ; VAR_5 return ; ) ) ( getName . VAR_2 ( METHOD_6 . VAR_1 ; ) VAR_2 ( METHOD_1 . config ; ) ) ) ) ( getName . VAR_2 ( METHOD_5 . config ( equals . VAR_2 ( ! = VAR_5 boolean } } ; ) VAR_4 ( METHOD_4 { ) ) ( METHOD_3 . VAR_3 : VAR_4 TYPE_5 ( for { ) ) ( METHOD_2 . VAR_2 : VAR_3 TYPE_4 ( for { TYPE_3 throws ) VAR_2 TYPE_2 , VAR_1 > java.lang.String < java.util.Set , config ProjectConfig . TYPE_1 ( METHOD_1 boolean private 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; } } ; ) class Factory . VAR_10 ( factory ; ) class Factory . VAR_9 ( factory ; ) class Factory . VAR_8 ( factory ; ) class Factory . VAR_7 ( factory ; ) class Factory . VAR_6 ( factory ; ) class Factory . VAR_5 ( factory ; ) class Factory . VAR_4 ( factory ; ) class Factory . VAR_3 ( factory ; ) class Factory . VAR_2 ( factory ; ) class Factory . VAR_1 ( factory { ) ( METHOD_1 void protected 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , false ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 ) ; } } ; ) STRING_6 , STRING_5 , STRING_4 ( METHOD_5 . ) ) m ( METHOD_4 . TYPE_2 ( com.google.common.truth.Truth.assertThat ; ) false , VAR_1 , ) ( METHOD_3 , repo ( METHOD_2 . VAR_2 = m > TYPE_1 < java.util.List ; } STRING_3 , STRING_2 , STRING_1 { ] [ java.lang.String new = VAR_1 ] [ java.lang.String { java.lang.Exception throws ) ( METHOD_1 void public 
protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) ! = null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } } ; ) ( METHOD_5 . ) ( METHOD_4 . TYPE_3 return } } { ) e TYPE_2 ( catch } ; ) ( METHOD_3 . ) ) ( METHOD_2 ( TYPE_1 new return { try { ) null = ! ) ) ( METHOD_2 ( ( if { ) ( METHOD_1 java.lang.String protected 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) ) { final TYPE_1 VAR_2 = VAR_3 . create ( VAR_4 , p . getAccountId ( ) ) ; if ( VAR_2 . METHOD_2 ( ) . contains ( VAR_5 ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) VAR_5 ( contains . ) ( METHOD_2 . VAR_2 ( if ; ) ) ( getAccountId . p , VAR_4 ( create . VAR_3 = VAR_2 TYPE_1 final { ) ) ( approvals . VAR_1 : p PatchSetApproval . com.google.gerrit.reviewdb.client ( for { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( STRING_2 ) . METHOD_9 ( ) , TYPE_1 . METHOD_3 ( STRING_3 ) ) ; } } ; ) ) STRING_3 ( METHOD_3 . TYPE_1 , ) ( METHOD_9 . ) STRING_2 ( METHOD_8 . ) VAR_2 ( METHOD_7 . ) VAR_1 ( METHOD_6 . ) ( METHOD_5 . TYPE_2 ( METHOD_4 ; ) ) STRING_1 ( METHOD_3 . TYPE_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
private void METHOD_1 ( ) throws TYPE_1 { if ( ( ( VAR_1 ) ! = null ) & & ( ( ( VAR_2 ) == null ) || ( ( VAR_2 ) ! = ( VAR_1 ) ) ) ) { TYPE_2 VAR_3 = VAR_4 . create ( VAR_5 , VAR_1 , rw , db , VAR_6 , VAR_7 , VAR_8 ) ; try { VAR_3 . update ( ) ; } catch ( TYPE_3 e ) { VAR_9 . error ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; } } } } } } ; ) ) ) ) ( getMessage . e ( + STRING_1 ( ( error . VAR_9 { ) e TYPE_3 ( catch } ; ) ( update . VAR_3 { try ; ) VAR_8 , VAR_7 , VAR_6 , db , rw , VAR_1 , VAR_5 ( create . VAR_4 = VAR_3 TYPE_2 { ) ) ) ) VAR_1 ( = ! ) VAR_2 ( ( || ) null == ) VAR_2 ( ( ( & & ) null = ! ) VAR_1 ( ( ( if { TYPE_1 throws ) ( METHOD_1 void private 
public static < TYPE_1 > void METHOD_1 ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_4 ( new TYPE_8 < TYPE_1 > ( VAR_1 , key ) ) . in ( VAR_3 ) ; } } ; ) VAR_3 ( in . ) ) key , VAR_1 ( > TYPE_1 < TYPE_8 new ( METHOD_4 . ) key ( bind . binder ; ) ) ) ) ) ( METHOD_3 . VAR_1 , class VAR_2 ( METHOD_2 . TYPE_7 ( get . TYPE_6 ( ) > > TYPE_1 < TYPE_5 < Key . TYPE_4 ( ( = key > > TYPE_1 < TYPE_5 < Key . TYPE_4 { ) VAR_1 > TYPE_1 < TYPE_3 , binder TYPE_2 ( METHOD_1 void > TYPE_1 < static public 
public static void METHOD_1 ( TYPE_1 < java.lang.String > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( java.lang.String VAR_3 : VAR_1 ) { com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_3 ) ) . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) ; } com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_2 + VAR_2 ) ) . METHOD_4 ( ( ( TYPE_1 < ? > ) ( VAR_2 ) ) ) . isEmpty ( ) ; } } ; ) ( isEmpty . ) ) ) VAR_2 ( ) > ? < TYPE_1 ( ( ( METHOD_4 . ) ) VAR_2 + STRING_2 ( ( METHOD_3 . ) ( METHOD_2 . com.google.common.truth.Truth } ; ) ( METHOD_6 . ) ) VAR_3 ( METHOD_5 . VAR_2 ( METHOD_4 . ) ) VAR_3 + STRING_1 ( ( METHOD_3 . ) ( METHOD_2 . com.google.common.truth.Truth { ) VAR_1 : VAR_3 java.lang.String ( for { ) VAR_2 > java.lang.String < java.util.Set , VAR_1 > java.lang.String < TYPE_1 ( METHOD_1 void static public 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 ui , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , TYPE_3 { for ( TYPE_1 VAR_2 : VAR_1 ) { ui . message ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) ; VAR_2 . METHOD_3 ( db ) ; } TYPE_4 s = ( ( TYPE_4 ) ( db ) ) ; TYPE_5 e = new TYPE_5 ( s ) ; try { s . METHOD_1 ( e ) ; } finally { e . close ( ) ; } } } } ; ) ( close . e { finally } ; ) e ( METHOD_1 . s { try ; ) s ( TYPE_5 new = e TYPE_5 ; ) ) db ( ) TYPE_4 ( ( = s TYPE_4 } ; ) db ( METHOD_3 . VAR_2 ; ) ) ) ( METHOD_2 . VAR_2 , STRING_1 ( java.lang.String.format ( message . ui { ) VAR_1 : VAR_2 TYPE_1 ( for { TYPE_3 , com.google.gwtorm.server.OrmException throws ) db com.google.gerrit.reviewdb.server.ReviewDb , ui TYPE_2 , VAR_1 > TYPE_1 < java.util.List ( METHOD_1 void private 
public TYPE_1 METHOD_1 ( final java.lang.String name , java.lang.String value ) { if ( ( value ! = null ) & & ( ( value . length ( ) ) > 0 ) ) { final java.lang.String e = METHOD_2 ( name ) ; return METHOD_3 ( name , ( ( e . length ( ) ) > 0 ? ( e + STRING_1 ) + value : e ) ) ; } return this ; } } ; this return } ; ) ) e : value + ) STRING_1 + e ( ? 0 > ) ) ( length . e ( ( , name ( METHOD_3 return ; ) name ( METHOD_2 = e java.lang.String final { ) ) 0 > ) ) ( length . value ( ( & & ) null = ! value ( ( if { ) value java.lang.String , name java.lang.String final ( METHOD_1 TYPE_1 public 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_2 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ) ( value . ) revision ( apply . ) ( get . VAR_1 ( ) > TYPE_1 , java.lang.String < java.util.Map ( ( return { try { TYPE_2 throws ) ( METHOD_1 > TYPE_1 , java.lang.String < java.util.Map public 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ; } } } } ; ) } } ; ) ( METHOD_7 . VAR_2 ; ) true ( METHOD_6 . VAR_2 ; ) ( METHOD_5 . event { ) event TYPE_4 final ( METHOD_4 void public { ) ) ( METHOD_3 . TYPE_3 , CHAR_1 , 0 ( TYPE_2 new ( METHOD_2 . TYPE_1 = VAR_1 { ) null == ) VAR_1 ( ( if ; ) ( METHOD_1 . super { ) ( METHOD_1 void public 
public java.util.Set < java.lang.String > METHOD_1 ( ) throws TYPE_1 { try { return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_1 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) ) ) ) ( value . ) revision ( apply . ) true ( METHOD_3 . ) ( get . VAR_1 ( ) > java.lang.String < TYPE_3 ( ( ( METHOD_2 . TYPE_2 return { try { TYPE_1 throws ) ( METHOD_1 > java.lang.String < java.util.Set public 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { TYPE_5 u = user . get ( ) ; if ( u . METHOD_1 ( ) ) { u . METHOD_2 ( ) . METHOD_3 ( ) ; } return VAR_1 . create ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } } } ; ) e , STRING_1 ( TYPE_4 new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; ) change ( format . ) s ( create . VAR_1 return } ; ) ( METHOD_3 . ) ( METHOD_2 . u { ) ) ( METHOD_1 . u ( if ; ) ( get . user = u TYPE_5 { try { TYPE_4 throws ) s > TYPE_3 < TYPE_2 ( get ChangeInfo . TYPE_1 public 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) ; assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ; } } ; ) ) ( toString . a , ) VAR_2 + ) STRING_5 + ) VAR_1 + STRING_4 ( ( ( ( assertEquals ; ) ) VAR_1 ( METHOD_4 . a , STRING_3 ( assertEquals ; ) ) ( METHOD_3 . ) ( METHOD_2 . a , VAR_1 ( assertEquals ; ) VAR_2 , VAR_1 ( TYPE_1 new = a TYPE_1 ; STRING_2 = VAR_2 java.lang.String ; STRING_1 = VAR_1 java.lang.String { ) ( METHOD_1 void public 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( db , c ) . METHOD_2 ( ) ; return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; } } ; ) VAR_1 , notes , db ( METHOD_1 . VAR_3 return ; ) ( METHOD_2 . ) c , db ( create . VAR_2 = notes TYPE_1 ; ) ) ( getParentKey . VAR_1 ( get . ) ( changes . db = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 PatchSetApproval . com.google.gerrit.reviewdb.client private 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . values ( ) ; TYPE_2 user = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; return VAR_1 . contains ( user . getAccountId ( ) ) ; } return false ; } } ; false return } ; ) ) ( getAccountId . user ( contains . VAR_1 return ; ) ) ) ( METHOD_2 ( ) TYPE_2 ( ( = user TYPE_2 ; ) ( values . ) ( reviewers . ) cd , db ( METHOD_4 = VAR_1 > com.google.gerrit.reviewdb.client.Account.Id < TYPE_1 { ) ) ( METHOD_3 . ) ( METHOD_2 ( if { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean public 
private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { walk . METHOD_2 ( walk . parseCommit ( VAR_1 ) ) ; for ( org.eclipse.jgit.revwalk.RevCommit commit : walk ) { walk . METHOD_3 ( commit ) ; METHOD_4 ( commit ) ; } METHOD_5 ( ) ; for ( TYPE_2 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_2 : approvals . METHOD_6 ( ) . values ( ) ) { java.util.Collections . METHOD_7 ( ( ( java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > ) ( VAR_2 ) ) , VAR_3 ) ; } } } } ; ) VAR_3 , ) ) VAR_2 ( ) > PatchSetApproval . com.google.gerrit.reviewdb.client < java.util.List ( ( ( METHOD_7 . java.util.Collections { ) ) ( values . ) ( METHOD_6 . approvals : VAR_2 > PatchSetApproval . com.google.gerrit.reviewdb.client < TYPE_2 ( for ; ) ( METHOD_5 } ; ) commit ( METHOD_4 ; ) commit ( METHOD_3 . walk { ) walk : commit org.eclipse.jgit.revwalk.RevCommit ( for ; ) ) VAR_1 ( parseCommit . walk ( METHOD_2 . walk { TYPE_1 , java.io.IOException throws ) ( METHOD_1 void private 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) . METHOD_2 ( ) ) & & ( ! ( METHOD_3 ( db , cd ) ) ) ) { return false ; } return ( VAR_1 . METHOD_1 ( ) ) & & ( METHOD_4 ( ) . getProject ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) ( METHOD_5 . ) ( getProject . ) ( METHOD_4 ( & & ) ) ( METHOD_1 . VAR_1 ( return } ; false return { ) ) ) ) cd , db ( METHOD_3 ( ! ( & & ) ) ( METHOD_2 . ) ( getChange ( ( if { com.google.gwtorm.server.OrmException throws ) cd com.google.gerrit.server.query.change.ChangeData , db com.google.gerrit.reviewdb.server.ReviewDb ( METHOD_1 boolean private 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ! ( name . equals ( VAR_2 . name ) ) ) || ( ( VAR_3 ) ! = ( VAR_4 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( VAR_2 . METHOD_1 ( ) ) ) ; } } ; ) ) ) ( METHOD_1 . VAR_2 ( > TYPE_4 < TYPE_3 new ( equals . ) ) ( METHOD_1 ( > TYPE_4 < TYPE_3 new return } ; false return { ) ) ) VAR_4 ( = ! ) VAR_3 ( ( || ) ) ) name . VAR_2 ( equals . name ( ! ( ( if ; ) ) VAR_1 ( ) TYPE_2 ( ( = VAR_2 TYPE_2 final } ; false return { ) ) TYPE_2 instanceof VAR_1 ( ! ( if { ) VAR_1 TYPE_1 final ( equals boolean public 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; display ( result ) ; } } ) ; } } ; ) } } ; ) result ( display ; ) false ( METHOD_3 . VAR_2 ; ) false ( METHOD_3 . VAR_1 ; ) true ( METHOD_2 { ) result TYPE_3 final ( onSuccess void public { ) ( > TYPE_3 < TYPE_2 new , VAR_3 ( METHOD_4 . TYPE_1 ; ) ( METHOD_1 . super ; ) false ( METHOD_3 . VAR_2 ; ) false ( METHOD_3 . VAR_1 ; ) false ( METHOD_2 { ) ( METHOD_1 void public 
public java.lang.String format ( ) { if ( ( value ) == ( ( short ) ( 0 ) ) ) { return CHAR_1 + ( name ) ; } else if ( ( value ) == ( ( short ) ( 1 ) ) ) { return name ; } else if ( ( value ) < 0 ) { return ( name ) + ( value ) ; } else { return ( ( name ) + CHAR_2 ) + ( value ) ; } } } } ; ) value ( + ) CHAR_2 + ) name ( ( return { else } ; ) value ( + ) name ( return { ) 0 < ) value ( ( if else } ; name return { ) ) ) 1 ( ) short ( ( == ) value ( ( if else } ; ) name ( + CHAR_1 return { ) ) ) 0 ( ) short ( ( == ) value ( ( if { ) ( format java.lang.String public 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path , TYPE_1 < TYPE_2 > VAR_1 ) { if ( ( id . get ( ) ) ! = 0 ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_4 . METHOD_2 ( id . getParentKey ( ) . get ( ) , path ) . view ( STRING_2 ) . get ( VAR_1 ) ; } } ; ) VAR_1 ( get . ) STRING_2 ( view . ) path , ) ( get . ) ( getParentKey . id ( METHOD_2 . TYPE_4 } ; ) STRING_1 ( TYPE_3 new throw { ) 0 = ! ) ) ( get . id ( ( if { ) VAR_1 > TYPE_2 < TYPE_1 , path java.lang.String , id com.google.gerrit.reviewdb.client.PatchSet.Id ( METHOD_1 void static public 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) ) { if ( ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) & & ( ( p . getValue ( ) ) ! = 0 ) ) { return true ; } } return false ; } } ; false return } } ; true return { ) ) 0 = ! ) ) ( getValue . p ( ( & & ) ) VAR_2 ( equals . ) ( METHOD_2 . p ( ( if { ) ) ( approvals . VAR_1 : p PatchSetApproval . com.google.gerrit.reviewdb.client ( for ; ) ( currentPatchSetId . c = VAR_2 com.google.gerrit.reviewdb.client.PatchSet.Id } ; false return { ) null == c ( if ; ) ( change . VAR_1 = c com.google.gerrit.reviewdb.client.Change { com.google.gwtorm.server.OrmException throws ) VAR_1 com.google.gerrit.server.query.change.ChangeData final ( METHOD_1 boolean public 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ; TYPE_2 VAR_3 = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 class ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . name ) . isEqualTo ( VAR_1 ) ; com.google.gerrit.reviewdb.client . AccountGroup group = VAR_5 . get ( new TYPE_3 . NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( group ) . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( group , VAR_3 ) ; } } ; ) VAR_3 , group ( METHOD_6 . TYPE_4 ; ) ( METHOD_5 . ) group ( com.google.common.truth.Truth.assertThat ; ) ) VAR_1 ( NameKey . TYPE_3 new ( get . VAR_5 = group AccountGroup . com.google.gerrit.reviewdb.client ; ) VAR_1 ( isEqualTo . ) name . VAR_3 ( com.google.common.truth.Truth.assertThat ; ) class VAR_4 , ) ( METHOD_4 . r ( METHOD_3 . ) ( METHOD_2 = VAR_3 TYPE_2 ; ) ) VAR_1 + STRING_2 ( ( put . VAR_2 = r TYPE_1 ; STRING_1 = VAR_1 java.lang.String final { java.lang.Exception throws ) ( METHOD_1 void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ; TYPE_2 d = util . user ( VAR_1 , VAR_3 ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; METHOD_4 ( STRING_5 , d . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; } } ; ) ) ( METHOD_6 . ) STRING_4 ( METHOD_5 . d , STRING_5 ( METHOD_4 ; ) ) ( METHOD_6 . ) STRING_4 ( METHOD_5 . u , STRING_3 ( METHOD_4 ; ) VAR_3 , VAR_1 ( user . util = d TYPE_2 ; ) VAR_3 , VAR_1 ( user . util = u TYPE_2 ; ) STRING_2 , VAR_4 , VAR_2 , ) ( METHOD_3 . util ( METHOD_2 . TYPE_1 ; ) STRING_1 , VAR_3 , VAR_2 , VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
private < TYPE_1 extends TYPE_2 < ? > > void METHOD_1 ( final TYPE_3 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 ) { METHOD_1 ( VAR_1 , VAR_2 . name ( ) , ( VAR_3 ! = null ? VAR_3 . name ( ) : STRING_1 ) ) ; } } ; ) ) STRING_1 : ) ( name . VAR_3 ? null = ! VAR_3 ( , ) ( name . VAR_2 , VAR_1 ( METHOD_1 { ) VAR_3 TYPE_1 final , VAR_2 TYPE_1 final , VAR_1 TYPE_3 final ( METHOD_1 void > > ? < TYPE_2 extends TYPE_1 < private 
private < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) { TYPE_5 < TYPE_1 > VAR_3 = new TYPE_5 < TYPE_1 > ( VAR_4 , VAR_2 ) ; try { if ( ! ( VAR_4 ) ) { TYPE_6 . METHOD_2 ( ) ; } METHOD_3 ( VAR_1 ) . METHOD_4 ( null , VAR_3 ) ; } catch ( TYPE_7 e ) { VAR_3 . METHOD_5 ( null , e ) ; } } } } ; ) e , null ( METHOD_5 . VAR_3 { ) e TYPE_7 ( catch } ; ) VAR_3 , null ( METHOD_4 . ) VAR_1 ( METHOD_3 } ; ) ( METHOD_2 . TYPE_6 { ) ) VAR_4 ( ! ( if { try ; ) VAR_2 , VAR_4 ( > TYPE_1 < TYPE_5 new = VAR_3 > TYPE_1 < TYPE_5 { ) VAR_2 > TYPE_1 < TYPE_4 , VAR_1 TYPE_3 ( METHOD_1 void > TYPE_2 extends TYPE_1 < private 
private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { TYPE_1 result = new TYPE_1 ( ) ; for ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > VAR_1 : schema . METHOD_2 ( cd , VAR_2 ) ) { if ( ( VAR_1 . METHOD_3 ( ) ) ! = null ) { add ( result , VAR_1 ) ; } } return result ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } } } } ; ) e ( java.io.IOException new throw { ) e com.google.gwtorm.server.OrmException ( catch } ; result return } } ; ) VAR_1 , result ( add { ) null = ! ) ) ( METHOD_3 . VAR_1 ( ( if { ) ) VAR_2 , cd ( METHOD_2 . schema : VAR_1 > com.google.gerrit.server.query.change.ChangeData < TYPE_2 ( for ; ) ( TYPE_1 new = result TYPE_1 { try { java.io.IOException throws ) cd com.google.gerrit.server.query.change.ChangeData ( METHOD_1 TYPE_1 private 
private void METHOD_1 ( final TYPE_1 result , final TYPE_2 . Id VAR_1 , final TYPE_3 . Id VAR_2 , final TYPE_4 . ReviewDb db , final TYPE_5 VAR_3 ) throws TYPE_6 . OrmException { METHOD_1 ( result . change , VAR_4 . getId ( ) , VAR_1 , VAR_2 , db , VAR_3 ) ; } } ; ) VAR_3 , db , VAR_2 , VAR_1 , ) ( getId . VAR_4 , change . result ( METHOD_1 { OrmException . TYPE_6 throws ) VAR_3 TYPE_5 final , db ReviewDb . TYPE_4 final , VAR_2 Id . TYPE_3 final , VAR_1 Id . TYPE_2 final , result TYPE_1 final ( METHOD_1 void private 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_3 ) ) ; assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_5 ) ) ; assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ; } } ; ) ) STRING_7 ( METHOD_2 . TYPE_1 , STRING_6 ( assertEquals ; ) ) STRING_5 ( METHOD_2 . TYPE_1 , STRING_4 ( assertEquals ; ) ) STRING_3 ( METHOD_2 . TYPE_1 , STRING_2 ( assertEquals ; ) ) STRING_1 ( METHOD_2 . TYPE_1 , STRING_1 ( assertEquals { ) ( METHOD_1 void public 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_5 , project ) ; TYPE_1 in = METHOD_4 ( VAR_3 ) ; in . branch = STRING_1 ; METHOD_5 ( in , VAR_4 class , STRING_6 ) ; } } ; ) STRING_6 , class VAR_4 , in ( METHOD_5 ; STRING_1 = branch . in ; ) VAR_3 ( METHOD_4 = in TYPE_1 ; ) project , STRING_5 , VAR_2 , VAR_1 ( METHOD_3 ; ) STRING_4 , STRING_3 , STRING_2 , STRING_1 ( METHOD_2 { java.lang.Exception throws ) ( METHOD_1 void public 
public void run ( ) { try { final TYPE_1 cm ; cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( me ) ; cm . METHOD_2 ( ps , info ) ; cm . METHOD_3 ( reviewers ) ; cm . METHOD_4 ( VAR_2 ) ; cm . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } } } ; ) e , ) ) ) ( change.getId ( + STRING_1 ( ( error . VAR_3 { ) e java.lang.Exception ( catch } ; ) ( METHOD_5 . cm ; ) VAR_2 ( METHOD_4 . cm ; ) reviewers ( METHOD_3 . cm ; ) info , ps ( METHOD_2 . cm ; ) me ( METHOD_1 . cm ; ) change ( create . VAR_1 = cm ; cm TYPE_1 final { try { ) ( run void public 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 new TYPE_2 ( VAR_3 , false ) ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_4 . METHOD_7 ( cd ) ; VAR_4 . METHOD_7 ( cd ) ; METHOD_8 ( ) ; } } ; ) ( METHOD_8 ; ) cd ( METHOD_7 . VAR_4 ; ) cd ( METHOD_7 . VAR_4 ; ) ( METHOD_6 ; ) ( METHOD_5 . ) ( METHOD_4 . TYPE_1 ; ) ) false , VAR_3 ( TYPE_2 new VAR_2 ( METHOD_3 . VAR_1 ; ) VAR_1 ( METHOD_2 . TYPE_1 { ) ( METHOD_1 void public 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return new TYPE_1 ( ) { public void run ( ) { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } } ; case VAR_6 : return new TYPE_1 ( ) { public void run ( ) { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } } ; default : return new TYPE_1 ( ) { public void run ( ) { } } ; } } } } ; } } { ) ( run void public { ) ( TYPE_1 new return : default ; } } ; ) ( METHOD_2 . ) VAR_5 : VAR_8 ? VAR_7 ( { ) ( run void public { ) ( TYPE_1 new return : VAR_6 case ; } } ; ) ( METHOD_2 . ) VAR_5 : VAR_4 ? VAR_3 ( { ) ( run void public { ) ( TYPE_1 new return : VAR_2 case { ) VAR_1 ( switch { ) VAR_1 TYPE_2 ( METHOD_1 TYPE_1 
public com.google.gerrit.reviewdb.client.PatchSet patch ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { if ( ( ( VAR_1 ) ! = null ) & & ( VAR_1 . getId ( ) . equals ( psId ) ) ) { return VAR_1 ; } for ( com.google.gerrit.reviewdb.client.PatchSet ps : METHOD_1 ( ) ) { if ( ps . getId ( ) . equals ( psId ) ) { return ps ; } } return null ; } } ; null return } } ; ps return { ) ) psId ( equals . ) ( getId . ps ( if { ) ) ( METHOD_1 : ps com.google.gerrit.reviewdb.client.PatchSet ( for } ; VAR_1 return { ) ) ) psId ( equals . ) ( getId . VAR_1 ( & & ) null = ! ) VAR_1 ( ( ( if { com.google.gwtorm.server.OrmException throws ) psId com.google.gerrit.reviewdb.client.PatchSet.Id ( patch com.google.gerrit.reviewdb.client.PatchSet public 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ; if ( ( args . length ) > 1 ) { return ( VAR_2 + STRING_1 ) + ( args [ 1 ] ) ; } else { return VAR_2 ; } } } } ; VAR_2 return { else } ; ) ] 1 [ args ( + ) STRING_1 + VAR_2 ( return { ) 1 > ) length . args ( ( if ; ) ( METHOD_3 . VAR_1 = args ] [ java.lang.String ; ) ( METHOD_2 . VAR_1 = VAR_2 java.lang.String { ) VAR_1 TYPE_1 ( METHOD_1 java.lang.String private 
private TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( name ) ; account . METHOD_4 ( email ) ; return new TYPE_1 ( new TYPE_3 ( VAR_2 ) , account , java.util.Collections . METHOD_5 ( ) , java.util.Collections . METHOD_5 ( ) , new TYPE_4 < > ( ) ) ; } } ; ) ) ( > < TYPE_4 new , ) ( METHOD_5 . java.util.Collections , ) ( METHOD_5 . java.util.Collections , account , ) VAR_2 ( TYPE_3 new ( TYPE_1 new return ; ) email ( METHOD_4 . account ; ) name ( METHOD_3 . account ; ) ) ( METHOD_2 . TYPE_2 , VAR_1 ( com.google.gerrit.reviewdb.client.Account new = account com.google.gerrit.reviewdb.client.Account final ; ) INT_1 ( com.google.gerrit.reviewdb.client.Account.Id new = VAR_1 com.google.gerrit.reviewdb.client.Account.Id final { ) email java.lang.String , name java.lang.String ( METHOD_1 TYPE_1 private 
